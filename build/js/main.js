(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/emmanash/hacks/rail-fyi-client/app/js/App.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Header = require('./components/Header');

var _Header2 = _interopRequireDefault(_Header);

var _Footer = require('./components/Footer');

var _Footer2 = _interopRequireDefault(_Footer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  params: _react2.default.PropTypes.object,
  query: _react2.default.PropTypes.object,
  children: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.array, _react2.default.PropTypes.object])
};

var App = function (_React$Component) {
  _inherits(App, _React$Component);

  function App(props) {
    _classCallCheck(this, App);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(App).call(this, props));
  }

  _createClass(App, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      console.log('About to mount App');
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {}
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {}
  }, {
    key: 'renderChildren',
    value: function renderChildren() {
      return _react2.default.cloneElement(this.props.children, {
        params: this.props.params,
        query: this.props.query
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_Header2.default, null),
        this.renderChildren(),
        _react2.default.createElement(_Footer2.default, null)
      );
    }
  }]);

  return App;
}(_react2.default.Component);

App.propTypes = propTypes;

exports.default = App;

},{"./components/Footer":"/Users/emmanash/hacks/rail-fyi-client/app/js/components/Footer.js","./components/Header":"/Users/emmanash/hacks/rail-fyi-client/app/js/components/Header.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/app/js/Routes.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _createBrowserHistory = require('history/lib/createBrowserHistory');

var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

var _App = require('./App');

var _App2 = _interopRequireDefault(_App);

var _HomePage = require('./pages/HomePage');

var _HomePage2 = _interopRequireDefault(_HomePage);

var _SearchPage = require('./pages/SearchPage');

var _SearchPage2 = _interopRequireDefault(_SearchPage);

var _NotFoundPage = require('./pages/NotFoundPage');

var _NotFoundPage2 = _interopRequireDefault(_NotFoundPage);

var _StaffForm = require('./components/StaffForm');

var _StaffForm2 = _interopRequireDefault(_StaffForm);

var _NearestStation = require('./components/NearestStation');

var _NearestStation2 = _interopRequireDefault(_NearestStation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _react2.default.createElement(
  _reactRouter.Router,
  { history: (0, _createBrowserHistory2.default)() },
  _react2.default.createElement(
    _reactRouter.Route,
    { path: '/', component: _App2.default },
    _react2.default.createElement(_reactRouter.IndexRoute, { component: _HomePage2.default }),
    _react2.default.createElement(_reactRouter.Route, { path: '/', component: _HomePage2.default }),
    _react2.default.createElement(_reactRouter.Route, { path: '/search', component: _SearchPage2.default }),
    _react2.default.createElement(_reactRouter.Route, { path: '/staff-form', component: _StaffForm2.default }),
    _react2.default.createElement(_reactRouter.Route, { path: '/nearest-station', component: _NearestStation2.default }),
    _react2.default.createElement(_reactRouter.Route, { path: '*', component: _NotFoundPage2.default })
  )
);

},{"./App":"/Users/emmanash/hacks/rail-fyi-client/app/js/App.js","./components/NearestStation":"/Users/emmanash/hacks/rail-fyi-client/app/js/components/NearestStation.js","./components/StaffForm":"/Users/emmanash/hacks/rail-fyi-client/app/js/components/StaffForm.js","./pages/HomePage":"/Users/emmanash/hacks/rail-fyi-client/app/js/pages/HomePage.js","./pages/NotFoundPage":"/Users/emmanash/hacks/rail-fyi-client/app/js/pages/NotFoundPage.js","./pages/SearchPage":"/Users/emmanash/hacks/rail-fyi-client/app/js/pages/SearchPage.js","history/lib/createBrowserHistory":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createBrowserHistory.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js","react-router":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/index.js"}],"/Users/emmanash/hacks/rail-fyi-client/app/js/components/Footer.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Footer = function (_React$Component) {
  _inherits(Footer, _React$Component);

  function Footer(props) {
    _classCallCheck(this, Footer);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Footer).call(this, props));
  }

  _createClass(Footer, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'footer',
        null,
        'Footer'
      );
    }
  }]);

  return Footer;
}(_react2.default.Component);

exports.default = Footer;

},{"react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/app/js/components/Header.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Header = function (_React$Component) {
  _inherits(Header, _React$Component);

  function Header(props) {
    _classCallCheck(this, Header);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Header).call(this, props));
  }

  _createClass(Header, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'header',
        null,
        'Header'
      );
    }
  }]);

  return Header;
}(_react2.default.Component);

exports.default = Header;

},{"react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/app/js/components/NearestStation.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _stationList = require('../data/station-list');

var _stationList2 = _interopRequireDefault(_stationList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NearestStation = function (_React$Component) {
  _inherits(NearestStation, _React$Component);

  function NearestStation(props) {
    _classCallCheck(this, NearestStation);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NearestStation).call(this, props));

    _this.stationList = _stationList2.default;
    _this.state = {};
    _this._findNearestLocation();

    return _this;
  }

  _createClass(NearestStation, [{
    key: '_determineDistance',
    value: function _determineDistance(lat1, lon1, lat2, lon2) {
      var p = 0.017453292519943295; // Math.PI / 180
      var c = Math.cos;
      var a = 0.5 - c((lat2 - lat1) * p) / 2 + c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p)) / 2;

      return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km
    }
  }, {
    key: '_updateLocation',
    value: function _updateLocation(station, distance) {
      this.setState({
        nearestCode: station.crsCode,
        nearestName: station.name,
        distance: Math.round(distance)
      });
    }
  }, {
    key: '_findNearestLocation',
    value: function _findNearestLocation() {
      var _this2 = this;

      var navigator = window.navigator;

      if (navigator && navigator.geolocation) {

        navigator.geolocation.getCurrentPosition(function (pos) {
          var distances = _this2.stationList.map(function (station) {
            return _this2._determineDistance(pos.coords.latitude, pos.coords.longitude, station.latitude, station.longitude);
          });

          var minValue = Infinity;
          var minIndex = 0;
          for (var i = 0; i < distances.length; i++) {
            if (minValue > distances[i]) {
              minIndex = i;
              minValue = distances[i];
            }
          }

          var station = _this2.stationList[minIndex];
          var distance = distances[minIndex];

          _this2._updateLocation(station, distance);
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var nearest = _react2.default.createElement(
        'p',
        null,
        'Nearest station: ',
        _react2.default.createElement(
          'a',
          { href: this.state.nearestCode },
          this.state.nearestName
        ),
        ' ',
        this.state.distance,
        ' km'
      );
      return _react2.default.createElement(
        'div',
        null,
        this.state.nearestCode ? nearest : 'Finding nearest station...'
      );
    }
  }]);

  return NearestStation;
}(_react2.default.Component);

exports.default = NearestStation;

},{"../data/station-list":"/Users/emmanash/hacks/rail-fyi-client/app/js/data/station-list.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/app/js/components/ShowTweet.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ShowTweet = function (_React$Component) {
  _inherits(ShowTweet, _React$Component);

  function ShowTweet(props) {
    _classCallCheck(this, ShowTweet);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ShowTweet).call(this, props));

    _this.state = Object.assign({}, { tweet: null }, _this.props);
    return _this;
  }

  _createClass(ShowTweet, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'container' },
        _react2.default.createElement(
          'div',
          { className: 'row' },
          _react2.default.createElement('textarea', { name: 'tweet', id: 'tweet', cols: '30', rows: '10', className: 'u-full-width', value: this.props.tweet })
        )
      );
    }
  }]);

  return ShowTweet;
}(_react2.default.Component);

exports.default = ShowTweet;

},{"react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/app/js/components/StaffForm.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ShowTweet = require('./ShowTweet');

var _ShowTweet2 = _interopRequireDefault(_ShowTweet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StaffForm = function (_React$Component) {
  _inherits(StaffForm, _React$Component);

  function StaffForm(props) {
    _classCallCheck(this, StaffForm);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaffForm).call(this, props));

    _this.state = Object.assign({}, { interaction: 'staff', type: 'knowledge', sentiment: 'positive', staffId: null, tweet: null }, _this.props);
    return _this;
  }

  _createClass(StaffForm, [{
    key: 'selectedType',
    value: function selectedType(type) {
      this.setState({ type: type });
    }
  }, {
    key: 'selectedSentiment',
    value: function selectedSentiment(sentiment) {
      this.setState({ sentiment: sentiment });
    }
  }, {
    key: 'staffIdChange',
    value: function staffIdChange(event) {
      this.setState({ staffId: event.target.value });
    }
  }, {
    key: 'render',
    value: function render() {
      var knowledgeButtonClass = 'button-primary one-third column ' + (this.state.type === 'knowledge' ? ' active' : '');
      var behaviourButtonClass = 'button-primary one-third column ' + (this.state.type === 'behaviour' ? ' active' : '');
      var availabilityButtonClass = 'button-primary one-third column ' + (this.state.type === 'availability' ? ' active' : '');

      var positiveButtonClass = 'button-primary one-half column ' + (this.state.sentiment === 'positive' ? ' active' : '');
      var negativeButtonClass = 'button-primary one-half column ' + (this.state.sentiment === 'negative' ? ' active' : '');

      return _react2.default.createElement(
        'div',
        { className: 'container' },
        _react2.default.createElement(
          'div',
          { className: 'staff-id row' },
          _react2.default.createElement(
            'label',
            { htmlFor: 'staff-id' },
            'Staff ID or Name'
          ),
          _react2.default.createElement('input', { className: 'u-full-width', type: 'text', name: 'staff-id', id: 'staff-id', placeholder: 'Please enter the staff id or name',
            onChange: this.staffIdChange, value: this.state.staffId })
        ),
        _react2.default.createElement(
          'div',
          { className: 'type-buttons row' },
          _react2.default.createElement(
            'button',
            { type: 'submit',
              className: knowledgeButtonClass,
              onClick: this.selectedType.bind(this, 'knowledge') },
            'Knowledge'
          ),
          _react2.default.createElement(
            'button',
            { type: 'submit',
              className: behaviourButtonClass,
              onClick: this.selectedType.bind(this, 'behaviour') },
            'Behaviour'
          ),
          _react2.default.createElement(
            'button',
            { type: 'submit',
              className: availabilityButtonClass,
              onClick: this.selectedType.bind(this, 'availability') },
            'Availability'
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'sentiment-buttons row' },
          _react2.default.createElement(
            'button',
            { type: 'submit',
              className: positiveButtonClass,
              onClick: this.selectedSentiment.bind(this, 'positive') },
            'Positive'
          ),
          _react2.default.createElement(
            'button',
            { type: 'submit',
              className: negativeButtonClass,
              onClick: this.selectedSentiment.bind(this, 'negative') },
            'Negative'
          )
        ),
        _react2.default.createElement(
          'button',
          { className: 'button-primary', type: 'submit', onClick: this.doStateSubmit },
          'Submit'
        ),
        _react2.default.createElement(_ShowTweet2.default, { tweet: this.state.tweet })
      );
    }
  }]);

  return StaffForm;
}(_react2.default.Component);

exports.default = StaffForm;

},{"./ShowTweet":"/Users/emmanash/hacks/rail-fyi-client/app/js/components/ShowTweet.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/app/js/data/station-list.js":[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=[{"name":"Aber","latitude":51.57496069,"longitude":-3.229838935,"stationOperator":"AW","crsCode":"ABE"},{"name":"Abercynon","latitude":51.644706,"longitude":-3.327000754,"stationOperator":"AW","crsCode":"ACY"},{"name":"Aberdare","latitude":51.71505747,"longitude":-3.443099147,"stationOperator":"AW","crsCode":"ABA"},{"name":"Aberdovey","latitude":52.54397223,"longitude":-4.057080835,"stationOperator":"AW","crsCode":"AVY"},{"name":"Abererch","latitude":52.89860046,"longitude":-4.374195955,"stationOperator":"AW","crsCode":"ABH"},{"name":"Abergavenny","latitude":51.81669124,"longitude":-3.009664242,"stationOperator":"AW","crsCode":"AGV"},{"name":"Abergele & Pensarn","latitude":53.29459094,"longitude":-3.582632062,"stationOperator":"AW","crsCode":"AGL"},{"name":"Aberystwyth","latitude":52.41405692,"longitude":-4.081908698,"stationOperator":"AW","crsCode":"AYW"},{"name":"Ammanford","latitude":51.79597767,"longitude":-3.996765792,"stationOperator":"AW","crsCode":"AMF"},{"name":"Baglan","latitude":51.61553822,"longitude":-3.811162313,"stationOperator":"AW","crsCode":"BAJ"},{"name":"Bangor (Gwynedd)","latitude":53.22229978,"longitude":-4.135891358,"stationOperator":"AW","crsCode":"BNG"},{"name":"Bargoed","latitude":51.69230767,"longitude":-3.229689376,"stationOperator":"AW","crsCode":"BGD"},{"name":"Barmouth","latitude":52.7229113,"longitude":-4.056608531,"stationOperator":"AW","crsCode":"BRM"},{"name":"Barry","latitude":51.39678181,"longitude":-3.284997567,"stationOperator":"AW","crsCode":"BRY"},{"name":"Barry Docks","latitude":51.40244097,"longitude":-3.260715837,"stationOperator":"AW","crsCode":"BYD"},{"name":"Barry Island","latitude":51.39241248,"longitude":-3.273376317,"stationOperator":"AW","crsCode":"BYI"},{"name":"Betws-y-Coed","latitude":53.092088,"longitude":-3.800879188,"stationOperator":"AW","crsCode":"BYC"},{"name":"Birchgrove","latitude":51.52174013,"longitude":-3.203468175,"stationOperator":"AW","crsCode":"BCG"},{"name":"Blaenau Ffestiniog","latitude":52.99456764,"longitude":-3.938602387,"stationOperator":"AW","crsCode":"BFF"},{"name":"Bodorgan","latitude":53.20431918,"longitude":-4.418022835,"stationOperator":"AW","crsCode":"BOR"},{"name":"Borth","latitude":52.4910411,"longitude":-4.050190046,"stationOperator":"AW","crsCode":"BRH"},{"name":"Bridgend","latitude":51.50697643,"longitude":-3.575296481,"stationOperator":"AW","crsCode":"BGN"},{"name":"Brithdir","latitude":51.71030148,"longitude":-3.2287299,"stationOperator":"AW","crsCode":"BHD"},{"name":"Briton Ferry","latitude":51.63789409,"longitude":-3.819278922,"stationOperator":"AW","crsCode":"BNF"},{"name":"Broome","latitude":52.42278098,"longitude":-2.885217916,"stationOperator":"AW","crsCode":"BME"},{"name":"Buckley","latitude":53.16304869,"longitude":-3.05593636,"stationOperator":"AW","crsCode":"BCK"},{"name":"Bucknell","latitude":52.3575573,"longitude":-2.948524727,"stationOperator":"AW","crsCode":"BUK"},{"name":"Builth Road","latitude":52.16932565,"longitude":-3.427045119,"stationOperator":"AW","crsCode":"BHR"},{"name":"Bynea","latitude":51.67203157,"longitude":-4.098900663,"stationOperator":"AW","crsCode":"BYE"},{"name":"Cadoxton","latitude":51.41227913,"longitude":-3.248907469,"stationOperator":"AW","crsCode":"CAD"},{"name":"Caergwrle","latitude":53.10788341,"longitude":-3.032923324,"stationOperator":"AW","crsCode":"CGW"},{"name":"Caerphilly","latitude":51.57157215,"longitude":-3.218492147,"stationOperator":"AW","crsCode":"CPH"},{"name":"Caersws","latitude":52.51613735,"longitude":-3.43250893,"stationOperator":"AW","crsCode":"CWS"},{"name":"Caldicot","latitude":51.58478457,"longitude":-2.760585172,"stationOperator":"AW","crsCode":"CDT"},{"name":"Cardiff Bay","latitude":51.46710937,"longitude":-3.16642678,"stationOperator":"AW","crsCode":"CDB"},{"name":"Cardiff Central","latitude":51.47602662,"longitude":-3.179311548,"stationOperator":"AW","crsCode":"CDF"},{"name":"Cardiff Queen Street","latitude":51.48196277,"longitude":-3.170204472,"stationOperator":"AW","crsCode":"CDQ"},{"name":"Carmarthen","latitude":51.85335799,"longitude":-4.30598577,"stationOperator":"AW","crsCode":"CMN"},{"name":"Cathays","latitude":51.48890064,"longitude":-3.178693049,"stationOperator":"AW","crsCode":"CYS"},{"name":"Cefn-y-Bedd","latitude":53.09881997,"longitude":-3.031063286,"stationOperator":"AW","crsCode":"CYB"},{"name":"Chepstow","latitude":51.64017494,"longitude":-2.671914115,"stationOperator":"AW","crsCode":"CPW"},{"name":"Chester","latitude":53.19683958,"longitude":-2.880125588,"stationOperator":"AW","crsCode":"CTR"},{"name":"Chirk","latitude":52.93310252,"longitude":-3.065655601,"stationOperator":"AW","crsCode":"CRK"},{"name":"Church Stretton","latitude":52.53743385,"longitude":-2.803701777,"stationOperator":"AW","crsCode":"CTT"},{"name":"Cilmeri","latitude":52.15053253,"longitude":-3.456554526,"stationOperator":"AW","crsCode":"CIM"},{"name":"Clarbeston Road","latitude":51.85167193,"longitude":-4.883574493,"stationOperator":"AW","crsCode":"CLR"},{"name":"Clunderwen","latitude":51.84054563,"longitude":-4.731878812,"stationOperator":"AW","crsCode":"CUW"},{"name":"Cogan","latitude":51.4459927,"longitude":-3.189100075,"stationOperator":"AW","crsCode":"CGN"},{"name":"Colwyn Bay","latitude":53.29637709,"longitude":-3.725430748,"stationOperator":"AW","crsCode":"CWB"},{"name":"Conwy","latitude":53.28011971,"longitude":-3.830541495,"stationOperator":"AW","crsCode":"CNW"},{"name":"Coryton","latitude":51.52036973,"longitude":-3.231538797,"stationOperator":"AW","crsCode":"COY"},{"name":"Craven Arms","latitude":52.44201187,"longitude":-2.837052833,"stationOperator":"AW","crsCode":"CRV"},{"name":"Criccieth","latitude":52.91842819,"longitude":-4.237528403,"stationOperator":"AW","crsCode":"CCC"},{"name":"Crosskeys","latitude":51.62089796,"longitude":-3.126191667,"stationOperator":"AW","crsCode":"CKY"},{"name":"Cwmbach","latitude":51.70192641,"longitude":-3.413738026,"stationOperator":"AW","crsCode":"CMH"},{"name":"Cwmbran","latitude":51.65658282,"longitude":-3.01622181,"stationOperator":"AW","crsCode":"CWM"},{"name":"Cynghordy","latitude":52.05150756,"longitude":-3.748233148,"stationOperator":"AW","crsCode":"CYN"},{"name":"Danescourt","latitude":51.50050789,"longitude":-3.233928033,"stationOperator":"AW","crsCode":"DCT"},{"name":"Deganwy","latitude":53.29476587,"longitude":-3.833403597,"stationOperator":"AW","crsCode":"DGY"},{"name":"Dinas (Rhondda)","latitude":51.61783077,"longitude":-3.437557147,"stationOperator":"AW","crsCode":"DMG"},{"name":"Dinas Powys","latitude":51.4316643,"longitude":-3.218362695,"stationOperator":"AW","crsCode":"DNS"},{"name":"Dingle Road","latitude":51.44005367,"longitude":-3.180614958,"stationOperator":"AW","crsCode":"DGL"},{"name":"Dolau","latitude":52.29535707,"longitude":-3.263627535,"stationOperator":"AW","crsCode":"DOL"},{"name":"Dolgarrog","latitude":53.18636329,"longitude":-3.822653706,"stationOperator":"AW","crsCode":"DLG"},{"name":"Dolwyddelan","latitude":53.05203317,"longitude":-3.885137755,"stationOperator":"AW","crsCode":"DWD"},{"name":"Dovey Junction","latitude":52.56437479,"longitude":-3.923911977,"stationOperator":"AW","crsCode":"DVY"},{"name":"Dublin Ferryport","latitude":53.3494426,"longitude":-6.2600825,"stationOperator":"AW","crsCode":"DFP"},{"name":"Dublin Port - Stena","latitude":53.3510759,"longitude":-6.21450279,"stationOperator":"AW","crsCode":"DPS"},{"name":"Dyffryn Ardudwy","latitude":52.78886514,"longitude":-4.104657014,"stationOperator":"AW","crsCode":"DYF"},{"name":"Eastbrook","latitude":51.43763559,"longitude":-3.206148195,"stationOperator":"AW","crsCode":"EBK"},{"name":"Ebbw Vale Parkway","latitude":51.75714374,"longitude":-3.196111233,"stationOperator":"AW","crsCode":"EBV"},{"name":"Ebbw Vale Town","latitude":51.777252,"longitude":-3.202288,"stationOperator":"AW","crsCode":"EBB"},{"name":"Energlyn & Churchill Park","latitude":51.58376,"longitude":-3.22973,"stationOperator":"AW","crsCode":"ECP"},{"name":"Fairbourne","latitude":52.69606153,"longitude":-4.049426098,"stationOperator":"AW","crsCode":"FRB"},{"name":"Fairwater","latitude":51.49390844,"longitude":-3.233850662,"stationOperator":"AW","crsCode":"FRW"},{"name":"Fernhill","latitude":51.68649362,"longitude":-3.395897173,"stationOperator":"AW","crsCode":"FER"},{"name":"Ferryside","latitude":51.76837024,"longitude":-4.369485229,"stationOperator":"AW","crsCode":"FYS"},{"name":"Ffairfach","latitude":51.87247957,"longitude":-3.992889832,"stationOperator":"AW","crsCode":"FFA"},{"name":"Fishguard & Goodwick","latitude":52.004112,"longitude":-4.9948377,"stationOperator":"AW","crsCode":"FGW"},{"name":"Fishguard Harbour","latitude":52.01155417,"longitude":-4.985670915,"stationOperator":"AW","crsCode":"FGH"},{"name":"Flint","latitude":53.24953963,"longitude":-3.133005514,"stationOperator":"AW","crsCode":"FLN"},{"name":"Frodsham","latitude":53.29587868,"longitude":-2.723117879,"stationOperator":"AW","crsCode":"FRD"},{"name":"Garth (Mid Glamorgan)","latitude":51.5964522,"longitude":-3.64147185,"stationOperator":"AW","crsCode":"GMG"},{"name":"Garth (Powys)","latitude":52.13324795,"longitude":-3.529923047,"stationOperator":"AW","crsCode":"GTH"},{"name":"Gilfach Fargoed","latitude":51.68424748,"longitude":-3.226577833,"stationOperator":"AW","crsCode":"GFF"},{"name":"Glan Conwy","latitude":53.26743904,"longitude":-3.797743818,"stationOperator":"AW","crsCode":"GCW"},{"name":"Gobowen","latitude":52.89353933,"longitude":-3.035995531,"stationOperator":"AW","crsCode":"GOB"},{"name":"Gowerton","latitude":51.6487243,"longitude":-4.035967269,"stationOperator":"AW","crsCode":"GWN"},{"name":"Grangetown (Cardiff)","latitude":51.46703478,"longitude":-3.189071128,"stationOperator":"AW","crsCode":"GTN"},{"name":"Gwersyllt","latitude":53.07259351,"longitude":-3.017898398,"stationOperator":"AW","crsCode":"GWE"},{"name":"Harlech","latitude":52.86134439,"longitude":-4.109203586,"stationOperator":"AW","crsCode":"HRL"},{"name":"Haverfordwest","latitude":51.80263756,"longitude":-4.960232375,"stationOperator":"AW","crsCode":"HVF"},{"name":"Hawarden","latitude":53.18537204,"longitude":-3.032090605,"stationOperator":"AW","crsCode":"HWD"},{"name":"Hawarden Bridge","latitude":53.2180884,"longitude":-3.032727145,"stationOperator":"AW","crsCode":"HWB"},{"name":"Heath High Level","latitude":51.51656604,"longitude":-3.181713068,"stationOperator":"AW","crsCode":"HHL"},{"name":"Heath Low Level","latitude":51.51566416,"longitude":-3.181977972,"stationOperator":"AW","crsCode":"HLL"},{"name":"Helsby","latitude":53.27517482,"longitude":-2.770757816,"stationOperator":"AW","crsCode":"HSB"},{"name":"Hengoed","latitude":51.64740601,"longitude":-3.224137826,"stationOperator":"AW","crsCode":"HNG"},{"name":"Hereford","latitude":52.06116993,"longitude":-2.708217764,"stationOperator":"AW","crsCode":"HFD"},{"name":"Heswall","latitude":53.32973476,"longitude":-3.07371296,"stationOperator":"AW","crsCode":"HSW"},{"name":"Holyhead","latitude":53.30770479,"longitude":-4.631012675,"stationOperator":"AW","crsCode":"HHD"},{"name":"Hope (Flintshire)","latitude":53.117378,"longitude":-3.03688641,"stationOperator":"AW","crsCode":"HPE"},{"name":"Hopton Heath","latitude":52.3913806,"longitude":-2.91192311,"stationOperator":"AW","crsCode":"HPT"},{"name":"Johnston (Pembs)","latitude":51.75675094,"longitude":-4.996358684,"stationOperator":"AW","crsCode":"JOH"},{"name":"Kidwelly","latitude":51.73434386,"longitude":-4.317011245,"stationOperator":"AW","crsCode":"KWL"},{"name":"Kilgetty","latitude":51.73210916,"longitude":-4.715192738,"stationOperator":"AW","crsCode":"KGT"},{"name":"Knighton","latitude":52.34508013,"longitude":-3.042211012,"stationOperator":"AW","crsCode":"KNI"},{"name":"Knucklas","latitude":52.35986953,"longitude":-3.096894202,"stationOperator":"AW","crsCode":"KNU"},{"name":"Lamphey","latitude":51.66719665,"longitude":-4.87329867,"stationOperator":"AW","crsCode":"LAM"},{"name":"Leominster","latitude":52.22514507,"longitude":-2.730485737,"stationOperator":"AW","crsCode":"LEO"},{"name":"Lisvane & Thornhill","latitude":51.54457308,"longitude":-3.185611182,"stationOperator":"AW","crsCode":"LVT"},{"name":"Llanaber","latitude":52.74152431,"longitude":-4.07718901,"stationOperator":"AW","crsCode":"LLA"},{"name":"Llanbedr","latitude":52.8208656,"longitude":-4.110210769,"stationOperator":"AW","crsCode":"LBR"},{"name":"Llanbister Road","latitude":52.33643285,"longitude":-3.213426306,"stationOperator":"AW","crsCode":"LLT"},{"name":"Llanbradach","latitude":51.60325188,"longitude":-3.233057973,"stationOperator":"AW","crsCode":"LNB"},{"name":"Llandaf","latitude":51.5085276,"longitude":-3.228913858,"stationOperator":"AW","crsCode":"LLN"},{"name":"Llandanwg","latitude":52.83617691,"longitude":-4.123870362,"stationOperator":"AW","crsCode":"LDN"},{"name":"Llandecwyn","latitude":52.92070224,"longitude":-4.057045956,"stationOperator":"AW","crsCode":"LLC"},{"name":"Llandeilo","latitude":51.8853498,"longitude":-3.986919994,"stationOperator":"AW","crsCode":"LLL"},{"name":"Llandovery","latitude":51.99532071,"longitude":-3.802853279,"stationOperator":"AW","crsCode":"LLV"},{"name":"Llandrindod","latitude":52.2423651,"longitude":-3.379148724,"stationOperator":"AW","crsCode":"LLO"},{"name":"Llandudno","latitude":53.32093562,"longitude":-3.827018135,"stationOperator":"AW","crsCode":"LLD"},{"name":"Llandudno Junction","latitude":53.2839619,"longitude":-3.809118503,"stationOperator":"AW","crsCode":"LLJ"},{"name":"Llandybie","latitude":51.82103914,"longitude":-4.003678245,"stationOperator":"AW","crsCode":"LLI"},{"name":"Llanelli","latitude":51.67386671,"longitude":-4.161325167,"stationOperator":"AW","crsCode":"LLE"},{"name":"Llanfairfechan","latitude":53.25730522,"longitude":-3.98320943,"stationOperator":"AW","crsCode":"LLF"},{"name":"Llanfairpwll","latitude":53.22096236,"longitude":-4.209228885,"stationOperator":"AW","crsCode":"LPG"},{"name":"Llangadog","latitude":51.9402199,"longitude":-3.893174289,"stationOperator":"AW","crsCode":"LLG"},{"name":"Llangammarch","latitude":52.11430955,"longitude":-3.554833328,"stationOperator":"AW","crsCode":"LLM"},{"name":"Llangennech","latitude":51.69113653,"longitude":-4.078948655,"stationOperator":"AW","crsCode":"LLH"},{"name":"Llangynllo","latitude":52.34963317,"longitude":-3.161373191,"stationOperator":"AW","crsCode":"LGO"},{"name":"Llanharan","latitude":51.53758926,"longitude":-3.440795127,"stationOperator":"AW","crsCode":"LLR"},{"name":"Llanhilleth","latitude":51.70029929,"longitude":-3.135209173,"stationOperator":"AW","crsCode":"LTH"},{"name":"Llanishen","latitude":51.53274008,"longitude":-3.18198768,"stationOperator":"AW","crsCode":"LLS"},{"name":"Llanrwst","latitude":53.14419979,"longitude":-3.80305891,"stationOperator":"AW","crsCode":"LWR"},{"name":"Llansamlet","latitude":51.66150151,"longitude":-3.88471363,"stationOperator":"AW","crsCode":"LAS"},{"name":"Llantwit Major","latitude":51.40974773,"longitude":-3.481635835,"stationOperator":"AW","crsCode":"LWM"},{"name":"Llanwrda","latitude":51.96259418,"longitude":-3.871700406,"stationOperator":"AW","crsCode":"LNR"},{"name":"Llanwrtyd","latitude":52.10472191,"longitude":-3.632182357,"stationOperator":"AW","crsCode":"LNW"},{"name":"Llwyngwril","latitude":52.66680067,"longitude":-4.08769294,"stationOperator":"AW","crsCode":"LLW"},{"name":"Llwynypia","latitude":51.63399985,"longitude":-3.453529864,"stationOperator":"AW","crsCode":"LLY"},{"name":"Ludlow","latitude":52.37088713,"longitude":-2.715261521,"stationOperator":"AW","crsCode":"LUD"},{"name":"Lydney","latitude":51.7146265,"longitude":-2.531163478,"stationOperator":"AW","crsCode":"LYD"},{"name":"Machynlleth","latitude":52.5951531,"longitude":-3.854549885,"stationOperator":"AW","crsCode":"MCN"},{"name":"Maesteg","latitude":51.60993535,"longitude":-3.654667781,"stationOperator":"AW","crsCode":"MST"},{"name":"Maesteg (Ewenny Road)","latitude":51.60533889,"longitude":-3.64901298,"stationOperator":"AW","crsCode":"MEW"},{"name":"Manorbier","latitude":51.66016796,"longitude":-4.791870151,"stationOperator":"AW","crsCode":"MRB"},{"name":"Merthyr Tydfil","latitude":51.74458569,"longitude":-3.377291952,"stationOperator":"AW","crsCode":"MER"},{"name":"Merthyr Vale","latitude":51.68664396,"longitude":-3.336588445,"stationOperator":"AW","crsCode":"MEV"},{"name":"Milford Haven","latitude":51.71497622,"longitude":-5.041000361,"stationOperator":"AW","crsCode":"MFH"},{"name":"Minffordd","latitude":52.92614937,"longitude":-4.084977496,"stationOperator":"AW","crsCode":"MFF"},{"name":"Morfa Mawddach","latitude":52.70714813,"longitude":-4.032181673,"stationOperator":"AW","crsCode":"MFA"},{"name":"Mountain Ash","latitude":51.68132902,"longitude":-3.376355225,"stationOperator":"AW","crsCode":"MTA"},{"name":"Nantwich","latitude":53.06322887,"longitude":-2.519249351,"stationOperator":"AW","crsCode":"NAN"},{"name":"Narberth","latitude":51.79937326,"longitude":-4.727212166,"stationOperator":"AW","crsCode":"NAR"},{"name":"Neath","latitude":51.66235974,"longitude":-3.807245183,"stationOperator":"AW","crsCode":"NTH"},{"name":"Neston","latitude":53.29242791,"longitude":-3.063775319,"stationOperator":"AW","crsCode":"NES"},{"name":"Newbridge","latitude":51.66581285,"longitude":-3.142907128,"stationOperator":"AW","crsCode":"NBE"},{"name":"Newport (South Wales)","latitude":51.58974436,"longitude":-2.998648615,"stationOperator":"AW","crsCode":"NWP"},{"name":"Newtown (Powys)","latitude":52.51232684,"longitude":-3.311399078,"stationOperator":"AW","crsCode":"NWT"},{"name":"Ninian Park","latitude":51.47644072,"longitude":-3.201411567,"stationOperator":"AW","crsCode":"NNP"},{"name":"North Llanrwst","latitude":53.14384493,"longitude":-3.802744992,"stationOperator":"AW","crsCode":"NLR"},{"name":"Pantyffynnon","latitude":51.77888001,"longitude":-3.997460445,"stationOperator":"AW","crsCode":"PTF"},{"name":"Pembrey & Burry Port","latitude":51.68352802,"longitude":-4.247865203,"stationOperator":"AW","crsCode":"PBY"},{"name":"Pembroke","latitude":51.67294658,"longitude":-4.906065725,"stationOperator":"AW","crsCode":"PMB"},{"name":"Pembroke Dock","latitude":51.69391548,"longitude":-4.93807661,"stationOperator":"AW","crsCode":"PMD"},{"name":"Penally","latitude":51.65892008,"longitude":-4.722092618,"stationOperator":"AW","crsCode":"PNA"},{"name":"Penarth","latitude":51.43588909,"longitude":-3.174465022,"stationOperator":"AW","crsCode":"PEN"},{"name":"Pencoed","latitude":51.52461118,"longitude":-3.50049761,"stationOperator":"AW","crsCode":"PCD"},{"name":"Pengam","latitude":51.67045291,"longitude":-3.230109732,"stationOperator":"AW","crsCode":"PGM"},{"name":"Penhelig","latitude":52.54570208,"longitude":-4.03503834,"stationOperator":"AW","crsCode":"PHG"},{"name":"Penmaenmawr","latitude":53.27048358,"longitude":-3.923515874,"stationOperator":"AW","crsCode":"PMW"},{"name":"Penrhiwceiber","latitude":51.66992031,"longitude":-3.359957291,"stationOperator":"AW","crsCode":"PER"},{"name":"Penrhyndeudraeth","latitude":52.92884346,"longitude":-4.064573948,"stationOperator":"AW","crsCode":"PRH"},{"name":"Pensarn (Gwynedd)","latitude":52.83072115,"longitude":-4.112173075,"stationOperator":"AW","crsCode":"PES"},{"name":"Pentre-Bach","latitude":51.72501373,"longitude":-3.362333939,"stationOperator":"AW","crsCode":"PTB"},{"name":"Pen-y-Bont","latitude":52.27394924,"longitude":-3.321940024,"stationOperator":"AW","crsCode":"PNY"},{"name":"Penychain","latitude":52.902882,"longitude":-4.33872,"stationOperator":"AW","crsCode":"PNC"},{"name":"Penyffordd","latitude":53.14311037,"longitude":-3.054849214,"stationOperator":"AW","crsCode":"PNF"},{"name":"Pontarddulais","latitude":51.71762164,"longitude":-4.045576015,"stationOperator":"AW","crsCode":"PTD"},{"name":"Pontlottyn","latitude":51.74663206,"longitude":-3.278966771,"stationOperator":"AW","crsCode":"PLT"},{"name":"Pontyclun","latitude":51.5237707,"longitude":-3.39293339,"stationOperator":"AW","crsCode":"PYC"},{"name":"Pont-y-Pant","latitude":53.06515277,"longitude":-3.862740369,"stationOperator":"AW","crsCode":"PYP"},{"name":"Pontypool & New Inn","latitude":51.69796197,"longitude":-3.014254502,"stationOperator":"AW","crsCode":"PPL"},{"name":"Pontypridd","latitude":51.59936625,"longitude":-3.341388164,"stationOperator":"AW","crsCode":"PPD"},{"name":"Port Talbot Parkway","latitude":51.59171473,"longitude":-3.781340109,"stationOperator":"AW","crsCode":"PTA"},{"name":"Porth","latitude":51.61253349,"longitude":-3.407203552,"stationOperator":"AW","crsCode":"POR"},{"name":"Porthmadog","latitude":52.93093493,"longitude":-4.134459787,"stationOperator":"AW","crsCode":"PTM"},{"name":"Prees","latitude":52.89965046,"longitude":-2.689744248,"stationOperator":"AW","crsCode":"PRS"},{"name":"Prestatyn","latitude":53.33651635,"longitude":-3.407136515,"stationOperator":"AW","crsCode":"PRT"},{"name":"Pwllheli","latitude":52.88785158,"longitude":-4.41671931,"stationOperator":"AW","crsCode":"PWL"},{"name":"Pye Corner","latitude":51.579513,"longitude":-3.038295,"stationOperator":"AW","crsCode":"PYE"},{"name":"Pyle","latitude":51.525739,"longitude":-3.698076385,"stationOperator":"AW","crsCode":"PYL"},{"name":"Quakers Yard","latitude":51.6607231,"longitude":-3.322813042,"stationOperator":"AW","crsCode":"QYD"},{"name":"Radyr","latitude":51.51650886,"longitude":-3.248009062,"stationOperator":"AW","crsCode":"RDR"},{"name":"Rhiwbina","latitude":51.52118226,"longitude":-3.213975661,"stationOperator":"AW","crsCode":"RHI"},{"name":"Rhoose Cardiff International Airport","latitude":51.38706545,"longitude":-3.34939894,"stationOperator":"AW","crsCode":"RIA"},{"name":"Rhosneigr","latitude":53.23485594,"longitude":-4.506663917,"stationOperator":"AW","crsCode":"RHO"},{"name":"Rhyl","latitude":53.31844074,"longitude":-3.489112507,"stationOperator":"AW","crsCode":"RHL"},{"name":"Rhymney","latitude":51.75883789,"longitude":-3.289309476,"stationOperator":"AW","crsCode":"RHY"},{"name":"Risca & Pontymister","latitude":51.60584265,"longitude":-3.092230162,"stationOperator":"AW","crsCode":"RCA"},{"name":"Rogerstone","latitude":51.59561144,"longitude":-3.066632694,"stationOperator":"AW","crsCode":"ROR"},{"name":"Roman Bridge","latitude":53.044436,"longitude":-3.921654634,"stationOperator":"AW","crsCode":"RMB"},{"name":"Ruabon","latitude":52.96018774,"longitude":-3.04250099,"stationOperator":"AW","crsCode":"RUA"},{"name":"Runcorn East","latitude":53.3269412,"longitude":-2.665085335,"stationOperator":"AW","crsCode":"RUE"},{"name":"Sarn","latitude":51.53872014,"longitude":-3.589932796,"stationOperator":"AW","crsCode":"SRR"},{"name":"Saundersfoot","latitude":51.72209314,"longitude":-4.716619622,"stationOperator":"AW","crsCode":"SDF"},{"name":"Severn Tunnel Junction","latitude":51.58467107,"longitude":-2.777903615,"stationOperator":"AW","crsCode":"STJ"},{"name":"Shotton","latitude":53.2125552,"longitude":-3.038434376,"stationOperator":"AW","crsCode":"SHT"},{"name":"Shrewsbury","latitude":52.71141159,"longitude":-2.74894276,"stationOperator":"AW","crsCode":"SHR"},{"name":"Skewen","latitude":51.66138872,"longitude":-3.846536024,"stationOperator":"AW","crsCode":"SKE"},{"name":"Sugar Loaf","latitude":52.08228042,"longitude":-3.686969492,"stationOperator":"AW","crsCode":"SUG"},{"name":"Swansea","latitude":51.62514381,"longitude":-3.941576226,"stationOperator":"AW","crsCode":"SWA"},{"name":"Taffs Well","latitude":51.54079864,"longitude":-3.262949451,"stationOperator":"AW","crsCode":"TAF"},{"name":"Talsarnau","latitude":52.90432506,"longitude":-4.068166336,"stationOperator":"AW","crsCode":"TAL"},{"name":"Talybont","latitude":52.77264337,"longitude":-4.09660964,"stationOperator":"AW","crsCode":"TLB"},{"name":"Tal-y-Cafn","latitude":53.22837926,"longitude":-3.818280351,"stationOperator":"AW","crsCode":"TLC"},{"name":"Tenby","latitude":51.67294584,"longitude":-4.706733014,"stationOperator":"AW","crsCode":"TEN"},{"name":"Tir-Phil","latitude":51.7209057,"longitude":-3.246390272,"stationOperator":"AW","crsCode":"TIR"},{"name":"Ton Pentre","latitude":51.64779844,"longitude":-3.486204606,"stationOperator":"AW","crsCode":"TPN"},{"name":"Tondu","latitude":51.54736625,"longitude":-3.595570636,"stationOperator":"AW","crsCode":"TDU"},{"name":"Tonfanau","latitude":52.61355963,"longitude":-4.123713236,"stationOperator":"AW","crsCode":"TNF"},{"name":"Tonypandy","latitude":51.61975969,"longitude":-3.448885591,"stationOperator":"AW","crsCode":"TNP"},{"name":"Trefforest","latitude":51.59145801,"longitude":-3.325130833,"stationOperator":"AW","crsCode":"TRF"},{"name":"Trefforest Estate","latitude":51.5682872,"longitude":-3.290260312,"stationOperator":"AW","crsCode":"TRE"},{"name":"Trehafod","latitude":51.61014718,"longitude":-3.380989064,"stationOperator":"AW","crsCode":"TRH"},{"name":"Treherbert","latitude":51.67224166,"longitude":-3.536321025,"stationOperator":"AW","crsCode":"TRB"},{"name":"Treorchy","latitude":51.65753073,"longitude":-3.505751584,"stationOperator":"AW","crsCode":"TRY"},{"name":"Troed-y-rhiw","latitude":51.71242473,"longitude":-3.346756999,"stationOperator":"AW","crsCode":"TRD"},{"name":"Ty Croes","latitude":53.22257541,"longitude":-4.474753946,"stationOperator":"AW","crsCode":"TYC"},{"name":"Ty Glas","latitude":51.5215412,"longitude":-3.19654418,"stationOperator":"AW","crsCode":"TGS"},{"name":"Tygwyn","latitude":52.89380186,"longitude":-4.078666757,"stationOperator":"AW","crsCode":"TYG"},{"name":"Tywyn","latitude":52.58559297,"longitude":-4.09357376,"stationOperator":"AW","crsCode":"TYW"},{"name":"Upton (Merseyside)","latitude":53.38617781,"longitude":-3.084755805,"stationOperator":"AW","crsCode":"UPT"},{"name":"Valley","latitude":53.28130417,"longitude":-4.563392247,"stationOperator":"AW","crsCode":"VAL"},{"name":"Waun-Gron Park","latitude":51.48819741,"longitude":-3.229663483,"stationOperator":"AW","crsCode":"WNG"},{"name":"Welshpool","latitude":52.65751111,"longitude":-3.139872828,"stationOperator":"AW","crsCode":"WLP"},{"name":"Wem","latitude":52.85632741,"longitude":-2.718760914,"stationOperator":"AW","crsCode":"WEM"},{"name":"Whitchurch (Cardiff)","latitude":51.52064748,"longitude":-3.22217731,"stationOperator":"AW","crsCode":"WHT"},{"name":"Whitchurch (Shropshire)","latitude":52.96807676,"longitude":-2.67147586,"stationOperator":"AW","crsCode":"WTC"},{"name":"Whitland","latitude":51.81803502,"longitude":-4.614424451,"stationOperator":"AW","crsCode":"WTL"},{"name":"Wildmill","latitude":51.52087413,"longitude":-3.579653502,"stationOperator":"AW","crsCode":"WMI"},{"name":"Wrenbury","latitude":53.0197184,"longitude":-2.59624734,"stationOperator":"AW","crsCode":"WRE"},{"name":"Wrexham Central","latitude":53.04620654,"longitude":-2.999062482,"stationOperator":"AW","crsCode":"WXC"},{"name":"Wrexham General","latitude":53.05025036,"longitude":-3.002453051,"stationOperator":"AW","crsCode":"WRX"},{"name":"Ynyswen","latitude":51.66496961,"longitude":-3.521614997,"stationOperator":"AW","crsCode":"YNW"},{"name":"Yorton","latitude":52.80896814,"longitude":-2.736464904,"stationOperator":"AW","crsCode":"YRT"},{"name":"Ystrad Mynach","latitude":51.64093139,"longitude":-3.241305784,"stationOperator":"AW","crsCode":"YSM"},{"name":"Ystrad Rhondda","latitude":51.64363752,"longitude":-3.466701338,"stationOperator":"AW","crsCode":"YSR"},{"name":"Barking","latitude":51.5400412345,"longitude":0.0807933827,"stationOperator":"CC","crsCode":"BKG"},{"name":"Basildon","latitude":51.5681114558,"longitude":0.4567956956,"stationOperator":"CC","crsCode":"BSO"},{"name":"Benfleet","latitude":51.5439490855,"longitude":0.561723002,"stationOperator":"CC","crsCode":"BEF"},{"name":"Chafford Hundred Lakeside","latitude":51.485645362,"longitude":0.2872366517,"stationOperator":"CC","crsCode":"CFH"},{"name":"Chalkwell","latitude":51.538722717,"longitude":0.6706052576,"stationOperator":"CC","crsCode":"CHW"},{"name":"Dagenham Dock","latitude":51.5262934247,"longitude":0.1450431938,"stationOperator":"CC","crsCode":"DDK"},{"name":"East Tilbury","latitude":51.4848340787,"longitude":0.4129328582,"stationOperator":"CC","crsCode":"ETL"},{"name":"Grays","latitude":51.4762505757,"longitude":0.3218346029,"stationOperator":"CC","crsCode":"GRY"},{"name":"Laindon","latitude":51.5677669135,"longitude":0.4236436899,"stationOperator":"CC","crsCode":"LAI"},{"name":"Leigh-on-Sea","latitude":51.5413668098,"longitude":0.6404283175,"stationOperator":"CC","crsCode":"LES"},{"name":"Limehouse","latitude":51.512794432,"longitude":-0.0393527349,"stationOperator":"CC","crsCode":"LHS"},{"name":"London Fenchurch Street","latitude":51.51157341,"longitude":-0.078591579,"stationOperator":"CC","crsCode":"FST"},{"name":"Ockendon","latitude":51.5219961849,"longitude":0.2904709275,"stationOperator":"CC","crsCode":"OCK"},{"name":"Pitsea","latitude":51.5603638481,"longitude":0.5063012148,"stationOperator":"CC","crsCode":"PSE"},{"name":"Purfleet","latitude":51.4810161506,"longitude":0.2367813953,"stationOperator":"CC","crsCode":"PFL"},{"name":"Rainham (Essex)","latitude":51.5173546284,"longitude":0.1907490215,"stationOperator":"CC","crsCode":"RNM"},{"name":"Shoeburyness","latitude":51.5309758701,"longitude":0.7953607931,"stationOperator":"CC","crsCode":"SRY"},{"name":"Southend Central","latitude":51.5370680411,"longitude":0.7117404187,"stationOperator":"CC","crsCode":"SOC"},{"name":"Southend East","latitude":51.5389761049,"longitude":0.7318291094,"stationOperator":"CC","crsCode":"SOE"},{"name":"Stanford-le-Hope","latitude":51.5143671372,"longitude":0.4230412837,"stationOperator":"CC","crsCode":"SFO"},{"name":"Thorpe Bay","latitude":51.5375737603,"longitude":0.7617431863,"stationOperator":"CC","crsCode":"TPB"},{"name":"Tilbury Town","latitude":51.4623607916,"longitude":0.3540417321,"stationOperator":"CC","crsCode":"TIL"},{"name":"Upminster","latitude":51.5593632504,"longitude":0.2519216008,"stationOperator":"CC","crsCode":"UPM"},{"name":"West Horndon","latitude":51.567950568,"longitude":0.3406471967,"stationOperator":"CC","crsCode":"WHR"},{"name":"Westcliff","latitude":51.5373370324,"longitude":0.691479135,"stationOperator":"CC","crsCode":"WCF"},{"name":"Aylesbury","latitude":51.81389614,"longitude":-0.815094966,"stationOperator":"CH","crsCode":"AYS"},{"name":"Aylesbury Vale Parkway","latitude":51.830795,"longitude":-0.860787,"stationOperator":"CH","crsCode":"AVP"},{"name":"Banbury","latitude":52.06031282,"longitude":-1.328130455,"stationOperator":"CH","crsCode":"BAN"},{"name":"Beaconsfield","latitude":51.61129066,"longitude":-0.643817675,"stationOperator":"CH","crsCode":"BCF"},{"name":"Bicester North","latitude":51.90349153,"longitude":-1.150376878,"stationOperator":"CH","crsCode":"BCS"},{"name":"Bicester Village","latitude":51.89349443,"longitude":-1.148065862,"stationOperator":"CH","crsCode":"BIT"},{"name":"Birmingham Moor Street","latitude":52.479088,"longitude":-1.89246908,"stationOperator":"CH","crsCode":"BMO"},{"name":"Denham","latitude":51.5788354,"longitude":-0.497428347,"stationOperator":"CH","crsCode":"DNM"},{"name":"Denham Golf Club","latitude":51.58059592,"longitude":-0.517778734,"stationOperator":"CH","crsCode":"DGC"},{"name":"Dorridge","latitude":52.37208286,"longitude":-1.752908156,"stationOperator":"CH","crsCode":"DDG"},{"name":"Gerrards Cross","latitude":51.58902157,"longitude":-0.555268471,"stationOperator":"CH","crsCode":"GER"},{"name":"Great Missenden","latitude":51.70352072,"longitude":-0.709137756,"stationOperator":"CH","crsCode":"GMN"},{"name":"Haddenham & Thame Parkway","latitude":51.77085986,"longitude":-0.942139967,"stationOperator":"CH","crsCode":"HDM"},{"name":"Hatton","latitude":52.29528991,"longitude":-1.672981218,"stationOperator":"CH","crsCode":"HTN"},{"name":"High Wycombe","latitude":51.62958615,"longitude":-0.74540803,"stationOperator":"CH","crsCode":"HWY"},{"name":"Islip","latitude":51.82576003,"longitude":-1.238178071,"stationOperator":"CH","crsCode":"ISP"},{"name":"Kings Sutton","latitude":52.02135474,"longitude":-1.280927148,"stationOperator":"CH","crsCode":"KGS"},{"name":"Lapworth","latitude":52.34127509,"longitude":-1.725484472,"stationOperator":"CH","crsCode":"LPW"},{"name":"Leamington Spa","latitude":52.28450186,"longitude":-1.536212243,"stationOperator":"CH","crsCode":"LMS"},{"name":"Little Kimble","latitude":51.75223562,"longitude":-0.808451583,"stationOperator":"CH","crsCode":"LTK"},{"name":"London Marylebone","latitude":51.5225401,"longitude":-0.163627749,"stationOperator":"CH","crsCode":"MYB"},{"name":"Monks Risborough","latitude":51.73576572,"longitude":-0.829333579,"stationOperator":"CH","crsCode":"MRS"},{"name":"Northolt Park","latitude":51.55763535,"longitude":-0.359421311,"stationOperator":"CH","crsCode":"NLT"},{"name":"Oxford Parkway","latitude":1.2745,"longitude":51.8042,"stationOperator":"CH","crsCode":"OXP"},{"name":"Princes Risborough","latitude":51.71786322,"longitude":-0.843881476,"stationOperator":"CH","crsCode":"PRR"},{"name":"Saunderton","latitude":51.67590446,"longitude":-0.825468633,"stationOperator":"CH","crsCode":"SDR"},{"name":"Seer Green & Jordans","latitude":51.60966864,"longitude":-0.607428365,"stationOperator":"CH","crsCode":"SRG"},{"name":"Solihull","latitude":52.41440643,"longitude":-1.788399215,"stationOperator":"CH","crsCode":"SOL"},{"name":"Stoke Mandeville","latitude":51.78780029,"longitude":-0.784084548,"stationOperator":"CH","crsCode":"SKM"},{"name":"Sudbury & Harrow Road","latitude":51.5545018,"longitude":-0.315970143,"stationOperator":"CH","crsCode":"SUD"},{"name":"Sudbury Hill Harrow","latitude":51.55838698,"longitude":-0.336167829,"stationOperator":"CH","crsCode":"SDH"},{"name":"Warwick","latitude":52.28655133,"longitude":-1.581858014,"stationOperator":"CH","crsCode":"WRW"},{"name":"Warwick Parkway","latitude":52.28611497,"longitude":-1.612062229,"stationOperator":"CH","crsCode":"WRP"},{"name":"Wembley Stadium","latitude":51.55469663,"longitude":-0.285958395,"stationOperator":"CH","crsCode":"WCX"},{"name":"Wendover","latitude":51.76176123,"longitude":-0.747369763,"stationOperator":"CH","crsCode":"WND"},{"name":"Alfreton","latitude":53.10045706,"longitude":-1.369688632,"stationOperator":"EM","crsCode":"ALF"},{"name":"Alsager","latitude":53.09275298,"longitude":-2.298612158,"stationOperator":"EM","crsCode":"ASG"},{"name":"Ambergate","latitude":53.06054078,"longitude":-1.48069344,"stationOperator":"EM","crsCode":"AMB"},{"name":"Ancaster","latitude":52.98793249,"longitude":-0.535615122,"stationOperator":"EM","crsCode":"ANC"},{"name":"Aslockton","latitude":52.95139426,"longitude":-0.898543361,"stationOperator":"EM","crsCode":"ALK"},{"name":"Attenborough","latitude":52.9063664,"longitude":-1.231269105,"stationOperator":"EM","crsCode":"ATB"},{"name":"Barrow-Upon-Soar","latitude":52.75028353,"longitude":-1.149568919,"stationOperator":"EM","crsCode":"BWS"},{"name":"Beeston","latitude":52.92077475,"longitude":-1.207661803,"stationOperator":"EM","crsCode":"BEE"},{"name":"Belper","latitude":53.02459133,"longitude":-1.482616227,"stationOperator":"EM","crsCode":"BLP"},{"name":"Bingham","latitude":52.95457509,"longitude":-0.952051798,"stationOperator":"EM","crsCode":"BIN"},{"name":"Bleasby","latitude":53.04169182,"longitude":-0.942482306,"stationOperator":"EM","crsCode":"BSB"},{"name":"Blythe Bridge","latitude":52.96816538,"longitude":-2.066959695,"stationOperator":"EM","crsCode":"BYB"},{"name":"Boston","latitude":52.97811818,"longitude":-0.031002264,"stationOperator":"EM","crsCode":"BSN"},{"name":"Bottesford","latitude":52.94500577,"longitude":-0.796014823,"stationOperator":"EM","crsCode":"BTF"},{"name":"Bulwell","latitude":52.99971765,"longitude":-1.196233543,"stationOperator":"EM","crsCode":"BLW"},{"name":"Burton Joyce","latitude":52.98409116,"longitude":-1.040713371,"stationOperator":"EM","crsCode":"BUJ"},{"name":"Burton-on-Trent","latitude":52.80583306,"longitude":-1.642462026,"stationOperator":"EM","crsCode":"BUT"},{"name":"Carlton","latitude":52.96497797,"longitude":-1.079253189,"stationOperator":"EM","crsCode":"CTO"},{"name":"Chesterfield","latitude":53.23824054,"longitude":-1.420109085,"stationOperator":"EM","crsCode":"CHD"},{"name":"Collingham","latitude":53.14411144,"longitude":-0.750383181,"stationOperator":"EM","crsCode":"CLM"},{"name":"Corby","latitude":52.488051,"longitude":-0.689243,"stationOperator":"EM","crsCode":"COR"},{"name":"Creswell","latitude":53.26403988,"longitude":-1.215873919,"stationOperator":"EM","crsCode":"CWD"},{"name":"Cromford","latitude":53.11294781,"longitude":-1.548786122,"stationOperator":"EM","crsCode":"CMF"},{"name":"Derby","latitude":52.91618036,"longitude":-1.463073262,"stationOperator":"EM","crsCode":"DBY"},{"name":"Duffield","latitude":52.98774917,"longitude":-1.486035917,"stationOperator":"EM","crsCode":"DFI"},{"name":"East Midlands Parkway","latitude":52.864306,"longitude":-1.264687,"stationOperator":"EM","crsCode":"EMD"},{"name":"Elton & Orston","latitude":52.95188523,"longitude":-0.855364249,"stationOperator":"EM","crsCode":"ELO"},{"name":"Fiskerton","latitude":53.06029715,"longitude":-0.912182054,"stationOperator":"EM","crsCode":"FSK"},{"name":"Gainsborough Lea Road","latitude":53.38611247,"longitude":-0.768583076,"stationOperator":"EM","crsCode":"GBL"},{"name":"Havenhouse","latitude":53.11449084,"longitude":0.273177619,"stationOperator":"EM","crsCode":"HVN"},{"name":"Heckington","latitude":52.97733733,"longitude":-0.293936548,"stationOperator":"EM","crsCode":"HEC"},{"name":"Hinckley (Leics)","latitude":52.53501671,"longitude":-1.371919253,"stationOperator":"EM","crsCode":"HNK"},{"name":"Hubberts Bridge","latitude":52.97564369,"longitude":-0.110071823,"stationOperator":"EM","crsCode":"HBB"},{"name":"Hucknall","latitude":53.03830732,"longitude":-1.195814321,"stationOperator":"EM","crsCode":"HKN"},{"name":"Hykeham","latitude":53.19536728,"longitude":-0.598164171,"stationOperator":"EM","crsCode":"HKM"},{"name":"Kettering","latitude":52.39356783,"longitude":-0.731555547,"stationOperator":"EM","crsCode":"KET"},{"name":"Kidsgrove","latitude":53.08658326,"longitude":-2.244818788,"stationOperator":"EM","crsCode":"KDG"},{"name":"Kirkby-in-Ashfield","latitude":53.10012396,"longitude":-1.253060759,"stationOperator":"EM","crsCode":"KKB"},{"name":"Langley Mill","latitude":53.01808321,"longitude":-1.331236345,"stationOperator":"EM","crsCode":"LGM"},{"name":"Langwith-Whaley Thorns","latitude":53.23253667,"longitude":-1.209707864,"stationOperator":"EM","crsCode":"LAG"},{"name":"Leicester","latitude":52.63144566,"longitude":-1.125278584,"stationOperator":"EM","crsCode":"LEI"},{"name":"Lincoln Central","latitude":53.22610544,"longitude":-0.539919855,"stationOperator":"EM","crsCode":"LCN"},{"name":"Long Eaton","latitude":52.88514513,"longitude":-1.288104264,"stationOperator":"EM","crsCode":"LGE"},{"name":"Longport","latitude":53.04169194,"longitude":-2.216225493,"stationOperator":"EM","crsCode":"LPT"},{"name":"Longton","latitude":52.989671,"longitude":-2.137010067,"stationOperator":"EM","crsCode":"LGN"},{"name":"Loughborough","latitude":52.77897038,"longitude":-1.195932923,"stationOperator":"EM","crsCode":"LBO"},{"name":"Lowdham","latitude":53.00692902,"longitude":-0.997582237,"stationOperator":"EM","crsCode":"LOW"},{"name":"Mansfield","latitude":53.14255896,"longitude":-1.197157497,"stationOperator":"EM","crsCode":"MFT"},{"name":"Mansfield Woodhouse","latitude":53.16145454,"longitude":-1.199796358,"stationOperator":"EM","crsCode":"MSW"},{"name":"Market Harborough","latitude":52.48040756,"longitude":-0.908871723,"stationOperator":"EM","crsCode":"MHR"},{"name":"Market Rasen","latitude":53.38447725,"longitude":-0.337094278,"stationOperator":"EM","crsCode":"MKR"},{"name":"Matlock","latitude":53.13815608,"longitude":-1.558986118,"stationOperator":"EM","crsCode":"MAT"},{"name":"Matlock Bath","latitude":53.12197042,"longitude":-1.557657491,"stationOperator":"EM","crsCode":"MTB"},{"name":"Melton Mowbray","latitude":52.7606833,"longitude":-0.885577764,"stationOperator":"EM","crsCode":"MMO"},{"name":"Metheringham","latitude":53.13890433,"longitude":-0.391447021,"stationOperator":"EM","crsCode":"MGM"},{"name":"Narborough","latitude":52.57131212,"longitude":-1.203351787,"stationOperator":"EM","crsCode":"NBR"},{"name":"Netherfield","latitude":52.96147483,"longitude":-1.07962538,"stationOperator":"EM","crsCode":"NET"},{"name":"Newark Castle","latitude":53.08002714,"longitude":-0.81315172,"stationOperator":"EM","crsCode":"NCT"},{"name":"Newstead","latitude":53.07171822,"longitude":-1.22235722,"stationOperator":"EM","crsCode":"NSD"},{"name":"Nottingham","latitude":52.94717947,"longitude":-1.14688808,"stationOperator":"EM","crsCode":"NOT"},{"name":"Oakham","latitude":52.67223558,"longitude":-0.73416278,"stationOperator":"EM","crsCode":"OKM"},{"name":"Peartree","latitude":52.89806425,"longitude":-1.472677646,"stationOperator":"EM","crsCode":"PEA"},{"name":"Radcliffe-on-Trent","latitude":52.94890755,"longitude":-1.036580335,"stationOperator":"EM","crsCode":"RDF"},{"name":"Rauceby","latitude":52.98522476,"longitude":-0.456602942,"stationOperator":"EM","crsCode":"RAU"},{"name":"Rolleston","latitude":53.06574736,"longitude":-0.898762153,"stationOperator":"EM","crsCode":"ROL"},{"name":"Ruskington","latitude":53.04148456,"longitude":-0.380756379,"stationOperator":"EM","crsCode":"RKT"},{"name":"Saxilby","latitude":53.26722423,"longitude":-0.664040791,"stationOperator":"EM","crsCode":"SXY"},{"name":"Sheffield","latitude":53.37823538,"longitude":-1.462104529,"stationOperator":"EM","crsCode":"SHF"},{"name":"Shirebrook","latitude":53.20426177,"longitude":-1.202442721,"stationOperator":"EM","crsCode":"SHB"},{"name":"Sileby","latitude":52.73102158,"longitude":-1.10966224,"stationOperator":"EM","crsCode":"SIL"},{"name":"Skegness","latitude":53.1430765,"longitude":0.333903847,"stationOperator":"EM","crsCode":"SKG"},{"name":"Sleaford","latitude":52.99549349,"longitude":-0.41034233,"stationOperator":"EM","crsCode":"SLR"},{"name":"South Wigston","latitude":52.58224354,"longitude":-1.134080764,"stationOperator":"EM","crsCode":"SWS"},{"name":"Spalding","latitude":52.78882937,"longitude":-0.156873182,"stationOperator":"EM","crsCode":"SPA"},{"name":"Spondon","latitude":52.91188874,"longitude":-1.411093591,"stationOperator":"EM","crsCode":"SPO"},{"name":"Stamford (Lincs)","latitude":52.64740704,"longitude":-0.480499424,"stationOperator":"EM","crsCode":"SMD"},{"name":"Sutton Parkway","latitude":53.11420865,"longitude":-1.245645184,"stationOperator":"EM","crsCode":"SPK"},{"name":"Swinderby","latitude":53.16958189,"longitude":-0.70268215,"stationOperator":"EM","crsCode":"SWD"},{"name":"Swineshead","latitude":52.96983174,"longitude":-0.187156156,"stationOperator":"EM","crsCode":"SWE"},{"name":"Syston","latitude":52.6946713,"longitude":-1.082139486,"stationOperator":"EM","crsCode":"SYS"},{"name":"Thorpe Culvert","latitude":53.12279894,"longitude":0.199481891,"stationOperator":"EM","crsCode":"TPC"},{"name":"Thurgarton","latitude":53.02922431,"longitude":-0.962023239,"stationOperator":"EM","crsCode":"THU"},{"name":"Tutbury & Hatton","latitude":52.86437892,"longitude":-1.682087757,"stationOperator":"EM","crsCode":"TUT"},{"name":"Uttoxeter","latitude":52.89708125,"longitude":-1.857261595,"stationOperator":"EM","crsCode":"UTT"},{"name":"Wainfleet","latitude":53.10514887,"longitude":0.234736319,"stationOperator":"EM","crsCode":"WFL"},{"name":"Wellingborough","latitude":52.30379284,"longitude":-0.676643216,"stationOperator":"EM","crsCode":"WEL"},{"name":"Whatstandwell","latitude":53.08311502,"longitude":-1.504309244,"stationOperator":"EM","crsCode":"WTS"},{"name":"Whitwell (Derbyshire)","latitude":53.28038058,"longitude":-1.199376401,"stationOperator":"EM","crsCode":"WWL"},{"name":"Willington","latitude":52.85366357,"longitude":-1.563360192,"stationOperator":"EM","crsCode":"WIL"},{"name":"Ashford International (Eurostar)","latitude":51.1409,"longitude":0.875,"stationOperator":"ES","crsCode":"ASI"},{"name":"London St Pancras (Intl)","latitude":51.53242,"longitude":-0.12603,"stationOperator":"ES","crsCode":"SPX"},{"name":"Alexandra Palace","latitude":51.59829,"longitude":-0.12014,"stationOperator":"GN","crsCode":"AAP"},{"name":"Arlesey","latitude":52.02604,"longitude":-0.26632,"stationOperator":"GN","crsCode":"ARL"},{"name":"Ashwell & Morden","latitude":52.03078,"longitude":-0.10978,"stationOperator":"GN","crsCode":"AWM"},{"name":"Baldock","latitude":51.99288,"longitude":-0.18756,"stationOperator":"GN","crsCode":"BDK"},{"name":"Bayford","latitude":51.75772,"longitude":-0.0956,"stationOperator":"GN","crsCode":"BAY"},{"name":"Biggleswade","latitude":52.08469,"longitude":-0.26118,"stationOperator":"GN","crsCode":"BIW"},{"name":"Bowes Park","latitude":51.60728,"longitude":-0.11977,"stationOperator":"GN","crsCode":"BOP"},{"name":"Brookmans Park","latitude":51.72106,"longitude":-0.20455,"stationOperator":"GN","crsCode":"BPK"},{"name":"Crews Hill","latitude":51.68449,"longitude":-0.10688,"stationOperator":"GN","crsCode":"CWH"},{"name":"Cuffley","latitude":51.70872,"longitude":-0.10978,"stationOperator":"GN","crsCode":"CUF"},{"name":"Downham Market","latitude":52.60413,"longitude":0.365691,"stationOperator":"GN","crsCode":"DOW"},{"name":"Drayton Park","latitude":51.55309,"longitude":-0.10571,"stationOperator":"GN","crsCode":"DYP"},{"name":"Enfield Chase","latitude":51.65276,"longitude":-0.09071,"stationOperator":"GN","crsCode":"ENC"},{"name":"Essex Road","latitude":51.54071,"longitude":-0.09627,"stationOperator":"GN","crsCode":"EXR"},{"name":"Finsbury Park","latitude":51.56478,"longitude":-0.10565,"stationOperator":"GN","crsCode":"FPK"},{"name":"Foxton","latitude":52.11913,"longitude":0.056536,"stationOperator":"GN","crsCode":"FXN"},{"name":"Gordon Hill","latitude":51.66352,"longitude":-0.09431,"stationOperator":"GN","crsCode":"GDH"},{"name":"Grange Park","latitude":51.64262,"longitude":-0.09735,"stationOperator":"GN","crsCode":"GPK"},{"name":"Hadley Wood","latitude":51.66841,"longitude":-0.17653,"stationOperator":"GN","crsCode":"HDW"},{"name":"Harringay","latitude":51.57737,"longitude":-0.10513,"stationOperator":"GN","crsCode":"HGY"},{"name":"Hatfield (Herts)","latitude":51.76388,"longitude":-0.21559,"stationOperator":"GN","crsCode":"HAT"},{"name":"Hertford North","latitude":51.79886,"longitude":-0.09178,"stationOperator":"GN","crsCode":"HFN"},{"name":"Hitchin","latitude":51.95329,"longitude":-0.26348,"stationOperator":"GN","crsCode":"HIT"},{"name":"Hornsey","latitude":51.58647,"longitude":-0.11197,"stationOperator":"GN","crsCode":"HRN"},{"name":"Huntingdon","latitude":52.32866,"longitude":-0.19206,"stationOperator":"GN","crsCode":"HUN"},{"name":"Kings Lynn","latitude":52.75381,"longitude":0.403525,"stationOperator":"GN","crsCode":"KLN"},{"name":"Knebworth","latitude":51.86686,"longitude":-0.18728,"stationOperator":"GN","crsCode":"KBW"},{"name":"Letchworth Garden City","latitude":51.97997,"longitude":-0.22926,"stationOperator":"GN","crsCode":"LET"},{"name":"Littleport","latitude":52.4624,"longitude":0.316567,"stationOperator":"GN","crsCode":"LTP"},{"name":"Meldreth","latitude":52.09073,"longitude":0.008953,"stationOperator":"GN","crsCode":"MEL"},{"name":"New Barnet","latitude":51.64857,"longitude":-0.17299,"stationOperator":"GN","crsCode":"NBA"},{"name":"New Southgate","latitude":51.61412,"longitude":-0.14303,"stationOperator":"GN","crsCode":"NSG"},{"name":"Oakleigh Park","latitude":51.63769,"longitude":-0.16621,"stationOperator":"GN","crsCode":"OKL"},{"name":"Palmers Green","latitude":51.61882,"longitude":-0.11034,"stationOperator":"GN","crsCode":"PAL"},{"name":"Potters Bar","latitude":51.69729,"longitude":-0.19236,"stationOperator":"GN","crsCode":"PBR"},{"name":"Royston","latitude":52.05309,"longitude":-0.02691,"stationOperator":"GN","crsCode":"RYS"},{"name":"Sandy","latitude":52.12475,"longitude":-0.28119,"stationOperator":"GN","crsCode":"SDY"},{"name":"Shepreth","latitude":52.11417,"longitude":0.031332,"stationOperator":"GN","crsCode":"STH"},{"name":"St Neots","latitude":52.23158,"longitude":-0.24741,"stationOperator":"GN","crsCode":"SNO"},{"name":"Stevenage","latitude":51.90169,"longitude":-0.20711,"stationOperator":"GN","crsCode":"SVG"},{"name":"Waterbeach","latitude":52.26245,"longitude":0.197386,"stationOperator":"GN","crsCode":"WBC"},{"name":"Watlington","latitude":52.67319,"longitude":0.383327,"stationOperator":"GN","crsCode":"WTG"},{"name":"Watton-at-Stone","latitude":51.85636,"longitude":-0.11972,"stationOperator":"GN","crsCode":"WAS"},{"name":"Welham Green","latitude":51.73635,"longitude":-0.21069,"stationOperator":"GN","crsCode":"WMG"},{"name":"Welwyn Garden City","latitude":51.80105,"longitude":-0.20407,"stationOperator":"GN","crsCode":"WGC"},{"name":"Welwyn North","latitude":51.8235,"longitude":-0.19209,"stationOperator":"GN","crsCode":"WLW"},{"name":"Winchmore Hill","latitude":51.63395,"longitude":-0.10089,"stationOperator":"GN","crsCode":"WIH"},{"name":"Berwick-upon-Tweed","latitude":55.77482692,"longitude":-2.011127048,"stationOperator":"GR","crsCode":"BWK"},{"name":"Darlington","latitude":54.52045136,"longitude":-1.547328479,"stationOperator":"GR","crsCode":"DAR"},{"name":"Doncaster","latitude":53.5214971,"longitude":-1.140234479,"stationOperator":"GR","crsCode":"DON"},{"name":"Durham","latitude":54.77939227,"longitude":-1.581756017,"stationOperator":"GR","crsCode":"DHM"},{"name":"Grantham","latitude":52.90649078,"longitude":-0.642452874,"stationOperator":"GR","crsCode":"GRA"},{"name":"Newark North Gate","latitude":53.08191008,"longitude":-0.800110846,"stationOperator":"GR","crsCode":"NNG"},{"name":"Newcastle","latitude":54.96822056,"longitude":-1.617285496,"stationOperator":"GR","crsCode":"NCL"},{"name":"Peterborough","latitude":52.57499236,"longitude":-0.249830061,"stationOperator":"GR","crsCode":"PBO"},{"name":"Retford","latitude":53.31517556,"longitude":-0.947878147,"stationOperator":"GR","crsCode":"RET"},{"name":"Wakefield Westgate","latitude":53.68174679,"longitude":-1.505407662,"stationOperator":"GR","crsCode":"WKF"},{"name":"York","latitude":53.95797924,"longitude":-1.093176915,"stationOperator":"GR","crsCode":"YRK"},{"name":"Acton Main Line","latitude":51.51692832,"longitude":-0.267630485,"stationOperator":"GW","crsCode":"AML"},{"name":"Aldermaston","latitude":51.40201112,"longitude":-1.138770296,"stationOperator":"GW","crsCode":"AMT"},{"name":"Appleford","latitude":51.63964272,"longitude":-1.242139074,"stationOperator":"GW","crsCode":"APF"},{"name":"Ascott-under-Wychwood","latitude":51.86734048,"longitude":-1.564058135,"stationOperator":"GW","crsCode":"AUW"},{"name":"Ashchurch for Tewkesbury","latitude":51.99916912,"longitude":-2.109057444,"stationOperator":"GW","crsCode":"ASC"},{"name":"Avoncliff","latitude":51.33964614,"longitude":-2.281339394,"stationOperator":"GW","crsCode":"AVF"},{"name":"Avonmouth","latitude":51.50012646,"longitude":-2.698421372,"stationOperator":"GW","crsCode":"AVN"},{"name":"Barnstaple","latitude":51.07396111,"longitude":-4.063153416,"stationOperator":"GW","crsCode":"BNP"},{"name":"Bath Spa","latitude":51.37768276,"longitude":-2.357034178,"stationOperator":"GW","crsCode":"BTH"},{"name":"Bedminster","latitude":51.44008674,"longitude":-2.594156901,"stationOperator":"GW","crsCode":"BMT"},{"name":"Bedwyn","latitude":51.37963498,"longitude":-1.598795279,"stationOperator":"GW","crsCode":"BDW"},{"name":"Bere Alston","latitude":50.4855868,"longitude":-4.200398271,"stationOperator":"GW","crsCode":"BAS"},{"name":"Bere Ferrers","latitude":50.45085678,"longitude":-4.181881299,"stationOperator":"GW","crsCode":"BFE"},{"name":"Betchworth","latitude":51.24818664,"longitude":-0.266974147,"stationOperator":"GW","crsCode":"BTO"},{"name":"Blackwater","latitude":51.33181014,"longitude":-0.777022615,"stationOperator":"GW","crsCode":"BAW"},{"name":"Bodmin Parkway","latitude":50.44585588,"longitude":-4.662971107,"stationOperator":"GW","crsCode":"BOD"},{"name":"Bourne End","latitude":51.57711651,"longitude":-0.710471017,"stationOperator":"GW","crsCode":"BNE"},{"name":"Bradford-on-Avon","latitude":51.34490956,"longitude":-2.252339918,"stationOperator":"GW","crsCode":"BOA"},{"name":"Bramley (Hants)","latitude":51.33007866,"longitude":-1.060987012,"stationOperator":"GW","crsCode":"BMY"},{"name":"Bridgwater","latitude":51.12807318,"longitude":-2.99028809,"stationOperator":"GW","crsCode":"BWT"},{"name":"Bristol Parkway","latitude":51.51383574,"longitude":-2.542659527,"stationOperator":"GW","crsCode":"BPW"},{"name":"Bruton","latitude":51.11162818,"longitude":-2.447079134,"stationOperator":"GW","crsCode":"BRU"},{"name":"Bugle","latitude":50.39994328,"longitude":-4.791841896,"stationOperator":"GW","crsCode":"BGL"},{"name":"Burnham (Bucks)","latitude":51.52350246,"longitude":-0.646369826,"stationOperator":"GW","crsCode":"BNM"},{"name":"Calstock","latitude":50.49757193,"longitude":-4.208711079,"stationOperator":"GW","crsCode":"CSK"},{"name":"Cam & Dursley","latitude":51.71761608,"longitude":-2.359096838,"stationOperator":"GW","crsCode":"CDU"},{"name":"Camborne","latitude":50.21042369,"longitude":-5.297472083,"stationOperator":"GW","crsCode":"CBN"},{"name":"Carbis Bay","latitude":50.19715063,"longitude":-5.464037988,"stationOperator":"GW","crsCode":"CBB"},{"name":"Castle Bar Park","latitude":51.52297874,"longitude":-0.331404502,"stationOperator":"GW","crsCode":"CBP"},{"name":"Castle Cary","latitude":51.09980387,"longitude":-2.522802166,"stationOperator":"GW","crsCode":"CLC"},{"name":"Causeland","latitude":50.40568197,"longitude":-4.466485305,"stationOperator":"GW","crsCode":"CAU"},{"name":"Chapelton (Devon)","latitude":51.01582131,"longitude":-4.02437053,"stationOperator":"GW","crsCode":"CPN"},{"name":"Charlbury","latitude":51.8724362,"longitude":-1.489697044,"stationOperator":"GW","crsCode":"CBY"},{"name":"Cheltenham Spa","latitude":51.897399,"longitude":-2.099625825,"stationOperator":"GW","crsCode":"CNM"},{"name":"Chetnole","latitude":50.86648406,"longitude":-2.574046181,"stationOperator":"GW","crsCode":"CNO"},{"name":"Chilworth","latitude":51.21521009,"longitude":-0.524818359,"stationOperator":"GW","crsCode":"CHL"},{"name":"Chippenham","latitude":51.46248638,"longitude":-2.115402682,"stationOperator":"GW","crsCode":"CPM"},{"name":"Cholsey","latitude":51.57020166,"longitude":-1.158018612,"stationOperator":"GW","crsCode":"CHO"},{"name":"Clifton Down","latitude":51.46454417,"longitude":-2.611749153,"stationOperator":"GW","crsCode":"CFN"},{"name":"Combe (Oxon)","latitude":51.83234296,"longitude":-1.392901935,"stationOperator":"GW","crsCode":"CME"},{"name":"Cookham","latitude":51.5574608,"longitude":-0.722076986,"stationOperator":"GW","crsCode":"COO"},{"name":"Coombe Junction Halt","latitude":50.44547073,"longitude":-4.48193626,"stationOperator":"GW","crsCode":"COE"},{"name":"Copplestone","latitude":50.81445919,"longitude":-3.751601158,"stationOperator":"GW","crsCode":"COP"},{"name":"Crediton","latitude":50.78342809,"longitude":-3.646879885,"stationOperator":"GW","crsCode":"CDI"},{"name":"Crowthorne","latitude":51.36672944,"longitude":-0.819274953,"stationOperator":"GW","crsCode":"CRN"},{"name":"Culham","latitude":51.65379512,"longitude":-1.236511134,"stationOperator":"GW","crsCode":"CUM"},{"name":"Dawlish","latitude":50.58080594,"longitude":-3.464647817,"stationOperator":"GW","crsCode":"DWL"},{"name":"Dawlish Warren","latitude":50.59905091,"longitude":-3.444018179,"stationOperator":"GW","crsCode":"DWW"},{"name":"Dean (Wilts)","latitude":51.0422304,"longitude":-1.634809477,"stationOperator":"GW","crsCode":"DEN"},{"name":"Devonport (Devon)","latitude":50.3781945,"longitude":-4.171511893,"stationOperator":"GW","crsCode":"DPT"},{"name":"Devonport Dockyard","latitude":50.38224968,"longitude":-4.175917265,"stationOperator":"GW","crsCode":"DOC"},{"name":"Didcot Parkway","latitude":51.61095504,"longitude":-1.242891296,"stationOperator":"GW","crsCode":"DID"},{"name":"Digby & Sowton","latitude":50.71370499,"longitude":-3.473885692,"stationOperator":"GW","crsCode":"DIG"},{"name":"Dilton Marsh","latitude":51.24799152,"longitude":-2.207421924,"stationOperator":"GW","crsCode":"DMH"},{"name":"Dorchester West","latitude":50.71094047,"longitude":-2.442548773,"stationOperator":"GW","crsCode":"DCW"},{"name":"Dorking Deepdene","latitude":51.23880129,"longitude":-0.324631668,"stationOperator":"GW","crsCode":"DPD"},{"name":"Dorking West","latitude":51.23622304,"longitude":-0.339967488,"stationOperator":"GW","crsCode":"DKT"},{"name":"Drayton Green","latitude":51.51602938,"longitude":-0.329640681,"stationOperator":"GW","crsCode":"DRG"},{"name":"Ealing Broadway","latitude":51.51484651,"longitude":-0.301752259,"stationOperator":"GW","crsCode":"EAL"},{"name":"Eggesford","latitude":50.88773166,"longitude":-3.874777657,"stationOperator":"GW","crsCode":"EGG"},{"name":"Evesham","latitude":52.09840414,"longitude":-1.947313868,"stationOperator":"GW","crsCode":"EVE"},{"name":"Exeter Central","latitude":50.72652351,"longitude":-3.532947602,"stationOperator":"GW","crsCode":"EXC"},{"name":"Exeter St David's","latitude":50.72915216,"longitude":-3.543660789,"stationOperator":"GW","crsCode":"EXD"},{"name":"Exeter St Thomas","latitude":50.71655803,"longitude":-3.539818783,"stationOperator":"GW","crsCode":"EXT"},{"name":"Exmouth","latitude":50.6216214,"longitude":-3.41499267,"stationOperator":"GW","crsCode":"EXM"},{"name":"Exton","latitude":50.66829151,"longitude":-3.444117811,"stationOperator":"GW","crsCode":"EXN"},{"name":"Falmouth Docks","latitude":50.15069317,"longitude":-5.056082925,"stationOperator":"GW","crsCode":"FAL"},{"name":"Falmouth Town","latitude":50.14836368,"longitude":-5.065272382,"stationOperator":"GW","crsCode":"FMT"},{"name":"Farnborough North","latitude":51.30204484,"longitude":-0.743026722,"stationOperator":"GW","crsCode":"FNN"},{"name":"Filton Abbey Wood","latitude":51.50493962,"longitude":-2.562437257,"stationOperator":"GW","crsCode":"FIT"},{"name":"Finstock","latitude":51.85279021,"longitude":-1.469345759,"stationOperator":"GW","crsCode":"FIN"},{"name":"Freshford","latitude":51.34202505,"longitude":-2.301023075,"stationOperator":"GW","crsCode":"FFD"},{"name":"Frome","latitude":51.22726268,"longitude":-2.310012271,"stationOperator":"GW","crsCode":"FRO"},{"name":"Furze Platt","latitude":51.53301767,"longitude":-0.728471069,"stationOperator":"GW","crsCode":"FZP"},{"name":"Gloucester","latitude":51.86541548,"longitude":-2.238656564,"stationOperator":"GW","crsCode":"GCR"},{"name":"Gomshall","latitude":51.21947014,"longitude":-0.442056348,"stationOperator":"GW","crsCode":"GOM"},{"name":"Goring & Streatley","latitude":51.52149065,"longitude":-1.13304466,"stationOperator":"GW","crsCode":"GOR"},{"name":"Gunnislake","latitude":50.51606725,"longitude":-4.219449323,"stationOperator":"GW","crsCode":"GSL"},{"name":"Hanborough","latitude":51.82516517,"longitude":-1.373525679,"stationOperator":"GW","crsCode":"HND"},{"name":"Hanwell","latitude":51.51193192,"longitude":-0.338725823,"stationOperator":"GW","crsCode":"HAN"},{"name":"Hayes & Harlington","latitude":51.50310042,"longitude":-0.420673064,"stationOperator":"GW","crsCode":"HAY"},{"name":"Hayle","latitude":50.18623531,"longitude":-5.419529634,"stationOperator":"GW","crsCode":"HYL"},{"name":"Henley-on-Thames","latitude":51.53417793,"longitude":-0.900215287,"stationOperator":"GW","crsCode":"HOT"},{"name":"Heyford","latitude":51.91919985,"longitude":-1.299267568,"stationOperator":"GW","crsCode":"HYD"},{"name":"Highbridge & Burnham","latitude":51.21815016,"longitude":-2.972173138,"stationOperator":"GW","crsCode":"HIG"},{"name":"Honeybourne","latitude":52.10142923,"longitude":-1.834981487,"stationOperator":"GW","crsCode":"HYB"},{"name":"Hungerford","latitude":51.41490602,"longitude":-1.512293535,"stationOperator":"GW","crsCode":"HGD"},{"name":"Iver","latitude":51.50850799,"longitude":-0.506717928,"stationOperator":"GW","crsCode":"IVR"},{"name":"Ivybridge","latitude":50.39357854,"longitude":-3.904458214,"stationOperator":"GW","crsCode":"IVY"},{"name":"Kemble","latitude":51.67627148,"longitude":-2.023096483,"stationOperator":"GW","crsCode":"KEM"},{"name":"Keyham","latitude":50.38974606,"longitude":-4.179074345,"stationOperator":"GW","crsCode":"KEY"},{"name":"Keynsham","latitude":51.41716993,"longitude":-2.494633256,"stationOperator":"GW","crsCode":"KYN"},{"name":"Kingham","latitude":51.90225045,"longitude":-1.6287933,"stationOperator":"GW","crsCode":"KGM"},{"name":"Kings Nympton","latitude":50.93597779,"longitude":-3.905610885,"stationOperator":"GW","crsCode":"KGN"},{"name":"Kintbury","latitude":51.40251723,"longitude":-1.445993627,"stationOperator":"GW","crsCode":"KIT"},{"name":"Langley (Berks)","latitude":51.50806754,"longitude":-0.541749056,"stationOperator":"GW","crsCode":"LNY"},{"name":"Lapford","latitude":50.85743381,"longitude":-3.811468159,"stationOperator":"GW","crsCode":"LAP"},{"name":"Lawrence Hill","latitude":51.45821869,"longitude":-2.564165806,"stationOperator":"GW","crsCode":"LWH"},{"name":"Lelant","latitude":50.18411125,"longitude":-5.436611903,"stationOperator":"GW","crsCode":"LEL"},{"name":"Lelant Saltings","latitude":50.1792896,"longitude":-5.441449302,"stationOperator":"GW","crsCode":"LTS"},{"name":"Liskeard","latitude":50.44684832,"longitude":-4.467498917,"stationOperator":"GW","crsCode":"LSK"},{"name":"Looe","latitude":50.3592157,"longitude":-4.456201102,"stationOperator":"GW","crsCode":"LOO"},{"name":"Lostwithiel","latitude":50.40749717,"longitude":-4.665464131,"stationOperator":"GW","crsCode":"LOS"},{"name":"Luxulyan","latitude":50.39029491,"longitude":-4.74751507,"stationOperator":"GW","crsCode":"LUX"},{"name":"Lympstone Commando","latitude":50.66222519,"longitude":-3.440861256,"stationOperator":"GW","crsCode":"LYC"},{"name":"Lympstone Village","latitude":50.64867164,"longitude":-3.431393476,"stationOperator":"GW","crsCode":"LYM"},{"name":"Maiden Newton","latitude":50.77999537,"longitude":-2.569440541,"stationOperator":"GW","crsCode":"MDN"},{"name":"Maidenhead","latitude":51.51866595,"longitude":-0.722658698,"stationOperator":"GW","crsCode":"MAI"},{"name":"Marlow","latitude":51.57099199,"longitude":-0.766429862,"stationOperator":"GW","crsCode":"MLW"},{"name":"Melksham","latitude":51.37981906,"longitude":-2.144507047,"stationOperator":"GW","crsCode":"MKM"},{"name":"Menheniot","latitude":50.42622082,"longitude":-4.40925881,"stationOperator":"GW","crsCode":"MEN"},{"name":"Midgham","latitude":51.39596936,"longitude":-1.177708473,"stationOperator":"GW","crsCode":"MDG"},{"name":"Montpelier","latitude":51.46889519,"longitude":-2.587332548,"stationOperator":"GW","crsCode":"MTP"},{"name":"Morchard Road","latitude":50.83189161,"longitude":-3.776395869,"stationOperator":"GW","crsCode":"MRD"},{"name":"Moreton-in-Marsh","latitude":51.99228415,"longitude":-1.700388972,"stationOperator":"GW","crsCode":"MIM"},{"name":"Mortimer","latitude":51.37207211,"longitude":-1.03550347,"stationOperator":"GW","crsCode":"MOR"},{"name":"Mottisfont & Dunbridge","latitude":51.03379277,"longitude":-1.546724812,"stationOperator":"GW","crsCode":"DBG"},{"name":"Nailsea & Backwell","latitude":51.41940681,"longitude":-2.750646299,"stationOperator":"GW","crsCode":"NLS"},{"name":"Newbury","latitude":51.39764427,"longitude":-1.322862459,"stationOperator":"GW","crsCode":"NBY"},{"name":"Newbury Racecourse","latitude":51.39845548,"longitude":-1.307799999,"stationOperator":"GW","crsCode":"NRC"},{"name":"Newcourt","latitude":-3.472551,"longitude":50.702656,"stationOperator":"GW","crsCode":"NCO"},{"name":"Newquay","latitude":50.41508811,"longitude":-5.075708631,"stationOperator":"GW","crsCode":"NQY"},{"name":"Newton Abbot","latitude":50.52956986,"longitude":-3.599193375,"stationOperator":"GW","crsCode":"NTA"},{"name":"Newton St Cyres","latitude":50.77891926,"longitude":-3.589414088,"stationOperator":"GW","crsCode":"NTC"},{"name":"North Camp","latitude":51.27579399,"longitude":-0.731198355,"stationOperator":"GW","crsCode":"NCM"},{"name":"Okehampton","latitude":50.737521,"longitude":-3.995299,"stationOperator":"GW","crsCode":"OKE"},{"name":"Oldfield Park","latitude":51.37920116,"longitude":-2.3802945,"stationOperator":"GW","crsCode":"OLF"},{"name":"Oxford","latitude":51.75350075,"longitude":-1.270151173,"stationOperator":"GW","crsCode":"OXF"},{"name":"Paignton","latitude":50.43470781,"longitude":-3.564338773,"stationOperator":"GW","crsCode":"PGN"},{"name":"Pangbourne","latitude":51.4853982,"longitude":-1.090464668,"stationOperator":"GW","crsCode":"PAN"},{"name":"Par","latitude":50.35531723,"longitude":-4.704719639,"stationOperator":"GW","crsCode":"PAR"},{"name":"Parson Street","latitude":51.43353995,"longitude":-2.608313932,"stationOperator":"GW","crsCode":"PSN"},{"name":"Patchway","latitude":51.52592522,"longitude":-2.562695774,"stationOperator":"GW","crsCode":"PWY"},{"name":"Penmere","latitude":50.1497831,"longitude":-5.083003855,"stationOperator":"GW","crsCode":"PNM"},{"name":"Penryn (Cornwall)","latitude":50.17026855,"longitude":-5.110935401,"stationOperator":"GW","crsCode":"PYN"},{"name":"Penzance","latitude":50.12168229,"longitude":-5.532467153,"stationOperator":"GW","crsCode":"PNZ"},{"name":"Perranwell","latitude":50.21648441,"longitude":-5.111839596,"stationOperator":"GW","crsCode":"PRW"},{"name":"Pershore","latitude":52.13029348,"longitude":-2.07154008,"stationOperator":"GW","crsCode":"PSH"},{"name":"Pewsey","latitude":51.34218734,"longitude":-1.770675036,"stationOperator":"GW","crsCode":"PEW"},{"name":"Pilning","latitude":51.55662016,"longitude":-2.627119757,"stationOperator":"GW","crsCode":"PIL"},{"name":"Plymouth","latitude":50.37781736,"longitude":-4.143363131,"stationOperator":"GW","crsCode":"PLY"},{"name":"Polsloe Bridge","latitude":50.73106987,"longitude":-3.501496022,"stationOperator":"GW","crsCode":"POL"},{"name":"Portsmouth Arms","latitude":50.95699912,"longitude":-3.950613811,"stationOperator":"GW","crsCode":"PMA"},{"name":"Quintrell Downs","latitude":50.40396942,"longitude":-5.029806255,"stationOperator":"GW","crsCode":"QUI"},{"name":"Radley","latitude":51.68620873,"longitude":-1.240479351,"stationOperator":"GW","crsCode":"RAD"},{"name":"Reading West","latitude":51.45545321,"longitude":-0.990294679,"stationOperator":"GW","crsCode":"RDW"},{"name":"Redland","latitude":51.46838591,"longitude":-2.599131362,"stationOperator":"GW","crsCode":"RDA"},{"name":"Redruth","latitude":50.2332413,"longitude":-5.225974546,"stationOperator":"GW","crsCode":"RED"},{"name":"Roche","latitude":50.41826529,"longitude":-4.830229067,"stationOperator":"GW","crsCode":"ROC"},{"name":"Romsey","latitude":50.99252174,"longitude":-1.493151814,"stationOperator":"GW","crsCode":"ROM"},{"name":"Saltash","latitude":50.40734763,"longitude":-4.20915696,"stationOperator":"GW","crsCode":"STS"},{"name":"Sampford Courtenay","latitude":50.778968,"longitude":-3.937485,"stationOperator":"GW","crsCode":"SMC"},{"name":"Sandhurst (Berks)","latitude":51.34647568,"longitude":-0.803914472,"stationOperator":"GW","crsCode":"SND"},{"name":"Sandplace","latitude":50.38674429,"longitude":-4.464517438,"stationOperator":"GW","crsCode":"SDP"},{"name":"Sea Mills","latitude":51.47953406,"longitude":-2.650110484,"stationOperator":"GW","crsCode":"SML"},{"name":"Severn Beach","latitude":51.55955383,"longitude":-2.66427711,"stationOperator":"GW","crsCode":"SVB"},{"name":"Shalford (Surrey)","latitude":51.21431997,"longitude":-0.566799182,"stationOperator":"GW","crsCode":"SFR"},{"name":"Shiplake","latitude":51.51121587,"longitude":-0.882524379,"stationOperator":"GW","crsCode":"SHI"},{"name":"Shipton","latitude":51.86565386,"longitude":-1.5926996,"stationOperator":"GW","crsCode":"SIP"},{"name":"Shirehampton","latitude":51.48458989,"longitude":-2.678266118,"stationOperator":"GW","crsCode":"SHH"},{"name":"Slough","latitude":51.51187689,"longitude":-0.591504981,"stationOperator":"GW","crsCode":"SLO"},{"name":"South Greenford","latitude":51.53321485,"longitude":-0.336653369,"stationOperator":"GW","crsCode":"SGN"},{"name":"Southall","latitude":51.50596158,"longitude":-0.378613083,"stationOperator":"GW","crsCode":"STL"},{"name":"St Andrews Road","latitude":51.51279724,"longitude":-2.696698481,"stationOperator":"GW","crsCode":"SAR"},{"name":"St Austell","latitude":50.33950737,"longitude":-4.789405571,"stationOperator":"GW","crsCode":"SAU"},{"name":"St Budeaux Ferry Road","latitude":50.40138693,"longitude":-4.186644684,"stationOperator":"GW","crsCode":"SBF"},{"name":"St Budeaux Victoria Road","latitude":50.4021693,"longitude":-4.188088002,"stationOperator":"GW","crsCode":"SBV"},{"name":"St Columb Road","latitude":50.39905812,"longitude":-4.940828131,"stationOperator":"GW","crsCode":"SCR"},{"name":"St Erth","latitude":50.1704777,"longitude":-5.444317521,"stationOperator":"GW","crsCode":"SER"},{"name":"St Germans","latitude":50.39426531,"longitude":-4.30845147,"stationOperator":"GW","crsCode":"SGM"},{"name":"St Ives (Cornwall)","latitude":50.20864501,"longitude":-5.47678695,"stationOperator":"GW","crsCode":"SIV"},{"name":"St James Park (Exeter)","latitude":50.73068086,"longitude":-3.523164103,"stationOperator":"GW","crsCode":"SJP"},{"name":"St Keyne Wishing Well Halt","latitude":50.42305549,"longitude":-4.461615382,"stationOperator":"GW","crsCode":"SKN"},{"name":"Stapleton Road","latitude":51.46750636,"longitude":-2.566223864,"stationOperator":"GW","crsCode":"SRD"},{"name":"Starcross","latitude":50.62778455,"longitude":-3.447726133,"stationOperator":"GW","crsCode":"SCS"},{"name":"Stonehouse","latitude":51.74588546,"longitude":-2.279510293,"stationOperator":"GW","crsCode":"SHU"},{"name":"Stroud (Gloucs)","latitude":51.74457443,"longitude":-2.219392567,"stationOperator":"GW","crsCode":"STD"},{"name":"Swindon (Wilts)","latitude":51.56547293,"longitude":-1.785510103,"stationOperator":"GW","crsCode":"SWI"},{"name":"Tackley","latitude":51.88132548,"longitude":-1.297226956,"stationOperator":"GW","crsCode":"TAC"},{"name":"Taplow","latitude":51.5235594,"longitude":-0.68136745,"stationOperator":"GW","crsCode":"TAP"},{"name":"Taunton","latitude":51.02365625,"longitude":-3.102132918,"stationOperator":"GW","crsCode":"TAU"},{"name":"Teignmouth","latitude":50.54804676,"longitude":-3.494686366,"stationOperator":"GW","crsCode":"TGM"},{"name":"Thatcham","latitude":51.39383879,"longitude":-1.243189177,"stationOperator":"GW","crsCode":"THA"},{"name":"Theale","latitude":51.43344686,"longitude":-1.074967204,"stationOperator":"GW","crsCode":"THE"},{"name":"Thornford","latitude":50.91195034,"longitude":-2.57972607,"stationOperator":"GW","crsCode":"THO"},{"name":"Tilehurst","latitude":51.47150508,"longitude":-1.029822977,"stationOperator":"GW","crsCode":"TLH"},{"name":"Tiverton Parkway","latitude":50.9175286,"longitude":-3.359957026,"stationOperator":"GW","crsCode":"TVP"},{"name":"Topsham","latitude":50.68604362,"longitude":-3.463675278,"stationOperator":"GW","crsCode":"TOP"},{"name":"Torquay","latitude":50.46116534,"longitude":-3.54366854,"stationOperator":"GW","crsCode":"TQY"},{"name":"Torre","latitude":50.4731714,"longitude":-3.546441301,"stationOperator":"GW","crsCode":"TRR"},{"name":"Totnes","latitude":50.43584686,"longitude":-3.688721847,"stationOperator":"GW","crsCode":"TOT"},{"name":"Trowbridge","latitude":51.31982565,"longitude":-2.21434677,"stationOperator":"GW","crsCode":"TRO"},{"name":"Truro","latitude":50.26382962,"longitude":-5.064866947,"stationOperator":"GW","crsCode":"TRU"},{"name":"Twyford","latitude":51.47553018,"longitude":-0.863294993,"stationOperator":"GW","crsCode":"TWY"},{"name":"Umberleigh","latitude":50.99674639,"longitude":-3.98292199,"stationOperator":"GW","crsCode":"UMB"},{"name":"Wargrave","latitude":51.49815593,"longitude":-0.876519321,"stationOperator":"GW","crsCode":"WGV"},{"name":"Warminster","latitude":51.2067679,"longitude":-2.176745956,"stationOperator":"GW","crsCode":"WMN"},{"name":"West Drayton","latitude":51.51006005,"longitude":-0.472225232,"stationOperator":"GW","crsCode":"WDT"},{"name":"West Ealing","latitude":51.51364043,"longitude":-0.319783629,"stationOperator":"GW","crsCode":"WEA"},{"name":"Westbury (Wilts)","latitude":51.26697915,"longitude":-2.199193897,"stationOperator":"GW","crsCode":"WSB"},{"name":"Weston Milton","latitude":51.34877468,"longitude":-2.943343959,"stationOperator":"GW","crsCode":"WNM"},{"name":"Weston-super-Mare","latitude":51.34431671,"longitude":-2.971681531,"stationOperator":"GW","crsCode":"WSM"},{"name":"Windsor & Eton Central","latitude":51.48327262,"longitude":-0.610374922,"stationOperator":"GW","crsCode":"WNC"},{"name":"Worle","latitude":51.35803344,"longitude":-2.909638886,"stationOperator":"GW","crsCode":"WOR"},{"name":"Yate","latitude":51.54060333,"longitude":-2.432524509,"stationOperator":"GW","crsCode":"YAE"},{"name":"Yatton","latitude":51.39101195,"longitude":-2.82779361,"stationOperator":"GW","crsCode":"YAT"},{"name":"Yeoford","latitude":50.7768865,"longitude":-3.726083161,"stationOperator":"GW","crsCode":"YEO"},{"name":"Yeovil Pen Mill","latitude":50.94451153,"longitude":-2.613439339,"stationOperator":"GW","crsCode":"YVP"},{"name":"Yetminster","latitude":50.89615639,"longitude":-2.572988939,"stationOperator":"GW","crsCode":"YET"},{"name":"Brading","latitude":50.67835504,"longitude":-1.138722649,"stationOperator":"IL","crsCode":"BDN"},{"name":"Lake","latitude":50.64646818,"longitude":-1.166349574,"stationOperator":"IL","crsCode":"LKE"},{"name":"Ryde Esplanade","latitude":50.73285421,"longitude":-1.159772507,"stationOperator":"IL","crsCode":"RYD"},{"name":"Ryde Pier Head","latitude":50.73916991,"longitude":-1.160127176,"stationOperator":"IL","crsCode":"RYP"},{"name":"Ryde St Johns Road","latitude":50.72435057,"longitude":-1.156566865,"stationOperator":"IL","crsCode":"RYR"},{"name":"Sandown","latitude":50.65685392,"longitude":-1.162388386,"stationOperator":"IL","crsCode":"SAN"},{"name":"Shanklin","latitude":50.63390141,"longitude":-1.179835636,"stationOperator":"IL","crsCode":"SHN"},{"name":"Smallbrook Junction","latitude":50.71120981,"longitude":-1.155074725,"stationOperator":"IL","crsCode":"SAB"},{"name":"Acle","latitude":52.63470623,"longitude":1.543930278,"stationOperator":"LE","crsCode":"ACL"},{"name":"Alresford (Essex)","latitude":51.85400474,"longitude":0.996704746,"stationOperator":"LE","crsCode":"ALR"},{"name":"Althorne (Essex)","latitude":51.64787695,"longitude":0.752499154,"stationOperator":"LE","crsCode":"ALN"},{"name":"Angel Road","latitude":51.61241213,"longitude":-0.048784168,"stationOperator":"LE","crsCode":"AGR"},{"name":"Attleborough","latitude":52.51426479,"longitude":1.022679778,"stationOperator":"LE","crsCode":"ATL"},{"name":"Audley End","latitude":52.00445153,"longitude":0.2071621,"stationOperator":"LE","crsCode":"AUD"},{"name":"Battlesbridge","latitude":51.62486557,"longitude":0.56580343,"stationOperator":"LE","crsCode":"BLB"},{"name":"Beccles","latitude":52.45854162,"longitude":1.569508099,"stationOperator":"LE","crsCode":"BCC"},{"name":"Berney Arms","latitude":52.58980986,"longitude":1.630392836,"stationOperator":"LE","crsCode":"BYA"},{"name":"Billericay","latitude":51.62889045,"longitude":0.418635763,"stationOperator":"LE","crsCode":"BIC"},{"name":"Bishops Stortford","latitude":51.86669627,"longitude":0.164908628,"stationOperator":"LE","crsCode":"BIS"},{"name":"Braintree","latitude":51.87540511,"longitude":0.556698654,"stationOperator":"LE","crsCode":"BTR"},{"name":"Braintree Freeport","latitude":51.86901047,"longitude":0.567449428,"stationOperator":"LE","crsCode":"BTP"},{"name":"Brampton (Suffolk)","latitude":52.39545244,"longitude":1.543824133,"stationOperator":"LE","crsCode":"BRP"},{"name":"Brandon","latitude":52.45402845,"longitude":0.62473398,"stationOperator":"LE","crsCode":"BND"},{"name":"Brimsdown","latitude":51.65528087,"longitude":-0.03103974,"stationOperator":"LE","crsCode":"BMD"},{"name":"Broxbourne","latitude":51.74691233,"longitude":-0.011077941,"stationOperator":"LE","crsCode":"BXB"},{"name":"Brundall","latitude":52.61980542,"longitude":1.439275107,"stationOperator":"LE","crsCode":"BDA"},{"name":"Brundall Gardens","latitude":52.62309579,"longitude":1.418842092,"stationOperator":"LE","crsCode":"BGA"},{"name":"Buckenham (Norfolk)","latitude":52.59776177,"longitude":1.47033814,"stationOperator":"LE","crsCode":"BUC"},{"name":"Bures","latitude":51.97099242,"longitude":0.769005125,"stationOperator":"LE","crsCode":"BUE"},{"name":"Burnham-on-Crouch","latitude":51.63366373,"longitude":0.814045173,"stationOperator":"LE","crsCode":"BUU"},{"name":"Bury St Edmunds","latitude":52.25377846,"longitude":0.713310161,"stationOperator":"LE","crsCode":"BSE"},{"name":"Cambridge","latitude":52.1945746,"longitude":0.137554552,"stationOperator":"LE","crsCode":"CBG"},{"name":"Cantley","latitude":52.57877082,"longitude":1.513426069,"stationOperator":"LE","crsCode":"CNY"},{"name":"Chappel & Wakes Colne","latitude":51.92592031,"longitude":0.758518905,"stationOperator":"LE","crsCode":"CWC"},{"name":"Chelmsford","latitude":51.73638236,"longitude":0.468580339,"stationOperator":"LE","crsCode":"CHM"},{"name":"Cheshunt","latitude":51.70287691,"longitude":-0.023951585,"stationOperator":"LE","crsCode":"CHN"},{"name":"Clacton-on-Sea","latitude":51.79401273,"longitude":1.154105287,"stationOperator":"LE","crsCode":"CLT"},{"name":"Colchester","latitude":51.90061619,"longitude":0.89347015,"stationOperator":"LE","crsCode":"COL"},{"name":"Colchester Town","latitude":51.8865294,"longitude":0.904148555,"stationOperator":"LE","crsCode":"CET"},{"name":"Cressing (Essex)","latitude":51.85234942,"longitude":0.577973167,"stationOperator":"LE","crsCode":"CES"},{"name":"Cromer","latitude":52.9301088,"longitude":1.292833615,"stationOperator":"LE","crsCode":"CMR"},{"name":"Darsham","latitude":52.27301314,"longitude":1.523482074,"stationOperator":"LE","crsCode":"DSM"},{"name":"Derby Road (Ipswich)","latitude":52.05057196,"longitude":1.182659486,"stationOperator":"LE","crsCode":"DBR"},{"name":"Diss","latitude":52.37367539,"longitude":1.123713427,"stationOperator":"LE","crsCode":"DIS"},{"name":"Dovercourt","latitude":51.93875208,"longitude":1.280629166,"stationOperator":"LE","crsCode":"DVC"},{"name":"Dullingham","latitude":52.20166503,"longitude":0.366671696,"stationOperator":"LE","crsCode":"DUL"},{"name":"Eccles Road","latitude":52.47090467,"longitude":0.969929467,"stationOperator":"LE","crsCode":"ECS"},{"name":"Elmswell","latitude":52.23805444,"longitude":0.912598515,"stationOperator":"LE","crsCode":"ESW"},{"name":"Elsenham (Essex)","latitude":51.92055206,"longitude":0.228072408,"stationOperator":"LE","crsCode":"ESM"},{"name":"Ely","latitude":52.39124961,"longitude":0.266833823,"stationOperator":"LE","crsCode":"ELY"},{"name":"Enfield Lock","latitude":51.67088281,"longitude":-0.02833834,"stationOperator":"LE","crsCode":"ENL"},{"name":"Felixstowe","latitude":51.96708668,"longitude":1.35045546,"stationOperator":"LE","crsCode":"FLX"},{"name":"Frinton-on-Sea","latitude":51.83769342,"longitude":1.243187057,"stationOperator":"LE","crsCode":"FRI"},{"name":"Great Bentley","latitude":51.85177166,"longitude":1.065164898,"stationOperator":"LE","crsCode":"GRB"},{"name":"Great Chesterford","latitude":52.05982142,"longitude":0.193523039,"stationOperator":"LE","crsCode":"GRC"},{"name":"Great Yarmouth","latitude":52.61218298,"longitude":1.720906278,"stationOperator":"LE","crsCode":"GYM"},{"name":"Gunton","latitude":52.86613631,"longitude":1.348766988,"stationOperator":"LE","crsCode":"GNT"},{"name":"Haddiscoe","latitude":52.52889004,"longitude":1.622411116,"stationOperator":"LE","crsCode":"HAD"},{"name":"Halesworth","latitude":52.34669719,"longitude":1.505698126,"stationOperator":"LE","crsCode":"HAS"},{"name":"Harling Road","latitude":52.45371021,"longitude":0.909152671,"stationOperator":"LE","crsCode":"HRD"},{"name":"Harlow Mill","latitude":51.79036827,"longitude":0.132320656,"stationOperator":"LE","crsCode":"HWM"},{"name":"Harlow Town","latitude":51.78107298,"longitude":0.095143791,"stationOperator":"LE","crsCode":"HWN"},{"name":"Harwich International","latitude":51.9473035,"longitude":1.25514186,"stationOperator":"LE","crsCode":"HPQ"},{"name":"Harwich Town","latitude":51.94415922,"longitude":1.286700168,"stationOperator":"LE","crsCode":"HWC"},{"name":"Hatfield Peverel","latitude":51.779875,"longitude":0.592135742,"stationOperator":"LE","crsCode":"HAP"},{"name":"Hertford East","latitude":51.79903842,"longitude":-0.07293406,"stationOperator":"LE","crsCode":"HFE"},{"name":"Hockley","latitude":51.60356168,"longitude":0.65901386,"stationOperator":"LE","crsCode":"HOC"},{"name":"Hoveton & Wroxham","latitude":52.71559814,"longitude":1.408008889,"stationOperator":"LE","crsCode":"HXM"},{"name":"Hythe (Essex)","latitude":51.88565263,"longitude":0.927535333,"stationOperator":"LE","crsCode":"HYH"},{"name":"Ingatestone","latitude":51.66705103,"longitude":0.384252139,"stationOperator":"LE","crsCode":"INT"},{"name":"Ipswich","latitude":52.05060957,"longitude":1.144440623,"stationOperator":"LE","crsCode":"IPS"},{"name":"Kelvedon","latitude":51.84071438,"longitude":0.702401142,"stationOperator":"LE","crsCode":"KEL"},{"name":"Kennett","latitude":52.27728025,"longitude":0.490476315,"stationOperator":"LE","crsCode":"KNE"},{"name":"Kirby Cross","latitude":51.84140899,"longitude":1.215008216,"stationOperator":"LE","crsCode":"KBX"},{"name":"Lakenheath","latitude":52.4475127,"longitude":0.533892607,"stationOperator":"LE","crsCode":"LAK"},{"name":"Lea Bridge","latitude":51.567669,"longitude":-0.035556,"stationOperator":"LE","crsCode":"LEB"},{"name":"Lingwood","latitude":52.62223679,"longitude":1.489863333,"stationOperator":"LE","crsCode":"LGD"},{"name":"Lowestoft","latitude":52.47445691,"longitude":1.749727847,"stationOperator":"LE","crsCode":"LWT"},{"name":"Manea","latitude":52.49785289,"longitude":0.177697575,"stationOperator":"LE","crsCode":"MNE"},{"name":"Manningtree","latitude":51.94906612,"longitude":1.045251421,"stationOperator":"LE","crsCode":"MNG"},{"name":"March","latitude":52.55990987,"longitude":0.091199581,"stationOperator":"LE","crsCode":"MCH"},{"name":"Marks Tey","latitude":51.88095194,"longitude":0.783345532,"stationOperator":"LE","crsCode":"MKT"},{"name":"Melton (Suffolk)","latitude":52.10445728,"longitude":1.338257583,"stationOperator":"LE","crsCode":"MES"},{"name":"Mistley","latitude":51.94364535,"longitude":1.081412598,"stationOperator":"LE","crsCode":"MIS"},{"name":"Needham Market","latitude":52.15260095,"longitude":1.05527234,"stationOperator":"LE","crsCode":"NMT"},{"name":"Newmarket","latitude":52.23795928,"longitude":0.406217482,"stationOperator":"LE","crsCode":"NMK"},{"name":"Newport (Essex)","latitude":51.97987781,"longitude":0.215142617,"stationOperator":"LE","crsCode":"NWE"},{"name":"North Fambridge","latitude":51.64859041,"longitude":0.681672508,"stationOperator":"LE","crsCode":"NFA"},{"name":"North Walsham","latitude":52.81691581,"longitude":1.384466116,"stationOperator":"LE","crsCode":"NWA"},{"name":"Northumberland Park","latitude":51.60170041,"longitude":-0.05357565,"stationOperator":"LE","crsCode":"NUM"},{"name":"Norwich","latitude":52.62717818,"longitude":1.306828331,"stationOperator":"LE","crsCode":"NRW"},{"name":"Oulton Broad North","latitude":52.47777986,"longitude":1.715729717,"stationOperator":"LE","crsCode":"OUN"},{"name":"Oulton Broad South","latitude":52.46974778,"longitude":1.707982367,"stationOperator":"LE","crsCode":"OUS"},{"name":"Ponders End","latitude":51.64274862,"longitude":-0.034473536,"stationOperator":"LE","crsCode":"PON"},{"name":"Prittlewell","latitude":51.55069115,"longitude":0.71068991,"stationOperator":"LE","crsCode":"PRL"},{"name":"Rayleigh","latitude":51.58945508,"longitude":0.600638611,"stationOperator":"LE","crsCode":"RLG"},{"name":"Reedham (Norfolk)","latitude":52.5645259,"longitude":1.559666375,"stationOperator":"LE","crsCode":"REE"},{"name":"Rochford","latitude":51.58173343,"longitude":0.702317091,"stationOperator":"LE","crsCode":"RFD"},{"name":"Roughton Road","latitude":52.91804369,"longitude":1.299803414,"stationOperator":"LE","crsCode":"RNR"},{"name":"Roydon","latitude":51.77548937,"longitude":0.036262005,"stationOperator":"LE","crsCode":"RYN"},{"name":"Rye House","latitude":51.76941544,"longitude":0.005637565,"stationOperator":"LE","crsCode":"RYH"},{"name":"Salhouse","latitude":52.67560081,"longitude":1.391426504,"stationOperator":"LE","crsCode":"SAH"},{"name":"Sawbridgeworth","latitude":51.81435127,"longitude":0.160425068,"stationOperator":"LE","crsCode":"SAW"},{"name":"Saxmundham","latitude":52.21491694,"longitude":1.490176361,"stationOperator":"LE","crsCode":"SAX"},{"name":"Shelford (Cambs)","latitude":52.14884103,"longitude":0.139981977,"stationOperator":"LE","crsCode":"SED"},{"name":"Shenfield","latitude":51.63088441,"longitude":0.329854866,"stationOperator":"LE","crsCode":"SNF"},{"name":"Sheringham","latitude":52.94088541,"longitude":1.211327178,"stationOperator":"LE","crsCode":"SHM"},{"name":"Shippea Hill","latitude":52.43023398,"longitude":0.413355863,"stationOperator":"LE","crsCode":"SPP"},{"name":"Somerleyton","latitude":52.51025111,"longitude":1.652277542,"stationOperator":"LE","crsCode":"SYT"},{"name":"South Woodham Ferrers","latitude":51.64966861,"longitude":0.6066729,"stationOperator":"LE","crsCode":"SOF"},{"name":"Southend Victoria","latitude":51.54151627,"longitude":0.711514592,"stationOperator":"LE","crsCode":"SOV"},{"name":"Southminster","latitude":51.66063093,"longitude":0.835210668,"stationOperator":"LE","crsCode":"SMN"},{"name":"Spooner Row","latitude":52.53501919,"longitude":1.086491641,"stationOperator":"LE","crsCode":"SPN"},{"name":"St Margarets (Herts)","latitude":51.7878436,"longitude":0.001278525,"stationOperator":"LE","crsCode":"SMT"},{"name":"Stansted Airport","latitude":51.8885966,"longitude":0.26081836,"stationOperator":"LE","crsCode":"SSD"},{"name":"Stansted Mountfitchet","latitude":51.90131018,"longitude":0.19974645,"stationOperator":"LE","crsCode":"SST"},{"name":"Stowmarket","latitude":52.18972565,"longitude":1.000016541,"stationOperator":"LE","crsCode":"SMK"},{"name":"Sudbury (Suffolk)","latitude":52.03628673,"longitude":0.735461571,"stationOperator":"LE","crsCode":"SUY"},{"name":"Thetford","latitude":52.41914509,"longitude":0.745078426,"stationOperator":"LE","crsCode":"TTF"},{"name":"Thorpe-le-Soken","latitude":51.84777684,"longitude":1.161641452,"stationOperator":"LE","crsCode":"TLS"},{"name":"Thurston","latitude":52.25026767,"longitude":0.809509861,"stationOperator":"LE","crsCode":"TRS"},{"name":"Tottenham Hale","latitude":51.58831639,"longitude":-0.059922399,"stationOperator":"LE","crsCode":"TOM"},{"name":"Trimley","latitude":51.9765436,"longitude":1.319555915,"stationOperator":"LE","crsCode":"TRM"},{"name":"Waltham Cross","latitude":51.68507019,"longitude":-0.026550053,"stationOperator":"LE","crsCode":"WLC"},{"name":"Walton-on-the-Naze","latitude":51.84620069,"longitude":1.267920697,"stationOperator":"LE","crsCode":"WON"},{"name":"Ware (Herts)","latitude":51.80796409,"longitude":-0.028772714,"stationOperator":"LE","crsCode":"WAR"},{"name":"Weeley","latitude":51.85311063,"longitude":1.115494594,"stationOperator":"LE","crsCode":"WEE"},{"name":"West Runton","latitude":52.9355503,"longitude":1.245465306,"stationOperator":"LE","crsCode":"WRN"},{"name":"Westerfield","latitude":52.08087836,"longitude":1.166130957,"stationOperator":"LE","crsCode":"WFI"},{"name":"White Notley","latitude":51.8389241,"longitude":0.595875952,"stationOperator":"LE","crsCode":"WNY"},{"name":"Whittlesea","latitude":52.54995569,"longitude":-0.118225461,"stationOperator":"LE","crsCode":"WLE"},{"name":"Whittlesford Parkway","latitude":52.10360009,"longitude":0.165618606,"stationOperator":"LE","crsCode":"WLF"},{"name":"Wickford","latitude":51.61502928,"longitude":0.519193939,"stationOperator":"LE","crsCode":"WIC"},{"name":"Wickham Market","latitude":52.15112006,"longitude":1.39868855,"stationOperator":"LE","crsCode":"WCM"},{"name":"Witham","latitude":51.80597989,"longitude":0.639143614,"stationOperator":"LE","crsCode":"WTM"},{"name":"Wivenhoe","latitude":51.85654276,"longitude":0.956146009,"stationOperator":"LE","crsCode":"WIV"},{"name":"Woodbridge","latitude":52.09046452,"longitude":1.317791422,"stationOperator":"LE","crsCode":"WDB"},{"name":"Worstead","latitude":52.77731601,"longitude":1.404230785,"stationOperator":"LE","crsCode":"WRT"},{"name":"Wrabness","latitude":51.93945868,"longitude":1.171915943,"stationOperator":"LE","crsCode":"WRB"},{"name":"Wymondham","latitude":52.56486065,"longitude":1.117662312,"stationOperator":"LE","crsCode":"WMD"},{"name":"Acocks Green","latitude":52.44933057,"longitude":-1.818984792,"stationOperator":"LM","crsCode":"ACG"},{"name":"Acton Bridge (Cheshire)","latitude":53.26598504,"longitude":-2.60266626,"stationOperator":"LM","crsCode":"ACB"},{"name":"Adderley Park","latitude":52.48309476,"longitude":-1.85593993,"stationOperator":"LM","crsCode":"ADD"},{"name":"Albrighton","latitude":52.63795639,"longitude":-2.268906298,"stationOperator":"LM","crsCode":"ALB"},{"name":"Alvechurch","latitude":52.34608475,"longitude":-1.967659996,"stationOperator":"LM","crsCode":"ALV"},{"name":"Apsley","latitude":51.73252418,"longitude":-0.462924369,"stationOperator":"LM","crsCode":"APS"},{"name":"Aspley Guise","latitude":52.02124786,"longitude":-0.632327027,"stationOperator":"LM","crsCode":"APG"},{"name":"Aston","latitude":52.50513897,"longitude":-1.871779432,"stationOperator":"LM","crsCode":"AST"},{"name":"Atherstone","latitude":52.5789821,"longitude":-1.552812353,"stationOperator":"LM","crsCode":"ATH"},{"name":"Barlaston","latitude":52.94288578,"longitude":-2.168112728,"stationOperator":"LM","crsCode":"BRT"},{"name":"Barnt Green","latitude":52.36109392,"longitude":-1.992466617,"stationOperator":"LM","crsCode":"BTG"},{"name":"Bearley","latitude":52.24442123,"longitude":-1.750263853,"stationOperator":"LM","crsCode":"BER"},{"name":"Bedford St Johns","latitude":52.12949203,"longitude":-0.467502781,"stationOperator":"LM","crsCode":"BSJ"},{"name":"Bedworth","latitude":52.47931356,"longitude":-1.467391189,"stationOperator":"LM","crsCode":"BEH"},{"name":"Berkhamsted","latitude":51.76313738,"longitude":-0.562005134,"stationOperator":"LM","crsCode":"BKM"},{"name":"Berkswell","latitude":52.39589581,"longitude":-1.642844919,"stationOperator":"LM","crsCode":"BKW"},{"name":"Bermuda Park","latitude":52.504479,"longitude":-1.473879,"stationOperator":"LM","crsCode":"BEP"},{"name":"Bescot Stadium","latitude":52.56274493,"longitude":-1.99110442,"stationOperator":"LM","crsCode":"BSC"},{"name":"Bilbrook","latitude":52.6237314,"longitude":-2.186091807,"stationOperator":"LM","crsCode":"BBK"},{"name":"Birmingham Snow Hill","latitude":52.48358956,"longitude":-1.899820964,"stationOperator":"LM","crsCode":"BSW"},{"name":"Blake Street","latitude":52.604897,"longitude":-1.844908831,"stationOperator":"LM","crsCode":"BKT"},{"name":"Blakedown","latitude":52.40618415,"longitude":-2.17635507,"stationOperator":"LM","crsCode":"BKD"},{"name":"Bletchley","latitude":51.99534498,"longitude":-0.736316135,"stationOperator":"LM","crsCode":"BLY"},{"name":"Bloxwich","latitude":52.61821329,"longitude":-2.011476946,"stationOperator":"LM","crsCode":"BLX"},{"name":"Bloxwich North","latitude":52.62567399,"longitude":-2.019161042,"stationOperator":"LM","crsCode":"BWN"},{"name":"Bordesley","latitude":52.47188154,"longitude":-1.877764833,"stationOperator":"LM","crsCode":"BBS"},{"name":"Bournville","latitude":52.4269705,"longitude":-1.926421682,"stationOperator":"LM","crsCode":"BRV"},{"name":"Bow Brickhill","latitude":52.00431141,"longitude":-0.696072267,"stationOperator":"LM","crsCode":"BWB"},{"name":"Bricket Wood","latitude":51.70542949,"longitude":-0.359116315,"stationOperator":"LM","crsCode":"BWO"},{"name":"Bromsgrove","latitude":52.32270414,"longitude":-2.048374392,"stationOperator":"LM","crsCode":"BMV"},{"name":"Butlers Lane","latitude":52.59248151,"longitude":-1.838014434,"stationOperator":"LM","crsCode":"BUL"},{"name":"Canley","latitude":52.39925568,"longitude":-1.547576591,"stationOperator":"LM","crsCode":"CNL"},{"name":"Cannock","latitude":52.6861758,"longitude":-2.022146266,"stationOperator":"LM","crsCode":"CAO"},{"name":"Cheddington","latitude":51.85792469,"longitude":-0.662146256,"stationOperator":"LM","crsCode":"CED"},{"name":"Chester Road","latitude":52.53565641,"longitude":-1.832473808,"stationOperator":"LM","crsCode":"CRD"},{"name":"Claverdon","latitude":52.27710206,"longitude":-1.696566679,"stationOperator":"LM","crsCode":"CLV"},{"name":"Codsall","latitude":52.62730174,"longitude":-2.201767313,"stationOperator":"LM","crsCode":"CSL"},{"name":"Coleshill Parkway","latitude":52.5165359,"longitude":-1.708183055,"stationOperator":"LM","crsCode":"CEH"},{"name":"Colwall","latitude":52.07987584,"longitude":-2.356962163,"stationOperator":"LM","crsCode":"CWL"},{"name":"Coseley","latitude":52.5450936,"longitude":-2.085779159,"stationOperator":"LM","crsCode":"CSY"},{"name":"Cosford","latitude":52.644968,"longitude":-2.306194661,"stationOperator":"LM","crsCode":"COS"},{"name":"Coventry Arena","latitude":52.448457,"longitude":-1.496628,"stationOperator":"LM","crsCode":"CAA"},{"name":"Cradley Heath","latitude":52.46966253,"longitude":-2.090490391,"stationOperator":"LM","crsCode":"CRA"},{"name":"Danzey","latitude":52.3243769,"longitude":-1.821241229,"stationOperator":"LM","crsCode":"DZY"},{"name":"Droitwich Spa","latitude":52.26821535,"longitude":-2.158368535,"stationOperator":"LM","crsCode":"DTW"},{"name":"Duddeston","latitude":52.48837183,"longitude":-1.871386376,"stationOperator":"LM","crsCode":"DUD"},{"name":"Dudley Port","latitude":52.52466179,"longitude":-2.049480314,"stationOperator":"LM","crsCode":"DDP"},{"name":"Earlswood (West Midlands)","latitude":52.36659566,"longitude":-1.861165822,"stationOperator":"LM","crsCode":"EWD"},{"name":"Erdington","latitude":52.52847373,"longitude":-1.839281877,"stationOperator":"LM","crsCode":"ERD"},{"name":"Fenny Stratford","latitude":51.99989996,"longitude":-0.717672768,"stationOperator":"LM","crsCode":"FEN"},{"name":"Five Ways","latitude":52.47110355,"longitude":-1.912951496,"stationOperator":"LM","crsCode":"FWY"},{"name":"Four Oaks","latitude":52.57979147,"longitude":-1.828040569,"stationOperator":"LM","crsCode":"FOK"},{"name":"Garston (Hertfordshire)","latitude":51.68672373,"longitude":-0.381667092,"stationOperator":"LM","crsCode":"GSN"},{"name":"Gravelly Hill","latitude":52.51500582,"longitude":-1.852593623,"stationOperator":"LM","crsCode":"GVH"},{"name":"Great Malvern","latitude":52.10920685,"longitude":-2.318281662,"stationOperator":"LM","crsCode":"GMV"},{"name":"Hagley","latitude":52.42240686,"longitude":-2.147009123,"stationOperator":"LM","crsCode":"HAG"},{"name":"Hall Green","latitude":52.43678179,"longitude":-1.845499724,"stationOperator":"LM","crsCode":"HLG"},{"name":"Hampton-in-Arden","latitude":52.42904908,"longitude":-1.699936619,"stationOperator":"LM","crsCode":"HIA"},{"name":"Hamstead (Birmingham)","latitude":52.53107873,"longitude":-1.928901297,"stationOperator":"LM","crsCode":"HSD"},{"name":"Hartford (Cheshire)","latitude":53.24177232,"longitude":-2.553625248,"stationOperator":"LM","crsCode":"HTF"},{"name":"Hartlebury","latitude":52.33445625,"longitude":-2.220685153,"stationOperator":"LM","crsCode":"HBY"},{"name":"Hednesford","latitude":52.70973133,"longitude":-2.002323872,"stationOperator":"LM","crsCode":"HNF"},{"name":"Hemel Hempstead","latitude":51.74233574,"longitude":-0.490764101,"stationOperator":"LM","crsCode":"HML"},{"name":"Henley-in-Arden","latitude":52.29105066,"longitude":-1.784442316,"stationOperator":"LM","crsCode":"HNL"},{"name":"How Wood (Herts)","latitude":51.71774404,"longitude":-0.344671247,"stationOperator":"LM","crsCode":"HWW"},{"name":"Jewellery Quarter","latitude":52.48944377,"longitude":-1.913209845,"stationOperator":"LM","crsCode":"JEQ"},{"name":"Kempston Hardwick","latitude":52.09223124,"longitude":-0.503916852,"stationOperator":"LM","crsCode":"KMH"},{"name":"Kidderminster","latitude":52.38449634,"longitude":-2.239447445,"stationOperator":"LM","crsCode":"KID"},{"name":"Kings Langley","latitude":51.70635749,"longitude":-0.438410982,"stationOperator":"LM","crsCode":"KGL"},{"name":"Kings Norton","latitude":52.4134894,"longitude":-1.933795298,"stationOperator":"LM","crsCode":"KNN"},{"name":"Landywood","latitude":52.65713862,"longitude":-2.020653193,"stationOperator":"LM","crsCode":"LAW"},{"name":"Langley Green","latitude":52.4938807,"longitude":-2.004963724,"stationOperator":"LM","crsCode":"LGG"},{"name":"Lea Hall","latitude":52.48065151,"longitude":-1.786020071,"stationOperator":"LM","crsCode":"LEH"},{"name":"Ledbury","latitude":52.04494532,"longitude":-2.424982138,"stationOperator":"LM","crsCode":"LED"},{"name":"Leighton Buzzard","latitude":51.91631391,"longitude":-0.677001817,"stationOperator":"LM","crsCode":"LBZ"},{"name":"Lichfield City","latitude":52.68038568,"longitude":-1.825427009,"stationOperator":"LM","crsCode":"LIC"},{"name":"Lichfield Trent Valley","latitude":52.68690855,"longitude":-1.800236348,"stationOperator":"LM","crsCode":"LTV"},{"name":"Lidlington","latitude":52.04154787,"longitude":-0.558918711,"stationOperator":"LM","crsCode":"LID"},{"name":"Long Buckby","latitude":52.29472704,"longitude":-1.08647082,"stationOperator":"LM","crsCode":"LBK"},{"name":"Longbridge","latitude":52.39642483,"longitude":-1.981291124,"stationOperator":"LM","crsCode":"LOB"},{"name":"Lye (West Midlands)","latitude":52.45993087,"longitude":-2.115932275,"stationOperator":"LM","crsCode":"LYE"},{"name":"Malvern Link","latitude":52.12538603,"longitude":-2.319857656,"stationOperator":"LM","crsCode":"MVL"},{"name":"Marston Green","latitude":52.46719715,"longitude":-1.755614357,"stationOperator":"LM","crsCode":"MGN"},{"name":"Millbrook (Beds)","latitude":52.05384836,"longitude":-0.532692607,"stationOperator":"LM","crsCode":"MLB"},{"name":"Milton Keynes Central","latitude":52.03429998,"longitude":-0.774142566,"stationOperator":"LM","crsCode":"MKC"},{"name":"Northampton","latitude":52.23750925,"longitude":-0.906652319,"stationOperator":"LM","crsCode":"NMP"},{"name":"Northfield","latitude":52.40819871,"longitude":-1.965850518,"stationOperator":"LM","crsCode":"NFD"},{"name":"Norton Bridge","latitude":52.86671919,"longitude":-2.190546498,"stationOperator":"LM","crsCode":"NTB"},{"name":"Nuneaton","latitude":52.52638876,"longitude":-1.463873901,"stationOperator":"LM","crsCode":"NUN"},{"name":"Oakengates","latitude":52.69341403,"longitude":-2.45019074,"stationOperator":"LM","crsCode":"OKN"},{"name":"Old Hill","latitude":52.47094242,"longitude":-2.056191934,"stationOperator":"LM","crsCode":"OHL"},{"name":"Olton","latitude":52.43851888,"longitude":-1.804318398,"stationOperator":"LM","crsCode":"OLT"},{"name":"Park Street","latitude":51.72546034,"longitude":-0.340277192,"stationOperator":"LM","crsCode":"PKT"},{"name":"Penkridge","latitude":52.72351572,"longitude":-2.119295161,"stationOperator":"LM","crsCode":"PKG"},{"name":"Perry Barr","latitude":52.51649543,"longitude":-1.90195665,"stationOperator":"LM","crsCode":"PRY"},{"name":"Polesworth","latitude":52.6259325,"longitude":-1.609950777,"stationOperator":"LM","crsCode":"PSW"},{"name":"Redditch","latitude":52.3063387,"longitude":-1.945248706,"stationOperator":"LM","crsCode":"RDC"},{"name":"Ridgmont","latitude":52.02641391,"longitude":-0.594548449,"stationOperator":"LM","crsCode":"RID"},{"name":"Rowley Regis","latitude":52.47733479,"longitude":-2.030875441,"stationOperator":"LM","crsCode":"ROW"},{"name":"Rugeley Town","latitude":52.75439398,"longitude":-1.936835706,"stationOperator":"LM","crsCode":"RGT"},{"name":"Rugeley Trent Valley","latitude":52.77003211,"longitude":-1.92955021,"stationOperator":"LM","crsCode":"RGL"},{"name":"Sandwell & Dudley","latitude":52.50862411,"longitude":-2.01174306,"stationOperator":"LM","crsCode":"SAD"},{"name":"Selly Oak","latitude":52.44198975,"longitude":-1.935812243,"stationOperator":"LM","crsCode":"SLY"},{"name":"Shenstone","latitude":52.63905886,"longitude":-1.84478804,"stationOperator":"LM","crsCode":"SEN"},{"name":"Shifnal","latitude":52.66608646,"longitude":-2.371848866,"stationOperator":"LM","crsCode":"SFN"},{"name":"Shirley","latitude":52.40343629,"longitude":-1.845175263,"stationOperator":"LM","crsCode":"SRL"},{"name":"Small Heath","latitude":52.46376991,"longitude":-1.859388416,"stationOperator":"LM","crsCode":"SMA"},{"name":"Smethwick Galton Bridge","latitude":52.50179056,"longitude":-1.980495105,"stationOperator":"LM","crsCode":"SGB"},{"name":"Smethwick Rolfe Street","latitude":52.49639441,"longitude":-1.97064313,"stationOperator":"LM","crsCode":"SMR"},{"name":"Spring Road","latitude":52.44342372,"longitude":-1.837384708,"stationOperator":"LM","crsCode":"SRI"},{"name":"St Albans Abbey","latitude":51.74473607,"longitude":-0.342569292,"stationOperator":"LM","crsCode":"SAA"},{"name":"Stechford","latitude":52.48482961,"longitude":-1.811034254,"stationOperator":"LM","crsCode":"SCF"},{"name":"Stewartby","latitude":52.06909177,"longitude":-0.520681291,"stationOperator":"LM","crsCode":"SWR"},{"name":"Stone (Staffs)","latitude":52.9083927,"longitude":-2.155042811,"stationOperator":"LM","crsCode":"SNE"},{"name":"Stourbridge Junction","latitude":52.4475953,"longitude":-2.133850619,"stationOperator":"LM","crsCode":"SBJ"},{"name":"Stourbridge Town","latitude":52.45558734,"longitude":-2.141821696,"stationOperator":"LM","crsCode":"SBT"},{"name":"Stratford-upon-Avon","latitude":52.19425764,"longitude":-1.71629633,"stationOperator":"LM","crsCode":"SAV"},{"name":"Stratford-upon-Avon Parkway","latitude":52.207771,"longitude":-1.732885,"stationOperator":"LM","crsCode":"STY"},{"name":"Sutton Coldfield","latitude":52.56495316,"longitude":-1.824852952,"stationOperator":"LM","crsCode":"SUT"},{"name":"Tame Bridge Parkway","latitude":52.55294368,"longitude":-1.976209995,"stationOperator":"LM","crsCode":"TAB"},{"name":"Tamworth","latitude":52.63712963,"longitude":-1.687269406,"stationOperator":"LM","crsCode":"TAM"},{"name":"Telford Central","latitude":52.68112339,"longitude":-2.440981963,"stationOperator":"LM","crsCode":"TFC"},{"name":"The Hawthorns","latitude":52.50538276,"longitude":-1.964007294,"stationOperator":"LM","crsCode":"THW"},{"name":"The Lakes (Warks)","latitude":52.35947415,"longitude":-1.845769488,"stationOperator":"LM","crsCode":"TLK"},{"name":"Tile Hill","latitude":52.39511859,"longitude":-1.596851679,"stationOperator":"LM","crsCode":"THL"},{"name":"Tipton","latitude":52.53045253,"longitude":-2.065702345,"stationOperator":"LM","crsCode":"TIP"},{"name":"Tring","latitude":51.8007459,"longitude":-0.622433028,"stationOperator":"LM","crsCode":"TRI"},{"name":"Tyseley","latitude":52.4541245,"longitude":-1.839111203,"stationOperator":"LM","crsCode":"TYS"},{"name":"University (Birmingham)","latitude":52.45125019,"longitude":-1.936681677,"stationOperator":"LM","crsCode":"UNI"},{"name":"Walsall","latitude":52.58441036,"longitude":-1.984753459,"stationOperator":"LM","crsCode":"WSL"},{"name":"Water Orton","latitude":52.51859467,"longitude":-1.743097188,"stationOperator":"LM","crsCode":"WTO"},{"name":"Watford Junction","latitude":51.66352959,"longitude":-0.396519634,"stationOperator":"LM","crsCode":"WFJ"},{"name":"Watford North","latitude":51.67570486,"longitude":-0.389928129,"stationOperator":"LM","crsCode":"WFN"},{"name":"Wedgwood","latitude":52.95106237,"longitude":-2.17082355,"stationOperator":"LM","crsCode":"WED"},{"name":"Wellington (Shropshire)","latitude":52.70132167,"longitude":-2.517163693,"stationOperator":"LM","crsCode":"WLN"},{"name":"Whitlocks End","latitude":52.3918469,"longitude":-1.851534743,"stationOperator":"LM","crsCode":"WTE"},{"name":"Widney Manor","latitude":52.3959503,"longitude":-1.774378811,"stationOperator":"LM","crsCode":"WMR"},{"name":"Wilmcote","latitude":52.22248701,"longitude":-1.755935181,"stationOperator":"LM","crsCode":"WMC"},{"name":"Wilnecote (Staffs)","latitude":52.61085797,"longitude":-1.67949642,"stationOperator":"LM","crsCode":"WNE"},{"name":"Winsford","latitude":53.1905328,"longitude":-2.494593885,"stationOperator":"LM","crsCode":"WSF"},{"name":"Witton (West Midlands)","latitude":52.51225381,"longitude":-1.883989025,"stationOperator":"LM","crsCode":"WTT"},{"name":"Woburn Sands","latitude":52.01816252,"longitude":-0.654077198,"stationOperator":"LM","crsCode":"WOB"},{"name":"Wolverton","latitude":52.06589044,"longitude":-0.804264138,"stationOperator":"LM","crsCode":"WOL"},{"name":"Wood End","latitude":52.34436859,"longitude":-1.844500907,"stationOperator":"LM","crsCode":"WDE"},{"name":"Wootton Wawen","latitude":52.26587738,"longitude":-1.784564415,"stationOperator":"LM","crsCode":"WWW"},{"name":"Worcester Foregate Street","latitude":52.19492976,"longitude":-2.221749159,"stationOperator":"LM","crsCode":"WOF"},{"name":"Worcester Shrub Hill","latitude":52.19473652,"longitude":-2.209415022,"stationOperator":"LM","crsCode":"WOS"},{"name":"Wylde Green","latitude":52.54644367,"longitude":-1.831842869,"stationOperator":"LM","crsCode":"WYL"},{"name":"Wythall","latitude":52.38017701,"longitude":-1.866265184,"stationOperator":"LM","crsCode":"WYT"},{"name":"Yardley Wood","latitude":52.42150955,"longitude":-1.854376134,"stationOperator":"LM","crsCode":"YRD"},{"name":"Acton Central","latitude":51.5087756014,"longitude":-0.2636165401,"stationOperator":"LO","crsCode":"ACC"},{"name":"Anerley","latitude":51.413054424,"longitude":-0.0659143281,"stationOperator":"LO","crsCode":"ANZ"},{"name":"Bethnal Green","latitude":51.524464761,"longitude":-0.0597548173,"stationOperator":"LO","crsCode":"BET"},{"name":"Brockley","latitude":51.464746523,"longitude":-0.037813935,"stationOperator":"LO","crsCode":"BCY"},{"name":"Brondesbury","latitude":51.5456328731,"longitude":-0.2030812834,"stationOperator":"LO","crsCode":"BSY"},{"name":"Brondesbury Park","latitude":51.5403506936,"longitude":-0.2104998266,"stationOperator":"LO","crsCode":"BSP"},{"name":"Bruce Grove","latitude":51.592976158,"longitude":-0.0698302996,"stationOperator":"LO","crsCode":"BCV"},{"name":"Bush Hill Park","latitude":51.6415266174,"longitude":-0.0692142536,"stationOperator":"LO","crsCode":"BHK"},{"name":"Bushey","latitude":51.6457512678,"longitude":-0.3853236425,"stationOperator":"LO","crsCode":"BSH"},{"name":"Caledonian Rd & Barnsbury","latitude":51.5433544064,"longitude":-0.1151973117,"stationOperator":"LO","crsCode":"CIR"},{"name":"Cambridge Heath","latitude":51.5319776527,"longitude":-0.0572725582,"stationOperator":"LO","crsCode":"CBH"},{"name":"Camden Road","latitude":51.5419481621,"longitude":-0.139772041,"stationOperator":"LO","crsCode":"CMD"},{"name":"Canonbury","latitude":51.5483736002,"longitude":-0.0919120646,"stationOperator":"LO","crsCode":"CNN"},{"name":"Carpenders Park","latitude":51.628350627,"longitude":-0.3859416057,"stationOperator":"LO","crsCode":"CPK"},{"name":"Chingford","latitude":51.6330943168,"longitude":0.0099060858,"stationOperator":"LO","crsCode":"CHI"},{"name":"Clapham High Street","latitude":51.465484156,"longitude":-0.1325177136,"stationOperator":"LO","crsCode":"CLP"},{"name":"Clapton","latitude":51.5616497199,"longitude":-0.0570179552,"stationOperator":"LO","crsCode":"CPT"},{"name":"Crouch Hill","latitude":51.5712596808,"longitude":-0.1169292922,"stationOperator":"LO","crsCode":"CRH"},{"name":"Crystal Palace","latitude":51.4181107996,"longitude":-0.0726045159,"stationOperator":"LO","crsCode":"CYP"},{"name":"Dalston Junction","latitude":51.544513,"longitude":-0.076215,"stationOperator":"LO","crsCode":"DLJ"},{"name":"Dalston Kingsland","latitude":51.5482896253,"longitude":-0.0757611164,"stationOperator":"LO","crsCode":"DLK"},{"name":"Edmonton Green","latitude":51.6249363459,"longitude":-0.0611055096,"stationOperator":"LO","crsCode":"EDR"},{"name":"Emerson Park","latitude":51.5689526394,"longitude":0.2206477407,"stationOperator":"LO","crsCode":"EMP"},{"name":"Enfield Town","latitude":51.65182349,"longitude":-0.077450555,"stationOperator":"LO","crsCode":"ENF"},{"name":"Finchley Road & Frognal","latitude":51.5502716361,"longitude":-0.1831375287,"stationOperator":"LO","crsCode":"FNY"},{"name":"Forest Hill","latitude":51.4389253469,"longitude":-0.0533101412,"stationOperator":"LO","crsCode":"FOH"},{"name":"Gospel Oak","latitude":51.5553412717,"longitude":-0.1507661702,"stationOperator":"LO","crsCode":"GPO"},{"name":"Hackney Central","latitude":51.5468832711,"longitude":-0.0559164241,"stationOperator":"LO","crsCode":"HKC"},{"name":"Hackney Downs","latitude":51.548752152,"longitude":-0.0601638893,"stationOperator":"LO","crsCode":"HAC"},{"name":"Hackney Wick","latitude":51.543681835,"longitude":-0.0257661725,"stationOperator":"LO","crsCode":"HKW"},{"name":"Haggerston","latitude":51.539121,"longitude":-0.076443,"stationOperator":"LO","crsCode":"HGG"},{"name":"Hampstead Heath","latitude":51.5558372504,"longitude":-0.1651719284,"stationOperator":"LO","crsCode":"HDH"},{"name":"Harringay Green Lanes","latitude":51.5772479371,"longitude":-0.0979191677,"stationOperator":"LO","crsCode":"HRY"},{"name":"Hatch End","latitude":51.6101029612,"longitude":-0.3695177068,"stationOperator":"LO","crsCode":"HTE"},{"name":"Headstone Lane","latitude":51.6027314851,"longitude":-0.3567854507,"stationOperator":"LO","crsCode":"HDL"},{"name":"Highams Park","latitude":51.6088901684,"longitude":0.0001708352,"stationOperator":"LO","crsCode":"HIP"},{"name":"Homerton","latitude":51.5465953441,"longitude":-0.0386209062,"stationOperator":"LO","crsCode":"HMN"},{"name":"Honor Oak Park","latitude":51.4504882441,"longitude":-0.0456218436,"stationOperator":"LO","crsCode":"HPA"},{"name":"Hoxton","latitude":51.531932,"longitude":-0.076746,"stationOperator":"LO","crsCode":"HOX"},{"name":"Imperial Wharf","latitude":51.474251,"longitude":-0.181411,"stationOperator":"LO","crsCode":"IMW"},{"name":"Kensal Rise","latitude":51.5342130446,"longitude":-0.2208338296,"stationOperator":"LO","crsCode":"KNR"},{"name":"Kensington Olympia","latitude":51.4971676952,"longitude":-0.2093104275,"stationOperator":"LO","crsCode":"KPA"},{"name":"Kentish Town West","latitude":51.5465556931,"longitude":-0.1467955756,"stationOperator":"LO","crsCode":"KTW"},{"name":"Kilburn High Road","latitude":51.5373672145,"longitude":-0.1918709234,"stationOperator":"LO","crsCode":"KBN"},{"name":"Leyton Midland Road","latitude":51.5693546712,"longitude":-0.0070488322,"stationOperator":"LO","crsCode":"LEM"},{"name":"Leytonstone High Road","latitude":51.5637872962,"longitude":0.0082906756,"stationOperator":"LO","crsCode":"LER"},{"name":"London Fields","latitude":51.5411581907,"longitude":-0.0577468217,"stationOperator":"LO","crsCode":"LOF"},{"name":"New Cross Gate","latitude":51.475311265,"longitude":-0.0403846644,"stationOperator":"LO","crsCode":"NXG"},{"name":"Norwood Junction","latitude":51.397020224,"longitude":-0.0752164235,"stationOperator":"LO","crsCode":"NWD"},{"name":"Penge West","latitude":51.4175568838,"longitude":-0.0608342187,"stationOperator":"LO","crsCode":"PNW"},{"name":"Rectory Road","latitude":51.5587800243,"longitude":-0.0683933373,"stationOperator":"LO","crsCode":"REC"},{"name":"Rotherhithe","latitude":51.500975,"longitude":-0.053555,"stationOperator":"LO","crsCode":"ROE"},{"name":"Seven Sisters","latitude":51.5825108428,"longitude":-0.0748929164,"stationOperator":"LO","crsCode":"SVS"},{"name":"Shadwell","latitude":51.510931,"longitude":-0.057454,"stationOperator":"LO","crsCode":"SDE"},{"name":"Shepherd's Bush","latitude":51.5052892923,"longitude":-0.2176522962,"stationOperator":"LO","crsCode":"SPB"},{"name":"Shoreditch High Street","latitude":51.522922,"longitude":-0.075684,"stationOperator":"LO","crsCode":"SDC"},{"name":"Silver Street","latitude":51.6152343768,"longitude":-0.0726416423,"stationOperator":"LO","crsCode":"SLV"},{"name":"South Acton","latitude":51.4996997762,"longitude":-0.2701569616,"stationOperator":"LO","crsCode":"SAT"},{"name":"South Hampstead","latitude":51.5414759012,"longitude":-0.1784404686,"stationOperator":"LO","crsCode":"SOH"},{"name":"South Tottenham","latitude":51.5804187998,"longitude":-0.0718059032,"stationOperator":"LO","crsCode":"STO"},{"name":"Southbury","latitude":51.6484532766,"longitude":-0.0530188969,"stationOperator":"LO","crsCode":"SBU"},{"name":"St James Street (Walthamstow)","latitude":51.5806709779,"longitude":-0.032823574,"stationOperator":"LO","crsCode":"SJS"},{"name":"Stamford Hill","latitude":51.5744735869,"longitude":-0.0766757768,"stationOperator":"LO","crsCode":"SMH"},{"name":"Stoke Newington","latitude":51.5652387025,"longitude":-0.0728811564,"stationOperator":"LO","crsCode":"SKW"},{"name":"Surrey Quays","latitude":51.492791,"longitude":-0.048142,"stationOperator":"LO","crsCode":"SQE"},{"name":"Sydenham (London)","latitude":51.4272498924,"longitude":-0.0542380452,"stationOperator":"LO","crsCode":"SYD"},{"name":"Theobalds Grove","latitude":51.6924570037,"longitude":-0.0348236151,"stationOperator":"LO","crsCode":"TEO"},{"name":"Turkey Street","latitude":51.6726369884,"longitude":-0.0472089578,"stationOperator":"LO","crsCode":"TUR"},{"name":"Upper Holloway","latitude":51.563630354,"longitude":-0.1290758459,"stationOperator":"LO","crsCode":"UHL"},{"name":"Walthamstow Central","latitude":51.5829711924,"longitude":-0.0198773082,"stationOperator":"LO","crsCode":"WHC"},{"name":"Walthamstow Queen's Road","latitude":51.5815091919,"longitude":-0.023838128,"stationOperator":"LO","crsCode":"WMW"},{"name":"Wandsworth Road","latitude":51.4698826105,"longitude":-0.137665635,"stationOperator":"LO","crsCode":"WWR"},{"name":"Wanstead Park","latitude":51.5516982552,"longitude":0.0262219773,"stationOperator":"LO","crsCode":"WNP"},{"name":"Wapping","latitude":51.503718,"longitude":-0.05632,"stationOperator":"LO","crsCode":"WPE"},{"name":"Watford High Street","latitude":51.6526551364,"longitude":-0.3917136888,"stationOperator":"LO","crsCode":"WFH"},{"name":"West Croydon","latitude":51.3784284699,"longitude":-0.102581278,"stationOperator":"LO","crsCode":"WCY"},{"name":"West Hampstead","latitude":51.5474733358,"longitude":-0.1911817701,"stationOperator":"LO","crsCode":"WHD"},{"name":"White Hart Lane","latitude":51.6050441162,"longitude":-0.0709070371,"stationOperator":"LO","crsCode":"WHL"},{"name":"Willesden Junction","latitude":51.5320332397,"longitude":-0.2432670615,"stationOperator":"LO","crsCode":"WIJ"},{"name":"Wood Street","latitude":51.5867141926,"longitude":-0.00195833,"stationOperator":"LO","crsCode":"WST"},{"name":"Woodgrange Park","latitude":51.5487621436,"longitude":0.04513119,"stationOperator":"LO","crsCode":"WGR"},{"name":"Amersham","latitude":51.6742069133,"longitude":-0.607590127,"stationOperator":"LT","crsCode":"AMR"},{"name":"Barbican","latitude":51.5196864173,"longitude":-0.0974358805,"stationOperator":"LT","crsCode":"ZBB"},{"name":"Blackhorse Road","latitude":51.5862075528,"longitude":-0.0412458332,"stationOperator":"LT","crsCode":"BHO"},{"name":"Canada Water","latitude":51.498231,"longitude":-0.050791,"stationOperator":"LT","crsCode":"ZCW"},{"name":"Chalfont & Latimer","latitude":51.6681092656,"longitude":-0.5605191022,"stationOperator":"LT","crsCode":"CFO"},{"name":"Chorleywood","latitude":51.6542489506,"longitude":-0.5183116683,"stationOperator":"LT","crsCode":"CLW"},{"name":"Elephant & Castle (Underground)","latitude":51.294506,"longitude":0.060266,"stationOperator":"LT","crsCode":"ZEL"},{"name":"Greenford","latitude":51.542318953,"longitude":-0.3445415183,"stationOperator":"LT","crsCode":"GFD"},{"name":"Gunnersbury","latitude":51.4918691216,"longitude":-0.2757834472,"stationOperator":"LT","crsCode":"GUN"},{"name":"Harlesden","latitude":51.5365728794,"longitude":-0.2582328517,"stationOperator":"LT","crsCode":"HDN"},{"name":"Harrow & Wealdstone","latitude":51.5916203758,"longitude":-0.3340730185,"stationOperator":"LT","crsCode":"HRW"},{"name":"Harrow-on-the-Hill","latitude":51.5790671372,"longitude":-0.3359898856,"stationOperator":"LT","crsCode":"HOH"},{"name":"Highbury & Islington","latitude":51.546739948,"longitude":-0.1020766012,"stationOperator":"LT","crsCode":"HHY"},{"name":"Kensal Green","latitude":51.5306617884,"longitude":-0.2238558628,"stationOperator":"LT","crsCode":"KNL"},{"name":"Kentish Town","latitude":51.5500363746,"longitude":-0.1394420761,"stationOperator":"LT","crsCode":"KTN"},{"name":"Kenton","latitude":51.5814960199,"longitude":-0.3171373274,"stationOperator":"LT","crsCode":"KNT"},{"name":"Kew Gardens","latitude":51.4776154969,"longitude":-0.2849616483,"stationOperator":"LT","crsCode":"KWG"},{"name":"Moorgate","latitude":51.519563,"longitude":-0.09024,"stationOperator":"LT","crsCode":"MOG"},{"name":"North Wembley","latitude":51.5626022528,"longitude":-0.3039843835,"stationOperator":"LT","crsCode":"NWB"},{"name":"Queens Park (London)","latitude":51.5339715337,"longitude":-0.2049825011,"stationOperator":"LT","crsCode":"QPW"},{"name":"Rickmansworth","latitude":51.6402466027,"longitude":-0.4732729561,"stationOperator":"LT","crsCode":"RIC"},{"name":"South Kenton","latitude":51.570220608,"longitude":-0.3084627894,"stationOperator":"LT","crsCode":"SOK"},{"name":"South Ruislip","latitude":51.5569265569,"longitude":-0.3992477137,"stationOperator":"LT","crsCode":"SRU"},{"name":"Stonebridge Park","latitude":51.5441168147,"longitude":-0.2758280111,"stationOperator":"LT","crsCode":"SBP"},{"name":"Wembley Central","latitude":51.5523310827,"longitude":-0.2964185637,"stationOperator":"LT","crsCode":"WMB"},{"name":"West Brompton","latitude":51.4873327686,"longitude":-0.1954357105,"stationOperator":"LT","crsCode":"WBP"},{"name":"West Ham","latitude":51.5285764835,"longitude":0.0058754718,"stationOperator":"LT","crsCode":"WEH"},{"name":"West Ruislip","latitude":51.5697562213,"longitude":-0.4377576334,"stationOperator":"LT","crsCode":"WRU"},{"name":"Whitechapel","latitude":51.519467,"longitude":-0.059757122,"stationOperator":"LT","crsCode":"ZLW"},{"name":"Aigburth","latitude":53.3645833,"longitude":-2.927160737,"stationOperator":"ME","crsCode":"AIG"},{"name":"Ainsdale","latitude":53.60183287,"longitude":-3.042669326,"stationOperator":"ME","crsCode":"ANS"},{"name":"Aintree","latitude":53.47400907,"longitude":-2.956664741,"stationOperator":"ME","crsCode":"AIN"},{"name":"Aughton Park","latitude":53.55448798,"longitude":-2.895078195,"stationOperator":"ME","crsCode":"AUG"},{"name":"Bache","latitude":53.20933376,"longitude":-2.892360673,"stationOperator":"ME","crsCode":"BAC"},{"name":"Bank Hall","latitude":53.43780206,"longitude":-2.987464984,"stationOperator":"ME","crsCode":"BAH"},{"name":"Bebington","latitude":53.35767221,"longitude":-3.003642726,"stationOperator":"ME","crsCode":"BEB"},{"name":"Bidston","latitude":53.40914752,"longitude":-3.078570263,"stationOperator":"ME","crsCode":"BID"},{"name":"Birkdale","latitude":53.63353433,"longitude":-3.014715579,"stationOperator":"ME","crsCode":"BDL"},{"name":"Birkenhead Central","latitude":53.38900094,"longitude":-3.019416498,"stationOperator":"ME","crsCode":"BKC"},{"name":"Birkenhead Hamilton Square","latitude":53.39471293,"longitude":-3.013687789,"stationOperator":"ME","crsCode":"BKQ"},{"name":"Birkenhead North","latitude":53.40484222,"longitude":-3.057401666,"stationOperator":"ME","crsCode":"BKN"},{"name":"Birkenhead Park","latitude":53.3978198,"longitude":-3.039179402,"stationOperator":"ME","crsCode":"BKP"},{"name":"Blundellsands & Crosby","latitude":53.48769659,"longitude":-3.03986789,"stationOperator":"ME","crsCode":"BLN"},{"name":"Bootle New Strand","latitude":53.45301817,"longitude":-2.995347712,"stationOperator":"ME","crsCode":"BNW"},{"name":"Bootle Oriel Road","latitude":53.44762574,"longitude":-2.995221639,"stationOperator":"ME","crsCode":"BOT"},{"name":"Bromborough","latitude":53.32184733,"longitude":-2.987788553,"stationOperator":"ME","crsCode":"BOM"},{"name":"Bromborough Rake","latitude":53.32992372,"longitude":-2.989476735,"stationOperator":"ME","crsCode":"BMR"},{"name":"Brunswick","latitude":53.38217523,"longitude":-2.975653248,"stationOperator":"ME","crsCode":"BRW"},{"name":"Capenhurst","latitude":53.26018901,"longitude":-2.942291644,"stationOperator":"ME","crsCode":"CPU"},{"name":"Conway Park","latitude":53.39337776,"longitude":-3.022679178,"stationOperator":"ME","crsCode":"CNP"},{"name":"Cressington","latitude":53.35876717,"longitude":-2.912008275,"stationOperator":"ME","crsCode":"CSG"},{"name":"Eastham Rake","latitude":53.30759993,"longitude":-2.981171169,"stationOperator":"ME","crsCode":"ERA"},{"name":"Ellesmere Port","latitude":53.28220693,"longitude":-2.896427988,"stationOperator":"ME","crsCode":"ELP"},{"name":"Fazakerley","latitude":53.46878354,"longitude":-2.93545612,"stationOperator":"ME","crsCode":"FAZ"},{"name":"Formby","latitude":53.55349222,"longitude":-3.070916313,"stationOperator":"ME","crsCode":"FBY"},{"name":"Freshfield","latitude":53.56606861,"longitude":-3.071838001,"stationOperator":"ME","crsCode":"FRE"},{"name":"Green Lane","latitude":53.38327334,"longitude":-3.01642303,"stationOperator":"ME","crsCode":"GNL"},{"name":"Hall Road","latitude":53.49838894,"longitude":-3.050682508,"stationOperator":"ME","crsCode":"HLR"},{"name":"Hightown","latitude":53.52512005,"longitude":-3.057076334,"stationOperator":"ME","crsCode":"HTO"},{"name":"Hillside","latitude":53.62212307,"longitude":-3.024723262,"stationOperator":"ME","crsCode":"HIL"},{"name":"Hooton","latitude":53.29721539,"longitude":-2.977016928,"stationOperator":"ME","crsCode":"HOO"},{"name":"Hoylake","latitude":53.39022996,"longitude":-3.178843698,"stationOperator":"ME","crsCode":"HYK"},{"name":"Hunts Cross","latitude":53.36062783,"longitude":-2.854946075,"stationOperator":"ME","crsCode":"HNX"},{"name":"Kirkby (Merseyside)","latitude":53.48620351,"longitude":-2.902833396,"stationOperator":"ME","crsCode":"KIR"},{"name":"Kirkdale","latitude":53.4405479,"longitude":-2.981506598,"stationOperator":"ME","crsCode":"KKD"},{"name":"Leasowe","latitude":53.40805676,"longitude":-3.099603994,"stationOperator":"ME","crsCode":"LSW"},{"name":"Little Sutton","latitude":53.28553102,"longitude":-2.943299129,"stationOperator":"ME","crsCode":"LTT"},{"name":"Liverpool Central","latitude":53.40461053,"longitude":-2.979159936,"stationOperator":"ME","crsCode":"LVC"},{"name":"Liverpool James Street","latitude":53.40477452,"longitude":-2.991964872,"stationOperator":"ME","crsCode":"LVJ"},{"name":"Liverpool South Parkway","latitude":53.35758121,"longitude":-2.889294039,"stationOperator":"ME","crsCode":"LPY"},{"name":"Maghull","latitude":53.50648347,"longitude":-2.930857798,"stationOperator":"ME","crsCode":"MAG"},{"name":"Manor Road","latitude":53.39479742,"longitude":-3.171450295,"stationOperator":"ME","crsCode":"MNR"},{"name":"Meols","latitude":53.39945033,"longitude":-3.154281087,"stationOperator":"ME","crsCode":"MEO"},{"name":"Moorfields","latitude":53.40857308,"longitude":-2.989179871,"stationOperator":"ME","crsCode":"MRF"},{"name":"Moreton (Merseyside)","latitude":53.40793134,"longitude":-3.113140165,"stationOperator":"ME","crsCode":"MRT"},{"name":"New Brighton","latitude":53.43727598,"longitude":-3.049174288,"stationOperator":"ME","crsCode":"NBN"},{"name":"Old Roan","latitude":53.48690801,"longitude":-2.951077083,"stationOperator":"ME","crsCode":"ORN"},{"name":"Ormskirk","latitude":53.56896888,"longitude":-2.88179342,"stationOperator":"ME","crsCode":"OMS"},{"name":"Orrell Park","latitude":53.46191022,"longitude":-2.963321542,"stationOperator":"ME","crsCode":"OPK"},{"name":"Overpool","latitude":53.28414758,"longitude":-2.924818617,"stationOperator":"ME","crsCode":"OVE"},{"name":"Port Sunlight","latitude":53.3492693,"longitude":-2.99803707,"stationOperator":"ME","crsCode":"PSL"},{"name":"Rice Lane","latitude":53.45778328,"longitude":-2.962324455,"stationOperator":"ME","crsCode":"RIL"},{"name":"Rock Ferry","latitude":53.37289259,"longitude":-3.010914905,"stationOperator":"ME","crsCode":"RFY"},{"name":"Sandhills","latitude":53.42994809,"longitude":-2.991497322,"stationOperator":"ME","crsCode":"SDL"},{"name":"Seaforth & Litherland","latitude":53.46611293,"longitude":-3.005295121,"stationOperator":"ME","crsCode":"SFL"},{"name":"Southport","latitude":53.64652777,"longitude":-3.00244063,"stationOperator":"ME","crsCode":"SOP"},{"name":"Spital","latitude":53.33995485,"longitude":-2.993914447,"stationOperator":"ME","crsCode":"SPI"},{"name":"St Michaels","latitude":53.37561787,"longitude":-2.952804749,"stationOperator":"ME","crsCode":"STM"},{"name":"Town Green","latitude":53.54282147,"longitude":-2.904490485,"stationOperator":"ME","crsCode":"TWN"},{"name":"Wallasey Grove Road","latitude":53.42801467,"longitude":-3.069716325,"stationOperator":"ME","crsCode":"WLG"},{"name":"Wallasey Village","latitude":53.422896,"longitude":-3.069136355,"stationOperator":"ME","crsCode":"WLV"},{"name":"Walton (Merseyside)","latitude":53.45622746,"longitude":-2.965753228,"stationOperator":"ME","crsCode":"WAO"},{"name":"Waterloo (Merseyside)","latitude":53.47496593,"longitude":-3.025543946,"stationOperator":"ME","crsCode":"WLO"},{"name":"West Kirby","latitude":53.37319127,"longitude":-3.183769494,"stationOperator":"ME","crsCode":"WKI"},{"name":"Birmingham New Street","latitude":52.47819419,"longitude":-1.898360826,"stationOperator":"NR","crsCode":"BHM"},{"name":"Bristol Temple Meads","latitude":51.44914299,"longitude":-2.581322795,"stationOperator":"NR","crsCode":"BRI"},{"name":"Edinburgh","latitude":55.95238716,"longitude":-3.188221921,"stationOperator":"NR","crsCode":"EDB"},{"name":"Glasgow Central","latitude":55.85974143,"longitude":-4.257636004,"stationOperator":"NR","crsCode":"GLC"},{"name":"Leeds","latitude":53.79489697,"longitude":-1.547435079,"stationOperator":"NR","crsCode":"LDS"},{"name":"Liverpool Lime Street","latitude":53.40731898,"longitude":-2.977732837,"stationOperator":"NR","crsCode":"LIV"},{"name":"London Bridge","latitude":51.50509647,"longitude":-0.085060385,"stationOperator":"NR","crsCode":"LBG"},{"name":"London Cannon Street","latitude":51.51058265,"longitude":-0.090609398,"stationOperator":"NR","crsCode":"CST"},{"name":"London Charing Cross","latitude":51.50768803,"longitude":-0.124105728,"stationOperator":"NR","crsCode":"CHX"},{"name":"London Euston","latitude":51.52837626,"longitude":-0.134558479,"stationOperator":"NR","crsCode":"EUS"},{"name":"London Kings Cross","latitude":51.53088842,"longitude":-0.122921342,"stationOperator":"NR","crsCode":"KGX"},{"name":"London Liverpool Street","latitude":51.51802304,"longitude":-0.081995697,"stationOperator":"NR","crsCode":"LST"},{"name":"London Paddington","latitude":51.51645141,"longitude":-0.176844743,"stationOperator":"NR","crsCode":"PAD"},{"name":"London St Pancras International","latitude":51.53062434,"longitude":-0.125527439,"stationOperator":"NR","crsCode":"STP"},{"name":"London Victoria","latitude":51.49526139,"longitude":-0.144540593,"stationOperator":"NR","crsCode":"VIC"},{"name":"London Waterloo","latitude":51.503507,"longitude":-0.113897,"stationOperator":"NR","crsCode":"WAT"},{"name":"Manchester Piccadilly","latitude":53.47671998,"longitude":-2.228977818,"stationOperator":"NR","crsCode":"MAN"},{"name":"Reading","latitude":51.45878189,"longitude":-0.971854374,"stationOperator":"NR","crsCode":"RDG"},{"name":"Stratford International","latitude":51.545037,"longitude":-0.008613,"stationOperator":"NR","crsCode":"SFA"},{"name":"Accrington","latitude":53.7532,"longitude":-2.37001,"stationOperator":"NT","crsCode":"ACR"},{"name":"Acklington","latitude":55.3071,"longitude":-1.65184,"stationOperator":"NT","crsCode":"ACK"},{"name":"Adlington (Cheshire)","latitude":53.31957,"longitude":-2.13356,"stationOperator":"NT","crsCode":"ADC"},{"name":"Adlington (Lancs)","latitude":53.6129455,"longitude":-2.603061143,"stationOperator":"NT","crsCode":"ADL"},{"name":"Adwick","latitude":53.57302304,"longitude":-1.181475098,"stationOperator":"NT","crsCode":"AWK"},{"name":"Alderley Edge","latitude":53.30379521,"longitude":-2.236800428,"stationOperator":"NT","crsCode":"ALD"},{"name":"Allens West","latitude":54.52411689,"longitude":-1.36342611,"stationOperator":"NT","crsCode":"ALW"},{"name":"Alnmouth","latitude":55.39241161,"longitude":-1.636879701,"stationOperator":"NT","crsCode":"ALM"},{"name":"Althorpe","latitude":53.58528974,"longitude":-0.732586396,"stationOperator":"NT","crsCode":"ALP"},{"name":"Altrincham","latitude":53.3874545,"longitude":-2.347281454,"stationOperator":"NT","crsCode":"ALT"},{"name":"Ansdell & Fairhaven","latitude":53.74157235,"longitude":-2.993056487,"stationOperator":"NT","crsCode":"AFV"},{"name":"Apperley Bridge","latitude":53.84138,"longitude":1.703065,"stationOperator":"NT","crsCode":"APY"},{"name":"Appleby","latitude":54.58035366,"longitude":-2.486692409,"stationOperator":"NT","crsCode":"APP"},{"name":"Appley Bridge","latitude":53.578696,"longitude":-2.719239,"stationOperator":"NT","crsCode":"APB"},{"name":"Ardwick","latitude":53.4713637,"longitude":-2.21388356,"stationOperator":"NT","crsCode":"ADK"},{"name":"Armathwaite","latitude":54.8091136,"longitude":-2.771682007,"stationOperator":"NT","crsCode":"AWT"},{"name":"Arram","latitude":53.88458217,"longitude":-0.42685721,"stationOperator":"NT","crsCode":"ARR"},{"name":"Ashburys","latitude":53.47139715,"longitude":-2.194298663,"stationOperator":"NT","crsCode":"ABY"},{"name":"Ashley","latitude":53.35601141,"longitude":-2.341015897,"stationOperator":"NT","crsCode":"ASY"},{"name":"Ashton-under-Lyne","latitude":53.49128474,"longitude":-2.093404009,"stationOperator":"NT","crsCode":"AHN"},{"name":"Askam","latitude":54.18904409,"longitude":-3.204522253,"stationOperator":"NT","crsCode":"ASK"},{"name":"Aspatria","latitude":54.75932254,"longitude":-3.331737575,"stationOperator":"NT","crsCode":"ASP"},{"name":"Atherton","latitude":53.52901633,"longitude":-2.478177715,"stationOperator":"NT","crsCode":"ATN"},{"name":"Baildon","latitude":53.84969683,"longitude":-1.753714588,"stationOperator":"NT","crsCode":"BLD"},{"name":"Bamber Bridge","latitude":53.72678683,"longitude":-2.660769189,"stationOperator":"NT","crsCode":"BMB"},{"name":"Bamford","latitude":53.33901464,"longitude":-1.689082177,"stationOperator":"NT","crsCode":"BAM"},{"name":"Bardon Mill","latitude":54.97449387,"longitude":-2.346497864,"stationOperator":"NT","crsCode":"BLL"},{"name":"Bare Lane","latitude":54.07533066,"longitude":-2.835940378,"stationOperator":"NT","crsCode":"BAR"},{"name":"Barnsley","latitude":53.55462662,"longitude":-1.477078446,"stationOperator":"NT","crsCode":"BNY"},{"name":"Barrow Haven","latitude":53.6971445,"longitude":-0.391442806,"stationOperator":"NT","crsCode":"BAV"},{"name":"Barton-on-Humber","latitude":53.68883974,"longitude":-0.443251195,"stationOperator":"NT","crsCode":"BAU"},{"name":"Batley","latitude":53.70914805,"longitude":-1.622728738,"stationOperator":"NT","crsCode":"BTL"},{"name":"Battersby","latitude":54.45768979,"longitude":-1.092979104,"stationOperator":"NT","crsCode":"BTT"},{"name":"Belle Vue","latitude":53.46216055,"longitude":-2.180399301,"stationOperator":"NT","crsCode":"BLV"},{"name":"Bempton","latitude":54.12829569,"longitude":-0.180427625,"stationOperator":"NT","crsCode":"BEM"},{"name":"Ben Rhydding","latitude":53.92617737,"longitude":-1.79742789,"stationOperator":"NT","crsCode":"BEY"},{"name":"Bentham","latitude":54.11579786,"longitude":-2.510912928,"stationOperator":"NT","crsCode":"BEN"},{"name":"Bentley (South Yorks)","latitude":53.54369067,"longitude":-1.15155621,"stationOperator":"NT","crsCode":"BYK"},{"name":"Berry Brow","latitude":53.62105489,"longitude":-1.79343383,"stationOperator":"NT","crsCode":"BBW"},{"name":"Bescar Lane","latitude":53.62355392,"longitude":-2.914683023,"stationOperator":"NT","crsCode":"BES"},{"name":"Beverley","latitude":53.84230315,"longitude":-0.42388287,"stationOperator":"NT","crsCode":"BEV"},{"name":"Billingham (Cleveland)","latitude":54.60632344,"longitude":-1.278542318,"stationOperator":"NT","crsCode":"BIL"},{"name":"Bingley","latitude":53.84840967,"longitude":-1.836944749,"stationOperator":"NT","crsCode":"BIY"},{"name":"Bishop Auckland","latitude":54.65747215,"longitude":-1.677565289,"stationOperator":"NT","crsCode":"BIA"},{"name":"Blackburn","latitude":53.74652637,"longitude":-2.479127511,"stationOperator":"NT","crsCode":"BBN"},{"name":"Blackpool North","latitude":53.82192857,"longitude":-3.049280829,"stationOperator":"NT","crsCode":"BPN"},{"name":"Blackpool Pleasure Beach","latitude":53.78824428,"longitude":-3.053813568,"stationOperator":"NT","crsCode":"BPB"},{"name":"Blackpool South","latitude":53.7986229,"longitude":-3.049063314,"stationOperator":"NT","crsCode":"BPS"},{"name":"Blackrod","latitude":53.59153702,"longitude":-2.569533036,"stationOperator":"NT","crsCode":"BLK"},{"name":"Blaydon","latitude":54.96578715,"longitude":-1.712587399,"stationOperator":"NT","crsCode":"BLO"},{"name":"Bolton","latitude":53.57415749,"longitude":-2.42582971,"stationOperator":"NT","crsCode":"BON"},{"name":"Bolton-Upon-Dearne","latitude":53.51901464,"longitude":-1.312227491,"stationOperator":"NT","crsCode":"BTD"},{"name":"Bootle (Cumbria)","latitude":54.29035629,"longitude":-3.394902231,"stationOperator":"NT","crsCode":"BOC"},{"name":"Bradford Forster Square","latitude":53.79693456,"longitude":-1.752961084,"stationOperator":"NT","crsCode":"BDQ"},{"name":"Bradford Interchange","latitude":53.79108522,"longitude":-1.749595186,"stationOperator":"NT","crsCode":"BDI"},{"name":"Bramhall","latitude":53.35998386,"longitude":-2.162236693,"stationOperator":"NT","crsCode":"BML"},{"name":"Bramley (W Yorks)","latitude":53.80599077,"longitude":-1.63810801,"stationOperator":"NT","crsCode":"BLE"},{"name":"Brampton (Cumbria)","latitude":54.93263673,"longitude":-2.703813718,"stationOperator":"NT","crsCode":"BMP"},{"name":"Braystones (Cumbria)","latitude":54.43954367,"longitude":-3.543374836,"stationOperator":"NT","crsCode":"BYS"},{"name":"Bredbury","latitude":53.42296542,"longitude":-2.109807325,"stationOperator":"NT","crsCode":"BDY"},{"name":"Bridlington","latitude":54.08414656,"longitude":-0.198719149,"stationOperator":"NT","crsCode":"BDT"},{"name":"Brierfield","latitude":53.82454874,"longitude":-2.236946834,"stationOperator":"NT","crsCode":"BRF"},{"name":"Brigg","latitude":53.54916351,"longitude":-0.48611936,"stationOperator":"NT","crsCode":"BGG"},{"name":"Brighouse","latitude":53.69821366,"longitude":-1.779439708,"stationOperator":"NT","crsCode":"BGH"},{"name":"Brinnington","latitude":53.43103407,"longitude":-2.130899716,"stationOperator":"NT","crsCode":"BNT"},{"name":"Broad Green","latitude":53.40618138,"longitude":-2.893466308,"stationOperator":"NT","crsCode":"BGE"},{"name":"Broadbottom","latitude":53.44099228,"longitude":-2.016514951,"stationOperator":"NT","crsCode":"BDB"},{"name":"Brockholes","latitude":53.59716619,"longitude":-1.770295861,"stationOperator":"NT","crsCode":"BHS"},{"name":"Bromley Cross (Lancs)","latitude":53.61376394,"longitude":-2.409600356,"stationOperator":"NT","crsCode":"BMC"},{"name":"Broomfleet","latitude":53.74015046,"longitude":-0.673345968,"stationOperator":"NT","crsCode":"BMF"},{"name":"Bryn","latitude":53.49945144,"longitude":-2.648183788,"stationOperator":"NT","crsCode":"BYN"},{"name":"Buckshaw Parkway","latitude":53.672825,"longitude":-2.66447,"stationOperator":"NT","crsCode":"BSV"},{"name":"Burley Park","latitude":53.81217572,"longitude":-1.577912469,"stationOperator":"NT","crsCode":"BUY"},{"name":"Burley-in-Wharfedale","latitude":53.90838882,"longitude":-1.753521668,"stationOperator":"NT","crsCode":"BUW"},{"name":"Burnage","latitude":53.42192326,"longitude":-2.215140157,"stationOperator":"NT","crsCode":"BNA"},{"name":"Burnley Barracks","latitude":53.79124886,"longitude":-2.258010878,"stationOperator":"NT","crsCode":"BUB"},{"name":"Burnley Central","latitude":53.79352327,"longitude":-2.244969486,"stationOperator":"NT","crsCode":"BNC"},{"name":"Burnley Manchester Road","latitude":53.78497641,"longitude":-2.248865862,"stationOperator":"NT","crsCode":"BYM"},{"name":"Burscough Bridge","latitude":53.60521267,"longitude":-2.841741809,"stationOperator":"NT","crsCode":"BCB"},{"name":"Burscough Junction","latitude":53.59803326,"longitude":-2.840087989,"stationOperator":"NT","crsCode":"BCJ"},{"name":"Buxton","latitude":53.26074338,"longitude":-1.912870681,"stationOperator":"NT","crsCode":"BUX"},{"name":"Cark & Cartmel","latitude":54.17756612,"longitude":-2.972830022,"stationOperator":"NT","crsCode":"CAK"},{"name":"Castleford","latitude":53.72409345,"longitude":-1.354656247,"stationOperator":"NT","crsCode":"CFD"},{"name":"Castleton (Manchester)","latitude":53.5918608,"longitude":-2.178231774,"stationOperator":"NT","crsCode":"CAS"},{"name":"Castleton Moor","latitude":54.46728813,"longitude":-0.946647941,"stationOperator":"NT","crsCode":"CSM"},{"name":"Cattal","latitude":53.99749566,"longitude":-1.319772686,"stationOperator":"NT","crsCode":"CTL"},{"name":"Chapel-en-le-Frith","latitude":53.31224546,"longitude":-1.918769577,"stationOperator":"NT","crsCode":"CEF"},{"name":"Chapeltown (South Yorks)","latitude":53.46235417,"longitude":-1.466268507,"stationOperator":"NT","crsCode":"CLN"},{"name":"Chassen Road","latitude":53.44617874,"longitude":-2.368237145,"stationOperator":"NT","crsCode":"CSR"},{"name":"Chathill","latitude":55.53672988,"longitude":-1.706378108,"stationOperator":"NT","crsCode":"CHT"},{"name":"Cheadle Hulme","latitude":53.37594578,"longitude":-2.188302225,"stationOperator":"NT","crsCode":"CHU"},{"name":"Chelford (Cheshire)","latitude":53.27086569,"longitude":-2.279608703,"stationOperator":"NT","crsCode":"CEL"},{"name":"Cherry Tree","latitude":53.7328804,"longitude":-2.518385495,"stationOperator":"NT","crsCode":"CYT"},{"name":"Chester-le-Street","latitude":54.85459856,"longitude":-1.578018751,"stationOperator":"NT","crsCode":"CLS"},{"name":"Chinley","latitude":53.34030561,"longitude":-1.944399045,"stationOperator":"NT","crsCode":"CLY"},{"name":"Chorley","latitude":53.65255337,"longitude":-2.626775381,"stationOperator":"NT","crsCode":"CRL"},{"name":"Church & Oswaldtwistle","latitude":53.75035199,"longitude":-2.390909816,"stationOperator":"NT","crsCode":"CTW"},{"name":"Church Fenton","latitude":53.82633993,"longitude":-1.227441339,"stationOperator":"NT","crsCode":"CHF"},{"name":"Clapham (North Yorkshire)","latitude":54.10539906,"longitude":-2.409841839,"stationOperator":"NT","crsCode":"CPY"},{"name":"Clifton (Manchester)","latitude":53.52223401,"longitude":-2.314143209,"stationOperator":"NT","crsCode":"CLI"},{"name":"Clitheroe","latitude":53.87347985,"longitude":-2.394338568,"stationOperator":"NT","crsCode":"CLH"},{"name":"Colne","latitude":53.85484616,"longitude":-2.1811716,"stationOperator":"NT","crsCode":"CNE"},{"name":"Commondale","latitude":54.48182216,"longitude":-0.974983944,"stationOperator":"NT","crsCode":"COM"},{"name":"Congleton","latitude":53.15787409,"longitude":-2.192581008,"stationOperator":"NT","crsCode":"CNG"},{"name":"Conisbrough","latitude":53.48932729,"longitude":-1.234332884,"stationOperator":"NT","crsCode":"CNS"},{"name":"Cononley","latitude":53.91726977,"longitude":-2.011236378,"stationOperator":"NT","crsCode":"CEY"},{"name":"Corbridge","latitude":54.96630507,"longitude":-2.018556061,"stationOperator":"NT","crsCode":"CRB"},{"name":"Corkickle","latitude":54.54167907,"longitude":-3.582164579,"stationOperator":"NT","crsCode":"CKL"},{"name":"Cottingham","latitude":53.78166481,"longitude":-0.406425104,"stationOperator":"NT","crsCode":"CGM"},{"name":"Cottingley","latitude":53.76783456,"longitude":-1.587702959,"stationOperator":"NT","crsCode":"COT"},{"name":"Cramlington","latitude":55.0877699,"longitude":-1.598597623,"stationOperator":"NT","crsCode":"CRM"},{"name":"Cross Gates","latitude":53.80491752,"longitude":-1.450295749,"stationOperator":"NT","crsCode":"CRG"},{"name":"Crossflatts","latitude":53.85847792,"longitude":-1.844887769,"stationOperator":"NT","crsCode":"CFL"},{"name":"Croston","latitude":53.66756883,"longitude":-2.77774904,"stationOperator":"NT","crsCode":"CSO"},{"name":"Crowle","latitude":53.58975345,"longitude":-0.81736252,"stationOperator":"NT","crsCode":"CWE"},{"name":"Cuddington","latitude":53.23993338,"longitude":-2.59930339,"stationOperator":"NT","crsCode":"CUD"},{"name":"Daisy Hill","latitude":53.53946635,"longitude":-2.515868885,"stationOperator":"NT","crsCode":"DSY"},{"name":"Dalston (Cumbria)","latitude":54.84617418,"longitude":-2.988848877,"stationOperator":"NT","crsCode":"DLS"},{"name":"Dalton (Cumbria)","latitude":54.15424234,"longitude":-3.179010182,"stationOperator":"NT","crsCode":"DLT"},{"name":"Danby","latitude":54.46643039,"longitude":-0.910719291,"stationOperator":"NT","crsCode":"DNY"},{"name":"Darnall","latitude":53.38111164,"longitude":-1.410652924,"stationOperator":"NT","crsCode":"DAN"},{"name":"Darton","latitude":53.58838039,"longitude":-1.531651865,"stationOperator":"NT","crsCode":"DRT"},{"name":"Darwen","latitude":53.69804478,"longitude":-2.464945018,"stationOperator":"NT","crsCode":"DWN"},{"name":"Davenport","latitude":53.39082838,"longitude":-2.152579926,"stationOperator":"NT","crsCode":"DVN"},{"name":"Deansgate","latitude":53.47409585,"longitude":-2.251066103,"stationOperator":"NT","crsCode":"DGT"},{"name":"Deighton","latitude":53.66885819,"longitude":-1.75219726,"stationOperator":"NT","crsCode":"DHN"},{"name":"Delamere","latitude":53.2287892,"longitude":-2.666559449,"stationOperator":"NT","crsCode":"DLM"},{"name":"Denby Dale","latitude":53.57264355,"longitude":-1.663208663,"stationOperator":"NT","crsCode":"DBD"},{"name":"Dent","latitude":54.28241606,"longitude":-2.363597216,"stationOperator":"NT","crsCode":"DNT"},{"name":"Denton","latitude":53.45692242,"longitude":-2.130226303,"stationOperator":"NT","crsCode":"DTN"},{"name":"Dinsdale","latitude":54.51473198,"longitude":-1.467067384,"stationOperator":"NT","crsCode":"DND"},{"name":"Dinting","latitude":53.44934927,"longitude":-1.970306404,"stationOperator":"NT","crsCode":"DTG"},{"name":"Disley","latitude":53.35819889,"longitude":-2.042476966,"stationOperator":"NT","crsCode":"DSL"},{"name":"Dodworth","latitude":53.54416241,"longitude":-1.530932801,"stationOperator":"NT","crsCode":"DOD"},{"name":"Dore & Totley","latitude":53.32746933,"longitude":-1.515445314,"stationOperator":"NT","crsCode":"DOR"},{"name":"Dove Holes","latitude":53.29981804,"longitude":-1.890433778,"stationOperator":"NT","crsCode":"DVH"},{"name":"Driffield","latitude":54.00154161,"longitude":-0.434671072,"stationOperator":"NT","crsCode":"DRF"},{"name":"Drigg","latitude":54.37696312,"longitude":-3.443410921,"stationOperator":"NT","crsCode":"DRI"},{"name":"Dronfield","latitude":53.30139118,"longitude":-1.46877279,"stationOperator":"NT","crsCode":"DRO"},{"name":"Dunston","latitude":54.95005031,"longitude":-1.641034364,"stationOperator":"NT","crsCode":"DOT"},{"name":"Eaglescliffe","latitude":54.52943483,"longitude":-1.349435972,"stationOperator":"NT","crsCode":"EAG"},{"name":"Earlestown","latitude":53.45114797,"longitude":-2.637660072,"stationOperator":"NT","crsCode":"ERL"},{"name":"East Didsbury","latitude":53.40932638,"longitude":-2.221996602,"stationOperator":"NT","crsCode":"EDY"},{"name":"East Garforth","latitude":53.7921293,"longitude":-1.370310799,"stationOperator":"NT","crsCode":"EGF"},{"name":"Eastrington","latitude":53.75517708,"longitude":-0.787632643,"stationOperator":"NT","crsCode":"EGN"},{"name":"Eccles (Manchester)","latitude":53.48537002,"longitude":-2.334517274,"stationOperator":"NT","crsCode":"ECC"},{"name":"Eccleston Park","latitude":53.43079708,"longitude":-2.780042527,"stationOperator":"NT","crsCode":"ECL"},{"name":"Edale","latitude":53.3648068,"longitude":-1.816330371,"stationOperator":"NT","crsCode":"EDL"},{"name":"Edge Hill","latitude":53.40262667,"longitude":-2.946488903,"stationOperator":"NT","crsCode":"EDG"},{"name":"Egton","latitude":54.43767437,"longitude":-0.761919873,"stationOperator":"NT","crsCode":"EGT"},{"name":"Elsecar","latitude":53.49867791,"longitude":-1.427415692,"stationOperator":"NT","crsCode":"ELR"},{"name":"Entwistle","latitude":53.65599298,"longitude":-2.414548972,"stationOperator":"NT","crsCode":"ENT"},{"name":"Euxton Balshaw Lane","latitude":53.67007956,"longitude":-2.6750181,"stationOperator":"NT","crsCode":"EBA"},{"name":"Fairfield","latitude":53.47146764,"longitude":-2.144582995,"stationOperator":"NT","crsCode":"FRF"},{"name":"Farnworth","latitude":53.55001733,"longitude":-2.387853772,"stationOperator":"NT","crsCode":"FNW"},{"name":"Featherstone","latitude":53.67872705,"longitude":-1.359437598,"stationOperator":"NT","crsCode":"FEA"},{"name":"Ferriby","latitude":53.71716886,"longitude":-0.507824927,"stationOperator":"NT","crsCode":"FRY"},{"name":"Filey","latitude":54.20986844,"longitude":-0.293850452,"stationOperator":"NT","crsCode":"FIL"},{"name":"Fitzwilliam","latitude":53.63251073,"longitude":-1.373597322,"stationOperator":"NT","crsCode":"FZW"},{"name":"Flimby","latitude":54.68968694,"longitude":-3.521048022,"stationOperator":"NT","crsCode":"FLM"},{"name":"Flixton","latitude":53.4439722,"longitude":-2.383876093,"stationOperator":"NT","crsCode":"FLI"},{"name":"Flowery Field","latitude":53.46164017,"longitude":-2.080837509,"stationOperator":"NT","crsCode":"FLF"},{"name":"Foxfield","latitude":54.25876643,"longitude":-3.216071991,"stationOperator":"NT","crsCode":"FOX"},{"name":"Frizinghall","latitude":53.81952623,"longitude":-1.768625862,"stationOperator":"NT","crsCode":"FZH"},{"name":"Furness Vale","latitude":53.3487676,"longitude":-1.98883855,"stationOperator":"NT","crsCode":"FNV"},{"name":"Gainsborough Central","latitude":53.3996081,"longitude":-0.769697538,"stationOperator":"NT","crsCode":"GNB"},{"name":"Garforth","latitude":53.79622636,"longitude":-1.382091266,"stationOperator":"NT","crsCode":"GRF"},{"name":"Gargrave","latitude":53.97842348,"longitude":-2.105163634,"stationOperator":"NT","crsCode":"GGV"},{"name":"Garsdale","latitude":54.32134985,"longitude":-2.325888923,"stationOperator":"NT","crsCode":"GSD"},{"name":"Garswood","latitude":53.48853256,"longitude":-2.672132133,"stationOperator":"NT","crsCode":"GSW"},{"name":"Gathurst","latitude":53.55941698,"longitude":-2.694390961,"stationOperator":"NT","crsCode":"GST"},{"name":"Gatley","latitude":53.39332787,"longitude":-2.230635305,"stationOperator":"NT","crsCode":"GTY"},{"name":"Giggleswick","latitude":54.06167264,"longitude":-2.303990955,"stationOperator":"NT","crsCode":"GIG"},{"name":"Gilberdyke","latitude":53.74797918,"longitude":-0.732244137,"stationOperator":"NT","crsCode":"GBD"},{"name":"Glaisdale","latitude":54.43943633,"longitude":-0.793939477,"stationOperator":"NT","crsCode":"GLS"},{"name":"Glasshoughton","latitude":53.70919278,"longitude":-1.34185485,"stationOperator":"NT","crsCode":"GLH"},{"name":"Glazebrook","latitude":53.42842041,"longitude":-2.460492629,"stationOperator":"NT","crsCode":"GLZ"},{"name":"Glossop","latitude":53.44448819,"longitude":-1.949080993,"stationOperator":"NT","crsCode":"GLO"},{"name":"Godley","latitude":53.45172242,"longitude":-2.054767562,"stationOperator":"NT","crsCode":"GDL"},{"name":"Goldthorpe","latitude":53.53340407,"longitude":-1.313503115,"stationOperator":"NT","crsCode":"GOE"},{"name":"Goole","latitude":53.70492908,"longitude":-0.874218535,"stationOperator":"NT","crsCode":"GOO"},{"name":"Goostrey","latitude":53.22257407,"longitude":-2.326474795,"stationOperator":"NT","crsCode":"GTR"},{"name":"Gorton","latitude":53.46874156,"longitude":-2.167170456,"stationOperator":"NT","crsCode":"GTO"},{"name":"Goxhill","latitude":53.67671563,"longitude":-0.337125453,"stationOperator":"NT","crsCode":"GOX"},{"name":"Great Ayton","latitude":54.48931943,"longitude":-1.116362099,"stationOperator":"NT","crsCode":"GTA"},{"name":"Great Coates","latitude":53.57577255,"longitude":-0.130229747,"stationOperator":"NT","crsCode":"GCT"},{"name":"Green Road","latitude":54.24453345,"longitude":-3.245579599,"stationOperator":"NT","crsCode":"GNR"},{"name":"Greenbank","latitude":53.2515743,"longitude":-2.533067977,"stationOperator":"NT","crsCode":"GBK"},{"name":"Greenfield","latitude":53.53913992,"longitude":-2.014440599,"stationOperator":"NT","crsCode":"GNF"},{"name":"Grimsby Docks","latitude":53.57433986,"longitude":-0.075615006,"stationOperator":"NT","crsCode":"GMD"},{"name":"Grindleford","latitude":53.30558428,"longitude":-1.626295445,"stationOperator":"NT","crsCode":"GRN"},{"name":"Grosmont","latitude":54.43612153,"longitude":-0.724962522,"stationOperator":"NT","crsCode":"GMT"},{"name":"Guide Bridge","latitude":53.47464705,"longitude":-2.113707335,"stationOperator":"NT","crsCode":"GUI"},{"name":"Guiseley","latitude":53.87594659,"longitude":-1.715077862,"stationOperator":"NT","crsCode":"GSY"},{"name":"Gypsy Lane","latitude":54.53289438,"longitude":-1.179386125,"stationOperator":"NT","crsCode":"GYP"},{"name":"Habrough","latitude":53.60553503,"longitude":-0.267975846,"stationOperator":"NT","crsCode":"HAB"},{"name":"Hadfield","latitude":53.46076361,"longitude":-1.965328098,"stationOperator":"NT","crsCode":"HDF"},{"name":"Hag Fold","latitude":53.53386541,"longitude":-2.494828846,"stationOperator":"NT","crsCode":"HGF"},{"name":"Hale (Manchester)","latitude":53.37873505,"longitude":-2.347360839,"stationOperator":"NT","crsCode":"HAL"},{"name":"Halewood","latitude":53.36533326,"longitude":-2.824983416,"stationOperator":"NT","crsCode":"HED"},{"name":"Halifax","latitude":53.72043967,"longitude":-1.854488705,"stationOperator":"NT","crsCode":"HFX"},{"name":"Hall-i'-th'-Wood","latitude":53.59756945,"longitude":-2.413976805,"stationOperator":"NT","crsCode":"HID"},{"name":"Haltwhistle","latitude":54.96784942,"longitude":-2.463561774,"stationOperator":"NT","crsCode":"HWH"},{"name":"Hammerton","latitude":53.99611366,"longitude":-1.283031759,"stationOperator":"NT","crsCode":"HMM"},{"name":"Handforth","latitude":53.34642025,"longitude":-2.213257748,"stationOperator":"NT","crsCode":"HTH"},{"name":"Hapton","latitude":53.78176047,"longitude":-2.316685364,"stationOperator":"NT","crsCode":"HPN"},{"name":"Harrington","latitude":54.61334851,"longitude":-3.565741262,"stationOperator":"NT","crsCode":"HRR"},{"name":"Harrogate","latitude":53.99319216,"longitude":-1.537615121,"stationOperator":"NT","crsCode":"HGT"},{"name":"Hartlepool","latitude":54.68676301,"longitude":-1.207310059,"stationOperator":"NT","crsCode":"HPL"},{"name":"Hatfield & Stainforth","latitude":53.58892124,"longitude":-1.024047613,"stationOperator":"NT","crsCode":"HFS"},{"name":"Hathersage","latitude":53.32578602,"longitude":-1.651192584,"stationOperator":"NT","crsCode":"HSG"},{"name":"Hattersley","latitude":53.44530123,"longitude":-2.040305376,"stationOperator":"NT","crsCode":"HTY"},{"name":"Haydon Bridge","latitude":54.97486058,"longitude":-2.247904442,"stationOperator":"NT","crsCode":"HDB"},{"name":"Hazel Grove","latitude":53.37756004,"longitude":-2.122016963,"stationOperator":"NT","crsCode":"HAZ"},{"name":"Headingley","latitude":53.81816231,"longitude":-1.593649517,"stationOperator":"NT","crsCode":"HDY"},{"name":"Heald Green","latitude":53.36974577,"longitude":-2.237421508,"stationOperator":"NT","crsCode":"HDG"},{"name":"Healing","latitude":53.5818177,"longitude":-0.160630049,"stationOperator":"NT","crsCode":"HLI"},{"name":"Heaton Chapel","latitude":53.42557835,"longitude":-2.17904046,"stationOperator":"NT","crsCode":"HTC"},{"name":"Hebden Bridge","latitude":53.73759649,"longitude":-2.00906594,"stationOperator":"NT","crsCode":"HBD"},{"name":"Heighington","latitude":54.59696718,"longitude":-1.582079768,"stationOperator":"NT","crsCode":"HEI"},{"name":"Hellifield","latitude":54.01087074,"longitude":-2.227841167,"stationOperator":"NT","crsCode":"HLD"},{"name":"Hensall","latitude":53.69855978,"longitude":-1.114515549,"stationOperator":"NT","crsCode":"HEL"},{"name":"Hessle","latitude":53.71759184,"longitude":-0.442189469,"stationOperator":"NT","crsCode":"HES"},{"name":"Heworth","latitude":54.95156601,"longitude":-1.555768445,"stationOperator":"NT","crsCode":"HEW"},{"name":"Hexham","latitude":54.97417725,"longitude":-2.095266842,"stationOperator":"NT","crsCode":"HEX"},{"name":"Heysham Port","latitude":54.03315438,"longitude":-2.91311509,"stationOperator":"NT","crsCode":"HHB"},{"name":"Hindley","latitude":53.54225044,"longitude":-2.575496114,"stationOperator":"NT","crsCode":"HIN"},{"name":"Holmes Chapel","latitude":53.19895238,"longitude":-2.351145128,"stationOperator":"NT","crsCode":"HCH"},{"name":"Honley","latitude":53.60824208,"longitude":-1.780966774,"stationOperator":"NT","crsCode":"HOY"},{"name":"Hope (Derbyshire)","latitude":53.3459425,"longitude":-1.728537541,"stationOperator":"NT","crsCode":"HOP"},{"name":"Hornbeam Park","latitude":53.97988387,"longitude":-1.526829388,"stationOperator":"NT","crsCode":"HBP"},{"name":"Horsforth","latitude":53.84758338,"longitude":-1.63060526,"stationOperator":"NT","crsCode":"HRS"},{"name":"Horton-in-Ribblesdale","latitude":54.14939839,"longitude":-2.302030471,"stationOperator":"NT","crsCode":"HIR"},{"name":"Horwich Parkway","latitude":53.57812052,"longitude":-2.539674261,"stationOperator":"NT","crsCode":"HWI"},{"name":"Hoscar","latitude":53.59738358,"longitude":-2.803809539,"stationOperator":"NT","crsCode":"HSC"},{"name":"Hough Green","latitude":53.37240964,"longitude":-2.775067325,"stationOperator":"NT","crsCode":"HGN"},{"name":"Howden","latitude":53.76455009,"longitude":-0.860699734,"stationOperator":"NT","crsCode":"HOW"},{"name":"Humphrey Park","latitude":53.45224781,"longitude":-2.32754077,"stationOperator":"NT","crsCode":"HUP"},{"name":"Huncoat","latitude":53.77215217,"longitude":-2.345896854,"stationOperator":"NT","crsCode":"HCT"},{"name":"Hunmanby","latitude":54.17429747,"longitude":-0.314773782,"stationOperator":"NT","crsCode":"HUB"},{"name":"Hutton Cranswick","latitude":53.95568032,"longitude":-0.433326239,"stationOperator":"NT","crsCode":"HUT"},{"name":"Huyton","latitude":53.40969455,"longitude":-2.842991769,"stationOperator":"NT","crsCode":"HUY"},{"name":"Hyde Central","latitude":53.45174912,"longitude":-2.085788017,"stationOperator":"NT","crsCode":"HYC"},{"name":"Hyde North","latitude":53.46433332,"longitude":-2.085813385,"stationOperator":"NT","crsCode":"HYT"},{"name":"Ilkley","latitude":53.92495813,"longitude":-1.822103587,"stationOperator":"NT","crsCode":"ILK"},{"name":"Ince & Elton","latitude":53.27676,"longitude":-2.816228123,"stationOperator":"NT","crsCode":"INE"},{"name":"Ince (Manchester)","latitude":53.53918986,"longitude":-2.61257527,"stationOperator":"NT","crsCode":"INC"},{"name":"Irlam","latitude":53.43481373,"longitude":-2.433467061,"stationOperator":"NT","crsCode":"IRL"},{"name":"James Cook","latitude":54.5515,"longitude":-1.2076,"stationOperator":"NT","crsCode":"JCH"},{"name":"Kearsley (Manchester)","latitude":53.54466284,"longitude":-2.375731616,"stationOperator":"NT","crsCode":"KSL"},{"name":"Keighley","latitude":53.86788507,"longitude":-1.901120783,"stationOperator":"NT","crsCode":"KEI"},{"name":"Kents Bank","latitude":54.1729079,"longitude":-2.925229232,"stationOperator":"NT","crsCode":"KBK"},{"name":"Kildale","latitude":54.47727129,"longitude":-1.067852562,"stationOperator":"NT","crsCode":"KLD"},{"name":"Kirk Sandall","latitude":53.56343733,"longitude":-1.074913037,"stationOperator":"NT","crsCode":"KKS"},{"name":"Kirkby Stephen","latitude":54.45512998,"longitude":-2.368596626,"stationOperator":"NT","crsCode":"KSW"},{"name":"Kirkby-in-Furness","latitude":54.23234259,"longitude":-3.188906344,"stationOperator":"NT","crsCode":"KBF"},{"name":"Kirkham & Wesham","latitude":53.78738537,"longitude":-2.881813597,"stationOperator":"NT","crsCode":"KKM"},{"name":"Kirton Lindsey","latitude":53.48485675,"longitude":-0.593911552,"stationOperator":"NT","crsCode":"KTL"},{"name":"Kiveton Bridge","latitude":53.34098096,"longitude":-1.267182571,"stationOperator":"NT","crsCode":"KIV"},{"name":"Kiveton Park","latitude":53.33678062,"longitude":-1.239500771,"stationOperator":"NT","crsCode":"KVP"},{"name":"Knaresborough","latitude":54.00877012,"longitude":-1.470501209,"stationOperator":"NT","crsCode":"KNA"},{"name":"Knottingley","latitude":53.70655284,"longitude":-1.259179166,"stationOperator":"NT","crsCode":"KNO"},{"name":"Knutsford","latitude":53.30198471,"longitude":-2.37209752,"stationOperator":"NT","crsCode":"KNF"},{"name":"Langho","latitude":53.80498135,"longitude":-2.447905464,"stationOperator":"NT","crsCode":"LHO"},{"name":"Langwathby","latitude":54.69435932,"longitude":-2.663688074,"stationOperator":"NT","crsCode":"LGW"},{"name":"Layton (Lancs)","latitude":53.8356395,"longitude":-3.030232722,"stationOperator":"NT","crsCode":"LAY"},{"name":"Lazonby & Kirkoswald","latitude":54.7502215,"longitude":-2.702200095,"stationOperator":"NT","crsCode":"LZB"},{"name":"Lea Green","latitude":53.42710585,"longitude":-2.72383801,"stationOperator":"NT","crsCode":"LEG"},{"name":"Lealholm","latitude":54.46060115,"longitude":-0.825714934,"stationOperator":"NT","crsCode":"LHM"},{"name":"Levenshulme","latitude":53.44443357,"longitude":-2.192670025,"stationOperator":"NT","crsCode":"LVM"},{"name":"Leyland","latitude":53.69886394,"longitude":-2.687141641,"stationOperator":"NT","crsCode":"LEY"},{"name":"Littleborough","latitude":53.64301072,"longitude":-2.094646493,"stationOperator":"NT","crsCode":"LTL"},{"name":"Lockwood","latitude":53.63461276,"longitude":-1.800642023,"stationOperator":"NT","crsCode":"LCK"},{"name":"Long Preston","latitude":54.01684584,"longitude":-2.255589281,"stationOperator":"NT","crsCode":"LPR"},{"name":"Longbeck","latitude":54.58922624,"longitude":-1.030941986,"stationOperator":"NT","crsCode":"LGK"},{"name":"Lostock","latitude":53.57299748,"longitude":-2.493775435,"stationOperator":"NT","crsCode":"LOT"},{"name":"Lostock Gralam","latitude":53.26767922,"longitude":-2.465211107,"stationOperator":"NT","crsCode":"LTG"},{"name":"Lostock Hall","latitude":53.72385234,"longitude":-2.687094284,"stationOperator":"NT","crsCode":"LOH"},{"name":"Lytham","latitude":53.7392924,"longitude":-2.964043873,"stationOperator":"NT","crsCode":"LTM"},{"name":"Manchester Oxford Road","latitude":53.47399664,"longitude":-2.242522887,"stationOperator":"NT","crsCode":"MCO"},{"name":"Manchester United Football Ground","latitude":53.4622129,"longitude":-2.290654777,"stationOperator":"NT","crsCode":"MUF"},{"name":"Manchester Victoria","latitude":53.48747956,"longitude":-2.242599788,"stationOperator":"NT","crsCode":"MCV"},{"name":"Manors","latitude":54.97276358,"longitude":-1.604744532,"stationOperator":"NT","crsCode":"MAS"},{"name":"Marple","latitude":53.40070996,"longitude":-2.057258911,"stationOperator":"NT","crsCode":"MPL"},{"name":"Marsden (Yorks)","latitude":53.60320016,"longitude":-1.930755584,"stationOperator":"NT","crsCode":"MSN"},{"name":"Marske","latitude":54.58742173,"longitude":-1.0189143,"stationOperator":"NT","crsCode":"MSK"},{"name":"Marton","latitude":54.54380222,"longitude":-1.197717189,"stationOperator":"NT","crsCode":"MTO"},{"name":"Maryport","latitude":54.71158569,"longitude":-3.494701885,"stationOperator":"NT","crsCode":"MRY"},{"name":"Mauldeth Road","latitude":53.43361928,"longitude":-2.20917839,"stationOperator":"NT","crsCode":"MAU"},{"name":"Meadowhall","latitude":53.41690227,"longitude":-1.41361886,"stationOperator":"NT","crsCode":"MHS"},{"name":"Menston","latitude":53.89235171,"longitude":-1.735508485,"stationOperator":"NT","crsCode":"MNN"},{"name":"Meols Cop","latitude":53.646167,"longitude":-2.975382686,"stationOperator":"NT","crsCode":"MEC"},{"name":"MetroCentre","latitude":54.9587475,"longitude":-1.665631298,"stationOperator":"NT","crsCode":"MCE"},{"name":"Mexborough","latitude":53.49101072,"longitude":-1.288564361,"stationOperator":"NT","crsCode":"MEX"},{"name":"Micklefield","latitude":53.78909282,"longitude":-1.324363018,"stationOperator":"NT","crsCode":"MIK"},{"name":"Middlewood","latitude":53.35997512,"longitude":-2.08334968,"stationOperator":"NT","crsCode":"MDL"},{"name":"Mill Hill (Lancs)","latitude":53.73546799,"longitude":-2.501741498,"stationOperator":"NT","crsCode":"MLH"},{"name":"Millom","latitude":54.21083074,"longitude":-3.271093719,"stationOperator":"NT","crsCode":"MLM"},{"name":"Mills Hill (Manchester)","latitude":53.55052249,"longitude":-2.17202063,"stationOperator":"NT","crsCode":"MIH"},{"name":"Mirfield","latitude":53.67159426,"longitude":-1.691785436,"stationOperator":"NT","crsCode":"MIR"},{"name":"Mobberley","latitude":53.32996527,"longitude":-2.333300348,"stationOperator":"NT","crsCode":"MOB"},{"name":"Moorside","latitude":53.51596879,"longitude":-2.352855774,"stationOperator":"NT","crsCode":"MSD"},{"name":"Moorthorpe","latitude":53.59446929,"longitude":-1.304958873,"stationOperator":"NT","crsCode":"MRP"},{"name":"Morecambe","latitude":54.07035269,"longitude":-2.869964906,"stationOperator":"NT","crsCode":"MCM"},{"name":"Morley","latitude":53.74994099,"longitude":-1.590971837,"stationOperator":"NT","crsCode":"MLY"},{"name":"Morpeth","latitude":55.1625058,"longitude":-1.682921137,"stationOperator":"NT","crsCode":"MPT"},{"name":"Moses Gate","latitude":53.55599573,"longitude":-2.401192526,"stationOperator":"NT","crsCode":"MSS"},{"name":"Moss Side","latitude":53.76444408,"longitude":-2.943532624,"stationOperator":"NT","crsCode":"MOS"},{"name":"Mossley (Manchester)","latitude":53.5146843,"longitude":-2.042180876,"stationOperator":"NT","crsCode":"MSL"},{"name":"Mossley Hill","latitude":53.37905641,"longitude":-2.915448411,"stationOperator":"NT","crsCode":"MSH"},{"name":"Moston","latitude":53.52265793,"longitude":-2.171907727,"stationOperator":"NT","crsCode":"MSO"},{"name":"Mouldsworth","latitude":53.23181982,"longitude":-2.732225441,"stationOperator":"NT","crsCode":"MLD"},{"name":"Mytholmroyd","latitude":53.72902055,"longitude":-1.981432246,"stationOperator":"NT","crsCode":"MYT"},{"name":"Nafferton","latitude":54.01169775,"longitude":-0.386978527,"stationOperator":"NT","crsCode":"NFN"},{"name":"Navigation Road","latitude":53.39546529,"longitude":-2.343587,"stationOperator":"NT","crsCode":"NVR"},{"name":"Nelson","latitude":53.83501859,"longitude":-2.213756609,"stationOperator":"NT","crsCode":"NEL"},{"name":"Nethertown","latitude":54.45695431,"longitude":-3.566398862,"stationOperator":"NT","crsCode":"NRT"},{"name":"New Clee","latitude":53.57446029,"longitude":-0.05914558,"stationOperator":"NT","crsCode":"NCE"},{"name":"New Holland","latitude":53.70193475,"longitude":-0.360203766,"stationOperator":"NT","crsCode":"NHL"},{"name":"New Lane","latitude":53.61132045,"longitude":-2.867559911,"stationOperator":"NT","crsCode":"NLN"},{"name":"New Mills Central","latitude":53.36485808,"longitude":-2.00566548,"stationOperator":"NT","crsCode":"NMC"},{"name":"New Mills Newtown","latitude":53.35964437,"longitude":-2.008519722,"stationOperator":"NT","crsCode":"NMN"},{"name":"New Pudsey","latitude":53.80449407,"longitude":-1.680789733,"stationOperator":"NT","crsCode":"NPD"},{"name":"Newton Aycliffe","latitude":54.61370904,"longitude":-1.589650446,"stationOperator":"NT","crsCode":"NAY"},{"name":"Newton for Hyde","latitude":53.45670495,"longitude":-2.066972742,"stationOperator":"NT","crsCode":"NWN"},{"name":"Newton-le-Willows","latitude":53.45307176,"longitude":-2.613594198,"stationOperator":"NT","crsCode":"NLW"},{"name":"Normanton","latitude":53.69990584,"longitude":-1.423491413,"stationOperator":"NT","crsCode":"NOR"},{"name":"North Road (Darlington)","latitude":54.53620358,"longitude":-1.553954408,"stationOperator":"NT","crsCode":"NRD"},{"name":"Northwich","latitude":53.26146564,"longitude":-2.496926038,"stationOperator":"NT","crsCode":"NWI"},{"name":"Nunthorpe","latitude":54.52788343,"longitude":-1.169442639,"stationOperator":"NT","crsCode":"NNT"},{"name":"Orrell","latitude":53.52993615,"longitude":-2.70929685,"stationOperator":"NT","crsCode":"ORR"},{"name":"Outwood","latitude":53.71503172,"longitude":-1.509941857,"stationOperator":"NT","crsCode":"OUT"},{"name":"Padgate","latitude":53.40580767,"longitude":-2.556805552,"stationOperator":"NT","crsCode":"PDG"},{"name":"Pannal","latitude":53.95833848,"longitude":-1.533459179,"stationOperator":"NT","crsCode":"PNL"},{"name":"Parbold","latitude":53.59095037,"longitude":-2.770600227,"stationOperator":"NT","crsCode":"PBL"},{"name":"Parton","latitude":54.56990389,"longitude":-3.582020124,"stationOperator":"NT","crsCode":"PRN"},{"name":"Patricroft","latitude":53.48512529,"longitude":-2.35697017,"stationOperator":"NT","crsCode":"PAT"},{"name":"Pegswood","latitude":55.17767637,"longitude":-1.644487291,"stationOperator":"NT","crsCode":"PEG"},{"name":"Pemberton","latitude":53.53034636,"longitude":-2.66932411,"stationOperator":"NT","crsCode":"PEM"},{"name":"Penistone","latitude":53.52552057,"longitude":-1.622552219,"stationOperator":"NT","crsCode":"PNS"},{"name":"Pleasington","latitude":53.73096858,"longitude":-2.544130993,"stationOperator":"NT","crsCode":"PLS"},{"name":"Plumley","latitude":53.27468889,"longitude":-2.419668513,"stationOperator":"NT","crsCode":"PLM"},{"name":"Pontefract Baghill","latitude":53.69189685,"longitude":-1.303355158,"stationOperator":"NT","crsCode":"PFR"},{"name":"Pontefract Monkhill","latitude":53.69908348,"longitude":-1.302630611,"stationOperator":"NT","crsCode":"PFM"},{"name":"Pontefract Tanshelf","latitude":53.6941436,"longitude":-1.318917563,"stationOperator":"NT","crsCode":"POT"},{"name":"Poppleton","latitude":53.97609158,"longitude":-1.148589239,"stationOperator":"NT","crsCode":"POP"},{"name":"Poulton-le-Fylde","latitude":53.84814637,"longitude":-2.990287393,"stationOperator":"NT","crsCode":"PFY"},{"name":"Poynton","latitude":53.35040033,"longitude":-2.134408257,"stationOperator":"NT","crsCode":"PYT"},{"name":"Prescot","latitude":53.42356928,"longitude":-2.799172819,"stationOperator":"NT","crsCode":"PSC"},{"name":"Prestbury","latitude":53.29339747,"longitude":-2.145481304,"stationOperator":"NT","crsCode":"PRB"},{"name":"Prudhoe","latitude":54.96614154,"longitude":-1.864859902,"stationOperator":"NT","crsCode":"PRU"},{"name":"Rainford","latitude":53.51711894,"longitude":-2.789469813,"stationOperator":"NT","crsCode":"RNF"},{"name":"Rainhill","latitude":53.4171322,"longitude":-2.766400942,"stationOperator":"NT","crsCode":"RNH"},{"name":"Ramsgreave & Wilpshire","latitude":53.78005445,"longitude":-2.478750546,"stationOperator":"NT","crsCode":"RGW"},{"name":"Ravenglass for Eskdale","latitude":54.35561861,"longitude":-3.408961525,"stationOperator":"NT","crsCode":"RAV"},{"name":"Ravensthorpe","latitude":53.6755404,"longitude":-1.655576289,"stationOperator":"NT","crsCode":"RVN"},{"name":"Rawcliffe","latitude":53.68905567,"longitude":-0.960855694,"stationOperator":"NT","crsCode":"RWC"},{"name":"Redcar British Steel","latitude":54.60989477,"longitude":-1.112668323,"stationOperator":"NT","crsCode":"RBS"},{"name":"Redcar Central","latitude":54.6162319,"longitude":-1.070873487,"stationOperator":"NT","crsCode":"RCC"},{"name":"Redcar East","latitude":54.60925751,"longitude":-1.052297613,"stationOperator":"NT","crsCode":"RCE"},{"name":"Reddish North","latitude":53.44943056,"longitude":-2.156253115,"stationOperator":"NT","crsCode":"RDN"},{"name":"Reddish South","latitude":53.43693407,"longitude":-2.157863127,"stationOperator":"NT","crsCode":"RDS"},{"name":"Ribblehead","latitude":54.20584998,"longitude":-2.360854841,"stationOperator":"NT","crsCode":"RHD"},{"name":"Riding Mill","latitude":54.94904894,"longitude":-1.970772673,"stationOperator":"NT","crsCode":"RDM"},{"name":"Rishton","latitude":53.76355579,"longitude":-2.420158645,"stationOperator":"NT","crsCode":"RIS"},{"name":"Roby","latitude":53.41005192,"longitude":-2.855936847,"stationOperator":"NT","crsCode":"ROB"},{"name":"Rochdale","latitude":53.61032152,"longitude":-2.153521182,"stationOperator":"NT","crsCode":"RCD"},{"name":"Romiley","latitude":53.4141736,"longitude":-2.089172777,"stationOperator":"NT","crsCode":"RML"},{"name":"Roose","latitude":54.11516949,"longitude":-3.194576777,"stationOperator":"NT","crsCode":"ROO"},{"name":"Rose Grove","latitude":53.78670009,"longitude":-2.28226806,"stationOperator":"NT","crsCode":"RSG"},{"name":"Rose Hill Marple","latitude":53.39611526,"longitude":-2.075900869,"stationOperator":"NT","crsCode":"RSH"},{"name":"Rotherham Central","latitude":53.43227009,"longitude":-1.360440012,"stationOperator":"NT","crsCode":"RMC"},{"name":"Rufford","latitude":53.63502533,"longitude":-2.806944757,"stationOperator":"NT","crsCode":"RUF"},{"name":"Ruswarp","latitude":54.47019987,"longitude":-0.627765603,"stationOperator":"NT","crsCode":"RUS"},{"name":"Ryder Brow","latitude":53.45713715,"longitude":-2.173450235,"stationOperator":"NT","crsCode":"RRB"},{"name":"Salford Central","latitude":53.48277848,"longitude":-2.255532721,"stationOperator":"NT","crsCode":"SFD"},{"name":"Salford Crescent","latitude":53.48659869,"longitude":-2.275750605,"stationOperator":"NT","crsCode":"SLD"},{"name":"Saltaire","latitude":53.83889296,"longitude":-1.791618606,"stationOperator":"NT","crsCode":"SAE"},{"name":"Saltburn","latitude":54.58345549,"longitude":-0.974136266,"stationOperator":"NT","crsCode":"SLB"},{"name":"Saltmarshe","latitude":53.7223492,"longitude":-0.810007666,"stationOperator":"NT","crsCode":"SAM"},{"name":"Salwick","latitude":53.78171338,"longitude":-2.819773179,"stationOperator":"NT","crsCode":"SLW"},{"name":"Sandal & Agbrigg","latitude":53.66313829,"longitude":-1.481487026,"stationOperator":"NT","crsCode":"SNA"},{"name":"Sandbach","latitude":53.15018835,"longitude":-2.3935123,"stationOperator":"NT","crsCode":"SDB"},{"name":"Sankey for Penketh","latitude":53.39247998,"longitude":-2.650467264,"stationOperator":"NT","crsCode":"SNK"},{"name":"Seaham","latitude":54.83664804,"longitude":-1.340923595,"stationOperator":"NT","crsCode":"SEA"},{"name":"Seascale","latitude":54.39564109,"longitude":-3.484886294,"stationOperator":"NT","crsCode":"SSC"},{"name":"Seaton Carew","latitude":54.65831825,"longitude":-1.200423075,"stationOperator":"NT","crsCode":"SEC"},{"name":"Sellafield","latitude":54.41659024,"longitude":-3.51045609,"stationOperator":"NT","crsCode":"SEL"},{"name":"Settle","latitude":54.06692419,"longitude":-2.280711727,"stationOperator":"NT","crsCode":"SET"},{"name":"Shepley","latitude":53.58920057,"longitude":-1.704017926,"stationOperator":"NT","crsCode":"SPY"},{"name":"Sherburn-in-Elmet","latitude":53.79717016,"longitude":-1.232684076,"stationOperator":"NT","crsCode":"SIE"},{"name":"Shildon","latitude":54.62680318,"longitude":-1.637535646,"stationOperator":"NT","crsCode":"SHD"},{"name":"Shipley (Yorks)","latitude":53.83274772,"longitude":-1.773263392,"stationOperator":"NT","crsCode":"SHY"},{"name":"Shireoaks","latitude":53.32484379,"longitude":-1.168215662,"stationOperator":"NT","crsCode":"SRO"},{"name":"Silecroft","latitude":54.22622466,"longitude":-3.335366346,"stationOperator":"NT","crsCode":"SIC"},{"name":"Silkstone Common","latitude":53.53493739,"longitude":-1.563474153,"stationOperator":"NT","crsCode":"SLK"},{"name":"Silverdale","latitude":54.16991444,"longitude":-2.803839018,"stationOperator":"NT","crsCode":"SVR"},{"name":"Skipton","latitude":53.95870219,"longitude":-2.025878431,"stationOperator":"NT","crsCode":"SKI"},{"name":"Slaithwaite","latitude":53.62384413,"longitude":-1.881582946,"stationOperator":"NT","crsCode":"SWT"},{"name":"Sleights","latitude":54.46106173,"longitude":-0.662475769,"stationOperator":"NT","crsCode":"SLH"},{"name":"Smithy Bridge","latitude":53.63301726,"longitude":-2.113376557,"stationOperator":"NT","crsCode":"SMB"},{"name":"Snaith","latitude":53.69312867,"longitude":-1.028454207,"stationOperator":"NT","crsCode":"SNI"},{"name":"South Bank","latitude":54.58383426,"longitude":-1.176660612,"stationOperator":"NT","crsCode":"SBK"},{"name":"South Elmsall","latitude":53.59462052,"longitude":-1.284860698,"stationOperator":"NT","crsCode":"SES"},{"name":"South Milford","latitude":53.7823442,"longitude":-1.250529513,"stationOperator":"NT","crsCode":"SOM"},{"name":"Sowerby Bridge","latitude":53.70790822,"longitude":-1.906950154,"stationOperator":"NT","crsCode":"SOW"},{"name":"Squires Gate","latitude":53.77677721,"longitude":-3.04942893,"stationOperator":"NT","crsCode":"SQU"},{"name":"St Annes-on-Sea","latitude":53.75340279,"longitude":-3.02912925,"stationOperator":"NT","crsCode":"SAS"},{"name":"St Bees","latitude":54.49258108,"longitude":-3.591384658,"stationOperator":"NT","crsCode":"SBS"},{"name":"St Helens Central","latitude":53.45313449,"longitude":-2.730304246,"stationOperator":"NT","crsCode":"SNH"},{"name":"St Helens Junction","latitude":53.43354101,"longitude":-2.699863587,"stationOperator":"NT","crsCode":"SHJ"},{"name":"Stallingborough","latitude":53.58711418,"longitude":-0.183667548,"stationOperator":"NT","crsCode":"SLL"},{"name":"Stanlow & Thornton","latitude":53.27829475,"longitude":-2.841153819,"stationOperator":"NT","crsCode":"SNT"},{"name":"Starbeck","latitude":53.99901434,"longitude":-1.501135911,"stationOperator":"NT","crsCode":"SBE"},{"name":"Steeton & Silsden","latitude":53.90026989,"longitude":-1.944114862,"stationOperator":"NT","crsCode":"SON"},{"name":"Stocksfield","latitude":54.94704693,"longitude":-1.916756206,"stationOperator":"NT","crsCode":"SKS"},{"name":"Stocksmoor","latitude":53.59437058,"longitude":-1.723472627,"stationOperator":"NT","crsCode":"SSM"},{"name":"Stockton","latitude":54.57024897,"longitude":-1.318932714,"stationOperator":"NT","crsCode":"STK"},{"name":"Streethouse","latitude":53.67632991,"longitude":-1.399894276,"stationOperator":"NT","crsCode":"SHC"},{"name":"Strines","latitude":53.37510107,"longitude":-2.032573054,"stationOperator":"NT","crsCode":"SRN"},{"name":"Styal","latitude":53.34834611,"longitude":-2.240457225,"stationOperator":"NT","crsCode":"SYA"},{"name":"Sunderland","latitude":54.905507,"longitude":-1.382377347,"stationOperator":"NT","crsCode":"SUN"},{"name":"Swinton (Manchester)","latitude":53.51484469,"longitude":-2.337463925,"stationOperator":"NT","crsCode":"SNN"},{"name":"Swinton (South Yorks)","latitude":53.48625823,"longitude":-1.305824829,"stationOperator":"NT","crsCode":"SWN"},{"name":"Tees-side Airport","latitude":54.51813568,"longitude":-1.425312602,"stationOperator":"NT","crsCode":"TEA"},{"name":"Thatto Heath","latitude":53.43659332,"longitude":-2.759374859,"stationOperator":"NT","crsCode":"THH"},{"name":"Thorne North","latitude":53.61607518,"longitude":-0.972324106,"stationOperator":"NT","crsCode":"TNN"},{"name":"Thorne South","latitude":53.60379593,"longitude":-0.954637509,"stationOperator":"NT","crsCode":"TNS"},{"name":"Thornton Abbey","latitude":53.65397075,"longitude":-0.323493815,"stationOperator":"NT","crsCode":"TNA"},{"name":"Thurnscoe","latitude":53.54506234,"longitude":-1.308786923,"stationOperator":"NT","crsCode":"THC"},{"name":"Todmorden","latitude":53.71383521,"longitude":-2.099654001,"stationOperator":"NT","crsCode":"TOD"},{"name":"Trafford Park","latitude":53.45496887,"longitude":-2.311688825,"stationOperator":"NT","crsCode":"TRA"},{"name":"Ulceby","latitude":53.61905841,"longitude":-0.302046812,"stationOperator":"NT","crsCode":"ULC"},{"name":"Ulleskelf","latitude":53.85362212,"longitude":-1.213971008,"stationOperator":"NT","crsCode":"ULL"},{"name":"Upholland","latitude":53.52839306,"longitude":-2.741404202,"stationOperator":"NT","crsCode":"UPL"},{"name":"Urmston","latitude":53.44828978,"longitude":-2.353800379,"stationOperator":"NT","crsCode":"URM"},{"name":"Wakefield Kirkgate","latitude":53.67898718,"longitude":-1.488256596,"stationOperator":"NT","crsCode":"WKK"},{"name":"Walkden","latitude":53.51978762,"longitude":-2.396325573,"stationOperator":"NT","crsCode":"WKD"},{"name":"Walsden","latitude":53.69621394,"longitude":-2.104458959,"stationOperator":"NT","crsCode":"WDN"},{"name":"Wavertree Technology Park","latitude":53.40595252,"longitude":-2.923547158,"stationOperator":"NT","crsCode":"WAV"},{"name":"Weeton","latitude":53.92319129,"longitude":-1.581209427,"stationOperator":"NT","crsCode":"WET"},{"name":"Wennington","latitude":54.12354041,"longitude":-2.586901999,"stationOperator":"NT","crsCode":"WNN"},{"name":"West Allerton","latitude":53.36914314,"longitude":-2.906969437,"stationOperator":"NT","crsCode":"WSA"},{"name":"Westhoughton","latitude":53.55597056,"longitude":-2.52391934,"stationOperator":"NT","crsCode":"WHG"},{"name":"Wetheral","latitude":54.88383913,"longitude":-2.831705373,"stationOperator":"NT","crsCode":"WRL"},{"name":"Whaley Bridge","latitude":53.33024999,"longitude":-1.984639006,"stationOperator":"NT","crsCode":"WBR"},{"name":"Whalley (Lancs)","latitude":53.82425416,"longitude":-2.412258277,"stationOperator":"NT","crsCode":"WHE"},{"name":"Whiston","latitude":53.41387942,"longitude":-2.796433416,"stationOperator":"NT","crsCode":"WHN"},{"name":"Whitby","latitude":54.48461942,"longitude":-0.615396354,"stationOperator":"NT","crsCode":"WTB"},{"name":"Whitehaven","latitude":54.55303162,"longitude":-3.586933718,"stationOperator":"NT","crsCode":"WTH"},{"name":"Whitley Bridge","latitude":53.69914493,"longitude":-1.158278466,"stationOperator":"NT","crsCode":"WBD"},{"name":"Widdrington","latitude":55.24139256,"longitude":-1.616238916,"stationOperator":"NT","crsCode":"WDD"},{"name":"Widnes","latitude":53.37851496,"longitude":-2.733536824,"stationOperator":"NT","crsCode":"WID"},{"name":"Wigan Wallgate","latitude":53.54483534,"longitude":-2.633181536,"stationOperator":"NT","crsCode":"WGW"},{"name":"Wigton","latitude":54.82933971,"longitude":-3.164351154,"stationOperator":"NT","crsCode":"WGT"},{"name":"Wilmslow","latitude":53.32686324,"longitude":-2.226327912,"stationOperator":"NT","crsCode":"WML"},{"name":"Wombwell","latitude":53.51759057,"longitude":-1.416316768,"stationOperator":"NT","crsCode":"WOM"},{"name":"Woodhouse","latitude":53.36375861,"longitude":-1.35755924,"stationOperator":"NT","crsCode":"WDH"},{"name":"Woodlesford","latitude":53.75680457,"longitude":-1.442885379,"stationOperator":"NT","crsCode":"WDS"},{"name":"Woodley","latitude":53.42927163,"longitude":-2.09326801,"stationOperator":"NT","crsCode":"WLY"},{"name":"Woodsmoor","latitude":53.3860782,"longitude":-2.141286478,"stationOperator":"NT","crsCode":"WSR"},{"name":"Workington","latitude":54.6450979,"longitude":-3.55849952,"stationOperator":"NT","crsCode":"WKG"},{"name":"Worksop","latitude":53.31166202,"longitude":-1.122542594,"stationOperator":"NT","crsCode":"WRK"},{"name":"Wressle","latitude":53.77277727,"longitude":-0.92420758,"stationOperator":"NT","crsCode":"WRS"},{"name":"Wylam","latitude":54.97497108,"longitude":-1.814055621,"stationOperator":"NT","crsCode":"WYM"},{"name":"Abbey Wood","latitude":51.49077059,"longitude":0.12032557,"stationOperator":"SE","crsCode":"ABW"},{"name":"Adisham","latitude":51.24120466,"longitude":1.19910096,"stationOperator":"SE","crsCode":"ADM"},{"name":"Albany Park","latitude":51.43580211,"longitude":0.126411748,"stationOperator":"SE","crsCode":"AYP"},{"name":"Ashford International","latitude":51.14370672,"longitude":0.876213658,"stationOperator":"SE","crsCode":"AFK"},{"name":"Aylesford","latitude":51.30131524,"longitude":0.466175982,"stationOperator":"SE","crsCode":"AYL"},{"name":"Aylesham","latitude":51.227257,"longitude":1.209464797,"stationOperator":"SE","crsCode":"AYH"},{"name":"Barming","latitude":51.2848921,"longitude":0.478963755,"stationOperator":"SE","crsCode":"BMG"},{"name":"Barnehurst","latitude":51.46484925,"longitude":0.160876915,"stationOperator":"SE","crsCode":"BNH"},{"name":"Bat & Ball","latitude":51.28975825,"longitude":0.194239522,"stationOperator":"SE","crsCode":"BBL"},{"name":"Battle","latitude":50.91291092,"longitude":0.494707026,"stationOperator":"SE","crsCode":"BAT"},{"name":"Bearsted","latitude":51.27581786,"longitude":0.577588734,"stationOperator":"SE","crsCode":"BSD"},{"name":"Beckenham Hill","latitude":51.42481875,"longitude":-0.016509356,"stationOperator":"TL","crsCode":"BEC"},{"name":"Beckenham Junction","latitude":51.41150888,"longitude":-0.027152,"stationOperator":"SE","crsCode":"BKJ"},{"name":"Bekesbourne","latitude":51.26136142,"longitude":1.136717912,"stationOperator":"SE","crsCode":"BKS"},{"name":"Bellingham","latitude":51.43387812,"longitude":-0.020433206,"stationOperator":"TL","crsCode":"BGM"},{"name":"Beltring","latitude":51.20470355,"longitude":0.403498536,"stationOperator":"SE","crsCode":"BEG"},{"name":"Belvedere","latitude":51.49199068,"longitude":0.152076006,"stationOperator":"SE","crsCode":"BVD"},{"name":"Bexley","latitude":51.44080011,"longitude":0.148229166,"stationOperator":"SE","crsCode":"BXY"},{"name":"Bexleyheath","latitude":51.46355285,"longitude":0.133460723,"stationOperator":"SE","crsCode":"BXH"},{"name":"Bickley","latitude":51.40039232,"longitude":0.044255507,"stationOperator":"SE","crsCode":"BKL"},{"name":"Birchington-on-sea","latitude":51.37749929,"longitude":1.301424075,"stationOperator":"SE","crsCode":"BCH"},{"name":"Blackheath","latitude":51.46576408,"longitude":0.008302376,"stationOperator":"SE","crsCode":"BKH"},{"name":"Borough Green & Wrotham","latitude":51.29321653,"longitude":0.306260165,"stationOperator":"SE","crsCode":"BRG"},{"name":"Brixton","latitude":51.46330207,"longitude":-0.114179004,"stationOperator":"SE","crsCode":"BRX"},{"name":"Broadstairs","latitude":51.36068061,"longitude":1.433579788,"stationOperator":"SE","crsCode":"BSR"},{"name":"Bromley North","latitude":51.40895308,"longitude":0.017315524,"stationOperator":"SE","crsCode":"BMN"},{"name":"Bromley South","latitude":51.39994205,"longitude":0.018356648,"stationOperator":"SE","crsCode":"BMS"},{"name":"Canterbury East","latitude":51.27427221,"longitude":1.075977014,"stationOperator":"SE","crsCode":"CBE"},{"name":"Canterbury West","latitude":51.28427401,"longitude":1.075311762,"stationOperator":"SE","crsCode":"CBW"},{"name":"Catford","latitude":51.44440912,"longitude":-0.026309768,"stationOperator":"TL","crsCode":"CTF"},{"name":"Catford Bridge","latitude":51.44474435,"longitude":-0.024856205,"stationOperator":"SE","crsCode":"CFB"},{"name":"Charing (Kent)","latitude":51.20810222,"longitude":0.790345573,"stationOperator":"SE","crsCode":"CHG"},{"name":"Charlton","latitude":51.48686666,"longitude":0.03098034,"stationOperator":"SE","crsCode":"CTN"},{"name":"Chartham","latitude":51.25726956,"longitude":1.01806042,"stationOperator":"SE","crsCode":"CRT"},{"name":"Chatham","latitude":51.38037808,"longitude":0.521158168,"stationOperator":"SE","crsCode":"CTM"},{"name":"Chelsfield","latitude":51.3562555,"longitude":0.109079893,"stationOperator":"SE","crsCode":"CLD"},{"name":"Chestfield & Swalecliffe","latitude":51.36032694,"longitude":1.067706206,"stationOperator":"SE","crsCode":"CSW"},{"name":"Chilham","latitude":51.24461449,"longitude":0.97591547,"stationOperator":"SE","crsCode":"CIL"},{"name":"Chislehurst","latitude":51.40555763,"longitude":0.057426909,"stationOperator":"SE","crsCode":"CIT"},{"name":"Clock House","latitude":51.40858783,"longitude":-0.040650863,"stationOperator":"SE","crsCode":"CLK"},{"name":"Crayford","latitude":51.4483295,"longitude":0.178807049,"stationOperator":"SE","crsCode":"CRY"},{"name":"Crofton Park","latitude":51.45519193,"longitude":-0.036496434,"stationOperator":"TL","crsCode":"CFT"},{"name":"Crowhurst","latitude":50.88857369,"longitude":0.501354995,"stationOperator":"SE","crsCode":"CWU"},{"name":"Cuxton","latitude":51.37392606,"longitude":0.46171433,"stationOperator":"SE","crsCode":"CUX"},{"name":"Dartford","latitude":51.44737254,"longitude":0.219261557,"stationOperator":"SE","crsCode":"DFD"},{"name":"Deal","latitude":51.22304659,"longitude":1.398864195,"stationOperator":"SE","crsCode":"DEA"},{"name":"Denmark Hill","latitude":51.46820589,"longitude":-0.08935568,"stationOperator":"TL","crsCode":"DMK"},{"name":"Deptford","latitude":51.4788514,"longitude":-0.026263166,"stationOperator":"SE","crsCode":"DEP"},{"name":"Dover Priory","latitude":51.12570009,"longitude":1.305307618,"stationOperator":"SE","crsCode":"DVP"},{"name":"Dumpton Park","latitude":51.34570515,"longitude":1.425837546,"stationOperator":"SE","crsCode":"DMP"},{"name":"Dunton Green","latitude":51.29648798,"longitude":0.170948548,"stationOperator":"SE","crsCode":"DNG"},{"name":"East Farleigh","latitude":51.25523373,"longitude":0.484734574,"stationOperator":"SE","crsCode":"EFL"},{"name":"East Malling","latitude":51.28580685,"longitude":0.439284828,"stationOperator":"SE","crsCode":"EML"},{"name":"Ebbsfleet International","latitude":51.442898,"longitude":0.321002,"stationOperator":"SE","crsCode":"EBD"},{"name":"Eden Park","latitude":51.39081565,"longitude":-0.026605004,"stationOperator":"SE","crsCode":"EDN"},{"name":"Elmers End","latitude":51.39830239,"longitude":-0.049428828,"stationOperator":"SE","crsCode":"ELE"},{"name":"Elmstead Woods","latitude":51.41711905,"longitude":0.044282703,"stationOperator":"SE","crsCode":"ESD"},{"name":"Eltham","latitude":51.45564856,"longitude":0.052337616,"stationOperator":"SE","crsCode":"ELW"},{"name":"Erith","latitude":51.48168188,"longitude":0.174635475,"stationOperator":"SE","crsCode":"ERH"},{"name":"Etchingham","latitude":51.0105441,"longitude":0.442373902,"stationOperator":"SE","crsCode":"ETC"},{"name":"Eynsford","latitude":51.36271986,"longitude":0.204405917,"stationOperator":"SE","crsCode":"EYN"},{"name":"Falconwood","latitude":51.45914359,"longitude":0.078550785,"stationOperator":"SE","crsCode":"FCN"},{"name":"Farningham Road","latitude":51.40139519,"longitude":0.235524653,"stationOperator":"SE","crsCode":"FNR"},{"name":"Faversham","latitude":51.31171034,"longitude":0.891062265,"stationOperator":"SE","crsCode":"FAV"},{"name":"Folkestone Central","latitude":51.08288631,"longitude":1.169492303,"stationOperator":"SE","crsCode":"FKC"},{"name":"Folkestone West","latitude":51.08458538,"longitude":1.153912918,"stationOperator":"SE","crsCode":"FKW"},{"name":"Frant","latitude":51.10402068,"longitude":0.2945567,"stationOperator":"SE","crsCode":"FRT"},{"name":"Gillingham (Kent)","latitude":51.38672166,"longitude":0.550513828,"stationOperator":"SE","crsCode":"GLM"},{"name":"Gravesend","latitude":51.44134993,"longitude":0.366646481,"stationOperator":"SE","crsCode":"GRV"},{"name":"Greenhithe","latitude":51.45076146,"longitude":0.278856807,"stationOperator":"SE","crsCode":"GNH"},{"name":"Greenwich","latitude":51.47783848,"longitude":-0.014209644,"stationOperator":"SE","crsCode":"GNW"},{"name":"Grove Park","latitude":51.43044575,"longitude":0.022578266,"stationOperator":"SE","crsCode":"GRP"},{"name":"Halling","latitude":51.35247674,"longitude":0.44493691,"stationOperator":"SE","crsCode":"HAI"},{"name":"Harrietsham","latitude":51.24482814,"longitude":0.672410147,"stationOperator":"SE","crsCode":"HRM"},{"name":"Hastings","latitude":50.85759003,"longitude":0.576461455,"stationOperator":"SE","crsCode":"HGS"},{"name":"Hayes (Kent)","latitude":51.37580244,"longitude":0.010109755,"stationOperator":"SE","crsCode":"HYS"},{"name":"Headcorn","latitude":51.16571639,"longitude":0.627491294,"stationOperator":"SE","crsCode":"HCN"},{"name":"Herne Bay","latitude":51.36459088,"longitude":1.117735579,"stationOperator":"SE","crsCode":"HNB"},{"name":"Herne Hill","latitude":51.45320752,"longitude":-0.101640876,"stationOperator":"SE","crsCode":"HNH"},{"name":"High Brooms","latitude":51.14939826,"longitude":0.277345661,"stationOperator":"SE","crsCode":"HIB"},{"name":"Higham (Kent)","latitude":51.42656006,"longitude":0.466283903,"stationOperator":"SE","crsCode":"HGM"},{"name":"Hildenborough","latitude":51.21448142,"longitude":0.227602385,"stationOperator":"SE","crsCode":"HLB"},{"name":"Hither Green","latitude":51.45243221,"longitude":-0.000918992,"stationOperator":"SE","crsCode":"HGR"},{"name":"Hollingbourne","latitude":51.26517489,"longitude":0.627857882,"stationOperator":"SE","crsCode":"HBN"},{"name":"Kearsney (Kent)","latitude":51.14937599,"longitude":1.272074581,"stationOperator":"SE","crsCode":"KSN"},{"name":"Kemsing","latitude":51.29718469,"longitude":0.247441908,"stationOperator":"SE","crsCode":"KMS"},{"name":"Kemsley","latitude":51.3624387,"longitude":0.735371031,"stationOperator":"SE","crsCode":"KML"},{"name":"Kent House","latitude":51.4127206,"longitude":-0.0457951,"stationOperator":"SE","crsCode":"KTH"},{"name":"Kidbrooke","latitude":51.46272143,"longitude":0.028324303,"stationOperator":"SE","crsCode":"KDB"},{"name":"Knockholt","latitude":51.34578876,"longitude":0.130857676,"stationOperator":"SE","crsCode":"KCK"},{"name":"Ladywell","latitude":51.45624704,"longitude":-0.019033585,"stationOperator":"SE","crsCode":"LAD"},{"name":"Lee (London)","latitude":51.44949014,"longitude":0.013345094,"stationOperator":"SE","crsCode":"LEE"},{"name":"Lenham","latitude":51.234481,"longitude":0.70777074,"stationOperator":"SE","crsCode":"LEN"},{"name":"Lewisham","latitude":51.46569471,"longitude":-0.014017114,"stationOperator":"SE","crsCode":"LEW"},{"name":"London Waterloo East","latitude":51.50408038,"longitude":-0.108893287,"stationOperator":"SE","crsCode":"WAE"},{"name":"Longfield","latitude":51.39615545,"longitude":0.300379852,"stationOperator":"SE","crsCode":"LGF"},{"name":"Lower Sydenham","latitude":51.42483262,"longitude":-0.033338978,"stationOperator":"SE","crsCode":"LSY"},{"name":"Maidstone Barracks","latitude":51.27716608,"longitude":0.513966736,"stationOperator":"SE","crsCode":"MDB"},{"name":"Maidstone East","latitude":51.27782671,"longitude":0.521301857,"stationOperator":"SE","crsCode":"MDE"},{"name":"Maidstone West","latitude":51.2704626,"longitude":0.515780027,"stationOperator":"SE","crsCode":"MDW"},{"name":"Marden (Kent)","latitude":51.17516959,"longitude":0.493174606,"stationOperator":"SE","crsCode":"MRN"},{"name":"Margate","latitude":51.38543564,"longitude":1.372020955,"stationOperator":"SE","crsCode":"MAR"},{"name":"Martin Mill","latitude":51.17067872,"longitude":1.348232601,"stationOperator":"SE","crsCode":"MTM"},{"name":"Maze Hill","latitude":51.48293643,"longitude":0.003295611,"stationOperator":"SE","crsCode":"MZH"},{"name":"Meopham","latitude":51.3864239,"longitude":0.356954369,"stationOperator":"SE","crsCode":"MEP"},{"name":"Minster","latitude":51.32917959,"longitude":1.31723234,"stationOperator":"SE","crsCode":"MSR"},{"name":"Mottingham","latitude":51.4398558,"longitude":0.050334368,"stationOperator":"SE","crsCode":"MTG"},{"name":"New Beckenham","latitude":51.41677126,"longitude":-0.035267105,"stationOperator":"SE","crsCode":"NBC"},{"name":"New Cross","latitude":51.47635659,"longitude":-0.032995347,"stationOperator":"SE","crsCode":"NWX"},{"name":"New Eltham","latitude":51.43770471,"longitude":0.070382648,"stationOperator":"SE","crsCode":"NEH"},{"name":"New Hythe","latitude":51.3130007,"longitude":0.454934662,"stationOperator":"SE","crsCode":"NHE"},{"name":"Newington","latitude":51.35334004,"longitude":0.668581912,"stationOperator":"SE","crsCode":"NGT"},{"name":"Northfleet","latitude":51.44584818,"longitude":0.3243358,"stationOperator":"SE","crsCode":"NFL"},{"name":"Nunhead","latitude":51.46697308,"longitude":-0.052692347,"stationOperator":"TL","crsCode":"NHD"},{"name":"Orpington","latitude":51.37352201,"longitude":0.089038526,"stationOperator":"SE","crsCode":"ORP"},{"name":"Otford","latitude":51.31315635,"longitude":0.196790978,"stationOperator":"SE","crsCode":"OTF"},{"name":"Paddock Wood","latitude":51.18226074,"longitude":0.389165396,"stationOperator":"SE","crsCode":"PDW"},{"name":"Penge East","latitude":51.41933448,"longitude":-0.054142784,"stationOperator":"SE","crsCode":"PNE"},{"name":"Petts Wood","latitude":51.38861936,"longitude":0.074490155,"stationOperator":"SE","crsCode":"PET"},{"name":"Pluckley","latitude":51.15647459,"longitude":0.747408729,"stationOperator":"SE","crsCode":"PLC"},{"name":"Plumstead","latitude":51.48979844,"longitude":0.084266668,"stationOperator":"SE","crsCode":"PLU"},{"name":"Queenborough","latitude":51.41563685,"longitude":0.749680178,"stationOperator":"SE","crsCode":"QBR"},{"name":"Rainham (Kent)","latitude":51.36630481,"longitude":0.611346972,"stationOperator":"SE","crsCode":"RAI"},{"name":"Ramsgate","latitude":51.34102927,"longitude":1.406056398,"stationOperator":"SE","crsCode":"RAM"},{"name":"Ravensbourne","latitude":51.41386433,"longitude":-0.006916653,"stationOperator":"TL","crsCode":"RVB"},{"name":"Robertsbridge","latitude":50.98493079,"longitude":0.468786411,"stationOperator":"SE","crsCode":"RBR"},{"name":"Rochester","latitude":51.38554918,"longitude":0.510288532,"stationOperator":"SE","crsCode":"RTR"},{"name":"Sandling","latitude":51.0903696,"longitude":1.066064128,"stationOperator":"SE","crsCode":"SDG"},{"name":"Sandwich","latitude":51.26990727,"longitude":1.342584118,"stationOperator":"SE","crsCode":"SDW"},{"name":"Selling","latitude":51.27735954,"longitude":0.94088939,"stationOperator":"SE","crsCode":"SEG"},{"name":"Sevenoaks","latitude":51.27686256,"longitude":0.18168053,"stationOperator":"SE","crsCode":"SEV"},{"name":"Sheerness-on-Sea","latitude":51.44106166,"longitude":0.758547575,"stationOperator":"SE","crsCode":"SSS"},{"name":"Shepherds Well","latitude":51.18840091,"longitude":1.229922503,"stationOperator":"SE","crsCode":"SPH"},{"name":"Shoreham (Kent)","latitude":51.3322173,"longitude":0.188901812,"stationOperator":"SE","crsCode":"SEH"},{"name":"Shortlands","latitude":51.40560506,"longitude":0.002789316,"stationOperator":"SE","crsCode":"SRT"},{"name":"Sidcup","latitude":51.4344201,"longitude":0.103326599,"stationOperator":"SE","crsCode":"SID"},{"name":"Sittingbourne","latitude":51.34197466,"longitude":0.734697529,"stationOperator":"SE","crsCode":"SIT"},{"name":"Slade Green","latitude":51.46778867,"longitude":0.190504422,"stationOperator":"SE","crsCode":"SGR"},{"name":"Snodland","latitude":51.33022897,"longitude":0.448246314,"stationOperator":"SE","crsCode":"SDA"},{"name":"Snowdown","latitude":51.21530252,"longitude":1.213717174,"stationOperator":"SE","crsCode":"SWO"},{"name":"Sole Street","latitude":51.38314549,"longitude":0.378100359,"stationOperator":"SE","crsCode":"SOR"},{"name":"St Johns (London)","latitude":51.46899802,"longitude":-0.023232814,"stationOperator":"SE","crsCode":"SAJ"},{"name":"St Leonards Warrior Square","latitude":50.8558633,"longitude":0.560522005,"stationOperator":"SE","crsCode":"SLQ"},{"name":"St Mary Cray","latitude":51.39477941,"longitude":0.107257724,"stationOperator":"SE","crsCode":"SMY"},{"name":"Staplehurst","latitude":51.17146994,"longitude":0.550445835,"stationOperator":"SE","crsCode":"SPU"},{"name":"Stone Crossing","latitude":51.45133235,"longitude":0.263786194,"stationOperator":"SE","crsCode":"SCG"},{"name":"Stonegate","latitude":51.01996612,"longitude":0.363883611,"stationOperator":"SE","crsCode":"SOG"},{"name":"Strood (Kent)","latitude":51.39654864,"longitude":0.50019436,"stationOperator":"SE","crsCode":"SOO"},{"name":"Sturry","latitude":51.30107408,"longitude":1.122265331,"stationOperator":"SE","crsCode":"STU"},{"name":"Sundridge Park","latitude":51.4133967,"longitude":0.020387427,"stationOperator":"SE","crsCode":"SUP"},{"name":"Swale","latitude":51.38923548,"longitude":0.747147474,"stationOperator":"SE","crsCode":"SWL"},{"name":"Swanley","latitude":51.39338728,"longitude":0.169237354,"stationOperator":"SE","crsCode":"SAY"},{"name":"Swanscombe","latitude":51.44907248,"longitude":0.309545118,"stationOperator":"SE","crsCode":"SWM"},{"name":"Sydenham Hill","latitude":51.43271634,"longitude":-0.080334335,"stationOperator":"SE","crsCode":"SYH"},{"name":"Teynham","latitude":51.33338995,"longitude":0.807440692,"stationOperator":"SE","crsCode":"TEY"},{"name":"Tonbridge","latitude":51.19143689,"longitude":0.27077344,"stationOperator":"SE","crsCode":"TON"},{"name":"Tunbridge Wells","latitude":51.13022674,"longitude":0.262823237,"stationOperator":"SE","crsCode":"TBW"},{"name":"Wadhurst","latitude":51.07346089,"longitude":0.313187922,"stationOperator":"SE","crsCode":"WAD"},{"name":"Walmer","latitude":51.20332393,"longitude":1.382891124,"stationOperator":"SE","crsCode":"WAM"},{"name":"Wateringbury","latitude":51.24973116,"longitude":0.422470344,"stationOperator":"SE","crsCode":"WTR"},{"name":"Welling","latitude":51.46484348,"longitude":0.101846038,"stationOperator":"SE","crsCode":"WLI"},{"name":"West Dulwich","latitude":51.44062348,"longitude":-0.090938887,"stationOperator":"SE","crsCode":"WDU"},{"name":"West Malling","latitude":51.29201798,"longitude":0.418657268,"stationOperator":"SE","crsCode":"WMA"},{"name":"West St Leonards","latitude":50.85314724,"longitude":0.539940339,"stationOperator":"SE","crsCode":"WLD"},{"name":"West Wickham","latitude":51.38130201,"longitude":-0.014425183,"stationOperator":"SE","crsCode":"WWI"},{"name":"Westcombe Park","latitude":51.48448685,"longitude":0.017767227,"stationOperator":"SE","crsCode":"WCB"},{"name":"Westenhanger","latitude":51.09487937,"longitude":1.037707764,"stationOperator":"SE","crsCode":"WHA"},{"name":"Westgate-on-Sea","latitude":51.38145254,"longitude":1.338378497,"stationOperator":"SE","crsCode":"WGA"},{"name":"Whitstable","latitude":51.35758066,"longitude":1.033302028,"stationOperator":"SE","crsCode":"WHI"},{"name":"Woolwich Arsenal","latitude":51.48987374,"longitude":0.069864616,"stationOperator":"SE","crsCode":"WWA"},{"name":"Woolwich Dockyard","latitude":51.49113057,"longitude":0.05465135,"stationOperator":"SE","crsCode":"WWD"},{"name":"Wye","latitude":51.18501369,"longitude":0.929321854,"stationOperator":"SE","crsCode":"WYE"},{"name":"Yalding","latitude":51.22647911,"longitude":0.412167502,"stationOperator":"SE","crsCode":"YAL"},{"name":"Aldrington","latitude":50.83636472,"longitude":-0.181209698,"stationOperator":"SN","crsCode":"AGT"},{"name":"Amberley","latitude":50.896668,"longitude":-0.541989047,"stationOperator":"SN","crsCode":"AMY"},{"name":"Angmering","latitude":50.8165699,"longitude":-0.4893894,"stationOperator":"SN","crsCode":"ANG"},{"name":"Appledore (Kent)","latitude":51.0332352,"longitude":0.816355536,"stationOperator":"SN","crsCode":"APD"},{"name":"Arundel","latitude":50.84820145,"longitude":-0.546171346,"stationOperator":"SN","crsCode":"ARU"},{"name":"Ashtead","latitude":51.31788158,"longitude":-0.308147338,"stationOperator":"SN","crsCode":"AHD"},{"name":"Ashurst (Kent)","latitude":51.12865582,"longitude":0.152661963,"stationOperator":"SN","crsCode":"AHS"},{"name":"Balcombe","latitude":51.05551334,"longitude":-0.136932431,"stationOperator":"SN","crsCode":"BAB"},{"name":"Balham","latitude":51.44322754,"longitude":-0.152421221,"stationOperator":"SN","crsCode":"BAL"},{"name":"Banstead","latitude":51.32934844,"longitude":-0.213158063,"stationOperator":"SN","crsCode":"BAD"},{"name":"Barnham","latitude":50.83089289,"longitude":-0.639679689,"stationOperator":"SN","crsCode":"BAA"},{"name":"Battersea Park","latitude":51.47733308,"longitude":-0.148162967,"stationOperator":"SN","crsCode":"BAK"},{"name":"Belmont","latitude":51.34413926,"longitude":-0.199487206,"stationOperator":"SN","crsCode":"BLM"},{"name":"Berwick (Sussex)","latitude":50.84037214,"longitude":0.166026428,"stationOperator":"SN","crsCode":"BRK"},{"name":"Bexhill","latitude":50.84103549,"longitude":0.477034087,"stationOperator":"SN","crsCode":"BEX"},{"name":"Billingshurst","latitude":51.01519557,"longitude":-0.450295608,"stationOperator":"SN","crsCode":"BIG"},{"name":"Birkbeck","latitude":51.40390126,"longitude":-0.056235874,"stationOperator":"SN","crsCode":"BIK"},{"name":"Bishopstone (Sussex)","latitude":50.78013589,"longitude":0.082763046,"stationOperator":"SN","crsCode":"BIP"},{"name":"Bognor Regis","latitude":50.78655324,"longitude":-0.676179036,"stationOperator":"SN","crsCode":"BOG"},{"name":"Bosham","latitude":50.8427348,"longitude":-0.847436637,"stationOperator":"SN","crsCode":"BOH"},{"name":"Box Hill & Westhumble","latitude":51.25400939,"longitude":-0.328478447,"stationOperator":"SN","crsCode":"BXW"},{"name":"Brighton (East Sussex)","latitude":50.82895322,"longitude":-0.141225193,"stationOperator":"SN","crsCode":"BTN"},{"name":"Burgess Hill","latitude":50.95361465,"longitude":-0.127769062,"stationOperator":"SN","crsCode":"BUG"},{"name":"Buxted","latitude":50.99001094,"longitude":0.131447718,"stationOperator":"SN","crsCode":"BXD"},{"name":"Carshalton","latitude":51.3684549,"longitude":-0.166366115,"stationOperator":"SN","crsCode":"CSH"},{"name":"Carshalton Beeches","latitude":51.35741124,"longitude":-0.169794788,"stationOperator":"SN","crsCode":"CSB"},{"name":"Caterham","latitude":51.28213943,"longitude":-0.078302765,"stationOperator":"SN","crsCode":"CAT"},{"name":"Cheam","latitude":51.35547926,"longitude":-0.214166523,"stationOperator":"SN","crsCode":"CHE"},{"name":"Chichester","latitude":50.83204016,"longitude":-0.781752603,"stationOperator":"SN","crsCode":"CCH"},{"name":"Chipstead","latitude":51.30932005,"longitude":-0.169427771,"stationOperator":"SN","crsCode":"CHP"},{"name":"Christs Hospital","latitude":51.0506779,"longitude":-0.363547086,"stationOperator":"SN","crsCode":"CHH"},{"name":"Collington","latitude":50.8392821,"longitude":0.457878337,"stationOperator":"SN","crsCode":"CLL"},{"name":"Cooden Beach","latitude":50.83336546,"longitude":0.426874784,"stationOperator":"SN","crsCode":"COB"},{"name":"Cooksbridge","latitude":50.90375256,"longitude":-0.009198424,"stationOperator":"SN","crsCode":"CBR"},{"name":"Coulsdon South","latitude":51.31583718,"longitude":-0.137884398,"stationOperator":"SN","crsCode":"CDS"},{"name":"Coulsdon Town","latitude":51.322434,"longitude":-0.13432,"stationOperator":"SN","crsCode":"CDN"},{"name":"Cowden (Kent)","latitude":51.15563114,"longitude":0.110041555,"stationOperator":"SN","crsCode":"CWN"},{"name":"Crawley","latitude":51.1122072,"longitude":-0.186672649,"stationOperator":"SN","crsCode":"CRW"},{"name":"Crowborough","latitude":51.04638117,"longitude":0.188023149,"stationOperator":"SN","crsCode":"COH"},{"name":"Doleham","latitude":50.9187472,"longitude":0.610702875,"stationOperator":"SN","crsCode":"DLH"},{"name":"Dorking (Main)","latitude":51.240927,"longitude":-0.32423924,"stationOperator":"SN","crsCode":"DKG"},{"name":"Dormans","latitude":51.15578598,"longitude":-0.004302625,"stationOperator":"SN","crsCode":"DMS"},{"name":"Durrington-on-Sea","latitude":50.81752228,"longitude":-0.411461916,"stationOperator":"SN","crsCode":"DUR"},{"name":"Earlswood (Surrey)","latitude":51.22732507,"longitude":-0.170821639,"stationOperator":"SN","crsCode":"ELD"},{"name":"East Croydon","latitude":51.37500564,"longitude":-0.092276539,"stationOperator":"SN","crsCode":"ECR"},{"name":"East Dulwich","latitude":51.46132011,"longitude":-0.080717696,"stationOperator":"SN","crsCode":"EDW"},{"name":"East Grinstead","latitude":51.12626697,"longitude":-0.017895018,"stationOperator":"SN","crsCode":"EGR"},{"name":"East Worthing","latitude":50.82163957,"longitude":-0.354885361,"stationOperator":"SN","crsCode":"EWR"},{"name":"Eastbourne","latitude":50.76936955,"longitude":0.281258504,"stationOperator":"SN","crsCode":"EBN"},{"name":"Edenbridge","latitude":51.20843113,"longitude":0.060654046,"stationOperator":"SN","crsCode":"EBR"},{"name":"Edenbridge Town","latitude":51.20007799,"longitude":0.067180931,"stationOperator":"SN","crsCode":"EBT"},{"name":"Emsworth","latitude":50.85138028,"longitude":-0.93878361,"stationOperator":"SN","crsCode":"EMS"},{"name":"Epsom (Surrey)","latitude":51.3343926,"longitude":-0.268778341,"stationOperator":"SN","crsCode":"EPS"},{"name":"Epsom Downs","latitude":51.323687,"longitude":-0.238954739,"stationOperator":"SN","crsCode":"EPD"},{"name":"Eridge","latitude":51.08895742,"longitude":0.201442672,"stationOperator":"SN","crsCode":"ERI"},{"name":"Ewell East","latitude":51.34529966,"longitude":-0.241529469,"stationOperator":"SN","crsCode":"EWE"},{"name":"Falmer","latitude":50.86212415,"longitude":-0.087383616,"stationOperator":"SN","crsCode":"FMR"},{"name":"Faygate","latitude":51.09588376,"longitude":-0.26302061,"stationOperator":"SN","crsCode":"FGT"},{"name":"Fishbourne (Sussex)","latitude":50.83903838,"longitude":-0.815088781,"stationOperator":"SN","crsCode":"FSB"},{"name":"Fishersgate","latitude":50.83422898,"longitude":-0.219411,"stationOperator":"SN","crsCode":"FSG"},{"name":"Ford","latitude":50.82956237,"longitude":-0.578615542,"stationOperator":"SN","crsCode":"FOD"},{"name":"Gatwick Airport","latitude":51.15648532,"longitude":-0.161040264,"stationOperator":"SN","crsCode":"GTW"},{"name":"Gipsy Hill","latitude":51.42445509,"longitude":-0.083830832,"stationOperator":"SN","crsCode":"GIP"},{"name":"Glynde","latitude":50.85916668,"longitude":0.07008355,"stationOperator":"SN","crsCode":"GLY"},{"name":"Godstone","latitude":51.21815351,"longitude":-0.050080252,"stationOperator":"SN","crsCode":"GDN"},{"name":"Goring-by-Sea","latitude":50.8177157,"longitude":-0.433076924,"stationOperator":"SN","crsCode":"GBS"},{"name":"Hackbridge","latitude":51.37787262,"longitude":-0.153904728,"stationOperator":"SN","crsCode":"HCB"},{"name":"Ham Street","latitude":51.0683774,"longitude":0.854521617,"stationOperator":"SN","crsCode":"HMT"},{"name":"Hampden Park (Sussex)","latitude":50.79639828,"longitude":0.27936748,"stationOperator":"SN","crsCode":"HMD"},{"name":"Hassocks","latitude":50.92461282,"longitude":-0.145952423,"stationOperator":"SN","crsCode":"HSK"},{"name":"Haywards Heath","latitude":51.00525294,"longitude":-0.105306765,"stationOperator":"SN","crsCode":"HHE"},{"name":"Hever","latitude":51.18140581,"longitude":0.0950779,"stationOperator":"SN","crsCode":"HEV"},{"name":"Holmwood","latitude":51.18099754,"longitude":-0.321090928,"stationOperator":"SN","crsCode":"HLM"},{"name":"Horley","latitude":51.16877025,"longitude":-0.161052239,"stationOperator":"SN","crsCode":"HOR"},{"name":"Horsham","latitude":51.06605718,"longitude":-0.319258917,"stationOperator":"SN","crsCode":"HRH"},{"name":"Hove","latitude":50.8352109,"longitude":-0.170687991,"stationOperator":"SN","crsCode":"HOV"},{"name":"Hurst Green","latitude":51.24442735,"longitude":0.003945749,"stationOperator":"SN","crsCode":"HUR"},{"name":"Ifield","latitude":51.11561646,"longitude":-0.214772632,"stationOperator":"SN","crsCode":"IFI"},{"name":"Kenley","latitude":51.32460105,"longitude":-0.101215735,"stationOperator":"SN","crsCode":"KLY"},{"name":"Kingswood","latitude":51.29486144,"longitude":-0.211456639,"stationOperator":"SN","crsCode":"KND"},{"name":"Lancing","latitude":50.82707775,"longitude":-0.323099956,"stationOperator":"SN","crsCode":"LAC"},{"name":"Leatherhead","latitude":51.29875147,"longitude":-0.333064888,"stationOperator":"SN","crsCode":"LHD"},{"name":"Leigh (Kent)","latitude":51.19389559,"longitude":0.210506799,"stationOperator":"SN","crsCode":"LIH"},{"name":"Lewes","latitude":50.87062711,"longitude":0.011335211,"stationOperator":"SN","crsCode":"LWS"},{"name":"Lingfield","latitude":51.17644755,"longitude":-0.007158941,"stationOperator":"SN","crsCode":"LFD"},{"name":"Littlehampton","latitude":50.81010344,"longitude":-0.545991819,"stationOperator":"SN","crsCode":"LIT"},{"name":"Littlehaven","latitude":51.0797438,"longitude":-0.307969555,"stationOperator":"SN","crsCode":"LVN"},{"name":"London Road (Brighton)","latitude":50.83665742,"longitude":-0.136501977,"stationOperator":"SN","crsCode":"LRB"},{"name":"Merstham","latitude":51.26415181,"longitude":-0.150223451,"stationOperator":"SN","crsCode":"MHM"},{"name":"Mitcham Eastfields","latitude":51.40840457,"longitude":-0.15396924,"stationOperator":"SN","crsCode":"MTC"},{"name":"Mitcham Junction","latitude":51.39294461,"longitude":-0.157322869,"stationOperator":"SN","crsCode":"MIJ"},{"name":"Moulsecoomb","latitude":50.84671673,"longitude":-0.118840894,"stationOperator":"SN","crsCode":"MCB"},{"name":"Newhaven Harbour","latitude":50.78978441,"longitude":0.054998379,"stationOperator":"SN","crsCode":"NVH"},{"name":"Newhaven Town","latitude":50.79484885,"longitude":0.054950925,"stationOperator":"SN","crsCode":"NVN"},{"name":"Norbury","latitude":51.41144749,"longitude":-0.121922189,"stationOperator":"SN","crsCode":"NRB"},{"name":"Normans Bay","latitude":50.82609675,"longitude":0.389476518,"stationOperator":"SN","crsCode":"NSB"},{"name":"North Dulwich","latitude":51.45451316,"longitude":-0.087912394,"stationOperator":"SN","crsCode":"NDL"},{"name":"Nutbourne","latitude":50.8460569,"longitude":-0.882951949,"stationOperator":"SN","crsCode":"NUT"},{"name":"Nutfield","latitude":51.22686567,"longitude":-0.133758333,"stationOperator":"SN","crsCode":"NUF"},{"name":"Ockley","latitude":51.15150662,"longitude":-0.336003059,"stationOperator":"SN","crsCode":"OLY"},{"name":"Ore","latitude":50.86694236,"longitude":0.591574525,"stationOperator":"SN","crsCode":"ORE"},{"name":"Oxted","latitude":51.25790506,"longitude":-0.004812996,"stationOperator":"SN","crsCode":"OXT"},{"name":"Peckham Rye","latitude":51.47003714,"longitude":-0.069394247,"stationOperator":"SN","crsCode":"PMR"},{"name":"Penshurst","latitude":51.19733253,"longitude":0.173483045,"stationOperator":"SN","crsCode":"PHR"},{"name":"Pevensey & Westham","latitude":50.81579197,"longitude":0.324820485,"stationOperator":"SN","crsCode":"PEV"},{"name":"Pevensey Bay","latitude":50.81745345,"longitude":0.342920162,"stationOperator":"SN","crsCode":"PEB"},{"name":"Plumpton","latitude":50.9286601,"longitude":-0.060178055,"stationOperator":"SN","crsCode":"PMP"},{"name":"Polegate","latitude":50.82121828,"longitude":0.245732124,"stationOperator":"SN","crsCode":"PLG"},{"name":"Portslade","latitude":50.83567693,"longitude":-0.205323859,"stationOperator":"SN","crsCode":"PLD"},{"name":"Preston Park","latitude":50.84593878,"longitude":-0.155167744,"stationOperator":"SN","crsCode":"PRP"},{"name":"Pulborough","latitude":50.95734852,"longitude":-0.516553376,"stationOperator":"SN","crsCode":"PUL"},{"name":"Purley","latitude":51.33739162,"longitude":-0.113608701,"stationOperator":"SN","crsCode":"PUR"},{"name":"Purley Oaks","latitude":51.34704533,"longitude":-0.098851969,"stationOperator":"SN","crsCode":"PUO"},{"name":"Queens Road (Peckham)","latitude":51.47406855,"longitude":-0.057574233,"stationOperator":"SN","crsCode":"QRP"},{"name":"Redhill","latitude":51.24019809,"longitude":-0.165898311,"stationOperator":"SN","crsCode":"RDH"},{"name":"Reedham (Surrey)","latitude":51.33216069,"longitude":-0.12387235,"stationOperator":"SN","crsCode":"RHM"},{"name":"Reigate","latitude":51.24195549,"longitude":-0.203824541,"stationOperator":"SN","crsCode":"REI"},{"name":"Riddlesdown","latitude":51.33266611,"longitude":-0.099446924,"stationOperator":"SN","crsCode":"RDD"},{"name":"Rye (Sussex)","latitude":50.95236602,"longitude":0.730706155,"stationOperator":"SN","crsCode":"RYE"},{"name":"Salfords (Surrey)","latitude":51.20174387,"longitude":-0.162487674,"stationOperator":"SN","crsCode":"SAF"},{"name":"Sanderstead","latitude":51.34828313,"longitude":-0.093673971,"stationOperator":"SN","crsCode":"SNR"},{"name":"Seaford (Sussex)","latitude":50.77283582,"longitude":0.100140227,"stationOperator":"SN","crsCode":"SEF"},{"name":"Selhurst","latitude":51.39169797,"longitude":-0.087945474,"stationOperator":"SN","crsCode":"SRS"},{"name":"Shoreham-by-Sea","latitude":50.83442192,"longitude":-0.271709718,"stationOperator":"SN","crsCode":"SSE"},{"name":"South Bermondsey","latitude":51.48813928,"longitude":-0.054671432,"stationOperator":"SN","crsCode":"SBM"},{"name":"South Croydon","latitude":51.36296514,"longitude":-0.093452155,"stationOperator":"SN","crsCode":"SCY"},{"name":"Southbourne","latitude":50.84826453,"longitude":-0.90811384,"stationOperator":"SN","crsCode":"SOB"},{"name":"Southease","latitude":50.83134913,"longitude":0.030650137,"stationOperator":"SN","crsCode":"SEE"},{"name":"Southwick","latitude":50.83248265,"longitude":-0.237073077,"stationOperator":"SN","crsCode":"SWK"},{"name":"Streatham (Greater London)","latitude":51.42581015,"longitude":-0.131546583,"stationOperator":"SN","crsCode":"STE"},{"name":"Streatham Common","latitude":51.41868917,"longitude":-0.136151833,"stationOperator":"SN","crsCode":"SRC"},{"name":"Streatham Hill","latitude":51.4383461,"longitude":-0.128157209,"stationOperator":"SN","crsCode":"SRH"},{"name":"Sutton (Surrey)","latitude":51.35953356,"longitude":-0.191213151,"stationOperator":"SN","crsCode":"SUO"},{"name":"Tadworth","latitude":51.29163611,"longitude":-0.23596467,"stationOperator":"SN","crsCode":"TAD"},{"name":"Tattenham Corner","latitude":51.30918237,"longitude":-0.242609371,"stationOperator":"SN","crsCode":"TAT"},{"name":"Thornton Heath","latitude":51.3992396,"longitude":-0.101001212,"stationOperator":"SN","crsCode":"TTH"},{"name":"Three Bridges","latitude":51.11691722,"longitude":-0.161183058,"stationOperator":"SN","crsCode":"TBD"},{"name":"Three Oaks","latitude":50.90088723,"longitude":0.61337309,"stationOperator":"SN","crsCode":"TOK"},{"name":"Tulse Hill","latitude":51.43977376,"longitude":-0.105075902,"stationOperator":"SN","crsCode":"TUH"},{"name":"Uckfield","latitude":50.96867258,"longitude":0.096456894,"stationOperator":"SN","crsCode":"UCK"},{"name":"Upper Warlingham","latitude":51.30851045,"longitude":-0.077947217,"stationOperator":"SN","crsCode":"UWL"},{"name":"Waddon","latitude":51.36739826,"longitude":-0.117332121,"stationOperator":"SN","crsCode":"WDO"},{"name":"Wallington","latitude":51.3603868,"longitude":-0.150830146,"stationOperator":"SN","crsCode":"WLT"},{"name":"Wandsworth Common","latitude":51.4461876,"longitude":-0.163383008,"stationOperator":"SN","crsCode":"WSW"},{"name":"Warblington","latitude":50.8534334,"longitude":-0.967150888,"stationOperator":"SN","crsCode":"WBL"},{"name":"Warnham","latitude":51.09289508,"longitude":-0.329453706,"stationOperator":"SN","crsCode":"WNH"},{"name":"West Norwood","latitude":51.43180353,"longitude":-0.103808815,"stationOperator":"SN","crsCode":"WNW"},{"name":"West Worthing","latitude":50.81834832,"longitude":-0.392977891,"stationOperator":"SN","crsCode":"WWO"},{"name":"Whyteleafe","latitude":51.30995682,"longitude":-0.081143929,"stationOperator":"SN","crsCode":"WHY"},{"name":"Whyteleafe South","latitude":51.3035526,"longitude":-0.076691014,"stationOperator":"SN","crsCode":"WHS"},{"name":"Winchelsea","latitude":50.93376133,"longitude":0.702271814,"stationOperator":"SN","crsCode":"WSE"},{"name":"Wivelsfield","latitude":50.96378293,"longitude":-0.120837577,"stationOperator":"SN","crsCode":"WVF"},{"name":"Woldingham","latitude":51.29015597,"longitude":-0.051864564,"stationOperator":"SN","crsCode":"WOH"},{"name":"Woodmansterne","latitude":51.3190192,"longitude":-0.154259672,"stationOperator":"SN","crsCode":"WME"},{"name":"Worthing","latitude":50.8184932,"longitude":-0.376163686,"stationOperator":"SN","crsCode":"WRH"},{"name":"Aberdeen","latitude":57.14304825,"longitude":-2.097480496,"stationOperator":"SR","crsCode":"ABD"},{"name":"Aberdour","latitude":56.05458044,"longitude":-3.300556443,"stationOperator":"SR","crsCode":"AUR"},{"name":"Achanalt","latitude":57.60981331,"longitude":-4.914216676,"stationOperator":"SR","crsCode":"AAT"},{"name":"Achnasheen","latitude":57.57910082,"longitude":-5.072367544,"stationOperator":"SR","crsCode":"ACN"},{"name":"Achnashellach","latitude":57.4820548,"longitude":-5.33306294,"stationOperator":"SR","crsCode":"ACH"},{"name":"Addiewell","latitude":55.84340123,"longitude":-3.606517263,"stationOperator":"SR","crsCode":"ADW"},{"name":"Airbles","latitude":55.78282474,"longitude":-3.994178739,"stationOperator":"SR","crsCode":"AIR"},{"name":"Airdrie","latitude":55.86397274,"longitude":-3.982897473,"stationOperator":"SR","crsCode":"ADR"},{"name":"Alexandra Parade","latitude":55.86366362,"longitude":-4.211419355,"stationOperator":"SR","crsCode":"AXP"},{"name":"Alexandria","latitude":55.98507321,"longitude":-4.577469118,"stationOperator":"SR","crsCode":"ALX"},{"name":"Alloa","latitude":56.11778079,"longitude":-3.79004938,"stationOperator":"SR","crsCode":"ALO"},{"name":"Alness","latitude":57.69437787,"longitude":-4.249725543,"stationOperator":"SR","crsCode":"ASS"},{"name":"Altnabreac","latitude":58.38832585,"longitude":-3.705268158,"stationOperator":"SR","crsCode":"ABC"},{"name":"Anderston","latitude":55.85986476,"longitude":-4.271929947,"stationOperator":"SR","crsCode":"AND"},{"name":"Annan","latitude":54.98383786,"longitude":-3.262584309,"stationOperator":"SR","crsCode":"ANN"},{"name":"Anniesland","latitude":55.88949536,"longitude":-4.321640769,"stationOperator":"SR","crsCode":"ANL"},{"name":"Arbroath","latitude":56.55956606,"longitude":-2.5889364,"stationOperator":"SR","crsCode":"ARB"},{"name":"Ardgay","latitude":57.88101054,"longitude":-4.362578076,"stationOperator":"SR","crsCode":"ARD"},{"name":"Ardlui","latitude":56.3019481,"longitude":-4.721642823,"stationOperator":"SR","crsCode":"AUI"},{"name":"Ardrossan Harbour","latitude":55.63986185,"longitude":-4.821105156,"stationOperator":"SR","crsCode":"ADS"},{"name":"Ardrossan South Beach","latitude":55.6414058,"longitude":-4.801205601,"stationOperator":"SR","crsCode":"ASB"},{"name":"Ardrossan Town","latitude":55.63969607,"longitude":-4.812669742,"stationOperator":"SR","crsCode":"ADN"},{"name":"Argyle Street","latitude":55.85730754,"longitude":-4.250671495,"stationOperator":"SR","crsCode":"AGS"},{"name":"Arisaig","latitude":56.9125214,"longitude":-5.839071397,"stationOperator":"SR","crsCode":"ARG"},{"name":"Armadale (West Lothian)","latitude":55.88639,"longitude":-3.685049,"stationOperator":"SR","crsCode":"ARM"},{"name":"Arrochar & Tarbet","latitude":56.2039585,"longitude":-4.722756857,"stationOperator":"SR","crsCode":"ART"},{"name":"Ashfield","latitude":55.88890808,"longitude":-4.249206392,"stationOperator":"SR","crsCode":"ASF"},{"name":"Attadale","latitude":57.39476556,"longitude":-5.456481075,"stationOperator":"SR","crsCode":"ATT"},{"name":"Auchinleck","latitude":55.47026554,"longitude":-4.295346631,"stationOperator":"SR","crsCode":"AUK"},{"name":"Aviemore","latitude":57.18905401,"longitude":-3.828333974,"stationOperator":"SR","crsCode":"AVM"},{"name":"Ayr","latitude":55.45820439,"longitude":-4.626820483,"stationOperator":"SR","crsCode":"AYR"},{"name":"Baillieston","latitude":55.84470543,"longitude":-4.114497793,"stationOperator":"SR","crsCode":"BIO"},{"name":"Balloch","latitude":56.00291529,"longitude":-4.583469732,"stationOperator":"SR","crsCode":"BHC"},{"name":"Balmossie","latitude":56.47455611,"longitude":-2.838952177,"stationOperator":"SR","crsCode":"BSI"},{"name":"Banavie","latitude":56.84328828,"longitude":-5.095416228,"stationOperator":"SR","crsCode":"BNV"},{"name":"Barassie","latitude":55.5610457,"longitude":-4.651129008,"stationOperator":"SR","crsCode":"BSS"},{"name":"Bargeddie","latitude":55.8517241,"longitude":-4.071741852,"stationOperator":"SR","crsCode":"BGI"},{"name":"Barnhill","latitude":55.87782761,"longitude":-4.223416311,"stationOperator":"SR","crsCode":"BNL"},{"name":"Barrhead","latitude":55.80373712,"longitude":-4.397280292,"stationOperator":"SR","crsCode":"BRR"},{"name":"Barrhill","latitude":55.0969965,"longitude":-4.781779564,"stationOperator":"SR","crsCode":"BRL"},{"name":"Barry Links","latitude":56.49313971,"longitude":-2.745435354,"stationOperator":"SR","crsCode":"BYL"},{"name":"Bathgate","latitude":55.89911208,"longitude":-3.640968553,"stationOperator":"SR","crsCode":"BHG"},{"name":"Bearsden","latitude":55.91714482,"longitude":-4.332896496,"stationOperator":"SR","crsCode":"BRN"},{"name":"Beasdale","latitude":56.8995283,"longitude":-5.763793188,"stationOperator":"SR","crsCode":"BSL"},{"name":"Beauly","latitude":57.47820537,"longitude":-4.469945682,"stationOperator":"SR","crsCode":"BEL"},{"name":"Bellgrove","latitude":55.85711966,"longitude":-4.225428982,"stationOperator":"SR","crsCode":"BLG"},{"name":"Bellshill","latitude":55.81655045,"longitude":-4.025178029,"stationOperator":"SR","crsCode":"BLH"},{"name":"Bishopbriggs","latitude":55.90386474,"longitude":-4.224906239,"stationOperator":"SR","crsCode":"BBG"},{"name":"Bishopton (Strathclyde)","latitude":55.9021483,"longitude":-4.50156706,"stationOperator":"SR","crsCode":"BPT"},{"name":"Blackridge","latitude":55.883679,"longitude":-3.750483,"stationOperator":"SR","crsCode":"BKR"},{"name":"Blair Atholl","latitude":56.7655294,"longitude":-3.850217553,"stationOperator":"SR","crsCode":"BLA"},{"name":"Blairhill","latitude":55.86658923,"longitude":-4.042166208,"stationOperator":"SR","crsCode":"BAI"},{"name":"Blantyre","latitude":55.79755181,"longitude":-4.086413678,"stationOperator":"SR","crsCode":"BLT"},{"name":"Bogston","latitude":55.93703054,"longitude":-4.711389983,"stationOperator":"SR","crsCode":"BGS"},{"name":"Bowling","latitude":55.93106773,"longitude":-4.493824427,"stationOperator":"SR","crsCode":"BWG"},{"name":"Branchton","latitude":55.94058491,"longitude":-4.803539699,"stationOperator":"SR","crsCode":"BCN"},{"name":"Breich","latitude":55.82730421,"longitude":-3.668117841,"stationOperator":"SR","crsCode":"BRC"},{"name":"Bridge of Allan","latitude":56.15661923,"longitude":-3.957226282,"stationOperator":"SR","crsCode":"BEA"},{"name":"Bridge of Orchy","latitude":56.51584582,"longitude":-4.762977191,"stationOperator":"SR","crsCode":"BRO"},{"name":"Bridgeton","latitude":55.84892913,"longitude":-4.22607907,"stationOperator":"SR","crsCode":"BDG"},{"name":"Brora","latitude":58.01293309,"longitude":-3.852295093,"stationOperator":"SR","crsCode":"BRA"},{"name":"Broughty Ferry","latitude":56.4671506,"longitude":-2.873149715,"stationOperator":"SR","crsCode":"BYF"},{"name":"Brunstane","latitude":55.94250459,"longitude":-3.100977841,"stationOperator":"SR","crsCode":"BSU"},{"name":"Burnside (Strathclyde)","latitude":55.81707035,"longitude":-4.203986164,"stationOperator":"SR","crsCode":"BUI"},{"name":"Burntisland","latitude":56.05706911,"longitude":-3.233192254,"stationOperator":"SR","crsCode":"BTS"},{"name":"Busby","latitude":55.78033154,"longitude":-4.262194654,"stationOperator":"SR","crsCode":"BUS"},{"name":"Caldercruix","latitude":55.88791,"longitude":-3.889788,"stationOperator":"SR","crsCode":"CAC"},{"name":"Cambuslang","latitude":55.81959915,"longitude":-4.172999527,"stationOperator":"SR","crsCode":"CBL"},{"name":"Camelon","latitude":56.00608001,"longitude":-3.817600468,"stationOperator":"SR","crsCode":"CMO"},{"name":"Cardenden","latitude":56.14124635,"longitude":-3.261636609,"stationOperator":"SR","crsCode":"CDD"},{"name":"Cardonald","latitude":55.85255382,"longitude":-4.340687563,"stationOperator":"SR","crsCode":"CDO"},{"name":"Cardross","latitude":55.96036817,"longitude":-4.653060397,"stationOperator":"SR","crsCode":"CDR"},{"name":"Carfin","latitude":55.80733107,"longitude":-3.95625467,"stationOperator":"SR","crsCode":"CRF"},{"name":"Carluke","latitude":55.73125448,"longitude":-3.848923307,"stationOperator":"SR","crsCode":"CLU"},{"name":"Carmyle","latitude":55.83433026,"longitude":-4.15817078,"stationOperator":"SR","crsCode":"CML"},{"name":"Carnoustie","latitude":56.50055432,"longitude":-2.706592848,"stationOperator":"SR","crsCode":"CAN"},{"name":"Carntyne","latitude":55.85503598,"longitude":-4.178652587,"stationOperator":"SR","crsCode":"CAY"},{"name":"Carrbridge","latitude":57.27953805,"longitude":-3.828007433,"stationOperator":"SR","crsCode":"CAG"},{"name":"Carstairs","latitude":55.69103438,"longitude":-3.668466894,"stationOperator":"SR","crsCode":"CRS"},{"name":"Cartsdyke","latitude":55.94220229,"longitude":-4.731580258,"stationOperator":"SR","crsCode":"CDY"},{"name":"Cathcart","latitude":55.81766156,"longitude":-4.260529674,"stationOperator":"SR","crsCode":"CCT"},{"name":"Charing Cross (Glasgow)","latitude":55.86466734,"longitude":-4.269812977,"stationOperator":"SR","crsCode":"CHC"},{"name":"Chatelherault","latitude":55.76520989,"longitude":-4.004661095,"stationOperator":"SR","crsCode":"CTE"},{"name":"Clarkston","latitude":55.78934082,"longitude":-4.27563799,"stationOperator":"SR","crsCode":"CKS"},{"name":"Cleland","latitude":55.80463945,"longitude":-3.910243709,"stationOperator":"SR","crsCode":"CEA"},{"name":"Clydebank","latitude":55.90067284,"longitude":-4.404218143,"stationOperator":"SR","crsCode":"CYK"},{"name":"Coatbridge Central","latitude":55.86315609,"longitude":-4.032397297,"stationOperator":"SR","crsCode":"CBC"},{"name":"Coatbridge Sunnyside","latitude":55.86690882,"longitude":-4.028277989,"stationOperator":"SR","crsCode":"CBS"},{"name":"Coatdyke","latitude":55.86433402,"longitude":-4.004970414,"stationOperator":"SR","crsCode":"COA"},{"name":"Connel Ferry","latitude":56.45233144,"longitude":-5.385427005,"stationOperator":"SR","crsCode":"CON"},{"name":"Conon Bridge","latitude":57.5617,"longitude":-4.4404,"stationOperator":"SR","crsCode":"CBD"},{"name":"Corkerhill","latitude":55.83748586,"longitude":-4.334287526,"stationOperator":"SR","crsCode":"CKH"},{"name":"Corpach","latitude":56.84280695,"longitude":-5.121947882,"stationOperator":"SR","crsCode":"CPA"},{"name":"Corrour","latitude":56.76019896,"longitude":-4.690597107,"stationOperator":"SR","crsCode":"CRR"},{"name":"Cowdenbeath","latitude":56.11208188,"longitude":-3.343182977,"stationOperator":"SR","crsCode":"COW"},{"name":"Craigendoran","latitude":55.9947777,"longitude":-4.711231697,"stationOperator":"SR","crsCode":"CGD"},{"name":"Crianlarich","latitude":56.39046001,"longitude":-4.618415436,"stationOperator":"SR","crsCode":"CNR"},{"name":"Croftfoot","latitude":55.81824958,"longitude":-4.22831733,"stationOperator":"SR","crsCode":"CFF"},{"name":"Crookston","latitude":55.84218387,"longitude":-4.365941786,"stationOperator":"SR","crsCode":"CKT"},{"name":"Crosshill","latitude":55.83326984,"longitude":-4.256804153,"stationOperator":"SR","crsCode":"COI"},{"name":"Crossmyloof","latitude":55.83393038,"longitude":-4.284311038,"stationOperator":"SR","crsCode":"CMY"},{"name":"Croy","latitude":55.95566505,"longitude":-4.035961758,"stationOperator":"SR","crsCode":"CRO"},{"name":"Culrain","latitude":57.91949459,"longitude":-4.404282053,"stationOperator":"SR","crsCode":"CUA"},{"name":"Cumbernauld","latitude":55.94201304,"longitude":-3.980318658,"stationOperator":"SR","crsCode":"CUB"},{"name":"Cupar","latitude":56.31697353,"longitude":-3.008758431,"stationOperator":"SR","crsCode":"CUP"},{"name":"Curriehill","latitude":55.90055849,"longitude":-3.318749653,"stationOperator":"SR","crsCode":"CUH"},{"name":"Dalgety Bay","latitude":56.0420829,"longitude":-3.367718989,"stationOperator":"SR","crsCode":"DAG"},{"name":"Dalmally","latitude":56.40117417,"longitude":-4.983544174,"stationOperator":"SR","crsCode":"DAL"},{"name":"Dalmarnock","latitude":55.84207011,"longitude":-4.217700309,"stationOperator":"SR","crsCode":"DAK"},{"name":"Dalmeny","latitude":55.98630536,"longitude":-3.381618779,"stationOperator":"SR","crsCode":"DAM"},{"name":"Dalmuir","latitude":55.91191657,"longitude":-4.426678018,"stationOperator":"SR","crsCode":"DMR"},{"name":"Dalreoch","latitude":55.94740397,"longitude":-4.5778481,"stationOperator":"SR","crsCode":"DLR"},{"name":"Dalry","latitude":55.70621143,"longitude":-4.711070842,"stationOperator":"SR","crsCode":"DLY"},{"name":"Dalwhinnie","latitude":56.93515882,"longitude":-4.246197968,"stationOperator":"SR","crsCode":"DLW"},{"name":"Dingwall","latitude":57.59405759,"longitude":-4.42206913,"stationOperator":"SR","crsCode":"DIN"},{"name":"Drem","latitude":56.00511747,"longitude":-2.786046322,"stationOperator":"SR","crsCode":"DRM"},{"name":"Drumchapel","latitude":55.90479898,"longitude":-4.362874204,"stationOperator":"SR","crsCode":"DMC"},{"name":"Drumfrochar","latitude":55.9412369,"longitude":-4.774756808,"stationOperator":"SR","crsCode":"DFR"},{"name":"Drumgelloch","latitude":55.86582675,"longitude":-3.954080399,"stationOperator":"SR","crsCode":"DRU"},{"name":"Drumry","latitude":55.90457891,"longitude":-4.385468258,"stationOperator":"SR","crsCode":"DMY"},{"name":"Duirinish","latitude":57.31938444,"longitude":-5.692009059,"stationOperator":"SR","crsCode":"DRN"},{"name":"Duke Street","latitude":55.85842168,"longitude":-4.213039062,"stationOperator":"SR","crsCode":"DST"},{"name":"Dumbarton Central","latitude":55.94664381,"longitude":-4.566905428,"stationOperator":"SR","crsCode":"DBC"},{"name":"Dumbarton East","latitude":55.94223566,"longitude":-4.554121225,"stationOperator":"SR","crsCode":"DBE"},{"name":"Dumbreck","latitude":55.84501703,"longitude":-4.300936223,"stationOperator":"SR","crsCode":"DUM"},{"name":"Dumfries","latitude":55.07255321,"longitude":-3.604300326,"stationOperator":"SR","crsCode":"DMF"},{"name":"Dunbar","latitude":55.99828768,"longitude":-2.513352988,"stationOperator":"SR","crsCode":"DUN"},{"name":"Dunblane","latitude":56.18587463,"longitude":-3.965483792,"stationOperator":"SR","crsCode":"DBL"},{"name":"Duncraig","latitude":57.33708399,"longitude":-5.63692547,"stationOperator":"SR","crsCode":"DCG"},{"name":"Dundee","latitude":56.45647618,"longitude":-2.971204807,"stationOperator":"SR","crsCode":"DEE"},{"name":"Dunfermline Queen Margaret","latitude":56.08056397,"longitude":-3.421467431,"stationOperator":"SR","crsCode":"DFL"},{"name":"Dunfermline Town","latitude":56.06817924,"longitude":-3.452529288,"stationOperator":"SR","crsCode":"DFE"},{"name":"Dunkeld & Birnam","latitude":56.5570421,"longitude":-3.578399065,"stationOperator":"SR","crsCode":"DKD"},{"name":"Dunlop","latitude":55.71187096,"longitude":-4.532374915,"stationOperator":"SR","crsCode":"DNL"},{"name":"Dunrobin Castle","latitude":57.98559779,"longitude":-3.949447893,"stationOperator":"SR","crsCode":"DNO"},{"name":"Dyce","latitude":57.20564178,"longitude":-2.192327933,"stationOperator":"SR","crsCode":"DYC"},{"name":"East Kilbride","latitude":55.76599496,"longitude":-4.180218692,"stationOperator":"SR","crsCode":"EKL"},{"name":"Easterhouse","latitude":55.85974135,"longitude":-4.107164856,"stationOperator":"SR","crsCode":"EST"},{"name":"Edinburgh Park","latitude":55.92754466,"longitude":-3.307661937,"stationOperator":"SR","crsCode":"EDP"},{"name":"Elgin","latitude":57.6428985,"longitude":-3.311246353,"stationOperator":"SR","crsCode":"ELG"},{"name":"Eskbank","latitude":55.883801,"longitude":-3.0314367,"stationOperator":"SR","crsCode":"EKB"},{"name":"Exhibition Centre (Glasgow)","latitude":55.86153645,"longitude":-4.283582169,"stationOperator":"SR","crsCode":"EXG"},{"name":"Fairlie","latitude":55.75192633,"longitude":-4.853261694,"stationOperator":"SR","crsCode":"FRL"},{"name":"Falkirk Grahamston","latitude":56.0026016,"longitude":-3.785040515,"stationOperator":"SR","crsCode":"FKG"},{"name":"Falkirk High","latitude":55.99180314,"longitude":-3.792238796,"stationOperator":"SR","crsCode":"FKK"},{"name":"Falls of Cruachan","latitude":56.39386845,"longitude":-5.112457321,"stationOperator":"SR","crsCode":"FOC"},{"name":"Fauldhouse","latitude":55.82246535,"longitude":-3.719312799,"stationOperator":"SR","crsCode":"FLD"},{"name":"Fearn","latitude":57.77809525,"longitude":-3.993733544,"stationOperator":"SR","crsCode":"FRN"},{"name":"Forres","latitude":57.60978469,"longitude":-3.625959214,"stationOperator":"SR","crsCode":"FOR"},{"name":"Forsinard","latitude":58.35688312,"longitude":-3.89689083,"stationOperator":"SR","crsCode":"FRS"},{"name":"Fort Matilda","latitude":55.95902085,"longitude":-4.795258693,"stationOperator":"SR","crsCode":"FTM"},{"name":"Fort William","latitude":56.82042348,"longitude":-5.106134421,"stationOperator":"SR","crsCode":"FTW"},{"name":"Galashiels","latitude":-2.8063991,"longitude":55.617786,"stationOperator":"SR","crsCode":"GAL"},{"name":"Garelochhead","latitude":56.07984842,"longitude":-4.825707052,"stationOperator":"SR","crsCode":"GCH"},{"name":"Garrowhill","latitude":55.85522344,"longitude":-4.12944961,"stationOperator":"SR","crsCode":"GAR"},{"name":"Garscadden","latitude":55.88768109,"longitude":-4.365000058,"stationOperator":"SR","crsCode":"GRS"},{"name":"Gartcosh","latitude":55.88564646,"longitude":-4.079481648,"stationOperator":"SR","crsCode":"GRH"},{"name":"Garve","latitude":57.61302353,"longitude":-4.688400522,"stationOperator":"SR","crsCode":"GVE"},{"name":"Georgemas Junction","latitude":58.51361058,"longitude":-3.452134326,"stationOperator":"SR","crsCode":"GGJ"},{"name":"Giffnock","latitude":55.80401725,"longitude":-4.293569377,"stationOperator":"SR","crsCode":"GFN"},{"name":"Gilshochill","latitude":55.89728307,"longitude":-4.282003342,"stationOperator":"SR","crsCode":"GSC"},{"name":"Girvan","latitude":55.2463088,"longitude":-4.848380748,"stationOperator":"SR","crsCode":"GIR"},{"name":"Glasgow Queen Street","latitude":55.86232293,"longitude":-4.250657943,"stationOperator":"SR","crsCode":"GLQ"},{"name":"Gleneagles","latitude":56.27483656,"longitude":-3.731158525,"stationOperator":"SR","crsCode":"GLE"},{"name":"Glenfinnan","latitude":56.87238389,"longitude":-5.449620214,"stationOperator":"SR","crsCode":"GLF"},{"name":"Glengarnock","latitude":55.73887969,"longitude":-4.674491627,"stationOperator":"SR","crsCode":"GLG"},{"name":"Glenrothes with Thornton","latitude":56.16234823,"longitude":-3.143006549,"stationOperator":"SR","crsCode":"GLT"},{"name":"Golf Street","latitude":56.49778468,"longitude":-2.719536374,"stationOperator":"SR","crsCode":"GOF"},{"name":"Golspie","latitude":57.97145203,"longitude":-3.986876414,"stationOperator":"SR","crsCode":"GOL"},{"name":"Gorebridge","latitude":55.839779,"longitude":-3.0474629,"stationOperator":"SR","crsCode":"GBG"},{"name":"Gourock","latitude":55.96229993,"longitude":-4.816648842,"stationOperator":"SR","crsCode":"GRK"},{"name":"Greenfaulds","latitude":55.94532922,"longitude":-4.75262409,"stationOperator":"SR","crsCode":"GRL"},{"name":"Greenock Central","latitude":55.94532922,"longitude":-4.75262409,"stationOperator":"SR","crsCode":"GKC"},{"name":"Greenock West","latitude":55.94732563,"longitude":-4.76782372,"stationOperator":"SR","crsCode":"GKW"},{"name":"Gretna Green","latitude":55.00190839,"longitude":-3.064593507,"stationOperator":"SR","crsCode":"GEA"},{"name":"Hairmyres","latitude":55.76195707,"longitude":-4.220003661,"stationOperator":"SR","crsCode":"HMY"},{"name":"Hamilton Central","latitude":55.77318497,"longitude":-4.038872459,"stationOperator":"SR","crsCode":"HNC"},{"name":"Hamilton West","latitude":55.77895186,"longitude":-4.054163603,"stationOperator":"SR","crsCode":"HNW"},{"name":"Hartwood","latitude":55.81147256,"longitude":-3.839319533,"stationOperator":"SR","crsCode":"HTW"},{"name":"Hawkhead","latitude":55.8421756,"longitude":-4.398847672,"stationOperator":"SR","crsCode":"HKH"},{"name":"Haymarket","latitude":55.945802,"longitude":-3.218444586,"stationOperator":"SR","crsCode":"HYM"},{"name":"Helensburgh Central","latitude":56.00419011,"longitude":-4.732746326,"stationOperator":"SR","crsCode":"HLC"},{"name":"Helensburgh Upper","latitude":56.01234544,"longitude":-4.729792381,"stationOperator":"SR","crsCode":"HLU"},{"name":"Helmsdale","latitude":58.11773408,"longitude":-3.65904757,"stationOperator":"SR","crsCode":"HMS"},{"name":"High Street (Glasgow)","latitude":55.8595495,"longitude":-4.240110183,"stationOperator":"SR","crsCode":"HST"},{"name":"Hillfoot","latitude":55.9200798,"longitude":-4.320268221,"stationOperator":"SR","crsCode":"HLF"},{"name":"Hillington East","latitude":55.85471276,"longitude":-4.354719114,"stationOperator":"SR","crsCode":"HLE"},{"name":"Hillington West","latitude":55.85600676,"longitude":-4.371575959,"stationOperator":"SR","crsCode":"HLW"},{"name":"Holytown","latitude":55.81289048,"longitude":-3.973914426,"stationOperator":"SR","crsCode":"HLY"},{"name":"Howwood (Renfrewshire)","latitude":55.8105493,"longitude":-4.563043704,"stationOperator":"SR","crsCode":"HOZ"},{"name":"Huntly","latitude":57.444314,"longitude":-2.776356684,"stationOperator":"SR","crsCode":"HNT"},{"name":"Hyndland","latitude":55.87974019,"longitude":-4.31466261,"stationOperator":"SR","crsCode":"HYN"},{"name":"IBM Halt","latitude":55.92943602,"longitude":-4.827232334,"stationOperator":"SR","crsCode":"IBM"},{"name":"Insch","latitude":57.3374863,"longitude":-2.617112197,"stationOperator":"SR","crsCode":"INS"},{"name":"Invergordon","latitude":57.68848692,"longitude":-4.175538138,"stationOperator":"SR","crsCode":"IGD"},{"name":"Invergowrie","latitude":56.45646374,"longitude":-3.057400408,"stationOperator":"SR","crsCode":"ING"},{"name":"Inverkeithing","latitude":56.03466521,"longitude":-3.396186138,"stationOperator":"SR","crsCode":"INK"},{"name":"Inverkip","latitude":55.90609286,"longitude":-4.87257992,"stationOperator":"SR","crsCode":"INP"},{"name":"Inverness","latitude":57.48010225,"longitude":-4.223186338,"stationOperator":"SR","crsCode":"INV"},{"name":"Invershin","latitude":57.92488509,"longitude":-4.399575827,"stationOperator":"SR","crsCode":"INH"},{"name":"Inverurie","latitude":57.28626199,"longitude":-2.373553146,"stationOperator":"SR","crsCode":"INR"},{"name":"Irvine","latitude":55.6108626,"longitude":-4.675136283,"stationOperator":"SR","crsCode":"IRV"},{"name":"Johnstone (Strathclyde)","latitude":55.83469425,"longitude":-4.503621119,"stationOperator":"SR","crsCode":"JHN"},{"name":"Jordanhill","latitude":55.8822227,"longitude":-4.326003522,"stationOperator":"SR","crsCode":"JOR"},{"name":"Keith","latitude":57.55089374,"longitude":-2.954076816,"stationOperator":"SR","crsCode":"KEH"},{"name":"Kelvindale","latitude":55.89358274,"longitude":-4.309808848,"stationOperator":"SR","crsCode":"KVD"},{"name":"Kennishead","latitude":55.81304263,"longitude":-4.325066123,"stationOperator":"SR","crsCode":"KNS"},{"name":"Kildonan","latitude":58.17132307,"longitude":-3.869995441,"stationOperator":"SR","crsCode":"KIL"},{"name":"Kilmarnock","latitude":55.61210574,"longitude":-4.498670613,"stationOperator":"SR","crsCode":"KMK"},{"name":"Kilmaurs","latitude":55.63719684,"longitude":-4.53047696,"stationOperator":"SR","crsCode":"KLM"},{"name":"Kilpatrick","latitude":55.92468944,"longitude":-4.453393762,"stationOperator":"SR","crsCode":"KPT"},{"name":"Kilwinning","latitude":55.65594103,"longitude":-4.710010141,"stationOperator":"SR","crsCode":"KWN"},{"name":"Kinbrace","latitude":58.25830535,"longitude":-3.941050618,"stationOperator":"SR","crsCode":"KBC"},{"name":"Kinghorn","latitude":56.06932621,"longitude":-3.17414684,"stationOperator":"SR","crsCode":"KGH"},{"name":"Kings Park","latitude":55.81988233,"longitude":-4.247248478,"stationOperator":"SR","crsCode":"KGP"},{"name":"Kingsknowe","latitude":55.91926752,"longitude":-3.265617893,"stationOperator":"SR","crsCode":"KGE"},{"name":"Kingussie","latitude":57.07776559,"longitude":-4.052184734,"stationOperator":"SR","crsCode":"KIN"},{"name":"Kirkcaldy","latitude":56.11204798,"longitude":-3.1670206,"stationOperator":"SR","crsCode":"KDY"},{"name":"Kirkconnel","latitude":55.38830158,"longitude":-3.998490325,"stationOperator":"SR","crsCode":"KRK"},{"name":"Kirkhill","latitude":55.81410272,"longitude":-4.168702723,"stationOperator":"SR","crsCode":"KKH"},{"name":"Kirknewton","latitude":55.8886839,"longitude":-3.432513177,"stationOperator":"SR","crsCode":"KKN"},{"name":"Kirkwood","latitude":55.85418229,"longitude":-4.048385591,"stationOperator":"SR","crsCode":"KWD"},{"name":"Kyle of Lochalsh","latitude":57.27974817,"longitude":-5.713815801,"stationOperator":"SR","crsCode":"KYL"},{"name":"Ladybank","latitude":56.27377597,"longitude":-3.122265019,"stationOperator":"SR","crsCode":"LDY"},{"name":"Lairg","latitude":58.00159502,"longitude":-4.400985065,"stationOperator":"SR","crsCode":"LRG"},{"name":"Lanark","latitude":55.67307101,"longitude":-3.772865657,"stationOperator":"SR","crsCode":"LNK"},{"name":"Langbank","latitude":55.92450786,"longitude":-4.58526005,"stationOperator":"SR","crsCode":"LGB"},{"name":"Langside","latitude":55.82112633,"longitude":-4.277334114,"stationOperator":"SR","crsCode":"LGS"},{"name":"Larbert","latitude":56.02269305,"longitude":-3.830576234,"stationOperator":"SR","crsCode":"LBT"},{"name":"Largs","latitude":55.79272838,"longitude":-4.867191898,"stationOperator":"SR","crsCode":"LAR"},{"name":"Larkhall","latitude":55.73858564,"longitude":-3.975497722,"stationOperator":"SR","crsCode":"LRH"},{"name":"Laurencekirk","latitude":56.828662,"longitude":-2.478447,"stationOperator":"SR","crsCode":"LAU"},{"name":"Lenzie","latitude":55.92130529,"longitude":-4.1538798,"stationOperator":"SR","crsCode":"LNZ"},{"name":"Leuchars (for St. Andrews)","latitude":56.37509038,"longitude":-2.89371168,"stationOperator":"SR","crsCode":"LEU"},{"name":"Linlithgow","latitude":55.97643947,"longitude":-3.595841381,"stationOperator":"SR","crsCode":"LIN"},{"name":"Livingston North","latitude":55.90137746,"longitude":-3.544339538,"stationOperator":"SR","crsCode":"LSN"},{"name":"Livingston South","latitude":55.87168588,"longitude":-3.501556828,"stationOperator":"SR","crsCode":"LVG"},{"name":"Loch Awe","latitude":56.40200122,"longitude":-5.041969116,"stationOperator":"SR","crsCode":"LHA"},{"name":"Loch Eil Outward Bound","latitude":56.85524832,"longitude":-5.191569775,"stationOperator":"SR","crsCode":"LHE"},{"name":"Lochailort","latitude":56.88094612,"longitude":-5.663384877,"stationOperator":"SR","crsCode":"LCL"},{"name":"Locheilside","latitude":56.8553877,"longitude":-5.290032463,"stationOperator":"SR","crsCode":"LCS"},{"name":"Lochgelly","latitude":56.13532052,"longitude":-3.312935958,"stationOperator":"SR","crsCode":"LCG"},{"name":"Lochluichart","latitude":57.62117076,"longitude":-4.809599793,"stationOperator":"SR","crsCode":"LCC"},{"name":"Lochwinnoch","latitude":55.78714041,"longitude":-4.616062634,"stationOperator":"SR","crsCode":"LHW"},{"name":"Lockerbie","latitude":55.12305093,"longitude":-3.353538081,"stationOperator":"SR","crsCode":"LOC"},{"name":"Longniddry","latitude":55.9764786,"longitude":-2.888344638,"stationOperator":"SR","crsCode":"LND"},{"name":"Mallaig","latitude":57.00596656,"longitude":-5.829589323,"stationOperator":"SR","crsCode":"MLG"},{"name":"Markinch","latitude":56.2010078,"longitude":-3.130777483,"stationOperator":"SR","crsCode":"MNC"},{"name":"Maryhill","latitude":55.89714547,"longitude":-4.301942516,"stationOperator":"SR","crsCode":"MYH"},{"name":"Maxwell Park","latitude":55.83771381,"longitude":-4.288685601,"stationOperator":"SR","crsCode":"MAX"},{"name":"Maybole","latitude":55.35472644,"longitude":-4.68528221,"stationOperator":"SR","crsCode":"MAY"},{"name":"Merryton","latitude":55.74869713,"longitude":-3.978239595,"stationOperator":"SR","crsCode":"MEY"},{"name":"Milliken Park","latitude":55.82509709,"longitude":-4.533342722,"stationOperator":"SR","crsCode":"MIN"},{"name":"Milngavie","latitude":55.94084886,"longitude":-4.315104558,"stationOperator":"SR","crsCode":"MLN"},{"name":"Monifieth","latitude":56.48010302,"longitude":-2.818243249,"stationOperator":"SR","crsCode":"MON"},{"name":"Montrose","latitude":56.71278581,"longitude":-2.472074707,"stationOperator":"SR","crsCode":"MTS"},{"name":"Morar","latitude":56.96969552,"longitude":-5.821910524,"stationOperator":"SR","crsCode":"MRR"},{"name":"Mosspark","latitude":55.84082364,"longitude":-4.347809296,"stationOperator":"SR","crsCode":"MPK"},{"name":"Motherwell","latitude":55.79166603,"longitude":-3.994311557,"stationOperator":"SR","crsCode":"MTH"},{"name":"Mount Florida","latitude":55.82679274,"longitude":-4.262017463,"stationOperator":"SR","crsCode":"MFL"},{"name":"Mount Vernon","latitude":55.83982986,"longitude":-4.136593827,"stationOperator":"SR","crsCode":"MTV"},{"name":"Muir of Ord","latitude":57.51791206,"longitude":-4.460939805,"stationOperator":"SR","crsCode":"MOO"},{"name":"Muirend","latitude":55.81040572,"longitude":-4.273834935,"stationOperator":"SR","crsCode":"MUI"},{"name":"Musselburgh","latitude":55.93358441,"longitude":-3.073191904,"stationOperator":"SR","crsCode":"MUB"},{"name":"Nairn","latitude":57.58012963,"longitude":-3.872998212,"stationOperator":"SR","crsCode":"NRN"},{"name":"Neilston","latitude":55.78303028,"longitude":-4.426950811,"stationOperator":"SR","crsCode":"NEI"},{"name":"New Cumnock","latitude":55.40272967,"longitude":-4.184335551,"stationOperator":"SR","crsCode":"NCK"},{"name":"Newcraighall","latitude":55.93485014,"longitude":-3.092756701,"stationOperator":"SR","crsCode":"NEW"},{"name":"Newton (Lanark)","latitude":55.81877088,"longitude":-4.133044742,"stationOperator":"SR","crsCode":"NTN"},{"name":"Newtongrange","latitude":55.864925,"longitude":-3.0685446,"stationOperator":"SR","crsCode":"NEG"},{"name":"Newtonmore","latitude":57.05912906,"longitude":-4.119103389,"stationOperator":"SR","crsCode":"NWR"},{"name":"Newton-on-Ayr","latitude":55.47404673,"longitude":-4.625817279,"stationOperator":"SR","crsCode":"NOA"},{"name":"Nitshill","latitude":55.81191946,"longitude":-4.359954594,"stationOperator":"SR","crsCode":"NIT"},{"name":"North Berwick","latitude":56.0570324,"longitude":-2.730738187,"stationOperator":"SR","crsCode":"NBW"},{"name":"North Queensferry","latitude":56.01248816,"longitude":-3.394583946,"stationOperator":"SR","crsCode":"NQU"},{"name":"Oban","latitude":56.41246429,"longitude":-5.473920404,"stationOperator":"SR","crsCode":"OBN"},{"name":"Paisley Canal","latitude":55.84006858,"longitude":-4.423795846,"stationOperator":"SR","crsCode":"PCN"},{"name":"Paisley Gilmour Street","latitude":55.84733502,"longitude":-4.424503877,"stationOperator":"SR","crsCode":"PYG"},{"name":"Paisley St James","latitude":55.85210338,"longitude":-4.442440916,"stationOperator":"SR","crsCode":"PYJ"},{"name":"Partick","latitude":55.86987384,"longitude":-4.30880039,"stationOperator":"SR","crsCode":"PTK"},{"name":"Patterton","latitude":55.79038666,"longitude":-4.334882502,"stationOperator":"SR","crsCode":"PTT"},{"name":"Perth","latitude":56.39268166,"longitude":-3.4400422,"stationOperator":"SR","crsCode":"PTH"},{"name":"Pitlochry","latitude":56.70249117,"longitude":-3.735573831,"stationOperator":"SR","crsCode":"PIT"},{"name":"Plockton","latitude":57.3335421,"longitude":-5.666000294,"stationOperator":"SR","crsCode":"PLK"},{"name":"Pollokshaws East","latitude":55.82470459,"longitude":-4.287442409,"stationOperator":"SR","crsCode":"PWE"},{"name":"Pollokshaws West","latitude":55.82381126,"longitude":-4.30159977,"stationOperator":"SR","crsCode":"PWW"},{"name":"Pollokshields East","latitude":55.84105199,"longitude":-4.268595988,"stationOperator":"SR","crsCode":"PLE"},{"name":"Pollokshields West","latitude":55.83768428,"longitude":-4.27574678,"stationOperator":"SR","crsCode":"PLW"},{"name":"Polmont","latitude":55.98472465,"longitude":-3.714965487,"stationOperator":"SR","crsCode":"PMT"},{"name":"Port Glasgow","latitude":55.93350378,"longitude":-4.689814129,"stationOperator":"SR","crsCode":"PTG"},{"name":"Portlethen","latitude":57.06136367,"longitude":-2.126616063,"stationOperator":"SR","crsCode":"PLN"},{"name":"Possilpark & Parkhouse","latitude":55.89022945,"longitude":-4.25803113,"stationOperator":"SR","crsCode":"PPK"},{"name":"Prestonpans","latitude":55.95309226,"longitude":-2.974772045,"stationOperator":"SR","crsCode":"PST"},{"name":"Prestwick Town","latitude":55.50169183,"longitude":-4.615146801,"stationOperator":"SR","crsCode":"PTW"},{"name":"Priesthill & Darnley","latitude":55.81216496,"longitude":-4.342890613,"stationOperator":"SR","crsCode":"PTL"},{"name":"Queens Park (Glasgow)","latitude":55.83568277,"longitude":-4.26732499,"stationOperator":"SR","crsCode":"QPK"},{"name":"Rannoch","latitude":56.68602884,"longitude":-4.576863849,"stationOperator":"SR","crsCode":"RAN"},{"name":"Renton","latitude":55.97042084,"longitude":-4.586110938,"stationOperator":"SR","crsCode":"RTN"},{"name":"Rogart","latitude":57.98869553,"longitude":-4.158188999,"stationOperator":"SR","crsCode":"ROG"},{"name":"Rosyth","latitude":56.04550554,"longitude":-3.427306152,"stationOperator":"SR","crsCode":"ROS"},{"name":"Roy Bridge","latitude":56.88834445,"longitude":-4.837241562,"stationOperator":"SR","crsCode":"RYB"},{"name":"Rutherglen","latitude":55.83058595,"longitude":-4.212096258,"stationOperator":"SR","crsCode":"RUT"},{"name":"Saltcoats","latitude":55.63387161,"longitude":-4.784284143,"stationOperator":"SR","crsCode":"SLT"},{"name":"Sanquhar","latitude":55.37016496,"longitude":-3.924523151,"stationOperator":"SR","crsCode":"SQH"},{"name":"Scotscalder","latitude":58.48297756,"longitude":-3.552066936,"stationOperator":"SR","crsCode":"SCT"},{"name":"Scotstounhill","latitude":55.8851271,"longitude":-4.352883014,"stationOperator":"SR","crsCode":"SCH"},{"name":"Shawfair","latitude":55.915359,"longitude":-3.0884433,"stationOperator":"SR","crsCode":"SFI"},{"name":"Shawlands","latitude":55.82919724,"longitude":-4.29233699,"stationOperator":"SR","crsCode":"SHL"},{"name":"Shettleston","latitude":55.85352186,"longitude":-4.160033636,"stationOperator":"SR","crsCode":"SLS"},{"name":"Shieldmuir","latitude":55.77748196,"longitude":-3.956991069,"stationOperator":"SR","crsCode":"SDM"},{"name":"Shotts","latitude":55.81863947,"longitude":-3.798315601,"stationOperator":"SR","crsCode":"SHS"},{"name":"Singer","latitude":55.90765879,"longitude":-4.405482609,"stationOperator":"SR","crsCode":"SIN"},{"name":"Slateford","latitude":55.92668195,"longitude":-3.243452507,"stationOperator":"SR","crsCode":"SLA"},{"name":"South Gyle","latitude":55.93634763,"longitude":-3.299473655,"stationOperator":"SR","crsCode":"SGL"},{"name":"Spean Bridge","latitude":56.8899942,"longitude":-4.921608593,"stationOperator":"SR","crsCode":"SBR"},{"name":"Springburn","latitude":55.88169718,"longitude":-4.228114663,"stationOperator":"SR","crsCode":"SPR"},{"name":"Springfield","latitude":56.29495602,"longitude":-3.052451731,"stationOperator":"SR","crsCode":"SPF"},{"name":"Stepps","latitude":55.889898,"longitude":-4.14078439,"stationOperator":"SR","crsCode":"SPS"},{"name":"Stevenston","latitude":55.63426825,"longitude":-4.750782413,"stationOperator":"SR","crsCode":"STV"},{"name":"Stewarton","latitude":55.68214404,"longitude":-4.518043445,"stationOperator":"SR","crsCode":"STT"},{"name":"Stirling","latitude":56.11979974,"longitude":-3.935616947,"stationOperator":"SR","crsCode":"STG"},{"name":"Stonehaven","latitude":56.96681762,"longitude":-2.225305286,"stationOperator":"SR","crsCode":"STN"},{"name":"Stow","latitude":55.691624,"longitude":-2.8654726,"stationOperator":"SR","crsCode":"SOI"},{"name":"Stranraer","latitude":54.90959858,"longitude":-5.024729131,"stationOperator":"SR","crsCode":"STR"},{"name":"Strathcarron","latitude":57.42276127,"longitude":-5.428811191,"stationOperator":"SR","crsCode":"STC"},{"name":"Stromeferry","latitude":57.35235059,"longitude":-5.549452918,"stationOperator":"SR","crsCode":"STF"},{"name":"Summerston","latitude":55.89905346,"longitude":-4.291689497,"stationOperator":"SR","crsCode":"SUM"},{"name":"Tain","latitude":57.81427038,"longitude":-4.052128422,"stationOperator":"SR","crsCode":"TAI"},{"name":"Taynuilt","latitude":56.43078559,"longitude":-5.239592133,"stationOperator":"SR","crsCode":"TAY"},{"name":"Thornliebank","latitude":55.81086816,"longitude":-4.311688912,"stationOperator":"SR","crsCode":"THB"},{"name":"Thorntonhall","latitude":55.76867034,"longitude":-4.251155831,"stationOperator":"SR","crsCode":"THT"},{"name":"Thurso","latitude":58.58998665,"longitude":-3.527556041,"stationOperator":"SR","crsCode":"THS"},{"name":"Troon","latitude":55.54279764,"longitude":-4.655290297,"stationOperator":"SR","crsCode":"TRN"},{"name":"Tulloch","latitude":56.88425855,"longitude":-4.701316764,"stationOperator":"SR","crsCode":"TUL"},{"name":"Tweedbank","latitude":55.604801,"longitude":-2.7598488,"stationOperator":"SR","crsCode":"TWB"},{"name":"Tyndrum Lower","latitude":56.43332737,"longitude":-4.714805349,"stationOperator":"SR","crsCode":"TYL"},{"name":"Uddingston","latitude":55.82352079,"longitude":-4.08668628,"stationOperator":"SR","crsCode":"UDD"},{"name":"Uphall","latitude":55.91903662,"longitude":-3.502106809,"stationOperator":"SR","crsCode":"UHA"},{"name":"Upper Tyndrum","latitude":56.43464844,"longitude":-4.703705412,"stationOperator":"SR","crsCode":"UTY"},{"name":"Wallyford","latitude":55.9402781,"longitude":-3.014939754,"stationOperator":"SR","crsCode":"WAF"},{"name":"Wemyss Bay","latitude":55.87613182,"longitude":-4.889074359,"stationOperator":"SR","crsCode":"WMS"},{"name":"West Calder","latitude":55.85379587,"longitude":-3.567006408,"stationOperator":"SR","crsCode":"WCL"},{"name":"West Kilbride","latitude":55.69614641,"longitude":-4.851740821,"stationOperator":"SR","crsCode":"WKB"},{"name":"Wester Hailes","latitude":55.91431124,"longitude":-3.284336393,"stationOperator":"SR","crsCode":"WTA"},{"name":"Westerton","latitude":55.90479398,"longitude":-4.334874626,"stationOperator":"SR","crsCode":"WES"},{"name":"Whifflet","latitude":55.85368534,"longitude":-4.018641637,"stationOperator":"SR","crsCode":"WFF"},{"name":"Whinhill","latitude":55.93836064,"longitude":-4.746684343,"stationOperator":"SR","crsCode":"WNL"},{"name":"Whitecraigs","latitude":55.79031473,"longitude":-4.310151868,"stationOperator":"SR","crsCode":"WCR"},{"name":"Wick","latitude":58.44168704,"longitude":-3.097981057,"stationOperator":"SR","crsCode":"WCK"},{"name":"Williamwood","latitude":55.79410512,"longitude":-4.290114846,"stationOperator":"SR","crsCode":"WLM"},{"name":"Wishaw","latitude":55.77203337,"longitude":-3.926425243,"stationOperator":"SR","crsCode":"WSH"},{"name":"Woodhall","latitude":55.9311949,"longitude":-4.655388489,"stationOperator":"SR","crsCode":"WDL"},{"name":"Yoker","latitude":55.89273102,"longitude":-4.387412084,"stationOperator":"SR","crsCode":"YOK"},{"name":"Addlestone","latitude":51.37304695,"longitude":-0.484448913,"stationOperator":"SW","crsCode":"ASN"},{"name":"Aldershot","latitude":51.24641674,"longitude":-0.759860484,"stationOperator":"SW","crsCode":"AHT"},{"name":"Alton","latitude":51.15196497,"longitude":-0.966920228,"stationOperator":"SW","crsCode":"AON"},{"name":"Andover","latitude":51.21154584,"longitude":-1.49223998,"stationOperator":"SW","crsCode":"ADV"},{"name":"Ascot (Berks)","latitude":51.40624634,"longitude":-0.675830536,"stationOperator":"SW","crsCode":"ACT"},{"name":"Ash","latitude":51.24959566,"longitude":-0.712804737,"stationOperator":"SW","crsCode":"ASH"},{"name":"Ash Vale","latitude":51.27224595,"longitude":-0.72164797,"stationOperator":"SW","crsCode":"AHV"},{"name":"Ashford (Surrey)","latitude":51.43651024,"longitude":-0.468062256,"stationOperator":"SW","crsCode":"AFS"},{"name":"Ashurst New Forest","latitude":50.88984033,"longitude":-1.526640531,"stationOperator":"SW","crsCode":"ANF"},{"name":"Axminster","latitude":50.7785826,"longitude":-3.00522804,"stationOperator":"SW","crsCode":"AXM"},{"name":"Bagshot","latitude":51.36436905,"longitude":-0.688659892,"stationOperator":"SW","crsCode":"BAG"},{"name":"Barnes","latitude":51.46706806,"longitude":-0.240724454,"stationOperator":"SW","crsCode":"BNS"},{"name":"Barnes Bridge","latitude":51.47173404,"longitude":-0.252064268,"stationOperator":"SW","crsCode":"BNI"},{"name":"Basingstoke","latitude":51.26835654,"longitude":-1.087259112,"stationOperator":"SW","crsCode":"BSK"},{"name":"Beaulieu Road","latitude":50.85503752,"longitude":-1.504758891,"stationOperator":"SW","crsCode":"BEU"},{"name":"Bedhampton","latitude":50.85394444,"longitude":-0.995823664,"stationOperator":"SW","crsCode":"BDH"},{"name":"Bentley (Hants)","latitude":51.18122986,"longitude":-0.868130903,"stationOperator":"SW","crsCode":"BTY"},{"name":"Berrylands","latitude":51.39904691,"longitude":-0.28071427,"stationOperator":"SW","crsCode":"BRS"},{"name":"Bitterne","latitude":50.91844496,"longitude":-1.376987648,"stationOperator":"SW","crsCode":"BTE"},{"name":"Bookham","latitude":51.28873731,"longitude":-0.384010514,"stationOperator":"SW","crsCode":"BKA"},{"name":"Botley","latitude":50.91680133,"longitude":-1.258806196,"stationOperator":"SW","crsCode":"BOE"},{"name":"Bournemouth","latitude":50.72752854,"longitude":-1.863941342,"stationOperator":"SW","crsCode":"BMH"},{"name":"Bracknell","latitude":51.41309494,"longitude":-0.751703019,"stationOperator":"SW","crsCode":"BCE"},{"name":"Branksome","latitude":50.72757992,"longitude":-1.919197826,"stationOperator":"SW","crsCode":"BSM"},{"name":"Brentford","latitude":51.48785748,"longitude":-0.309064381,"stationOperator":"SW","crsCode":"BFD"},{"name":"Brockenhurst","latitude":50.81682895,"longitude":-1.573542545,"stationOperator":"SW","crsCode":"BCU"},{"name":"Brookwood","latitude":51.30375762,"longitude":-0.635744681,"stationOperator":"SW","crsCode":"BKO"},{"name":"Bursledon","latitude":50.88438037,"longitude":-1.305281384,"stationOperator":"SW","crsCode":"BUO"},{"name":"Byfleet & New Haw","latitude":51.34979727,"longitude":-0.481381942,"stationOperator":"SW","crsCode":"BFN"},{"name":"Camberley","latitude":51.33645865,"longitude":-0.744669753,"stationOperator":"SW","crsCode":"CAM"},{"name":"Chandlers Ford","latitude":50.98299772,"longitude":-1.384401049,"stationOperator":"SW","crsCode":"CFR"},{"name":"Chertsey","latitude":51.38716506,"longitude":-0.509665587,"stationOperator":"SW","crsCode":"CHY"},{"name":"Chessington North","latitude":51.36426238,"longitude":-0.300405044,"stationOperator":"SW","crsCode":"CSN"},{"name":"Chessington South","latitude":51.35655091,"longitude":-0.308159205,"stationOperator":"SW","crsCode":"CSS"},{"name":"Chiswick","latitude":51.48114063,"longitude":-0.267834947,"stationOperator":"SW","crsCode":"CHK"},{"name":"Christchurch","latitude":50.73820038,"longitude":-1.784549578,"stationOperator":"SW","crsCode":"CHR"},{"name":"Clandon","latitude":51.26400351,"longitude":-0.502759414,"stationOperator":"SW","crsCode":"CLA"},{"name":"Clapham Junction","latitude":51.46419065,"longitude":-0.170247351,"stationOperator":"SW","crsCode":"CLJ"},{"name":"Claygate","latitude":51.36121463,"longitude":-0.348236165,"stationOperator":"SW","crsCode":"CLG"},{"name":"Cobham & Stoke d'Abernon","latitude":51.31810024,"longitude":-0.389336167,"stationOperator":"SW","crsCode":"CSD"},{"name":"Cosham","latitude":50.84208432,"longitude":-1.06754988,"stationOperator":"SW","crsCode":"CSA"},{"name":"Cranbrook (Devon)","latitude":50.749689,"longitude":-3.4222744,"stationOperator":"SW","crsCode":"CBK"},{"name":"Crewkerne","latitude":50.87203517,"longitude":-2.778487421,"stationOperator":"SW","crsCode":"CKN"},{"name":"Datchet","latitude":51.48308149,"longitude":-0.579416012,"stationOperator":"SW","crsCode":"DAT"},{"name":"Dorchester South","latitude":50.70927877,"longitude":-2.437250357,"stationOperator":"SW","crsCode":"DCH"},{"name":"Earley","latitude":51.44109521,"longitude":-0.917992325,"stationOperator":"SW","crsCode":"EAR"},{"name":"Earlsfield","latitude":51.44199132,"longitude":-0.188445946,"stationOperator":"SW","crsCode":"EAD"},{"name":"Eastleigh","latitude":50.96924196,"longitude":-1.350088939,"stationOperator":"SW","crsCode":"ESL"},{"name":"Effingham Junction","latitude":51.29149416,"longitude":-0.419956236,"stationOperator":"SW","crsCode":"EFF"},{"name":"Egham","latitude":51.42964981,"longitude":-0.54650574,"stationOperator":"SW","crsCode":"EGH"},{"name":"Esher","latitude":51.37989226,"longitude":-0.353326233,"stationOperator":"SW","crsCode":"ESH"},{"name":"Ewell West","latitude":51.35004515,"longitude":-0.256986854,"stationOperator":"SW","crsCode":"EWW"},{"name":"Fareham","latitude":50.85302175,"longitude":-1.192037892,"stationOperator":"SW","crsCode":"FRM"},{"name":"Farnborough (Main)","latitude":51.29660513,"longitude":-0.755725906,"stationOperator":"SW","crsCode":"FNB"},{"name":"Farncombe","latitude":51.19715045,"longitude":-0.604545436,"stationOperator":"SW","crsCode":"FNC"},{"name":"Farnham","latitude":51.21190211,"longitude":-0.792428907,"stationOperator":"SW","crsCode":"FNH"},{"name":"Feltham","latitude":51.4479016,"longitude":-0.409827793,"stationOperator":"SW","crsCode":"FEL"},{"name":"Feniton","latitude":50.78644387,"longitude":-3.285357243,"stationOperator":"SW","crsCode":"FNT"},{"name":"Fleet","latitude":51.29063459,"longitude":-0.830808013,"stationOperator":"SW","crsCode":"FLE"},{"name":"Fratton","latitude":50.79632515,"longitude":-1.073980501,"stationOperator":"SW","crsCode":"FTN"},{"name":"Frimley","latitude":51.31186216,"longitude":-0.746991209,"stationOperator":"SW","crsCode":"FML"},{"name":"Fulwell","latitude":51.43393799,"longitude":-0.349469931,"stationOperator":"SW","crsCode":"FLW"},{"name":"Gillingham (Dorset)","latitude":51.03402105,"longitude":-2.272639221,"stationOperator":"SW","crsCode":"GIL"},{"name":"Godalming","latitude":51.18658296,"longitude":-0.618859352,"stationOperator":"SW","crsCode":"GOD"},{"name":"Grateley","latitude":51.17005721,"longitude":-1.620784549,"stationOperator":"SW","crsCode":"GRT"},{"name":"Guildford","latitude":51.23696786,"longitude":-0.580420682,"stationOperator":"SW","crsCode":"GLD"},{"name":"Hamble","latitude":50.8713636,"longitude":-1.329166492,"stationOperator":"SW","crsCode":"HME"},{"name":"Hampton (London)","latitude":51.41590963,"longitude":-0.372108616,"stationOperator":"SW","crsCode":"HMP"},{"name":"Hampton Court","latitude":51.40255764,"longitude":-0.342750055,"stationOperator":"SW","crsCode":"HMC"},{"name":"Hampton Wick","latitude":51.41452673,"longitude":-0.31249094,"stationOperator":"SW","crsCode":"HMW"},{"name":"Hamworthy","latitude":50.72517822,"longitude":-2.019367161,"stationOperator":"SW","crsCode":"HAM"},{"name":"Haslemere","latitude":51.08884213,"longitude":-0.719371718,"stationOperator":"SW","crsCode":"HSL"},{"name":"Havant","latitude":50.85441478,"longitude":-0.981606362,"stationOperator":"SW","crsCode":"HAV"},{"name":"Hedge End","latitude":50.93231017,"longitude":-1.294506472,"stationOperator":"SW","crsCode":"HDE"},{"name":"Hersham","latitude":51.37698201,"longitude":-0.389799091,"stationOperator":"SW","crsCode":"HER"},{"name":"Hilsea","latitude":50.82812716,"longitude":-1.058584319,"stationOperator":"SW","crsCode":"HLS"},{"name":"Hinchley Wood","latitude":51.37499946,"longitude":-0.340526968,"stationOperator":"SW","crsCode":"HYW"},{"name":"Hinton Admiral","latitude":50.75262651,"longitude":-1.714128129,"stationOperator":"SW","crsCode":"HNA"},{"name":"Holton Heath","latitude":50.71139466,"longitude":-2.07785667,"stationOperator":"SW","crsCode":"HOL"},{"name":"Honiton","latitude":50.79657202,"longitude":-3.186745856,"stationOperator":"SW","crsCode":"HON"},{"name":"Hook","latitude":51.27999802,"longitude":-0.961641845,"stationOperator":"SW","crsCode":"HOK"},{"name":"Horsley","latitude":51.2793455,"longitude":-0.435400001,"stationOperator":"SW","crsCode":"HSY"},{"name":"Hounslow","latitude":51.46252802,"longitude":-0.361826888,"stationOperator":"SW","crsCode":"HOU"},{"name":"Isleworth","latitude":51.47476682,"longitude":-0.336908528,"stationOperator":"SW","crsCode":"ISL"},{"name":"Kempton Park Racecourse","latitude":51.4209856,"longitude":-0.409741053,"stationOperator":"SW","crsCode":"KMP"},{"name":"Kew Bridge","latitude":51.48936263,"longitude":-0.28884221,"stationOperator":"SW","crsCode":"KWB"},{"name":"Kingston","latitude":51.41275341,"longitude":-0.301166881,"stationOperator":"SW","crsCode":"KNG"},{"name":"Liphook","latitude":51.07130974,"longitude":-0.800231253,"stationOperator":"SW","crsCode":"LIP"},{"name":"Liss","latitude":51.04356403,"longitude":-0.892872687,"stationOperator":"SW","crsCode":"LIS"},{"name":"London Road (Guildford)","latitude":51.24064745,"longitude":-0.565064166,"stationOperator":"SW","crsCode":"LRD"},{"name":"Longcross","latitude":51.38517473,"longitude":-0.594565138,"stationOperator":"SW","crsCode":"LNG"},{"name":"Lymington Pier","latitude":50.75828671,"longitude":-1.529457537,"stationOperator":"SW","crsCode":"LYP"},{"name":"Lymington Town","latitude":50.76089855,"longitude":-1.537172813,"stationOperator":"SW","crsCode":"LYT"},{"name":"Malden Manor","latitude":51.38463927,"longitude":-0.261133898,"stationOperator":"SW","crsCode":"MAL"},{"name":"Martins Heron","latitude":51.40759741,"longitude":-0.724677798,"stationOperator":"SW","crsCode":"MAO"},{"name":"Micheldever","latitude":51.18239077,"longitude":-1.260678431,"stationOperator":"SW","crsCode":"MIC"},{"name":"Milford (Surrey)","latitude":51.163315,"longitude":-0.636946048,"stationOperator":"SW","crsCode":"MLF"},{"name":"Millbrook (Hants)","latitude":50.91148638,"longitude":-1.433849643,"stationOperator":"SW","crsCode":"MBK"},{"name":"Moreton (Dorset)","latitude":50.70110851,"longitude":-2.312902315,"stationOperator":"SW","crsCode":"MTN"},{"name":"Mortlake","latitude":51.46835266,"longitude":-0.266591584,"stationOperator":"SW","crsCode":"MTL"},{"name":"Motspur Park","latitude":51.39510266,"longitude":-0.239174525,"stationOperator":"SW","crsCode":"MOT"},{"name":"Netley","latitude":50.8748526,"longitude":-1.341766118,"stationOperator":"SW","crsCode":"NTL"},{"name":"New Malden","latitude":51.40407643,"longitude":-0.255939507,"stationOperator":"SW","crsCode":"NEM"},{"name":"New Milton","latitude":50.75573929,"longitude":-1.65781268,"stationOperator":"SW","crsCode":"NWM"},{"name":"Norbiton","latitude":51.41249564,"longitude":-0.28409246,"stationOperator":"SW","crsCode":"NBT"},{"name":"North Sheen","latitude":51.46540691,"longitude":-0.286427277,"stationOperator":"SW","crsCode":"NSH"},{"name":"Overton","latitude":51.25405532,"longitude":-1.260016842,"stationOperator":"SW","crsCode":"OVR"},{"name":"Oxshott","latitude":51.33639577,"longitude":-0.362408246,"stationOperator":"SW","crsCode":"OXS"},{"name":"Parkstone (Dorset)","latitude":50.72310029,"longitude":-1.948956257,"stationOperator":"SW","crsCode":"PKS"},{"name":"Petersfield","latitude":51.00671834,"longitude":-0.941143838,"stationOperator":"SW","crsCode":"PTR"},{"name":"Pinhoe","latitude":50.73756769,"longitude":-3.47151678,"stationOperator":"SW","crsCode":"PIN"},{"name":"Pokesdown","latitude":50.73107393,"longitude":-1.825106845,"stationOperator":"SW","crsCode":"POK"},{"name":"Poole","latitude":50.71941418,"longitude":-1.983326736,"stationOperator":"SW","crsCode":"POO"},{"name":"Portchester","latitude":50.84873765,"longitude":-1.124238788,"stationOperator":"SW","crsCode":"PTC"},{"name":"Portsmouth & Southsea","latitude":50.79848174,"longitude":-1.090909302,"stationOperator":"SW","crsCode":"PMS"},{"name":"Portsmouth Harbour","latitude":50.79694873,"longitude":-1.10783895,"stationOperator":"SW","crsCode":"PMH"},{"name":"Putney","latitude":51.46130596,"longitude":-0.216473031,"stationOperator":"SW","crsCode":"PUT"},{"name":"Queenstown Road (Battersea)","latitude":51.47461422,"longitude":-0.146833069,"stationOperator":"SW","crsCode":"QRB"},{"name":"Raynes Park","latitude":51.40935291,"longitude":-0.22999932,"stationOperator":"SW","crsCode":"RAY"},{"name":"Redbridge","latitude":50.91993012,"longitude":-1.470167863,"stationOperator":"SW","crsCode":"RDB"},{"name":"Richmond (London)","latitude":51.46310164,"longitude":-0.301039568,"stationOperator":"SW","crsCode":"RMD"},{"name":"Rowlands Castle","latitude":50.89216101,"longitude":-0.957464705,"stationOperator":"SW","crsCode":"RLN"},{"name":"Salisbury","latitude":51.07054404,"longitude":-1.806389093,"stationOperator":"SW","crsCode":"SAL"},{"name":"Shawford","latitude":51.02181488,"longitude":-1.328195204,"stationOperator":"SW","crsCode":"SHW"},{"name":"Shepperton","latitude":51.39680664,"longitude":-0.446776819,"stationOperator":"SW","crsCode":"SHP"},{"name":"Sherborne","latitude":50.94400636,"longitude":-2.513081696,"stationOperator":"SW","crsCode":"SHE"},{"name":"Sholing","latitude":50.89674031,"longitude":-1.364351502,"stationOperator":"SW","crsCode":"SHO"},{"name":"Southampton Airport Parkway","latitude":50.95080673,"longitude":-1.363101804,"stationOperator":"SW","crsCode":"SOA"},{"name":"Southampton Central","latitude":50.90743864,"longitude":-1.413602474,"stationOperator":"SW","crsCode":"SOU"},{"name":"St Denys","latitude":50.92204734,"longitude":-1.388193499,"stationOperator":"SW","crsCode":"SDN"},{"name":"St Margarets (London)","latitude":51.45510669,"longitude":-0.320350685,"stationOperator":"SW","crsCode":"SMG"},{"name":"Staines","latitude":51.43245842,"longitude":-0.503156805,"stationOperator":"SW","crsCode":"SNS"},{"name":"Stoneleigh","latitude":51.3634013,"longitude":-0.248665136,"stationOperator":"SW","crsCode":"SNL"},{"name":"Strawberry Hill","latitude":51.43973402,"longitude":-0.339620394,"stationOperator":"SW","crsCode":"STW"},{"name":"Sunbury","latitude":51.4183156,"longitude":-0.41777264,"stationOperator":"SW","crsCode":"SUU"},{"name":"Sunningdale","latitude":51.39194259,"longitude":-0.633036903,"stationOperator":"SW","crsCode":"SNG"},{"name":"Sunnymeads","latitude":51.46990139,"longitude":-0.559005825,"stationOperator":"SW","crsCode":"SNY"},{"name":"Surbiton","latitude":51.39246129,"longitude":-0.303959858,"stationOperator":"SW","crsCode":"SUR"},{"name":"Swanwick","latitude":50.87565884,"longitude":-1.265855068,"stationOperator":"SW","crsCode":"SNW"},{"name":"Sway","latitude":50.78469022,"longitude":-1.610008474,"stationOperator":"SW","crsCode":"SWY"},{"name":"Swaythling","latitude":50.94113949,"longitude":-1.376413966,"stationOperator":"SW","crsCode":"SWG"},{"name":"Syon Lane","latitude":51.48179326,"longitude":-0.32513115,"stationOperator":"SW","crsCode":"SYL"},{"name":"Teddington","latitude":51.42452799,"longitude":-0.332691888,"stationOperator":"SW","crsCode":"TED"},{"name":"Templecombe","latitude":51.00113031,"longitude":-2.417513122,"stationOperator":"SW","crsCode":"TMC"},{"name":"Thames Ditton","latitude":51.38900668,"longitude":-0.33901409,"stationOperator":"SW","crsCode":"THD"},{"name":"Tisbury","latitude":51.06083999,"longitude":-2.079012098,"stationOperator":"SW","crsCode":"TIS"},{"name":"Tolworth","latitude":51.37681954,"longitude":-0.279679278,"stationOperator":"SW","crsCode":"TOL"},{"name":"Totton","latitude":50.91800544,"longitude":-1.482139753,"stationOperator":"SW","crsCode":"TTN"},{"name":"Twickenham","latitude":51.45037655,"longitude":-0.329159686,"stationOperator":"SW","crsCode":"TWI"},{"name":"Upper Halliford","latitude":51.41306951,"longitude":-0.43089616,"stationOperator":"SW","crsCode":"UPH"},{"name":"Upwey","latitude":50.64825691,"longitude":-2.466146876,"stationOperator":"SW","crsCode":"UPW"},{"name":"Vauxhall","latitude":51.48619345,"longitude":-0.122870783,"stationOperator":"SW","crsCode":"VXH"},{"name":"Virginia Water","latitude":51.40195798,"longitude":-0.562220659,"stationOperator":"SW","crsCode":"VIR"},{"name":"Walton-on-Thames","latitude":51.37293218,"longitude":-0.414625196,"stationOperator":"SW","crsCode":"WAL"},{"name":"Wanborough","latitude":51.24452137,"longitude":-0.667585828,"stationOperator":"SW","crsCode":"WAN"},{"name":"Wandsworth Town","latitude":51.46105105,"longitude":-0.188123102,"stationOperator":"SW","crsCode":"WNT"},{"name":"Wareham (Dorset)","latitude":50.69287417,"longitude":-2.11525952,"stationOperator":"SW","crsCode":"WRM"},{"name":"West Byfleet","latitude":51.33922612,"longitude":-0.505478144,"stationOperator":"SW","crsCode":"WBY"},{"name":"Weybridge","latitude":51.361772,"longitude":-0.457715753,"stationOperator":"SW","crsCode":"WYB"},{"name":"Weymouth","latitude":50.61601612,"longitude":-2.454887722,"stationOperator":"SW","crsCode":"WEY"},{"name":"Whimple","latitude":50.76801832,"longitude":-3.354340682,"stationOperator":"SW","crsCode":"WHM"},{"name":"Whitchurch (Hants)","latitude":51.23741109,"longitude":-1.338181206,"stationOperator":"SW","crsCode":"WCH"},{"name":"Whitton (London)","latitude":51.44961063,"longitude":-0.357683876,"stationOperator":"SW","crsCode":"WTN"},{"name":"Wimbledon","latitude":51.42158552,"longitude":-0.206498827,"stationOperator":"SW","crsCode":"WIM"},{"name":"Winchester","latitude":51.06720512,"longitude":-1.319703002,"stationOperator":"SW","crsCode":"WIN"},{"name":"Winchfield","latitude":51.28494989,"longitude":-0.906981902,"stationOperator":"SW","crsCode":"WNF"},{"name":"Windsor & Eton Riverside","latitude":51.48565491,"longitude":-0.606528915,"stationOperator":"SW","crsCode":"WNR"},{"name":"Winnersh","latitude":51.43027741,"longitude":-0.87686164,"stationOperator":"SW","crsCode":"WNS"},{"name":"Winnersh Triangle","latitude":51.4367367,"longitude":-0.89133506,"stationOperator":"SW","crsCode":"WTI"},{"name":"Witley","latitude":51.13315687,"longitude":-0.645781144,"stationOperator":"SW","crsCode":"WTY"},{"name":"Woking","latitude":51.31846927,"longitude":-0.556954188,"stationOperator":"SW","crsCode":"WOK"},{"name":"Wokingham","latitude":51.41122172,"longitude":-0.842545198,"stationOperator":"SW","crsCode":"WKM"},{"name":"Wool","latitude":50.68162341,"longitude":-2.221475875,"stationOperator":"SW","crsCode":"WOO"},{"name":"Woolston","latitude":50.89891313,"longitude":-1.377063456,"stationOperator":"SW","crsCode":"WLS"},{"name":"Worcester Park","latitude":51.3812537,"longitude":-0.245167023,"stationOperator":"SW","crsCode":"WCP"},{"name":"Worplesdon","latitude":51.2890166,"longitude":-0.582573597,"stationOperator":"SW","crsCode":"WPL"},{"name":"Wraysbury","latitude":51.45771219,"longitude":-0.541915109,"stationOperator":"SW","crsCode":"WRY"},{"name":"Yeovil Junction","latitude":50.92472896,"longitude":-2.613179136,"stationOperator":"SW","crsCode":"YVJ"},{"name":"Bedford","latitude":52.1362,"longitude":-0.47944,"stationOperator":"TL","crsCode":"BDM"},{"name":"City Thameslink","latitude":51.51394,"longitude":-0.10358,"stationOperator":"TL","crsCode":"CTK"},{"name":"Cricklewood","latitude":51.55872,"longitude":-0.21223,"stationOperator":"TL","crsCode":"CRI"},{"name":"Elephant & Castle","latitude":51.49409,"longitude":-0.09951,"stationOperator":"TL","crsCode":"EPH"},{"name":"Elstree & Borehamwood","latitude":51.65289,"longitude":-0.2798,"stationOperator":"TL","crsCode":"ELS"},{"name":"Flitwick","latitude":52.00365,"longitude":-0.49526,"stationOperator":"TL","crsCode":"FLT"},{"name":"Harlington (Beds)","latitude":51.96207,"longitude":-0.49568,"stationOperator":"TL","crsCode":"HLN"},{"name":"Harpenden","latitude":51.81488,"longitude":-0.35198,"stationOperator":"TL","crsCode":"HPD"},{"name":"Haydons Road","latitude":51.42545,"longitude":-0.18881,"stationOperator":"TL","crsCode":"HYR"},{"name":"Hendon","latitude":51.58008,"longitude":-0.23867,"stationOperator":"TL","crsCode":"HEN"},{"name":"Leagrave","latitude":51.90517,"longitude":-0.45851,"stationOperator":"TL","crsCode":"LEA"},{"name":"London Blackfriars","latitude":51.51181,"longitude":-0.10333,"stationOperator":"TL","crsCode":"BFR"},{"name":"Loughborough Junction","latitude":51.46671,"longitude":-0.10252,"stationOperator":"TL","crsCode":"LGJ"},{"name":"Luton","latitude":51.88231,"longitude":-0.41404,"stationOperator":"TL","crsCode":"LUT"},{"name":"Luton Airport Parkway","latitude":51.87286,"longitude":-0.3962,"stationOperator":"TL","crsCode":"LTN"},{"name":"Mill Hill Broadway","latitude":51.61288,"longitude":-0.24954,"stationOperator":"TL","crsCode":"MIL"},{"name":"Morden South","latitude":51.39631,"longitude":-0.20031,"stationOperator":"TL","crsCode":"MDS"},{"name":"Radlett","latitude":51.68519,"longitude":-0.31724,"stationOperator":"TL","crsCode":"RDT"},{"name":"South Merton","latitude":51.40323,"longitude":-0.20551,"stationOperator":"TL","crsCode":"SMO"},{"name":"St Albans City","latitude":51.75048,"longitude":-0.32754,"stationOperator":"TL","crsCode":"SAC"},{"name":"St Helier (Surrey)","latitude":51.39,"longitude":-0.19912,"stationOperator":"TL","crsCode":"SIH"},{"name":"Sutton Common","latitude":51.37557,"longitude":-0.19682,"stationOperator":"TL","crsCode":"SUC"},{"name":"Tooting","latitude":51.41989,"longitude":-0.16099,"stationOperator":"TL","crsCode":"TOO"},{"name":"West Hampstead Thameslink","latitude":51.54862,"longitude":-0.19243,"stationOperator":"TL","crsCode":"WHP"},{"name":"West Sutton","latitude":51.36616,"longitude":-0.20466,"stationOperator":"TL","crsCode":"WSU"},{"name":"Wimbledon Chase","latitude":51.40956,"longitude":-0.21403,"stationOperator":"TL","crsCode":"WBO"},{"name":"Arnside","latitude":54.20210888,"longitude":-2.827766101,"stationOperator":"NT","crsCode":"ARN"},{"name":"Barnetby","latitude":53.57424146,"longitude":-0.409705665,"stationOperator":"TP","crsCode":"BTB"},{"name":"Barrow-in-Furness","latitude":54.1190048,"longitude":-3.226129301,"stationOperator":"NT","crsCode":"BIF"},{"name":"Birchwood","latitude":53.41196101,"longitude":-2.528015343,"stationOperator":"NT","crsCode":"BWD"},{"name":"Brough","latitude":53.72724433,"longitude":-0.579439167,"stationOperator":"TP","crsCode":"BUH"},{"name":"Burneside (Cumbria)","latitude":54.35530768,"longitude":-2.76621552,"stationOperator":"NT","crsCode":"BUD"},{"name":"Carnforth","latitude":54.12969095,"longitude":-2.771228496,"stationOperator":"NT","crsCode":"CNF"},{"name":"Cleethorpes","latitude":53.56192407,"longitude":-0.029217393,"stationOperator":"TP","crsCode":"CLE"},{"name":"Dewsbury","latitude":53.69210344,"longitude":-1.633482066,"stationOperator":"TP","crsCode":"DEW"},{"name":"Grange-over-Sands","latitude":54.1952789,"longitude":-2.902736771,"stationOperator":"NT","crsCode":"GOS"},{"name":"Grimsby Town","latitude":53.56412028,"longitude":-0.086951656,"stationOperator":"TP","crsCode":"GMB"},{"name":"Huddersfield","latitude":53.64842819,"longitude":-1.785145834,"stationOperator":"TP","crsCode":"HUD"},{"name":"Hull","latitude":53.744177,"longitude":-0.346155,"stationOperator":"TP","crsCode":"HUL"},{"name":"Kendal","latitude":54.33210561,"longitude":-2.73964031,"stationOperator":"NT","crsCode":"KEN"},{"name":"Malton","latitude":54.13208477,"longitude":-0.797222763,"stationOperator":"TP","crsCode":"MLT"},{"name":"Manchester Airport","latitude":53.36505845,"longitude":-2.272981546,"stationOperator":"TP","crsCode":"MIA"},{"name":"Middlesbrough","latitude":54.57911045,"longitude":-1.234712568,"stationOperator":"TP","crsCode":"MBR"},{"name":"Northallerton","latitude":54.3330789,"longitude":-1.441275691,"stationOperator":"TP","crsCode":"NTR"},{"name":"Scarborough","latitude":54.27980423,"longitude":-0.405706875,"stationOperator":"TP","crsCode":"SCA"},{"name":"Scunthorpe","latitude":53.58619519,"longitude":-0.650979553,"stationOperator":"TP","crsCode":"SCU"},{"name":"Seamer","latitude":54.24076317,"longitude":-0.417034229,"stationOperator":"TP","crsCode":"SEM"},{"name":"Selby","latitude":53.78338472,"longitude":-1.063555365,"stationOperator":"TP","crsCode":"SBY"},{"name":"Stalybridge","latitude":53.48439291,"longitude":-2.061892539,"stationOperator":"TP","crsCode":"SYB"},{"name":"Staveley (Cumbria)","latitude":54.37544124,"longitude":-2.819395031,"stationOperator":"NT","crsCode":"SVL"},{"name":"Thirsk","latitude":54.22822386,"longitude":-1.372589271,"stationOperator":"TP","crsCode":"THI"},{"name":"Thornaby","latitude":54.55945018,"longitude":-1.300710445,"stationOperator":"TP","crsCode":"TBY"},{"name":"Ulverston","latitude":54.19159088,"longitude":-3.097920025,"stationOperator":"NT","crsCode":"ULV"},{"name":"Warrington Central","latitude":53.39188323,"longitude":-2.592413143,"stationOperator":"NT","crsCode":"WAC"},{"name":"Windermere","latitude":54.37960543,"longitude":-2.903389364,"stationOperator":"NT","crsCode":"WDM"},{"name":"Yarm","latitude":54.49377475,"longitude":-1.353090201,"stationOperator":"TP","crsCode":"YRM"},{"name":"Birmingham International","latitude":52.45081461,"longitude":-1.725863394,"stationOperator":"VT","crsCode":"BHI"},{"name":"Carlisle","latitude":54.89064626,"longitude":-2.933810228,"stationOperator":"VT","crsCode":"CAR"},{"name":"Coventry","latitude":52.40082838,"longitude":-1.513460517,"stationOperator":"VT","crsCode":"COV"},{"name":"Crewe","latitude":53.08964325,"longitude":-2.432977174,"stationOperator":"VT","crsCode":"CRE"},{"name":"Lancaster","latitude":54.04855789,"longitude":-2.807909914,"stationOperator":"VT","crsCode":"LAN"},{"name":"Macclesfield","latitude":53.25935609,"longitude":-2.121380478,"stationOperator":"VT","crsCode":"MAC"},{"name":"Oxenholme Lake District","latitude":54.30524797,"longitude":-2.722253183,"stationOperator":"VT","crsCode":"OXN"},{"name":"Penrith (North Lakes)","latitude":54.6618117,"longitude":-2.758035421,"stationOperator":"VT","crsCode":"PNR"},{"name":"Preston (Lancs)","latitude":53.75687052,"longitude":-2.708124657,"stationOperator":"VT","crsCode":"PRE"},{"name":"Rugby","latitude":52.37910798,"longitude":-1.250477907,"stationOperator":"VT","crsCode":"RUG"},{"name":"Runcorn","latitude":53.33871197,"longitude":-2.739251703,"stationOperator":"VT","crsCode":"RUN"},{"name":"Stafford","latitude":52.80390859,"longitude":-2.122036782,"stationOperator":"VT","crsCode":"STA"},{"name":"Stockport","latitude":53.40555627,"longitude":-2.163011702,"stationOperator":"VT","crsCode":"SPT"},{"name":"Stoke-on-Trent","latitude":53.00799558,"longitude":-2.180988926,"stationOperator":"VT","crsCode":"SOT"},{"name":"Warrington Bank Quay","latitude":53.38553871,"longitude":-2.602849785,"stationOperator":"VT","crsCode":"WBQ"},{"name":"Wigan North Western","latitude":53.54345134,"longitude":-2.633130699,"stationOperator":"VT","crsCode":"WGN"},{"name":"Wolverhampton","latitude":52.58785715,"longitude":-2.119516893,"stationOperator":"VT","crsCode":"WVH"},{"name":"Prestwick International Airport","latitude":55.5090299591,"longitude":-4.614160474,"stationOperator":"XG","crsCode":"PRA"},{"name":"Brentwood","latitude":51.6136457809,"longitude":0.3001535395,"stationOperator":"XR","crsCode":"BRE"},{"name":"Chadwell Heath","latitude":51.568044268,"longitude":0.1289703577,"stationOperator":"XR","crsCode":"CTH"},{"name":"Forest Gate","latitude":51.5494371822,"longitude":0.0243617394,"stationOperator":"XR","crsCode":"FOG"},{"name":"Gidea Park","latitude":51.5819097026,"longitude":0.2059785609,"stationOperator":"XR","crsCode":"GDP"},{"name":"Goodmayes","latitude":51.5661978709,"longitude":0.1117127319,"stationOperator":"XR","crsCode":"GMY"},{"name":"Harold Wood","latitude":51.59324565,"longitude":0.234249821,"stationOperator":"XR","crsCode":"HRO"},{"name":"Ilford","latitude":51.5591407316,"longitude":0.068680603,"stationOperator":"XR","crsCode":"IFD"},{"name":"Manor Park","latitude":51.5523565062,"longitude":0.0452924304,"stationOperator":"XR","crsCode":"MNP"},{"name":"Maryland","latitude":51.5458397394,"longitude":0.0060578399,"stationOperator":"XR","crsCode":"MYL"},{"name":"Romford","latitude":51.57483462,"longitude":0.183250919,"stationOperator":"XR","crsCode":"RMF"},{"name":"Seven Kings","latitude":51.5640458726,"longitude":0.0963182717,"stationOperator":"XR","crsCode":"SVK"},{"name":"Stratford (London)","latitude":51.5413741484,"longitude":-0.0036568449,"stationOperator":"XR","crsCode":"SRA"},{"name":"Southend Airport","latitude":51.568691,"longitude":0.704052,"stationOperator":"XS","crsCode":"SIA"},{"name":"Heathrow Airport Terminal 4","latitude":51.4582712542,"longitude":-0.4454539639,"stationOperator":"HX","crsCode":"HAF"},{"name":"Heathrow Airport Terminal 5","latitude":51.4700565929,"longitude":-0.4905807301,"stationOperator":"HX","crsCode":"HWV"},{"name":"Heathrow Airport Terminals 1, 2 and 3","latitude":51.47273,"longitude":-0.45072,"stationOperator":"HX","crsCode":"HXX"},{"name":"Farringdon","latitude":51.52053,"longitude":-0.10504,"stationOperator":"LT","crsCode":"ZFD"},{"name":"High Street Kensington Underground","latitude":51.3002,"longitude":-0.1133,"stationOperator":"ZZ","crsCode":"ZHS"},{"name":"Old Street","latitude":51.5258365574,"longitude":-0.0885295811,"stationOperator":"LT","crsCode":"OLD"}];

},{}],"/Users/emmanash/hacks/rail-fyi-client/app/js/index.js":[function(require,module,exports){
(function (process){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Routes = require('./Routes');

var _Routes2 = _interopRequireDefault(_Routes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (process.env.NODE_ENV !== 'production') {
  // Enable React devtools
  window.React = _react2.default;
}

_reactDom2.default.render(_Routes2.default, document.getElementById('app'));

}).call(this,require('_process'))

},{"./Routes":"/Users/emmanash/hacks/rail-fyi-client/app/js/Routes.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js","react-dom":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-dom/index.js"}],"/Users/emmanash/hacks/rail-fyi-client/app/js/pages/HomePage.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  currentUser: _react2.default.PropTypes.object
};

var HomePage = function (_React$Component) {
  _inherits(HomePage, _React$Component);

  function HomePage(props) {
    _classCallCheck(this, HomePage);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(HomePage).call(this, props));
  }

  _createClass(HomePage, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'section',
        { className: 'home-page' },
        _react2.default.createElement(
          'div',
          null,
          'Home'
        ),
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            _reactRouter.Link,
            { to: '/search' },
            'Search'
          )
        )
      );
    }
  }]);

  return HomePage;
}(_react2.default.Component);

HomePage.propTypes = propTypes;

exports.default = HomePage;

},{"react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js","react-router":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/index.js"}],"/Users/emmanash/hacks/rail-fyi-client/app/js/pages/NotFoundPage.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  currentUser: _react2.default.PropTypes.object
};

var NotFoundPage = function (_React$Component) {
  _inherits(NotFoundPage, _React$Component);

  function NotFoundPage(props) {
    _classCallCheck(this, NotFoundPage);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(NotFoundPage).call(this, props));
  }

  _createClass(NotFoundPage, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'section',
        { className: 'not-found-page' },
        'Page Not Found'
      );
    }
  }]);

  return NotFoundPage;
}(_react2.default.Component);

NotFoundPage.propTypes = propTypes;

exports.default = NotFoundPage;

},{"react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/app/js/pages/SearchPage.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  currentUser: _react2.default.PropTypes.object
};

var SearchPage = function (_React$Component) {
  _inherits(SearchPage, _React$Component);

  function SearchPage(props) {
    _classCallCheck(this, SearchPage);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SearchPage).call(this, props));

    _this.handleQueryChange = _this.handleQueryChange.bind(_this);

    _this.state = {
      query: ''
    };
    return _this;
  }

  _createClass(SearchPage, [{
    key: 'handleQueryChange',
    value: function handleQueryChange(evt) {
      this.setState({
        query: evt.target.value
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'section',
        { className: 'search-page' },
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'h1',
            null,
            'Search'
          ),
          _react2.default.createElement(
            'h2',
            null,
            'Your query: ',
            _react2.default.createElement(
              'span',
              { ref: 'queryDisplay' },
              this.state.query
            )
          ),
          _react2.default.createElement('input', { type: 'text', onChange: this.handleQueryChange, ref: 'searchInput' })
        ),
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            _reactRouter.Link,
            { to: '/' },
            'Back to Home'
          )
        )
      );
    }
  }]);

  return SearchPage;
}(_react2.default.Component);

SearchPage.propTypes = propTypes;

exports.default = SearchPage;

},{"react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js","react-router":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/index.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/Actions.js":[function(require,module,exports){
/**
 * Indicates that navigation was caused by a call to history.push.
 */
'use strict';

exports.__esModule = true;
var PUSH = 'PUSH';

exports.PUSH = PUSH;
/**
 * Indicates that navigation was caused by a call to history.replace.
 */
var REPLACE = 'REPLACE';

exports.REPLACE = REPLACE;
/**
 * Indicates that navigation was caused by some other action such
 * as using a browser's back/forward buttons and/or manually manipulating
 * the URL in a browser's location bar. This is the default.
 *
 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
 * for more information.
 */
var POP = 'POP';

exports.POP = POP;
exports['default'] = {
  PUSH: PUSH,
  REPLACE: REPLACE,
  POP: POP
};
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/AsyncUtils.js":[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports.loopAsync = loopAsync;

function loopAsync(turns, work, callback) {
  var currentTurn = 0;
  var isDone = false;

  function done() {
    isDone = true;
    callback.apply(this, arguments);
  }

  function next() {
    if (isDone) return;

    if (currentTurn < turns) {
      work.call(this, currentTurn++, next, done);
    } else {
      done.apply(this, arguments);
    }
  }

  next();
}
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/DOMStateStorage.js":[function(require,module,exports){
(function (process){
/*eslint-disable no-empty */
'use strict';

exports.__esModule = true;
exports.saveState = saveState;
exports.readState = readState;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var KeyPrefix = '@@History/';
var QuotaExceededError = 'QuotaExceededError';
var SecurityError = 'SecurityError';

function createKey(key) {
  return KeyPrefix + key;
}

function saveState(key, state) {
  try {
    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
  } catch (error) {
    if (error.name === SecurityError) {
      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
      // attempt to access window.sessionStorage.
      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;

      return;
    }

    if (error.name === QuotaExceededError && window.sessionStorage.length === 0) {
      // Safari "private mode" throws QuotaExceededError.
      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;

      return;
    }

    throw error;
  }
}

function readState(key) {
  var json = undefined;
  try {
    json = window.sessionStorage.getItem(createKey(key));
  } catch (error) {
    if (error.name === SecurityError) {
      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
      // attempt to access window.sessionStorage.
      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;

      return null;
    }
  }

  if (json) {
    try {
      return JSON.parse(json);
    } catch (error) {
      // Ignore invalid JSON.
    }
  }

  return null;
}
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/warning/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/DOMUtils.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.addEventListener = addEventListener;
exports.removeEventListener = removeEventListener;
exports.getHashPath = getHashPath;
exports.replaceHashPath = replaceHashPath;
exports.getWindowPath = getWindowPath;
exports.go = go;
exports.getUserConfirmation = getUserConfirmation;
exports.supportsHistory = supportsHistory;
exports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;

function addEventListener(node, event, listener) {
  if (node.addEventListener) {
    node.addEventListener(event, listener, false);
  } else {
    node.attachEvent('on' + event, listener);
  }
}

function removeEventListener(node, event, listener) {
  if (node.removeEventListener) {
    node.removeEventListener(event, listener, false);
  } else {
    node.detachEvent('on' + event, listener);
  }
}

function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  return window.location.href.split('#')[1] || '';
}

function replaceHashPath(path) {
  window.location.replace(window.location.pathname + window.location.search + '#' + path);
}

function getWindowPath() {
  return window.location.pathname + window.location.search + window.location.hash;
}

function go(n) {
  if (n) window.history.go(n);
}

function getUserConfirmation(message, callback) {
  callback(window.confirm(message));
}

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
 */

function supportsHistory() {
  var ua = navigator.userAgent;
  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
    return false;
  }
  // FIXME: Work around our browser history not working correctly on Chrome
  // iOS: https://github.com/rackt/react-router/issues/2565
  if (ua.indexOf('CriOS') !== -1) {
    return false;
  }
  return window.history && 'pushState' in window.history;
}

/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */

function supportsGoWithoutReloadUsingHash() {
  var ua = navigator.userAgent;
  return ua.indexOf('Firefox') === -1;
}
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/ExecutionEnvironment.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
exports.canUseDOM = canUseDOM;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createBrowserHistory.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _Actions = require('./Actions');

var _ExecutionEnvironment = require('./ExecutionEnvironment');

var _DOMUtils = require('./DOMUtils');

var _DOMStateStorage = require('./DOMStateStorage');

var _createDOMHistory = require('./createDOMHistory');

var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

/**
 * Creates and returns a history object that uses HTML5's history API
 * (pushState, replaceState, and the popstate event) to manage history.
 * This is the recommended method of managing history in browsers because
 * it provides the cleanest URLs.
 *
 * Note: In browsers that do not support the HTML5 history API full
 * page reloads will be used to preserve URLs.
 */
function createBrowserHistory() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;

  var forceRefresh = options.forceRefresh;

  var isSupported = _DOMUtils.supportsHistory();
  var useRefresh = !isSupported || forceRefresh;

  function getCurrentLocation(historyState) {
    historyState = historyState || window.history.state || {};

    var path = _DOMUtils.getWindowPath();
    var _historyState = historyState;
    var key = _historyState.key;

    var state = undefined;
    if (key) {
      state = _DOMStateStorage.readState(key);
    } else {
      state = null;
      key = history.createKey();

      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);
    }

    var location = _parsePath2['default'](path);

    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
  }

  function startPopStateListener(_ref) {
    var transitionTo = _ref.transitionTo;

    function popStateListener(event) {
      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.

      transitionTo(getCurrentLocation(event.state));
    }

    _DOMUtils.addEventListener(window, 'popstate', popStateListener);

    return function () {
      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);
    };
  }

  function finishTransition(location) {
    var basename = location.basename;
    var pathname = location.pathname;
    var search = location.search;
    var hash = location.hash;
    var state = location.state;
    var action = location.action;
    var key = location.key;

    if (action === _Actions.POP) return; // Nothing to do.

    _DOMStateStorage.saveState(key, state);

    var path = (basename || '') + pathname + search + hash;
    var historyState = {
      key: key
    };

    if (action === _Actions.PUSH) {
      if (useRefresh) {
        window.location.href = path;
        return false; // Prevent location update.
      } else {
          window.history.pushState(historyState, null, path);
        }
    } else {
      // REPLACE
      if (useRefresh) {
        window.location.replace(path);
        return false; // Prevent location update.
      } else {
          window.history.replaceState(historyState, null, path);
        }
    }
  }

  var history = _createDOMHistory2['default'](_extends({}, options, {
    getCurrentLocation: getCurrentLocation,
    finishTransition: finishTransition,
    saveState: _DOMStateStorage.saveState
  }));

  var listenerCount = 0,
      stopPopStateListener = undefined;

  function listenBefore(listener) {
    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

    var unlisten = history.listenBefore(listener);

    return function () {
      unlisten();

      if (--listenerCount === 0) stopPopStateListener();
    };
  }

  function listen(listener) {
    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

    var unlisten = history.listen(listener);

    return function () {
      unlisten();

      if (--listenerCount === 0) stopPopStateListener();
    };
  }

  // deprecated
  function registerTransitionHook(hook) {
    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

    history.registerTransitionHook(hook);
  }

  // deprecated
  function unregisterTransitionHook(hook) {
    history.unregisterTransitionHook(hook);

    if (--listenerCount === 0) stopPopStateListener();
  }

  return _extends({}, history, {
    listenBefore: listenBefore,
    listen: listen,
    registerTransitionHook: registerTransitionHook,
    unregisterTransitionHook: unregisterTransitionHook
  });
}

exports['default'] = createBrowserHistory;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./Actions":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/Actions.js","./DOMStateStorage":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/DOMStateStorage.js","./DOMUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/DOMUtils.js","./ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/ExecutionEnvironment.js","./createDOMHistory":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createDOMHistory.js","./parsePath":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/parsePath.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/invariant/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createDOMHistory.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _ExecutionEnvironment = require('./ExecutionEnvironment');

var _DOMUtils = require('./DOMUtils');

var _createHistory = require('./createHistory');

var _createHistory2 = _interopRequireDefault(_createHistory);

function createDOMHistory(options) {
  var history = _createHistory2['default'](_extends({
    getUserConfirmation: _DOMUtils.getUserConfirmation
  }, options, {
    go: _DOMUtils.go
  }));

  function listen(listener) {
    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;

    return history.listen(listener);
  }

  return _extends({}, history, {
    listen: listen
  });
}

exports['default'] = createDOMHistory;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./DOMUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/DOMUtils.js","./ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/ExecutionEnvironment.js","./createHistory":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createHistory.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/invariant/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createHashHistory.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _Actions = require('./Actions');

var _ExecutionEnvironment = require('./ExecutionEnvironment');

var _DOMUtils = require('./DOMUtils');

var _DOMStateStorage = require('./DOMStateStorage');

var _createDOMHistory = require('./createDOMHistory');

var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

function isAbsolutePath(path) {
  return typeof path === 'string' && path.charAt(0) === '/';
}

function ensureSlash() {
  var path = _DOMUtils.getHashPath();

  if (isAbsolutePath(path)) return true;

  _DOMUtils.replaceHashPath('/' + path);

  return false;
}

function addQueryStringValueToPath(path, key, value) {
  return path + (path.indexOf('?') === -1 ? '?' : '&') + (key + '=' + value);
}

function stripQueryStringValueFromPath(path, key) {
  return path.replace(new RegExp('[?&]?' + key + '=[a-zA-Z0-9]+'), '');
}

function getQueryStringValueFromPath(path, key) {
  var match = path.match(new RegExp('\\?.*?\\b' + key + '=(.+?)\\b'));
  return match && match[1];
}

var DefaultQueryKey = '_k';

function createHashHistory() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Hash history needs a DOM') : _invariant2['default'](false) : undefined;

  var queryKey = options.queryKey;

  if (queryKey === undefined || !!queryKey) queryKey = typeof queryKey === 'string' ? queryKey : DefaultQueryKey;

  function getCurrentLocation() {
    var path = _DOMUtils.getHashPath();

    var key = undefined,
        state = undefined;
    if (queryKey) {
      key = getQueryStringValueFromPath(path, queryKey);
      path = stripQueryStringValueFromPath(path, queryKey);

      if (key) {
        state = _DOMStateStorage.readState(key);
      } else {
        state = null;
        key = history.createKey();
        _DOMUtils.replaceHashPath(addQueryStringValueToPath(path, queryKey, key));
      }
    } else {
      key = state = null;
    }

    var location = _parsePath2['default'](path);

    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
  }

  function startHashChangeListener(_ref) {
    var transitionTo = _ref.transitionTo;

    function hashChangeListener() {
      if (!ensureSlash()) return; // Always make sure hashes are preceeded with a /.

      transitionTo(getCurrentLocation());
    }

    ensureSlash();
    _DOMUtils.addEventListener(window, 'hashchange', hashChangeListener);

    return function () {
      _DOMUtils.removeEventListener(window, 'hashchange', hashChangeListener);
    };
  }

  function finishTransition(location) {
    var basename = location.basename;
    var pathname = location.pathname;
    var search = location.search;
    var state = location.state;
    var action = location.action;
    var key = location.key;

    if (action === _Actions.POP) return; // Nothing to do.

    var path = (basename || '') + pathname + search;

    if (queryKey) {
      path = addQueryStringValueToPath(path, queryKey, key);
      _DOMStateStorage.saveState(key, state);
    } else {
      // Drop key and state.
      location.key = location.state = null;
    }

    var currentHash = _DOMUtils.getHashPath();

    if (action === _Actions.PUSH) {
      if (currentHash !== path) {
        window.location.hash = path;
      } else {
        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'You cannot PUSH the same path using hash history') : undefined;
      }
    } else if (currentHash !== path) {
      // REPLACE
      _DOMUtils.replaceHashPath(path);
    }
  }

  var history = _createDOMHistory2['default'](_extends({}, options, {
    getCurrentLocation: getCurrentLocation,
    finishTransition: finishTransition,
    saveState: _DOMStateStorage.saveState
  }));

  var listenerCount = 0,
      stopHashChangeListener = undefined;

  function listenBefore(listener) {
    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

    var unlisten = history.listenBefore(listener);

    return function () {
      unlisten();

      if (--listenerCount === 0) stopHashChangeListener();
    };
  }

  function listen(listener) {
    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

    var unlisten = history.listen(listener);

    return function () {
      unlisten();

      if (--listenerCount === 0) stopHashChangeListener();
    };
  }

  function push(location) {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

    history.push(location);
  }

  function replace(location) {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

    history.replace(location);
  }

  var goIsSupportedWithoutReload = _DOMUtils.supportsGoWithoutReloadUsingHash();

  function go(n) {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : undefined;

    history.go(n);
  }

  function createHref(path) {
    return '#' + history.createHref(path);
  }

  // deprecated
  function registerTransitionHook(hook) {
    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

    history.registerTransitionHook(hook);
  }

  // deprecated
  function unregisterTransitionHook(hook) {
    history.unregisterTransitionHook(hook);

    if (--listenerCount === 0) stopHashChangeListener();
  }

  // deprecated
  function pushState(state, path) {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

    history.pushState(state, path);
  }

  // deprecated
  function replaceState(state, path) {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

    history.replaceState(state, path);
  }

  return _extends({}, history, {
    listenBefore: listenBefore,
    listen: listen,
    push: push,
    replace: replace,
    go: go,
    createHref: createHref,

    registerTransitionHook: registerTransitionHook, // deprecated - warning is in createHistory
    unregisterTransitionHook: unregisterTransitionHook, // deprecated - warning is in createHistory
    pushState: pushState, // deprecated - warning is in createHistory
    replaceState: replaceState // deprecated - warning is in createHistory
  });
}

exports['default'] = createHashHistory;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./Actions":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/Actions.js","./DOMStateStorage":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/DOMStateStorage.js","./DOMUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/DOMUtils.js","./ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/ExecutionEnvironment.js","./createDOMHistory":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createDOMHistory.js","./parsePath":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/parsePath.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/invariant/browser.js","warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/warning/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createHistory.js":[function(require,module,exports){
//import warning from 'warning'
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _deepEqual = require('deep-equal');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _AsyncUtils = require('./AsyncUtils');

var _Actions = require('./Actions');

var _createLocation2 = require('./createLocation');

var _createLocation3 = _interopRequireDefault(_createLocation2);

var _runTransitionHook = require('./runTransitionHook');

var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

var _deprecate = require('./deprecate');

var _deprecate2 = _interopRequireDefault(_deprecate);

function createRandomKey(length) {
  return Math.random().toString(36).substr(2, length);
}

function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search &&
  //a.action === b.action && // Different action !== location change.
  a.key === b.key && _deepEqual2['default'](a.state, b.state);
}

var DefaultKeyLength = 6;

function createHistory() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var getCurrentLocation = options.getCurrentLocation;
  var finishTransition = options.finishTransition;
  var saveState = options.saveState;
  var go = options.go;
  var keyLength = options.keyLength;
  var getUserConfirmation = options.getUserConfirmation;

  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;

  var transitionHooks = [];

  function listenBefore(hook) {
    transitionHooks.push(hook);

    return function () {
      transitionHooks = transitionHooks.filter(function (item) {
        return item !== hook;
      });
    };
  }

  var allKeys = [];
  var changeListeners = [];
  var location = undefined;

  function getCurrent() {
    if (pendingLocation && pendingLocation.action === _Actions.POP) {
      return allKeys.indexOf(pendingLocation.key);
    } else if (location) {
      return allKeys.indexOf(location.key);
    } else {
      return -1;
    }
  }

  function updateLocation(newLocation) {
    var current = getCurrent();

    location = newLocation;

    if (location.action === _Actions.PUSH) {
      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);
    } else if (location.action === _Actions.REPLACE) {
      allKeys[current] = location.key;
    }

    changeListeners.forEach(function (listener) {
      listener(location);
    });
  }

  function listen(listener) {
    changeListeners.push(listener);

    if (location) {
      listener(location);
    } else {
      var _location = getCurrentLocation();
      allKeys = [_location.key];
      updateLocation(_location);
    }

    return function () {
      changeListeners = changeListeners.filter(function (item) {
        return item !== listener;
      });
    };
  }

  function confirmTransitionTo(location, callback) {
    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {
      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {
        if (result != null) {
          done(result);
        } else {
          next();
        }
      });
    }, function (message) {
      if (getUserConfirmation && typeof message === 'string') {
        getUserConfirmation(message, function (ok) {
          callback(ok !== false);
        });
      } else {
        callback(message !== false);
      }
    });
  }

  var pendingLocation = undefined;

  function transitionTo(nextLocation) {
    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.

    pendingLocation = nextLocation;

    confirmTransitionTo(nextLocation, function (ok) {
      if (pendingLocation !== nextLocation) return; // Transition was interrupted.

      if (ok) {
        // treat PUSH to current path like REPLACE to be consistent with browsers
        if (nextLocation.action === _Actions.PUSH) {
          var prevPath = createPath(location);
          var nextPath = createPath(nextLocation);

          if (nextPath === prevPath) nextLocation.action = _Actions.REPLACE;
        }

        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);
      } else if (location && nextLocation.action === _Actions.POP) {
        var prevIndex = allKeys.indexOf(location.key);
        var nextIndex = allKeys.indexOf(nextLocation.key);

        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.
      }
    });
  }

  function push(location) {
    transitionTo(createLocation(location, _Actions.PUSH, createKey()));
  }

  function replace(location) {
    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  function createKey() {
    return createRandomKey(keyLength);
  }

  function createPath(location) {
    if (location == null || typeof location === 'string') return location;

    var pathname = location.pathname;
    var search = location.search;
    var hash = location.hash;

    var result = pathname;

    if (search) result += search;

    if (hash) result += hash;

    return result;
  }

  function createHref(location) {
    return createPath(location);
  }

  function createLocation(location, action) {
    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];

    if (typeof action === 'object') {
      //warning(
      //  false,
      //  'The state (2nd) argument to history.createLocation is deprecated; use a ' +
      //  'location descriptor instead'
      //)

      if (typeof location === 'string') location = _parsePath2['default'](location);

      location = _extends({}, location, { state: action });

      action = key;
      key = arguments[3] || createKey();
    }

    return _createLocation3['default'](location, action, key);
  }

  // deprecated
  function setState(state) {
    if (location) {
      updateLocationState(location, state);
      updateLocation(location);
    } else {
      updateLocationState(getCurrentLocation(), state);
    }
  }

  function updateLocationState(location, state) {
    location.state = _extends({}, location.state, state);
    saveState(location.key, location.state);
  }

  // deprecated
  function registerTransitionHook(hook) {
    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);
  }

  // deprecated
  function unregisterTransitionHook(hook) {
    transitionHooks = transitionHooks.filter(function (item) {
      return item !== hook;
    });
  }

  // deprecated
  function pushState(state, path) {
    if (typeof path === 'string') path = _parsePath2['default'](path);

    push(_extends({ state: state }, path));
  }

  // deprecated
  function replaceState(state, path) {
    if (typeof path === 'string') path = _parsePath2['default'](path);

    replace(_extends({ state: state }, path));
  }

  return {
    listenBefore: listenBefore,
    listen: listen,
    transitionTo: transitionTo,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    createKey: createKey,
    createPath: createPath,
    createHref: createHref,
    createLocation: createLocation,

    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),
    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),
    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),
    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
  };
}

exports['default'] = createHistory;
module.exports = exports['default'];
},{"./Actions":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/Actions.js","./AsyncUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/AsyncUtils.js","./createLocation":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createLocation.js","./deprecate":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/deprecate.js","./parsePath":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/parsePath.js","./runTransitionHook":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/runTransitionHook.js","deep-equal":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/deep-equal/index.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createLocation.js":[function(require,module,exports){
//import warning from 'warning'
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Actions = require('./Actions');

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

function createLocation() {
  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

  if (typeof location === 'string') location = _parsePath2['default'](location);

  if (typeof action === 'object') {
    //warning(
    //  false,
    //  'The state (2nd) argument to createLocation is deprecated; use a ' +
    //  'location descriptor instead'
    //)

    location = _extends({}, location, { state: action });

    action = key || _Actions.POP;
    key = _fourthArg;
  }

  var pathname = location.pathname || '/';
  var search = location.search || '';
  var hash = location.hash || '';
  var state = location.state || null;

  return {
    pathname: pathname,
    search: search,
    hash: hash,
    state: state,
    action: action,
    key: key
  };
}

exports['default'] = createLocation;
module.exports = exports['default'];
},{"./Actions":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/Actions.js","./parsePath":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/parsePath.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createMemoryHistory.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _Actions = require('./Actions');

var _createHistory = require('./createHistory');

var _createHistory2 = _interopRequireDefault(_createHistory);

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

function createStateStorage(entries) {
  return entries.filter(function (entry) {
    return entry.state;
  }).reduce(function (memo, entry) {
    memo[entry.key] = entry.state;
    return memo;
  }, {});
}

function createMemoryHistory() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  if (Array.isArray(options)) {
    options = { entries: options };
  } else if (typeof options === 'string') {
    options = { entries: [options] };
  }

  var history = _createHistory2['default'](_extends({}, options, {
    getCurrentLocation: getCurrentLocation,
    finishTransition: finishTransition,
    saveState: saveState,
    go: go
  }));

  var _options = options;
  var entries = _options.entries;
  var current = _options.current;

  if (typeof entries === 'string') {
    entries = [entries];
  } else if (!Array.isArray(entries)) {
    entries = ['/'];
  }

  entries = entries.map(function (entry) {
    var key = history.createKey();

    if (typeof entry === 'string') return { pathname: entry, key: key };

    if (typeof entry === 'object' && entry) return _extends({}, entry, { key: key });

    !false ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Unable to create history entry from %s', entry) : _invariant2['default'](false) : undefined;
  });

  if (current == null) {
    current = entries.length - 1;
  } else {
    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : _invariant2['default'](false) : undefined;
  }

  var storage = createStateStorage(entries);

  function saveState(key, state) {
    storage[key] = state;
  }

  function readState(key) {
    return storage[key];
  }

  function getCurrentLocation() {
    var entry = entries[current];
    var key = entry.key;
    var basename = entry.basename;
    var pathname = entry.pathname;
    var search = entry.search;

    var path = (basename || '') + pathname + (search || '');

    var state = undefined;
    if (key) {
      state = readState(key);
    } else {
      state = null;
      key = history.createKey();
      entry.key = key;
    }

    var location = _parsePath2['default'](path);

    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
  }

  function canGo(n) {
    var index = current + n;
    return index >= 0 && index < entries.length;
  }

  function go(n) {
    if (n) {
      if (!canGo(n)) {
        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Cannot go(%s) there is not enough history', n) : undefined;
        return;
      }

      current += n;

      var currentLocation = getCurrentLocation();

      // change action to POP
      history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
    }
  }

  function finishTransition(location) {
    switch (location.action) {
      case _Actions.PUSH:
        current += 1;

        // if we are not on the top of stack
        // remove rest and push new
        if (current < entries.length) entries.splice(current);

        entries.push(location);
        saveState(location.key, location.state);
        break;
      case _Actions.REPLACE:
        entries[current] = location;
        saveState(location.key, location.state);
        break;
    }
  }

  return history;
}

exports['default'] = createMemoryHistory;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./Actions":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/Actions.js","./createHistory":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createHistory.js","./parsePath":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/parsePath.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/invariant/browser.js","warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/warning/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/deprecate.js":[function(require,module,exports){
//import warning from 'warning'

"use strict";

exports.__esModule = true;
function deprecate(fn) {
  return fn;
  //return function () {
  //  warning(false, '[history] ' + message)
  //  return fn.apply(this, arguments)
  //}
}

exports["default"] = deprecate;
module.exports = exports["default"];
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/extractPath.js":[function(require,module,exports){
"use strict";

exports.__esModule = true;
function extractPath(string) {
  var match = string.match(/^https?:\/\/[^\/]*/);

  if (match == null) return string;

  return string.substring(match[0].length);
}

exports["default"] = extractPath;
module.exports = exports["default"];
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/parsePath.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _extractPath = require('./extractPath');

var _extractPath2 = _interopRequireDefault(_extractPath);

function parsePath(path) {
  var pathname = _extractPath2['default'](path);
  var search = '';
  var hash = '';

  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like "%s"', path) : undefined;

  var hashIndex = pathname.indexOf('#');
  if (hashIndex !== -1) {
    hash = pathname.substring(hashIndex);
    pathname = pathname.substring(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');
  if (searchIndex !== -1) {
    search = pathname.substring(searchIndex);
    pathname = pathname.substring(0, searchIndex);
  }

  if (pathname === '') pathname = '/';

  return {
    pathname: pathname,
    search: search,
    hash: hash
  };
}

exports['default'] = parsePath;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./extractPath":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/extractPath.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/warning/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/runTransitionHook.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

function runTransitionHook(hook, location, callback) {
  var result = hook(location, callback);

  if (hook.length < 2) {
    // Assume the hook runs synchronously and automatically
    // call the callback with the return value.
    callback(result);
  } else {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not "return" in a transition hook with a callback argument; call the callback instead') : undefined;
  }
}

exports['default'] = runTransitionHook;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/warning/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/useBasename.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _ExecutionEnvironment = require('./ExecutionEnvironment');

var _runTransitionHook = require('./runTransitionHook');

var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

var _extractPath = require('./extractPath');

var _extractPath2 = _interopRequireDefault(_extractPath);

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

var _deprecate = require('./deprecate');

var _deprecate2 = _interopRequireDefault(_deprecate);

function useBasename(createHistory) {
  return function () {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var basename = options.basename;

    var historyOptions = _objectWithoutProperties(options, ['basename']);

    var history = createHistory(historyOptions);

    // Automatically use the value of <base href> in HTML
    // documents as basename if it's not explicitly given.
    if (basename == null && _ExecutionEnvironment.canUseDOM) {
      var base = document.getElementsByTagName('base')[0];

      if (base) basename = _extractPath2['default'](base.href);
    }

    function addBasename(location) {
      if (basename && location.basename == null) {
        if (location.pathname.indexOf(basename) === 0) {
          location.pathname = location.pathname.substring(basename.length);
          location.basename = basename;

          if (location.pathname === '') location.pathname = '/';
        } else {
          location.basename = '';
        }
      }

      return location;
    }

    function prependBasename(location) {
      if (!basename) return location;

      if (typeof location === 'string') location = _parsePath2['default'](location);

      var pname = location.pathname;
      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
      var pathname = normalizedBasename + normalizedPathname;

      return _extends({}, location, {
        pathname: pathname
      });
    }

    // Override all read methods with basename-aware versions.
    function listenBefore(hook) {
      return history.listenBefore(function (location, callback) {
        _runTransitionHook2['default'](hook, addBasename(location), callback);
      });
    }

    function listen(listener) {
      return history.listen(function (location) {
        listener(addBasename(location));
      });
    }

    // Override all write methods with basename-aware versions.
    function push(location) {
      history.push(prependBasename(location));
    }

    function replace(location) {
      history.replace(prependBasename(location));
    }

    function createPath(location) {
      return history.createPath(prependBasename(location));
    }

    function createHref(location) {
      return history.createHref(prependBasename(location));
    }

    function createLocation() {
      return addBasename(history.createLocation.apply(history, arguments));
    }

    // deprecated
    function pushState(state, path) {
      if (typeof path === 'string') path = _parsePath2['default'](path);

      push(_extends({ state: state }, path));
    }

    // deprecated
    function replaceState(state, path) {
      if (typeof path === 'string') path = _parsePath2['default'](path);

      replace(_extends({ state: state }, path));
    }

    return _extends({}, history, {
      listenBefore: listenBefore,
      listen: listen,
      push: push,
      replace: replace,
      createPath: createPath,
      createHref: createHref,
      createLocation: createLocation,

      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
    });
  };
}

exports['default'] = useBasename;
module.exports = exports['default'];
},{"./ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/ExecutionEnvironment.js","./deprecate":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/deprecate.js","./extractPath":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/extractPath.js","./parsePath":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/parsePath.js","./runTransitionHook":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/runTransitionHook.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/useQueries.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _queryString = require('query-string');

var _runTransitionHook = require('./runTransitionHook');

var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

var _deprecate = require('./deprecate');

var _deprecate2 = _interopRequireDefault(_deprecate);

var SEARCH_BASE_KEY = '$searchBase';

function defaultStringifyQuery(query) {
  return _queryString.stringify(query).replace(/%20/g, '+');
}

var defaultParseQueryString = _queryString.parse;

function isNestedObject(object) {
  for (var p in object) {
    if (object.hasOwnProperty(p) && typeof object[p] === 'object' && !Array.isArray(object[p]) && object[p] !== null) return true;
  }return false;
}

/**
 * Returns a new createHistory function that may be used to create
 * history objects that know how to handle URL queries.
 */
function useQueries(createHistory) {
  return function () {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var stringifyQuery = options.stringifyQuery;
    var parseQueryString = options.parseQueryString;

    var historyOptions = _objectWithoutProperties(options, ['stringifyQuery', 'parseQueryString']);

    var history = createHistory(historyOptions);

    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

    function addQuery(location) {
      if (location.query == null) {
        var search = location.search;

        location.query = parseQueryString(search.substring(1));
        location[SEARCH_BASE_KEY] = { search: search, searchBase: '' };
      }

      // TODO: Instead of all the book-keeping here, this should just strip the
      // stringified query from the search.

      return location;
    }

    function appendQuery(location, query) {
      var _extends2;

      var queryString = undefined;
      if (!query || (queryString = stringifyQuery(query)) === '') return location;

      process.env.NODE_ENV !== 'production' ? _warning2['default'](stringifyQuery !== defaultStringifyQuery || !isNestedObject(query), 'useQueries does not stringify nested query objects by default; ' + 'use a custom stringifyQuery function') : undefined;

      if (typeof location === 'string') location = _parsePath2['default'](location);

      var searchBaseSpec = location[SEARCH_BASE_KEY];
      var searchBase = undefined;
      if (searchBaseSpec && location.search === searchBaseSpec.search) {
        searchBase = searchBaseSpec.searchBase;
      } else {
        searchBase = location.search || '';
      }

      var search = searchBase + (searchBase ? '&' : '?') + queryString;

      return _extends({}, location, (_extends2 = {
        search: search
      }, _extends2[SEARCH_BASE_KEY] = { search: search, searchBase: searchBase }, _extends2));
    }

    // Override all read methods with query-aware versions.
    function listenBefore(hook) {
      return history.listenBefore(function (location, callback) {
        _runTransitionHook2['default'](hook, addQuery(location), callback);
      });
    }

    function listen(listener) {
      return history.listen(function (location) {
        listener(addQuery(location));
      });
    }

    // Override all write methods with query-aware versions.
    function push(location) {
      history.push(appendQuery(location, location.query));
    }

    function replace(location) {
      history.replace(appendQuery(location, location.query));
    }

    function createPath(location, query) {
      //warning(
      //  !query,
      //  'the query argument to createPath is deprecated; use a location descriptor instead'
      //)
      return history.createPath(appendQuery(location, query || location.query));
    }

    function createHref(location, query) {
      //warning(
      //  !query,
      //  'the query argument to createHref is deprecated; use a location descriptor instead'
      //)
      return history.createHref(appendQuery(location, query || location.query));
    }

    function createLocation() {
      return addQuery(history.createLocation.apply(history, arguments));
    }

    // deprecated
    function pushState(state, path, query) {
      if (typeof path === 'string') path = _parsePath2['default'](path);

      push(_extends({ state: state }, path, { query: query }));
    }

    // deprecated
    function replaceState(state, path, query) {
      if (typeof path === 'string') path = _parsePath2['default'](path);

      replace(_extends({ state: state }, path, { query: query }));
    }

    return _extends({}, history, {
      listenBefore: listenBefore,
      listen: listen,
      push: push,
      replace: replace,
      createPath: createPath,
      createHref: createHref,
      createLocation: createLocation,

      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
    });
  };
}

exports['default'] = useQueries;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./deprecate":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/deprecate.js","./parsePath":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/parsePath.js","./runTransitionHook":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/runTransitionHook.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","query-string":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/query-string/index.js","warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/warning/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/deep-equal/index.js":[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/deep-equal/lib/is_arguments.js","./lib/keys.js":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/deep-equal/lib/keys.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/deep-equal/lib/is_arguments.js":[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/deep-equal/lib/keys.js":[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/invariant/browser.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/query-string/index.js":[function(require,module,exports){
'use strict';
var strictUriEncode = require('strict-uri-encode');

exports.extract = function (str) {
	return str.split('?')[1] || '';
};

exports.parse = function (str) {
	if (typeof str !== 'string') {
		return {};
	}

	str = str.trim().replace(/^(\?|#|&)/, '');

	if (!str) {
		return {};
	}

	return str.split('&').reduce(function (ret, param) {
		var parts = param.replace(/\+/g, ' ').split('=');
		// Firefox (pre 40) decodes `%3D` to `=`
		// https://github.com/sindresorhus/query-string/pull/37
		var key = parts.shift();
		var val = parts.length > 0 ? parts.join('=') : undefined;

		key = decodeURIComponent(key);

		// missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		val = val === undefined ? null : decodeURIComponent(val);

		if (!ret.hasOwnProperty(key)) {
			ret[key] = val;
		} else if (Array.isArray(ret[key])) {
			ret[key].push(val);
		} else {
			ret[key] = [ret[key], val];
		}

		return ret;
	}, {});
};

exports.stringify = function (obj) {
	return obj ? Object.keys(obj).sort().map(function (key) {
		var val = obj[key];

		if (val === undefined) {
			return '';
		}

		if (val === null) {
			return key;
		}

		if (Array.isArray(val)) {
			return val.slice().sort().map(function (val2) {
				return strictUriEncode(key) + '=' + strictUriEncode(val2);
			}).join('&');
		}

		return strictUriEncode(key) + '=' + strictUriEncode(val);
	}).filter(function (x) {
		return x.length > 0;
	}).join('&') : '';
};

},{"strict-uri-encode":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/query-string/node_modules/strict-uri-encode/index.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/query-string/node_modules/strict-uri-encode/index.js":[function(require,module,exports){
'use strict';
module.exports = function (str) {
	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	});
};

},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/node_modules/warning/browser.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = function() {};

if (process.env.NODE_ENV !== 'production') {
  warning = function(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
        'warning. Please, use a more descriptive format than: ' + format
      );
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' +
        format.replace(/%s/g, function() {
          return args[argIndex++];
        });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch(x) {}
    }
  };
}

module.exports = warning;

}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-dom/index.js":[function(require,module,exports){
'use strict';

module.exports = require('react/lib/ReactDOM');

},{"react/lib/ReactDOM":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOM.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/AsyncUtils.js":[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports.loopAsync = loopAsync;
exports.mapAsync = mapAsync;

function loopAsync(turns, work, callback) {
  var currentTurn = 0,
      isDone = false;

  function done() {
    isDone = true;
    callback.apply(this, arguments);
  }

  function next() {
    if (isDone) return;

    if (currentTurn < turns) {
      work.call(this, currentTurn++, next, done);
    } else {
      done.apply(this, arguments);
    }
  }

  next();
}

function mapAsync(array, work, callback) {
  var length = array.length;
  var values = [];

  if (length === 0) return callback(null, values);

  var isDone = false,
      doneCount = 0;

  function done(index, error, value) {
    if (isDone) return;

    if (error) {
      isDone = true;
      callback(error);
    } else {
      values[index] = value;

      isDone = ++doneCount === length;

      if (isDone) callback(null, values);
    }
  }

  array.forEach(function (item, index) {
    work(item, index, function (error, value) {
      done(index, error, value);
    });
  });
}
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/History.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _PropTypes = require('./PropTypes');

/**
 * A mixin that adds the "history" instance variable to components.
 */
var History = {

  contextTypes: {
    history: _PropTypes.history
  },

  componentWillMount: function componentWillMount() {
    this.history = this.context.history;
  }

};

exports['default'] = History;
module.exports = exports['default'];
},{"./PropTypes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PropTypes.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/IndexLink.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Link = require('./Link');

var _Link2 = _interopRequireDefault(_Link);

/**
 * An <IndexLink> is used to link to an <IndexRoute>.
 */

var IndexLink = (function (_Component) {
  _inherits(IndexLink, _Component);

  function IndexLink() {
    _classCallCheck(this, IndexLink);

    _Component.apply(this, arguments);
  }

  IndexLink.prototype.render = function render() {
    return _react2['default'].createElement(_Link2['default'], _extends({}, this.props, { onlyActiveOnIndex: true }));
  };

  return IndexLink;
})(_react.Component);

exports['default'] = IndexLink;
module.exports = exports['default'];
},{"./Link":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/Link.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/IndexRedirect.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Redirect = require('./Redirect');

var _Redirect2 = _interopRequireDefault(_Redirect);

var _PropTypes = require('./PropTypes');

var _React$PropTypes = _react2['default'].PropTypes;
var string = _React$PropTypes.string;
var object = _React$PropTypes.object;

/**
 * An <IndexRedirect> is used to redirect from an indexRoute.
 */

var IndexRedirect = (function (_Component) {
  _inherits(IndexRedirect, _Component);

  function IndexRedirect() {
    _classCallCheck(this, IndexRedirect);

    _Component.apply(this, arguments);
  }

  /* istanbul ignore next: sanity check */

  IndexRedirect.prototype.render = function render() {
    !false ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
  };

  return IndexRedirect;
})(_react.Component);

IndexRedirect.propTypes = {
  to: string.isRequired,
  query: object,
  state: object,
  onEnter: _PropTypes.falsy,
  children: _PropTypes.falsy
};

IndexRedirect.createRouteFromReactElement = function (element, parentRoute) {
  /* istanbul ignore else: sanity check */
  if (parentRoute) {
    parentRoute.indexRoute = _Redirect2['default'].createRouteFromReactElement(element);
  } else {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'An <IndexRedirect> does not make sense at the root of your route config') : undefined;
  }
};

exports['default'] = IndexRedirect;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./PropTypes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PropTypes.js","./Redirect":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/Redirect.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/invariant/browser.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js","warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/warning/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/IndexRoute.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RouteUtils = require('./RouteUtils');

var _PropTypes = require('./PropTypes');

var func = _react2['default'].PropTypes.func;

/**
 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
 * a JSX route config.
 */

var IndexRoute = (function (_Component) {
  _inherits(IndexRoute, _Component);

  function IndexRoute() {
    _classCallCheck(this, IndexRoute);

    _Component.apply(this, arguments);
  }

  /* istanbul ignore next: sanity check */

  IndexRoute.prototype.render = function render() {
    !false ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRoute> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
  };

  return IndexRoute;
})(_react.Component);

IndexRoute.propTypes = {
  path: _PropTypes.falsy,
  component: _PropTypes.component,
  components: _PropTypes.components,
  getComponent: func,
  getComponents: func
};

IndexRoute.createRouteFromReactElement = function (element, parentRoute) {
  /* istanbul ignore else: sanity check */
  if (parentRoute) {
    parentRoute.indexRoute = _RouteUtils.createRouteFromReactElement(element);
  } else {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'An <IndexRoute> does not make sense at the root of your route config') : undefined;
  }
};

exports['default'] = IndexRoute;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./PropTypes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PropTypes.js","./RouteUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/invariant/browser.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js","warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/warning/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/Lifecycle.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var object = _react2['default'].PropTypes.object;

/**
 * The Lifecycle mixin adds the routerWillLeave lifecycle method to a
 * component that may be used to cancel a transition or prompt the user
 * for confirmation.
 *
 * On standard transitions, routerWillLeave receives a single argument: the
 * location we're transitioning to. To cancel the transition, return false.
 * To prompt the user for confirmation, return a prompt message (string).
 *
 * During the beforeunload event (assuming you're using the useBeforeUnload
 * history enhancer), routerWillLeave does not receive a location object
 * because it isn't possible for us to know the location we're transitioning
 * to. In this case routerWillLeave must return a prompt message to prevent
 * the user from closing the window/tab.
 */
var Lifecycle = {

  contextTypes: {
    history: object.isRequired,
    // Nested children receive the route as context, either
    // set by the route component using the RouteContext mixin
    // or by some other ancestor.
    route: object
  },

  propTypes: {
    // Route components receive the route object as a prop.
    route: object
  },

  componentDidMount: function componentDidMount() {
    !this.routerWillLeave ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin requires you to define a routerWillLeave method') : _invariant2['default'](false) : undefined;

    var route = this.props.route || this.context.route;

    !route ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin must be used on either a) a <Route component> or ' + 'b) a descendant of a <Route component> that uses the RouteContext mixin') : _invariant2['default'](false) : undefined;

    this._unlistenBeforeLeavingRoute = this.context.history.listenBeforeLeavingRoute(route, this.routerWillLeave);
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._unlistenBeforeLeavingRoute) this._unlistenBeforeLeavingRoute();
  }

};

exports['default'] = Lifecycle;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/invariant/browser.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/Link.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _React$PropTypes = _react2['default'].PropTypes;
var bool = _React$PropTypes.bool;
var object = _React$PropTypes.object;
var string = _React$PropTypes.string;
var func = _React$PropTypes.func;

function isLeftClickEvent(event) {
  return event.button === 0;
}

function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

function isEmptyObject(object) {
  for (var p in object) {
    if (object.hasOwnProperty(p)) return false;
  }return true;
}

/**
 * A <Link> is used to create an <a> element that links to a route.
 * When that route is active, the link gets the value of its
 * `activeClassName` prop
 *
 * For example, assuming you have the following route:
 *
 *   <Route path="/posts/:postID" component={Post} />
 *
 * You could use the following component to link to that route:
 *
 *   <Link to={`/posts/${post.id}`} />
 *
 * Links may pass along location state and/or query string parameters
 * in the state/query props, respectively.
 *
 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
 */

var Link = (function (_Component) {
  _inherits(Link, _Component);

  function Link() {
    _classCallCheck(this, Link);

    _Component.apply(this, arguments);
  }

  Link.prototype.handleClick = function handleClick(event) {
    var allowTransition = true;

    if (this.props.onClick) this.props.onClick(event);

    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

    if (event.defaultPrevented === true) allowTransition = false;

    // If target prop is set (e.g. to "_blank") let browser handle link.
    /* istanbul ignore if: untestable with Karma */
    if (this.props.target) {
      if (!allowTransition) event.preventDefault();

      return;
    }

    event.preventDefault();

    if (allowTransition) {
      var _props = this.props;
      var state = _props.state;
      var to = _props.to;
      var query = _props.query;
      var hash = _props.hash;

      if (hash) to += hash;

      this.context.history.pushState(state, to, query);
    }
  };

  Link.prototype.render = function render() {
    var _this = this;

    var _props2 = this.props;
    var to = _props2.to;
    var query = _props2.query;
    var hash = _props2.hash;
    var state = _props2.state;
    var activeClassName = _props2.activeClassName;
    var activeStyle = _props2.activeStyle;
    var onlyActiveOnIndex = _props2.onlyActiveOnIndex;

    var props = _objectWithoutProperties(_props2, ['to', 'query', 'hash', 'state', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);

    // Manually override onClick.
    props.onClick = function (e) {
      return _this.handleClick(e);
    };

    // Ignore if rendered outside the context of history, simplifies unit testing.
    var history = this.context.history;

    if (history) {
      props.href = history.createHref(to, query);

      if (hash) props.href += hash;

      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
        if (history.isActive(to, query, onlyActiveOnIndex)) {
          if (activeClassName) props.className += props.className === '' ? activeClassName : ' ' + activeClassName;

          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
        }
      }
    }

    return _react2['default'].createElement('a', props);
  };

  return Link;
})(_react.Component);

Link.contextTypes = {
  history: object
};

Link.propTypes = {
  to: string.isRequired,
  query: object,
  hash: string,
  state: object,
  activeStyle: object,
  activeClassName: string,
  onlyActiveOnIndex: bool.isRequired,
  onClick: func
};

Link.defaultProps = {
  onlyActiveOnIndex: false,
  className: '',
  style: {}
};

exports['default'] = Link;
module.exports = exports['default'];
},{"react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PatternUtils.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;
exports.compilePattern = compilePattern;
exports.matchPattern = matchPattern;
exports.getParamNames = getParamNames;
exports.getParams = getParams;
exports.formatPattern = formatPattern;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function escapeSource(string) {
  return escapeRegExp(string).replace(/\/+/g, '/+');
}

function _compilePattern(pattern) {
  var regexpSource = '';
  var paramNames = [];
  var tokens = [];

  var match = undefined,
      lastIndex = 0,
      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
  while (match = matcher.exec(pattern)) {
    if (match.index !== lastIndex) {
      tokens.push(pattern.slice(lastIndex, match.index));
      regexpSource += escapeSource(pattern.slice(lastIndex, match.index));
    }

    if (match[1]) {
      regexpSource += '([^/?#]+)';
      paramNames.push(match[1]);
    } else if (match[0] === '**') {
      regexpSource += '([\\s\\S]*)';
      paramNames.push('splat');
    } else if (match[0] === '*') {
      regexpSource += '([\\s\\S]*?)';
      paramNames.push('splat');
    } else if (match[0] === '(') {
      regexpSource += '(?:';
    } else if (match[0] === ')') {
      regexpSource += ')?';
    }

    tokens.push(match[0]);

    lastIndex = matcher.lastIndex;
  }

  if (lastIndex !== pattern.length) {
    tokens.push(pattern.slice(lastIndex, pattern.length));
    regexpSource += escapeSource(pattern.slice(lastIndex, pattern.length));
  }

  return {
    pattern: pattern,
    regexpSource: regexpSource,
    paramNames: paramNames,
    tokens: tokens
  };
}

var CompiledPatternsCache = {};

function compilePattern(pattern) {
  if (!(pattern in CompiledPatternsCache)) CompiledPatternsCache[pattern] = _compilePattern(pattern);

  return CompiledPatternsCache[pattern];
}

/**
 * Attempts to match a pattern on the given pathname. Patterns may use
 * the following special characters:
 *
 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
 *                  captured string is considered a "param"
 * - ()             Wraps a segment of the URL that is optional
 * - *              Consumes (non-greedy) all characters up to the next
 *                  character in the pattern, or to the end of the URL if
 *                  there is none
 * - **             Consumes (greedy) all characters up to the next character
 *                  in the pattern, or to the end of the URL if there is none
 *
 * The return value is an object with the following properties:
 *
 * - remainingPathname
 * - paramNames
 * - paramValues
 */

function matchPattern(pattern, pathname) {
  // Make leading slashes consistent between pattern and pathname.
  if (pattern.charAt(0) !== '/') {
    pattern = '/' + pattern;
  }
  if (pathname.charAt(0) !== '/') {
    pathname = '/' + pathname;
  }

  var _compilePattern2 = compilePattern(pattern);

  var regexpSource = _compilePattern2.regexpSource;
  var paramNames = _compilePattern2.paramNames;
  var tokens = _compilePattern2.tokens;

  regexpSource += '/*'; // Capture path separators

  // Special-case patterns like '*' for catch-all routes.
  var captureRemaining = tokens[tokens.length - 1] !== '*';

  if (captureRemaining) {
    // This will match newlines in the remaining path.
    regexpSource += '([\\s\\S]*?)';
  }

  var match = pathname.match(new RegExp('^' + regexpSource + '$', 'i'));

  var remainingPathname = undefined,
      paramValues = undefined;
  if (match != null) {
    if (captureRemaining) {
      remainingPathname = match.pop();
      var matchedPath = match[0].substr(0, match[0].length - remainingPathname.length);

      // If we didn't match the entire pathname, then make sure that the match
      // we did get ends at a path separator (potentially the one we added
      // above at the beginning of the path, if the actual match was empty).
      if (remainingPathname && matchedPath.charAt(matchedPath.length - 1) !== '/') {
        return {
          remainingPathname: null,
          paramNames: paramNames,
          paramValues: null
        };
      }
    } else {
      // If this matched at all, then the match was the entire pathname.
      remainingPathname = '';
    }

    paramValues = match.slice(1).map(function (v) {
      return v != null ? decodeURIComponent(v) : v;
    });
  } else {
    remainingPathname = paramValues = null;
  }

  return {
    remainingPathname: remainingPathname,
    paramNames: paramNames,
    paramValues: paramValues
  };
}

function getParamNames(pattern) {
  return compilePattern(pattern).paramNames;
}

function getParams(pattern, pathname) {
  var _matchPattern = matchPattern(pattern, pathname);

  var paramNames = _matchPattern.paramNames;
  var paramValues = _matchPattern.paramValues;

  if (paramValues != null) {
    return paramNames.reduce(function (memo, paramName, index) {
      memo[paramName] = paramValues[index];
      return memo;
    }, {});
  }

  return null;
}

/**
 * Returns a version of the given pattern with params interpolated. Throws
 * if there is a dynamic segment of the pattern for which there is no param.
 */

function formatPattern(pattern, params) {
  params = params || {};

  var _compilePattern3 = compilePattern(pattern);

  var tokens = _compilePattern3.tokens;

  var parenCount = 0,
      pathname = '',
      splatIndex = 0;

  var token = undefined,
      paramName = undefined,
      paramValue = undefined;
  for (var i = 0, len = tokens.length; i < len; ++i) {
    token = tokens[i];

    if (token === '*' || token === '**') {
      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;

      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : _invariant2['default'](false) : undefined;

      if (paramValue != null) pathname += encodeURI(paramValue);
    } else if (token === '(') {
      parenCount += 1;
    } else if (token === ')') {
      parenCount -= 1;
    } else if (token.charAt(0) === ':') {
      paramName = token.substring(1);
      paramValue = params[paramName];

      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : _invariant2['default'](false) : undefined;

      if (paramValue != null) pathname += encodeURIComponent(paramValue);
    } else {
      pathname += token;
    }
  }

  return pathname.replace(/\/+/g, '/');
}
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/invariant/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PropTypes.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.falsy = falsy;

var _react = require('react');

var func = _react.PropTypes.func;
var object = _react.PropTypes.object;
var arrayOf = _react.PropTypes.arrayOf;
var oneOfType = _react.PropTypes.oneOfType;
var element = _react.PropTypes.element;
var shape = _react.PropTypes.shape;
var string = _react.PropTypes.string;

function falsy(props, propName, componentName) {
  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
}

var history = shape({
  listen: func.isRequired,
  pushState: func.isRequired,
  replaceState: func.isRequired,
  go: func.isRequired
});

exports.history = history;
var location = shape({
  pathname: string.isRequired,
  search: string.isRequired,
  state: object,
  action: string.isRequired,
  key: string
});

exports.location = location;
var component = oneOfType([func, string]);
exports.component = component;
var components = oneOfType([component, object]);
exports.components = components;
var route = oneOfType([object, element]);
exports.route = route;
var routes = oneOfType([route, arrayOf(route)]);

exports.routes = routes;
exports['default'] = {
  falsy: falsy,
  history: history,
  location: location,
  component: component,
  components: components,
  route: route
};
},{"react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/Redirect.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RouteUtils = require('./RouteUtils');

var _PatternUtils = require('./PatternUtils');

var _PropTypes = require('./PropTypes');

var _React$PropTypes = _react2['default'].PropTypes;
var string = _React$PropTypes.string;
var object = _React$PropTypes.object;

/**
 * A <Redirect> is used to declare another URL path a client should
 * be sent to when they request a given URL.
 *
 * Redirects are placed alongside routes in the route configuration
 * and are traversed in the same manner.
 */

var Redirect = (function (_Component) {
  _inherits(Redirect, _Component);

  function Redirect() {
    _classCallCheck(this, Redirect);

    _Component.apply(this, arguments);
  }

  /* istanbul ignore next: sanity check */

  Redirect.prototype.render = function render() {
    !false ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Redirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
  };

  return Redirect;
})(_react.Component);

Redirect.createRouteFromReactElement = function (element) {
  var route = _RouteUtils.createRouteFromReactElement(element);

  if (route.from) route.path = route.from;

  route.onEnter = function (nextState, replaceState) {
    var location = nextState.location;
    var params = nextState.params;

    var pathname = undefined;
    if (route.to.charAt(0) === '/') {
      pathname = _PatternUtils.formatPattern(route.to, params);
    } else if (!route.to) {
      pathname = location.pathname;
    } else {
      var routeIndex = nextState.routes.indexOf(route);
      var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
      var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
      pathname = _PatternUtils.formatPattern(pattern, params);
    }

    replaceState(route.state || location.state, pathname, route.query || location.query);
  };

  return route;
};

Redirect.getRoutePattern = function (routes, routeIndex) {
  var parentPattern = '';

  for (var i = routeIndex; i >= 0; i--) {
    var route = routes[i];
    var pattern = route.path || '';
    parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;

    if (pattern.indexOf('/') === 0) break;
  }

  return '/' + parentPattern;
};

Redirect.propTypes = {
  path: string,
  from: string, // Alias for path
  to: string.isRequired,
  query: object,
  state: object,
  onEnter: _PropTypes.falsy,
  children: _PropTypes.falsy
};

exports['default'] = Redirect;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./PatternUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PatternUtils.js","./PropTypes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PropTypes.js","./RouteUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/invariant/browser.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/Route.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RouteUtils = require('./RouteUtils');

var _PropTypes = require('./PropTypes');

var _React$PropTypes = _react2['default'].PropTypes;
var string = _React$PropTypes.string;
var func = _React$PropTypes.func;

/**
 * A <Route> is used to declare which components are rendered to the
 * page when the URL matches a given pattern.
 *
 * Routes are arranged in a nested tree structure. When a new URL is
 * requested, the tree is searched depth-first to find a route whose
 * path matches the URL.  When one is found, all routes in the tree
 * that lead to it are considered "active" and their components are
 * rendered into the DOM, nested in the same order as in the tree.
 */

var Route = (function (_Component) {
  _inherits(Route, _Component);

  function Route() {
    _classCallCheck(this, Route);

    _Component.apply(this, arguments);
  }

  /* istanbul ignore next: sanity check */

  Route.prototype.render = function render() {
    !false ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Route> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
  };

  return Route;
})(_react.Component);

Route.createRouteFromReactElement = _RouteUtils.createRouteFromReactElement;

Route.propTypes = {
  path: string,
  component: _PropTypes.component,
  components: _PropTypes.components,
  getComponent: func,
  getComponents: func
};

exports['default'] = Route;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./PropTypes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PropTypes.js","./RouteUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/invariant/browser.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RouteContext.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var object = _react2['default'].PropTypes.object;

/**
 * The RouteContext mixin provides a convenient way for route
 * components to set the route in context. This is needed for
 * routes that render elements that want to use the Lifecycle
 * mixin to prevent transitions.
 */
var RouteContext = {

  propTypes: {
    route: object.isRequired
  },

  childContextTypes: {
    route: object.isRequired
  },

  getChildContext: function getChildContext() {
    return {
      route: this.props.route
    };
  }

};

exports['default'] = RouteContext;
module.exports = exports['default'];
},{"react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.isReactChildren = isReactChildren;
exports.createRouteFromReactElement = createRouteFromReactElement;
exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
exports.createRoutes = createRoutes;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

function isValidChild(object) {
  return object == null || _react2['default'].isValidElement(object);
}

function isReactChildren(object) {
  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
}

function checkPropTypes(componentName, propTypes, props) {
  componentName = componentName || 'UnknownComponent';

  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error = propTypes[propName](props, propName, componentName);

      /* istanbul ignore if: error logging */
      if (error instanceof Error) process.env.NODE_ENV !== 'production' ? _warning2['default'](false, error.message) : undefined;
    }
  }
}

function createRoute(defaultProps, props) {
  return _extends({}, defaultProps, props);
}

function createRouteFromReactElement(element) {
  var type = element.type;
  var route = createRoute(type.defaultProps, element.props);

  if (type.propTypes) checkPropTypes(type.displayName || type.name, type.propTypes, route);

  if (route.children) {
    var childRoutes = createRoutesFromReactChildren(route.children, route);

    if (childRoutes.length) route.childRoutes = childRoutes;

    delete route.children;
  }

  return route;
}

/**
 * Creates and returns a routes object from the given ReactChildren. JSX
 * provides a convenient way to visualize how routes in the hierarchy are
 * nested.
 *
 *   import { Route, createRoutesFromReactChildren } from 'react-router'
 *   
 *   const routes = createRoutesFromReactChildren(
 *     <Route component={App}>
 *       <Route path="home" component={Dashboard}/>
 *       <Route path="news" component={NewsFeed}/>
 *     </Route>
 *   )
 *
 * Note: This method is automatically used when you provide <Route> children
 * to a <Router> component.
 */

function createRoutesFromReactChildren(children, parentRoute) {
  var routes = [];

  _react2['default'].Children.forEach(children, function (element) {
    if (_react2['default'].isValidElement(element)) {
      // Component classes may have a static create* method.
      if (element.type.createRouteFromReactElement) {
        var route = element.type.createRouteFromReactElement(element, parentRoute);

        if (route) routes.push(route);
      } else {
        routes.push(createRouteFromReactElement(element));
      }
    }
  });

  return routes;
}

/**
 * Creates and returns an array of routes from the given object which
 * may be a JSX route, a plain object route, or an array of either.
 */

function createRoutes(routes) {
  if (isReactChildren(routes)) {
    routes = createRoutesFromReactChildren(routes);
  } else if (routes && !Array.isArray(routes)) {
    routes = [routes];
  }

  return routes;
}
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js","warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/warning/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/Router.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _historyLibCreateHashHistory = require('history/lib/createHashHistory');

var _historyLibCreateHashHistory2 = _interopRequireDefault(_historyLibCreateHashHistory);

var _RouteUtils = require('./RouteUtils');

var _RoutingContext = require('./RoutingContext');

var _RoutingContext2 = _interopRequireDefault(_RoutingContext);

var _useRoutes = require('./useRoutes');

var _useRoutes2 = _interopRequireDefault(_useRoutes);

var _PropTypes = require('./PropTypes');

var _React$PropTypes = _react2['default'].PropTypes;
var func = _React$PropTypes.func;
var object = _React$PropTypes.object;

/**
 * A <Router> is a high-level API for automatically setting up
 * a router that renders a <RoutingContext> with all the props
 * it needs each time the URL changes.
 */

var Router = (function (_Component) {
  _inherits(Router, _Component);

  function Router(props, context) {
    _classCallCheck(this, Router);

    _Component.call(this, props, context);

    this.state = {
      location: null,
      routes: null,
      params: null,
      components: null
    };
  }

  Router.prototype.handleError = function handleError(error) {
    if (this.props.onError) {
      this.props.onError.call(this, error);
    } else {
      // Throw errors by default so we don't silently swallow them!
      throw error; // This error probably occurred in getChildRoutes or getComponents.
    }
  };

  Router.prototype.componentWillMount = function componentWillMount() {
    var _this = this;

    var _props = this.props;
    var history = _props.history;
    var children = _props.children;
    var routes = _props.routes;
    var parseQueryString = _props.parseQueryString;
    var stringifyQuery = _props.stringifyQuery;

    var createHistory = history ? function () {
      return history;
    } : _historyLibCreateHashHistory2['default'];

    this.history = _useRoutes2['default'](createHistory)({
      routes: _RouteUtils.createRoutes(routes || children),
      parseQueryString: parseQueryString,
      stringifyQuery: stringifyQuery
    });

    this._unlisten = this.history.listen(function (error, state) {
      if (error) {
        _this.handleError(error);
      } else {
        _this.setState(state, _this.props.onUpdate);
      }
    });
  };

  /* istanbul ignore next: sanity check */

  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : undefined;

    process.env.NODE_ENV !== 'production' ? _warning2['default']((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : undefined;
  };

  Router.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this._unlisten) this._unlisten();
  };

  Router.prototype.render = function render() {
    var _state = this.state;
    var location = _state.location;
    var routes = _state.routes;
    var params = _state.params;
    var components = _state.components;
    var _props2 = this.props;
    var RoutingContext = _props2.RoutingContext;
    var createElement = _props2.createElement;

    var props = _objectWithoutProperties(_props2, ['RoutingContext', 'createElement']);

    if (location == null) return null; // Async match

    // Only forward non-Router-specific props to routing context, as those are
    // the only ones that might be custom routing context props.
    Object.keys(Router.propTypes).forEach(function (propType) {
      return delete props[propType];
    });

    return _react2['default'].createElement(RoutingContext, _extends({}, props, {
      history: this.history,
      createElement: createElement,
      location: location,
      routes: routes,
      params: params,
      components: components
    }));
  };

  return Router;
})(_react.Component);

Router.propTypes = {
  history: object,
  children: _PropTypes.routes,
  routes: _PropTypes.routes, // alias for children
  RoutingContext: func.isRequired,
  createElement: func,
  onError: func,
  onUpdate: func,
  parseQueryString: func,
  stringifyQuery: func
};

Router.defaultProps = {
  RoutingContext: _RoutingContext2['default']
};

exports['default'] = Router;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./PropTypes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PropTypes.js","./RouteUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","./RoutingContext":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RoutingContext.js","./useRoutes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/useRoutes.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","history/lib/createHashHistory":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createHashHistory.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js","warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/warning/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RoutingContext.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RouteUtils = require('./RouteUtils');

var _getRouteParams = require('./getRouteParams');

var _getRouteParams2 = _interopRequireDefault(_getRouteParams);

var _React$PropTypes = _react2['default'].PropTypes;
var array = _React$PropTypes.array;
var func = _React$PropTypes.func;
var object = _React$PropTypes.object;

/**
 * A <RoutingContext> renders the component tree for a given router state
 * and sets the history object and the current location in context.
 */

var RoutingContext = (function (_Component) {
  _inherits(RoutingContext, _Component);

  function RoutingContext() {
    _classCallCheck(this, RoutingContext);

    _Component.apply(this, arguments);
  }

  RoutingContext.prototype.getChildContext = function getChildContext() {
    var _props = this.props;
    var history = _props.history;
    var location = _props.location;

    return { history: history, location: location };
  };

  RoutingContext.prototype.createElement = function createElement(component, props) {
    return component == null ? null : this.props.createElement(component, props);
  };

  RoutingContext.prototype.render = function render() {
    var _this = this;

    var _props2 = this.props;
    var history = _props2.history;
    var location = _props2.location;
    var routes = _props2.routes;
    var params = _props2.params;
    var components = _props2.components;

    var element = null;

    if (components) {
      element = components.reduceRight(function (element, components, index) {
        if (components == null) return element; // Don't create new children; use the grandchildren.

        var route = routes[index];
        var routeParams = _getRouteParams2['default'](route, params);
        var props = {
          history: history,
          location: location,
          params: params,
          route: route,
          routeParams: routeParams,
          routes: routes
        };

        if (_RouteUtils.isReactChildren(element)) {
          props.children = element;
        } else if (element) {
          for (var prop in element) {
            if (element.hasOwnProperty(prop)) props[prop] = element[prop];
          }
        }

        if (typeof components === 'object') {
          var elements = {};

          for (var key in components) {
            if (components.hasOwnProperty(key)) {
              // Pass through the key as a prop to createElement to allow
              // custom createElement functions to know which named component
              // they're rendering, for e.g. matching up to fetched data.
              elements[key] = _this.createElement(components[key], _extends({
                key: key }, props));
            }
          }

          return elements;
        }

        return _this.createElement(components, props);
      }, element);
    }

    !(element === null || element === false || _react2['default'].isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The root route must render a single element') : _invariant2['default'](false) : undefined;

    return element;
  };

  return RoutingContext;
})(_react.Component);

RoutingContext.propTypes = {
  history: object.isRequired,
  createElement: func.isRequired,
  location: object.isRequired,
  routes: array.isRequired,
  params: object.isRequired,
  components: array.isRequired
};

RoutingContext.defaultProps = {
  createElement: _react2['default'].createElement
};

RoutingContext.childContextTypes = {
  history: object.isRequired,
  location: object.isRequired
};

exports['default'] = RoutingContext;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./RouteUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","./getRouteParams":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/getRouteParams.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/invariant/browser.js","react":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/TransitionUtils.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.runEnterHooks = runEnterHooks;
exports.runLeaveHooks = runLeaveHooks;

var _AsyncUtils = require('./AsyncUtils');

function createEnterHook(hook, route) {
  return function (a, b, callback) {
    hook.apply(route, arguments);

    if (hook.length < 3) {
      // Assume hook executes synchronously and
      // automatically call the callback.
      callback();
    }
  };
}

function getEnterHooks(routes) {
  return routes.reduce(function (hooks, route) {
    if (route.onEnter) hooks.push(createEnterHook(route.onEnter, route));

    return hooks;
  }, []);
}

/**
 * Runs all onEnter hooks in the given array of routes in order
 * with onEnter(nextState, replaceState, callback) and calls
 * callback(error, redirectInfo) when finished. The first hook
 * to use replaceState short-circuits the loop.
 *
 * If a hook needs to run asynchronously, it may use the callback
 * function. However, doing so will cause the transition to pause,
 * which could lead to a non-responsive UI if the hook is slow.
 */

function runEnterHooks(routes, nextState, callback) {
  var hooks = getEnterHooks(routes);

  if (!hooks.length) {
    callback();
    return;
  }

  var redirectInfo = undefined;
  function replaceState(state, pathname, query) {
    redirectInfo = { pathname: pathname, query: query, state: state };
  }

  _AsyncUtils.loopAsync(hooks.length, function (index, next, done) {
    hooks[index](nextState, replaceState, function (error) {
      if (error || redirectInfo) {
        done(error, redirectInfo); // No need to continue.
      } else {
          next();
        }
    });
  }, callback);
}

/**
 * Runs all onLeave hooks in the given array of routes in order.
 */

function runLeaveHooks(routes) {
  for (var i = 0, len = routes.length; i < len; ++i) {
    if (routes[i].onLeave) routes[i].onLeave.call(routes[i]);
  }
}
},{"./AsyncUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/AsyncUtils.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/computeChangedRoutes.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _PatternUtils = require('./PatternUtils');

function routeParamsChanged(route, prevState, nextState) {
  if (!route.path) return false;

  var paramNames = _PatternUtils.getParamNames(route.path);

  return paramNames.some(function (paramName) {
    return prevState.params[paramName] !== nextState.params[paramName];
  });
}

/**
 * Returns an object of { leaveRoutes, enterRoutes } determined by
 * the change from prevState to nextState. We leave routes if either
 * 1) they are not in the next state or 2) they are in the next state
 * but their params have changed (i.e. /users/123 => /users/456).
 *
 * leaveRoutes are ordered starting at the leaf route of the tree
 * we're leaving up to the common parent route. enterRoutes are ordered
 * from the top of the tree we're entering down to the leaf route.
 */
function computeChangedRoutes(prevState, nextState) {
  var prevRoutes = prevState && prevState.routes;
  var nextRoutes = nextState.routes;

  var leaveRoutes = undefined,
      enterRoutes = undefined;
  if (prevRoutes) {
    leaveRoutes = prevRoutes.filter(function (route) {
      return nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
    });

    // onLeave hooks start at the leaf route.
    leaveRoutes.reverse();

    enterRoutes = nextRoutes.filter(function (route) {
      return prevRoutes.indexOf(route) === -1 || leaveRoutes.indexOf(route) !== -1;
    });
  } else {
    leaveRoutes = [];
    enterRoutes = nextRoutes;
  }

  return {
    leaveRoutes: leaveRoutes,
    enterRoutes: enterRoutes
  };
}

exports['default'] = computeChangedRoutes;
module.exports = exports['default'];
},{"./PatternUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PatternUtils.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/getComponents.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _AsyncUtils = require('./AsyncUtils');

function getComponentsForRoute(location, route, callback) {
  if (route.component || route.components) {
    callback(null, route.component || route.components);
  } else if (route.getComponent) {
    route.getComponent(location, callback);
  } else if (route.getComponents) {
    route.getComponents(location, callback);
  } else {
    callback();
  }
}

/**
 * Asynchronously fetches all components needed for the given router
 * state and calls callback(error, components) when finished.
 *
 * Note: This operation may finish synchronously if no routes have an
 * asynchronous getComponents method.
 */
function getComponents(nextState, callback) {
  _AsyncUtils.mapAsync(nextState.routes, function (route, index, callback) {
    getComponentsForRoute(nextState.location, route, callback);
  }, callback);
}

exports['default'] = getComponents;
module.exports = exports['default'];
},{"./AsyncUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/AsyncUtils.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/getRouteParams.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _PatternUtils = require('./PatternUtils');

/**
 * Extracts an object of params the given route cares about from
 * the given params object.
 */
function getRouteParams(route, params) {
  var routeParams = {};

  if (!route.path) return routeParams;

  var paramNames = _PatternUtils.getParamNames(route.path);

  for (var p in params) {
    if (params.hasOwnProperty(p) && paramNames.indexOf(p) !== -1) routeParams[p] = params[p];
  }return routeParams;
}

exports['default'] = getRouteParams;
module.exports = exports['default'];
},{"./PatternUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PatternUtils.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/index.js":[function(require,module,exports){
/* components */
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Router2 = require('./Router');

var _Router3 = _interopRequireDefault(_Router2);

exports.Router = _Router3['default'];

var _Link2 = require('./Link');

var _Link3 = _interopRequireDefault(_Link2);

exports.Link = _Link3['default'];

var _IndexLink2 = require('./IndexLink');

var _IndexLink3 = _interopRequireDefault(_IndexLink2);

exports.IndexLink = _IndexLink3['default'];

/* components (configuration) */

var _IndexRedirect2 = require('./IndexRedirect');

var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);

exports.IndexRedirect = _IndexRedirect3['default'];

var _IndexRoute2 = require('./IndexRoute');

var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);

exports.IndexRoute = _IndexRoute3['default'];

var _Redirect2 = require('./Redirect');

var _Redirect3 = _interopRequireDefault(_Redirect2);

exports.Redirect = _Redirect3['default'];

var _Route2 = require('./Route');

var _Route3 = _interopRequireDefault(_Route2);

exports.Route = _Route3['default'];

/* mixins */

var _History2 = require('./History');

var _History3 = _interopRequireDefault(_History2);

exports.History = _History3['default'];

var _Lifecycle2 = require('./Lifecycle');

var _Lifecycle3 = _interopRequireDefault(_Lifecycle2);

exports.Lifecycle = _Lifecycle3['default'];

var _RouteContext2 = require('./RouteContext');

var _RouteContext3 = _interopRequireDefault(_RouteContext2);

exports.RouteContext = _RouteContext3['default'];

/* utils */

var _useRoutes2 = require('./useRoutes');

var _useRoutes3 = _interopRequireDefault(_useRoutes2);

exports.useRoutes = _useRoutes3['default'];

var _RouteUtils = require('./RouteUtils');

exports.createRoutes = _RouteUtils.createRoutes;

var _RoutingContext2 = require('./RoutingContext');

var _RoutingContext3 = _interopRequireDefault(_RoutingContext2);

exports.RoutingContext = _RoutingContext3['default'];

var _PropTypes2 = require('./PropTypes');

var _PropTypes3 = _interopRequireDefault(_PropTypes2);

exports.PropTypes = _PropTypes3['default'];

var _match2 = require('./match');

var _match3 = _interopRequireDefault(_match2);

exports.match = _match3['default'];

var _Router4 = _interopRequireDefault(_Router2);

exports['default'] = _Router4['default'];
},{"./History":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/History.js","./IndexLink":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/IndexLink.js","./IndexRedirect":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/IndexRedirect.js","./IndexRoute":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/IndexRoute.js","./Lifecycle":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/Lifecycle.js","./Link":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/Link.js","./PropTypes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PropTypes.js","./Redirect":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/Redirect.js","./Route":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/Route.js","./RouteContext":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RouteContext.js","./RouteUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","./Router":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/Router.js","./RoutingContext":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RoutingContext.js","./match":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/match.js","./useRoutes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/useRoutes.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/isActive.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _PatternUtils = require('./PatternUtils');

function deepEqual(a, b) {
  if (a == b) return true;

  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
      return deepEqual(item, b[index]);
    });
  }

  if (typeof a === 'object') {
    for (var p in a) {
      if (!a.hasOwnProperty(p)) {
        continue;
      }

      if (a[p] === undefined) {
        if (b[p] !== undefined) {
          return false;
        }
      } else if (!b.hasOwnProperty(p)) {
        return false;
      } else if (!deepEqual(a[p], b[p])) {
        return false;
      }
    }

    return true;
  }

  return String(a) === String(b);
}

function paramsAreActive(paramNames, paramValues, activeParams) {
  // FIXME: This doesn't work on repeated params in activeParams.
  return paramNames.every(function (paramName, index) {
    return String(paramValues[index]) === String(activeParams[paramName]);
  });
}

function getMatchingRouteIndex(pathname, activeRoutes, activeParams) {
  var remainingPathname = pathname,
      paramNames = [],
      paramValues = [];

  for (var i = 0, len = activeRoutes.length; i < len; ++i) {
    var route = activeRoutes[i];
    var pattern = route.path || '';

    if (pattern.charAt(0) === '/') {
      remainingPathname = pathname;
      paramNames = [];
      paramValues = [];
    }

    if (remainingPathname !== null) {
      var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
      remainingPathname = matched.remainingPathname;
      paramNames = [].concat(paramNames, matched.paramNames);
      paramValues = [].concat(paramValues, matched.paramValues);
    }

    if (remainingPathname === '' && route.path && paramsAreActive(paramNames, paramValues, activeParams)) return i;
  }

  return null;
}

/**
 * Returns true if the given pathname matches the active routes
 * and params.
 */
function routeIsActive(pathname, routes, params, indexOnly) {
  var i = getMatchingRouteIndex(pathname, routes, params);

  if (i === null) {
    // No match.
    return false;
  } else if (!indexOnly) {
    // Any match is good enough.
    return true;
  }

  // If any remaining routes past the match index have paths, then we can't
  // be on the index route.
  return routes.slice(i + 1).every(function (route) {
    return !route.path;
  });
}

/**
 * Returns true if all key/value pairs in the given query are
 * currently active.
 */
function queryIsActive(query, activeQuery) {
  if (activeQuery == null) return query == null;

  if (query == null) return true;

  return deepEqual(query, activeQuery);
}

/**
 * Returns true if a <Link> to the given pathname/query combination is
 * currently active.
 */
function isActive(pathname, query, indexOnly, location, routes, params) {
  if (location == null) return false;

  if (!routeIsActive(pathname, routes, params, indexOnly)) return false;

  return queryIsActive(query, location.query);
}

exports['default'] = isActive;
module.exports = exports['default'];
},{"./PatternUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PatternUtils.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/match.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _historyLibCreateMemoryHistory = require('history/lib/createMemoryHistory');

var _historyLibCreateMemoryHistory2 = _interopRequireDefault(_historyLibCreateMemoryHistory);

var _historyLibUseBasename = require('history/lib/useBasename');

var _historyLibUseBasename2 = _interopRequireDefault(_historyLibUseBasename);

var _RouteUtils = require('./RouteUtils');

var _useRoutes = require('./useRoutes');

var _useRoutes2 = _interopRequireDefault(_useRoutes);

var createHistory = _useRoutes2['default'](_historyLibUseBasename2['default'](_historyLibCreateMemoryHistory2['default']));

/**
 * A high-level API to be used for server-side rendering.
 *
 * This function matches a location to a set of routes and calls
 * callback(error, redirectLocation, renderProps) when finished.
 *
 * Note: You probably don't want to use this in a browser. Use
 * the history.listen API instead.
 */
function match(_ref, callback) {
  var routes = _ref.routes;
  var location = _ref.location;
  var parseQueryString = _ref.parseQueryString;
  var stringifyQuery = _ref.stringifyQuery;
  var basename = _ref.basename;

  !location ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'match needs a location') : _invariant2['default'](false) : undefined;

  var history = createHistory({
    routes: _RouteUtils.createRoutes(routes),
    parseQueryString: parseQueryString,
    stringifyQuery: stringifyQuery,
    basename: basename
  });

  // Allow match({ location: '/the/path', ... })
  if (typeof location === 'string') location = history.createLocation(location);

  history.match(location, function (error, redirectLocation, nextState) {
    callback(error, redirectLocation, nextState && _extends({}, nextState, { history: history }));
  });
}

exports['default'] = match;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./RouteUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","./useRoutes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/useRoutes.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","history/lib/createMemoryHistory":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/createMemoryHistory.js","history/lib/useBasename":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/useBasename.js","invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/invariant/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/matchRoutes.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _AsyncUtils = require('./AsyncUtils');

var _PatternUtils = require('./PatternUtils');

var _RouteUtils = require('./RouteUtils');

function getChildRoutes(route, location, callback) {
  if (route.childRoutes) {
    callback(null, route.childRoutes);
  } else if (route.getChildRoutes) {
    route.getChildRoutes(location, function (error, childRoutes) {
      callback(error, !error && _RouteUtils.createRoutes(childRoutes));
    });
  } else {
    callback();
  }
}

function getIndexRoute(route, location, callback) {
  if (route.indexRoute) {
    callback(null, route.indexRoute);
  } else if (route.getIndexRoute) {
    route.getIndexRoute(location, function (error, indexRoute) {
      callback(error, !error && _RouteUtils.createRoutes(indexRoute)[0]);
    });
  } else if (route.childRoutes) {
    (function () {
      var pathless = route.childRoutes.filter(function (obj) {
        return !obj.hasOwnProperty('path');
      });

      _AsyncUtils.loopAsync(pathless.length, function (index, next, done) {
        getIndexRoute(pathless[index], location, function (error, indexRoute) {
          if (error || indexRoute) {
            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
            done(error, routes);
          } else {
            next();
          }
        });
      }, function (err, routes) {
        callback(null, routes);
      });
    })();
  } else {
    callback();
  }
}

function assignParams(params, paramNames, paramValues) {
  return paramNames.reduce(function (params, paramName, index) {
    var paramValue = paramValues && paramValues[index];

    if (Array.isArray(params[paramName])) {
      params[paramName].push(paramValue);
    } else if (paramName in params) {
      params[paramName] = [params[paramName], paramValue];
    } else {
      params[paramName] = paramValue;
    }

    return params;
  }, params);
}

function createParams(paramNames, paramValues) {
  return assignParams({}, paramNames, paramValues);
}

function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
  var pattern = route.path || '';

  if (pattern.charAt(0) === '/') {
    remainingPathname = location.pathname;
    paramNames = [];
    paramValues = [];
  }

  if (remainingPathname !== null) {
    var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
    remainingPathname = matched.remainingPathname;
    paramNames = [].concat(paramNames, matched.paramNames);
    paramValues = [].concat(paramValues, matched.paramValues);

    if (remainingPathname === '' && route.path) {
      var _ret2 = (function () {
        var match = {
          routes: [route],
          params: createParams(paramNames, paramValues)
        };

        getIndexRoute(route, location, function (error, indexRoute) {
          if (error) {
            callback(error);
          } else {
            if (Array.isArray(indexRoute)) {
              var _match$routes;

              process.env.NODE_ENV !== 'production' ? _warning2['default'](indexRoute.every(function (route) {
                return !route.path;
              }), 'Index routes should not have paths') : undefined;
              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
            } else if (indexRoute) {
              process.env.NODE_ENV !== 'production' ? _warning2['default'](!indexRoute.path, 'Index routes should not have paths') : undefined;
              match.routes.push(indexRoute);
            }

            callback(null, match);
          }
        });
        return {
          v: undefined
        };
      })();

      if (typeof _ret2 === 'object') return _ret2.v;
    }
  }

  if (remainingPathname != null || route.childRoutes) {
    // Either a) this route matched at least some of the path or b)
    // we don't have to load this route's children asynchronously. In
    // either case continue checking for matches in the subtree.
    getChildRoutes(route, location, function (error, childRoutes) {
      if (error) {
        callback(error);
      } else if (childRoutes) {
        // Check the child routes to see if any of them match.
        matchRoutes(childRoutes, location, function (error, match) {
          if (error) {
            callback(error);
          } else if (match) {
            // A child route matched! Augment the match and pass it up the stack.
            match.routes.unshift(route);
            callback(null, match);
          } else {
            callback();
          }
        }, remainingPathname, paramNames, paramValues);
      } else {
        callback();
      }
    });
  } else {
    callback();
  }
}

/**
 * Asynchronously matches the given location to a set of routes and calls
 * callback(error, state) when finished. The state object will have the
 * following properties:
 *
 * - routes       An array of routes that matched, in hierarchical order
 * - params       An object of URL parameters
 *
 * Note: This operation may finish synchronously if no routes have an
 * asynchronous getChildRoutes method.
 */
function matchRoutes(routes, location, callback) {
  var remainingPathname = arguments.length <= 3 || arguments[3] === undefined ? location.pathname : arguments[3];
  var paramNames = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];
  var paramValues = arguments.length <= 5 || arguments[5] === undefined ? [] : arguments[5];
  return (function () {
    _AsyncUtils.loopAsync(routes.length, function (index, next, done) {
      matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
        if (error || match) {
          done(error, match);
        } else {
          next();
        }
      });
    }, callback);
  })();
}

exports['default'] = matchRoutes;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./AsyncUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/AsyncUtils.js","./PatternUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/PatternUtils.js","./RouteUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/warning/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/useRoutes.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _historyLibActions = require('history/lib/Actions');

var _historyLibUseQueries = require('history/lib/useQueries');

var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

var _computeChangedRoutes2 = require('./computeChangedRoutes');

var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);

var _TransitionUtils = require('./TransitionUtils');

var _isActive2 = require('./isActive');

var _isActive3 = _interopRequireDefault(_isActive2);

var _getComponents = require('./getComponents');

var _getComponents2 = _interopRequireDefault(_getComponents);

var _matchRoutes = require('./matchRoutes');

var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

function hasAnyProperties(object) {
  for (var p in object) {
    if (object.hasOwnProperty(p)) return true;
  }return false;
}

/**
 * Returns a new createHistory function that may be used to create
 * history objects that know about routing.
 *
 * Enhances history objects with the following methods:
 *
 * - listen((error, nextState) => {})
 * - listenBeforeLeavingRoute(route, (nextLocation) => {})
 * - match(location, (error, redirectLocation, nextState) => {})
 * - isActive(pathname, query, indexOnly=false)
 */
function useRoutes(createHistory) {
  return function () {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var routes = options.routes;

    var historyOptions = _objectWithoutProperties(options, ['routes']);

    var history = _historyLibUseQueries2['default'](createHistory)(historyOptions);
    var state = {};

    function isActive(pathname, query) {
      var indexOnly = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

      return _isActive3['default'](pathname, query, indexOnly, state.location, state.routes, state.params);
    }

    function createLocationFromRedirectInfo(_ref) {
      var pathname = _ref.pathname;
      var query = _ref.query;
      var state = _ref.state;

      return history.createLocation(history.createPath(pathname, query), state, _historyLibActions.REPLACE);
    }

    var partialNextState = undefined;

    function match(location, callback) {
      if (partialNextState && partialNextState.location === location) {
        // Continue from where we left off.
        finishMatch(partialNextState, callback);
      } else {
        _matchRoutes2['default'](routes, location, function (error, nextState) {
          if (error) {
            callback(error);
          } else if (nextState) {
            finishMatch(_extends({}, nextState, { location: location }), callback);
          } else {
            callback();
          }
        });
      }
    }

    function finishMatch(nextState, callback) {
      var _computeChangedRoutes = _computeChangedRoutes3['default'](state, nextState);

      var leaveRoutes = _computeChangedRoutes.leaveRoutes;
      var enterRoutes = _computeChangedRoutes.enterRoutes;

      _TransitionUtils.runLeaveHooks(leaveRoutes);

      _TransitionUtils.runEnterHooks(enterRoutes, nextState, function (error, redirectInfo) {
        if (error) {
          callback(error);
        } else if (redirectInfo) {
          callback(null, createLocationFromRedirectInfo(redirectInfo));
        } else {
          // TODO: Fetch components after state is updated.
          _getComponents2['default'](nextState, function (error, components) {
            if (error) {
              callback(error);
            } else {
              // TODO: Make match a pure function and have some other API
              // for "match and update state".
              callback(null, null, state = _extends({}, nextState, { components: components }));
            }
          });
        }
      });
    }

    var RouteGuid = 1;

    function getRouteID(route) {
      return route.__id__ || (route.__id__ = RouteGuid++);
    }

    var RouteHooks = {};

    function getRouteHooksForRoutes(routes) {
      return routes.reduce(function (hooks, route) {
        hooks.push.apply(hooks, RouteHooks[getRouteID(route)]);
        return hooks;
      }, []);
    }

    function transitionHook(location, callback) {
      _matchRoutes2['default'](routes, location, function (error, nextState) {
        if (nextState == null) {
          // TODO: We didn't actually match anything, but hang
          // onto error/nextState so we don't have to matchRoutes
          // again in the listen callback.
          callback();
          return;
        }

        // Cache some state here so we don't have to
        // matchRoutes() again in the listen callback.
        partialNextState = _extends({}, nextState, { location: location });

        var hooks = getRouteHooksForRoutes(_computeChangedRoutes3['default'](state, partialNextState).leaveRoutes);

        var result = undefined;
        for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
          // Passing the location arg here indicates to
          // the user that this is a transition hook.
          result = hooks[i](location);
        }

        callback(result);
      });
    }

    function beforeUnloadHook() {
      // Synchronously check to see if any route hooks want
      // to prevent the current window/tab from closing.
      if (state.routes) {
        var hooks = getRouteHooksForRoutes(state.routes);

        var message = undefined;
        for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
          // Passing no args indicates to the user that this is a
          // beforeunload hook. We don't know the next location.
          message = hooks[i]();
        }

        return message;
      }
    }

    var unlistenBefore = undefined,
        unlistenBeforeUnload = undefined;

    /**
     * Registers the given hook function to run before leaving the given route.
     *
     * During a normal transition, the hook function receives the next location
     * as its only argument and must return either a) a prompt message to show
     * the user, to make sure they want to leave the page or b) false, to prevent
     * the transition.
     *
     * During the beforeunload event (in browsers) the hook receives no arguments.
     * In this case it must return a prompt message to prevent the transition.
     *
     * Returns a function that may be used to unbind the listener.
     */
    function listenBeforeLeavingRoute(route, hook) {
      // TODO: Warn if they register for a route that isn't currently
      // active. They're probably doing something wrong, like re-creating
      // route objects on every location change.
      var routeID = getRouteID(route);
      var hooks = RouteHooks[routeID];

      if (hooks == null) {
        var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);

        hooks = RouteHooks[routeID] = [hook];

        if (thereWereNoRouteHooks) {
          // setup transition & beforeunload hooks
          unlistenBefore = history.listenBefore(transitionHook);

          if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
        }
      } else if (hooks.indexOf(hook) === -1) {
        hooks.push(hook);
      }

      return function () {
        var hooks = RouteHooks[routeID];

        if (hooks != null) {
          var newHooks = hooks.filter(function (item) {
            return item !== hook;
          });

          if (newHooks.length === 0) {
            delete RouteHooks[routeID];

            if (!hasAnyProperties(RouteHooks)) {
              // teardown transition & beforeunload hooks
              if (unlistenBefore) {
                unlistenBefore();
                unlistenBefore = null;
              }

              if (unlistenBeforeUnload) {
                unlistenBeforeUnload();
                unlistenBeforeUnload = null;
              }
            }
          } else {
            RouteHooks[routeID] = newHooks;
          }
        }
      };
    }

    /**
     * This is the API for stateful environments. As the location
     * changes, we update state and call the listener. We can also
     * gracefully handle errors and redirects.
     */
    function listen(listener) {
      // TODO: Only use a single history listener. Otherwise we'll
      // end up with multiple concurrent calls to match.
      return history.listen(function (location) {
        if (state.location === location) {
          listener(null, state);
        } else {
          match(location, function (error, redirectLocation, nextState) {
            if (error) {
              listener(error);
            } else if (redirectLocation) {
              history.transitionTo(redirectLocation);
            } else if (nextState) {
              listener(null, nextState);
            } else {
              process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : undefined;
            }
          });
        }
      });
    }

    return _extends({}, history, {
      isActive: isActive,
      match: match,
      listenBeforeLeavingRoute: listenBeforeLeavingRoute,
      listen: listen
    });
  };
}

exports['default'] = useRoutes;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./TransitionUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/TransitionUtils.js","./computeChangedRoutes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/computeChangedRoutes.js","./getComponents":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/getComponents.js","./isActive":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/isActive.js","./matchRoutes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/lib/matchRoutes.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","history/lib/Actions":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/Actions.js","history/lib/useQueries":"/Users/emmanash/hacks/rail-fyi-client/node_modules/history/lib/useQueries.js","warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/warning/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/invariant/browser.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react-router/node_modules/warning/browser.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = function() {};

if (process.env.NODE_ENV !== 'production') {
  warning = function(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
        'warning. Please, use a more descriptive format than: ' + format
      );
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' +
        format.replace(/%s/g, function() {
          return args[argIndex++];
        });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch(x) {}
    }
  };
}

module.exports = warning;

}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/AutoFocusUtils.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusUtils
 * @typechecks static-only
 */

'use strict';

var ReactMount = require('./ReactMount');

var findDOMNode = require('./findDOMNode');
var focusNode = require('fbjs/lib/focusNode');

var Mixin = {
  componentDidMount: function () {
    if (this.props.autoFocus) {
      focusNode(findDOMNode(this));
    }
  }
};

var AutoFocusUtils = {
  Mixin: Mixin,

  focusDOMComponent: function () {
    focusNode(ReactMount.getNode(this._rootNodeID));
  }
};

module.exports = AutoFocusUtils;
},{"./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js","./findDOMNode":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/findDOMNode.js","fbjs/lib/focusNode":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/focusNode.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/BeforeInputEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var FallbackCompositionState = require('./FallbackCompositionState');
var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');
var SyntheticInputEvent = require('./SyntheticInputEvent');

var keyOf = require('fbjs/lib/keyOf');

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBeforeInput: null }),
      captured: keyOf({ onBeforeInputCapture: null })
    },
    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionEnd: null }),
      captured: keyOf({ onCompositionEndCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionStart: null }),
      captured: keyOf({ onCompositionStartCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionUpdate: null }),
      captured: keyOf({ onCompositionUpdateCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;
},{"./EventConstants":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPropagators.js","./FallbackCompositionState":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/FallbackCompositionState.js","./SyntheticCompositionEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticCompositionEvent.js","./SyntheticInputEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticInputEvent.js","fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/keyOf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyOf.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/CSSProperty.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  stopOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/CSSPropertyOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactPerf = require('./ReactPerf');

var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
var dangerousStyleValue = require('./dangerousStyleValue');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
var warning = require('fbjs/lib/warning');

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function (styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function (node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styles[styleName]);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
  setValueForStyles: 'setValueForStyles'
});

module.exports = CSSPropertyOperations;
}).call(this,require('_process'))

},{"./CSSProperty":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/CSSProperty.js","./ReactPerf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./dangerousStyleValue":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/dangerousStyleValue.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/camelizeStyleName":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/camelizeStyleName.js","fbjs/lib/hyphenateStyleName":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/hyphenateStyleName.js","fbjs/lib/memoizeStringOnly":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/memoizeStringOnly.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/CallbackQueue.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function (callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function () {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function () {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function () {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/PooledClass.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ChangeEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactUpdates = require('./ReactUpdates');
var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');
var isEventSupported = require('./isEventSupported');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onChange: null }),
      captured: keyOf({ onChangeCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
      if (targetID) {
        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
    }
  }

};

module.exports = ChangeEventPlugin;
},{"./EventConstants":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPluginHub.js","./EventPropagators":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPropagators.js","./ReactUpdates":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","./SyntheticEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js","./getEventTarget":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventTarget.js","./isEventSupported":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/isEventSupported.js","./isTextInputElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/isTextInputElement.js","fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/keyOf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyOf.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ClientReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

'use strict';

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function () {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMChildrenOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

'use strict';

var Danger = require('./Danger');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');
var ReactPerf = require('./ReactPerf');

var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var invariant = require('fbjs/lib/invariant');

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.

  // fix render order error in safari
  // IE8 will throw error when index out of list size.
  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

  parentNode.insertBefore(childNode, beforeChild);
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: setTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function (updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; i < updates.length; i++) {
      update = updates[i];
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup;
    // markupList is either a list of markup or just a list of elements
    if (markupList.length && typeof markupList[0] === 'string') {
      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
    } else {
      renderedMarkup = markupList;
    }

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; k < updates.length; k++) {
      update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.SET_MARKUP:
          setInnerHTML(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
  updateTextContent: 'updateTextContent'
});

module.exports = DOMChildrenOperations;
}).call(this,require('_process'))

},{"./Danger":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Danger.js","./ReactMultiChildUpdateTypes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./ReactPerf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./setInnerHTML":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/setInnerHTML.js","./setTextContent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/setTextContent.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMProperty.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };

      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseAttribute:
   *   Whether the property must be accessed and mutated using `*Attribute()`.
   *   (This includes anything that fails `<propName> in <element>`.)
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasSideEffects:
   *   Whether or not setting a value causes side effects such as triggering
   *   resources to be loaded or text selection changes. If true, we read from
   *   the DOM before updating to ensure that the value is only set if it has
   *   changed.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function (nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMPropertyOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactPerf = require('./ReactPerf');

var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');
var warning = require('fbjs/lib/warning');

// Simplified subset
var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function (name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
      } else if (propertyInfo.mustUseAttribute) {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      } else {
        var propName = propertyInfo.propertyName;
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseAttribute) {
        node.removeAttribute(propertyInfo.attributeName);
      } else {
        var propName = propertyInfo.propertyName;
        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  }

};

ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
  setValueForProperty: 'setValueForProperty',
  setValueForAttribute: 'setValueForAttribute',
  deleteValueForProperty: 'deleteValueForProperty'
});

module.exports = DOMPropertyOperations;
}).call(this,require('_process'))

},{"./DOMProperty":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMProperty.js","./ReactPerf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./quoteAttributeValueForBrowser":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/quoteAttributeValueForBrowser.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Danger.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
var emptyFunction = require('fbjs/lib/emptyFunction');
var getMarkupWrap = require('fbjs/lib/getMarkupWrap');
var invariant = require('fbjs/lib/invariant');

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function (markupList) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
          // This index will be parsed back out below.
          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;
        } else if (process.env.NODE_ENV !== 'production') {
          console.error('Danger: Discarding unexpected node:', renderNode);
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

    var newChild;
    if (typeof markup === 'string') {
      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    } else {
      newChild = markup;
    }
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/createNodesFromMarkup":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/createNodesFromMarkup.js","fbjs/lib/emptyFunction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyFunction.js","fbjs/lib/getMarkupWrap":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/getMarkupWrap.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DefaultEventPluginOrder.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = require('fbjs/lib/keyOf');

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

module.exports = DefaultEventPluginOrder;
},{"fbjs/lib/keyOf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyOf.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EnterLeaveEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');

var ReactMount = require('./ReactMount');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({ onMouseEnter: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  },
  mouseLeave: {
    registrationName: keyOf({ onMouseLeave: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    var fromID = '';
    var toID = '';
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      fromID = topLevelTargetID;
      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
      if (to) {
        toID = ReactMount.getID(to);
      } else {
        to = win;
      }
      to = to || win;
    } else {
      from = win;
      to = topLevelTarget;
      toID = topLevelTargetID;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;
},{"./EventConstants":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPropagators.js","./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js","./SyntheticMouseEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticMouseEvent.js","fbjs/lib/keyOf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyOf.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventConstants.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var PropagationPhases = keyMirror({ bubbled: null, captured: null });

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topAbort: null,
  topBlur: null,
  topCanPlay: null,
  topCanPlayThrough: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topDurationChange: null,
  topEmptied: null,
  topEncrypted: null,
  topEnded: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topLoadedData: null,
  topLoadedMetadata: null,
  topLoadStart: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topPause: null,
  topPlay: null,
  topPlaying: null,
  topProgress: null,
  topRateChange: null,
  topReset: null,
  topScroll: null,
  topSeeked: null,
  topSeeking: null,
  topSelectionChange: null,
  topStalled: null,
  topSubmit: null,
  topSuspend: null,
  topTextInput: null,
  topTimeUpdate: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topVolumeChange: null,
  topWaiting: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;
},{"fbjs/lib/keyMirror":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyMirror.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPluginHub.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = require('./EventPluginRegistry');
var EventPluginUtils = require('./EventPluginUtils');
var ReactErrorUtils = require('./ReactErrorUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function (InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function () {
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function (id, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(id, registrationName, listener);
    }
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (id, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(id, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function (id) {
    for (var registrationName in listenerBank) {
      if (!listenerBank[registrationName][id]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(id, registrationName);
      }

      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
}).call(this,require('_process'))

},{"./EventPluginRegistry":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPluginRegistry.js","./EventPluginUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPluginUtils.js","./ReactErrorUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactErrorUtils.js","./accumulateInto":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/forEachAccumulated.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPluginRegistry.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (InjectedEventPluginOrder) {
    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPluginUtils.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = require('./EventConstants');
var ReactErrorUtils = require('./ReactErrorUtils');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function (InjectedMount) {
    injection.Mount = InjectedMount;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, simulated, listener, domID) {
  var type = event.type || 'unknown-event';
  event.currentTarget = injection.Mount.getNode(domID);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
  }
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getNode: function (id) {
    return injection.Mount.getNode(id);
  },
  getID: function (node) {
    return injection.Mount.getID(node);
  },

  injection: injection
};

module.exports = EventPluginUtils;
}).call(this,require('_process'))

},{"./EventConstants":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventConstants.js","./ReactErrorUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactErrorUtils.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPropagators.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');

var warning = require('fbjs/lib/warning');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
}).call(this,require('_process'))

},{"./EventConstants":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPluginHub.js","./accumulateInto":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/forEachAccumulated.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/FallbackCompositionState.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/PooledClass.js","./getTextContentAccessor":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getTextContentAccessor.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/HTMLDOMPropertyConfig.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
}

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    challenge: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    headers: null,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    high: null,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    inputMode: MUST_USE_ATTRIBUTE,
    integrity: null,
    is: MUST_USE_ATTRIBUTE,
    keyParams: MUST_USE_ATTRIBUTE,
    keyType: MUST_USE_ATTRIBUTE,
    kind: null,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    low: null,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    minLength: MUST_USE_ATTRIBUTE,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    nonce: MUST_USE_ATTRIBUTE,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcLang: null,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    summary: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,
    wrap: null,

    /**
     * RDFa Properties
     */
    about: MUST_USE_ATTRIBUTE,
    datatype: MUST_USE_ATTRIBUTE,
    inlist: MUST_USE_ATTRIBUTE,
    prefix: MUST_USE_ATTRIBUTE,
    // property is also supported for OpenGraph in meta tags.
    property: MUST_USE_ATTRIBUTE,
    resource: MUST_USE_ATTRIBUTE,
    'typeof': MUST_USE_ATTRIBUTE,
    vocab: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: MUST_USE_ATTRIBUTE,
    autoCorrect: MUST_USE_ATTRIBUTE,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: null,
    // color is for Safari mask-icon link
    color: null,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: MUST_USE_ATTRIBUTE,
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    itemType: MUST_USE_ATTRIBUTE,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: MUST_USE_ATTRIBUTE,
    itemRef: MUST_USE_ATTRIBUTE,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: null,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: MUST_USE_ATTRIBUTE,
    // IE-only attribute that controls focus behavior
    unselectable: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoComplete: 'autocomplete',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    autoSave: 'autosave',
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
    encType: 'encoding',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;
},{"./DOMProperty":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMProperty.js","fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/LinkedValueUtils.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

'use strict';

var ReactPropTypes = require('./ReactPropTypes');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: ReactPropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
}).call(this,require('_process'))

},{"./ReactPropTypeLocations":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocations.js","./ReactPropTypes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPropTypes.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

'use strict';

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
}

module.exports = assign;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/PooledClass.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/React.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

'use strict';

var ReactDOM = require('./ReactDOM');
var ReactDOMServer = require('./ReactDOMServer');
var ReactIsomorphic = require('./ReactIsomorphic');

var assign = require('./Object.assign');
var deprecated = require('./deprecated');

// `version` will be added here by ReactIsomorphic.
var React = {};

assign(React, ReactIsomorphic);

assign(React, {
  // ReactDOM
  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

  // ReactDOMServer
  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
});

React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

module.exports = React;
},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactDOM":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOM.js","./ReactDOMServer":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMServer.js","./ReactIsomorphic":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactIsomorphic.js","./deprecated":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/deprecated.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactBrowserComponentMixin.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

'use strict';

var ReactInstanceMap = require('./ReactInstanceMap');

var findDOMNode = require('./findDOMNode');
var warning = require('fbjs/lib/warning');

var didWarnKey = '_getDOMNodeDidWarn';

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function () {
    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
    this.constructor[didWarnKey] = true;
    return findDOMNode(this);
  }
};

module.exports = ReactBrowserComponentMixin;
}).call(this,require('_process'))

},{"./ReactInstanceMap":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInstanceMap.js","./findDOMNode":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/findDOMNode.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactBrowserEventEmitter.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');
var ReactPerf = require('./ReactPerf');
var ViewportMetrics = require('./ViewportMetrics');

var assign = require('./Object.assign');
var isEventSupported = require('./isEventSupported');

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
  putListener: 'putListener',
  deleteListener: 'deleteListener'
});

module.exports = ReactBrowserEventEmitter;
},{"./EventConstants":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPluginHub.js","./EventPluginRegistry":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPluginRegistry.js","./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactEventEmitterMixin":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactEventEmitterMixin.js","./ReactPerf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ViewportMetrics":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ViewportMetrics.js","./isEventSupported":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/isEventSupported.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactChildReconciler.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 * @typechecks static-only
 */

'use strict';

var ReactReconciler = require('./ReactReconciler');

var instantiateReactComponent = require('./instantiateReactComponent');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

function instantiateChild(childInstances, child, name) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, null);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};
    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, transaction, context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return null;
    }
    var name;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          ReactReconciler.unmountComponent(prevChild, name);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, null);
        nextChildren[name] = nextChildInstance;
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        ReactReconciler.unmountComponent(prevChildren[name]);
      }
    }
    return nextChildren;
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild);
      }
    }
  }

};

module.exports = ReactChildReconciler;
}).call(this,require('_process'))

},{"./ReactReconciler":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactReconciler.js","./instantiateReactComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/instantiateReactComponent.js","./shouldUpdateReactComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/shouldUpdateReactComponent.js","./traverseAllChildren":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/traverseAllChildren.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactChildren.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = require('./PooledClass');
var ReactElement = require('./ReactElement');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('./traverseAllChildren');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result;
  var keyPrefix = bookKeeping.keyPrefix;
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"./PooledClass":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/PooledClass.js","./ReactElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js","./traverseAllChildren":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/traverseAllChildren.js","fbjs/lib/emptyFunction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyFunction.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactClass.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';

var ReactComponent = require('./ReactComponent');
var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var keyMirror = require('fbjs/lib/keyMirror');
var keyOf = require('fbjs/lib/keyOf');
var warning = require('fbjs/lib/warning');

var MIXINS_KEY = keyOf({ mixins: null });

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});

var injectedMixins = [];

var warnedSetProps = false;
function warnSetProps() {
  if (!warnedSetProps) {
    warnedSetProps = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
  }
}

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
    }
    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
    }
    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
    }
    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

// noop
function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but not in __DEV__
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = (name in RESERVED_SPEC_KEYS);
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

    var isInherited = (name in Constructor);
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    /* eslint-disable block-scoped-var, no-undef */
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
      /* eslint-enable */
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  setProps: function (partialProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueSetProps(this, partialProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Replace all the props.
   *
   * @param {object} newProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  replaceProps: function (newProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueReplaceProps(this, newProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  }
};

var ReactClassComponent = function () {};
assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    var Constructor = function (props, context, updater) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindMap) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

      this.state = initialState;
    };
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactComponent.js","./ReactElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactNoopUpdateQueue":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactNoopUpdateQueue.js","./ReactPropTypeLocationNames":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocations.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/emptyObject":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/keyMirror":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyMirror.js","fbjs/lib/keyOf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyOf.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var canDefineProperty = require('./canDefineProperty');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
  }
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
    setProps: ['setProps', 'Instead, call render again at the top level.']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
}).call(this,require('_process'))

},{"./ReactNoopUpdateQueue":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactNoopUpdateQueue.js","./canDefineProperty":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/canDefineProperty.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/emptyObject":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactComponentBrowserEnvironment.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactMount = require('./ReactMount');

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function (rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  }

};

module.exports = ReactComponentBrowserEnvironment;
},{"./ReactDOMIDOperations":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMIDOperations.js","./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactComponentEnvironment.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null,

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkupByID: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactCompositeComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactPerf = require('./ReactPerf');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum(component) {
  var owner = component._currentElement._owner || null;
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  return Component(this.props, this.context, this.updater);
};

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;

    // See ReactUpdateQueue
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedComponent = null;

    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._rootNodeID = rootID;

    var publicProps = this._processProps(this._currentElement.props);
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    // Initialize the public class
    var inst;
    var renderedElement;

    // This is a way to detect if Component is a stateless arrow function
    // component, which is not newable. It might not be 100% reliable but is
    // something we can do until we start detecting that Component extends
    // React.Component. We already assume that typeof Component === 'function'.
    var canInstantiate = ('prototype' in Component);

    if (canInstantiate) {
      if (process.env.NODE_ENV !== 'production') {
        ReactCurrentOwner.current = this;
        try {
          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
        } finally {
          ReactCurrentOwner.current = null;
        }
      } else {
        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
      }
    }

    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
      renderedElement = inst;
      inst = new StatelessComponent(Component);
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
      } else {
        // We support ES6 inheriting from React.Component, the module pattern,
        // and stateless components, but not ES6 classes that don't extend
        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
      }
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = ReactUpdateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    if (inst.componentWillMount) {
      inst.componentWillMount();
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    this._renderedComponent = this._instantiateReactComponent(renderedElement);

    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
    if (inst.componentDidMount) {
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
    }

    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function () {
    var inst = this._instance;

    if (inst.componentWillUnmount) {
      inst.componentWillUnmount();
    }

    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;
    this._instance = null;

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var maskedContext = null;
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext = inst.getChildContext && inst.getChildContext();
    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
      if (process.env.NODE_ENV !== 'production') {
        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function (newProps) {
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.propTypes) {
        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function (propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.getName();
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // top-level render calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);

          if (location === ReactPropTypeLocations.prop) {
            // Preface gives us something to blacklist in warning module
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
          } else {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
          }
        }
      }
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
    }

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;

    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
    var nextProps;

    // Distinguish between a props update versus a simple state update
    if (prevParentElement === nextParentElement) {
      // Skip checking prop types again -- we don't read inst.props to avoid
      // warning for DOM component props in this upgrade
      nextProps = nextParentElement.props;
    } else {
      nextProps = this._processProps(nextParentElement.props);
      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.

      if (inst.componentWillReceiveProps) {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);

    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      inst.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      // These two IDs are actually the same! But nothing should rely on that.
      var thisID = this._rootNodeID;
      var prevComponentID = prevComponentInstance._rootNodeID;
      ReactReconciler.unmountComponent(prevComponentInstance);

      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    }
  },

  /**
   * @protected
   */
  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedComponent = inst.render();
    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;
      }
    }

    return renderedComponent;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedComponent;
    ReactCurrentOwner.current = this;
    try {
      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
    } finally {
      ReactCurrentOwner.current = null;
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
    return renderedComponent;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (inst instanceof StatelessComponent) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent',
  _renderValidatedComponent: '_renderValidatedComponent'
});

var ReactCompositeComponent = {

  Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactComponentEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactComponentEnvironment.js","./ReactCurrentOwner":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactInstanceMap":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInstanceMap.js","./ReactPerf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ReactPropTypeLocationNames":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocations.js","./ReactReconciler":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactReconciler.js","./ReactUpdateQueue":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdateQueue.js","./shouldUpdateReactComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/shouldUpdateReactComponent.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/emptyObject":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOM.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdates = require('./ReactUpdates');
var ReactVersion = require('./ReactVersion');

var findDOMNode = require('./findDOMNode');
var renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');
var warning = require('fbjs/lib/warning');

ReactDefaultInjection.inject();

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  findDOMNode: findDOMNode,
  render: render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
/* eslint-enable camelcase */
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    CurrentOwner: ReactCurrentOwner,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    Reconciler: ReactReconciler,
    TextComponent: ReactDOMTextComponent
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

    // shams
    Object.create, Object.freeze];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
        break;
      }
    }
  }
}

module.exports = React;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactDOMTextComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMTextComponent.js","./ReactDefaultInjection":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDefaultInjection.js","./ReactInstanceHandles":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ReactReconciler":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactReconciler.js","./ReactUpdates":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","./ReactVersion":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactVersion.js","./findDOMNode":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/findDOMNode.js","./renderSubtreeIntoContainer":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/renderSubtreeIntoContainer.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMButton.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var mouseListenerNames = {
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,

  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
};

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = {
  getNativeProps: function (inst, props, context) {
    if (!props.disabled) {
      return props;
    }

    // Copy the props, except the mouse listeners
    var nativeProps = {};
    for (var key in props) {
      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
        nativeProps[key] = props[key];
      }
    }

    return nativeProps;
  }
};

module.exports = ReactDOMButton;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

/* global hasOwnProperty:true */

'use strict';

var AutoFocusUtils = require('./AutoFocusUtils');
var CSSPropertyOperations = require('./CSSPropertyOperations');
var DOMProperty = require('./DOMProperty');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var EventConstants = require('./EventConstants');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDOMButton = require('./ReactDOMButton');
var ReactDOMInput = require('./ReactDOMInput');
var ReactDOMOption = require('./ReactDOMOption');
var ReactDOMSelect = require('./ReactDOMSelect');
var ReactDOMTextarea = require('./ReactDOMTextarea');
var ReactMount = require('./ReactMount');
var ReactMultiChild = require('./ReactMultiChild');
var ReactPerf = require('./ReactPerf');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var isEventSupported = require('./isEventSupported');
var keyOf = require('fbjs/lib/keyOf');
var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var shallowEqual = require('fbjs/lib/shallowEqual');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var CHILDREN = keyOf({ children: null });
var STYLE = keyOf({ style: null });
var HTML = keyOf({ __html: null });

var ELEMENT_NODE_TYPE = 1;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

var legacyPropsDescriptor;
if (process.env.NODE_ENV !== 'production') {
  legacyPropsDescriptor = {
    props: {
      enumerable: false,
      get: function () {
        var component = this._reactInternalComponent;
        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
        return component._currentElement.props;
      }
    }
  };
}

function legacyGetDOMNode() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return this;
}

function legacyIsMounted() {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return !!component;
}

function legacySetStateEtc() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
}

function legacySetProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function legacyReplaceProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined becauses undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (process.env.NODE_ENV !== 'production') {
    if (voidElementTags[component._tag]) {
      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
    }
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
}

function enqueuePutListener(id, registrationName, listener, transaction) {
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
    listenTo(registrationName, doc);
  }
  transaction.getReactMountReady().enqueue(putListener, {
    id: id,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
  var node = ReactMount.getNode(inst._rootNodeID);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

  switch (inst._tag) {
    case 'iframe':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
        }
      }

      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
      break;
  }
}

function mountReadyInputWrapper() {
  ReactDOMInput.mountReadyWrapper(this);
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

// NOTE: menuitem's close tag should be omitted, but that causes problems.
var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = ({}).hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
    validatedTagCache[tag] = true;
  }
}

function processChildContextDev(context, inst) {
  // Pass down our tag name to child components for validation purposes
  context = assign({}, context);
  var info = context[validateDOMNesting.ancestorInfoContextKey];
  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
  return context;
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag.toLowerCase();
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._nodeWithLegacyProperties = null;
  if (process.env.NODE_ENV !== 'production') {
    this._unprocessedContextDev = null;
    this._processedContextDev = null;
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function (element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (rootID, transaction, context) {
    this._rootNodeID = rootID;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'button':
        props = ReactDOMButton.getNativeProps(this, props, context);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, context);
        props = ReactDOMInput.getNativeProps(this, props, context);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, context);
        props = ReactDOMOption.getNativeProps(this, props, context);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, context);
        props = ReactDOMSelect.getNativeProps(this, props, context);
        context = ReactDOMSelect.processChildContext(this, props, context);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, context);
        props = ReactDOMTextarea.getNativeProps(this, props, context);
        break;
    }

    assertValidProps(this, props);
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      this._unprocessedContextDev = context;
      this._processedContextDev = processChildContextDev(context, this);
      context = this._processedContextDev;
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement(this._currentElement.type);
      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
      // Populate node cache
      ReactMount.getID(el);
      this._updateDOMProperties({}, props, transaction, el);
      this._createInitialChildren(transaction, props, context, el);
      mountImage = el;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
      // falls through
      case 'button':
      case 'select':
      case 'textarea':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (propKey !== CHILDREN) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, el) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        setInnerHTML(el, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        setTextContent(el, contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          el.appendChild(mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'button':
        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
        break;
      case 'input':
        ReactDOMInput.updateWrapper(this);
        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
        break;
    }

    if (process.env.NODE_ENV !== 'production') {
      // If the context is reference-equal to the old one, pass down the same
      // processed object so the update bailout in ReactReconciler behaves
      // correctly (and identically in dev and prod). See #5005.
      if (this._unprocessedContextDev !== context) {
        this._unprocessedContextDev = context;
        this._processedContextDev = processChildContextDev(context, this);
      }
      context = this._processedContextDev;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction, null);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    if (!canDefineProperty && this._nodeWithLegacyProperties) {
      this._nodeWithLegacyProperties.props = nextProps;
    }

    if (this._tag === 'select') {
      // <select> value update needs to occur after <option> children
      // reconciliation
      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        DOMPropertyOperations.deleteValueForProperty(node, propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        if (propKey === CHILDREN) {
          nextProp = null;
        }
        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertantly setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      if (!node) {
        node = ReactMount.getNode(this._rootNodeID);
      }
      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction, context);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function () {
    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
        ReactDOMInput.unmountWrapper(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
        break;
    }

    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
    this._wrapperState = null;
    if (this._nodeWithLegacyProperties) {
      var node = this._nodeWithLegacyProperties;
      node._reactInternalComponent = null;
      this._nodeWithLegacyProperties = null;
    }
  },

  getPublicInstance: function () {
    if (!this._nodeWithLegacyProperties) {
      var node = ReactMount.getNode(this._rootNodeID);

      node._reactInternalComponent = this;
      node.getDOMNode = legacyGetDOMNode;
      node.isMounted = legacyIsMounted;
      node.setState = legacySetStateEtc;
      node.replaceState = legacySetStateEtc;
      node.forceUpdate = legacySetStateEtc;
      node.setProps = legacySetProps;
      node.replaceProps = legacyReplaceProps;

      if (process.env.NODE_ENV !== 'production') {
        if (canDefineProperty) {
          Object.defineProperties(node, legacyPropsDescriptor);
        } else {
          // updateComponent will update this property on subsequent renders
          node.props = this._currentElement.props;
        }
      } else {
        // updateComponent will update this property on subsequent renders
        node.props = this._currentElement.props;
      }

      this._nodeWithLegacyProperties = node;
    }
    return this._nodeWithLegacyProperties;
  }

};

ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent'
});

assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
}).call(this,require('_process'))

},{"./AutoFocusUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/AutoFocusUtils.js","./CSSPropertyOperations":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/CSSPropertyOperations.js","./DOMProperty":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMProperty.js","./DOMPropertyOperations":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMPropertyOperations.js","./EventConstants":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventConstants.js","./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactBrowserEventEmitter":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactComponentBrowserEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactDOMButton":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMButton.js","./ReactDOMInput":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMInput.js","./ReactDOMOption":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMOption.js","./ReactDOMSelect":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMSelect.js","./ReactDOMTextarea":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMTextarea.js","./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactMultiChild":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMultiChild.js","./ReactPerf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ReactUpdateQueue":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdateQueue.js","./canDefineProperty":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/canDefineProperty.js","./escapeTextContentForBrowser":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/escapeTextContentForBrowser.js","./isEventSupported":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/isEventSupported.js","./setInnerHTML":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/setInnerHTML.js","./setTextContent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/setTextContent.js","./validateDOMNesting":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/validateDOMNesting.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/keyOf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyOf.js","fbjs/lib/shallowEqual":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/shallowEqual.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMFactories.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFactories
 * @typechecks static-only
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');

var mapObject = require('fbjs/lib/mapObject');

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if (process.env.NODE_ENV !== 'production') {
    return ReactElementValidator.createFactory(tag);
  }
  return ReactElement.createFactory(tag);
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hgroup: 'hgroup',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  clipPath: 'clipPath',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  image: 'image',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOMFactories;
}).call(this,require('_process'))

},{"./ReactElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElementValidator.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/mapObject":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/mapObject.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMFeatureFlags.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFeatureFlags
 */

'use strict';

var ReactDOMFeatureFlags = {
  useCreateElement: false
};

module.exports = ReactDOMFeatureFlags;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMIDOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var invariant = require('fbjs/lib/invariant');

/**
 * Errors for properties that should not be updated with `updatePropertyByID()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: function (id, name, value) {
    var node = ReactMount.getNode(id);
    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

    // If we're updating to null or undefined, we should remove the property
    // from the DOM node instead of inadvertantly setting to a string. This
    // brings us in line with the same behavior we have on initial render.
    if (value != null) {
      DOMPropertyOperations.setValueForProperty(node, name, value);
    } else {
      DOMPropertyOperations.deleteValueForProperty(node, name);
    }
  },

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
  },

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (updates, markup) {
    for (var i = 0; i < updates.length; i++) {
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
    }
    DOMChildrenOperations.processUpdates(updates, markup);
  }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;
}).call(this,require('_process'))

},{"./DOMChildrenOperations":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMChildrenOperations.js","./DOMPropertyOperations":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMPropertyOperations.js","./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPerf.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMInput.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var instancesByReactID = {};

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getNativeProps: function (inst, props, context) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var nativeProps = assign({}, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null,
      onChange: _handleChange.bind(inst)
    };
  },

  mountReadyWrapper: function (inst) {
    // Can't be in mountWrapper or else server rendering leaks.
    instancesByReactID[inst._rootNodeID] = inst;
  },

  unmountWrapper: function (inst) {
    delete instancesByReactID[inst._rootNodeID];
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
    }

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactMount.getNode(this._rootNodeID);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React with non-React.
      var otherID = ReactMount.getID(otherNode);
      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
      var otherInstance = instancesByReactID[otherID];
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
}).call(this,require('_process'))

},{"./LinkedValueUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactDOMIDOperations":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMIDOperations.js","./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMOption.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactDOMSelect = require('./ReactDOMSelect');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = ReactDOMSelect.valueContextKey;

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, context) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
    }

    // Look up whether this option is 'selected' via context
    var selectValue = context[valueContextKey];

    // If context key is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === '' + props.value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === '' + props.value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  getNativeProps: function (inst, props, context) {
    var nativeProps = assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      nativeProps.selected = inst._wrapperState.selected;
    }

    var content = '';

    // Flatten children and warn if they aren't strings or numbers;
    // invalid types are ignored.
    ReactChildren.forEach(props.children, function (child) {
      if (child == null) {
        return;
      }
      if (typeof child === 'string' || typeof child === 'number') {
        content += child;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
      }
    });

    if (content) {
      nativeProps.children = content;
    }

    return nativeProps;
  }

};

module.exports = ReactDOMOption;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactChildren":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactChildren.js","./ReactDOMSelect":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMSelect.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMSelect.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    if (props.multiple) {
      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    } else {
      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactMount.getNode(inst._rootNodeID).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  valueContextKey: valueContextKey,

  getNativeProps: function (inst, props, context) {
    return assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };
  },

  processChildContext: function (inst, props, context) {
    // Pass down initial value so initial generated markup has correct
    // `selected` attributes
    var childContext = assign({}, context);
    childContext[valueContextKey] = inst._wrapperState.initialValue;
    return childContext;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // the context value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  this._wrapperState.pendingUpdate = true;
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
}).call(this,require('_process'))

},{"./LinkedValueUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMSelection.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"./getNodeForCharacterOffset":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getNodeForCharacterOffset.js","./getTextContentAccessor":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getTextContentAccessor.js","fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMServer.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMServer
 */

'use strict';

var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactServerRendering = require('./ReactServerRendering');
var ReactVersion = require('./ReactVersion');

ReactDefaultInjection.inject();

var ReactDOMServer = {
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  version: ReactVersion
};

module.exports = ReactDOMServer;
},{"./ReactDefaultInjection":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDefaultInjection.js","./ReactServerRendering":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactServerRendering.js","./ReactVersion":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactVersion.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMTextComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactMount = require('./ReactMount');

var assign = require('./Object.assign');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setTextContent = require('./setTextContent');
var validateDOMNesting = require('./validateDOMNesting');

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (props) {
  // This constructor and its argument is currently used by mocks.
};

assign(ReactDOMTextComponent.prototype, {

  /**
   * @param {ReactText} text
   * @internal
   */
  construct: function (text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;

    // Properties
    this._rootNodeID = null;
    this._mountIndex = 0;
  },

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    this._rootNodeID = rootID;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement('span');
      DOMPropertyOperations.setAttributeForID(el, rootID);
      // Populate node cache
      ReactMount.getID(el);
      setTextContent(el, this._stringText);
      return el;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this in a `span` for the reasons stated above, but
        // since this is a situation where React won't take over (static pages),
        // we can simply return the text as it is.
        return escapedText;
      }

      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var node = ReactMount.getNode(this._rootNodeID);
        DOMChildrenOperations.updateTextContent(node, nextStringText);
      }
    }
  },

  unmountComponent: function () {
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
  }

});

module.exports = ReactDOMTextComponent;
}).call(this,require('_process'))

},{"./DOMChildrenOperations":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMChildrenOperations.js","./DOMPropertyOperations":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMPropertyOperations.js","./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactComponentBrowserEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js","./escapeTextContentForBrowser":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/escapeTextContentForBrowser.js","./setTextContent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/setTextContent.js","./validateDOMNesting":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/validateDOMNesting.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMTextarea.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getNativeProps: function (inst, props, context) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    var nativeProps = assign({}, props, {
      defaultValue: undefined,
      value: undefined,
      children: inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
      }
      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(props);

    inst._wrapperState = {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue),
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
}).call(this,require('_process'))

},{"./LinkedValueUtils":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactDOMIDOperations":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMIDOperations.js","./ReactUpdates":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDefaultBatchingStrategy.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';

var ReactUpdates = require('./ReactUpdates');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d, e);
    } else {
      transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactUpdates":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","./Transaction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Transaction.js","fbjs/lib/emptyFunction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyFunction.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDefaultInjection.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');
var ChangeEventPlugin = require('./ChangeEventPlugin');
var ClientReactRootIndex = require('./ClientReactRootIndex');
var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');
var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');
var ReactBrowserComponentMixin = require('./ReactBrowserComponentMixin');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactDOMComponent = require('./ReactDOMComponent');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactEventListener = require('./ReactEventListener');
var ReactInjection = require('./ReactInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactReconcileTransaction = require('./ReactReconcileTransaction');
var SelectEventPlugin = require('./SelectEventPlugin');
var ServerReactRootIndex = require('./ServerReactRootIndex');
var SimpleEventPlugin = require('./SimpleEventPlugin');
var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if (process.env.NODE_ENV !== 'production') {
    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
    if (/[?&]react_perf\b/.test(url)) {
      var ReactDefaultPerf = require('./ReactDefaultPerf');
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};
}).call(this,require('_process'))

},{"./BeforeInputEventPlugin":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/BeforeInputEventPlugin.js","./ChangeEventPlugin":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ChangeEventPlugin.js","./ClientReactRootIndex":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ClientReactRootIndex.js","./DefaultEventPluginOrder":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DefaultEventPluginOrder.js","./EnterLeaveEventPlugin":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EnterLeaveEventPlugin.js","./HTMLDOMPropertyConfig":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/HTMLDOMPropertyConfig.js","./ReactBrowserComponentMixin":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactComponentBrowserEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactDOMComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMComponent.js","./ReactDOMTextComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMTextComponent.js","./ReactDefaultBatchingStrategy":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDefaultBatchingStrategy.js","./ReactDefaultPerf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDefaultPerf.js","./ReactEventListener":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactEventListener.js","./ReactInjection":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInjection.js","./ReactInstanceHandles":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactReconcileTransaction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactReconcileTransaction.js","./SVGDOMPropertyConfig":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SVGDOMPropertyConfig.js","./SelectEventPlugin":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SelectEventPlugin.js","./ServerReactRootIndex":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ServerReactRootIndex.js","./SimpleEventPlugin":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SimpleEventPlugin.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDefaultPerf.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var performanceNow = require('fbjs/lib/performanceNow');

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function () {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function () {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function () {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  getMeasurementsSummaryMap: function (measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
    return summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  printDOM: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function (item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result.type = item.type;
      result.args = JSON.stringify(item.args);
      return result;
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  _recordWrite: function (id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function (moduleName, fnName, func) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0,
          created: {}
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function (update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
          });
        } else {
          // basic format
          var id = args[0];
          if (typeof id === 'object') {
            id = ReactMount.getID(args[0]);
          }
          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
      fnName === '_renderValidatedComponent')) {

        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          entry.created[rootNodeID] = true;
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;
},{"./DOMProperty":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMProperty.js","./ReactDefaultPerfAnalysis":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDefaultPerfAnalysis.js","./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPerf.js","fbjs/lib/performanceNow":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/performanceNow.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDefaultPerfAnalysis.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

'use strict';

var assign = require('./Object.assign');

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  '_mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  SET_MARKUP: 'set innerHTML',
  TEXT_CONTENT: 'set textContent',
  'setValueForProperty': 'update attribute',
  'setValueForAttribute': 'update attribute',
  'deleteValueForProperty': 'remove attribute',
  'setValueForStyles': 'update styles',
  'replaceNodeWithMarkup': 'replace',
  'updateTextContent': 'set textContent'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  measurements.forEach(function (measurement) {
    Object.keys(measurement.writes).forEach(function (id) {
      measurement.writes[id].forEach(function (write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    });
  });
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function (a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function (a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    // check if component newly created
    if (measurement.created[id]) {
      isDirty = true;
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;
},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    Object.freeze(element.props);
    Object.freeze(element);
  }

  return element;
};

ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key;
    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

  if (process.env.NODE_ENV !== 'production') {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }

  return newElement;
};

ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (config.ref !== undefined) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (config.key !== undefined) {
      key = '' + config.key;
    }
    // Remaining properties override existing props
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactCurrentOwner":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./canDefineProperty":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/canDefineProperty.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElementValidator.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactCurrentOwner = require('./ReactCurrentOwner');

var canDefineProperty = require('./canDefineProperty');
var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

var loggedTypeFailures = {};

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
  if (addenda === null) {
    // we already showed the warning
    return;
  }
  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} messageType A key used for de-duping warnings.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 * @returns {?object} A set of addenda to use in the warning message, or null
 * if the warning has already been shown before (and shouldn't be shown again).
 */
function getAddendaForKeyUse(messageType, element, parentType) {
  var addendum = getDeclarationErrorAddendum();
  if (!addendum) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      addendum = ' Check the top-level render call using <' + parentName + '>.';
    }
  }

  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
  if (memoizer[addendum]) {
    return null;
  }
  memoizer[addendum] = true;

  var addenda = {
    parentOrOwner: addendum,
    url: ' See https://fb.me/react-warning-keys for more information.',
    childOwner: null
  };

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  return addenda;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum();
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactPropTypeLocationNames":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocations.js","./canDefineProperty":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/canDefineProperty.js","./getIteratorFn":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getIteratorFn.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactEmptyComponent.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactReconciler = require('./ReactReconciler');

var assign = require('./Object.assign');

var placeholderElement;

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function (component) {
    placeholderElement = ReactElement.createElement(component);
  }
};

function registerNullComponentID() {
  ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);
}

var ReactEmptyComponent = function (instantiate) {
  this._currentElement = null;
  this._rootNodeID = null;
  this._renderedComponent = instantiate(placeholderElement);
};
assign(ReactEmptyComponent.prototype, {
  construct: function (element) {},
  mountComponent: function (rootID, transaction, context) {
    transaction.getReactMountReady().enqueue(registerNullComponentID, this);
    this._rootNodeID = rootID;
    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
  },
  receiveComponent: function () {},
  unmountComponent: function (rootID, transaction, context) {
    ReactReconciler.unmountComponent(this._renderedComponent);
    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
    this._rootNodeID = null;
    this._renderedComponent = null;
  }
});

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactEmptyComponentRegistry":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactEmptyComponentRegistry.js","./ReactReconciler":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactReconciler.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactEmptyComponentRegistry.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponentRegistry
 */

'use strict';

// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIDsRegistry = {};

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return !!nullComponentIDsRegistry[id];
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIDsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIDsRegistry[id];
}

var ReactEmptyComponentRegistry = {
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID,
  deregisterNullComponentID: deregisterNullComponentID
};

module.exports = ReactEmptyComponentRegistry;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactErrorUtils.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {?String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a, b) {
  try {
    return func(a, b);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
    return undefined;
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
      var boundFunc = func.bind(null, a, b);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactEventEmitterMixin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
},{"./EventPluginHub":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPluginHub.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactEventListener.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

'use strict';

var EventListener = require('fbjs/lib/EventListener');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var PooledClass = require('./PooledClass');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var getEventTarget = require('./getEventTarget');
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  // TODO: Re-enable event.path handling
  //
  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
  //   // New browsers have a path attribute on native events
  //   handleTopLevelWithPath(bookKeeping);
  // } else {
  //   // Legacy browsers don't have a path attribute on native events
  //   handleTopLevelWithoutPath(bookKeeping);
  // }

  void handleTopLevelWithPath; // temporarily unused
  handleTopLevelWithoutPath(bookKeeping);
}

// Legacy browsers don't have a path attribute on native events
function handleTopLevelWithoutPath(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// New browsers have a path attribute on native events
function handleTopLevelWithPath(bookKeeping) {
  var path = bookKeeping.nativeEvent.path;
  var currentNativeTarget = path[0];
  var eventsFired = 0;
  for (var i = 0; i < path.length; i++) {
    var currentPathElement = path[i];
    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
      currentNativeTarget = path[i + 1];
    }
    // TODO: slow
    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
    if (reactParent === currentPathElement) {
      var currentPathElementID = ReactMount.getID(currentPathElement);
      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
      bookKeeping.ancestors.push(currentPathElement);

      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
      eventsFired++;
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

      // Jump to the root of this React render tree
      while (currentPathElementID !== newRootID) {
        i++;
        currentPathElement = path[i];
        currentPathElementID = ReactMount.getID(currentPathElement);
      }
    }
  }
  if (eventsFired === 0) {
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;
},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/PooledClass.js","./ReactInstanceHandles":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","./getEventTarget":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventTarget.js","fbjs/lib/EventListener":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/EventListener.js","fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/getUnboundedScrollPosition":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/getUnboundedScrollPosition.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInjection.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginHub = require('./EventPluginHub');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactClass = require('./ReactClass');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactNativeComponent = require('./ReactNativeComponent');
var ReactPerf = require('./ReactPerf');
var ReactRootIndex = require('./ReactRootIndex');
var ReactUpdates = require('./ReactUpdates');

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  Class: ReactClass.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"./DOMProperty":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMProperty.js","./EventPluginHub":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPluginHub.js","./ReactBrowserEventEmitter":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactClass":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactClass.js","./ReactComponentEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactComponentEnvironment.js","./ReactEmptyComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactEmptyComponent.js","./ReactNativeComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactNativeComponent.js","./ReactPerf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ReactRootIndex":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactRootIndex.js","./ReactUpdates":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdates.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInputSelection.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = require('./ReactDOMSelection');

var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var getActiveElement = require('fbjs/lib/getActiveElement');

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;
},{"./ReactDOMSelection":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMSelection.js","fbjs/lib/containsNode":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/containsNode.js","fbjs/lib/focusNode":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/focusNode.js","fbjs/lib/getActiveElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/getActiveElement.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

'use strict';

var ReactRootIndex = require('./ReactRootIndex');

var invariant = require('fbjs/lib/invariant');

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 10000;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {*} arg Argument to invoke the callback with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
  var traverseUp = isAncestorIDOf(stop, start);
  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start;; /* until break */id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function () {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function (rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function (id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Same as `traverseTwoPhase` but skips the `targetID`.
   */
  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, true);
      traverseParentPath(targetID, '', cb, arg, true, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function (targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;
}).call(this,require('_process'))

},{"./ReactRootIndex":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactRootIndex.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInstanceMap.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactIsomorphic.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactIsomorphic
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactComponent = require('./ReactComponent');
var ReactClass = require('./ReactClass');
var ReactDOMFactories = require('./ReactDOMFactories');
var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');
var ReactPropTypes = require('./ReactPropTypes');
var ReactVersion = require('./ReactVersion');

var assign = require('./Object.assign');
var onlyChild = require('./onlyChild');

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign
};

module.exports = React;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactChildren":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactChildren.js","./ReactClass":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactClass.js","./ReactComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactComponent.js","./ReactDOMFactories":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMFactories.js","./ReactElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElementValidator.js","./ReactPropTypes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPropTypes.js","./ReactVersion":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactVersion.js","./onlyChild":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/onlyChild.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMarkupChecksum.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = require('./adler32');

var TAG_END = /\/?>/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags and self-closing tags)
    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;
},{"./adler32":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/adler32.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var containsNode = require('fbjs/lib/containsNode');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');
var setInnerHTML = require('./setInnerHTML');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if (process.env.NODE_ENV !== 'production') {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * Finds the node with the supplied public React instance.
 *
 * @param {*} instance A public React instance.
 * @return {?DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNodeFromInstance(instance) {
  var id = ReactInstanceMap.get(instance)._rootNodeID;
  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
    return null;
  }
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
  if (ReactDOMFeatureFlags.useCreateElement) {
    context = assign({}, context);
    if (container.nodeType === DOC_NODE_TYPE) {
      context[ownerDocumentContextKey] = container;
    } else {
      context[ownerDocumentContextKey] = container.ownerDocument;
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (context === emptyObject) {
      context = {};
    }
    var tag = container.nodeName.toLowerCase();
    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
  }
  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* forceHTML */shouldReuseMarkup);
  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container) {
  ReactReconciler.unmountComponent(instance);

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(node) {
  var reactRootID = getReactRootID(node);
  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
}

/**
 * Returns the first (deepest) ancestor of a node which is rendered by this copy
 * of React.
 */
function findFirstReactDOMImpl(node) {
  // This node might be from another React instance, so we make sure not to
  // examine the node cache here
  for (; node && node.parentNode !== node; node = node.parentNode) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      continue;
    }
    var nodeID = internalGetID(node);
    if (!nodeID) {
      continue;
    }
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

    // If containersByReactRootID contains the container we find by crawling up
    // the tree, we know that this instance of React rendered the node.
    // nb. isValid's strategy (with containsNode) does not work because render
    // trees may be nested and we don't want a false positive in that case.
    var current = node;
    var lastID;
    do {
      lastID = internalGetID(current);
      current = current.parentNode;
      if (current == null) {
        // The passed-in node has been detached from the container it was
        // originally rendered into.
        return null;
      }
    } while (lastID !== reactRootID);

    if (current === containersByReactRootID[reactRootID]) {
      return node;
    }
  }
  return null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var TopLevelWrapper = function () {};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  // this.props is actually a ReactElement
  return this.props;
};

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {

  TopLevelWrapper: TopLevelWrapper,

  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function (nextComponent, container) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(componentInstance, container);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function (container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var containerID = internalGetID(container);
      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
      }

      return false;
    }
    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if (process.env.NODE_ENV !== 'production') {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function (id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if (process.env.NODE_ENV !== 'production') {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        process.env.NODE_ENV !== 'production' ? warning(
        // Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
        var containerChild = container.firstChild;
        if (containerChild && reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function (id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component rendered by this copy of React.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function (node) {
    return findFirstReactDOMImpl(node);
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function (ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    if (process.env.NODE_ENV !== 'production') {
      // This will throw on the next line; give an early warning
      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
    }

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }
        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
  },

  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      container.appendChild(markup);
    } else {
      setInnerHTML(container, markup);
    }
  },

  ownerDocumentContextKey: ownerDocumentContextKey,

  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  getNodeFromInstance: getNodeFromInstance,

  isValid: isValid,

  purgeID: purgeID
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
  _renderNewRootComponent: '_renderNewRootComponent',
  _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;
}).call(this,require('_process'))

},{"./DOMProperty":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMProperty.js","./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactBrowserEventEmitter":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactCurrentOwner":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactDOMFeatureFlags":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMFeatureFlags.js","./ReactElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactEmptyComponentRegistry":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactEmptyComponentRegistry.js","./ReactInstanceHandles":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js","./ReactInstanceMap":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInstanceMap.js","./ReactMarkupChecksum":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMarkupChecksum.js","./ReactPerf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ReactReconciler":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactReconciler.js","./ReactUpdateQueue":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdateQueue.js","./ReactUpdates":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","./instantiateReactComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/instantiateReactComponent.js","./setInnerHTML":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/setInnerHTML.js","./shouldUpdateReactComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/shouldUpdateReactComponent.js","./validateDOMNesting":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/validateDOMNesting.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/containsNode":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/containsNode.js","fbjs/lib/emptyObject":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMultiChild.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactReconciler = require('./ReactReconciler');
var ReactChildReconciler = require('./ReactChildReconciler');

var flattenChildren = require('./flattenChildren');

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueInsertMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    content: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the markup of a node.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function enqueueSetMarkup(parentID, markup) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.SET_MARKUP,
    markupIndex: null,
    content: markup,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    content: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
      var nextChildren;
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements);
          } finally {
            ReactCurrentOwner.current = null;
          }
          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements);
      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;
      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        // TODO: The setTextContent operation should be enough
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChild(prevChildren[name]);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        this.setMarkup(nextMarkup);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildrenElements, transaction, context);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
      this._renderedChildren = nextChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChild(prevChild);
          }
          // The child must be instantiated before it's mounted.
          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
          this._unmountChild(prevChildren[name]);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function () {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, mountImage) {
      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function (textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Sets this markup string.
     *
     * @param {string} markup Markup to set.
     * @protected
     */
    setMarkup: function (markup) {
      enqueueSetMarkup(this._rootNodeID, markup);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
      child._mountIndex = index;
      this.createChild(child, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child) {
      this.removeChild(child);
      child._mountIndex = null;
    }

  }

};

module.exports = ReactMultiChild;
}).call(this,require('_process'))

},{"./ReactChildReconciler":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactChildReconciler.js","./ReactComponentEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactComponentEnvironment.js","./ReactCurrentOwner":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactMultiChildUpdateTypes":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./ReactReconciler":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactReconciler.js","./flattenChildren":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/flattenChildren.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMultiChildUpdateTypes.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  SET_MARKUP: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;
},{"fbjs/lib/keyMirror":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyMirror.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactNativeComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

'use strict';

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags.
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function (componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Get a composite component wrapper class for a specific tag.
 *
 * @param {ReactElement} element The tag for which to get the class.
 * @return {function} The React class constructor function.
 */
function getComponentClassForElement(element) {
  if (typeof element.type === 'function') {
    return element.type;
  }
  var tag = element.type;
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
  }
  return componentClass;
}

/**
 * Get a native internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
  return new genericComponentClass(element.type, element.props);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactNativeComponent = {
  getComponentClassForElement: getComponentClassForElement,
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactNoopUpdateQueue.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNoopUpdateQueue
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnTDZ(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnTDZ(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnTDZ(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnTDZ(publicInstance, 'setState');
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    warnTDZ(publicInstance, 'setProps');
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    warnTDZ(publicInstance, 'replaceProps');
  }

};

module.exports = ReactNoopUpdateQueue;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactOwner.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function (object) {
    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPerf.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

'use strict';

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * @param {object} object
   * @param {string} objectName
   * @param {object<string>} methodNames
   */
  measureMethods: function (object, objectName, methodNames) {
    if (process.env.NODE_ENV !== 'production') {
      for (var key in methodNames) {
        if (!methodNames.hasOwnProperty(key)) {
          continue;
        }
        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
      }
    }
  },

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function (objName, fnName, func) {
    if (process.env.NODE_ENV !== 'production') {
      var measuredFunc = null;
      var wrapper = function () {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function (measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocationNames.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocations.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;
},{"fbjs/lib/keyMirror":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyMirror.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPropTypes.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getIteratorFn = require('./getIteratorFn');

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return '<<anonymous>>';
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;
},{"./ReactElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactPropTypeLocationNames":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocationNames.js","./getIteratorFn":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getIteratorFn.js","fbjs/lib/emptyFunction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyFunction.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactReconcileTransaction.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactInputSelection = require('./ReactInputSelection');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(forceHTML) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
},{"./CallbackQueue":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/PooledClass.js","./ReactBrowserEventEmitter":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactDOMFeatureFlags":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDOMFeatureFlags.js","./ReactInputSelection":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInputSelection.js","./Transaction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Transaction.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactReconciler.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = require('./ReactRef');

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, rootID, transaction, context) {
    var markup = internalInstance.mountComponent(rootID, transaction, context);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance) {
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent();
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction) {
    internalInstance.performUpdateIfNecessary(transaction);
  }

};

module.exports = ReactReconciler;
},{"./ReactRef":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactRef.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactRef.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = require('./ReactOwner');

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;

  return(
    // This has a few false positives w/r/t empty components.
    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
  );
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
},{"./ReactOwner":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactOwner.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

'use strict';

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function (_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactServerBatchingStrategy.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerBatchingStrategy
 * @typechecks
 */

'use strict';

var ReactServerBatchingStrategy = {
  isBatchingUpdates: false,
  batchedUpdates: function (callback) {
    // Don't do anything here. During the server rendering we don't want to
    // schedule any updates. We will simply ignore them.
  }
};

module.exports = ReactServerBatchingStrategy;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactServerRendering.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');
var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');
var ReactUpdates = require('./ReactUpdates');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, emptyObject);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};
}).call(this,require('_process'))

},{"./ReactDefaultBatchingStrategy":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactDefaultBatchingStrategy.js","./ReactElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js","./ReactMarkupChecksum":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMarkupChecksum.js","./ReactServerBatchingStrategy":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactServerBatchingStrategy.js","./ReactServerRenderingTransaction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactServerRenderingTransaction.js","./ReactUpdates":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","./instantiateReactComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/instantiateReactComponent.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/emptyObject":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactServerRenderingTransaction.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

'use strict';

var PooledClass = require('./PooledClass');
var CallbackQueue = require('./CallbackQueue');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = false;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
},{"./CallbackQueue":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/PooledClass.js","./Transaction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Transaction.js","fbjs/lib/emptyFunction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyFunction.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdateQueue.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
  },

  enqueueSetPropsInternal: function (internalInstance, partialProps) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    var props = assign({}, element.props, partialProps);
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
  },

  enqueueReplacePropsInternal: function (internalInstance, props) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  enqueueElementInternal: function (internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);
  }

};

module.exports = ReactUpdateQueue;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactCurrentOwner":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactInstanceMap":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInstanceMap.js","./ReactUpdates":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactUpdates.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
}

assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
}).call(this,require('_process'))

},{"./CallbackQueue":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/PooledClass.js","./ReactPerf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ReactReconciler":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactReconciler.js","./Transaction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Transaction.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactVersion.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactVersion
 */

'use strict';

module.exports = '0.14.8';
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SVGDOMPropertyConfig.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

var SVGDOMPropertyConfig = {
  Properties: {
    clipPath: MUST_USE_ATTRIBUTE,
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    xlinkActuate: MUST_USE_ATTRIBUTE,
    xlinkArcrole: MUST_USE_ATTRIBUTE,
    xlinkHref: MUST_USE_ATTRIBUTE,
    xlinkRole: MUST_USE_ATTRIBUTE,
    xlinkShow: MUST_USE_ATTRIBUTE,
    xlinkTitle: MUST_USE_ATTRIBUTE,
    xlinkType: MUST_USE_ATTRIBUTE,
    xmlBase: MUST_USE_ATTRIBUTE,
    xmlLang: MUST_USE_ATTRIBUTE,
    xmlSpace: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {
    clipPath: 'clip-path',
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox',
    xlinkActuate: 'xlink:actuate',
    xlinkArcrole: 'xlink:arcrole',
    xlinkHref: 'xlink:href',
    xlinkRole: 'xlink:role',
    xlinkShow: 'xlink:show',
    xlinkTitle: 'xlink:title',
    xlinkType: 'xlink:type',
    xmlBase: 'xml:base',
    xmlLang: 'xml:lang',
    xmlSpace: 'xml:space'
  }
};

module.exports = SVGDOMPropertyConfig;
},{"./DOMProperty":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/DOMProperty.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SelectEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactInputSelection = require('./ReactInputSelection');
var SyntheticEvent = require('./SyntheticEvent');

var getActiveElement = require('fbjs/lib/getActiveElement');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');
var shallowEqual = require('fbjs/lib/shallowEqual');

var topLevelTypes = EventConstants.topLevelTypes;

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSelect: null }),
      captured: keyOf({ onSelectCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events.
var hasListener = false;
var ON_SELECT_KEY = keyOf({ onSelect: null });

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case topLevelTypes.topSelectionChange:
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (id, registrationName, listener) {
    if (registrationName === ON_SELECT_KEY) {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;
},{"./EventConstants":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPropagators.js","./ReactInputSelection":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInputSelection.js","./SyntheticEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js","./isTextInputElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/isTextInputElement.js","fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/getActiveElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/getActiveElement.js","fbjs/lib/keyOf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyOf.js","fbjs/lib/shallowEqual":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/shallowEqual.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ServerReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

'use strict';

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function () {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SimpleEventPlugin.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventListener = require('fbjs/lib/EventListener');
var EventPropagators = require('./EventPropagators');
var ReactMount = require('./ReactMount');
var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');
var SyntheticEvent = require('./SyntheticEvent');
var SyntheticFocusEvent = require('./SyntheticFocusEvent');
var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');
var SyntheticDragEvent = require('./SyntheticDragEvent');
var SyntheticTouchEvent = require('./SyntheticTouchEvent');
var SyntheticUIEvent = require('./SyntheticUIEvent');
var SyntheticWheelEvent = require('./SyntheticWheelEvent');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getEventCharCode = require('./getEventCharCode');
var invariant = require('fbjs/lib/invariant');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  abort: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onAbort: true }),
      captured: keyOf({ onAbortCapture: true })
    }
  },
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBlur: true }),
      captured: keyOf({ onBlurCapture: true })
    }
  },
  canPlay: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlay: true }),
      captured: keyOf({ onCanPlayCapture: true })
    }
  },
  canPlayThrough: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlayThrough: true }),
      captured: keyOf({ onCanPlayThroughCapture: true })
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onClick: true }),
      captured: keyOf({ onClickCapture: true })
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onContextMenu: true }),
      captured: keyOf({ onContextMenuCapture: true })
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCopy: true }),
      captured: keyOf({ onCopyCapture: true })
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCut: true }),
      captured: keyOf({ onCutCapture: true })
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDoubleClick: true }),
      captured: keyOf({ onDoubleClickCapture: true })
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrag: true }),
      captured: keyOf({ onDragCapture: true })
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnd: true }),
      captured: keyOf({ onDragEndCapture: true })
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnter: true }),
      captured: keyOf({ onDragEnterCapture: true })
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragExit: true }),
      captured: keyOf({ onDragExitCapture: true })
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragLeave: true }),
      captured: keyOf({ onDragLeaveCapture: true })
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragOver: true }),
      captured: keyOf({ onDragOverCapture: true })
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragStart: true }),
      captured: keyOf({ onDragStartCapture: true })
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrop: true }),
      captured: keyOf({ onDropCapture: true })
    }
  },
  durationChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDurationChange: true }),
      captured: keyOf({ onDurationChangeCapture: true })
    }
  },
  emptied: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEmptied: true }),
      captured: keyOf({ onEmptiedCapture: true })
    }
  },
  encrypted: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEncrypted: true }),
      captured: keyOf({ onEncryptedCapture: true })
    }
  },
  ended: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEnded: true }),
      captured: keyOf({ onEndedCapture: true })
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onError: true }),
      captured: keyOf({ onErrorCapture: true })
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onFocus: true }),
      captured: keyOf({ onFocusCapture: true })
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onInput: true }),
      captured: keyOf({ onInputCapture: true })
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyDown: true }),
      captured: keyOf({ onKeyDownCapture: true })
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyPress: true }),
      captured: keyOf({ onKeyPressCapture: true })
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyUp: true }),
      captured: keyOf({ onKeyUpCapture: true })
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoad: true }),
      captured: keyOf({ onLoadCapture: true })
    }
  },
  loadedData: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedData: true }),
      captured: keyOf({ onLoadedDataCapture: true })
    }
  },
  loadedMetadata: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedMetadata: true }),
      captured: keyOf({ onLoadedMetadataCapture: true })
    }
  },
  loadStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadStart: true }),
      captured: keyOf({ onLoadStartCapture: true })
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseDown: true }),
      captured: keyOf({ onMouseDownCapture: true })
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseMove: true }),
      captured: keyOf({ onMouseMoveCapture: true })
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOut: true }),
      captured: keyOf({ onMouseOutCapture: true })
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOver: true }),
      captured: keyOf({ onMouseOverCapture: true })
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseUp: true }),
      captured: keyOf({ onMouseUpCapture: true })
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPaste: true }),
      captured: keyOf({ onPasteCapture: true })
    }
  },
  pause: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPause: true }),
      captured: keyOf({ onPauseCapture: true })
    }
  },
  play: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlay: true }),
      captured: keyOf({ onPlayCapture: true })
    }
  },
  playing: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlaying: true }),
      captured: keyOf({ onPlayingCapture: true })
    }
  },
  progress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onProgress: true }),
      captured: keyOf({ onProgressCapture: true })
    }
  },
  rateChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onRateChange: true }),
      captured: keyOf({ onRateChangeCapture: true })
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onReset: true }),
      captured: keyOf({ onResetCapture: true })
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onScroll: true }),
      captured: keyOf({ onScrollCapture: true })
    }
  },
  seeked: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeked: true }),
      captured: keyOf({ onSeekedCapture: true })
    }
  },
  seeking: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeking: true }),
      captured: keyOf({ onSeekingCapture: true })
    }
  },
  stalled: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onStalled: true }),
      captured: keyOf({ onStalledCapture: true })
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSubmit: true }),
      captured: keyOf({ onSubmitCapture: true })
    }
  },
  suspend: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSuspend: true }),
      captured: keyOf({ onSuspendCapture: true })
    }
  },
  timeUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTimeUpdate: true }),
      captured: keyOf({ onTimeUpdateCapture: true })
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchCancel: true }),
      captured: keyOf({ onTouchCancelCapture: true })
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchEnd: true }),
      captured: keyOf({ onTouchEndCapture: true })
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchMove: true }),
      captured: keyOf({ onTouchMoveCapture: true })
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchStart: true }),
      captured: keyOf({ onTouchStartCapture: true })
    }
  },
  volumeChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onVolumeChange: true }),
      captured: keyOf({ onVolumeChangeCapture: true })
    }
  },
  waiting: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWaiting: true }),
      captured: keyOf({ onWaitingCapture: true })
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWheel: true }),
      captured: keyOf({ onWheelCapture: true })
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topAbort: eventTypes.abort,
  topBlur: eventTypes.blur,
  topCanPlay: eventTypes.canPlay,
  topCanPlayThrough: eventTypes.canPlayThrough,
  topClick: eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy: eventTypes.copy,
  topCut: eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag: eventTypes.drag,
  topDragEnd: eventTypes.dragEnd,
  topDragEnter: eventTypes.dragEnter,
  topDragExit: eventTypes.dragExit,
  topDragLeave: eventTypes.dragLeave,
  topDragOver: eventTypes.dragOver,
  topDragStart: eventTypes.dragStart,
  topDrop: eventTypes.drop,
  topDurationChange: eventTypes.durationChange,
  topEmptied: eventTypes.emptied,
  topEncrypted: eventTypes.encrypted,
  topEnded: eventTypes.ended,
  topError: eventTypes.error,
  topFocus: eventTypes.focus,
  topInput: eventTypes.input,
  topKeyDown: eventTypes.keyDown,
  topKeyPress: eventTypes.keyPress,
  topKeyUp: eventTypes.keyUp,
  topLoad: eventTypes.load,
  topLoadedData: eventTypes.loadedData,
  topLoadedMetadata: eventTypes.loadedMetadata,
  topLoadStart: eventTypes.loadStart,
  topMouseDown: eventTypes.mouseDown,
  topMouseMove: eventTypes.mouseMove,
  topMouseOut: eventTypes.mouseOut,
  topMouseOver: eventTypes.mouseOver,
  topMouseUp: eventTypes.mouseUp,
  topPaste: eventTypes.paste,
  topPause: eventTypes.pause,
  topPlay: eventTypes.play,
  topPlaying: eventTypes.playing,
  topProgress: eventTypes.progress,
  topRateChange: eventTypes.rateChange,
  topReset: eventTypes.reset,
  topScroll: eventTypes.scroll,
  topSeeked: eventTypes.seeked,
  topSeeking: eventTypes.seeking,
  topStalled: eventTypes.stalled,
  topSubmit: eventTypes.submit,
  topSuspend: eventTypes.suspend,
  topTimeUpdate: eventTypes.timeUpdate,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd: eventTypes.touchEnd,
  topTouchMove: eventTypes.touchMove,
  topTouchStart: eventTypes.touchStart,
  topVolumeChange: eventTypes.volumeChange,
  topWaiting: eventTypes.waiting,
  topWheel: eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var ON_CLICK_KEY = keyOf({ onClick: null });
var onClickListeners = {};

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topAbort:
      case topLevelTypes.topCanPlay:
      case topLevelTypes.topCanPlayThrough:
      case topLevelTypes.topDurationChange:
      case topLevelTypes.topEmptied:
      case topLevelTypes.topEncrypted:
      case topLevelTypes.topEnded:
      case topLevelTypes.topError:
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topLoadedData:
      case topLevelTypes.topLoadedMetadata:
      case topLevelTypes.topLoadStart:
      case topLevelTypes.topPause:
      case topLevelTypes.topPlay:
      case topLevelTypes.topPlaying:
      case topLevelTypes.topProgress:
      case topLevelTypes.topRateChange:
      case topLevelTypes.topReset:
      case topLevelTypes.topSeeked:
      case topLevelTypes.topSeeking:
      case topLevelTypes.topStalled:
      case topLevelTypes.topSubmit:
      case topLevelTypes.topSuspend:
      case topLevelTypes.topTimeUpdate:
      case topLevelTypes.topVolumeChange:
      case topLevelTypes.topWaiting:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (id, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    if (registrationName === ON_CLICK_KEY) {
      var node = ReactMount.getNode(id);
      if (!onClickListeners[id]) {
        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (id, registrationName) {
    if (registrationName === ON_CLICK_KEY) {
      onClickListeners[id].remove();
      delete onClickListeners[id];
    }
  }

};

module.exports = SimpleEventPlugin;
}).call(this,require('_process'))

},{"./EventConstants":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/EventPropagators.js","./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js","./SyntheticClipboardEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticClipboardEvent.js","./SyntheticDragEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticDragEvent.js","./SyntheticEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js","./SyntheticFocusEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticFocusEvent.js","./SyntheticKeyboardEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticKeyboardEvent.js","./SyntheticMouseEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticMouseEvent.js","./SyntheticTouchEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticTouchEvent.js","./SyntheticUIEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticUIEvent.js","./SyntheticWheelEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticWheelEvent.js","./getEventCharCode":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventCharCode.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/EventListener":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/EventListener.js","fbjs/lib/emptyFunction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyFunction.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/keyOf":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyOf.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticClipboardEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"./SyntheticEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticCompositionEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"./SyntheticEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticDragEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"./SyntheticMouseEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticMouseEvent.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/PooledClass.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/emptyFunction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyFunction.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticFocusEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"./SyntheticUIEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticUIEvent.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticInputEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"./SyntheticEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticKeyboardEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventCharCode = require('./getEventCharCode');
var getEventKey = require('./getEventKey');
var getEventModifierState = require('./getEventModifierState');

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"./SyntheticUIEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticUIEvent.js","./getEventCharCode":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventCharCode.js","./getEventKey":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventKey.js","./getEventModifierState":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventModifierState.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticMouseEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');
var ViewportMetrics = require('./ViewportMetrics');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"./SyntheticUIEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticUIEvent.js","./ViewportMetrics":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ViewportMetrics.js","./getEventModifierState":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventModifierState.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticTouchEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"./SyntheticUIEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticUIEvent.js","./getEventModifierState":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventModifierState.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticUIEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"./SyntheticEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js","./getEventTarget":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventTarget.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticWheelEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"./SyntheticMouseEvent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/SyntheticMouseEvent.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Transaction.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occurred.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ViewportMetrics.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/accumulateInto.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/adler32.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    for (; i < Math.min(i + 4096, m); i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/canDefineProperty.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule canDefineProperty
 */

'use strict';

var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/dangerousStyleValue.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
},{"./CSSProperty":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/CSSProperty.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/deprecated.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

'use strict';

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} fnName The name of the function
 * @param {string} newModule The module that fn will exist in
 * @param {string} newPackage The module that fn will exist in
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {function} The function that will warn once and then call fn
 */
function deprecated(fnName, newModule, newPackage, ctx, fn) {
  var warned = false;
  if (process.env.NODE_ENV !== 'production') {
    var newFn = function () {
      process.env.NODE_ENV !== 'production' ? warning(warned,
      // Require examples in this string must be split to prevent React's
      // build tools from mistaking them for real requires.
      // Otherwise the build tools will attempt to build a '%s' module.
      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
      warned = true;
      return fn.apply(ctx, arguments);
    };
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/escapeTextContentForBrowser.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/findDOMNode.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 * @typechecks static-only
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMount = require('./ReactMount');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Returns the DOM node rendered by this element.
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }
  if (ReactInstanceMap.has(componentOrElement)) {
    return ReactMount.getNodeFromInstance(componentOrElement);
  }
  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
}

module.exports = findDOMNode;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactInstanceMap":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInstanceMap.js","./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/flattenChildren.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = result[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;
}).call(this,require('_process'))

},{"./traverseAllChildren":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/traverseAllChildren.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/forEachAccumulated.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function (arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventCharCode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventKey.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

'use strict';

var getEventCharCode = require('./getEventCharCode');

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;
},{"./getEventCharCode":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventCharCode.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventModifierState.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getEventTarget.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getIteratorFn.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * @typechecks static-only
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getNodeForCharacterOffset.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getTextContentAccessor.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/instantiateReactComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

'use strict';

var ReactCompositeComponent = require('./ReactCompositeComponent');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactNativeComponent = require('./ReactNativeComponent');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function () {};
assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node) {
  var instance;

  if (node === null || node === false) {
    instance = new ReactEmptyComponent(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactNativeComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);
    } else {
      instance = new ReactCompositeComponentWrapper();
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactNativeComponent.createInstanceForText(node);
  } else {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
  }

  // Sets up the instance. This can probably just move into the constructor now.
  instance.construct(node);

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._isOwnerNecessary = false;
    instance._warnedAboutRefsInRender = false;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactCompositeComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactCompositeComponent.js","./ReactEmptyComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactEmptyComponent.js","./ReactNativeComponent":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactNativeComponent.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/isEventSupported.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/isTextInputElement.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
}

module.exports = isTextInputElement;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/onlyChild.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
'use strict';

var ReactElement = require('./ReactElement');

var invariant = require('fbjs/lib/invariant');

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
  return children;
}

module.exports = onlyChild;
}).call(this,require('_process'))

},{"./ReactElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/quoteAttributeValueForBrowser.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"./escapeTextContentForBrowser":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/escapeTextContentForBrowser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/renderSubtreeIntoContainer.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule renderSubtreeIntoContainer
*/

'use strict';

var ReactMount = require('./ReactMount');

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"./ReactMount":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactMount.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/setInnerHTML.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

/* globals MSApp */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function (node, html) {
  node.innerHTML = html;
};

// Win8 apps: Allow all html to be inserted
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
  setInnerHTML = function (node, html) {
    MSApp.execUnsafeLocalFunction(function () {
      node.innerHTML = html;
    });
  };
}

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;
},{"fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/setTextContent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setInnerHTML = require('./setInnerHTML');

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;
},{"./escapeTextContentForBrowser":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/escapeTextContentForBrowser.js","./setInnerHTML":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/setInnerHTML.js","fbjs/lib/ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/shouldUpdateReactComponent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/traverseAllChildren.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} text Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js","./getIteratorFn":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/getIteratorFn.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/validateDOMNesting.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule validateDOMNesting
 */

'use strict';

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    parentTag: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.parentTag = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':

      case 'pre':
      case 'listing':

      case 'table':

      case 'hr':

      case 'xmp':

      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    /*eslint-disable space-after-keywords */
    do {
      /*eslint-enable space-after-keywords */
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
      }
    }
  };

  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/Object.assign.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js","fbjs/lib/emptyFunction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyFunction.js","fbjs/lib/warning":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/EventListener.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function () {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function () {}
};

module.exports = EventListener;
}).call(this,require('_process'))

},{"./emptyFunction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyFunction.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/camelize.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

"use strict";

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/camelizeStyleName.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/camelize.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/containsNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

'use strict';

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(_x, _x2) {
  var _again = true;

  _function: while (_again) {
    var outerNode = _x,
        innerNode = _x2;
    _again = false;

    if (!outerNode || !innerNode) {
      return false;
    } else if (outerNode === innerNode) {
      return true;
    } else if (isTextNode(outerNode)) {
      return false;
    } else if (isTextNode(innerNode)) {
      _x = outerNode;
      _x2 = innerNode.parentNode;
      _again = true;
      continue _function;
    } else if (outerNode.contains) {
      return outerNode.contains(innerNode);
    } else if (outerNode.compareDocumentPosition) {
      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    } else {
      return false;
    }
  }
}

module.exports = containsNode;
},{"./isTextNode":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/isTextNode.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/createArrayFromMixed.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFromMixed
 * @typechecks
 */

'use strict';

var toArray = require('./toArray');

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return(
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
},{"./toArray":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/toArray.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/createNodesFromMarkup.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var createArrayFromMixed = require('./createArrayFromMixed');
var getMarkupWrap = require('./getMarkupWrap');
var invariant = require('./invariant');

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = createArrayFromMixed(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
}).call(this,require('_process'))

},{"./ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js","./createArrayFromMixed":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/createArrayFromMixed.js","./getMarkupWrap":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/getMarkupWrap.js","./invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyFunction.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyObject.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/focusNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/getActiveElement.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 */
'use strict';

function getActiveElement() /*?DOMElement*/{
  if (typeof document === 'undefined') {
    return null;
  }
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/getMarkupWrap.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

/*eslint-disable fb-www/unsafe-html */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var invariant = require('./invariant');

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
}).call(this,require('_process'))

},{"./ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js","./invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/getUnboundedScrollPosition.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/hyphenate.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

'use strict';

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/hyphenateStyleName.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/hyphenate.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

function invariant(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
}).call(this,require('_process'))

},{"_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/isNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
'use strict';

function isNode(object) {
  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/isTextNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

'use strict';

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/isNode.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyMirror.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

'use strict';

var invariant = require('./invariant');

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function (obj) {
  var ret = {};
  var key;
  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;
}).call(this,require('_process'))

},{"./invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/keyOf.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without losing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
"use strict";

var keyOf = function (oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};

module.exports = keyOf;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/mapObject.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/memoizeStringOnly.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/performance.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"./ExecutionEnvironment":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/performanceNow.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

'use strict';

var performance = require('./performance');

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function () {
    return performance.now();
  };
} else {
  performanceNow = function () {
    return Date.now();
  };
}

module.exports = performanceNow;
},{"./performance":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/performance.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/shallowEqual.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 * @typechecks
 * 
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  var bHasOwnProperty = hasOwnProperty.bind(objB);
  for (var i = 0; i < keysA.length; i++) {
    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/toArray.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

'use strict';

var invariant = require('./invariant');

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;
}).call(this,require('_process'))

},{"./invariant":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/invariant.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/warning.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  warning = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    }
  };
}

module.exports = warning;
}).call(this,require('_process'))

},{"./emptyFunction":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/node_modules/fbjs/lib/emptyFunction.js","_process":"/Users/emmanash/hacks/rail-fyi-client/node_modules/browserify/node_modules/process/browser.js"}],"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/react.js":[function(require,module,exports){
'use strict';

module.exports = require('./lib/React');

},{"./lib/React":"/Users/emmanash/hacks/rail-fyi-client/node_modules/react/lib/React.js"}]},{},["/Users/emmanash/hacks/rail-fyi-client/app/js/index.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
