(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/dev/Documents/rail-fyi-client/app/js/App.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Header = require('./components/Header');

var _Header2 = _interopRequireDefault(_Header);

var _Footer = require('./components/Footer');

var _Footer2 = _interopRequireDefault(_Footer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  params: _react.PropTypes.object,
  query: _react.PropTypes.object,
  children: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.object])
};

var App = function (_Component) {
  _inherits(App, _Component);

  function App(props) {
    _classCallCheck(this, App);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(App).call(this, props));
  }

  _createClass(App, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      console.log('About to mount App');
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren() {
      return _react2.default.cloneElement(this.props.children, {
        params: this.props.params,
        query: this.props.query
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'main-wrapper' },
        _react2.default.createElement(_Header2.default, null),
        this.renderChildren(),
        _react2.default.createElement(_Footer2.default, null)
      );
    }
  }]);

  return App;
}(_react.Component);

App.propTypes = propTypes;

exports.default = App;

},{"./components/Footer":"/Users/dev/Documents/rail-fyi-client/app/js/components/Footer.js","./components/Header":"/Users/dev/Documents/rail-fyi-client/app/js/components/Header.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/app/js/Routes.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _createBrowserHistory = require('history/lib/createBrowserHistory');

var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

var _App = require('./App');

var _App2 = _interopRequireDefault(_App);

var _HomePage = require('./pages/HomePage');

var _HomePage2 = _interopRequireDefault(_HomePage);

var _NotFoundPage = require('./pages/NotFoundPage');

var _NotFoundPage2 = _interopRequireDefault(_NotFoundPage);

var _StaffForm = require('./components/StaffForm');

var _StaffForm2 = _interopRequireDefault(_StaffForm);

var _NearestStation = require('./components/NearestStation');

var _NearestStation2 = _interopRequireDefault(_NearestStation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _react2.default.createElement(
  _reactRouter.Router,
  { history: (0, _createBrowserHistory2.default)() },
  _react2.default.createElement(
    _reactRouter.Route,
    { path: '/', component: _App2.default },
    _react2.default.createElement(_reactRouter.IndexRoute, { component: _HomePage2.default }),
    _react2.default.createElement(_reactRouter.Route, { path: '/', component: _HomePage2.default }),
    _react2.default.createElement(_reactRouter.Route, { path: '/staff-form', component: _StaffForm2.default }),
    _react2.default.createElement(_reactRouter.Route, { path: '/nearest-station', component: _NearestStation2.default }),
    _react2.default.createElement(_reactRouter.Route, { path: '*', component: _NotFoundPage2.default })
  )
);

},{"./App":"/Users/dev/Documents/rail-fyi-client/app/js/App.js","./components/NearestStation":"/Users/dev/Documents/rail-fyi-client/app/js/components/NearestStation.js","./components/StaffForm":"/Users/dev/Documents/rail-fyi-client/app/js/components/StaffForm.js","./pages/HomePage":"/Users/dev/Documents/rail-fyi-client/app/js/pages/HomePage.js","./pages/NotFoundPage":"/Users/dev/Documents/rail-fyi-client/app/js/pages/NotFoundPage.js","history/lib/createBrowserHistory":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createBrowserHistory.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js","react-router":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/index.js"}],"/Users/dev/Documents/rail-fyi-client/app/js/components/Footer.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Footer = function (_Component) {
  _inherits(Footer, _Component);

  function Footer(props) {
    _classCallCheck(this, Footer);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Footer).call(this, props));
  }

  _createClass(Footer, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'footer',
        null,
        _react2.default.createElement(
          'button',
          { type: 'submit', className: 'button-secondary one-third column' },
          'Previous'
        ),
        _react2.default.createElement(
          'button',
          { type: 'submit', className: 'button-primary one-third column' },
          'Next'
        )
      );
    }
  }]);

  return Footer;
}(_react.Component);

exports.default = Footer;

},{"react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/app/js/components/Header.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Header = function (_Component) {
  _inherits(Header, _Component);

  function Header(props) {
    _classCallCheck(this, Header);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Header).call(this, props));
  }

  _createClass(Header, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'header',
        null,
        _react2.default.createElement(
          'div',
          { className: 'logo' },
          'RAIL FYI'
        )
      );
    }
  }]);

  return Header;
}(_react.Component);

exports.default = Header;

},{"react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/app/js/components/NearestStation.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _stationList = require('../data/station-list');

var _stationList2 = _interopRequireDefault(_stationList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NearestStation = function (_Component) {
  _inherits(NearestStation, _Component);

  function NearestStation(props) {
    _classCallCheck(this, NearestStation);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NearestStation).call(this, props));

    _this.stationList = _stationList2.default;
    _this.state = {};
    _this._findNearestLocation();
    return _this;
  }

  _createClass(NearestStation, [{
    key: '_determineDistance',
    value: function _determineDistance(lat1, lon1, lat2, lon2) {
      var p = 0.017453292519943295; // Math.PI / 180
      var c = Math.cos;
      var a = 0.5 - c((lat2 - lat1) * p) / 2 + c(lat1 * p) * c(lat2 * p) * (1 - c((lon2 - lon1) * p)) / 2;

      return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km
    }
  }, {
    key: '_updateLocation',
    value: function _updateLocation(station, distance) {
      this.setState({
        nearestCode: station.crsCode,
        nearestName: station.name,
        distance: Math.round(distance)
      });
    }
  }, {
    key: '_findNearestLocation',
    value: function _findNearestLocation() {
      var _this2 = this;

      var navigator = window.navigator;

      if (navigator && navigator.geolocation) {

        navigator.geolocation.getCurrentPosition(function (pos) {
          var distances = _this2.stationList.map(function (station) {
            return _this2._determineDistance(pos.coords.latitude, pos.coords.longitude, station.latitude, station.longitude);
          });

          var minValue = Infinity;
          var minIndex = 0;
          for (var i = 0; i < distances.length; i++) {
            if (minValue > distances[i]) {
              minIndex = i;
              minValue = distances[i];
            }
          }

          var station = _this2.stationList[minIndex];
          var distance = distances[minIndex];

          _this2._updateLocation(station, distance);
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var nearest = _react2.default.createElement(
        'p',
        null,
        'Nearest station: ',
        _react2.default.createElement(
          'a',
          { href: this.state.nearestCode },
          this.state.nearestName
        ),
        ' ',
        this.state.distance,
        ' km'
      );
      return _react2.default.createElement(
        'div',
        null,
        this.state.nearestCode ? nearest : 'Finding nearest station...'
      );
    }
  }]);

  return NearestStation;
}(_react.Component);

exports.default = NearestStation;

},{"../data/station-list":"/Users/dev/Documents/rail-fyi-client/app/js/data/station-list.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/app/js/components/ShowTweet.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ShowTweet = function (_Component) {
  _inherits(ShowTweet, _Component);

  function ShowTweet(props) {
    _classCallCheck(this, ShowTweet);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ShowTweet).call(this, props));

    _this.state = Object.assign({}, { tweet: null }, _this.props);
    return _this;
  }

  _createClass(ShowTweet, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'container' },
        _react2.default.createElement(
          'div',
          { className: 'row' },
          _react2.default.createElement('textarea', { name: 'tweet', id: 'tweet', cols: '30', rows: '10', className: 'u-full-width', value: this.props.tweet })
        )
      );
    }
  }]);

  return ShowTweet;
}(_react.Component);

exports.default = ShowTweet;

},{"react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/app/js/components/StaffForm.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ShowTweet = require('./ShowTweet');

var _ShowTweet2 = _interopRequireDefault(_ShowTweet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StaffForm = function (_Component) {
  _inherits(StaffForm, _Component);

  function StaffForm(props) {
    _classCallCheck(this, StaffForm);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaffForm).call(this, props));

    _this.state = Object.assign({}, { interaction: 'staff', type: 'knowledge', sentiment: 'positive', staffId: null, tweet: null }, _this.props);
    return _this;
  }

  _createClass(StaffForm, [{
    key: 'selectedType',
    value: function selectedType(type) {
      this.setState({ type: type });
    }
  }, {
    key: 'selectedSentiment',
    value: function selectedSentiment(sentiment) {
      this.setState({ sentiment: sentiment });
    }
  }, {
    key: 'staffIdChange',
    value: function staffIdChange(event) {
      this.setState({ staffId: event.target.value });
    }
  }, {
    key: 'render',
    value: function render() {
      var knowledgeButtonClass = 'button-primary one-third column ' + (this.state.type === 'knowledge' ? ' active' : '');
      var behaviourButtonClass = 'button-primary one-third column ' + (this.state.type === 'behaviour' ? ' active' : '');
      var availabilityButtonClass = 'button-primary one-third column ' + (this.state.type === 'availability' ? ' active' : '');

      var positiveButtonClass = 'button-primary one-half column ' + (this.state.sentiment === 'positive' ? ' active' : '');
      var negativeButtonClass = 'button-primary one-half column ' + (this.state.sentiment === 'negative' ? ' active' : '');

      return _react2.default.createElement(
        'div',
        { className: 'container' },
        _react2.default.createElement(
          'div',
          { className: 'staff-id row' },
          _react2.default.createElement(
            'label',
            { htmlFor: 'staff-id' },
            'Staff ID or Name'
          ),
          _react2.default.createElement('input', { className: 'u-full-width', type: 'text', name: 'staff-id', id: 'staff-id', placeholder: 'Please enter the staff id or name',
            onChange: this.staffIdChange, value: this.state.staffId })
        ),
        _react2.default.createElement(
          'div',
          { className: 'type-buttons row' },
          _react2.default.createElement(
            'button',
            { type: 'submit',
              className: knowledgeButtonClass,
              onClick: this.selectedType.bind(this, 'knowledge') },
            'Knowledge'
          ),
          _react2.default.createElement(
            'button',
            { type: 'submit',
              className: behaviourButtonClass,
              onClick: this.selectedType.bind(this, 'behaviour') },
            'Behaviour'
          ),
          _react2.default.createElement(
            'button',
            { type: 'submit',
              className: availabilityButtonClass,
              onClick: this.selectedType.bind(this, 'availability') },
            'Availability'
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'sentiment-buttons row' },
          _react2.default.createElement(
            'button',
            { type: 'submit',
              className: positiveButtonClass,
              onClick: this.selectedSentiment.bind(this, 'positive') },
            'Positive'
          ),
          _react2.default.createElement(
            'button',
            { type: 'submit',
              className: negativeButtonClass,
              onClick: this.selectedSentiment.bind(this, 'negative') },
            'Negative'
          )
        ),
        _react2.default.createElement(
          'button',
          { className: 'button-primary', type: 'submit', onClick: this.doStateSubmit },
          'Submit'
        ),
        _react2.default.createElement(_ShowTweet2.default, { tweet: this.state.tweet })
      );
    }
  }]);

  return StaffForm;
}(_react.Component);

exports.default = StaffForm;

},{"./ShowTweet":"/Users/dev/Documents/rail-fyi-client/app/js/components/ShowTweet.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/app/js/data/station-list.js":[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=[{"name":"Aber","latitude":51.57496069,"longitude":-3.229838935,"stationOperator":"AW","crsCode":"ABE"},{"name":"Abercynon","latitude":51.644706,"longitude":-3.327000754,"stationOperator":"AW","crsCode":"ACY"},{"name":"Aberdare","latitude":51.71505747,"longitude":-3.443099147,"stationOperator":"AW","crsCode":"ABA"},{"name":"Aberdovey","latitude":52.54397223,"longitude":-4.057080835,"stationOperator":"AW","crsCode":"AVY"},{"name":"Abererch","latitude":52.89860046,"longitude":-4.374195955,"stationOperator":"AW","crsCode":"ABH"},{"name":"Abergavenny","latitude":51.81669124,"longitude":-3.009664242,"stationOperator":"AW","crsCode":"AGV"},{"name":"Abergele & Pensarn","latitude":53.29459094,"longitude":-3.582632062,"stationOperator":"AW","crsCode":"AGL"},{"name":"Aberystwyth","latitude":52.41405692,"longitude":-4.081908698,"stationOperator":"AW","crsCode":"AYW"},{"name":"Ammanford","latitude":51.79597767,"longitude":-3.996765792,"stationOperator":"AW","crsCode":"AMF"},{"name":"Baglan","latitude":51.61553822,"longitude":-3.811162313,"stationOperator":"AW","crsCode":"BAJ"},{"name":"Bangor (Gwynedd)","latitude":53.22229978,"longitude":-4.135891358,"stationOperator":"AW","crsCode":"BNG"},{"name":"Bargoed","latitude":51.69230767,"longitude":-3.229689376,"stationOperator":"AW","crsCode":"BGD"},{"name":"Barmouth","latitude":52.7229113,"longitude":-4.056608531,"stationOperator":"AW","crsCode":"BRM"},{"name":"Barry","latitude":51.39678181,"longitude":-3.284997567,"stationOperator":"AW","crsCode":"BRY"},{"name":"Barry Docks","latitude":51.40244097,"longitude":-3.260715837,"stationOperator":"AW","crsCode":"BYD"},{"name":"Barry Island","latitude":51.39241248,"longitude":-3.273376317,"stationOperator":"AW","crsCode":"BYI"},{"name":"Betws-y-Coed","latitude":53.092088,"longitude":-3.800879188,"stationOperator":"AW","crsCode":"BYC"},{"name":"Birchgrove","latitude":51.52174013,"longitude":-3.203468175,"stationOperator":"AW","crsCode":"BCG"},{"name":"Blaenau Ffestiniog","latitude":52.99456764,"longitude":-3.938602387,"stationOperator":"AW","crsCode":"BFF"},{"name":"Bodorgan","latitude":53.20431918,"longitude":-4.418022835,"stationOperator":"AW","crsCode":"BOR"},{"name":"Borth","latitude":52.4910411,"longitude":-4.050190046,"stationOperator":"AW","crsCode":"BRH"},{"name":"Bridgend","latitude":51.50697643,"longitude":-3.575296481,"stationOperator":"AW","crsCode":"BGN"},{"name":"Brithdir","latitude":51.71030148,"longitude":-3.2287299,"stationOperator":"AW","crsCode":"BHD"},{"name":"Briton Ferry","latitude":51.63789409,"longitude":-3.819278922,"stationOperator":"AW","crsCode":"BNF"},{"name":"Broome","latitude":52.42278098,"longitude":-2.885217916,"stationOperator":"AW","crsCode":"BME"},{"name":"Buckley","latitude":53.16304869,"longitude":-3.05593636,"stationOperator":"AW","crsCode":"BCK"},{"name":"Bucknell","latitude":52.3575573,"longitude":-2.948524727,"stationOperator":"AW","crsCode":"BUK"},{"name":"Builth Road","latitude":52.16932565,"longitude":-3.427045119,"stationOperator":"AW","crsCode":"BHR"},{"name":"Bynea","latitude":51.67203157,"longitude":-4.098900663,"stationOperator":"AW","crsCode":"BYE"},{"name":"Cadoxton","latitude":51.41227913,"longitude":-3.248907469,"stationOperator":"AW","crsCode":"CAD"},{"name":"Caergwrle","latitude":53.10788341,"longitude":-3.032923324,"stationOperator":"AW","crsCode":"CGW"},{"name":"Caerphilly","latitude":51.57157215,"longitude":-3.218492147,"stationOperator":"AW","crsCode":"CPH"},{"name":"Caersws","latitude":52.51613735,"longitude":-3.43250893,"stationOperator":"AW","crsCode":"CWS"},{"name":"Caldicot","latitude":51.58478457,"longitude":-2.760585172,"stationOperator":"AW","crsCode":"CDT"},{"name":"Cardiff Bay","latitude":51.46710937,"longitude":-3.16642678,"stationOperator":"AW","crsCode":"CDB"},{"name":"Cardiff Central","latitude":51.47602662,"longitude":-3.179311548,"stationOperator":"AW","crsCode":"CDF"},{"name":"Cardiff Queen Street","latitude":51.48196277,"longitude":-3.170204472,"stationOperator":"AW","crsCode":"CDQ"},{"name":"Carmarthen","latitude":51.85335799,"longitude":-4.30598577,"stationOperator":"AW","crsCode":"CMN"},{"name":"Cathays","latitude":51.48890064,"longitude":-3.178693049,"stationOperator":"AW","crsCode":"CYS"},{"name":"Cefn-y-Bedd","latitude":53.09881997,"longitude":-3.031063286,"stationOperator":"AW","crsCode":"CYB"},{"name":"Chepstow","latitude":51.64017494,"longitude":-2.671914115,"stationOperator":"AW","crsCode":"CPW"},{"name":"Chester","latitude":53.19683958,"longitude":-2.880125588,"stationOperator":"AW","crsCode":"CTR"},{"name":"Chirk","latitude":52.93310252,"longitude":-3.065655601,"stationOperator":"AW","crsCode":"CRK"},{"name":"Church Stretton","latitude":52.53743385,"longitude":-2.803701777,"stationOperator":"AW","crsCode":"CTT"},{"name":"Cilmeri","latitude":52.15053253,"longitude":-3.456554526,"stationOperator":"AW","crsCode":"CIM"},{"name":"Clarbeston Road","latitude":51.85167193,"longitude":-4.883574493,"stationOperator":"AW","crsCode":"CLR"},{"name":"Clunderwen","latitude":51.84054563,"longitude":-4.731878812,"stationOperator":"AW","crsCode":"CUW"},{"name":"Cogan","latitude":51.4459927,"longitude":-3.189100075,"stationOperator":"AW","crsCode":"CGN"},{"name":"Colwyn Bay","latitude":53.29637709,"longitude":-3.725430748,"stationOperator":"AW","crsCode":"CWB"},{"name":"Conwy","latitude":53.28011971,"longitude":-3.830541495,"stationOperator":"AW","crsCode":"CNW"},{"name":"Coryton","latitude":51.52036973,"longitude":-3.231538797,"stationOperator":"AW","crsCode":"COY"},{"name":"Craven Arms","latitude":52.44201187,"longitude":-2.837052833,"stationOperator":"AW","crsCode":"CRV"},{"name":"Criccieth","latitude":52.91842819,"longitude":-4.237528403,"stationOperator":"AW","crsCode":"CCC"},{"name":"Crosskeys","latitude":51.62089796,"longitude":-3.126191667,"stationOperator":"AW","crsCode":"CKY"},{"name":"Cwmbach","latitude":51.70192641,"longitude":-3.413738026,"stationOperator":"AW","crsCode":"CMH"},{"name":"Cwmbran","latitude":51.65658282,"longitude":-3.01622181,"stationOperator":"AW","crsCode":"CWM"},{"name":"Cynghordy","latitude":52.05150756,"longitude":-3.748233148,"stationOperator":"AW","crsCode":"CYN"},{"name":"Danescourt","latitude":51.50050789,"longitude":-3.233928033,"stationOperator":"AW","crsCode":"DCT"},{"name":"Deganwy","latitude":53.29476587,"longitude":-3.833403597,"stationOperator":"AW","crsCode":"DGY"},{"name":"Dinas (Rhondda)","latitude":51.61783077,"longitude":-3.437557147,"stationOperator":"AW","crsCode":"DMG"},{"name":"Dinas Powys","latitude":51.4316643,"longitude":-3.218362695,"stationOperator":"AW","crsCode":"DNS"},{"name":"Dingle Road","latitude":51.44005367,"longitude":-3.180614958,"stationOperator":"AW","crsCode":"DGL"},{"name":"Dolau","latitude":52.29535707,"longitude":-3.263627535,"stationOperator":"AW","crsCode":"DOL"},{"name":"Dolgarrog","latitude":53.18636329,"longitude":-3.822653706,"stationOperator":"AW","crsCode":"DLG"},{"name":"Dolwyddelan","latitude":53.05203317,"longitude":-3.885137755,"stationOperator":"AW","crsCode":"DWD"},{"name":"Dovey Junction","latitude":52.56437479,"longitude":-3.923911977,"stationOperator":"AW","crsCode":"DVY"},{"name":"Dublin Ferryport","latitude":53.3494426,"longitude":-6.2600825,"stationOperator":"AW","crsCode":"DFP"},{"name":"Dublin Port - Stena","latitude":53.3510759,"longitude":-6.21450279,"stationOperator":"AW","crsCode":"DPS"},{"name":"Dyffryn Ardudwy","latitude":52.78886514,"longitude":-4.104657014,"stationOperator":"AW","crsCode":"DYF"},{"name":"Eastbrook","latitude":51.43763559,"longitude":-3.206148195,"stationOperator":"AW","crsCode":"EBK"},{"name":"Ebbw Vale Parkway","latitude":51.75714374,"longitude":-3.196111233,"stationOperator":"AW","crsCode":"EBV"},{"name":"Ebbw Vale Town","latitude":51.777252,"longitude":-3.202288,"stationOperator":"AW","crsCode":"EBB"},{"name":"Energlyn & Churchill Park","latitude":51.58376,"longitude":-3.22973,"stationOperator":"AW","crsCode":"ECP"},{"name":"Fairbourne","latitude":52.69606153,"longitude":-4.049426098,"stationOperator":"AW","crsCode":"FRB"},{"name":"Fairwater","latitude":51.49390844,"longitude":-3.233850662,"stationOperator":"AW","crsCode":"FRW"},{"name":"Fernhill","latitude":51.68649362,"longitude":-3.395897173,"stationOperator":"AW","crsCode":"FER"},{"name":"Ferryside","latitude":51.76837024,"longitude":-4.369485229,"stationOperator":"AW","crsCode":"FYS"},{"name":"Ffairfach","latitude":51.87247957,"longitude":-3.992889832,"stationOperator":"AW","crsCode":"FFA"},{"name":"Fishguard & Goodwick","latitude":52.004112,"longitude":-4.9948377,"stationOperator":"AW","crsCode":"FGW"},{"name":"Fishguard Harbour","latitude":52.01155417,"longitude":-4.985670915,"stationOperator":"AW","crsCode":"FGH"},{"name":"Flint","latitude":53.24953963,"longitude":-3.133005514,"stationOperator":"AW","crsCode":"FLN"},{"name":"Frodsham","latitude":53.29587868,"longitude":-2.723117879,"stationOperator":"AW","crsCode":"FRD"},{"name":"Garth (Mid Glamorgan)","latitude":51.5964522,"longitude":-3.64147185,"stationOperator":"AW","crsCode":"GMG"},{"name":"Garth (Powys)","latitude":52.13324795,"longitude":-3.529923047,"stationOperator":"AW","crsCode":"GTH"},{"name":"Gilfach Fargoed","latitude":51.68424748,"longitude":-3.226577833,"stationOperator":"AW","crsCode":"GFF"},{"name":"Glan Conwy","latitude":53.26743904,"longitude":-3.797743818,"stationOperator":"AW","crsCode":"GCW"},{"name":"Gobowen","latitude":52.89353933,"longitude":-3.035995531,"stationOperator":"AW","crsCode":"GOB"},{"name":"Gowerton","latitude":51.6487243,"longitude":-4.035967269,"stationOperator":"AW","crsCode":"GWN"},{"name":"Grangetown (Cardiff)","latitude":51.46703478,"longitude":-3.189071128,"stationOperator":"AW","crsCode":"GTN"},{"name":"Gwersyllt","latitude":53.07259351,"longitude":-3.017898398,"stationOperator":"AW","crsCode":"GWE"},{"name":"Harlech","latitude":52.86134439,"longitude":-4.109203586,"stationOperator":"AW","crsCode":"HRL"},{"name":"Haverfordwest","latitude":51.80263756,"longitude":-4.960232375,"stationOperator":"AW","crsCode":"HVF"},{"name":"Hawarden","latitude":53.18537204,"longitude":-3.032090605,"stationOperator":"AW","crsCode":"HWD"},{"name":"Hawarden Bridge","latitude":53.2180884,"longitude":-3.032727145,"stationOperator":"AW","crsCode":"HWB"},{"name":"Heath High Level","latitude":51.51656604,"longitude":-3.181713068,"stationOperator":"AW","crsCode":"HHL"},{"name":"Heath Low Level","latitude":51.51566416,"longitude":-3.181977972,"stationOperator":"AW","crsCode":"HLL"},{"name":"Helsby","latitude":53.27517482,"longitude":-2.770757816,"stationOperator":"AW","crsCode":"HSB"},{"name":"Hengoed","latitude":51.64740601,"longitude":-3.224137826,"stationOperator":"AW","crsCode":"HNG"},{"name":"Hereford","latitude":52.06116993,"longitude":-2.708217764,"stationOperator":"AW","crsCode":"HFD"},{"name":"Heswall","latitude":53.32973476,"longitude":-3.07371296,"stationOperator":"AW","crsCode":"HSW"},{"name":"Holyhead","latitude":53.30770479,"longitude":-4.631012675,"stationOperator":"AW","crsCode":"HHD"},{"name":"Hope (Flintshire)","latitude":53.117378,"longitude":-3.03688641,"stationOperator":"AW","crsCode":"HPE"},{"name":"Hopton Heath","latitude":52.3913806,"longitude":-2.91192311,"stationOperator":"AW","crsCode":"HPT"},{"name":"Johnston (Pembs)","latitude":51.75675094,"longitude":-4.996358684,"stationOperator":"AW","crsCode":"JOH"},{"name":"Kidwelly","latitude":51.73434386,"longitude":-4.317011245,"stationOperator":"AW","crsCode":"KWL"},{"name":"Kilgetty","latitude":51.73210916,"longitude":-4.715192738,"stationOperator":"AW","crsCode":"KGT"},{"name":"Knighton","latitude":52.34508013,"longitude":-3.042211012,"stationOperator":"AW","crsCode":"KNI"},{"name":"Knucklas","latitude":52.35986953,"longitude":-3.096894202,"stationOperator":"AW","crsCode":"KNU"},{"name":"Lamphey","latitude":51.66719665,"longitude":-4.87329867,"stationOperator":"AW","crsCode":"LAM"},{"name":"Leominster","latitude":52.22514507,"longitude":-2.730485737,"stationOperator":"AW","crsCode":"LEO"},{"name":"Lisvane & Thornhill","latitude":51.54457308,"longitude":-3.185611182,"stationOperator":"AW","crsCode":"LVT"},{"name":"Llanaber","latitude":52.74152431,"longitude":-4.07718901,"stationOperator":"AW","crsCode":"LLA"},{"name":"Llanbedr","latitude":52.8208656,"longitude":-4.110210769,"stationOperator":"AW","crsCode":"LBR"},{"name":"Llanbister Road","latitude":52.33643285,"longitude":-3.213426306,"stationOperator":"AW","crsCode":"LLT"},{"name":"Llanbradach","latitude":51.60325188,"longitude":-3.233057973,"stationOperator":"AW","crsCode":"LNB"},{"name":"Llandaf","latitude":51.5085276,"longitude":-3.228913858,"stationOperator":"AW","crsCode":"LLN"},{"name":"Llandanwg","latitude":52.83617691,"longitude":-4.123870362,"stationOperator":"AW","crsCode":"LDN"},{"name":"Llandecwyn","latitude":52.92070224,"longitude":-4.057045956,"stationOperator":"AW","crsCode":"LLC"},{"name":"Llandeilo","latitude":51.8853498,"longitude":-3.986919994,"stationOperator":"AW","crsCode":"LLL"},{"name":"Llandovery","latitude":51.99532071,"longitude":-3.802853279,"stationOperator":"AW","crsCode":"LLV"},{"name":"Llandrindod","latitude":52.2423651,"longitude":-3.379148724,"stationOperator":"AW","crsCode":"LLO"},{"name":"Llandudno","latitude":53.32093562,"longitude":-3.827018135,"stationOperator":"AW","crsCode":"LLD"},{"name":"Llandudno Junction","latitude":53.2839619,"longitude":-3.809118503,"stationOperator":"AW","crsCode":"LLJ"},{"name":"Llandybie","latitude":51.82103914,"longitude":-4.003678245,"stationOperator":"AW","crsCode":"LLI"},{"name":"Llanelli","latitude":51.67386671,"longitude":-4.161325167,"stationOperator":"AW","crsCode":"LLE"},{"name":"Llanfairfechan","latitude":53.25730522,"longitude":-3.98320943,"stationOperator":"AW","crsCode":"LLF"},{"name":"Llanfairpwll","latitude":53.22096236,"longitude":-4.209228885,"stationOperator":"AW","crsCode":"LPG"},{"name":"Llangadog","latitude":51.9402199,"longitude":-3.893174289,"stationOperator":"AW","crsCode":"LLG"},{"name":"Llangammarch","latitude":52.11430955,"longitude":-3.554833328,"stationOperator":"AW","crsCode":"LLM"},{"name":"Llangennech","latitude":51.69113653,"longitude":-4.078948655,"stationOperator":"AW","crsCode":"LLH"},{"name":"Llangynllo","latitude":52.34963317,"longitude":-3.161373191,"stationOperator":"AW","crsCode":"LGO"},{"name":"Llanharan","latitude":51.53758926,"longitude":-3.440795127,"stationOperator":"AW","crsCode":"LLR"},{"name":"Llanhilleth","latitude":51.70029929,"longitude":-3.135209173,"stationOperator":"AW","crsCode":"LTH"},{"name":"Llanishen","latitude":51.53274008,"longitude":-3.18198768,"stationOperator":"AW","crsCode":"LLS"},{"name":"Llanrwst","latitude":53.14419979,"longitude":-3.80305891,"stationOperator":"AW","crsCode":"LWR"},{"name":"Llansamlet","latitude":51.66150151,"longitude":-3.88471363,"stationOperator":"AW","crsCode":"LAS"},{"name":"Llantwit Major","latitude":51.40974773,"longitude":-3.481635835,"stationOperator":"AW","crsCode":"LWM"},{"name":"Llanwrda","latitude":51.96259418,"longitude":-3.871700406,"stationOperator":"AW","crsCode":"LNR"},{"name":"Llanwrtyd","latitude":52.10472191,"longitude":-3.632182357,"stationOperator":"AW","crsCode":"LNW"},{"name":"Llwyngwril","latitude":52.66680067,"longitude":-4.08769294,"stationOperator":"AW","crsCode":"LLW"},{"name":"Llwynypia","latitude":51.63399985,"longitude":-3.453529864,"stationOperator":"AW","crsCode":"LLY"},{"name":"Ludlow","latitude":52.37088713,"longitude":-2.715261521,"stationOperator":"AW","crsCode":"LUD"},{"name":"Lydney","latitude":51.7146265,"longitude":-2.531163478,"stationOperator":"AW","crsCode":"LYD"},{"name":"Machynlleth","latitude":52.5951531,"longitude":-3.854549885,"stationOperator":"AW","crsCode":"MCN"},{"name":"Maesteg","latitude":51.60993535,"longitude":-3.654667781,"stationOperator":"AW","crsCode":"MST"},{"name":"Maesteg (Ewenny Road)","latitude":51.60533889,"longitude":-3.64901298,"stationOperator":"AW","crsCode":"MEW"},{"name":"Manorbier","latitude":51.66016796,"longitude":-4.791870151,"stationOperator":"AW","crsCode":"MRB"},{"name":"Merthyr Tydfil","latitude":51.74458569,"longitude":-3.377291952,"stationOperator":"AW","crsCode":"MER"},{"name":"Merthyr Vale","latitude":51.68664396,"longitude":-3.336588445,"stationOperator":"AW","crsCode":"MEV"},{"name":"Milford Haven","latitude":51.71497622,"longitude":-5.041000361,"stationOperator":"AW","crsCode":"MFH"},{"name":"Minffordd","latitude":52.92614937,"longitude":-4.084977496,"stationOperator":"AW","crsCode":"MFF"},{"name":"Morfa Mawddach","latitude":52.70714813,"longitude":-4.032181673,"stationOperator":"AW","crsCode":"MFA"},{"name":"Mountain Ash","latitude":51.68132902,"longitude":-3.376355225,"stationOperator":"AW","crsCode":"MTA"},{"name":"Nantwich","latitude":53.06322887,"longitude":-2.519249351,"stationOperator":"AW","crsCode":"NAN"},{"name":"Narberth","latitude":51.79937326,"longitude":-4.727212166,"stationOperator":"AW","crsCode":"NAR"},{"name":"Neath","latitude":51.66235974,"longitude":-3.807245183,"stationOperator":"AW","crsCode":"NTH"},{"name":"Neston","latitude":53.29242791,"longitude":-3.063775319,"stationOperator":"AW","crsCode":"NES"},{"name":"Newbridge","latitude":51.66581285,"longitude":-3.142907128,"stationOperator":"AW","crsCode":"NBE"},{"name":"Newport (South Wales)","latitude":51.58974436,"longitude":-2.998648615,"stationOperator":"AW","crsCode":"NWP"},{"name":"Newtown (Powys)","latitude":52.51232684,"longitude":-3.311399078,"stationOperator":"AW","crsCode":"NWT"},{"name":"Ninian Park","latitude":51.47644072,"longitude":-3.201411567,"stationOperator":"AW","crsCode":"NNP"},{"name":"North Llanrwst","latitude":53.14384493,"longitude":-3.802744992,"stationOperator":"AW","crsCode":"NLR"},{"name":"Pantyffynnon","latitude":51.77888001,"longitude":-3.997460445,"stationOperator":"AW","crsCode":"PTF"},{"name":"Pembrey & Burry Port","latitude":51.68352802,"longitude":-4.247865203,"stationOperator":"AW","crsCode":"PBY"},{"name":"Pembroke","latitude":51.67294658,"longitude":-4.906065725,"stationOperator":"AW","crsCode":"PMB"},{"name":"Pembroke Dock","latitude":51.69391548,"longitude":-4.93807661,"stationOperator":"AW","crsCode":"PMD"},{"name":"Penally","latitude":51.65892008,"longitude":-4.722092618,"stationOperator":"AW","crsCode":"PNA"},{"name":"Penarth","latitude":51.43588909,"longitude":-3.174465022,"stationOperator":"AW","crsCode":"PEN"},{"name":"Pencoed","latitude":51.52461118,"longitude":-3.50049761,"stationOperator":"AW","crsCode":"PCD"},{"name":"Pengam","latitude":51.67045291,"longitude":-3.230109732,"stationOperator":"AW","crsCode":"PGM"},{"name":"Penhelig","latitude":52.54570208,"longitude":-4.03503834,"stationOperator":"AW","crsCode":"PHG"},{"name":"Penmaenmawr","latitude":53.27048358,"longitude":-3.923515874,"stationOperator":"AW","crsCode":"PMW"},{"name":"Penrhiwceiber","latitude":51.66992031,"longitude":-3.359957291,"stationOperator":"AW","crsCode":"PER"},{"name":"Penrhyndeudraeth","latitude":52.92884346,"longitude":-4.064573948,"stationOperator":"AW","crsCode":"PRH"},{"name":"Pensarn (Gwynedd)","latitude":52.83072115,"longitude":-4.112173075,"stationOperator":"AW","crsCode":"PES"},{"name":"Pentre-Bach","latitude":51.72501373,"longitude":-3.362333939,"stationOperator":"AW","crsCode":"PTB"},{"name":"Pen-y-Bont","latitude":52.27394924,"longitude":-3.321940024,"stationOperator":"AW","crsCode":"PNY"},{"name":"Penychain","latitude":52.902882,"longitude":-4.33872,"stationOperator":"AW","crsCode":"PNC"},{"name":"Penyffordd","latitude":53.14311037,"longitude":-3.054849214,"stationOperator":"AW","crsCode":"PNF"},{"name":"Pontarddulais","latitude":51.71762164,"longitude":-4.045576015,"stationOperator":"AW","crsCode":"PTD"},{"name":"Pontlottyn","latitude":51.74663206,"longitude":-3.278966771,"stationOperator":"AW","crsCode":"PLT"},{"name":"Pontyclun","latitude":51.5237707,"longitude":-3.39293339,"stationOperator":"AW","crsCode":"PYC"},{"name":"Pont-y-Pant","latitude":53.06515277,"longitude":-3.862740369,"stationOperator":"AW","crsCode":"PYP"},{"name":"Pontypool & New Inn","latitude":51.69796197,"longitude":-3.014254502,"stationOperator":"AW","crsCode":"PPL"},{"name":"Pontypridd","latitude":51.59936625,"longitude":-3.341388164,"stationOperator":"AW","crsCode":"PPD"},{"name":"Port Talbot Parkway","latitude":51.59171473,"longitude":-3.781340109,"stationOperator":"AW","crsCode":"PTA"},{"name":"Porth","latitude":51.61253349,"longitude":-3.407203552,"stationOperator":"AW","crsCode":"POR"},{"name":"Porthmadog","latitude":52.93093493,"longitude":-4.134459787,"stationOperator":"AW","crsCode":"PTM"},{"name":"Prees","latitude":52.89965046,"longitude":-2.689744248,"stationOperator":"AW","crsCode":"PRS"},{"name":"Prestatyn","latitude":53.33651635,"longitude":-3.407136515,"stationOperator":"AW","crsCode":"PRT"},{"name":"Pwllheli","latitude":52.88785158,"longitude":-4.41671931,"stationOperator":"AW","crsCode":"PWL"},{"name":"Pye Corner","latitude":51.579513,"longitude":-3.038295,"stationOperator":"AW","crsCode":"PYE"},{"name":"Pyle","latitude":51.525739,"longitude":-3.698076385,"stationOperator":"AW","crsCode":"PYL"},{"name":"Quakers Yard","latitude":51.6607231,"longitude":-3.322813042,"stationOperator":"AW","crsCode":"QYD"},{"name":"Radyr","latitude":51.51650886,"longitude":-3.248009062,"stationOperator":"AW","crsCode":"RDR"},{"name":"Rhiwbina","latitude":51.52118226,"longitude":-3.213975661,"stationOperator":"AW","crsCode":"RHI"},{"name":"Rhoose Cardiff International Airport","latitude":51.38706545,"longitude":-3.34939894,"stationOperator":"AW","crsCode":"RIA"},{"name":"Rhosneigr","latitude":53.23485594,"longitude":-4.506663917,"stationOperator":"AW","crsCode":"RHO"},{"name":"Rhyl","latitude":53.31844074,"longitude":-3.489112507,"stationOperator":"AW","crsCode":"RHL"},{"name":"Rhymney","latitude":51.75883789,"longitude":-3.289309476,"stationOperator":"AW","crsCode":"RHY"},{"name":"Risca & Pontymister","latitude":51.60584265,"longitude":-3.092230162,"stationOperator":"AW","crsCode":"RCA"},{"name":"Rogerstone","latitude":51.59561144,"longitude":-3.066632694,"stationOperator":"AW","crsCode":"ROR"},{"name":"Roman Bridge","latitude":53.044436,"longitude":-3.921654634,"stationOperator":"AW","crsCode":"RMB"},{"name":"Ruabon","latitude":52.96018774,"longitude":-3.04250099,"stationOperator":"AW","crsCode":"RUA"},{"name":"Runcorn East","latitude":53.3269412,"longitude":-2.665085335,"stationOperator":"AW","crsCode":"RUE"},{"name":"Sarn","latitude":51.53872014,"longitude":-3.589932796,"stationOperator":"AW","crsCode":"SRR"},{"name":"Saundersfoot","latitude":51.72209314,"longitude":-4.716619622,"stationOperator":"AW","crsCode":"SDF"},{"name":"Severn Tunnel Junction","latitude":51.58467107,"longitude":-2.777903615,"stationOperator":"AW","crsCode":"STJ"},{"name":"Shotton","latitude":53.2125552,"longitude":-3.038434376,"stationOperator":"AW","crsCode":"SHT"},{"name":"Shrewsbury","latitude":52.71141159,"longitude":-2.74894276,"stationOperator":"AW","crsCode":"SHR"},{"name":"Skewen","latitude":51.66138872,"longitude":-3.846536024,"stationOperator":"AW","crsCode":"SKE"},{"name":"Sugar Loaf","latitude":52.08228042,"longitude":-3.686969492,"stationOperator":"AW","crsCode":"SUG"},{"name":"Swansea","latitude":51.62514381,"longitude":-3.941576226,"stationOperator":"AW","crsCode":"SWA"},{"name":"Taffs Well","latitude":51.54079864,"longitude":-3.262949451,"stationOperator":"AW","crsCode":"TAF"},{"name":"Talsarnau","latitude":52.90432506,"longitude":-4.068166336,"stationOperator":"AW","crsCode":"TAL"},{"name":"Talybont","latitude":52.77264337,"longitude":-4.09660964,"stationOperator":"AW","crsCode":"TLB"},{"name":"Tal-y-Cafn","latitude":53.22837926,"longitude":-3.818280351,"stationOperator":"AW","crsCode":"TLC"},{"name":"Tenby","latitude":51.67294584,"longitude":-4.706733014,"stationOperator":"AW","crsCode":"TEN"},{"name":"Tir-Phil","latitude":51.7209057,"longitude":-3.246390272,"stationOperator":"AW","crsCode":"TIR"},{"name":"Ton Pentre","latitude":51.64779844,"longitude":-3.486204606,"stationOperator":"AW","crsCode":"TPN"},{"name":"Tondu","latitude":51.54736625,"longitude":-3.595570636,"stationOperator":"AW","crsCode":"TDU"},{"name":"Tonfanau","latitude":52.61355963,"longitude":-4.123713236,"stationOperator":"AW","crsCode":"TNF"},{"name":"Tonypandy","latitude":51.61975969,"longitude":-3.448885591,"stationOperator":"AW","crsCode":"TNP"},{"name":"Trefforest","latitude":51.59145801,"longitude":-3.325130833,"stationOperator":"AW","crsCode":"TRF"},{"name":"Trefforest Estate","latitude":51.5682872,"longitude":-3.290260312,"stationOperator":"AW","crsCode":"TRE"},{"name":"Trehafod","latitude":51.61014718,"longitude":-3.380989064,"stationOperator":"AW","crsCode":"TRH"},{"name":"Treherbert","latitude":51.67224166,"longitude":-3.536321025,"stationOperator":"AW","crsCode":"TRB"},{"name":"Treorchy","latitude":51.65753073,"longitude":-3.505751584,"stationOperator":"AW","crsCode":"TRY"},{"name":"Troed-y-rhiw","latitude":51.71242473,"longitude":-3.346756999,"stationOperator":"AW","crsCode":"TRD"},{"name":"Ty Croes","latitude":53.22257541,"longitude":-4.474753946,"stationOperator":"AW","crsCode":"TYC"},{"name":"Ty Glas","latitude":51.5215412,"longitude":-3.19654418,"stationOperator":"AW","crsCode":"TGS"},{"name":"Tygwyn","latitude":52.89380186,"longitude":-4.078666757,"stationOperator":"AW","crsCode":"TYG"},{"name":"Tywyn","latitude":52.58559297,"longitude":-4.09357376,"stationOperator":"AW","crsCode":"TYW"},{"name":"Upton (Merseyside)","latitude":53.38617781,"longitude":-3.084755805,"stationOperator":"AW","crsCode":"UPT"},{"name":"Valley","latitude":53.28130417,"longitude":-4.563392247,"stationOperator":"AW","crsCode":"VAL"},{"name":"Waun-Gron Park","latitude":51.48819741,"longitude":-3.229663483,"stationOperator":"AW","crsCode":"WNG"},{"name":"Welshpool","latitude":52.65751111,"longitude":-3.139872828,"stationOperator":"AW","crsCode":"WLP"},{"name":"Wem","latitude":52.85632741,"longitude":-2.718760914,"stationOperator":"AW","crsCode":"WEM"},{"name":"Whitchurch (Cardiff)","latitude":51.52064748,"longitude":-3.22217731,"stationOperator":"AW","crsCode":"WHT"},{"name":"Whitchurch (Shropshire)","latitude":52.96807676,"longitude":-2.67147586,"stationOperator":"AW","crsCode":"WTC"},{"name":"Whitland","latitude":51.81803502,"longitude":-4.614424451,"stationOperator":"AW","crsCode":"WTL"},{"name":"Wildmill","latitude":51.52087413,"longitude":-3.579653502,"stationOperator":"AW","crsCode":"WMI"},{"name":"Wrenbury","latitude":53.0197184,"longitude":-2.59624734,"stationOperator":"AW","crsCode":"WRE"},{"name":"Wrexham Central","latitude":53.04620654,"longitude":-2.999062482,"stationOperator":"AW","crsCode":"WXC"},{"name":"Wrexham General","latitude":53.05025036,"longitude":-3.002453051,"stationOperator":"AW","crsCode":"WRX"},{"name":"Ynyswen","latitude":51.66496961,"longitude":-3.521614997,"stationOperator":"AW","crsCode":"YNW"},{"name":"Yorton","latitude":52.80896814,"longitude":-2.736464904,"stationOperator":"AW","crsCode":"YRT"},{"name":"Ystrad Mynach","latitude":51.64093139,"longitude":-3.241305784,"stationOperator":"AW","crsCode":"YSM"},{"name":"Ystrad Rhondda","latitude":51.64363752,"longitude":-3.466701338,"stationOperator":"AW","crsCode":"YSR"},{"name":"Barking","latitude":51.5400412345,"longitude":0.0807933827,"stationOperator":"CC","crsCode":"BKG"},{"name":"Basildon","latitude":51.5681114558,"longitude":0.4567956956,"stationOperator":"CC","crsCode":"BSO"},{"name":"Benfleet","latitude":51.5439490855,"longitude":0.561723002,"stationOperator":"CC","crsCode":"BEF"},{"name":"Chafford Hundred Lakeside","latitude":51.485645362,"longitude":0.2872366517,"stationOperator":"CC","crsCode":"CFH"},{"name":"Chalkwell","latitude":51.538722717,"longitude":0.6706052576,"stationOperator":"CC","crsCode":"CHW"},{"name":"Dagenham Dock","latitude":51.5262934247,"longitude":0.1450431938,"stationOperator":"CC","crsCode":"DDK"},{"name":"East Tilbury","latitude":51.4848340787,"longitude":0.4129328582,"stationOperator":"CC","crsCode":"ETL"},{"name":"Grays","latitude":51.4762505757,"longitude":0.3218346029,"stationOperator":"CC","crsCode":"GRY"},{"name":"Laindon","latitude":51.5677669135,"longitude":0.4236436899,"stationOperator":"CC","crsCode":"LAI"},{"name":"Leigh-on-Sea","latitude":51.5413668098,"longitude":0.6404283175,"stationOperator":"CC","crsCode":"LES"},{"name":"Limehouse","latitude":51.512794432,"longitude":-0.0393527349,"stationOperator":"CC","crsCode":"LHS"},{"name":"London Fenchurch Street","latitude":51.51157341,"longitude":-0.078591579,"stationOperator":"CC","crsCode":"FST"},{"name":"Ockendon","latitude":51.5219961849,"longitude":0.2904709275,"stationOperator":"CC","crsCode":"OCK"},{"name":"Pitsea","latitude":51.5603638481,"longitude":0.5063012148,"stationOperator":"CC","crsCode":"PSE"},{"name":"Purfleet","latitude":51.4810161506,"longitude":0.2367813953,"stationOperator":"CC","crsCode":"PFL"},{"name":"Rainham (Essex)","latitude":51.5173546284,"longitude":0.1907490215,"stationOperator":"CC","crsCode":"RNM"},{"name":"Shoeburyness","latitude":51.5309758701,"longitude":0.7953607931,"stationOperator":"CC","crsCode":"SRY"},{"name":"Southend Central","latitude":51.5370680411,"longitude":0.7117404187,"stationOperator":"CC","crsCode":"SOC"},{"name":"Southend East","latitude":51.5389761049,"longitude":0.7318291094,"stationOperator":"CC","crsCode":"SOE"},{"name":"Stanford-le-Hope","latitude":51.5143671372,"longitude":0.4230412837,"stationOperator":"CC","crsCode":"SFO"},{"name":"Thorpe Bay","latitude":51.5375737603,"longitude":0.7617431863,"stationOperator":"CC","crsCode":"TPB"},{"name":"Tilbury Town","latitude":51.4623607916,"longitude":0.3540417321,"stationOperator":"CC","crsCode":"TIL"},{"name":"Upminster","latitude":51.5593632504,"longitude":0.2519216008,"stationOperator":"CC","crsCode":"UPM"},{"name":"West Horndon","latitude":51.567950568,"longitude":0.3406471967,"stationOperator":"CC","crsCode":"WHR"},{"name":"Westcliff","latitude":51.5373370324,"longitude":0.691479135,"stationOperator":"CC","crsCode":"WCF"},{"name":"Aylesbury","latitude":51.81389614,"longitude":-0.815094966,"stationOperator":"CH","crsCode":"AYS"},{"name":"Aylesbury Vale Parkway","latitude":51.830795,"longitude":-0.860787,"stationOperator":"CH","crsCode":"AVP"},{"name":"Banbury","latitude":52.06031282,"longitude":-1.328130455,"stationOperator":"CH","crsCode":"BAN"},{"name":"Beaconsfield","latitude":51.61129066,"longitude":-0.643817675,"stationOperator":"CH","crsCode":"BCF"},{"name":"Bicester North","latitude":51.90349153,"longitude":-1.150376878,"stationOperator":"CH","crsCode":"BCS"},{"name":"Bicester Village","latitude":51.89349443,"longitude":-1.148065862,"stationOperator":"CH","crsCode":"BIT"},{"name":"Birmingham Moor Street","latitude":52.479088,"longitude":-1.89246908,"stationOperator":"CH","crsCode":"BMO"},{"name":"Denham","latitude":51.5788354,"longitude":-0.497428347,"stationOperator":"CH","crsCode":"DNM"},{"name":"Denham Golf Club","latitude":51.58059592,"longitude":-0.517778734,"stationOperator":"CH","crsCode":"DGC"},{"name":"Dorridge","latitude":52.37208286,"longitude":-1.752908156,"stationOperator":"CH","crsCode":"DDG"},{"name":"Gerrards Cross","latitude":51.58902157,"longitude":-0.555268471,"stationOperator":"CH","crsCode":"GER"},{"name":"Great Missenden","latitude":51.70352072,"longitude":-0.709137756,"stationOperator":"CH","crsCode":"GMN"},{"name":"Haddenham & Thame Parkway","latitude":51.77085986,"longitude":-0.942139967,"stationOperator":"CH","crsCode":"HDM"},{"name":"Hatton","latitude":52.29528991,"longitude":-1.672981218,"stationOperator":"CH","crsCode":"HTN"},{"name":"High Wycombe","latitude":51.62958615,"longitude":-0.74540803,"stationOperator":"CH","crsCode":"HWY"},{"name":"Islip","latitude":51.82576003,"longitude":-1.238178071,"stationOperator":"CH","crsCode":"ISP"},{"name":"Kings Sutton","latitude":52.02135474,"longitude":-1.280927148,"stationOperator":"CH","crsCode":"KGS"},{"name":"Lapworth","latitude":52.34127509,"longitude":-1.725484472,"stationOperator":"CH","crsCode":"LPW"},{"name":"Leamington Spa","latitude":52.28450186,"longitude":-1.536212243,"stationOperator":"CH","crsCode":"LMS"},{"name":"Little Kimble","latitude":51.75223562,"longitude":-0.808451583,"stationOperator":"CH","crsCode":"LTK"},{"name":"London Marylebone","latitude":51.5225401,"longitude":-0.163627749,"stationOperator":"CH","crsCode":"MYB"},{"name":"Monks Risborough","latitude":51.73576572,"longitude":-0.829333579,"stationOperator":"CH","crsCode":"MRS"},{"name":"Northolt Park","latitude":51.55763535,"longitude":-0.359421311,"stationOperator":"CH","crsCode":"NLT"},{"name":"Oxford Parkway","latitude":1.2745,"longitude":51.8042,"stationOperator":"CH","crsCode":"OXP"},{"name":"Princes Risborough","latitude":51.71786322,"longitude":-0.843881476,"stationOperator":"CH","crsCode":"PRR"},{"name":"Saunderton","latitude":51.67590446,"longitude":-0.825468633,"stationOperator":"CH","crsCode":"SDR"},{"name":"Seer Green & Jordans","latitude":51.60966864,"longitude":-0.607428365,"stationOperator":"CH","crsCode":"SRG"},{"name":"Solihull","latitude":52.41440643,"longitude":-1.788399215,"stationOperator":"CH","crsCode":"SOL"},{"name":"Stoke Mandeville","latitude":51.78780029,"longitude":-0.784084548,"stationOperator":"CH","crsCode":"SKM"},{"name":"Sudbury & Harrow Road","latitude":51.5545018,"longitude":-0.315970143,"stationOperator":"CH","crsCode":"SUD"},{"name":"Sudbury Hill Harrow","latitude":51.55838698,"longitude":-0.336167829,"stationOperator":"CH","crsCode":"SDH"},{"name":"Warwick","latitude":52.28655133,"longitude":-1.581858014,"stationOperator":"CH","crsCode":"WRW"},{"name":"Warwick Parkway","latitude":52.28611497,"longitude":-1.612062229,"stationOperator":"CH","crsCode":"WRP"},{"name":"Wembley Stadium","latitude":51.55469663,"longitude":-0.285958395,"stationOperator":"CH","crsCode":"WCX"},{"name":"Wendover","latitude":51.76176123,"longitude":-0.747369763,"stationOperator":"CH","crsCode":"WND"},{"name":"Alfreton","latitude":53.10045706,"longitude":-1.369688632,"stationOperator":"EM","crsCode":"ALF"},{"name":"Alsager","latitude":53.09275298,"longitude":-2.298612158,"stationOperator":"EM","crsCode":"ASG"},{"name":"Ambergate","latitude":53.06054078,"longitude":-1.48069344,"stationOperator":"EM","crsCode":"AMB"},{"name":"Ancaster","latitude":52.98793249,"longitude":-0.535615122,"stationOperator":"EM","crsCode":"ANC"},{"name":"Aslockton","latitude":52.95139426,"longitude":-0.898543361,"stationOperator":"EM","crsCode":"ALK"},{"name":"Attenborough","latitude":52.9063664,"longitude":-1.231269105,"stationOperator":"EM","crsCode":"ATB"},{"name":"Barrow-Upon-Soar","latitude":52.75028353,"longitude":-1.149568919,"stationOperator":"EM","crsCode":"BWS"},{"name":"Beeston","latitude":52.92077475,"longitude":-1.207661803,"stationOperator":"EM","crsCode":"BEE"},{"name":"Belper","latitude":53.02459133,"longitude":-1.482616227,"stationOperator":"EM","crsCode":"BLP"},{"name":"Bingham","latitude":52.95457509,"longitude":-0.952051798,"stationOperator":"EM","crsCode":"BIN"},{"name":"Bleasby","latitude":53.04169182,"longitude":-0.942482306,"stationOperator":"EM","crsCode":"BSB"},{"name":"Blythe Bridge","latitude":52.96816538,"longitude":-2.066959695,"stationOperator":"EM","crsCode":"BYB"},{"name":"Boston","latitude":52.97811818,"longitude":-0.031002264,"stationOperator":"EM","crsCode":"BSN"},{"name":"Bottesford","latitude":52.94500577,"longitude":-0.796014823,"stationOperator":"EM","crsCode":"BTF"},{"name":"Bulwell","latitude":52.99971765,"longitude":-1.196233543,"stationOperator":"EM","crsCode":"BLW"},{"name":"Burton Joyce","latitude":52.98409116,"longitude":-1.040713371,"stationOperator":"EM","crsCode":"BUJ"},{"name":"Burton-on-Trent","latitude":52.80583306,"longitude":-1.642462026,"stationOperator":"EM","crsCode":"BUT"},{"name":"Carlton","latitude":52.96497797,"longitude":-1.079253189,"stationOperator":"EM","crsCode":"CTO"},{"name":"Chesterfield","latitude":53.23824054,"longitude":-1.420109085,"stationOperator":"EM","crsCode":"CHD"},{"name":"Collingham","latitude":53.14411144,"longitude":-0.750383181,"stationOperator":"EM","crsCode":"CLM"},{"name":"Corby","latitude":52.488051,"longitude":-0.689243,"stationOperator":"EM","crsCode":"COR"},{"name":"Creswell","latitude":53.26403988,"longitude":-1.215873919,"stationOperator":"EM","crsCode":"CWD"},{"name":"Cromford","latitude":53.11294781,"longitude":-1.548786122,"stationOperator":"EM","crsCode":"CMF"},{"name":"Derby","latitude":52.91618036,"longitude":-1.463073262,"stationOperator":"EM","crsCode":"DBY"},{"name":"Duffield","latitude":52.98774917,"longitude":-1.486035917,"stationOperator":"EM","crsCode":"DFI"},{"name":"East Midlands Parkway","latitude":52.864306,"longitude":-1.264687,"stationOperator":"EM","crsCode":"EMD"},{"name":"Elton & Orston","latitude":52.95188523,"longitude":-0.855364249,"stationOperator":"EM","crsCode":"ELO"},{"name":"Fiskerton","latitude":53.06029715,"longitude":-0.912182054,"stationOperator":"EM","crsCode":"FSK"},{"name":"Gainsborough Lea Road","latitude":53.38611247,"longitude":-0.768583076,"stationOperator":"EM","crsCode":"GBL"},{"name":"Havenhouse","latitude":53.11449084,"longitude":0.273177619,"stationOperator":"EM","crsCode":"HVN"},{"name":"Heckington","latitude":52.97733733,"longitude":-0.293936548,"stationOperator":"EM","crsCode":"HEC"},{"name":"Hinckley (Leics)","latitude":52.53501671,"longitude":-1.371919253,"stationOperator":"EM","crsCode":"HNK"},{"name":"Hubberts Bridge","latitude":52.97564369,"longitude":-0.110071823,"stationOperator":"EM","crsCode":"HBB"},{"name":"Hucknall","latitude":53.03830732,"longitude":-1.195814321,"stationOperator":"EM","crsCode":"HKN"},{"name":"Hykeham","latitude":53.19536728,"longitude":-0.598164171,"stationOperator":"EM","crsCode":"HKM"},{"name":"Kettering","latitude":52.39356783,"longitude":-0.731555547,"stationOperator":"EM","crsCode":"KET"},{"name":"Kidsgrove","latitude":53.08658326,"longitude":-2.244818788,"stationOperator":"EM","crsCode":"KDG"},{"name":"Kirkby-in-Ashfield","latitude":53.10012396,"longitude":-1.253060759,"stationOperator":"EM","crsCode":"KKB"},{"name":"Langley Mill","latitude":53.01808321,"longitude":-1.331236345,"stationOperator":"EM","crsCode":"LGM"},{"name":"Langwith-Whaley Thorns","latitude":53.23253667,"longitude":-1.209707864,"stationOperator":"EM","crsCode":"LAG"},{"name":"Leicester","latitude":52.63144566,"longitude":-1.125278584,"stationOperator":"EM","crsCode":"LEI"},{"name":"Lincoln Central","latitude":53.22610544,"longitude":-0.539919855,"stationOperator":"EM","crsCode":"LCN"},{"name":"Long Eaton","latitude":52.88514513,"longitude":-1.288104264,"stationOperator":"EM","crsCode":"LGE"},{"name":"Longport","latitude":53.04169194,"longitude":-2.216225493,"stationOperator":"EM","crsCode":"LPT"},{"name":"Longton","latitude":52.989671,"longitude":-2.137010067,"stationOperator":"EM","crsCode":"LGN"},{"name":"Loughborough","latitude":52.77897038,"longitude":-1.195932923,"stationOperator":"EM","crsCode":"LBO"},{"name":"Lowdham","latitude":53.00692902,"longitude":-0.997582237,"stationOperator":"EM","crsCode":"LOW"},{"name":"Mansfield","latitude":53.14255896,"longitude":-1.197157497,"stationOperator":"EM","crsCode":"MFT"},{"name":"Mansfield Woodhouse","latitude":53.16145454,"longitude":-1.199796358,"stationOperator":"EM","crsCode":"MSW"},{"name":"Market Harborough","latitude":52.48040756,"longitude":-0.908871723,"stationOperator":"EM","crsCode":"MHR"},{"name":"Market Rasen","latitude":53.38447725,"longitude":-0.337094278,"stationOperator":"EM","crsCode":"MKR"},{"name":"Matlock","latitude":53.13815608,"longitude":-1.558986118,"stationOperator":"EM","crsCode":"MAT"},{"name":"Matlock Bath","latitude":53.12197042,"longitude":-1.557657491,"stationOperator":"EM","crsCode":"MTB"},{"name":"Melton Mowbray","latitude":52.7606833,"longitude":-0.885577764,"stationOperator":"EM","crsCode":"MMO"},{"name":"Metheringham","latitude":53.13890433,"longitude":-0.391447021,"stationOperator":"EM","crsCode":"MGM"},{"name":"Narborough","latitude":52.57131212,"longitude":-1.203351787,"stationOperator":"EM","crsCode":"NBR"},{"name":"Netherfield","latitude":52.96147483,"longitude":-1.07962538,"stationOperator":"EM","crsCode":"NET"},{"name":"Newark Castle","latitude":53.08002714,"longitude":-0.81315172,"stationOperator":"EM","crsCode":"NCT"},{"name":"Newstead","latitude":53.07171822,"longitude":-1.22235722,"stationOperator":"EM","crsCode":"NSD"},{"name":"Nottingham","latitude":52.94717947,"longitude":-1.14688808,"stationOperator":"EM","crsCode":"NOT"},{"name":"Oakham","latitude":52.67223558,"longitude":-0.73416278,"stationOperator":"EM","crsCode":"OKM"},{"name":"Peartree","latitude":52.89806425,"longitude":-1.472677646,"stationOperator":"EM","crsCode":"PEA"},{"name":"Radcliffe-on-Trent","latitude":52.94890755,"longitude":-1.036580335,"stationOperator":"EM","crsCode":"RDF"},{"name":"Rauceby","latitude":52.98522476,"longitude":-0.456602942,"stationOperator":"EM","crsCode":"RAU"},{"name":"Rolleston","latitude":53.06574736,"longitude":-0.898762153,"stationOperator":"EM","crsCode":"ROL"},{"name":"Ruskington","latitude":53.04148456,"longitude":-0.380756379,"stationOperator":"EM","crsCode":"RKT"},{"name":"Saxilby","latitude":53.26722423,"longitude":-0.664040791,"stationOperator":"EM","crsCode":"SXY"},{"name":"Sheffield","latitude":53.37823538,"longitude":-1.462104529,"stationOperator":"EM","crsCode":"SHF"},{"name":"Shirebrook","latitude":53.20426177,"longitude":-1.202442721,"stationOperator":"EM","crsCode":"SHB"},{"name":"Sileby","latitude":52.73102158,"longitude":-1.10966224,"stationOperator":"EM","crsCode":"SIL"},{"name":"Skegness","latitude":53.1430765,"longitude":0.333903847,"stationOperator":"EM","crsCode":"SKG"},{"name":"Sleaford","latitude":52.99549349,"longitude":-0.41034233,"stationOperator":"EM","crsCode":"SLR"},{"name":"South Wigston","latitude":52.58224354,"longitude":-1.134080764,"stationOperator":"EM","crsCode":"SWS"},{"name":"Spalding","latitude":52.78882937,"longitude":-0.156873182,"stationOperator":"EM","crsCode":"SPA"},{"name":"Spondon","latitude":52.91188874,"longitude":-1.411093591,"stationOperator":"EM","crsCode":"SPO"},{"name":"Stamford (Lincs)","latitude":52.64740704,"longitude":-0.480499424,"stationOperator":"EM","crsCode":"SMD"},{"name":"Sutton Parkway","latitude":53.11420865,"longitude":-1.245645184,"stationOperator":"EM","crsCode":"SPK"},{"name":"Swinderby","latitude":53.16958189,"longitude":-0.70268215,"stationOperator":"EM","crsCode":"SWD"},{"name":"Swineshead","latitude":52.96983174,"longitude":-0.187156156,"stationOperator":"EM","crsCode":"SWE"},{"name":"Syston","latitude":52.6946713,"longitude":-1.082139486,"stationOperator":"EM","crsCode":"SYS"},{"name":"Thorpe Culvert","latitude":53.12279894,"longitude":0.199481891,"stationOperator":"EM","crsCode":"TPC"},{"name":"Thurgarton","latitude":53.02922431,"longitude":-0.962023239,"stationOperator":"EM","crsCode":"THU"},{"name":"Tutbury & Hatton","latitude":52.86437892,"longitude":-1.682087757,"stationOperator":"EM","crsCode":"TUT"},{"name":"Uttoxeter","latitude":52.89708125,"longitude":-1.857261595,"stationOperator":"EM","crsCode":"UTT"},{"name":"Wainfleet","latitude":53.10514887,"longitude":0.234736319,"stationOperator":"EM","crsCode":"WFL"},{"name":"Wellingborough","latitude":52.30379284,"longitude":-0.676643216,"stationOperator":"EM","crsCode":"WEL"},{"name":"Whatstandwell","latitude":53.08311502,"longitude":-1.504309244,"stationOperator":"EM","crsCode":"WTS"},{"name":"Whitwell (Derbyshire)","latitude":53.28038058,"longitude":-1.199376401,"stationOperator":"EM","crsCode":"WWL"},{"name":"Willington","latitude":52.85366357,"longitude":-1.563360192,"stationOperator":"EM","crsCode":"WIL"},{"name":"Ashford International (Eurostar)","latitude":51.1409,"longitude":0.875,"stationOperator":"ES","crsCode":"ASI"},{"name":"London St Pancras (Intl)","latitude":51.53242,"longitude":-0.12603,"stationOperator":"ES","crsCode":"SPX"},{"name":"Alexandra Palace","latitude":51.59829,"longitude":-0.12014,"stationOperator":"GN","crsCode":"AAP"},{"name":"Arlesey","latitude":52.02604,"longitude":-0.26632,"stationOperator":"GN","crsCode":"ARL"},{"name":"Ashwell & Morden","latitude":52.03078,"longitude":-0.10978,"stationOperator":"GN","crsCode":"AWM"},{"name":"Baldock","latitude":51.99288,"longitude":-0.18756,"stationOperator":"GN","crsCode":"BDK"},{"name":"Bayford","latitude":51.75772,"longitude":-0.0956,"stationOperator":"GN","crsCode":"BAY"},{"name":"Biggleswade","latitude":52.08469,"longitude":-0.26118,"stationOperator":"GN","crsCode":"BIW"},{"name":"Bowes Park","latitude":51.60728,"longitude":-0.11977,"stationOperator":"GN","crsCode":"BOP"},{"name":"Brookmans Park","latitude":51.72106,"longitude":-0.20455,"stationOperator":"GN","crsCode":"BPK"},{"name":"Crews Hill","latitude":51.68449,"longitude":-0.10688,"stationOperator":"GN","crsCode":"CWH"},{"name":"Cuffley","latitude":51.70872,"longitude":-0.10978,"stationOperator":"GN","crsCode":"CUF"},{"name":"Downham Market","latitude":52.60413,"longitude":0.365691,"stationOperator":"GN","crsCode":"DOW"},{"name":"Drayton Park","latitude":51.55309,"longitude":-0.10571,"stationOperator":"GN","crsCode":"DYP"},{"name":"Enfield Chase","latitude":51.65276,"longitude":-0.09071,"stationOperator":"GN","crsCode":"ENC"},{"name":"Essex Road","latitude":51.54071,"longitude":-0.09627,"stationOperator":"GN","crsCode":"EXR"},{"name":"Finsbury Park","latitude":51.56478,"longitude":-0.10565,"stationOperator":"GN","crsCode":"FPK"},{"name":"Foxton","latitude":52.11913,"longitude":0.056536,"stationOperator":"GN","crsCode":"FXN"},{"name":"Gordon Hill","latitude":51.66352,"longitude":-0.09431,"stationOperator":"GN","crsCode":"GDH"},{"name":"Grange Park","latitude":51.64262,"longitude":-0.09735,"stationOperator":"GN","crsCode":"GPK"},{"name":"Hadley Wood","latitude":51.66841,"longitude":-0.17653,"stationOperator":"GN","crsCode":"HDW"},{"name":"Harringay","latitude":51.57737,"longitude":-0.10513,"stationOperator":"GN","crsCode":"HGY"},{"name":"Hatfield (Herts)","latitude":51.76388,"longitude":-0.21559,"stationOperator":"GN","crsCode":"HAT"},{"name":"Hertford North","latitude":51.79886,"longitude":-0.09178,"stationOperator":"GN","crsCode":"HFN"},{"name":"Hitchin","latitude":51.95329,"longitude":-0.26348,"stationOperator":"GN","crsCode":"HIT"},{"name":"Hornsey","latitude":51.58647,"longitude":-0.11197,"stationOperator":"GN","crsCode":"HRN"},{"name":"Huntingdon","latitude":52.32866,"longitude":-0.19206,"stationOperator":"GN","crsCode":"HUN"},{"name":"Kings Lynn","latitude":52.75381,"longitude":0.403525,"stationOperator":"GN","crsCode":"KLN"},{"name":"Knebworth","latitude":51.86686,"longitude":-0.18728,"stationOperator":"GN","crsCode":"KBW"},{"name":"Letchworth Garden City","latitude":51.97997,"longitude":-0.22926,"stationOperator":"GN","crsCode":"LET"},{"name":"Littleport","latitude":52.4624,"longitude":0.316567,"stationOperator":"GN","crsCode":"LTP"},{"name":"Meldreth","latitude":52.09073,"longitude":0.008953,"stationOperator":"GN","crsCode":"MEL"},{"name":"New Barnet","latitude":51.64857,"longitude":-0.17299,"stationOperator":"GN","crsCode":"NBA"},{"name":"New Southgate","latitude":51.61412,"longitude":-0.14303,"stationOperator":"GN","crsCode":"NSG"},{"name":"Oakleigh Park","latitude":51.63769,"longitude":-0.16621,"stationOperator":"GN","crsCode":"OKL"},{"name":"Palmers Green","latitude":51.61882,"longitude":-0.11034,"stationOperator":"GN","crsCode":"PAL"},{"name":"Potters Bar","latitude":51.69729,"longitude":-0.19236,"stationOperator":"GN","crsCode":"PBR"},{"name":"Royston","latitude":52.05309,"longitude":-0.02691,"stationOperator":"GN","crsCode":"RYS"},{"name":"Sandy","latitude":52.12475,"longitude":-0.28119,"stationOperator":"GN","crsCode":"SDY"},{"name":"Shepreth","latitude":52.11417,"longitude":0.031332,"stationOperator":"GN","crsCode":"STH"},{"name":"St Neots","latitude":52.23158,"longitude":-0.24741,"stationOperator":"GN","crsCode":"SNO"},{"name":"Stevenage","latitude":51.90169,"longitude":-0.20711,"stationOperator":"GN","crsCode":"SVG"},{"name":"Waterbeach","latitude":52.26245,"longitude":0.197386,"stationOperator":"GN","crsCode":"WBC"},{"name":"Watlington","latitude":52.67319,"longitude":0.383327,"stationOperator":"GN","crsCode":"WTG"},{"name":"Watton-at-Stone","latitude":51.85636,"longitude":-0.11972,"stationOperator":"GN","crsCode":"WAS"},{"name":"Welham Green","latitude":51.73635,"longitude":-0.21069,"stationOperator":"GN","crsCode":"WMG"},{"name":"Welwyn Garden City","latitude":51.80105,"longitude":-0.20407,"stationOperator":"GN","crsCode":"WGC"},{"name":"Welwyn North","latitude":51.8235,"longitude":-0.19209,"stationOperator":"GN","crsCode":"WLW"},{"name":"Winchmore Hill","latitude":51.63395,"longitude":-0.10089,"stationOperator":"GN","crsCode":"WIH"},{"name":"Berwick-upon-Tweed","latitude":55.77482692,"longitude":-2.011127048,"stationOperator":"GR","crsCode":"BWK"},{"name":"Darlington","latitude":54.52045136,"longitude":-1.547328479,"stationOperator":"GR","crsCode":"DAR"},{"name":"Doncaster","latitude":53.5214971,"longitude":-1.140234479,"stationOperator":"GR","crsCode":"DON"},{"name":"Durham","latitude":54.77939227,"longitude":-1.581756017,"stationOperator":"GR","crsCode":"DHM"},{"name":"Grantham","latitude":52.90649078,"longitude":-0.642452874,"stationOperator":"GR","crsCode":"GRA"},{"name":"Newark North Gate","latitude":53.08191008,"longitude":-0.800110846,"stationOperator":"GR","crsCode":"NNG"},{"name":"Newcastle","latitude":54.96822056,"longitude":-1.617285496,"stationOperator":"GR","crsCode":"NCL"},{"name":"Peterborough","latitude":52.57499236,"longitude":-0.249830061,"stationOperator":"GR","crsCode":"PBO"},{"name":"Retford","latitude":53.31517556,"longitude":-0.947878147,"stationOperator":"GR","crsCode":"RET"},{"name":"Wakefield Westgate","latitude":53.68174679,"longitude":-1.505407662,"stationOperator":"GR","crsCode":"WKF"},{"name":"York","latitude":53.95797924,"longitude":-1.093176915,"stationOperator":"GR","crsCode":"YRK"},{"name":"Acton Main Line","latitude":51.51692832,"longitude":-0.267630485,"stationOperator":"GW","crsCode":"AML"},{"name":"Aldermaston","latitude":51.40201112,"longitude":-1.138770296,"stationOperator":"GW","crsCode":"AMT"},{"name":"Appleford","latitude":51.63964272,"longitude":-1.242139074,"stationOperator":"GW","crsCode":"APF"},{"name":"Ascott-under-Wychwood","latitude":51.86734048,"longitude":-1.564058135,"stationOperator":"GW","crsCode":"AUW"},{"name":"Ashchurch for Tewkesbury","latitude":51.99916912,"longitude":-2.109057444,"stationOperator":"GW","crsCode":"ASC"},{"name":"Avoncliff","latitude":51.33964614,"longitude":-2.281339394,"stationOperator":"GW","crsCode":"AVF"},{"name":"Avonmouth","latitude":51.50012646,"longitude":-2.698421372,"stationOperator":"GW","crsCode":"AVN"},{"name":"Barnstaple","latitude":51.07396111,"longitude":-4.063153416,"stationOperator":"GW","crsCode":"BNP"},{"name":"Bath Spa","latitude":51.37768276,"longitude":-2.357034178,"stationOperator":"GW","crsCode":"BTH"},{"name":"Bedminster","latitude":51.44008674,"longitude":-2.594156901,"stationOperator":"GW","crsCode":"BMT"},{"name":"Bedwyn","latitude":51.37963498,"longitude":-1.598795279,"stationOperator":"GW","crsCode":"BDW"},{"name":"Bere Alston","latitude":50.4855868,"longitude":-4.200398271,"stationOperator":"GW","crsCode":"BAS"},{"name":"Bere Ferrers","latitude":50.45085678,"longitude":-4.181881299,"stationOperator":"GW","crsCode":"BFE"},{"name":"Betchworth","latitude":51.24818664,"longitude":-0.266974147,"stationOperator":"GW","crsCode":"BTO"},{"name":"Blackwater","latitude":51.33181014,"longitude":-0.777022615,"stationOperator":"GW","crsCode":"BAW"},{"name":"Bodmin Parkway","latitude":50.44585588,"longitude":-4.662971107,"stationOperator":"GW","crsCode":"BOD"},{"name":"Bourne End","latitude":51.57711651,"longitude":-0.710471017,"stationOperator":"GW","crsCode":"BNE"},{"name":"Bradford-on-Avon","latitude":51.34490956,"longitude":-2.252339918,"stationOperator":"GW","crsCode":"BOA"},{"name":"Bramley (Hants)","latitude":51.33007866,"longitude":-1.060987012,"stationOperator":"GW","crsCode":"BMY"},{"name":"Bridgwater","latitude":51.12807318,"longitude":-2.99028809,"stationOperator":"GW","crsCode":"BWT"},{"name":"Bristol Parkway","latitude":51.51383574,"longitude":-2.542659527,"stationOperator":"GW","crsCode":"BPW"},{"name":"Bruton","latitude":51.11162818,"longitude":-2.447079134,"stationOperator":"GW","crsCode":"BRU"},{"name":"Bugle","latitude":50.39994328,"longitude":-4.791841896,"stationOperator":"GW","crsCode":"BGL"},{"name":"Burnham (Bucks)","latitude":51.52350246,"longitude":-0.646369826,"stationOperator":"GW","crsCode":"BNM"},{"name":"Calstock","latitude":50.49757193,"longitude":-4.208711079,"stationOperator":"GW","crsCode":"CSK"},{"name":"Cam & Dursley","latitude":51.71761608,"longitude":-2.359096838,"stationOperator":"GW","crsCode":"CDU"},{"name":"Camborne","latitude":50.21042369,"longitude":-5.297472083,"stationOperator":"GW","crsCode":"CBN"},{"name":"Carbis Bay","latitude":50.19715063,"longitude":-5.464037988,"stationOperator":"GW","crsCode":"CBB"},{"name":"Castle Bar Park","latitude":51.52297874,"longitude":-0.331404502,"stationOperator":"GW","crsCode":"CBP"},{"name":"Castle Cary","latitude":51.09980387,"longitude":-2.522802166,"stationOperator":"GW","crsCode":"CLC"},{"name":"Causeland","latitude":50.40568197,"longitude":-4.466485305,"stationOperator":"GW","crsCode":"CAU"},{"name":"Chapelton (Devon)","latitude":51.01582131,"longitude":-4.02437053,"stationOperator":"GW","crsCode":"CPN"},{"name":"Charlbury","latitude":51.8724362,"longitude":-1.489697044,"stationOperator":"GW","crsCode":"CBY"},{"name":"Cheltenham Spa","latitude":51.897399,"longitude":-2.099625825,"stationOperator":"GW","crsCode":"CNM"},{"name":"Chetnole","latitude":50.86648406,"longitude":-2.574046181,"stationOperator":"GW","crsCode":"CNO"},{"name":"Chilworth","latitude":51.21521009,"longitude":-0.524818359,"stationOperator":"GW","crsCode":"CHL"},{"name":"Chippenham","latitude":51.46248638,"longitude":-2.115402682,"stationOperator":"GW","crsCode":"CPM"},{"name":"Cholsey","latitude":51.57020166,"longitude":-1.158018612,"stationOperator":"GW","crsCode":"CHO"},{"name":"Clifton Down","latitude":51.46454417,"longitude":-2.611749153,"stationOperator":"GW","crsCode":"CFN"},{"name":"Combe (Oxon)","latitude":51.83234296,"longitude":-1.392901935,"stationOperator":"GW","crsCode":"CME"},{"name":"Cookham","latitude":51.5574608,"longitude":-0.722076986,"stationOperator":"GW","crsCode":"COO"},{"name":"Coombe Junction Halt","latitude":50.44547073,"longitude":-4.48193626,"stationOperator":"GW","crsCode":"COE"},{"name":"Copplestone","latitude":50.81445919,"longitude":-3.751601158,"stationOperator":"GW","crsCode":"COP"},{"name":"Crediton","latitude":50.78342809,"longitude":-3.646879885,"stationOperator":"GW","crsCode":"CDI"},{"name":"Crowthorne","latitude":51.36672944,"longitude":-0.819274953,"stationOperator":"GW","crsCode":"CRN"},{"name":"Culham","latitude":51.65379512,"longitude":-1.236511134,"stationOperator":"GW","crsCode":"CUM"},{"name":"Dawlish","latitude":50.58080594,"longitude":-3.464647817,"stationOperator":"GW","crsCode":"DWL"},{"name":"Dawlish Warren","latitude":50.59905091,"longitude":-3.444018179,"stationOperator":"GW","crsCode":"DWW"},{"name":"Dean (Wilts)","latitude":51.0422304,"longitude":-1.634809477,"stationOperator":"GW","crsCode":"DEN"},{"name":"Devonport (Devon)","latitude":50.3781945,"longitude":-4.171511893,"stationOperator":"GW","crsCode":"DPT"},{"name":"Devonport Dockyard","latitude":50.38224968,"longitude":-4.175917265,"stationOperator":"GW","crsCode":"DOC"},{"name":"Didcot Parkway","latitude":51.61095504,"longitude":-1.242891296,"stationOperator":"GW","crsCode":"DID"},{"name":"Digby & Sowton","latitude":50.71370499,"longitude":-3.473885692,"stationOperator":"GW","crsCode":"DIG"},{"name":"Dilton Marsh","latitude":51.24799152,"longitude":-2.207421924,"stationOperator":"GW","crsCode":"DMH"},{"name":"Dorchester West","latitude":50.71094047,"longitude":-2.442548773,"stationOperator":"GW","crsCode":"DCW"},{"name":"Dorking Deepdene","latitude":51.23880129,"longitude":-0.324631668,"stationOperator":"GW","crsCode":"DPD"},{"name":"Dorking West","latitude":51.23622304,"longitude":-0.339967488,"stationOperator":"GW","crsCode":"DKT"},{"name":"Drayton Green","latitude":51.51602938,"longitude":-0.329640681,"stationOperator":"GW","crsCode":"DRG"},{"name":"Ealing Broadway","latitude":51.51484651,"longitude":-0.301752259,"stationOperator":"GW","crsCode":"EAL"},{"name":"Eggesford","latitude":50.88773166,"longitude":-3.874777657,"stationOperator":"GW","crsCode":"EGG"},{"name":"Evesham","latitude":52.09840414,"longitude":-1.947313868,"stationOperator":"GW","crsCode":"EVE"},{"name":"Exeter Central","latitude":50.72652351,"longitude":-3.532947602,"stationOperator":"GW","crsCode":"EXC"},{"name":"Exeter St David's","latitude":50.72915216,"longitude":-3.543660789,"stationOperator":"GW","crsCode":"EXD"},{"name":"Exeter St Thomas","latitude":50.71655803,"longitude":-3.539818783,"stationOperator":"GW","crsCode":"EXT"},{"name":"Exmouth","latitude":50.6216214,"longitude":-3.41499267,"stationOperator":"GW","crsCode":"EXM"},{"name":"Exton","latitude":50.66829151,"longitude":-3.444117811,"stationOperator":"GW","crsCode":"EXN"},{"name":"Falmouth Docks","latitude":50.15069317,"longitude":-5.056082925,"stationOperator":"GW","crsCode":"FAL"},{"name":"Falmouth Town","latitude":50.14836368,"longitude":-5.065272382,"stationOperator":"GW","crsCode":"FMT"},{"name":"Farnborough North","latitude":51.30204484,"longitude":-0.743026722,"stationOperator":"GW","crsCode":"FNN"},{"name":"Filton Abbey Wood","latitude":51.50493962,"longitude":-2.562437257,"stationOperator":"GW","crsCode":"FIT"},{"name":"Finstock","latitude":51.85279021,"longitude":-1.469345759,"stationOperator":"GW","crsCode":"FIN"},{"name":"Freshford","latitude":51.34202505,"longitude":-2.301023075,"stationOperator":"GW","crsCode":"FFD"},{"name":"Frome","latitude":51.22726268,"longitude":-2.310012271,"stationOperator":"GW","crsCode":"FRO"},{"name":"Furze Platt","latitude":51.53301767,"longitude":-0.728471069,"stationOperator":"GW","crsCode":"FZP"},{"name":"Gloucester","latitude":51.86541548,"longitude":-2.238656564,"stationOperator":"GW","crsCode":"GCR"},{"name":"Gomshall","latitude":51.21947014,"longitude":-0.442056348,"stationOperator":"GW","crsCode":"GOM"},{"name":"Goring & Streatley","latitude":51.52149065,"longitude":-1.13304466,"stationOperator":"GW","crsCode":"GOR"},{"name":"Gunnislake","latitude":50.51606725,"longitude":-4.219449323,"stationOperator":"GW","crsCode":"GSL"},{"name":"Hanborough","latitude":51.82516517,"longitude":-1.373525679,"stationOperator":"GW","crsCode":"HND"},{"name":"Hanwell","latitude":51.51193192,"longitude":-0.338725823,"stationOperator":"GW","crsCode":"HAN"},{"name":"Hayes & Harlington","latitude":51.50310042,"longitude":-0.420673064,"stationOperator":"GW","crsCode":"HAY"},{"name":"Hayle","latitude":50.18623531,"longitude":-5.419529634,"stationOperator":"GW","crsCode":"HYL"},{"name":"Henley-on-Thames","latitude":51.53417793,"longitude":-0.900215287,"stationOperator":"GW","crsCode":"HOT"},{"name":"Heyford","latitude":51.91919985,"longitude":-1.299267568,"stationOperator":"GW","crsCode":"HYD"},{"name":"Highbridge & Burnham","latitude":51.21815016,"longitude":-2.972173138,"stationOperator":"GW","crsCode":"HIG"},{"name":"Honeybourne","latitude":52.10142923,"longitude":-1.834981487,"stationOperator":"GW","crsCode":"HYB"},{"name":"Hungerford","latitude":51.41490602,"longitude":-1.512293535,"stationOperator":"GW","crsCode":"HGD"},{"name":"Iver","latitude":51.50850799,"longitude":-0.506717928,"stationOperator":"GW","crsCode":"IVR"},{"name":"Ivybridge","latitude":50.39357854,"longitude":-3.904458214,"stationOperator":"GW","crsCode":"IVY"},{"name":"Kemble","latitude":51.67627148,"longitude":-2.023096483,"stationOperator":"GW","crsCode":"KEM"},{"name":"Keyham","latitude":50.38974606,"longitude":-4.179074345,"stationOperator":"GW","crsCode":"KEY"},{"name":"Keynsham","latitude":51.41716993,"longitude":-2.494633256,"stationOperator":"GW","crsCode":"KYN"},{"name":"Kingham","latitude":51.90225045,"longitude":-1.6287933,"stationOperator":"GW","crsCode":"KGM"},{"name":"Kings Nympton","latitude":50.93597779,"longitude":-3.905610885,"stationOperator":"GW","crsCode":"KGN"},{"name":"Kintbury","latitude":51.40251723,"longitude":-1.445993627,"stationOperator":"GW","crsCode":"KIT"},{"name":"Langley (Berks)","latitude":51.50806754,"longitude":-0.541749056,"stationOperator":"GW","crsCode":"LNY"},{"name":"Lapford","latitude":50.85743381,"longitude":-3.811468159,"stationOperator":"GW","crsCode":"LAP"},{"name":"Lawrence Hill","latitude":51.45821869,"longitude":-2.564165806,"stationOperator":"GW","crsCode":"LWH"},{"name":"Lelant","latitude":50.18411125,"longitude":-5.436611903,"stationOperator":"GW","crsCode":"LEL"},{"name":"Lelant Saltings","latitude":50.1792896,"longitude":-5.441449302,"stationOperator":"GW","crsCode":"LTS"},{"name":"Liskeard","latitude":50.44684832,"longitude":-4.467498917,"stationOperator":"GW","crsCode":"LSK"},{"name":"Looe","latitude":50.3592157,"longitude":-4.456201102,"stationOperator":"GW","crsCode":"LOO"},{"name":"Lostwithiel","latitude":50.40749717,"longitude":-4.665464131,"stationOperator":"GW","crsCode":"LOS"},{"name":"Luxulyan","latitude":50.39029491,"longitude":-4.74751507,"stationOperator":"GW","crsCode":"LUX"},{"name":"Lympstone Commando","latitude":50.66222519,"longitude":-3.440861256,"stationOperator":"GW","crsCode":"LYC"},{"name":"Lympstone Village","latitude":50.64867164,"longitude":-3.431393476,"stationOperator":"GW","crsCode":"LYM"},{"name":"Maiden Newton","latitude":50.77999537,"longitude":-2.569440541,"stationOperator":"GW","crsCode":"MDN"},{"name":"Maidenhead","latitude":51.51866595,"longitude":-0.722658698,"stationOperator":"GW","crsCode":"MAI"},{"name":"Marlow","latitude":51.57099199,"longitude":-0.766429862,"stationOperator":"GW","crsCode":"MLW"},{"name":"Melksham","latitude":51.37981906,"longitude":-2.144507047,"stationOperator":"GW","crsCode":"MKM"},{"name":"Menheniot","latitude":50.42622082,"longitude":-4.40925881,"stationOperator":"GW","crsCode":"MEN"},{"name":"Midgham","latitude":51.39596936,"longitude":-1.177708473,"stationOperator":"GW","crsCode":"MDG"},{"name":"Montpelier","latitude":51.46889519,"longitude":-2.587332548,"stationOperator":"GW","crsCode":"MTP"},{"name":"Morchard Road","latitude":50.83189161,"longitude":-3.776395869,"stationOperator":"GW","crsCode":"MRD"},{"name":"Moreton-in-Marsh","latitude":51.99228415,"longitude":-1.700388972,"stationOperator":"GW","crsCode":"MIM"},{"name":"Mortimer","latitude":51.37207211,"longitude":-1.03550347,"stationOperator":"GW","crsCode":"MOR"},{"name":"Mottisfont & Dunbridge","latitude":51.03379277,"longitude":-1.546724812,"stationOperator":"GW","crsCode":"DBG"},{"name":"Nailsea & Backwell","latitude":51.41940681,"longitude":-2.750646299,"stationOperator":"GW","crsCode":"NLS"},{"name":"Newbury","latitude":51.39764427,"longitude":-1.322862459,"stationOperator":"GW","crsCode":"NBY"},{"name":"Newbury Racecourse","latitude":51.39845548,"longitude":-1.307799999,"stationOperator":"GW","crsCode":"NRC"},{"name":"Newcourt","latitude":-3.472551,"longitude":50.702656,"stationOperator":"GW","crsCode":"NCO"},{"name":"Newquay","latitude":50.41508811,"longitude":-5.075708631,"stationOperator":"GW","crsCode":"NQY"},{"name":"Newton Abbot","latitude":50.52956986,"longitude":-3.599193375,"stationOperator":"GW","crsCode":"NTA"},{"name":"Newton St Cyres","latitude":50.77891926,"longitude":-3.589414088,"stationOperator":"GW","crsCode":"NTC"},{"name":"North Camp","latitude":51.27579399,"longitude":-0.731198355,"stationOperator":"GW","crsCode":"NCM"},{"name":"Okehampton","latitude":50.737521,"longitude":-3.995299,"stationOperator":"GW","crsCode":"OKE"},{"name":"Oldfield Park","latitude":51.37920116,"longitude":-2.3802945,"stationOperator":"GW","crsCode":"OLF"},{"name":"Oxford","latitude":51.75350075,"longitude":-1.270151173,"stationOperator":"GW","crsCode":"OXF"},{"name":"Paignton","latitude":50.43470781,"longitude":-3.564338773,"stationOperator":"GW","crsCode":"PGN"},{"name":"Pangbourne","latitude":51.4853982,"longitude":-1.090464668,"stationOperator":"GW","crsCode":"PAN"},{"name":"Par","latitude":50.35531723,"longitude":-4.704719639,"stationOperator":"GW","crsCode":"PAR"},{"name":"Parson Street","latitude":51.43353995,"longitude":-2.608313932,"stationOperator":"GW","crsCode":"PSN"},{"name":"Patchway","latitude":51.52592522,"longitude":-2.562695774,"stationOperator":"GW","crsCode":"PWY"},{"name":"Penmere","latitude":50.1497831,"longitude":-5.083003855,"stationOperator":"GW","crsCode":"PNM"},{"name":"Penryn (Cornwall)","latitude":50.17026855,"longitude":-5.110935401,"stationOperator":"GW","crsCode":"PYN"},{"name":"Penzance","latitude":50.12168229,"longitude":-5.532467153,"stationOperator":"GW","crsCode":"PNZ"},{"name":"Perranwell","latitude":50.21648441,"longitude":-5.111839596,"stationOperator":"GW","crsCode":"PRW"},{"name":"Pershore","latitude":52.13029348,"longitude":-2.07154008,"stationOperator":"GW","crsCode":"PSH"},{"name":"Pewsey","latitude":51.34218734,"longitude":-1.770675036,"stationOperator":"GW","crsCode":"PEW"},{"name":"Pilning","latitude":51.55662016,"longitude":-2.627119757,"stationOperator":"GW","crsCode":"PIL"},{"name":"Plymouth","latitude":50.37781736,"longitude":-4.143363131,"stationOperator":"GW","crsCode":"PLY"},{"name":"Polsloe Bridge","latitude":50.73106987,"longitude":-3.501496022,"stationOperator":"GW","crsCode":"POL"},{"name":"Portsmouth Arms","latitude":50.95699912,"longitude":-3.950613811,"stationOperator":"GW","crsCode":"PMA"},{"name":"Quintrell Downs","latitude":50.40396942,"longitude":-5.029806255,"stationOperator":"GW","crsCode":"QUI"},{"name":"Radley","latitude":51.68620873,"longitude":-1.240479351,"stationOperator":"GW","crsCode":"RAD"},{"name":"Reading West","latitude":51.45545321,"longitude":-0.990294679,"stationOperator":"GW","crsCode":"RDW"},{"name":"Redland","latitude":51.46838591,"longitude":-2.599131362,"stationOperator":"GW","crsCode":"RDA"},{"name":"Redruth","latitude":50.2332413,"longitude":-5.225974546,"stationOperator":"GW","crsCode":"RED"},{"name":"Roche","latitude":50.41826529,"longitude":-4.830229067,"stationOperator":"GW","crsCode":"ROC"},{"name":"Romsey","latitude":50.99252174,"longitude":-1.493151814,"stationOperator":"GW","crsCode":"ROM"},{"name":"Saltash","latitude":50.40734763,"longitude":-4.20915696,"stationOperator":"GW","crsCode":"STS"},{"name":"Sampford Courtenay","latitude":50.778968,"longitude":-3.937485,"stationOperator":"GW","crsCode":"SMC"},{"name":"Sandhurst (Berks)","latitude":51.34647568,"longitude":-0.803914472,"stationOperator":"GW","crsCode":"SND"},{"name":"Sandplace","latitude":50.38674429,"longitude":-4.464517438,"stationOperator":"GW","crsCode":"SDP"},{"name":"Sea Mills","latitude":51.47953406,"longitude":-2.650110484,"stationOperator":"GW","crsCode":"SML"},{"name":"Severn Beach","latitude":51.55955383,"longitude":-2.66427711,"stationOperator":"GW","crsCode":"SVB"},{"name":"Shalford (Surrey)","latitude":51.21431997,"longitude":-0.566799182,"stationOperator":"GW","crsCode":"SFR"},{"name":"Shiplake","latitude":51.51121587,"longitude":-0.882524379,"stationOperator":"GW","crsCode":"SHI"},{"name":"Shipton","latitude":51.86565386,"longitude":-1.5926996,"stationOperator":"GW","crsCode":"SIP"},{"name":"Shirehampton","latitude":51.48458989,"longitude":-2.678266118,"stationOperator":"GW","crsCode":"SHH"},{"name":"Slough","latitude":51.51187689,"longitude":-0.591504981,"stationOperator":"GW","crsCode":"SLO"},{"name":"South Greenford","latitude":51.53321485,"longitude":-0.336653369,"stationOperator":"GW","crsCode":"SGN"},{"name":"Southall","latitude":51.50596158,"longitude":-0.378613083,"stationOperator":"GW","crsCode":"STL"},{"name":"St Andrews Road","latitude":51.51279724,"longitude":-2.696698481,"stationOperator":"GW","crsCode":"SAR"},{"name":"St Austell","latitude":50.33950737,"longitude":-4.789405571,"stationOperator":"GW","crsCode":"SAU"},{"name":"St Budeaux Ferry Road","latitude":50.40138693,"longitude":-4.186644684,"stationOperator":"GW","crsCode":"SBF"},{"name":"St Budeaux Victoria Road","latitude":50.4021693,"longitude":-4.188088002,"stationOperator":"GW","crsCode":"SBV"},{"name":"St Columb Road","latitude":50.39905812,"longitude":-4.940828131,"stationOperator":"GW","crsCode":"SCR"},{"name":"St Erth","latitude":50.1704777,"longitude":-5.444317521,"stationOperator":"GW","crsCode":"SER"},{"name":"St Germans","latitude":50.39426531,"longitude":-4.30845147,"stationOperator":"GW","crsCode":"SGM"},{"name":"St Ives (Cornwall)","latitude":50.20864501,"longitude":-5.47678695,"stationOperator":"GW","crsCode":"SIV"},{"name":"St James Park (Exeter)","latitude":50.73068086,"longitude":-3.523164103,"stationOperator":"GW","crsCode":"SJP"},{"name":"St Keyne Wishing Well Halt","latitude":50.42305549,"longitude":-4.461615382,"stationOperator":"GW","crsCode":"SKN"},{"name":"Stapleton Road","latitude":51.46750636,"longitude":-2.566223864,"stationOperator":"GW","crsCode":"SRD"},{"name":"Starcross","latitude":50.62778455,"longitude":-3.447726133,"stationOperator":"GW","crsCode":"SCS"},{"name":"Stonehouse","latitude":51.74588546,"longitude":-2.279510293,"stationOperator":"GW","crsCode":"SHU"},{"name":"Stroud (Gloucs)","latitude":51.74457443,"longitude":-2.219392567,"stationOperator":"GW","crsCode":"STD"},{"name":"Swindon (Wilts)","latitude":51.56547293,"longitude":-1.785510103,"stationOperator":"GW","crsCode":"SWI"},{"name":"Tackley","latitude":51.88132548,"longitude":-1.297226956,"stationOperator":"GW","crsCode":"TAC"},{"name":"Taplow","latitude":51.5235594,"longitude":-0.68136745,"stationOperator":"GW","crsCode":"TAP"},{"name":"Taunton","latitude":51.02365625,"longitude":-3.102132918,"stationOperator":"GW","crsCode":"TAU"},{"name":"Teignmouth","latitude":50.54804676,"longitude":-3.494686366,"stationOperator":"GW","crsCode":"TGM"},{"name":"Thatcham","latitude":51.39383879,"longitude":-1.243189177,"stationOperator":"GW","crsCode":"THA"},{"name":"Theale","latitude":51.43344686,"longitude":-1.074967204,"stationOperator":"GW","crsCode":"THE"},{"name":"Thornford","latitude":50.91195034,"longitude":-2.57972607,"stationOperator":"GW","crsCode":"THO"},{"name":"Tilehurst","latitude":51.47150508,"longitude":-1.029822977,"stationOperator":"GW","crsCode":"TLH"},{"name":"Tiverton Parkway","latitude":50.9175286,"longitude":-3.359957026,"stationOperator":"GW","crsCode":"TVP"},{"name":"Topsham","latitude":50.68604362,"longitude":-3.463675278,"stationOperator":"GW","crsCode":"TOP"},{"name":"Torquay","latitude":50.46116534,"longitude":-3.54366854,"stationOperator":"GW","crsCode":"TQY"},{"name":"Torre","latitude":50.4731714,"longitude":-3.546441301,"stationOperator":"GW","crsCode":"TRR"},{"name":"Totnes","latitude":50.43584686,"longitude":-3.688721847,"stationOperator":"GW","crsCode":"TOT"},{"name":"Trowbridge","latitude":51.31982565,"longitude":-2.21434677,"stationOperator":"GW","crsCode":"TRO"},{"name":"Truro","latitude":50.26382962,"longitude":-5.064866947,"stationOperator":"GW","crsCode":"TRU"},{"name":"Twyford","latitude":51.47553018,"longitude":-0.863294993,"stationOperator":"GW","crsCode":"TWY"},{"name":"Umberleigh","latitude":50.99674639,"longitude":-3.98292199,"stationOperator":"GW","crsCode":"UMB"},{"name":"Wargrave","latitude":51.49815593,"longitude":-0.876519321,"stationOperator":"GW","crsCode":"WGV"},{"name":"Warminster","latitude":51.2067679,"longitude":-2.176745956,"stationOperator":"GW","crsCode":"WMN"},{"name":"West Drayton","latitude":51.51006005,"longitude":-0.472225232,"stationOperator":"GW","crsCode":"WDT"},{"name":"West Ealing","latitude":51.51364043,"longitude":-0.319783629,"stationOperator":"GW","crsCode":"WEA"},{"name":"Westbury (Wilts)","latitude":51.26697915,"longitude":-2.199193897,"stationOperator":"GW","crsCode":"WSB"},{"name":"Weston Milton","latitude":51.34877468,"longitude":-2.943343959,"stationOperator":"GW","crsCode":"WNM"},{"name":"Weston-super-Mare","latitude":51.34431671,"longitude":-2.971681531,"stationOperator":"GW","crsCode":"WSM"},{"name":"Windsor & Eton Central","latitude":51.48327262,"longitude":-0.610374922,"stationOperator":"GW","crsCode":"WNC"},{"name":"Worle","latitude":51.35803344,"longitude":-2.909638886,"stationOperator":"GW","crsCode":"WOR"},{"name":"Yate","latitude":51.54060333,"longitude":-2.432524509,"stationOperator":"GW","crsCode":"YAE"},{"name":"Yatton","latitude":51.39101195,"longitude":-2.82779361,"stationOperator":"GW","crsCode":"YAT"},{"name":"Yeoford","latitude":50.7768865,"longitude":-3.726083161,"stationOperator":"GW","crsCode":"YEO"},{"name":"Yeovil Pen Mill","latitude":50.94451153,"longitude":-2.613439339,"stationOperator":"GW","crsCode":"YVP"},{"name":"Yetminster","latitude":50.89615639,"longitude":-2.572988939,"stationOperator":"GW","crsCode":"YET"},{"name":"Brading","latitude":50.67835504,"longitude":-1.138722649,"stationOperator":"IL","crsCode":"BDN"},{"name":"Lake","latitude":50.64646818,"longitude":-1.166349574,"stationOperator":"IL","crsCode":"LKE"},{"name":"Ryde Esplanade","latitude":50.73285421,"longitude":-1.159772507,"stationOperator":"IL","crsCode":"RYD"},{"name":"Ryde Pier Head","latitude":50.73916991,"longitude":-1.160127176,"stationOperator":"IL","crsCode":"RYP"},{"name":"Ryde St Johns Road","latitude":50.72435057,"longitude":-1.156566865,"stationOperator":"IL","crsCode":"RYR"},{"name":"Sandown","latitude":50.65685392,"longitude":-1.162388386,"stationOperator":"IL","crsCode":"SAN"},{"name":"Shanklin","latitude":50.63390141,"longitude":-1.179835636,"stationOperator":"IL","crsCode":"SHN"},{"name":"Smallbrook Junction","latitude":50.71120981,"longitude":-1.155074725,"stationOperator":"IL","crsCode":"SAB"},{"name":"Acle","latitude":52.63470623,"longitude":1.543930278,"stationOperator":"LE","crsCode":"ACL"},{"name":"Alresford (Essex)","latitude":51.85400474,"longitude":0.996704746,"stationOperator":"LE","crsCode":"ALR"},{"name":"Althorne (Essex)","latitude":51.64787695,"longitude":0.752499154,"stationOperator":"LE","crsCode":"ALN"},{"name":"Angel Road","latitude":51.61241213,"longitude":-0.048784168,"stationOperator":"LE","crsCode":"AGR"},{"name":"Attleborough","latitude":52.51426479,"longitude":1.022679778,"stationOperator":"LE","crsCode":"ATL"},{"name":"Audley End","latitude":52.00445153,"longitude":0.2071621,"stationOperator":"LE","crsCode":"AUD"},{"name":"Battlesbridge","latitude":51.62486557,"longitude":0.56580343,"stationOperator":"LE","crsCode":"BLB"},{"name":"Beccles","latitude":52.45854162,"longitude":1.569508099,"stationOperator":"LE","crsCode":"BCC"},{"name":"Berney Arms","latitude":52.58980986,"longitude":1.630392836,"stationOperator":"LE","crsCode":"BYA"},{"name":"Billericay","latitude":51.62889045,"longitude":0.418635763,"stationOperator":"LE","crsCode":"BIC"},{"name":"Bishops Stortford","latitude":51.86669627,"longitude":0.164908628,"stationOperator":"LE","crsCode":"BIS"},{"name":"Braintree","latitude":51.87540511,"longitude":0.556698654,"stationOperator":"LE","crsCode":"BTR"},{"name":"Braintree Freeport","latitude":51.86901047,"longitude":0.567449428,"stationOperator":"LE","crsCode":"BTP"},{"name":"Brampton (Suffolk)","latitude":52.39545244,"longitude":1.543824133,"stationOperator":"LE","crsCode":"BRP"},{"name":"Brandon","latitude":52.45402845,"longitude":0.62473398,"stationOperator":"LE","crsCode":"BND"},{"name":"Brimsdown","latitude":51.65528087,"longitude":-0.03103974,"stationOperator":"LE","crsCode":"BMD"},{"name":"Broxbourne","latitude":51.74691233,"longitude":-0.011077941,"stationOperator":"LE","crsCode":"BXB"},{"name":"Brundall","latitude":52.61980542,"longitude":1.439275107,"stationOperator":"LE","crsCode":"BDA"},{"name":"Brundall Gardens","latitude":52.62309579,"longitude":1.418842092,"stationOperator":"LE","crsCode":"BGA"},{"name":"Buckenham (Norfolk)","latitude":52.59776177,"longitude":1.47033814,"stationOperator":"LE","crsCode":"BUC"},{"name":"Bures","latitude":51.97099242,"longitude":0.769005125,"stationOperator":"LE","crsCode":"BUE"},{"name":"Burnham-on-Crouch","latitude":51.63366373,"longitude":0.814045173,"stationOperator":"LE","crsCode":"BUU"},{"name":"Bury St Edmunds","latitude":52.25377846,"longitude":0.713310161,"stationOperator":"LE","crsCode":"BSE"},{"name":"Cambridge","latitude":52.1945746,"longitude":0.137554552,"stationOperator":"LE","crsCode":"CBG"},{"name":"Cantley","latitude":52.57877082,"longitude":1.513426069,"stationOperator":"LE","crsCode":"CNY"},{"name":"Chappel & Wakes Colne","latitude":51.92592031,"longitude":0.758518905,"stationOperator":"LE","crsCode":"CWC"},{"name":"Chelmsford","latitude":51.73638236,"longitude":0.468580339,"stationOperator":"LE","crsCode":"CHM"},{"name":"Cheshunt","latitude":51.70287691,"longitude":-0.023951585,"stationOperator":"LE","crsCode":"CHN"},{"name":"Clacton-on-Sea","latitude":51.79401273,"longitude":1.154105287,"stationOperator":"LE","crsCode":"CLT"},{"name":"Colchester","latitude":51.90061619,"longitude":0.89347015,"stationOperator":"LE","crsCode":"COL"},{"name":"Colchester Town","latitude":51.8865294,"longitude":0.904148555,"stationOperator":"LE","crsCode":"CET"},{"name":"Cressing (Essex)","latitude":51.85234942,"longitude":0.577973167,"stationOperator":"LE","crsCode":"CES"},{"name":"Cromer","latitude":52.9301088,"longitude":1.292833615,"stationOperator":"LE","crsCode":"CMR"},{"name":"Darsham","latitude":52.27301314,"longitude":1.523482074,"stationOperator":"LE","crsCode":"DSM"},{"name":"Derby Road (Ipswich)","latitude":52.05057196,"longitude":1.182659486,"stationOperator":"LE","crsCode":"DBR"},{"name":"Diss","latitude":52.37367539,"longitude":1.123713427,"stationOperator":"LE","crsCode":"DIS"},{"name":"Dovercourt","latitude":51.93875208,"longitude":1.280629166,"stationOperator":"LE","crsCode":"DVC"},{"name":"Dullingham","latitude":52.20166503,"longitude":0.366671696,"stationOperator":"LE","crsCode":"DUL"},{"name":"Eccles Road","latitude":52.47090467,"longitude":0.969929467,"stationOperator":"LE","crsCode":"ECS"},{"name":"Elmswell","latitude":52.23805444,"longitude":0.912598515,"stationOperator":"LE","crsCode":"ESW"},{"name":"Elsenham (Essex)","latitude":51.92055206,"longitude":0.228072408,"stationOperator":"LE","crsCode":"ESM"},{"name":"Ely","latitude":52.39124961,"longitude":0.266833823,"stationOperator":"LE","crsCode":"ELY"},{"name":"Enfield Lock","latitude":51.67088281,"longitude":-0.02833834,"stationOperator":"LE","crsCode":"ENL"},{"name":"Felixstowe","latitude":51.96708668,"longitude":1.35045546,"stationOperator":"LE","crsCode":"FLX"},{"name":"Frinton-on-Sea","latitude":51.83769342,"longitude":1.243187057,"stationOperator":"LE","crsCode":"FRI"},{"name":"Great Bentley","latitude":51.85177166,"longitude":1.065164898,"stationOperator":"LE","crsCode":"GRB"},{"name":"Great Chesterford","latitude":52.05982142,"longitude":0.193523039,"stationOperator":"LE","crsCode":"GRC"},{"name":"Great Yarmouth","latitude":52.61218298,"longitude":1.720906278,"stationOperator":"LE","crsCode":"GYM"},{"name":"Gunton","latitude":52.86613631,"longitude":1.348766988,"stationOperator":"LE","crsCode":"GNT"},{"name":"Haddiscoe","latitude":52.52889004,"longitude":1.622411116,"stationOperator":"LE","crsCode":"HAD"},{"name":"Halesworth","latitude":52.34669719,"longitude":1.505698126,"stationOperator":"LE","crsCode":"HAS"},{"name":"Harling Road","latitude":52.45371021,"longitude":0.909152671,"stationOperator":"LE","crsCode":"HRD"},{"name":"Harlow Mill","latitude":51.79036827,"longitude":0.132320656,"stationOperator":"LE","crsCode":"HWM"},{"name":"Harlow Town","latitude":51.78107298,"longitude":0.095143791,"stationOperator":"LE","crsCode":"HWN"},{"name":"Harwich International","latitude":51.9473035,"longitude":1.25514186,"stationOperator":"LE","crsCode":"HPQ"},{"name":"Harwich Town","latitude":51.94415922,"longitude":1.286700168,"stationOperator":"LE","crsCode":"HWC"},{"name":"Hatfield Peverel","latitude":51.779875,"longitude":0.592135742,"stationOperator":"LE","crsCode":"HAP"},{"name":"Hertford East","latitude":51.79903842,"longitude":-0.07293406,"stationOperator":"LE","crsCode":"HFE"},{"name":"Hockley","latitude":51.60356168,"longitude":0.65901386,"stationOperator":"LE","crsCode":"HOC"},{"name":"Hoveton & Wroxham","latitude":52.71559814,"longitude":1.408008889,"stationOperator":"LE","crsCode":"HXM"},{"name":"Hythe (Essex)","latitude":51.88565263,"longitude":0.927535333,"stationOperator":"LE","crsCode":"HYH"},{"name":"Ingatestone","latitude":51.66705103,"longitude":0.384252139,"stationOperator":"LE","crsCode":"INT"},{"name":"Ipswich","latitude":52.05060957,"longitude":1.144440623,"stationOperator":"LE","crsCode":"IPS"},{"name":"Kelvedon","latitude":51.84071438,"longitude":0.702401142,"stationOperator":"LE","crsCode":"KEL"},{"name":"Kennett","latitude":52.27728025,"longitude":0.490476315,"stationOperator":"LE","crsCode":"KNE"},{"name":"Kirby Cross","latitude":51.84140899,"longitude":1.215008216,"stationOperator":"LE","crsCode":"KBX"},{"name":"Lakenheath","latitude":52.4475127,"longitude":0.533892607,"stationOperator":"LE","crsCode":"LAK"},{"name":"Lea Bridge","latitude":51.567669,"longitude":-0.035556,"stationOperator":"LE","crsCode":"LEB"},{"name":"Lingwood","latitude":52.62223679,"longitude":1.489863333,"stationOperator":"LE","crsCode":"LGD"},{"name":"Lowestoft","latitude":52.47445691,"longitude":1.749727847,"stationOperator":"LE","crsCode":"LWT"},{"name":"Manea","latitude":52.49785289,"longitude":0.177697575,"stationOperator":"LE","crsCode":"MNE"},{"name":"Manningtree","latitude":51.94906612,"longitude":1.045251421,"stationOperator":"LE","crsCode":"MNG"},{"name":"March","latitude":52.55990987,"longitude":0.091199581,"stationOperator":"LE","crsCode":"MCH"},{"name":"Marks Tey","latitude":51.88095194,"longitude":0.783345532,"stationOperator":"LE","crsCode":"MKT"},{"name":"Melton (Suffolk)","latitude":52.10445728,"longitude":1.338257583,"stationOperator":"LE","crsCode":"MES"},{"name":"Mistley","latitude":51.94364535,"longitude":1.081412598,"stationOperator":"LE","crsCode":"MIS"},{"name":"Needham Market","latitude":52.15260095,"longitude":1.05527234,"stationOperator":"LE","crsCode":"NMT"},{"name":"Newmarket","latitude":52.23795928,"longitude":0.406217482,"stationOperator":"LE","crsCode":"NMK"},{"name":"Newport (Essex)","latitude":51.97987781,"longitude":0.215142617,"stationOperator":"LE","crsCode":"NWE"},{"name":"North Fambridge","latitude":51.64859041,"longitude":0.681672508,"stationOperator":"LE","crsCode":"NFA"},{"name":"North Walsham","latitude":52.81691581,"longitude":1.384466116,"stationOperator":"LE","crsCode":"NWA"},{"name":"Northumberland Park","latitude":51.60170041,"longitude":-0.05357565,"stationOperator":"LE","crsCode":"NUM"},{"name":"Norwich","latitude":52.62717818,"longitude":1.306828331,"stationOperator":"LE","crsCode":"NRW"},{"name":"Oulton Broad North","latitude":52.47777986,"longitude":1.715729717,"stationOperator":"LE","crsCode":"OUN"},{"name":"Oulton Broad South","latitude":52.46974778,"longitude":1.707982367,"stationOperator":"LE","crsCode":"OUS"},{"name":"Ponders End","latitude":51.64274862,"longitude":-0.034473536,"stationOperator":"LE","crsCode":"PON"},{"name":"Prittlewell","latitude":51.55069115,"longitude":0.71068991,"stationOperator":"LE","crsCode":"PRL"},{"name":"Rayleigh","latitude":51.58945508,"longitude":0.600638611,"stationOperator":"LE","crsCode":"RLG"},{"name":"Reedham (Norfolk)","latitude":52.5645259,"longitude":1.559666375,"stationOperator":"LE","crsCode":"REE"},{"name":"Rochford","latitude":51.58173343,"longitude":0.702317091,"stationOperator":"LE","crsCode":"RFD"},{"name":"Roughton Road","latitude":52.91804369,"longitude":1.299803414,"stationOperator":"LE","crsCode":"RNR"},{"name":"Roydon","latitude":51.77548937,"longitude":0.036262005,"stationOperator":"LE","crsCode":"RYN"},{"name":"Rye House","latitude":51.76941544,"longitude":0.005637565,"stationOperator":"LE","crsCode":"RYH"},{"name":"Salhouse","latitude":52.67560081,"longitude":1.391426504,"stationOperator":"LE","crsCode":"SAH"},{"name":"Sawbridgeworth","latitude":51.81435127,"longitude":0.160425068,"stationOperator":"LE","crsCode":"SAW"},{"name":"Saxmundham","latitude":52.21491694,"longitude":1.490176361,"stationOperator":"LE","crsCode":"SAX"},{"name":"Shelford (Cambs)","latitude":52.14884103,"longitude":0.139981977,"stationOperator":"LE","crsCode":"SED"},{"name":"Shenfield","latitude":51.63088441,"longitude":0.329854866,"stationOperator":"LE","crsCode":"SNF"},{"name":"Sheringham","latitude":52.94088541,"longitude":1.211327178,"stationOperator":"LE","crsCode":"SHM"},{"name":"Shippea Hill","latitude":52.43023398,"longitude":0.413355863,"stationOperator":"LE","crsCode":"SPP"},{"name":"Somerleyton","latitude":52.51025111,"longitude":1.652277542,"stationOperator":"LE","crsCode":"SYT"},{"name":"South Woodham Ferrers","latitude":51.64966861,"longitude":0.6066729,"stationOperator":"LE","crsCode":"SOF"},{"name":"Southend Victoria","latitude":51.54151627,"longitude":0.711514592,"stationOperator":"LE","crsCode":"SOV"},{"name":"Southminster","latitude":51.66063093,"longitude":0.835210668,"stationOperator":"LE","crsCode":"SMN"},{"name":"Spooner Row","latitude":52.53501919,"longitude":1.086491641,"stationOperator":"LE","crsCode":"SPN"},{"name":"St Margarets (Herts)","latitude":51.7878436,"longitude":0.001278525,"stationOperator":"LE","crsCode":"SMT"},{"name":"Stansted Airport","latitude":51.8885966,"longitude":0.26081836,"stationOperator":"LE","crsCode":"SSD"},{"name":"Stansted Mountfitchet","latitude":51.90131018,"longitude":0.19974645,"stationOperator":"LE","crsCode":"SST"},{"name":"Stowmarket","latitude":52.18972565,"longitude":1.000016541,"stationOperator":"LE","crsCode":"SMK"},{"name":"Sudbury (Suffolk)","latitude":52.03628673,"longitude":0.735461571,"stationOperator":"LE","crsCode":"SUY"},{"name":"Thetford","latitude":52.41914509,"longitude":0.745078426,"stationOperator":"LE","crsCode":"TTF"},{"name":"Thorpe-le-Soken","latitude":51.84777684,"longitude":1.161641452,"stationOperator":"LE","crsCode":"TLS"},{"name":"Thurston","latitude":52.25026767,"longitude":0.809509861,"stationOperator":"LE","crsCode":"TRS"},{"name":"Tottenham Hale","latitude":51.58831639,"longitude":-0.059922399,"stationOperator":"LE","crsCode":"TOM"},{"name":"Trimley","latitude":51.9765436,"longitude":1.319555915,"stationOperator":"LE","crsCode":"TRM"},{"name":"Waltham Cross","latitude":51.68507019,"longitude":-0.026550053,"stationOperator":"LE","crsCode":"WLC"},{"name":"Walton-on-the-Naze","latitude":51.84620069,"longitude":1.267920697,"stationOperator":"LE","crsCode":"WON"},{"name":"Ware (Herts)","latitude":51.80796409,"longitude":-0.028772714,"stationOperator":"LE","crsCode":"WAR"},{"name":"Weeley","latitude":51.85311063,"longitude":1.115494594,"stationOperator":"LE","crsCode":"WEE"},{"name":"West Runton","latitude":52.9355503,"longitude":1.245465306,"stationOperator":"LE","crsCode":"WRN"},{"name":"Westerfield","latitude":52.08087836,"longitude":1.166130957,"stationOperator":"LE","crsCode":"WFI"},{"name":"White Notley","latitude":51.8389241,"longitude":0.595875952,"stationOperator":"LE","crsCode":"WNY"},{"name":"Whittlesea","latitude":52.54995569,"longitude":-0.118225461,"stationOperator":"LE","crsCode":"WLE"},{"name":"Whittlesford Parkway","latitude":52.10360009,"longitude":0.165618606,"stationOperator":"LE","crsCode":"WLF"},{"name":"Wickford","latitude":51.61502928,"longitude":0.519193939,"stationOperator":"LE","crsCode":"WIC"},{"name":"Wickham Market","latitude":52.15112006,"longitude":1.39868855,"stationOperator":"LE","crsCode":"WCM"},{"name":"Witham","latitude":51.80597989,"longitude":0.639143614,"stationOperator":"LE","crsCode":"WTM"},{"name":"Wivenhoe","latitude":51.85654276,"longitude":0.956146009,"stationOperator":"LE","crsCode":"WIV"},{"name":"Woodbridge","latitude":52.09046452,"longitude":1.317791422,"stationOperator":"LE","crsCode":"WDB"},{"name":"Worstead","latitude":52.77731601,"longitude":1.404230785,"stationOperator":"LE","crsCode":"WRT"},{"name":"Wrabness","latitude":51.93945868,"longitude":1.171915943,"stationOperator":"LE","crsCode":"WRB"},{"name":"Wymondham","latitude":52.56486065,"longitude":1.117662312,"stationOperator":"LE","crsCode":"WMD"},{"name":"Acocks Green","latitude":52.44933057,"longitude":-1.818984792,"stationOperator":"LM","crsCode":"ACG"},{"name":"Acton Bridge (Cheshire)","latitude":53.26598504,"longitude":-2.60266626,"stationOperator":"LM","crsCode":"ACB"},{"name":"Adderley Park","latitude":52.48309476,"longitude":-1.85593993,"stationOperator":"LM","crsCode":"ADD"},{"name":"Albrighton","latitude":52.63795639,"longitude":-2.268906298,"stationOperator":"LM","crsCode":"ALB"},{"name":"Alvechurch","latitude":52.34608475,"longitude":-1.967659996,"stationOperator":"LM","crsCode":"ALV"},{"name":"Apsley","latitude":51.73252418,"longitude":-0.462924369,"stationOperator":"LM","crsCode":"APS"},{"name":"Aspley Guise","latitude":52.02124786,"longitude":-0.632327027,"stationOperator":"LM","crsCode":"APG"},{"name":"Aston","latitude":52.50513897,"longitude":-1.871779432,"stationOperator":"LM","crsCode":"AST"},{"name":"Atherstone","latitude":52.5789821,"longitude":-1.552812353,"stationOperator":"LM","crsCode":"ATH"},{"name":"Barlaston","latitude":52.94288578,"longitude":-2.168112728,"stationOperator":"LM","crsCode":"BRT"},{"name":"Barnt Green","latitude":52.36109392,"longitude":-1.992466617,"stationOperator":"LM","crsCode":"BTG"},{"name":"Bearley","latitude":52.24442123,"longitude":-1.750263853,"stationOperator":"LM","crsCode":"BER"},{"name":"Bedford St Johns","latitude":52.12949203,"longitude":-0.467502781,"stationOperator":"LM","crsCode":"BSJ"},{"name":"Bedworth","latitude":52.47931356,"longitude":-1.467391189,"stationOperator":"LM","crsCode":"BEH"},{"name":"Berkhamsted","latitude":51.76313738,"longitude":-0.562005134,"stationOperator":"LM","crsCode":"BKM"},{"name":"Berkswell","latitude":52.39589581,"longitude":-1.642844919,"stationOperator":"LM","crsCode":"BKW"},{"name":"Bermuda Park","latitude":52.504479,"longitude":-1.473879,"stationOperator":"LM","crsCode":"BEP"},{"name":"Bescot Stadium","latitude":52.56274493,"longitude":-1.99110442,"stationOperator":"LM","crsCode":"BSC"},{"name":"Bilbrook","latitude":52.6237314,"longitude":-2.186091807,"stationOperator":"LM","crsCode":"BBK"},{"name":"Birmingham Snow Hill","latitude":52.48358956,"longitude":-1.899820964,"stationOperator":"LM","crsCode":"BSW"},{"name":"Blake Street","latitude":52.604897,"longitude":-1.844908831,"stationOperator":"LM","crsCode":"BKT"},{"name":"Blakedown","latitude":52.40618415,"longitude":-2.17635507,"stationOperator":"LM","crsCode":"BKD"},{"name":"Bletchley","latitude":51.99534498,"longitude":-0.736316135,"stationOperator":"LM","crsCode":"BLY"},{"name":"Bloxwich","latitude":52.61821329,"longitude":-2.011476946,"stationOperator":"LM","crsCode":"BLX"},{"name":"Bloxwich North","latitude":52.62567399,"longitude":-2.019161042,"stationOperator":"LM","crsCode":"BWN"},{"name":"Bordesley","latitude":52.47188154,"longitude":-1.877764833,"stationOperator":"LM","crsCode":"BBS"},{"name":"Bournville","latitude":52.4269705,"longitude":-1.926421682,"stationOperator":"LM","crsCode":"BRV"},{"name":"Bow Brickhill","latitude":52.00431141,"longitude":-0.696072267,"stationOperator":"LM","crsCode":"BWB"},{"name":"Bricket Wood","latitude":51.70542949,"longitude":-0.359116315,"stationOperator":"LM","crsCode":"BWO"},{"name":"Bromsgrove","latitude":52.32270414,"longitude":-2.048374392,"stationOperator":"LM","crsCode":"BMV"},{"name":"Butlers Lane","latitude":52.59248151,"longitude":-1.838014434,"stationOperator":"LM","crsCode":"BUL"},{"name":"Canley","latitude":52.39925568,"longitude":-1.547576591,"stationOperator":"LM","crsCode":"CNL"},{"name":"Cannock","latitude":52.6861758,"longitude":-2.022146266,"stationOperator":"LM","crsCode":"CAO"},{"name":"Cheddington","latitude":51.85792469,"longitude":-0.662146256,"stationOperator":"LM","crsCode":"CED"},{"name":"Chester Road","latitude":52.53565641,"longitude":-1.832473808,"stationOperator":"LM","crsCode":"CRD"},{"name":"Claverdon","latitude":52.27710206,"longitude":-1.696566679,"stationOperator":"LM","crsCode":"CLV"},{"name":"Codsall","latitude":52.62730174,"longitude":-2.201767313,"stationOperator":"LM","crsCode":"CSL"},{"name":"Coleshill Parkway","latitude":52.5165359,"longitude":-1.708183055,"stationOperator":"LM","crsCode":"CEH"},{"name":"Colwall","latitude":52.07987584,"longitude":-2.356962163,"stationOperator":"LM","crsCode":"CWL"},{"name":"Coseley","latitude":52.5450936,"longitude":-2.085779159,"stationOperator":"LM","crsCode":"CSY"},{"name":"Cosford","latitude":52.644968,"longitude":-2.306194661,"stationOperator":"LM","crsCode":"COS"},{"name":"Coventry Arena","latitude":52.448457,"longitude":-1.496628,"stationOperator":"LM","crsCode":"CAA"},{"name":"Cradley Heath","latitude":52.46966253,"longitude":-2.090490391,"stationOperator":"LM","crsCode":"CRA"},{"name":"Danzey","latitude":52.3243769,"longitude":-1.821241229,"stationOperator":"LM","crsCode":"DZY"},{"name":"Droitwich Spa","latitude":52.26821535,"longitude":-2.158368535,"stationOperator":"LM","crsCode":"DTW"},{"name":"Duddeston","latitude":52.48837183,"longitude":-1.871386376,"stationOperator":"LM","crsCode":"DUD"},{"name":"Dudley Port","latitude":52.52466179,"longitude":-2.049480314,"stationOperator":"LM","crsCode":"DDP"},{"name":"Earlswood (West Midlands)","latitude":52.36659566,"longitude":-1.861165822,"stationOperator":"LM","crsCode":"EWD"},{"name":"Erdington","latitude":52.52847373,"longitude":-1.839281877,"stationOperator":"LM","crsCode":"ERD"},{"name":"Fenny Stratford","latitude":51.99989996,"longitude":-0.717672768,"stationOperator":"LM","crsCode":"FEN"},{"name":"Five Ways","latitude":52.47110355,"longitude":-1.912951496,"stationOperator":"LM","crsCode":"FWY"},{"name":"Four Oaks","latitude":52.57979147,"longitude":-1.828040569,"stationOperator":"LM","crsCode":"FOK"},{"name":"Garston (Hertfordshire)","latitude":51.68672373,"longitude":-0.381667092,"stationOperator":"LM","crsCode":"GSN"},{"name":"Gravelly Hill","latitude":52.51500582,"longitude":-1.852593623,"stationOperator":"LM","crsCode":"GVH"},{"name":"Great Malvern","latitude":52.10920685,"longitude":-2.318281662,"stationOperator":"LM","crsCode":"GMV"},{"name":"Hagley","latitude":52.42240686,"longitude":-2.147009123,"stationOperator":"LM","crsCode":"HAG"},{"name":"Hall Green","latitude":52.43678179,"longitude":-1.845499724,"stationOperator":"LM","crsCode":"HLG"},{"name":"Hampton-in-Arden","latitude":52.42904908,"longitude":-1.699936619,"stationOperator":"LM","crsCode":"HIA"},{"name":"Hamstead (Birmingham)","latitude":52.53107873,"longitude":-1.928901297,"stationOperator":"LM","crsCode":"HSD"},{"name":"Hartford (Cheshire)","latitude":53.24177232,"longitude":-2.553625248,"stationOperator":"LM","crsCode":"HTF"},{"name":"Hartlebury","latitude":52.33445625,"longitude":-2.220685153,"stationOperator":"LM","crsCode":"HBY"},{"name":"Hednesford","latitude":52.70973133,"longitude":-2.002323872,"stationOperator":"LM","crsCode":"HNF"},{"name":"Hemel Hempstead","latitude":51.74233574,"longitude":-0.490764101,"stationOperator":"LM","crsCode":"HML"},{"name":"Henley-in-Arden","latitude":52.29105066,"longitude":-1.784442316,"stationOperator":"LM","crsCode":"HNL"},{"name":"How Wood (Herts)","latitude":51.71774404,"longitude":-0.344671247,"stationOperator":"LM","crsCode":"HWW"},{"name":"Jewellery Quarter","latitude":52.48944377,"longitude":-1.913209845,"stationOperator":"LM","crsCode":"JEQ"},{"name":"Kempston Hardwick","latitude":52.09223124,"longitude":-0.503916852,"stationOperator":"LM","crsCode":"KMH"},{"name":"Kidderminster","latitude":52.38449634,"longitude":-2.239447445,"stationOperator":"LM","crsCode":"KID"},{"name":"Kings Langley","latitude":51.70635749,"longitude":-0.438410982,"stationOperator":"LM","crsCode":"KGL"},{"name":"Kings Norton","latitude":52.4134894,"longitude":-1.933795298,"stationOperator":"LM","crsCode":"KNN"},{"name":"Landywood","latitude":52.65713862,"longitude":-2.020653193,"stationOperator":"LM","crsCode":"LAW"},{"name":"Langley Green","latitude":52.4938807,"longitude":-2.004963724,"stationOperator":"LM","crsCode":"LGG"},{"name":"Lea Hall","latitude":52.48065151,"longitude":-1.786020071,"stationOperator":"LM","crsCode":"LEH"},{"name":"Ledbury","latitude":52.04494532,"longitude":-2.424982138,"stationOperator":"LM","crsCode":"LED"},{"name":"Leighton Buzzard","latitude":51.91631391,"longitude":-0.677001817,"stationOperator":"LM","crsCode":"LBZ"},{"name":"Lichfield City","latitude":52.68038568,"longitude":-1.825427009,"stationOperator":"LM","crsCode":"LIC"},{"name":"Lichfield Trent Valley","latitude":52.68690855,"longitude":-1.800236348,"stationOperator":"LM","crsCode":"LTV"},{"name":"Lidlington","latitude":52.04154787,"longitude":-0.558918711,"stationOperator":"LM","crsCode":"LID"},{"name":"Long Buckby","latitude":52.29472704,"longitude":-1.08647082,"stationOperator":"LM","crsCode":"LBK"},{"name":"Longbridge","latitude":52.39642483,"longitude":-1.981291124,"stationOperator":"LM","crsCode":"LOB"},{"name":"Lye (West Midlands)","latitude":52.45993087,"longitude":-2.115932275,"stationOperator":"LM","crsCode":"LYE"},{"name":"Malvern Link","latitude":52.12538603,"longitude":-2.319857656,"stationOperator":"LM","crsCode":"MVL"},{"name":"Marston Green","latitude":52.46719715,"longitude":-1.755614357,"stationOperator":"LM","crsCode":"MGN"},{"name":"Millbrook (Beds)","latitude":52.05384836,"longitude":-0.532692607,"stationOperator":"LM","crsCode":"MLB"},{"name":"Milton Keynes Central","latitude":52.03429998,"longitude":-0.774142566,"stationOperator":"LM","crsCode":"MKC"},{"name":"Northampton","latitude":52.23750925,"longitude":-0.906652319,"stationOperator":"LM","crsCode":"NMP"},{"name":"Northfield","latitude":52.40819871,"longitude":-1.965850518,"stationOperator":"LM","crsCode":"NFD"},{"name":"Norton Bridge","latitude":52.86671919,"longitude":-2.190546498,"stationOperator":"LM","crsCode":"NTB"},{"name":"Nuneaton","latitude":52.52638876,"longitude":-1.463873901,"stationOperator":"LM","crsCode":"NUN"},{"name":"Oakengates","latitude":52.69341403,"longitude":-2.45019074,"stationOperator":"LM","crsCode":"OKN"},{"name":"Old Hill","latitude":52.47094242,"longitude":-2.056191934,"stationOperator":"LM","crsCode":"OHL"},{"name":"Olton","latitude":52.43851888,"longitude":-1.804318398,"stationOperator":"LM","crsCode":"OLT"},{"name":"Park Street","latitude":51.72546034,"longitude":-0.340277192,"stationOperator":"LM","crsCode":"PKT"},{"name":"Penkridge","latitude":52.72351572,"longitude":-2.119295161,"stationOperator":"LM","crsCode":"PKG"},{"name":"Perry Barr","latitude":52.51649543,"longitude":-1.90195665,"stationOperator":"LM","crsCode":"PRY"},{"name":"Polesworth","latitude":52.6259325,"longitude":-1.609950777,"stationOperator":"LM","crsCode":"PSW"},{"name":"Redditch","latitude":52.3063387,"longitude":-1.945248706,"stationOperator":"LM","crsCode":"RDC"},{"name":"Ridgmont","latitude":52.02641391,"longitude":-0.594548449,"stationOperator":"LM","crsCode":"RID"},{"name":"Rowley Regis","latitude":52.47733479,"longitude":-2.030875441,"stationOperator":"LM","crsCode":"ROW"},{"name":"Rugeley Town","latitude":52.75439398,"longitude":-1.936835706,"stationOperator":"LM","crsCode":"RGT"},{"name":"Rugeley Trent Valley","latitude":52.77003211,"longitude":-1.92955021,"stationOperator":"LM","crsCode":"RGL"},{"name":"Sandwell & Dudley","latitude":52.50862411,"longitude":-2.01174306,"stationOperator":"LM","crsCode":"SAD"},{"name":"Selly Oak","latitude":52.44198975,"longitude":-1.935812243,"stationOperator":"LM","crsCode":"SLY"},{"name":"Shenstone","latitude":52.63905886,"longitude":-1.84478804,"stationOperator":"LM","crsCode":"SEN"},{"name":"Shifnal","latitude":52.66608646,"longitude":-2.371848866,"stationOperator":"LM","crsCode":"SFN"},{"name":"Shirley","latitude":52.40343629,"longitude":-1.845175263,"stationOperator":"LM","crsCode":"SRL"},{"name":"Small Heath","latitude":52.46376991,"longitude":-1.859388416,"stationOperator":"LM","crsCode":"SMA"},{"name":"Smethwick Galton Bridge","latitude":52.50179056,"longitude":-1.980495105,"stationOperator":"LM","crsCode":"SGB"},{"name":"Smethwick Rolfe Street","latitude":52.49639441,"longitude":-1.97064313,"stationOperator":"LM","crsCode":"SMR"},{"name":"Spring Road","latitude":52.44342372,"longitude":-1.837384708,"stationOperator":"LM","crsCode":"SRI"},{"name":"St Albans Abbey","latitude":51.74473607,"longitude":-0.342569292,"stationOperator":"LM","crsCode":"SAA"},{"name":"Stechford","latitude":52.48482961,"longitude":-1.811034254,"stationOperator":"LM","crsCode":"SCF"},{"name":"Stewartby","latitude":52.06909177,"longitude":-0.520681291,"stationOperator":"LM","crsCode":"SWR"},{"name":"Stone (Staffs)","latitude":52.9083927,"longitude":-2.155042811,"stationOperator":"LM","crsCode":"SNE"},{"name":"Stourbridge Junction","latitude":52.4475953,"longitude":-2.133850619,"stationOperator":"LM","crsCode":"SBJ"},{"name":"Stourbridge Town","latitude":52.45558734,"longitude":-2.141821696,"stationOperator":"LM","crsCode":"SBT"},{"name":"Stratford-upon-Avon","latitude":52.19425764,"longitude":-1.71629633,"stationOperator":"LM","crsCode":"SAV"},{"name":"Stratford-upon-Avon Parkway","latitude":52.207771,"longitude":-1.732885,"stationOperator":"LM","crsCode":"STY"},{"name":"Sutton Coldfield","latitude":52.56495316,"longitude":-1.824852952,"stationOperator":"LM","crsCode":"SUT"},{"name":"Tame Bridge Parkway","latitude":52.55294368,"longitude":-1.976209995,"stationOperator":"LM","crsCode":"TAB"},{"name":"Tamworth","latitude":52.63712963,"longitude":-1.687269406,"stationOperator":"LM","crsCode":"TAM"},{"name":"Telford Central","latitude":52.68112339,"longitude":-2.440981963,"stationOperator":"LM","crsCode":"TFC"},{"name":"The Hawthorns","latitude":52.50538276,"longitude":-1.964007294,"stationOperator":"LM","crsCode":"THW"},{"name":"The Lakes (Warks)","latitude":52.35947415,"longitude":-1.845769488,"stationOperator":"LM","crsCode":"TLK"},{"name":"Tile Hill","latitude":52.39511859,"longitude":-1.596851679,"stationOperator":"LM","crsCode":"THL"},{"name":"Tipton","latitude":52.53045253,"longitude":-2.065702345,"stationOperator":"LM","crsCode":"TIP"},{"name":"Tring","latitude":51.8007459,"longitude":-0.622433028,"stationOperator":"LM","crsCode":"TRI"},{"name":"Tyseley","latitude":52.4541245,"longitude":-1.839111203,"stationOperator":"LM","crsCode":"TYS"},{"name":"University (Birmingham)","latitude":52.45125019,"longitude":-1.936681677,"stationOperator":"LM","crsCode":"UNI"},{"name":"Walsall","latitude":52.58441036,"longitude":-1.984753459,"stationOperator":"LM","crsCode":"WSL"},{"name":"Water Orton","latitude":52.51859467,"longitude":-1.743097188,"stationOperator":"LM","crsCode":"WTO"},{"name":"Watford Junction","latitude":51.66352959,"longitude":-0.396519634,"stationOperator":"LM","crsCode":"WFJ"},{"name":"Watford North","latitude":51.67570486,"longitude":-0.389928129,"stationOperator":"LM","crsCode":"WFN"},{"name":"Wedgwood","latitude":52.95106237,"longitude":-2.17082355,"stationOperator":"LM","crsCode":"WED"},{"name":"Wellington (Shropshire)","latitude":52.70132167,"longitude":-2.517163693,"stationOperator":"LM","crsCode":"WLN"},{"name":"Whitlocks End","latitude":52.3918469,"longitude":-1.851534743,"stationOperator":"LM","crsCode":"WTE"},{"name":"Widney Manor","latitude":52.3959503,"longitude":-1.774378811,"stationOperator":"LM","crsCode":"WMR"},{"name":"Wilmcote","latitude":52.22248701,"longitude":-1.755935181,"stationOperator":"LM","crsCode":"WMC"},{"name":"Wilnecote (Staffs)","latitude":52.61085797,"longitude":-1.67949642,"stationOperator":"LM","crsCode":"WNE"},{"name":"Winsford","latitude":53.1905328,"longitude":-2.494593885,"stationOperator":"LM","crsCode":"WSF"},{"name":"Witton (West Midlands)","latitude":52.51225381,"longitude":-1.883989025,"stationOperator":"LM","crsCode":"WTT"},{"name":"Woburn Sands","latitude":52.01816252,"longitude":-0.654077198,"stationOperator":"LM","crsCode":"WOB"},{"name":"Wolverton","latitude":52.06589044,"longitude":-0.804264138,"stationOperator":"LM","crsCode":"WOL"},{"name":"Wood End","latitude":52.34436859,"longitude":-1.844500907,"stationOperator":"LM","crsCode":"WDE"},{"name":"Wootton Wawen","latitude":52.26587738,"longitude":-1.784564415,"stationOperator":"LM","crsCode":"WWW"},{"name":"Worcester Foregate Street","latitude":52.19492976,"longitude":-2.221749159,"stationOperator":"LM","crsCode":"WOF"},{"name":"Worcester Shrub Hill","latitude":52.19473652,"longitude":-2.209415022,"stationOperator":"LM","crsCode":"WOS"},{"name":"Wylde Green","latitude":52.54644367,"longitude":-1.831842869,"stationOperator":"LM","crsCode":"WYL"},{"name":"Wythall","latitude":52.38017701,"longitude":-1.866265184,"stationOperator":"LM","crsCode":"WYT"},{"name":"Yardley Wood","latitude":52.42150955,"longitude":-1.854376134,"stationOperator":"LM","crsCode":"YRD"},{"name":"Acton Central","latitude":51.5087756014,"longitude":-0.2636165401,"stationOperator":"LO","crsCode":"ACC"},{"name":"Anerley","latitude":51.413054424,"longitude":-0.0659143281,"stationOperator":"LO","crsCode":"ANZ"},{"name":"Bethnal Green","latitude":51.524464761,"longitude":-0.0597548173,"stationOperator":"LO","crsCode":"BET"},{"name":"Brockley","latitude":51.464746523,"longitude":-0.037813935,"stationOperator":"LO","crsCode":"BCY"},{"name":"Brondesbury","latitude":51.5456328731,"longitude":-0.2030812834,"stationOperator":"LO","crsCode":"BSY"},{"name":"Brondesbury Park","latitude":51.5403506936,"longitude":-0.2104998266,"stationOperator":"LO","crsCode":"BSP"},{"name":"Bruce Grove","latitude":51.592976158,"longitude":-0.0698302996,"stationOperator":"LO","crsCode":"BCV"},{"name":"Bush Hill Park","latitude":51.6415266174,"longitude":-0.0692142536,"stationOperator":"LO","crsCode":"BHK"},{"name":"Bushey","latitude":51.6457512678,"longitude":-0.3853236425,"stationOperator":"LO","crsCode":"BSH"},{"name":"Caledonian Rd & Barnsbury","latitude":51.5433544064,"longitude":-0.1151973117,"stationOperator":"LO","crsCode":"CIR"},{"name":"Cambridge Heath","latitude":51.5319776527,"longitude":-0.0572725582,"stationOperator":"LO","crsCode":"CBH"},{"name":"Camden Road","latitude":51.5419481621,"longitude":-0.139772041,"stationOperator":"LO","crsCode":"CMD"},{"name":"Canonbury","latitude":51.5483736002,"longitude":-0.0919120646,"stationOperator":"LO","crsCode":"CNN"},{"name":"Carpenders Park","latitude":51.628350627,"longitude":-0.3859416057,"stationOperator":"LO","crsCode":"CPK"},{"name":"Chingford","latitude":51.6330943168,"longitude":0.0099060858,"stationOperator":"LO","crsCode":"CHI"},{"name":"Clapham High Street","latitude":51.465484156,"longitude":-0.1325177136,"stationOperator":"LO","crsCode":"CLP"},{"name":"Clapton","latitude":51.5616497199,"longitude":-0.0570179552,"stationOperator":"LO","crsCode":"CPT"},{"name":"Crouch Hill","latitude":51.5712596808,"longitude":-0.1169292922,"stationOperator":"LO","crsCode":"CRH"},{"name":"Crystal Palace","latitude":51.4181107996,"longitude":-0.0726045159,"stationOperator":"LO","crsCode":"CYP"},{"name":"Dalston Junction","latitude":51.544513,"longitude":-0.076215,"stationOperator":"LO","crsCode":"DLJ"},{"name":"Dalston Kingsland","latitude":51.5482896253,"longitude":-0.0757611164,"stationOperator":"LO","crsCode":"DLK"},{"name":"Edmonton Green","latitude":51.6249363459,"longitude":-0.0611055096,"stationOperator":"LO","crsCode":"EDR"},{"name":"Emerson Park","latitude":51.5689526394,"longitude":0.2206477407,"stationOperator":"LO","crsCode":"EMP"},{"name":"Enfield Town","latitude":51.65182349,"longitude":-0.077450555,"stationOperator":"LO","crsCode":"ENF"},{"name":"Finchley Road & Frognal","latitude":51.5502716361,"longitude":-0.1831375287,"stationOperator":"LO","crsCode":"FNY"},{"name":"Forest Hill","latitude":51.4389253469,"longitude":-0.0533101412,"stationOperator":"LO","crsCode":"FOH"},{"name":"Gospel Oak","latitude":51.5553412717,"longitude":-0.1507661702,"stationOperator":"LO","crsCode":"GPO"},{"name":"Hackney Central","latitude":51.5468832711,"longitude":-0.0559164241,"stationOperator":"LO","crsCode":"HKC"},{"name":"Hackney Downs","latitude":51.548752152,"longitude":-0.0601638893,"stationOperator":"LO","crsCode":"HAC"},{"name":"Hackney Wick","latitude":51.543681835,"longitude":-0.0257661725,"stationOperator":"LO","crsCode":"HKW"},{"name":"Haggerston","latitude":51.539121,"longitude":-0.076443,"stationOperator":"LO","crsCode":"HGG"},{"name":"Hampstead Heath","latitude":51.5558372504,"longitude":-0.1651719284,"stationOperator":"LO","crsCode":"HDH"},{"name":"Harringay Green Lanes","latitude":51.5772479371,"longitude":-0.0979191677,"stationOperator":"LO","crsCode":"HRY"},{"name":"Hatch End","latitude":51.6101029612,"longitude":-0.3695177068,"stationOperator":"LO","crsCode":"HTE"},{"name":"Headstone Lane","latitude":51.6027314851,"longitude":-0.3567854507,"stationOperator":"LO","crsCode":"HDL"},{"name":"Highams Park","latitude":51.6088901684,"longitude":0.0001708352,"stationOperator":"LO","crsCode":"HIP"},{"name":"Homerton","latitude":51.5465953441,"longitude":-0.0386209062,"stationOperator":"LO","crsCode":"HMN"},{"name":"Honor Oak Park","latitude":51.4504882441,"longitude":-0.0456218436,"stationOperator":"LO","crsCode":"HPA"},{"name":"Hoxton","latitude":51.531932,"longitude":-0.076746,"stationOperator":"LO","crsCode":"HOX"},{"name":"Imperial Wharf","latitude":51.474251,"longitude":-0.181411,"stationOperator":"LO","crsCode":"IMW"},{"name":"Kensal Rise","latitude":51.5342130446,"longitude":-0.2208338296,"stationOperator":"LO","crsCode":"KNR"},{"name":"Kensington Olympia","latitude":51.4971676952,"longitude":-0.2093104275,"stationOperator":"LO","crsCode":"KPA"},{"name":"Kentish Town West","latitude":51.5465556931,"longitude":-0.1467955756,"stationOperator":"LO","crsCode":"KTW"},{"name":"Kilburn High Road","latitude":51.5373672145,"longitude":-0.1918709234,"stationOperator":"LO","crsCode":"KBN"},{"name":"Leyton Midland Road","latitude":51.5693546712,"longitude":-0.0070488322,"stationOperator":"LO","crsCode":"LEM"},{"name":"Leytonstone High Road","latitude":51.5637872962,"longitude":0.0082906756,"stationOperator":"LO","crsCode":"LER"},{"name":"London Fields","latitude":51.5411581907,"longitude":-0.0577468217,"stationOperator":"LO","crsCode":"LOF"},{"name":"New Cross Gate","latitude":51.475311265,"longitude":-0.0403846644,"stationOperator":"LO","crsCode":"NXG"},{"name":"Norwood Junction","latitude":51.397020224,"longitude":-0.0752164235,"stationOperator":"LO","crsCode":"NWD"},{"name":"Penge West","latitude":51.4175568838,"longitude":-0.0608342187,"stationOperator":"LO","crsCode":"PNW"},{"name":"Rectory Road","latitude":51.5587800243,"longitude":-0.0683933373,"stationOperator":"LO","crsCode":"REC"},{"name":"Rotherhithe","latitude":51.500975,"longitude":-0.053555,"stationOperator":"LO","crsCode":"ROE"},{"name":"Seven Sisters","latitude":51.5825108428,"longitude":-0.0748929164,"stationOperator":"LO","crsCode":"SVS"},{"name":"Shadwell","latitude":51.510931,"longitude":-0.057454,"stationOperator":"LO","crsCode":"SDE"},{"name":"Shepherd's Bush","latitude":51.5052892923,"longitude":-0.2176522962,"stationOperator":"LO","crsCode":"SPB"},{"name":"Shoreditch High Street","latitude":51.522922,"longitude":-0.075684,"stationOperator":"LO","crsCode":"SDC"},{"name":"Silver Street","latitude":51.6152343768,"longitude":-0.0726416423,"stationOperator":"LO","crsCode":"SLV"},{"name":"South Acton","latitude":51.4996997762,"longitude":-0.2701569616,"stationOperator":"LO","crsCode":"SAT"},{"name":"South Hampstead","latitude":51.5414759012,"longitude":-0.1784404686,"stationOperator":"LO","crsCode":"SOH"},{"name":"South Tottenham","latitude":51.5804187998,"longitude":-0.0718059032,"stationOperator":"LO","crsCode":"STO"},{"name":"Southbury","latitude":51.6484532766,"longitude":-0.0530188969,"stationOperator":"LO","crsCode":"SBU"},{"name":"St James Street (Walthamstow)","latitude":51.5806709779,"longitude":-0.032823574,"stationOperator":"LO","crsCode":"SJS"},{"name":"Stamford Hill","latitude":51.5744735869,"longitude":-0.0766757768,"stationOperator":"LO","crsCode":"SMH"},{"name":"Stoke Newington","latitude":51.5652387025,"longitude":-0.0728811564,"stationOperator":"LO","crsCode":"SKW"},{"name":"Surrey Quays","latitude":51.492791,"longitude":-0.048142,"stationOperator":"LO","crsCode":"SQE"},{"name":"Sydenham (London)","latitude":51.4272498924,"longitude":-0.0542380452,"stationOperator":"LO","crsCode":"SYD"},{"name":"Theobalds Grove","latitude":51.6924570037,"longitude":-0.0348236151,"stationOperator":"LO","crsCode":"TEO"},{"name":"Turkey Street","latitude":51.6726369884,"longitude":-0.0472089578,"stationOperator":"LO","crsCode":"TUR"},{"name":"Upper Holloway","latitude":51.563630354,"longitude":-0.1290758459,"stationOperator":"LO","crsCode":"UHL"},{"name":"Walthamstow Central","latitude":51.5829711924,"longitude":-0.0198773082,"stationOperator":"LO","crsCode":"WHC"},{"name":"Walthamstow Queen's Road","latitude":51.5815091919,"longitude":-0.023838128,"stationOperator":"LO","crsCode":"WMW"},{"name":"Wandsworth Road","latitude":51.4698826105,"longitude":-0.137665635,"stationOperator":"LO","crsCode":"WWR"},{"name":"Wanstead Park","latitude":51.5516982552,"longitude":0.0262219773,"stationOperator":"LO","crsCode":"WNP"},{"name":"Wapping","latitude":51.503718,"longitude":-0.05632,"stationOperator":"LO","crsCode":"WPE"},{"name":"Watford High Street","latitude":51.6526551364,"longitude":-0.3917136888,"stationOperator":"LO","crsCode":"WFH"},{"name":"West Croydon","latitude":51.3784284699,"longitude":-0.102581278,"stationOperator":"LO","crsCode":"WCY"},{"name":"West Hampstead","latitude":51.5474733358,"longitude":-0.1911817701,"stationOperator":"LO","crsCode":"WHD"},{"name":"White Hart Lane","latitude":51.6050441162,"longitude":-0.0709070371,"stationOperator":"LO","crsCode":"WHL"},{"name":"Willesden Junction","latitude":51.5320332397,"longitude":-0.2432670615,"stationOperator":"LO","crsCode":"WIJ"},{"name":"Wood Street","latitude":51.5867141926,"longitude":-0.00195833,"stationOperator":"LO","crsCode":"WST"},{"name":"Woodgrange Park","latitude":51.5487621436,"longitude":0.04513119,"stationOperator":"LO","crsCode":"WGR"},{"name":"Amersham","latitude":51.6742069133,"longitude":-0.607590127,"stationOperator":"LT","crsCode":"AMR"},{"name":"Barbican","latitude":51.5196864173,"longitude":-0.0974358805,"stationOperator":"LT","crsCode":"ZBB"},{"name":"Blackhorse Road","latitude":51.5862075528,"longitude":-0.0412458332,"stationOperator":"LT","crsCode":"BHO"},{"name":"Canada Water","latitude":51.498231,"longitude":-0.050791,"stationOperator":"LT","crsCode":"ZCW"},{"name":"Chalfont & Latimer","latitude":51.6681092656,"longitude":-0.5605191022,"stationOperator":"LT","crsCode":"CFO"},{"name":"Chorleywood","latitude":51.6542489506,"longitude":-0.5183116683,"stationOperator":"LT","crsCode":"CLW"},{"name":"Elephant & Castle (Underground)","latitude":51.294506,"longitude":0.060266,"stationOperator":"LT","crsCode":"ZEL"},{"name":"Greenford","latitude":51.542318953,"longitude":-0.3445415183,"stationOperator":"LT","crsCode":"GFD"},{"name":"Gunnersbury","latitude":51.4918691216,"longitude":-0.2757834472,"stationOperator":"LT","crsCode":"GUN"},{"name":"Harlesden","latitude":51.5365728794,"longitude":-0.2582328517,"stationOperator":"LT","crsCode":"HDN"},{"name":"Harrow & Wealdstone","latitude":51.5916203758,"longitude":-0.3340730185,"stationOperator":"LT","crsCode":"HRW"},{"name":"Harrow-on-the-Hill","latitude":51.5790671372,"longitude":-0.3359898856,"stationOperator":"LT","crsCode":"HOH"},{"name":"Highbury & Islington","latitude":51.546739948,"longitude":-0.1020766012,"stationOperator":"LT","crsCode":"HHY"},{"name":"Kensal Green","latitude":51.5306617884,"longitude":-0.2238558628,"stationOperator":"LT","crsCode":"KNL"},{"name":"Kentish Town","latitude":51.5500363746,"longitude":-0.1394420761,"stationOperator":"LT","crsCode":"KTN"},{"name":"Kenton","latitude":51.5814960199,"longitude":-0.3171373274,"stationOperator":"LT","crsCode":"KNT"},{"name":"Kew Gardens","latitude":51.4776154969,"longitude":-0.2849616483,"stationOperator":"LT","crsCode":"KWG"},{"name":"Moorgate","latitude":51.519563,"longitude":-0.09024,"stationOperator":"LT","crsCode":"MOG"},{"name":"North Wembley","latitude":51.5626022528,"longitude":-0.3039843835,"stationOperator":"LT","crsCode":"NWB"},{"name":"Queens Park (London)","latitude":51.5339715337,"longitude":-0.2049825011,"stationOperator":"LT","crsCode":"QPW"},{"name":"Rickmansworth","latitude":51.6402466027,"longitude":-0.4732729561,"stationOperator":"LT","crsCode":"RIC"},{"name":"South Kenton","latitude":51.570220608,"longitude":-0.3084627894,"stationOperator":"LT","crsCode":"SOK"},{"name":"South Ruislip","latitude":51.5569265569,"longitude":-0.3992477137,"stationOperator":"LT","crsCode":"SRU"},{"name":"Stonebridge Park","latitude":51.5441168147,"longitude":-0.2758280111,"stationOperator":"LT","crsCode":"SBP"},{"name":"Wembley Central","latitude":51.5523310827,"longitude":-0.2964185637,"stationOperator":"LT","crsCode":"WMB"},{"name":"West Brompton","latitude":51.4873327686,"longitude":-0.1954357105,"stationOperator":"LT","crsCode":"WBP"},{"name":"West Ham","latitude":51.5285764835,"longitude":0.0058754718,"stationOperator":"LT","crsCode":"WEH"},{"name":"West Ruislip","latitude":51.5697562213,"longitude":-0.4377576334,"stationOperator":"LT","crsCode":"WRU"},{"name":"Whitechapel","latitude":51.519467,"longitude":-0.059757122,"stationOperator":"LT","crsCode":"ZLW"},{"name":"Aigburth","latitude":53.3645833,"longitude":-2.927160737,"stationOperator":"ME","crsCode":"AIG"},{"name":"Ainsdale","latitude":53.60183287,"longitude":-3.042669326,"stationOperator":"ME","crsCode":"ANS"},{"name":"Aintree","latitude":53.47400907,"longitude":-2.956664741,"stationOperator":"ME","crsCode":"AIN"},{"name":"Aughton Park","latitude":53.55448798,"longitude":-2.895078195,"stationOperator":"ME","crsCode":"AUG"},{"name":"Bache","latitude":53.20933376,"longitude":-2.892360673,"stationOperator":"ME","crsCode":"BAC"},{"name":"Bank Hall","latitude":53.43780206,"longitude":-2.987464984,"stationOperator":"ME","crsCode":"BAH"},{"name":"Bebington","latitude":53.35767221,"longitude":-3.003642726,"stationOperator":"ME","crsCode":"BEB"},{"name":"Bidston","latitude":53.40914752,"longitude":-3.078570263,"stationOperator":"ME","crsCode":"BID"},{"name":"Birkdale","latitude":53.63353433,"longitude":-3.014715579,"stationOperator":"ME","crsCode":"BDL"},{"name":"Birkenhead Central","latitude":53.38900094,"longitude":-3.019416498,"stationOperator":"ME","crsCode":"BKC"},{"name":"Birkenhead Hamilton Square","latitude":53.39471293,"longitude":-3.013687789,"stationOperator":"ME","crsCode":"BKQ"},{"name":"Birkenhead North","latitude":53.40484222,"longitude":-3.057401666,"stationOperator":"ME","crsCode":"BKN"},{"name":"Birkenhead Park","latitude":53.3978198,"longitude":-3.039179402,"stationOperator":"ME","crsCode":"BKP"},{"name":"Blundellsands & Crosby","latitude":53.48769659,"longitude":-3.03986789,"stationOperator":"ME","crsCode":"BLN"},{"name":"Bootle New Strand","latitude":53.45301817,"longitude":-2.995347712,"stationOperator":"ME","crsCode":"BNW"},{"name":"Bootle Oriel Road","latitude":53.44762574,"longitude":-2.995221639,"stationOperator":"ME","crsCode":"BOT"},{"name":"Bromborough","latitude":53.32184733,"longitude":-2.987788553,"stationOperator":"ME","crsCode":"BOM"},{"name":"Bromborough Rake","latitude":53.32992372,"longitude":-2.989476735,"stationOperator":"ME","crsCode":"BMR"},{"name":"Brunswick","latitude":53.38217523,"longitude":-2.975653248,"stationOperator":"ME","crsCode":"BRW"},{"name":"Capenhurst","latitude":53.26018901,"longitude":-2.942291644,"stationOperator":"ME","crsCode":"CPU"},{"name":"Conway Park","latitude":53.39337776,"longitude":-3.022679178,"stationOperator":"ME","crsCode":"CNP"},{"name":"Cressington","latitude":53.35876717,"longitude":-2.912008275,"stationOperator":"ME","crsCode":"CSG"},{"name":"Eastham Rake","latitude":53.30759993,"longitude":-2.981171169,"stationOperator":"ME","crsCode":"ERA"},{"name":"Ellesmere Port","latitude":53.28220693,"longitude":-2.896427988,"stationOperator":"ME","crsCode":"ELP"},{"name":"Fazakerley","latitude":53.46878354,"longitude":-2.93545612,"stationOperator":"ME","crsCode":"FAZ"},{"name":"Formby","latitude":53.55349222,"longitude":-3.070916313,"stationOperator":"ME","crsCode":"FBY"},{"name":"Freshfield","latitude":53.56606861,"longitude":-3.071838001,"stationOperator":"ME","crsCode":"FRE"},{"name":"Green Lane","latitude":53.38327334,"longitude":-3.01642303,"stationOperator":"ME","crsCode":"GNL"},{"name":"Hall Road","latitude":53.49838894,"longitude":-3.050682508,"stationOperator":"ME","crsCode":"HLR"},{"name":"Hightown","latitude":53.52512005,"longitude":-3.057076334,"stationOperator":"ME","crsCode":"HTO"},{"name":"Hillside","latitude":53.62212307,"longitude":-3.024723262,"stationOperator":"ME","crsCode":"HIL"},{"name":"Hooton","latitude":53.29721539,"longitude":-2.977016928,"stationOperator":"ME","crsCode":"HOO"},{"name":"Hoylake","latitude":53.39022996,"longitude":-3.178843698,"stationOperator":"ME","crsCode":"HYK"},{"name":"Hunts Cross","latitude":53.36062783,"longitude":-2.854946075,"stationOperator":"ME","crsCode":"HNX"},{"name":"Kirkby (Merseyside)","latitude":53.48620351,"longitude":-2.902833396,"stationOperator":"ME","crsCode":"KIR"},{"name":"Kirkdale","latitude":53.4405479,"longitude":-2.981506598,"stationOperator":"ME","crsCode":"KKD"},{"name":"Leasowe","latitude":53.40805676,"longitude":-3.099603994,"stationOperator":"ME","crsCode":"LSW"},{"name":"Little Sutton","latitude":53.28553102,"longitude":-2.943299129,"stationOperator":"ME","crsCode":"LTT"},{"name":"Liverpool Central","latitude":53.40461053,"longitude":-2.979159936,"stationOperator":"ME","crsCode":"LVC"},{"name":"Liverpool James Street","latitude":53.40477452,"longitude":-2.991964872,"stationOperator":"ME","crsCode":"LVJ"},{"name":"Liverpool South Parkway","latitude":53.35758121,"longitude":-2.889294039,"stationOperator":"ME","crsCode":"LPY"},{"name":"Maghull","latitude":53.50648347,"longitude":-2.930857798,"stationOperator":"ME","crsCode":"MAG"},{"name":"Manor Road","latitude":53.39479742,"longitude":-3.171450295,"stationOperator":"ME","crsCode":"MNR"},{"name":"Meols","latitude":53.39945033,"longitude":-3.154281087,"stationOperator":"ME","crsCode":"MEO"},{"name":"Moorfields","latitude":53.40857308,"longitude":-2.989179871,"stationOperator":"ME","crsCode":"MRF"},{"name":"Moreton (Merseyside)","latitude":53.40793134,"longitude":-3.113140165,"stationOperator":"ME","crsCode":"MRT"},{"name":"New Brighton","latitude":53.43727598,"longitude":-3.049174288,"stationOperator":"ME","crsCode":"NBN"},{"name":"Old Roan","latitude":53.48690801,"longitude":-2.951077083,"stationOperator":"ME","crsCode":"ORN"},{"name":"Ormskirk","latitude":53.56896888,"longitude":-2.88179342,"stationOperator":"ME","crsCode":"OMS"},{"name":"Orrell Park","latitude":53.46191022,"longitude":-2.963321542,"stationOperator":"ME","crsCode":"OPK"},{"name":"Overpool","latitude":53.28414758,"longitude":-2.924818617,"stationOperator":"ME","crsCode":"OVE"},{"name":"Port Sunlight","latitude":53.3492693,"longitude":-2.99803707,"stationOperator":"ME","crsCode":"PSL"},{"name":"Rice Lane","latitude":53.45778328,"longitude":-2.962324455,"stationOperator":"ME","crsCode":"RIL"},{"name":"Rock Ferry","latitude":53.37289259,"longitude":-3.010914905,"stationOperator":"ME","crsCode":"RFY"},{"name":"Sandhills","latitude":53.42994809,"longitude":-2.991497322,"stationOperator":"ME","crsCode":"SDL"},{"name":"Seaforth & Litherland","latitude":53.46611293,"longitude":-3.005295121,"stationOperator":"ME","crsCode":"SFL"},{"name":"Southport","latitude":53.64652777,"longitude":-3.00244063,"stationOperator":"ME","crsCode":"SOP"},{"name":"Spital","latitude":53.33995485,"longitude":-2.993914447,"stationOperator":"ME","crsCode":"SPI"},{"name":"St Michaels","latitude":53.37561787,"longitude":-2.952804749,"stationOperator":"ME","crsCode":"STM"},{"name":"Town Green","latitude":53.54282147,"longitude":-2.904490485,"stationOperator":"ME","crsCode":"TWN"},{"name":"Wallasey Grove Road","latitude":53.42801467,"longitude":-3.069716325,"stationOperator":"ME","crsCode":"WLG"},{"name":"Wallasey Village","latitude":53.422896,"longitude":-3.069136355,"stationOperator":"ME","crsCode":"WLV"},{"name":"Walton (Merseyside)","latitude":53.45622746,"longitude":-2.965753228,"stationOperator":"ME","crsCode":"WAO"},{"name":"Waterloo (Merseyside)","latitude":53.47496593,"longitude":-3.025543946,"stationOperator":"ME","crsCode":"WLO"},{"name":"West Kirby","latitude":53.37319127,"longitude":-3.183769494,"stationOperator":"ME","crsCode":"WKI"},{"name":"Birmingham New Street","latitude":52.47819419,"longitude":-1.898360826,"stationOperator":"NR","crsCode":"BHM"},{"name":"Bristol Temple Meads","latitude":51.44914299,"longitude":-2.581322795,"stationOperator":"NR","crsCode":"BRI"},{"name":"Edinburgh","latitude":55.95238716,"longitude":-3.188221921,"stationOperator":"NR","crsCode":"EDB"},{"name":"Glasgow Central","latitude":55.85974143,"longitude":-4.257636004,"stationOperator":"NR","crsCode":"GLC"},{"name":"Leeds","latitude":53.79489697,"longitude":-1.547435079,"stationOperator":"NR","crsCode":"LDS"},{"name":"Liverpool Lime Street","latitude":53.40731898,"longitude":-2.977732837,"stationOperator":"NR","crsCode":"LIV"},{"name":"London Bridge","latitude":51.50509647,"longitude":-0.085060385,"stationOperator":"NR","crsCode":"LBG"},{"name":"London Cannon Street","latitude":51.51058265,"longitude":-0.090609398,"stationOperator":"NR","crsCode":"CST"},{"name":"London Charing Cross","latitude":51.50768803,"longitude":-0.124105728,"stationOperator":"NR","crsCode":"CHX"},{"name":"London Euston","latitude":51.52837626,"longitude":-0.134558479,"stationOperator":"NR","crsCode":"EUS"},{"name":"London Kings Cross","latitude":51.53088842,"longitude":-0.122921342,"stationOperator":"NR","crsCode":"KGX"},{"name":"London Liverpool Street","latitude":51.51802304,"longitude":-0.081995697,"stationOperator":"NR","crsCode":"LST"},{"name":"London Paddington","latitude":51.51645141,"longitude":-0.176844743,"stationOperator":"NR","crsCode":"PAD"},{"name":"London St Pancras International","latitude":51.53062434,"longitude":-0.125527439,"stationOperator":"NR","crsCode":"STP"},{"name":"London Victoria","latitude":51.49526139,"longitude":-0.144540593,"stationOperator":"NR","crsCode":"VIC"},{"name":"London Waterloo","latitude":51.503507,"longitude":-0.113897,"stationOperator":"NR","crsCode":"WAT"},{"name":"Manchester Piccadilly","latitude":53.47671998,"longitude":-2.228977818,"stationOperator":"NR","crsCode":"MAN"},{"name":"Reading","latitude":51.45878189,"longitude":-0.971854374,"stationOperator":"NR","crsCode":"RDG"},{"name":"Stratford International","latitude":51.545037,"longitude":-0.008613,"stationOperator":"NR","crsCode":"SFA"},{"name":"Accrington","latitude":53.7532,"longitude":-2.37001,"stationOperator":"NT","crsCode":"ACR"},{"name":"Acklington","latitude":55.3071,"longitude":-1.65184,"stationOperator":"NT","crsCode":"ACK"},{"name":"Adlington (Cheshire)","latitude":53.31957,"longitude":-2.13356,"stationOperator":"NT","crsCode":"ADC"},{"name":"Adlington (Lancs)","latitude":53.6129455,"longitude":-2.603061143,"stationOperator":"NT","crsCode":"ADL"},{"name":"Adwick","latitude":53.57302304,"longitude":-1.181475098,"stationOperator":"NT","crsCode":"AWK"},{"name":"Alderley Edge","latitude":53.30379521,"longitude":-2.236800428,"stationOperator":"NT","crsCode":"ALD"},{"name":"Allens West","latitude":54.52411689,"longitude":-1.36342611,"stationOperator":"NT","crsCode":"ALW"},{"name":"Alnmouth","latitude":55.39241161,"longitude":-1.636879701,"stationOperator":"NT","crsCode":"ALM"},{"name":"Althorpe","latitude":53.58528974,"longitude":-0.732586396,"stationOperator":"NT","crsCode":"ALP"},{"name":"Altrincham","latitude":53.3874545,"longitude":-2.347281454,"stationOperator":"NT","crsCode":"ALT"},{"name":"Ansdell & Fairhaven","latitude":53.74157235,"longitude":-2.993056487,"stationOperator":"NT","crsCode":"AFV"},{"name":"Apperley Bridge","latitude":53.84138,"longitude":1.703065,"stationOperator":"NT","crsCode":"APY"},{"name":"Appleby","latitude":54.58035366,"longitude":-2.486692409,"stationOperator":"NT","crsCode":"APP"},{"name":"Appley Bridge","latitude":53.578696,"longitude":-2.719239,"stationOperator":"NT","crsCode":"APB"},{"name":"Ardwick","latitude":53.4713637,"longitude":-2.21388356,"stationOperator":"NT","crsCode":"ADK"},{"name":"Armathwaite","latitude":54.8091136,"longitude":-2.771682007,"stationOperator":"NT","crsCode":"AWT"},{"name":"Arram","latitude":53.88458217,"longitude":-0.42685721,"stationOperator":"NT","crsCode":"ARR"},{"name":"Ashburys","latitude":53.47139715,"longitude":-2.194298663,"stationOperator":"NT","crsCode":"ABY"},{"name":"Ashley","latitude":53.35601141,"longitude":-2.341015897,"stationOperator":"NT","crsCode":"ASY"},{"name":"Ashton-under-Lyne","latitude":53.49128474,"longitude":-2.093404009,"stationOperator":"NT","crsCode":"AHN"},{"name":"Askam","latitude":54.18904409,"longitude":-3.204522253,"stationOperator":"NT","crsCode":"ASK"},{"name":"Aspatria","latitude":54.75932254,"longitude":-3.331737575,"stationOperator":"NT","crsCode":"ASP"},{"name":"Atherton","latitude":53.52901633,"longitude":-2.478177715,"stationOperator":"NT","crsCode":"ATN"},{"name":"Baildon","latitude":53.84969683,"longitude":-1.753714588,"stationOperator":"NT","crsCode":"BLD"},{"name":"Bamber Bridge","latitude":53.72678683,"longitude":-2.660769189,"stationOperator":"NT","crsCode":"BMB"},{"name":"Bamford","latitude":53.33901464,"longitude":-1.689082177,"stationOperator":"NT","crsCode":"BAM"},{"name":"Bardon Mill","latitude":54.97449387,"longitude":-2.346497864,"stationOperator":"NT","crsCode":"BLL"},{"name":"Bare Lane","latitude":54.07533066,"longitude":-2.835940378,"stationOperator":"NT","crsCode":"BAR"},{"name":"Barnsley","latitude":53.55462662,"longitude":-1.477078446,"stationOperator":"NT","crsCode":"BNY"},{"name":"Barrow Haven","latitude":53.6971445,"longitude":-0.391442806,"stationOperator":"NT","crsCode":"BAV"},{"name":"Barton-on-Humber","latitude":53.68883974,"longitude":-0.443251195,"stationOperator":"NT","crsCode":"BAU"},{"name":"Batley","latitude":53.70914805,"longitude":-1.622728738,"stationOperator":"NT","crsCode":"BTL"},{"name":"Battersby","latitude":54.45768979,"longitude":-1.092979104,"stationOperator":"NT","crsCode":"BTT"},{"name":"Belle Vue","latitude":53.46216055,"longitude":-2.180399301,"stationOperator":"NT","crsCode":"BLV"},{"name":"Bempton","latitude":54.12829569,"longitude":-0.180427625,"stationOperator":"NT","crsCode":"BEM"},{"name":"Ben Rhydding","latitude":53.92617737,"longitude":-1.79742789,"stationOperator":"NT","crsCode":"BEY"},{"name":"Bentham","latitude":54.11579786,"longitude":-2.510912928,"stationOperator":"NT","crsCode":"BEN"},{"name":"Bentley (South Yorks)","latitude":53.54369067,"longitude":-1.15155621,"stationOperator":"NT","crsCode":"BYK"},{"name":"Berry Brow","latitude":53.62105489,"longitude":-1.79343383,"stationOperator":"NT","crsCode":"BBW"},{"name":"Bescar Lane","latitude":53.62355392,"longitude":-2.914683023,"stationOperator":"NT","crsCode":"BES"},{"name":"Beverley","latitude":53.84230315,"longitude":-0.42388287,"stationOperator":"NT","crsCode":"BEV"},{"name":"Billingham (Cleveland)","latitude":54.60632344,"longitude":-1.278542318,"stationOperator":"NT","crsCode":"BIL"},{"name":"Bingley","latitude":53.84840967,"longitude":-1.836944749,"stationOperator":"NT","crsCode":"BIY"},{"name":"Bishop Auckland","latitude":54.65747215,"longitude":-1.677565289,"stationOperator":"NT","crsCode":"BIA"},{"name":"Blackburn","latitude":53.74652637,"longitude":-2.479127511,"stationOperator":"NT","crsCode":"BBN"},{"name":"Blackpool North","latitude":53.82192857,"longitude":-3.049280829,"stationOperator":"NT","crsCode":"BPN"},{"name":"Blackpool Pleasure Beach","latitude":53.78824428,"longitude":-3.053813568,"stationOperator":"NT","crsCode":"BPB"},{"name":"Blackpool South","latitude":53.7986229,"longitude":-3.049063314,"stationOperator":"NT","crsCode":"BPS"},{"name":"Blackrod","latitude":53.59153702,"longitude":-2.569533036,"stationOperator":"NT","crsCode":"BLK"},{"name":"Blaydon","latitude":54.96578715,"longitude":-1.712587399,"stationOperator":"NT","crsCode":"BLO"},{"name":"Bolton","latitude":53.57415749,"longitude":-2.42582971,"stationOperator":"NT","crsCode":"BON"},{"name":"Bolton-Upon-Dearne","latitude":53.51901464,"longitude":-1.312227491,"stationOperator":"NT","crsCode":"BTD"},{"name":"Bootle (Cumbria)","latitude":54.29035629,"longitude":-3.394902231,"stationOperator":"NT","crsCode":"BOC"},{"name":"Bradford Forster Square","latitude":53.79693456,"longitude":-1.752961084,"stationOperator":"NT","crsCode":"BDQ"},{"name":"Bradford Interchange","latitude":53.79108522,"longitude":-1.749595186,"stationOperator":"NT","crsCode":"BDI"},{"name":"Bramhall","latitude":53.35998386,"longitude":-2.162236693,"stationOperator":"NT","crsCode":"BML"},{"name":"Bramley (W Yorks)","latitude":53.80599077,"longitude":-1.63810801,"stationOperator":"NT","crsCode":"BLE"},{"name":"Brampton (Cumbria)","latitude":54.93263673,"longitude":-2.703813718,"stationOperator":"NT","crsCode":"BMP"},{"name":"Braystones (Cumbria)","latitude":54.43954367,"longitude":-3.543374836,"stationOperator":"NT","crsCode":"BYS"},{"name":"Bredbury","latitude":53.42296542,"longitude":-2.109807325,"stationOperator":"NT","crsCode":"BDY"},{"name":"Bridlington","latitude":54.08414656,"longitude":-0.198719149,"stationOperator":"NT","crsCode":"BDT"},{"name":"Brierfield","latitude":53.82454874,"longitude":-2.236946834,"stationOperator":"NT","crsCode":"BRF"},{"name":"Brigg","latitude":53.54916351,"longitude":-0.48611936,"stationOperator":"NT","crsCode":"BGG"},{"name":"Brighouse","latitude":53.69821366,"longitude":-1.779439708,"stationOperator":"NT","crsCode":"BGH"},{"name":"Brinnington","latitude":53.43103407,"longitude":-2.130899716,"stationOperator":"NT","crsCode":"BNT"},{"name":"Broad Green","latitude":53.40618138,"longitude":-2.893466308,"stationOperator":"NT","crsCode":"BGE"},{"name":"Broadbottom","latitude":53.44099228,"longitude":-2.016514951,"stationOperator":"NT","crsCode":"BDB"},{"name":"Brockholes","latitude":53.59716619,"longitude":-1.770295861,"stationOperator":"NT","crsCode":"BHS"},{"name":"Bromley Cross (Lancs)","latitude":53.61376394,"longitude":-2.409600356,"stationOperator":"NT","crsCode":"BMC"},{"name":"Broomfleet","latitude":53.74015046,"longitude":-0.673345968,"stationOperator":"NT","crsCode":"BMF"},{"name":"Bryn","latitude":53.49945144,"longitude":-2.648183788,"stationOperator":"NT","crsCode":"BYN"},{"name":"Buckshaw Parkway","latitude":53.672825,"longitude":-2.66447,"stationOperator":"NT","crsCode":"BSV"},{"name":"Burley Park","latitude":53.81217572,"longitude":-1.577912469,"stationOperator":"NT","crsCode":"BUY"},{"name":"Burley-in-Wharfedale","latitude":53.90838882,"longitude":-1.753521668,"stationOperator":"NT","crsCode":"BUW"},{"name":"Burnage","latitude":53.42192326,"longitude":-2.215140157,"stationOperator":"NT","crsCode":"BNA"},{"name":"Burnley Barracks","latitude":53.79124886,"longitude":-2.258010878,"stationOperator":"NT","crsCode":"BUB"},{"name":"Burnley Central","latitude":53.79352327,"longitude":-2.244969486,"stationOperator":"NT","crsCode":"BNC"},{"name":"Burnley Manchester Road","latitude":53.78497641,"longitude":-2.248865862,"stationOperator":"NT","crsCode":"BYM"},{"name":"Burscough Bridge","latitude":53.60521267,"longitude":-2.841741809,"stationOperator":"NT","crsCode":"BCB"},{"name":"Burscough Junction","latitude":53.59803326,"longitude":-2.840087989,"stationOperator":"NT","crsCode":"BCJ"},{"name":"Buxton","latitude":53.26074338,"longitude":-1.912870681,"stationOperator":"NT","crsCode":"BUX"},{"name":"Cark & Cartmel","latitude":54.17756612,"longitude":-2.972830022,"stationOperator":"NT","crsCode":"CAK"},{"name":"Castleford","latitude":53.72409345,"longitude":-1.354656247,"stationOperator":"NT","crsCode":"CFD"},{"name":"Castleton (Manchester)","latitude":53.5918608,"longitude":-2.178231774,"stationOperator":"NT","crsCode":"CAS"},{"name":"Castleton Moor","latitude":54.46728813,"longitude":-0.946647941,"stationOperator":"NT","crsCode":"CSM"},{"name":"Cattal","latitude":53.99749566,"longitude":-1.319772686,"stationOperator":"NT","crsCode":"CTL"},{"name":"Chapel-en-le-Frith","latitude":53.31224546,"longitude":-1.918769577,"stationOperator":"NT","crsCode":"CEF"},{"name":"Chapeltown (South Yorks)","latitude":53.46235417,"longitude":-1.466268507,"stationOperator":"NT","crsCode":"CLN"},{"name":"Chassen Road","latitude":53.44617874,"longitude":-2.368237145,"stationOperator":"NT","crsCode":"CSR"},{"name":"Chathill","latitude":55.53672988,"longitude":-1.706378108,"stationOperator":"NT","crsCode":"CHT"},{"name":"Cheadle Hulme","latitude":53.37594578,"longitude":-2.188302225,"stationOperator":"NT","crsCode":"CHU"},{"name":"Chelford (Cheshire)","latitude":53.27086569,"longitude":-2.279608703,"stationOperator":"NT","crsCode":"CEL"},{"name":"Cherry Tree","latitude":53.7328804,"longitude":-2.518385495,"stationOperator":"NT","crsCode":"CYT"},{"name":"Chester-le-Street","latitude":54.85459856,"longitude":-1.578018751,"stationOperator":"NT","crsCode":"CLS"},{"name":"Chinley","latitude":53.34030561,"longitude":-1.944399045,"stationOperator":"NT","crsCode":"CLY"},{"name":"Chorley","latitude":53.65255337,"longitude":-2.626775381,"stationOperator":"NT","crsCode":"CRL"},{"name":"Church & Oswaldtwistle","latitude":53.75035199,"longitude":-2.390909816,"stationOperator":"NT","crsCode":"CTW"},{"name":"Church Fenton","latitude":53.82633993,"longitude":-1.227441339,"stationOperator":"NT","crsCode":"CHF"},{"name":"Clapham (North Yorkshire)","latitude":54.10539906,"longitude":-2.409841839,"stationOperator":"NT","crsCode":"CPY"},{"name":"Clifton (Manchester)","latitude":53.52223401,"longitude":-2.314143209,"stationOperator":"NT","crsCode":"CLI"},{"name":"Clitheroe","latitude":53.87347985,"longitude":-2.394338568,"stationOperator":"NT","crsCode":"CLH"},{"name":"Colne","latitude":53.85484616,"longitude":-2.1811716,"stationOperator":"NT","crsCode":"CNE"},{"name":"Commondale","latitude":54.48182216,"longitude":-0.974983944,"stationOperator":"NT","crsCode":"COM"},{"name":"Congleton","latitude":53.15787409,"longitude":-2.192581008,"stationOperator":"NT","crsCode":"CNG"},{"name":"Conisbrough","latitude":53.48932729,"longitude":-1.234332884,"stationOperator":"NT","crsCode":"CNS"},{"name":"Cononley","latitude":53.91726977,"longitude":-2.011236378,"stationOperator":"NT","crsCode":"CEY"},{"name":"Corbridge","latitude":54.96630507,"longitude":-2.018556061,"stationOperator":"NT","crsCode":"CRB"},{"name":"Corkickle","latitude":54.54167907,"longitude":-3.582164579,"stationOperator":"NT","crsCode":"CKL"},{"name":"Cottingham","latitude":53.78166481,"longitude":-0.406425104,"stationOperator":"NT","crsCode":"CGM"},{"name":"Cottingley","latitude":53.76783456,"longitude":-1.587702959,"stationOperator":"NT","crsCode":"COT"},{"name":"Cramlington","latitude":55.0877699,"longitude":-1.598597623,"stationOperator":"NT","crsCode":"CRM"},{"name":"Cross Gates","latitude":53.80491752,"longitude":-1.450295749,"stationOperator":"NT","crsCode":"CRG"},{"name":"Crossflatts","latitude":53.85847792,"longitude":-1.844887769,"stationOperator":"NT","crsCode":"CFL"},{"name":"Croston","latitude":53.66756883,"longitude":-2.77774904,"stationOperator":"NT","crsCode":"CSO"},{"name":"Crowle","latitude":53.58975345,"longitude":-0.81736252,"stationOperator":"NT","crsCode":"CWE"},{"name":"Cuddington","latitude":53.23993338,"longitude":-2.59930339,"stationOperator":"NT","crsCode":"CUD"},{"name":"Daisy Hill","latitude":53.53946635,"longitude":-2.515868885,"stationOperator":"NT","crsCode":"DSY"},{"name":"Dalston (Cumbria)","latitude":54.84617418,"longitude":-2.988848877,"stationOperator":"NT","crsCode":"DLS"},{"name":"Dalton (Cumbria)","latitude":54.15424234,"longitude":-3.179010182,"stationOperator":"NT","crsCode":"DLT"},{"name":"Danby","latitude":54.46643039,"longitude":-0.910719291,"stationOperator":"NT","crsCode":"DNY"},{"name":"Darnall","latitude":53.38111164,"longitude":-1.410652924,"stationOperator":"NT","crsCode":"DAN"},{"name":"Darton","latitude":53.58838039,"longitude":-1.531651865,"stationOperator":"NT","crsCode":"DRT"},{"name":"Darwen","latitude":53.69804478,"longitude":-2.464945018,"stationOperator":"NT","crsCode":"DWN"},{"name":"Davenport","latitude":53.39082838,"longitude":-2.152579926,"stationOperator":"NT","crsCode":"DVN"},{"name":"Deansgate","latitude":53.47409585,"longitude":-2.251066103,"stationOperator":"NT","crsCode":"DGT"},{"name":"Deighton","latitude":53.66885819,"longitude":-1.75219726,"stationOperator":"NT","crsCode":"DHN"},{"name":"Delamere","latitude":53.2287892,"longitude":-2.666559449,"stationOperator":"NT","crsCode":"DLM"},{"name":"Denby Dale","latitude":53.57264355,"longitude":-1.663208663,"stationOperator":"NT","crsCode":"DBD"},{"name":"Dent","latitude":54.28241606,"longitude":-2.363597216,"stationOperator":"NT","crsCode":"DNT"},{"name":"Denton","latitude":53.45692242,"longitude":-2.130226303,"stationOperator":"NT","crsCode":"DTN"},{"name":"Dinsdale","latitude":54.51473198,"longitude":-1.467067384,"stationOperator":"NT","crsCode":"DND"},{"name":"Dinting","latitude":53.44934927,"longitude":-1.970306404,"stationOperator":"NT","crsCode":"DTG"},{"name":"Disley","latitude":53.35819889,"longitude":-2.042476966,"stationOperator":"NT","crsCode":"DSL"},{"name":"Dodworth","latitude":53.54416241,"longitude":-1.530932801,"stationOperator":"NT","crsCode":"DOD"},{"name":"Dore & Totley","latitude":53.32746933,"longitude":-1.515445314,"stationOperator":"NT","crsCode":"DOR"},{"name":"Dove Holes","latitude":53.29981804,"longitude":-1.890433778,"stationOperator":"NT","crsCode":"DVH"},{"name":"Driffield","latitude":54.00154161,"longitude":-0.434671072,"stationOperator":"NT","crsCode":"DRF"},{"name":"Drigg","latitude":54.37696312,"longitude":-3.443410921,"stationOperator":"NT","crsCode":"DRI"},{"name":"Dronfield","latitude":53.30139118,"longitude":-1.46877279,"stationOperator":"NT","crsCode":"DRO"},{"name":"Dunston","latitude":54.95005031,"longitude":-1.641034364,"stationOperator":"NT","crsCode":"DOT"},{"name":"Eaglescliffe","latitude":54.52943483,"longitude":-1.349435972,"stationOperator":"NT","crsCode":"EAG"},{"name":"Earlestown","latitude":53.45114797,"longitude":-2.637660072,"stationOperator":"NT","crsCode":"ERL"},{"name":"East Didsbury","latitude":53.40932638,"longitude":-2.221996602,"stationOperator":"NT","crsCode":"EDY"},{"name":"East Garforth","latitude":53.7921293,"longitude":-1.370310799,"stationOperator":"NT","crsCode":"EGF"},{"name":"Eastrington","latitude":53.75517708,"longitude":-0.787632643,"stationOperator":"NT","crsCode":"EGN"},{"name":"Eccles (Manchester)","latitude":53.48537002,"longitude":-2.334517274,"stationOperator":"NT","crsCode":"ECC"},{"name":"Eccleston Park","latitude":53.43079708,"longitude":-2.780042527,"stationOperator":"NT","crsCode":"ECL"},{"name":"Edale","latitude":53.3648068,"longitude":-1.816330371,"stationOperator":"NT","crsCode":"EDL"},{"name":"Edge Hill","latitude":53.40262667,"longitude":-2.946488903,"stationOperator":"NT","crsCode":"EDG"},{"name":"Egton","latitude":54.43767437,"longitude":-0.761919873,"stationOperator":"NT","crsCode":"EGT"},{"name":"Elsecar","latitude":53.49867791,"longitude":-1.427415692,"stationOperator":"NT","crsCode":"ELR"},{"name":"Entwistle","latitude":53.65599298,"longitude":-2.414548972,"stationOperator":"NT","crsCode":"ENT"},{"name":"Euxton Balshaw Lane","latitude":53.67007956,"longitude":-2.6750181,"stationOperator":"NT","crsCode":"EBA"},{"name":"Fairfield","latitude":53.47146764,"longitude":-2.144582995,"stationOperator":"NT","crsCode":"FRF"},{"name":"Farnworth","latitude":53.55001733,"longitude":-2.387853772,"stationOperator":"NT","crsCode":"FNW"},{"name":"Featherstone","latitude":53.67872705,"longitude":-1.359437598,"stationOperator":"NT","crsCode":"FEA"},{"name":"Ferriby","latitude":53.71716886,"longitude":-0.507824927,"stationOperator":"NT","crsCode":"FRY"},{"name":"Filey","latitude":54.20986844,"longitude":-0.293850452,"stationOperator":"NT","crsCode":"FIL"},{"name":"Fitzwilliam","latitude":53.63251073,"longitude":-1.373597322,"stationOperator":"NT","crsCode":"FZW"},{"name":"Flimby","latitude":54.68968694,"longitude":-3.521048022,"stationOperator":"NT","crsCode":"FLM"},{"name":"Flixton","latitude":53.4439722,"longitude":-2.383876093,"stationOperator":"NT","crsCode":"FLI"},{"name":"Flowery Field","latitude":53.46164017,"longitude":-2.080837509,"stationOperator":"NT","crsCode":"FLF"},{"name":"Foxfield","latitude":54.25876643,"longitude":-3.216071991,"stationOperator":"NT","crsCode":"FOX"},{"name":"Frizinghall","latitude":53.81952623,"longitude":-1.768625862,"stationOperator":"NT","crsCode":"FZH"},{"name":"Furness Vale","latitude":53.3487676,"longitude":-1.98883855,"stationOperator":"NT","crsCode":"FNV"},{"name":"Gainsborough Central","latitude":53.3996081,"longitude":-0.769697538,"stationOperator":"NT","crsCode":"GNB"},{"name":"Garforth","latitude":53.79622636,"longitude":-1.382091266,"stationOperator":"NT","crsCode":"GRF"},{"name":"Gargrave","latitude":53.97842348,"longitude":-2.105163634,"stationOperator":"NT","crsCode":"GGV"},{"name":"Garsdale","latitude":54.32134985,"longitude":-2.325888923,"stationOperator":"NT","crsCode":"GSD"},{"name":"Garswood","latitude":53.48853256,"longitude":-2.672132133,"stationOperator":"NT","crsCode":"GSW"},{"name":"Gathurst","latitude":53.55941698,"longitude":-2.694390961,"stationOperator":"NT","crsCode":"GST"},{"name":"Gatley","latitude":53.39332787,"longitude":-2.230635305,"stationOperator":"NT","crsCode":"GTY"},{"name":"Giggleswick","latitude":54.06167264,"longitude":-2.303990955,"stationOperator":"NT","crsCode":"GIG"},{"name":"Gilberdyke","latitude":53.74797918,"longitude":-0.732244137,"stationOperator":"NT","crsCode":"GBD"},{"name":"Glaisdale","latitude":54.43943633,"longitude":-0.793939477,"stationOperator":"NT","crsCode":"GLS"},{"name":"Glasshoughton","latitude":53.70919278,"longitude":-1.34185485,"stationOperator":"NT","crsCode":"GLH"},{"name":"Glazebrook","latitude":53.42842041,"longitude":-2.460492629,"stationOperator":"NT","crsCode":"GLZ"},{"name":"Glossop","latitude":53.44448819,"longitude":-1.949080993,"stationOperator":"NT","crsCode":"GLO"},{"name":"Godley","latitude":53.45172242,"longitude":-2.054767562,"stationOperator":"NT","crsCode":"GDL"},{"name":"Goldthorpe","latitude":53.53340407,"longitude":-1.313503115,"stationOperator":"NT","crsCode":"GOE"},{"name":"Goole","latitude":53.70492908,"longitude":-0.874218535,"stationOperator":"NT","crsCode":"GOO"},{"name":"Goostrey","latitude":53.22257407,"longitude":-2.326474795,"stationOperator":"NT","crsCode":"GTR"},{"name":"Gorton","latitude":53.46874156,"longitude":-2.167170456,"stationOperator":"NT","crsCode":"GTO"},{"name":"Goxhill","latitude":53.67671563,"longitude":-0.337125453,"stationOperator":"NT","crsCode":"GOX"},{"name":"Great Ayton","latitude":54.48931943,"longitude":-1.116362099,"stationOperator":"NT","crsCode":"GTA"},{"name":"Great Coates","latitude":53.57577255,"longitude":-0.130229747,"stationOperator":"NT","crsCode":"GCT"},{"name":"Green Road","latitude":54.24453345,"longitude":-3.245579599,"stationOperator":"NT","crsCode":"GNR"},{"name":"Greenbank","latitude":53.2515743,"longitude":-2.533067977,"stationOperator":"NT","crsCode":"GBK"},{"name":"Greenfield","latitude":53.53913992,"longitude":-2.014440599,"stationOperator":"NT","crsCode":"GNF"},{"name":"Grimsby Docks","latitude":53.57433986,"longitude":-0.075615006,"stationOperator":"NT","crsCode":"GMD"},{"name":"Grindleford","latitude":53.30558428,"longitude":-1.626295445,"stationOperator":"NT","crsCode":"GRN"},{"name":"Grosmont","latitude":54.43612153,"longitude":-0.724962522,"stationOperator":"NT","crsCode":"GMT"},{"name":"Guide Bridge","latitude":53.47464705,"longitude":-2.113707335,"stationOperator":"NT","crsCode":"GUI"},{"name":"Guiseley","latitude":53.87594659,"longitude":-1.715077862,"stationOperator":"NT","crsCode":"GSY"},{"name":"Gypsy Lane","latitude":54.53289438,"longitude":-1.179386125,"stationOperator":"NT","crsCode":"GYP"},{"name":"Habrough","latitude":53.60553503,"longitude":-0.267975846,"stationOperator":"NT","crsCode":"HAB"},{"name":"Hadfield","latitude":53.46076361,"longitude":-1.965328098,"stationOperator":"NT","crsCode":"HDF"},{"name":"Hag Fold","latitude":53.53386541,"longitude":-2.494828846,"stationOperator":"NT","crsCode":"HGF"},{"name":"Hale (Manchester)","latitude":53.37873505,"longitude":-2.347360839,"stationOperator":"NT","crsCode":"HAL"},{"name":"Halewood","latitude":53.36533326,"longitude":-2.824983416,"stationOperator":"NT","crsCode":"HED"},{"name":"Halifax","latitude":53.72043967,"longitude":-1.854488705,"stationOperator":"NT","crsCode":"HFX"},{"name":"Hall-i'-th'-Wood","latitude":53.59756945,"longitude":-2.413976805,"stationOperator":"NT","crsCode":"HID"},{"name":"Haltwhistle","latitude":54.96784942,"longitude":-2.463561774,"stationOperator":"NT","crsCode":"HWH"},{"name":"Hammerton","latitude":53.99611366,"longitude":-1.283031759,"stationOperator":"NT","crsCode":"HMM"},{"name":"Handforth","latitude":53.34642025,"longitude":-2.213257748,"stationOperator":"NT","crsCode":"HTH"},{"name":"Hapton","latitude":53.78176047,"longitude":-2.316685364,"stationOperator":"NT","crsCode":"HPN"},{"name":"Harrington","latitude":54.61334851,"longitude":-3.565741262,"stationOperator":"NT","crsCode":"HRR"},{"name":"Harrogate","latitude":53.99319216,"longitude":-1.537615121,"stationOperator":"NT","crsCode":"HGT"},{"name":"Hartlepool","latitude":54.68676301,"longitude":-1.207310059,"stationOperator":"NT","crsCode":"HPL"},{"name":"Hatfield & Stainforth","latitude":53.58892124,"longitude":-1.024047613,"stationOperator":"NT","crsCode":"HFS"},{"name":"Hathersage","latitude":53.32578602,"longitude":-1.651192584,"stationOperator":"NT","crsCode":"HSG"},{"name":"Hattersley","latitude":53.44530123,"longitude":-2.040305376,"stationOperator":"NT","crsCode":"HTY"},{"name":"Haydon Bridge","latitude":54.97486058,"longitude":-2.247904442,"stationOperator":"NT","crsCode":"HDB"},{"name":"Hazel Grove","latitude":53.37756004,"longitude":-2.122016963,"stationOperator":"NT","crsCode":"HAZ"},{"name":"Headingley","latitude":53.81816231,"longitude":-1.593649517,"stationOperator":"NT","crsCode":"HDY"},{"name":"Heald Green","latitude":53.36974577,"longitude":-2.237421508,"stationOperator":"NT","crsCode":"HDG"},{"name":"Healing","latitude":53.5818177,"longitude":-0.160630049,"stationOperator":"NT","crsCode":"HLI"},{"name":"Heaton Chapel","latitude":53.42557835,"longitude":-2.17904046,"stationOperator":"NT","crsCode":"HTC"},{"name":"Hebden Bridge","latitude":53.73759649,"longitude":-2.00906594,"stationOperator":"NT","crsCode":"HBD"},{"name":"Heighington","latitude":54.59696718,"longitude":-1.582079768,"stationOperator":"NT","crsCode":"HEI"},{"name":"Hellifield","latitude":54.01087074,"longitude":-2.227841167,"stationOperator":"NT","crsCode":"HLD"},{"name":"Hensall","latitude":53.69855978,"longitude":-1.114515549,"stationOperator":"NT","crsCode":"HEL"},{"name":"Hessle","latitude":53.71759184,"longitude":-0.442189469,"stationOperator":"NT","crsCode":"HES"},{"name":"Heworth","latitude":54.95156601,"longitude":-1.555768445,"stationOperator":"NT","crsCode":"HEW"},{"name":"Hexham","latitude":54.97417725,"longitude":-2.095266842,"stationOperator":"NT","crsCode":"HEX"},{"name":"Heysham Port","latitude":54.03315438,"longitude":-2.91311509,"stationOperator":"NT","crsCode":"HHB"},{"name":"Hindley","latitude":53.54225044,"longitude":-2.575496114,"stationOperator":"NT","crsCode":"HIN"},{"name":"Holmes Chapel","latitude":53.19895238,"longitude":-2.351145128,"stationOperator":"NT","crsCode":"HCH"},{"name":"Honley","latitude":53.60824208,"longitude":-1.780966774,"stationOperator":"NT","crsCode":"HOY"},{"name":"Hope (Derbyshire)","latitude":53.3459425,"longitude":-1.728537541,"stationOperator":"NT","crsCode":"HOP"},{"name":"Hornbeam Park","latitude":53.97988387,"longitude":-1.526829388,"stationOperator":"NT","crsCode":"HBP"},{"name":"Horsforth","latitude":53.84758338,"longitude":-1.63060526,"stationOperator":"NT","crsCode":"HRS"},{"name":"Horton-in-Ribblesdale","latitude":54.14939839,"longitude":-2.302030471,"stationOperator":"NT","crsCode":"HIR"},{"name":"Horwich Parkway","latitude":53.57812052,"longitude":-2.539674261,"stationOperator":"NT","crsCode":"HWI"},{"name":"Hoscar","latitude":53.59738358,"longitude":-2.803809539,"stationOperator":"NT","crsCode":"HSC"},{"name":"Hough Green","latitude":53.37240964,"longitude":-2.775067325,"stationOperator":"NT","crsCode":"HGN"},{"name":"Howden","latitude":53.76455009,"longitude":-0.860699734,"stationOperator":"NT","crsCode":"HOW"},{"name":"Humphrey Park","latitude":53.45224781,"longitude":-2.32754077,"stationOperator":"NT","crsCode":"HUP"},{"name":"Huncoat","latitude":53.77215217,"longitude":-2.345896854,"stationOperator":"NT","crsCode":"HCT"},{"name":"Hunmanby","latitude":54.17429747,"longitude":-0.314773782,"stationOperator":"NT","crsCode":"HUB"},{"name":"Hutton Cranswick","latitude":53.95568032,"longitude":-0.433326239,"stationOperator":"NT","crsCode":"HUT"},{"name":"Huyton","latitude":53.40969455,"longitude":-2.842991769,"stationOperator":"NT","crsCode":"HUY"},{"name":"Hyde Central","latitude":53.45174912,"longitude":-2.085788017,"stationOperator":"NT","crsCode":"HYC"},{"name":"Hyde North","latitude":53.46433332,"longitude":-2.085813385,"stationOperator":"NT","crsCode":"HYT"},{"name":"Ilkley","latitude":53.92495813,"longitude":-1.822103587,"stationOperator":"NT","crsCode":"ILK"},{"name":"Ince & Elton","latitude":53.27676,"longitude":-2.816228123,"stationOperator":"NT","crsCode":"INE"},{"name":"Ince (Manchester)","latitude":53.53918986,"longitude":-2.61257527,"stationOperator":"NT","crsCode":"INC"},{"name":"Irlam","latitude":53.43481373,"longitude":-2.433467061,"stationOperator":"NT","crsCode":"IRL"},{"name":"James Cook","latitude":54.5515,"longitude":-1.2076,"stationOperator":"NT","crsCode":"JCH"},{"name":"Kearsley (Manchester)","latitude":53.54466284,"longitude":-2.375731616,"stationOperator":"NT","crsCode":"KSL"},{"name":"Keighley","latitude":53.86788507,"longitude":-1.901120783,"stationOperator":"NT","crsCode":"KEI"},{"name":"Kents Bank","latitude":54.1729079,"longitude":-2.925229232,"stationOperator":"NT","crsCode":"KBK"},{"name":"Kildale","latitude":54.47727129,"longitude":-1.067852562,"stationOperator":"NT","crsCode":"KLD"},{"name":"Kirk Sandall","latitude":53.56343733,"longitude":-1.074913037,"stationOperator":"NT","crsCode":"KKS"},{"name":"Kirkby Stephen","latitude":54.45512998,"longitude":-2.368596626,"stationOperator":"NT","crsCode":"KSW"},{"name":"Kirkby-in-Furness","latitude":54.23234259,"longitude":-3.188906344,"stationOperator":"NT","crsCode":"KBF"},{"name":"Kirkham & Wesham","latitude":53.78738537,"longitude":-2.881813597,"stationOperator":"NT","crsCode":"KKM"},{"name":"Kirton Lindsey","latitude":53.48485675,"longitude":-0.593911552,"stationOperator":"NT","crsCode":"KTL"},{"name":"Kiveton Bridge","latitude":53.34098096,"longitude":-1.267182571,"stationOperator":"NT","crsCode":"KIV"},{"name":"Kiveton Park","latitude":53.33678062,"longitude":-1.239500771,"stationOperator":"NT","crsCode":"KVP"},{"name":"Knaresborough","latitude":54.00877012,"longitude":-1.470501209,"stationOperator":"NT","crsCode":"KNA"},{"name":"Knottingley","latitude":53.70655284,"longitude":-1.259179166,"stationOperator":"NT","crsCode":"KNO"},{"name":"Knutsford","latitude":53.30198471,"longitude":-2.37209752,"stationOperator":"NT","crsCode":"KNF"},{"name":"Langho","latitude":53.80498135,"longitude":-2.447905464,"stationOperator":"NT","crsCode":"LHO"},{"name":"Langwathby","latitude":54.69435932,"longitude":-2.663688074,"stationOperator":"NT","crsCode":"LGW"},{"name":"Layton (Lancs)","latitude":53.8356395,"longitude":-3.030232722,"stationOperator":"NT","crsCode":"LAY"},{"name":"Lazonby & Kirkoswald","latitude":54.7502215,"longitude":-2.702200095,"stationOperator":"NT","crsCode":"LZB"},{"name":"Lea Green","latitude":53.42710585,"longitude":-2.72383801,"stationOperator":"NT","crsCode":"LEG"},{"name":"Lealholm","latitude":54.46060115,"longitude":-0.825714934,"stationOperator":"NT","crsCode":"LHM"},{"name":"Levenshulme","latitude":53.44443357,"longitude":-2.192670025,"stationOperator":"NT","crsCode":"LVM"},{"name":"Leyland","latitude":53.69886394,"longitude":-2.687141641,"stationOperator":"NT","crsCode":"LEY"},{"name":"Littleborough","latitude":53.64301072,"longitude":-2.094646493,"stationOperator":"NT","crsCode":"LTL"},{"name":"Lockwood","latitude":53.63461276,"longitude":-1.800642023,"stationOperator":"NT","crsCode":"LCK"},{"name":"Long Preston","latitude":54.01684584,"longitude":-2.255589281,"stationOperator":"NT","crsCode":"LPR"},{"name":"Longbeck","latitude":54.58922624,"longitude":-1.030941986,"stationOperator":"NT","crsCode":"LGK"},{"name":"Lostock","latitude":53.57299748,"longitude":-2.493775435,"stationOperator":"NT","crsCode":"LOT"},{"name":"Lostock Gralam","latitude":53.26767922,"longitude":-2.465211107,"stationOperator":"NT","crsCode":"LTG"},{"name":"Lostock Hall","latitude":53.72385234,"longitude":-2.687094284,"stationOperator":"NT","crsCode":"LOH"},{"name":"Lytham","latitude":53.7392924,"longitude":-2.964043873,"stationOperator":"NT","crsCode":"LTM"},{"name":"Manchester Oxford Road","latitude":53.47399664,"longitude":-2.242522887,"stationOperator":"NT","crsCode":"MCO"},{"name":"Manchester United Football Ground","latitude":53.4622129,"longitude":-2.290654777,"stationOperator":"NT","crsCode":"MUF"},{"name":"Manchester Victoria","latitude":53.48747956,"longitude":-2.242599788,"stationOperator":"NT","crsCode":"MCV"},{"name":"Manors","latitude":54.97276358,"longitude":-1.604744532,"stationOperator":"NT","crsCode":"MAS"},{"name":"Marple","latitude":53.40070996,"longitude":-2.057258911,"stationOperator":"NT","crsCode":"MPL"},{"name":"Marsden (Yorks)","latitude":53.60320016,"longitude":-1.930755584,"stationOperator":"NT","crsCode":"MSN"},{"name":"Marske","latitude":54.58742173,"longitude":-1.0189143,"stationOperator":"NT","crsCode":"MSK"},{"name":"Marton","latitude":54.54380222,"longitude":-1.197717189,"stationOperator":"NT","crsCode":"MTO"},{"name":"Maryport","latitude":54.71158569,"longitude":-3.494701885,"stationOperator":"NT","crsCode":"MRY"},{"name":"Mauldeth Road","latitude":53.43361928,"longitude":-2.20917839,"stationOperator":"NT","crsCode":"MAU"},{"name":"Meadowhall","latitude":53.41690227,"longitude":-1.41361886,"stationOperator":"NT","crsCode":"MHS"},{"name":"Menston","latitude":53.89235171,"longitude":-1.735508485,"stationOperator":"NT","crsCode":"MNN"},{"name":"Meols Cop","latitude":53.646167,"longitude":-2.975382686,"stationOperator":"NT","crsCode":"MEC"},{"name":"MetroCentre","latitude":54.9587475,"longitude":-1.665631298,"stationOperator":"NT","crsCode":"MCE"},{"name":"Mexborough","latitude":53.49101072,"longitude":-1.288564361,"stationOperator":"NT","crsCode":"MEX"},{"name":"Micklefield","latitude":53.78909282,"longitude":-1.324363018,"stationOperator":"NT","crsCode":"MIK"},{"name":"Middlewood","latitude":53.35997512,"longitude":-2.08334968,"stationOperator":"NT","crsCode":"MDL"},{"name":"Mill Hill (Lancs)","latitude":53.73546799,"longitude":-2.501741498,"stationOperator":"NT","crsCode":"MLH"},{"name":"Millom","latitude":54.21083074,"longitude":-3.271093719,"stationOperator":"NT","crsCode":"MLM"},{"name":"Mills Hill (Manchester)","latitude":53.55052249,"longitude":-2.17202063,"stationOperator":"NT","crsCode":"MIH"},{"name":"Mirfield","latitude":53.67159426,"longitude":-1.691785436,"stationOperator":"NT","crsCode":"MIR"},{"name":"Mobberley","latitude":53.32996527,"longitude":-2.333300348,"stationOperator":"NT","crsCode":"MOB"},{"name":"Moorside","latitude":53.51596879,"longitude":-2.352855774,"stationOperator":"NT","crsCode":"MSD"},{"name":"Moorthorpe","latitude":53.59446929,"longitude":-1.304958873,"stationOperator":"NT","crsCode":"MRP"},{"name":"Morecambe","latitude":54.07035269,"longitude":-2.869964906,"stationOperator":"NT","crsCode":"MCM"},{"name":"Morley","latitude":53.74994099,"longitude":-1.590971837,"stationOperator":"NT","crsCode":"MLY"},{"name":"Morpeth","latitude":55.1625058,"longitude":-1.682921137,"stationOperator":"NT","crsCode":"MPT"},{"name":"Moses Gate","latitude":53.55599573,"longitude":-2.401192526,"stationOperator":"NT","crsCode":"MSS"},{"name":"Moss Side","latitude":53.76444408,"longitude":-2.943532624,"stationOperator":"NT","crsCode":"MOS"},{"name":"Mossley (Manchester)","latitude":53.5146843,"longitude":-2.042180876,"stationOperator":"NT","crsCode":"MSL"},{"name":"Mossley Hill","latitude":53.37905641,"longitude":-2.915448411,"stationOperator":"NT","crsCode":"MSH"},{"name":"Moston","latitude":53.52265793,"longitude":-2.171907727,"stationOperator":"NT","crsCode":"MSO"},{"name":"Mouldsworth","latitude":53.23181982,"longitude":-2.732225441,"stationOperator":"NT","crsCode":"MLD"},{"name":"Mytholmroyd","latitude":53.72902055,"longitude":-1.981432246,"stationOperator":"NT","crsCode":"MYT"},{"name":"Nafferton","latitude":54.01169775,"longitude":-0.386978527,"stationOperator":"NT","crsCode":"NFN"},{"name":"Navigation Road","latitude":53.39546529,"longitude":-2.343587,"stationOperator":"NT","crsCode":"NVR"},{"name":"Nelson","latitude":53.83501859,"longitude":-2.213756609,"stationOperator":"NT","crsCode":"NEL"},{"name":"Nethertown","latitude":54.45695431,"longitude":-3.566398862,"stationOperator":"NT","crsCode":"NRT"},{"name":"New Clee","latitude":53.57446029,"longitude":-0.05914558,"stationOperator":"NT","crsCode":"NCE"},{"name":"New Holland","latitude":53.70193475,"longitude":-0.360203766,"stationOperator":"NT","crsCode":"NHL"},{"name":"New Lane","latitude":53.61132045,"longitude":-2.867559911,"stationOperator":"NT","crsCode":"NLN"},{"name":"New Mills Central","latitude":53.36485808,"longitude":-2.00566548,"stationOperator":"NT","crsCode":"NMC"},{"name":"New Mills Newtown","latitude":53.35964437,"longitude":-2.008519722,"stationOperator":"NT","crsCode":"NMN"},{"name":"New Pudsey","latitude":53.80449407,"longitude":-1.680789733,"stationOperator":"NT","crsCode":"NPD"},{"name":"Newton Aycliffe","latitude":54.61370904,"longitude":-1.589650446,"stationOperator":"NT","crsCode":"NAY"},{"name":"Newton for Hyde","latitude":53.45670495,"longitude":-2.066972742,"stationOperator":"NT","crsCode":"NWN"},{"name":"Newton-le-Willows","latitude":53.45307176,"longitude":-2.613594198,"stationOperator":"NT","crsCode":"NLW"},{"name":"Normanton","latitude":53.69990584,"longitude":-1.423491413,"stationOperator":"NT","crsCode":"NOR"},{"name":"North Road (Darlington)","latitude":54.53620358,"longitude":-1.553954408,"stationOperator":"NT","crsCode":"NRD"},{"name":"Northwich","latitude":53.26146564,"longitude":-2.496926038,"stationOperator":"NT","crsCode":"NWI"},{"name":"Nunthorpe","latitude":54.52788343,"longitude":-1.169442639,"stationOperator":"NT","crsCode":"NNT"},{"name":"Orrell","latitude":53.52993615,"longitude":-2.70929685,"stationOperator":"NT","crsCode":"ORR"},{"name":"Outwood","latitude":53.71503172,"longitude":-1.509941857,"stationOperator":"NT","crsCode":"OUT"},{"name":"Padgate","latitude":53.40580767,"longitude":-2.556805552,"stationOperator":"NT","crsCode":"PDG"},{"name":"Pannal","latitude":53.95833848,"longitude":-1.533459179,"stationOperator":"NT","crsCode":"PNL"},{"name":"Parbold","latitude":53.59095037,"longitude":-2.770600227,"stationOperator":"NT","crsCode":"PBL"},{"name":"Parton","latitude":54.56990389,"longitude":-3.582020124,"stationOperator":"NT","crsCode":"PRN"},{"name":"Patricroft","latitude":53.48512529,"longitude":-2.35697017,"stationOperator":"NT","crsCode":"PAT"},{"name":"Pegswood","latitude":55.17767637,"longitude":-1.644487291,"stationOperator":"NT","crsCode":"PEG"},{"name":"Pemberton","latitude":53.53034636,"longitude":-2.66932411,"stationOperator":"NT","crsCode":"PEM"},{"name":"Penistone","latitude":53.52552057,"longitude":-1.622552219,"stationOperator":"NT","crsCode":"PNS"},{"name":"Pleasington","latitude":53.73096858,"longitude":-2.544130993,"stationOperator":"NT","crsCode":"PLS"},{"name":"Plumley","latitude":53.27468889,"longitude":-2.419668513,"stationOperator":"NT","crsCode":"PLM"},{"name":"Pontefract Baghill","latitude":53.69189685,"longitude":-1.303355158,"stationOperator":"NT","crsCode":"PFR"},{"name":"Pontefract Monkhill","latitude":53.69908348,"longitude":-1.302630611,"stationOperator":"NT","crsCode":"PFM"},{"name":"Pontefract Tanshelf","latitude":53.6941436,"longitude":-1.318917563,"stationOperator":"NT","crsCode":"POT"},{"name":"Poppleton","latitude":53.97609158,"longitude":-1.148589239,"stationOperator":"NT","crsCode":"POP"},{"name":"Poulton-le-Fylde","latitude":53.84814637,"longitude":-2.990287393,"stationOperator":"NT","crsCode":"PFY"},{"name":"Poynton","latitude":53.35040033,"longitude":-2.134408257,"stationOperator":"NT","crsCode":"PYT"},{"name":"Prescot","latitude":53.42356928,"longitude":-2.799172819,"stationOperator":"NT","crsCode":"PSC"},{"name":"Prestbury","latitude":53.29339747,"longitude":-2.145481304,"stationOperator":"NT","crsCode":"PRB"},{"name":"Prudhoe","latitude":54.96614154,"longitude":-1.864859902,"stationOperator":"NT","crsCode":"PRU"},{"name":"Rainford","latitude":53.51711894,"longitude":-2.789469813,"stationOperator":"NT","crsCode":"RNF"},{"name":"Rainhill","latitude":53.4171322,"longitude":-2.766400942,"stationOperator":"NT","crsCode":"RNH"},{"name":"Ramsgreave & Wilpshire","latitude":53.78005445,"longitude":-2.478750546,"stationOperator":"NT","crsCode":"RGW"},{"name":"Ravenglass for Eskdale","latitude":54.35561861,"longitude":-3.408961525,"stationOperator":"NT","crsCode":"RAV"},{"name":"Ravensthorpe","latitude":53.6755404,"longitude":-1.655576289,"stationOperator":"NT","crsCode":"RVN"},{"name":"Rawcliffe","latitude":53.68905567,"longitude":-0.960855694,"stationOperator":"NT","crsCode":"RWC"},{"name":"Redcar British Steel","latitude":54.60989477,"longitude":-1.112668323,"stationOperator":"NT","crsCode":"RBS"},{"name":"Redcar Central","latitude":54.6162319,"longitude":-1.070873487,"stationOperator":"NT","crsCode":"RCC"},{"name":"Redcar East","latitude":54.60925751,"longitude":-1.052297613,"stationOperator":"NT","crsCode":"RCE"},{"name":"Reddish North","latitude":53.44943056,"longitude":-2.156253115,"stationOperator":"NT","crsCode":"RDN"},{"name":"Reddish South","latitude":53.43693407,"longitude":-2.157863127,"stationOperator":"NT","crsCode":"RDS"},{"name":"Ribblehead","latitude":54.20584998,"longitude":-2.360854841,"stationOperator":"NT","crsCode":"RHD"},{"name":"Riding Mill","latitude":54.94904894,"longitude":-1.970772673,"stationOperator":"NT","crsCode":"RDM"},{"name":"Rishton","latitude":53.76355579,"longitude":-2.420158645,"stationOperator":"NT","crsCode":"RIS"},{"name":"Roby","latitude":53.41005192,"longitude":-2.855936847,"stationOperator":"NT","crsCode":"ROB"},{"name":"Rochdale","latitude":53.61032152,"longitude":-2.153521182,"stationOperator":"NT","crsCode":"RCD"},{"name":"Romiley","latitude":53.4141736,"longitude":-2.089172777,"stationOperator":"NT","crsCode":"RML"},{"name":"Roose","latitude":54.11516949,"longitude":-3.194576777,"stationOperator":"NT","crsCode":"ROO"},{"name":"Rose Grove","latitude":53.78670009,"longitude":-2.28226806,"stationOperator":"NT","crsCode":"RSG"},{"name":"Rose Hill Marple","latitude":53.39611526,"longitude":-2.075900869,"stationOperator":"NT","crsCode":"RSH"},{"name":"Rotherham Central","latitude":53.43227009,"longitude":-1.360440012,"stationOperator":"NT","crsCode":"RMC"},{"name":"Rufford","latitude":53.63502533,"longitude":-2.806944757,"stationOperator":"NT","crsCode":"RUF"},{"name":"Ruswarp","latitude":54.47019987,"longitude":-0.627765603,"stationOperator":"NT","crsCode":"RUS"},{"name":"Ryder Brow","latitude":53.45713715,"longitude":-2.173450235,"stationOperator":"NT","crsCode":"RRB"},{"name":"Salford Central","latitude":53.48277848,"longitude":-2.255532721,"stationOperator":"NT","crsCode":"SFD"},{"name":"Salford Crescent","latitude":53.48659869,"longitude":-2.275750605,"stationOperator":"NT","crsCode":"SLD"},{"name":"Saltaire","latitude":53.83889296,"longitude":-1.791618606,"stationOperator":"NT","crsCode":"SAE"},{"name":"Saltburn","latitude":54.58345549,"longitude":-0.974136266,"stationOperator":"NT","crsCode":"SLB"},{"name":"Saltmarshe","latitude":53.7223492,"longitude":-0.810007666,"stationOperator":"NT","crsCode":"SAM"},{"name":"Salwick","latitude":53.78171338,"longitude":-2.819773179,"stationOperator":"NT","crsCode":"SLW"},{"name":"Sandal & Agbrigg","latitude":53.66313829,"longitude":-1.481487026,"stationOperator":"NT","crsCode":"SNA"},{"name":"Sandbach","latitude":53.15018835,"longitude":-2.3935123,"stationOperator":"NT","crsCode":"SDB"},{"name":"Sankey for Penketh","latitude":53.39247998,"longitude":-2.650467264,"stationOperator":"NT","crsCode":"SNK"},{"name":"Seaham","latitude":54.83664804,"longitude":-1.340923595,"stationOperator":"NT","crsCode":"SEA"},{"name":"Seascale","latitude":54.39564109,"longitude":-3.484886294,"stationOperator":"NT","crsCode":"SSC"},{"name":"Seaton Carew","latitude":54.65831825,"longitude":-1.200423075,"stationOperator":"NT","crsCode":"SEC"},{"name":"Sellafield","latitude":54.41659024,"longitude":-3.51045609,"stationOperator":"NT","crsCode":"SEL"},{"name":"Settle","latitude":54.06692419,"longitude":-2.280711727,"stationOperator":"NT","crsCode":"SET"},{"name":"Shepley","latitude":53.58920057,"longitude":-1.704017926,"stationOperator":"NT","crsCode":"SPY"},{"name":"Sherburn-in-Elmet","latitude":53.79717016,"longitude":-1.232684076,"stationOperator":"NT","crsCode":"SIE"},{"name":"Shildon","latitude":54.62680318,"longitude":-1.637535646,"stationOperator":"NT","crsCode":"SHD"},{"name":"Shipley (Yorks)","latitude":53.83274772,"longitude":-1.773263392,"stationOperator":"NT","crsCode":"SHY"},{"name":"Shireoaks","latitude":53.32484379,"longitude":-1.168215662,"stationOperator":"NT","crsCode":"SRO"},{"name":"Silecroft","latitude":54.22622466,"longitude":-3.335366346,"stationOperator":"NT","crsCode":"SIC"},{"name":"Silkstone Common","latitude":53.53493739,"longitude":-1.563474153,"stationOperator":"NT","crsCode":"SLK"},{"name":"Silverdale","latitude":54.16991444,"longitude":-2.803839018,"stationOperator":"NT","crsCode":"SVR"},{"name":"Skipton","latitude":53.95870219,"longitude":-2.025878431,"stationOperator":"NT","crsCode":"SKI"},{"name":"Slaithwaite","latitude":53.62384413,"longitude":-1.881582946,"stationOperator":"NT","crsCode":"SWT"},{"name":"Sleights","latitude":54.46106173,"longitude":-0.662475769,"stationOperator":"NT","crsCode":"SLH"},{"name":"Smithy Bridge","latitude":53.63301726,"longitude":-2.113376557,"stationOperator":"NT","crsCode":"SMB"},{"name":"Snaith","latitude":53.69312867,"longitude":-1.028454207,"stationOperator":"NT","crsCode":"SNI"},{"name":"South Bank","latitude":54.58383426,"longitude":-1.176660612,"stationOperator":"NT","crsCode":"SBK"},{"name":"South Elmsall","latitude":53.59462052,"longitude":-1.284860698,"stationOperator":"NT","crsCode":"SES"},{"name":"South Milford","latitude":53.7823442,"longitude":-1.250529513,"stationOperator":"NT","crsCode":"SOM"},{"name":"Sowerby Bridge","latitude":53.70790822,"longitude":-1.906950154,"stationOperator":"NT","crsCode":"SOW"},{"name":"Squires Gate","latitude":53.77677721,"longitude":-3.04942893,"stationOperator":"NT","crsCode":"SQU"},{"name":"St Annes-on-Sea","latitude":53.75340279,"longitude":-3.02912925,"stationOperator":"NT","crsCode":"SAS"},{"name":"St Bees","latitude":54.49258108,"longitude":-3.591384658,"stationOperator":"NT","crsCode":"SBS"},{"name":"St Helens Central","latitude":53.45313449,"longitude":-2.730304246,"stationOperator":"NT","crsCode":"SNH"},{"name":"St Helens Junction","latitude":53.43354101,"longitude":-2.699863587,"stationOperator":"NT","crsCode":"SHJ"},{"name":"Stallingborough","latitude":53.58711418,"longitude":-0.183667548,"stationOperator":"NT","crsCode":"SLL"},{"name":"Stanlow & Thornton","latitude":53.27829475,"longitude":-2.841153819,"stationOperator":"NT","crsCode":"SNT"},{"name":"Starbeck","latitude":53.99901434,"longitude":-1.501135911,"stationOperator":"NT","crsCode":"SBE"},{"name":"Steeton & Silsden","latitude":53.90026989,"longitude":-1.944114862,"stationOperator":"NT","crsCode":"SON"},{"name":"Stocksfield","latitude":54.94704693,"longitude":-1.916756206,"stationOperator":"NT","crsCode":"SKS"},{"name":"Stocksmoor","latitude":53.59437058,"longitude":-1.723472627,"stationOperator":"NT","crsCode":"SSM"},{"name":"Stockton","latitude":54.57024897,"longitude":-1.318932714,"stationOperator":"NT","crsCode":"STK"},{"name":"Streethouse","latitude":53.67632991,"longitude":-1.399894276,"stationOperator":"NT","crsCode":"SHC"},{"name":"Strines","latitude":53.37510107,"longitude":-2.032573054,"stationOperator":"NT","crsCode":"SRN"},{"name":"Styal","latitude":53.34834611,"longitude":-2.240457225,"stationOperator":"NT","crsCode":"SYA"},{"name":"Sunderland","latitude":54.905507,"longitude":-1.382377347,"stationOperator":"NT","crsCode":"SUN"},{"name":"Swinton (Manchester)","latitude":53.51484469,"longitude":-2.337463925,"stationOperator":"NT","crsCode":"SNN"},{"name":"Swinton (South Yorks)","latitude":53.48625823,"longitude":-1.305824829,"stationOperator":"NT","crsCode":"SWN"},{"name":"Tees-side Airport","latitude":54.51813568,"longitude":-1.425312602,"stationOperator":"NT","crsCode":"TEA"},{"name":"Thatto Heath","latitude":53.43659332,"longitude":-2.759374859,"stationOperator":"NT","crsCode":"THH"},{"name":"Thorne North","latitude":53.61607518,"longitude":-0.972324106,"stationOperator":"NT","crsCode":"TNN"},{"name":"Thorne South","latitude":53.60379593,"longitude":-0.954637509,"stationOperator":"NT","crsCode":"TNS"},{"name":"Thornton Abbey","latitude":53.65397075,"longitude":-0.323493815,"stationOperator":"NT","crsCode":"TNA"},{"name":"Thurnscoe","latitude":53.54506234,"longitude":-1.308786923,"stationOperator":"NT","crsCode":"THC"},{"name":"Todmorden","latitude":53.71383521,"longitude":-2.099654001,"stationOperator":"NT","crsCode":"TOD"},{"name":"Trafford Park","latitude":53.45496887,"longitude":-2.311688825,"stationOperator":"NT","crsCode":"TRA"},{"name":"Ulceby","latitude":53.61905841,"longitude":-0.302046812,"stationOperator":"NT","crsCode":"ULC"},{"name":"Ulleskelf","latitude":53.85362212,"longitude":-1.213971008,"stationOperator":"NT","crsCode":"ULL"},{"name":"Upholland","latitude":53.52839306,"longitude":-2.741404202,"stationOperator":"NT","crsCode":"UPL"},{"name":"Urmston","latitude":53.44828978,"longitude":-2.353800379,"stationOperator":"NT","crsCode":"URM"},{"name":"Wakefield Kirkgate","latitude":53.67898718,"longitude":-1.488256596,"stationOperator":"NT","crsCode":"WKK"},{"name":"Walkden","latitude":53.51978762,"longitude":-2.396325573,"stationOperator":"NT","crsCode":"WKD"},{"name":"Walsden","latitude":53.69621394,"longitude":-2.104458959,"stationOperator":"NT","crsCode":"WDN"},{"name":"Wavertree Technology Park","latitude":53.40595252,"longitude":-2.923547158,"stationOperator":"NT","crsCode":"WAV"},{"name":"Weeton","latitude":53.92319129,"longitude":-1.581209427,"stationOperator":"NT","crsCode":"WET"},{"name":"Wennington","latitude":54.12354041,"longitude":-2.586901999,"stationOperator":"NT","crsCode":"WNN"},{"name":"West Allerton","latitude":53.36914314,"longitude":-2.906969437,"stationOperator":"NT","crsCode":"WSA"},{"name":"Westhoughton","latitude":53.55597056,"longitude":-2.52391934,"stationOperator":"NT","crsCode":"WHG"},{"name":"Wetheral","latitude":54.88383913,"longitude":-2.831705373,"stationOperator":"NT","crsCode":"WRL"},{"name":"Whaley Bridge","latitude":53.33024999,"longitude":-1.984639006,"stationOperator":"NT","crsCode":"WBR"},{"name":"Whalley (Lancs)","latitude":53.82425416,"longitude":-2.412258277,"stationOperator":"NT","crsCode":"WHE"},{"name":"Whiston","latitude":53.41387942,"longitude":-2.796433416,"stationOperator":"NT","crsCode":"WHN"},{"name":"Whitby","latitude":54.48461942,"longitude":-0.615396354,"stationOperator":"NT","crsCode":"WTB"},{"name":"Whitehaven","latitude":54.55303162,"longitude":-3.586933718,"stationOperator":"NT","crsCode":"WTH"},{"name":"Whitley Bridge","latitude":53.69914493,"longitude":-1.158278466,"stationOperator":"NT","crsCode":"WBD"},{"name":"Widdrington","latitude":55.24139256,"longitude":-1.616238916,"stationOperator":"NT","crsCode":"WDD"},{"name":"Widnes","latitude":53.37851496,"longitude":-2.733536824,"stationOperator":"NT","crsCode":"WID"},{"name":"Wigan Wallgate","latitude":53.54483534,"longitude":-2.633181536,"stationOperator":"NT","crsCode":"WGW"},{"name":"Wigton","latitude":54.82933971,"longitude":-3.164351154,"stationOperator":"NT","crsCode":"WGT"},{"name":"Wilmslow","latitude":53.32686324,"longitude":-2.226327912,"stationOperator":"NT","crsCode":"WML"},{"name":"Wombwell","latitude":53.51759057,"longitude":-1.416316768,"stationOperator":"NT","crsCode":"WOM"},{"name":"Woodhouse","latitude":53.36375861,"longitude":-1.35755924,"stationOperator":"NT","crsCode":"WDH"},{"name":"Woodlesford","latitude":53.75680457,"longitude":-1.442885379,"stationOperator":"NT","crsCode":"WDS"},{"name":"Woodley","latitude":53.42927163,"longitude":-2.09326801,"stationOperator":"NT","crsCode":"WLY"},{"name":"Woodsmoor","latitude":53.3860782,"longitude":-2.141286478,"stationOperator":"NT","crsCode":"WSR"},{"name":"Workington","latitude":54.6450979,"longitude":-3.55849952,"stationOperator":"NT","crsCode":"WKG"},{"name":"Worksop","latitude":53.31166202,"longitude":-1.122542594,"stationOperator":"NT","crsCode":"WRK"},{"name":"Wressle","latitude":53.77277727,"longitude":-0.92420758,"stationOperator":"NT","crsCode":"WRS"},{"name":"Wylam","latitude":54.97497108,"longitude":-1.814055621,"stationOperator":"NT","crsCode":"WYM"},{"name":"Abbey Wood","latitude":51.49077059,"longitude":0.12032557,"stationOperator":"SE","crsCode":"ABW"},{"name":"Adisham","latitude":51.24120466,"longitude":1.19910096,"stationOperator":"SE","crsCode":"ADM"},{"name":"Albany Park","latitude":51.43580211,"longitude":0.126411748,"stationOperator":"SE","crsCode":"AYP"},{"name":"Ashford International","latitude":51.14370672,"longitude":0.876213658,"stationOperator":"SE","crsCode":"AFK"},{"name":"Aylesford","latitude":51.30131524,"longitude":0.466175982,"stationOperator":"SE","crsCode":"AYL"},{"name":"Aylesham","latitude":51.227257,"longitude":1.209464797,"stationOperator":"SE","crsCode":"AYH"},{"name":"Barming","latitude":51.2848921,"longitude":0.478963755,"stationOperator":"SE","crsCode":"BMG"},{"name":"Barnehurst","latitude":51.46484925,"longitude":0.160876915,"stationOperator":"SE","crsCode":"BNH"},{"name":"Bat & Ball","latitude":51.28975825,"longitude":0.194239522,"stationOperator":"SE","crsCode":"BBL"},{"name":"Battle","latitude":50.91291092,"longitude":0.494707026,"stationOperator":"SE","crsCode":"BAT"},{"name":"Bearsted","latitude":51.27581786,"longitude":0.577588734,"stationOperator":"SE","crsCode":"BSD"},{"name":"Beckenham Hill","latitude":51.42481875,"longitude":-0.016509356,"stationOperator":"TL","crsCode":"BEC"},{"name":"Beckenham Junction","latitude":51.41150888,"longitude":-0.027152,"stationOperator":"SE","crsCode":"BKJ"},{"name":"Bekesbourne","latitude":51.26136142,"longitude":1.136717912,"stationOperator":"SE","crsCode":"BKS"},{"name":"Bellingham","latitude":51.43387812,"longitude":-0.020433206,"stationOperator":"TL","crsCode":"BGM"},{"name":"Beltring","latitude":51.20470355,"longitude":0.403498536,"stationOperator":"SE","crsCode":"BEG"},{"name":"Belvedere","latitude":51.49199068,"longitude":0.152076006,"stationOperator":"SE","crsCode":"BVD"},{"name":"Bexley","latitude":51.44080011,"longitude":0.148229166,"stationOperator":"SE","crsCode":"BXY"},{"name":"Bexleyheath","latitude":51.46355285,"longitude":0.133460723,"stationOperator":"SE","crsCode":"BXH"},{"name":"Bickley","latitude":51.40039232,"longitude":0.044255507,"stationOperator":"SE","crsCode":"BKL"},{"name":"Birchington-on-sea","latitude":51.37749929,"longitude":1.301424075,"stationOperator":"SE","crsCode":"BCH"},{"name":"Blackheath","latitude":51.46576408,"longitude":0.008302376,"stationOperator":"SE","crsCode":"BKH"},{"name":"Borough Green & Wrotham","latitude":51.29321653,"longitude":0.306260165,"stationOperator":"SE","crsCode":"BRG"},{"name":"Brixton","latitude":51.46330207,"longitude":-0.114179004,"stationOperator":"SE","crsCode":"BRX"},{"name":"Broadstairs","latitude":51.36068061,"longitude":1.433579788,"stationOperator":"SE","crsCode":"BSR"},{"name":"Bromley North","latitude":51.40895308,"longitude":0.017315524,"stationOperator":"SE","crsCode":"BMN"},{"name":"Bromley South","latitude":51.39994205,"longitude":0.018356648,"stationOperator":"SE","crsCode":"BMS"},{"name":"Canterbury East","latitude":51.27427221,"longitude":1.075977014,"stationOperator":"SE","crsCode":"CBE"},{"name":"Canterbury West","latitude":51.28427401,"longitude":1.075311762,"stationOperator":"SE","crsCode":"CBW"},{"name":"Catford","latitude":51.44440912,"longitude":-0.026309768,"stationOperator":"TL","crsCode":"CTF"},{"name":"Catford Bridge","latitude":51.44474435,"longitude":-0.024856205,"stationOperator":"SE","crsCode":"CFB"},{"name":"Charing (Kent)","latitude":51.20810222,"longitude":0.790345573,"stationOperator":"SE","crsCode":"CHG"},{"name":"Charlton","latitude":51.48686666,"longitude":0.03098034,"stationOperator":"SE","crsCode":"CTN"},{"name":"Chartham","latitude":51.25726956,"longitude":1.01806042,"stationOperator":"SE","crsCode":"CRT"},{"name":"Chatham","latitude":51.38037808,"longitude":0.521158168,"stationOperator":"SE","crsCode":"CTM"},{"name":"Chelsfield","latitude":51.3562555,"longitude":0.109079893,"stationOperator":"SE","crsCode":"CLD"},{"name":"Chestfield & Swalecliffe","latitude":51.36032694,"longitude":1.067706206,"stationOperator":"SE","crsCode":"CSW"},{"name":"Chilham","latitude":51.24461449,"longitude":0.97591547,"stationOperator":"SE","crsCode":"CIL"},{"name":"Chislehurst","latitude":51.40555763,"longitude":0.057426909,"stationOperator":"SE","crsCode":"CIT"},{"name":"Clock House","latitude":51.40858783,"longitude":-0.040650863,"stationOperator":"SE","crsCode":"CLK"},{"name":"Crayford","latitude":51.4483295,"longitude":0.178807049,"stationOperator":"SE","crsCode":"CRY"},{"name":"Crofton Park","latitude":51.45519193,"longitude":-0.036496434,"stationOperator":"TL","crsCode":"CFT"},{"name":"Crowhurst","latitude":50.88857369,"longitude":0.501354995,"stationOperator":"SE","crsCode":"CWU"},{"name":"Cuxton","latitude":51.37392606,"longitude":0.46171433,"stationOperator":"SE","crsCode":"CUX"},{"name":"Dartford","latitude":51.44737254,"longitude":0.219261557,"stationOperator":"SE","crsCode":"DFD"},{"name":"Deal","latitude":51.22304659,"longitude":1.398864195,"stationOperator":"SE","crsCode":"DEA"},{"name":"Denmark Hill","latitude":51.46820589,"longitude":-0.08935568,"stationOperator":"TL","crsCode":"DMK"},{"name":"Deptford","latitude":51.4788514,"longitude":-0.026263166,"stationOperator":"SE","crsCode":"DEP"},{"name":"Dover Priory","latitude":51.12570009,"longitude":1.305307618,"stationOperator":"SE","crsCode":"DVP"},{"name":"Dumpton Park","latitude":51.34570515,"longitude":1.425837546,"stationOperator":"SE","crsCode":"DMP"},{"name":"Dunton Green","latitude":51.29648798,"longitude":0.170948548,"stationOperator":"SE","crsCode":"DNG"},{"name":"East Farleigh","latitude":51.25523373,"longitude":0.484734574,"stationOperator":"SE","crsCode":"EFL"},{"name":"East Malling","latitude":51.28580685,"longitude":0.439284828,"stationOperator":"SE","crsCode":"EML"},{"name":"Ebbsfleet International","latitude":51.442898,"longitude":0.321002,"stationOperator":"SE","crsCode":"EBD"},{"name":"Eden Park","latitude":51.39081565,"longitude":-0.026605004,"stationOperator":"SE","crsCode":"EDN"},{"name":"Elmers End","latitude":51.39830239,"longitude":-0.049428828,"stationOperator":"SE","crsCode":"ELE"},{"name":"Elmstead Woods","latitude":51.41711905,"longitude":0.044282703,"stationOperator":"SE","crsCode":"ESD"},{"name":"Eltham","latitude":51.45564856,"longitude":0.052337616,"stationOperator":"SE","crsCode":"ELW"},{"name":"Erith","latitude":51.48168188,"longitude":0.174635475,"stationOperator":"SE","crsCode":"ERH"},{"name":"Etchingham","latitude":51.0105441,"longitude":0.442373902,"stationOperator":"SE","crsCode":"ETC"},{"name":"Eynsford","latitude":51.36271986,"longitude":0.204405917,"stationOperator":"SE","crsCode":"EYN"},{"name":"Falconwood","latitude":51.45914359,"longitude":0.078550785,"stationOperator":"SE","crsCode":"FCN"},{"name":"Farningham Road","latitude":51.40139519,"longitude":0.235524653,"stationOperator":"SE","crsCode":"FNR"},{"name":"Faversham","latitude":51.31171034,"longitude":0.891062265,"stationOperator":"SE","crsCode":"FAV"},{"name":"Folkestone Central","latitude":51.08288631,"longitude":1.169492303,"stationOperator":"SE","crsCode":"FKC"},{"name":"Folkestone West","latitude":51.08458538,"longitude":1.153912918,"stationOperator":"SE","crsCode":"FKW"},{"name":"Frant","latitude":51.10402068,"longitude":0.2945567,"stationOperator":"SE","crsCode":"FRT"},{"name":"Gillingham (Kent)","latitude":51.38672166,"longitude":0.550513828,"stationOperator":"SE","crsCode":"GLM"},{"name":"Gravesend","latitude":51.44134993,"longitude":0.366646481,"stationOperator":"SE","crsCode":"GRV"},{"name":"Greenhithe","latitude":51.45076146,"longitude":0.278856807,"stationOperator":"SE","crsCode":"GNH"},{"name":"Greenwich","latitude":51.47783848,"longitude":-0.014209644,"stationOperator":"SE","crsCode":"GNW"},{"name":"Grove Park","latitude":51.43044575,"longitude":0.022578266,"stationOperator":"SE","crsCode":"GRP"},{"name":"Halling","latitude":51.35247674,"longitude":0.44493691,"stationOperator":"SE","crsCode":"HAI"},{"name":"Harrietsham","latitude":51.24482814,"longitude":0.672410147,"stationOperator":"SE","crsCode":"HRM"},{"name":"Hastings","latitude":50.85759003,"longitude":0.576461455,"stationOperator":"SE","crsCode":"HGS"},{"name":"Hayes (Kent)","latitude":51.37580244,"longitude":0.010109755,"stationOperator":"SE","crsCode":"HYS"},{"name":"Headcorn","latitude":51.16571639,"longitude":0.627491294,"stationOperator":"SE","crsCode":"HCN"},{"name":"Herne Bay","latitude":51.36459088,"longitude":1.117735579,"stationOperator":"SE","crsCode":"HNB"},{"name":"Herne Hill","latitude":51.45320752,"longitude":-0.101640876,"stationOperator":"SE","crsCode":"HNH"},{"name":"High Brooms","latitude":51.14939826,"longitude":0.277345661,"stationOperator":"SE","crsCode":"HIB"},{"name":"Higham (Kent)","latitude":51.42656006,"longitude":0.466283903,"stationOperator":"SE","crsCode":"HGM"},{"name":"Hildenborough","latitude":51.21448142,"longitude":0.227602385,"stationOperator":"SE","crsCode":"HLB"},{"name":"Hither Green","latitude":51.45243221,"longitude":-0.000918992,"stationOperator":"SE","crsCode":"HGR"},{"name":"Hollingbourne","latitude":51.26517489,"longitude":0.627857882,"stationOperator":"SE","crsCode":"HBN"},{"name":"Kearsney (Kent)","latitude":51.14937599,"longitude":1.272074581,"stationOperator":"SE","crsCode":"KSN"},{"name":"Kemsing","latitude":51.29718469,"longitude":0.247441908,"stationOperator":"SE","crsCode":"KMS"},{"name":"Kemsley","latitude":51.3624387,"longitude":0.735371031,"stationOperator":"SE","crsCode":"KML"},{"name":"Kent House","latitude":51.4127206,"longitude":-0.0457951,"stationOperator":"SE","crsCode":"KTH"},{"name":"Kidbrooke","latitude":51.46272143,"longitude":0.028324303,"stationOperator":"SE","crsCode":"KDB"},{"name":"Knockholt","latitude":51.34578876,"longitude":0.130857676,"stationOperator":"SE","crsCode":"KCK"},{"name":"Ladywell","latitude":51.45624704,"longitude":-0.019033585,"stationOperator":"SE","crsCode":"LAD"},{"name":"Lee (London)","latitude":51.44949014,"longitude":0.013345094,"stationOperator":"SE","crsCode":"LEE"},{"name":"Lenham","latitude":51.234481,"longitude":0.70777074,"stationOperator":"SE","crsCode":"LEN"},{"name":"Lewisham","latitude":51.46569471,"longitude":-0.014017114,"stationOperator":"SE","crsCode":"LEW"},{"name":"London Waterloo East","latitude":51.50408038,"longitude":-0.108893287,"stationOperator":"SE","crsCode":"WAE"},{"name":"Longfield","latitude":51.39615545,"longitude":0.300379852,"stationOperator":"SE","crsCode":"LGF"},{"name":"Lower Sydenham","latitude":51.42483262,"longitude":-0.033338978,"stationOperator":"SE","crsCode":"LSY"},{"name":"Maidstone Barracks","latitude":51.27716608,"longitude":0.513966736,"stationOperator":"SE","crsCode":"MDB"},{"name":"Maidstone East","latitude":51.27782671,"longitude":0.521301857,"stationOperator":"SE","crsCode":"MDE"},{"name":"Maidstone West","latitude":51.2704626,"longitude":0.515780027,"stationOperator":"SE","crsCode":"MDW"},{"name":"Marden (Kent)","latitude":51.17516959,"longitude":0.493174606,"stationOperator":"SE","crsCode":"MRN"},{"name":"Margate","latitude":51.38543564,"longitude":1.372020955,"stationOperator":"SE","crsCode":"MAR"},{"name":"Martin Mill","latitude":51.17067872,"longitude":1.348232601,"stationOperator":"SE","crsCode":"MTM"},{"name":"Maze Hill","latitude":51.48293643,"longitude":0.003295611,"stationOperator":"SE","crsCode":"MZH"},{"name":"Meopham","latitude":51.3864239,"longitude":0.356954369,"stationOperator":"SE","crsCode":"MEP"},{"name":"Minster","latitude":51.32917959,"longitude":1.31723234,"stationOperator":"SE","crsCode":"MSR"},{"name":"Mottingham","latitude":51.4398558,"longitude":0.050334368,"stationOperator":"SE","crsCode":"MTG"},{"name":"New Beckenham","latitude":51.41677126,"longitude":-0.035267105,"stationOperator":"SE","crsCode":"NBC"},{"name":"New Cross","latitude":51.47635659,"longitude":-0.032995347,"stationOperator":"SE","crsCode":"NWX"},{"name":"New Eltham","latitude":51.43770471,"longitude":0.070382648,"stationOperator":"SE","crsCode":"NEH"},{"name":"New Hythe","latitude":51.3130007,"longitude":0.454934662,"stationOperator":"SE","crsCode":"NHE"},{"name":"Newington","latitude":51.35334004,"longitude":0.668581912,"stationOperator":"SE","crsCode":"NGT"},{"name":"Northfleet","latitude":51.44584818,"longitude":0.3243358,"stationOperator":"SE","crsCode":"NFL"},{"name":"Nunhead","latitude":51.46697308,"longitude":-0.052692347,"stationOperator":"TL","crsCode":"NHD"},{"name":"Orpington","latitude":51.37352201,"longitude":0.089038526,"stationOperator":"SE","crsCode":"ORP"},{"name":"Otford","latitude":51.31315635,"longitude":0.196790978,"stationOperator":"SE","crsCode":"OTF"},{"name":"Paddock Wood","latitude":51.18226074,"longitude":0.389165396,"stationOperator":"SE","crsCode":"PDW"},{"name":"Penge East","latitude":51.41933448,"longitude":-0.054142784,"stationOperator":"SE","crsCode":"PNE"},{"name":"Petts Wood","latitude":51.38861936,"longitude":0.074490155,"stationOperator":"SE","crsCode":"PET"},{"name":"Pluckley","latitude":51.15647459,"longitude":0.747408729,"stationOperator":"SE","crsCode":"PLC"},{"name":"Plumstead","latitude":51.48979844,"longitude":0.084266668,"stationOperator":"SE","crsCode":"PLU"},{"name":"Queenborough","latitude":51.41563685,"longitude":0.749680178,"stationOperator":"SE","crsCode":"QBR"},{"name":"Rainham (Kent)","latitude":51.36630481,"longitude":0.611346972,"stationOperator":"SE","crsCode":"RAI"},{"name":"Ramsgate","latitude":51.34102927,"longitude":1.406056398,"stationOperator":"SE","crsCode":"RAM"},{"name":"Ravensbourne","latitude":51.41386433,"longitude":-0.006916653,"stationOperator":"TL","crsCode":"RVB"},{"name":"Robertsbridge","latitude":50.98493079,"longitude":0.468786411,"stationOperator":"SE","crsCode":"RBR"},{"name":"Rochester","latitude":51.38554918,"longitude":0.510288532,"stationOperator":"SE","crsCode":"RTR"},{"name":"Sandling","latitude":51.0903696,"longitude":1.066064128,"stationOperator":"SE","crsCode":"SDG"},{"name":"Sandwich","latitude":51.26990727,"longitude":1.342584118,"stationOperator":"SE","crsCode":"SDW"},{"name":"Selling","latitude":51.27735954,"longitude":0.94088939,"stationOperator":"SE","crsCode":"SEG"},{"name":"Sevenoaks","latitude":51.27686256,"longitude":0.18168053,"stationOperator":"SE","crsCode":"SEV"},{"name":"Sheerness-on-Sea","latitude":51.44106166,"longitude":0.758547575,"stationOperator":"SE","crsCode":"SSS"},{"name":"Shepherds Well","latitude":51.18840091,"longitude":1.229922503,"stationOperator":"SE","crsCode":"SPH"},{"name":"Shoreham (Kent)","latitude":51.3322173,"longitude":0.188901812,"stationOperator":"SE","crsCode":"SEH"},{"name":"Shortlands","latitude":51.40560506,"longitude":0.002789316,"stationOperator":"SE","crsCode":"SRT"},{"name":"Sidcup","latitude":51.4344201,"longitude":0.103326599,"stationOperator":"SE","crsCode":"SID"},{"name":"Sittingbourne","latitude":51.34197466,"longitude":0.734697529,"stationOperator":"SE","crsCode":"SIT"},{"name":"Slade Green","latitude":51.46778867,"longitude":0.190504422,"stationOperator":"SE","crsCode":"SGR"},{"name":"Snodland","latitude":51.33022897,"longitude":0.448246314,"stationOperator":"SE","crsCode":"SDA"},{"name":"Snowdown","latitude":51.21530252,"longitude":1.213717174,"stationOperator":"SE","crsCode":"SWO"},{"name":"Sole Street","latitude":51.38314549,"longitude":0.378100359,"stationOperator":"SE","crsCode":"SOR"},{"name":"St Johns (London)","latitude":51.46899802,"longitude":-0.023232814,"stationOperator":"SE","crsCode":"SAJ"},{"name":"St Leonards Warrior Square","latitude":50.8558633,"longitude":0.560522005,"stationOperator":"SE","crsCode":"SLQ"},{"name":"St Mary Cray","latitude":51.39477941,"longitude":0.107257724,"stationOperator":"SE","crsCode":"SMY"},{"name":"Staplehurst","latitude":51.17146994,"longitude":0.550445835,"stationOperator":"SE","crsCode":"SPU"},{"name":"Stone Crossing","latitude":51.45133235,"longitude":0.263786194,"stationOperator":"SE","crsCode":"SCG"},{"name":"Stonegate","latitude":51.01996612,"longitude":0.363883611,"stationOperator":"SE","crsCode":"SOG"},{"name":"Strood (Kent)","latitude":51.39654864,"longitude":0.50019436,"stationOperator":"SE","crsCode":"SOO"},{"name":"Sturry","latitude":51.30107408,"longitude":1.122265331,"stationOperator":"SE","crsCode":"STU"},{"name":"Sundridge Park","latitude":51.4133967,"longitude":0.020387427,"stationOperator":"SE","crsCode":"SUP"},{"name":"Swale","latitude":51.38923548,"longitude":0.747147474,"stationOperator":"SE","crsCode":"SWL"},{"name":"Swanley","latitude":51.39338728,"longitude":0.169237354,"stationOperator":"SE","crsCode":"SAY"},{"name":"Swanscombe","latitude":51.44907248,"longitude":0.309545118,"stationOperator":"SE","crsCode":"SWM"},{"name":"Sydenham Hill","latitude":51.43271634,"longitude":-0.080334335,"stationOperator":"SE","crsCode":"SYH"},{"name":"Teynham","latitude":51.33338995,"longitude":0.807440692,"stationOperator":"SE","crsCode":"TEY"},{"name":"Tonbridge","latitude":51.19143689,"longitude":0.27077344,"stationOperator":"SE","crsCode":"TON"},{"name":"Tunbridge Wells","latitude":51.13022674,"longitude":0.262823237,"stationOperator":"SE","crsCode":"TBW"},{"name":"Wadhurst","latitude":51.07346089,"longitude":0.313187922,"stationOperator":"SE","crsCode":"WAD"},{"name":"Walmer","latitude":51.20332393,"longitude":1.382891124,"stationOperator":"SE","crsCode":"WAM"},{"name":"Wateringbury","latitude":51.24973116,"longitude":0.422470344,"stationOperator":"SE","crsCode":"WTR"},{"name":"Welling","latitude":51.46484348,"longitude":0.101846038,"stationOperator":"SE","crsCode":"WLI"},{"name":"West Dulwich","latitude":51.44062348,"longitude":-0.090938887,"stationOperator":"SE","crsCode":"WDU"},{"name":"West Malling","latitude":51.29201798,"longitude":0.418657268,"stationOperator":"SE","crsCode":"WMA"},{"name":"West St Leonards","latitude":50.85314724,"longitude":0.539940339,"stationOperator":"SE","crsCode":"WLD"},{"name":"West Wickham","latitude":51.38130201,"longitude":-0.014425183,"stationOperator":"SE","crsCode":"WWI"},{"name":"Westcombe Park","latitude":51.48448685,"longitude":0.017767227,"stationOperator":"SE","crsCode":"WCB"},{"name":"Westenhanger","latitude":51.09487937,"longitude":1.037707764,"stationOperator":"SE","crsCode":"WHA"},{"name":"Westgate-on-Sea","latitude":51.38145254,"longitude":1.338378497,"stationOperator":"SE","crsCode":"WGA"},{"name":"Whitstable","latitude":51.35758066,"longitude":1.033302028,"stationOperator":"SE","crsCode":"WHI"},{"name":"Woolwich Arsenal","latitude":51.48987374,"longitude":0.069864616,"stationOperator":"SE","crsCode":"WWA"},{"name":"Woolwich Dockyard","latitude":51.49113057,"longitude":0.05465135,"stationOperator":"SE","crsCode":"WWD"},{"name":"Wye","latitude":51.18501369,"longitude":0.929321854,"stationOperator":"SE","crsCode":"WYE"},{"name":"Yalding","latitude":51.22647911,"longitude":0.412167502,"stationOperator":"SE","crsCode":"YAL"},{"name":"Aldrington","latitude":50.83636472,"longitude":-0.181209698,"stationOperator":"SN","crsCode":"AGT"},{"name":"Amberley","latitude":50.896668,"longitude":-0.541989047,"stationOperator":"SN","crsCode":"AMY"},{"name":"Angmering","latitude":50.8165699,"longitude":-0.4893894,"stationOperator":"SN","crsCode":"ANG"},{"name":"Appledore (Kent)","latitude":51.0332352,"longitude":0.816355536,"stationOperator":"SN","crsCode":"APD"},{"name":"Arundel","latitude":50.84820145,"longitude":-0.546171346,"stationOperator":"SN","crsCode":"ARU"},{"name":"Ashtead","latitude":51.31788158,"longitude":-0.308147338,"stationOperator":"SN","crsCode":"AHD"},{"name":"Ashurst (Kent)","latitude":51.12865582,"longitude":0.152661963,"stationOperator":"SN","crsCode":"AHS"},{"name":"Balcombe","latitude":51.05551334,"longitude":-0.136932431,"stationOperator":"SN","crsCode":"BAB"},{"name":"Balham","latitude":51.44322754,"longitude":-0.152421221,"stationOperator":"SN","crsCode":"BAL"},{"name":"Banstead","latitude":51.32934844,"longitude":-0.213158063,"stationOperator":"SN","crsCode":"BAD"},{"name":"Barnham","latitude":50.83089289,"longitude":-0.639679689,"stationOperator":"SN","crsCode":"BAA"},{"name":"Battersea Park","latitude":51.47733308,"longitude":-0.148162967,"stationOperator":"SN","crsCode":"BAK"},{"name":"Belmont","latitude":51.34413926,"longitude":-0.199487206,"stationOperator":"SN","crsCode":"BLM"},{"name":"Berwick (Sussex)","latitude":50.84037214,"longitude":0.166026428,"stationOperator":"SN","crsCode":"BRK"},{"name":"Bexhill","latitude":50.84103549,"longitude":0.477034087,"stationOperator":"SN","crsCode":"BEX"},{"name":"Billingshurst","latitude":51.01519557,"longitude":-0.450295608,"stationOperator":"SN","crsCode":"BIG"},{"name":"Birkbeck","latitude":51.40390126,"longitude":-0.056235874,"stationOperator":"SN","crsCode":"BIK"},{"name":"Bishopstone (Sussex)","latitude":50.78013589,"longitude":0.082763046,"stationOperator":"SN","crsCode":"BIP"},{"name":"Bognor Regis","latitude":50.78655324,"longitude":-0.676179036,"stationOperator":"SN","crsCode":"BOG"},{"name":"Bosham","latitude":50.8427348,"longitude":-0.847436637,"stationOperator":"SN","crsCode":"BOH"},{"name":"Box Hill & Westhumble","latitude":51.25400939,"longitude":-0.328478447,"stationOperator":"SN","crsCode":"BXW"},{"name":"Brighton (East Sussex)","latitude":50.82895322,"longitude":-0.141225193,"stationOperator":"SN","crsCode":"BTN"},{"name":"Burgess Hill","latitude":50.95361465,"longitude":-0.127769062,"stationOperator":"SN","crsCode":"BUG"},{"name":"Buxted","latitude":50.99001094,"longitude":0.131447718,"stationOperator":"SN","crsCode":"BXD"},{"name":"Carshalton","latitude":51.3684549,"longitude":-0.166366115,"stationOperator":"SN","crsCode":"CSH"},{"name":"Carshalton Beeches","latitude":51.35741124,"longitude":-0.169794788,"stationOperator":"SN","crsCode":"CSB"},{"name":"Caterham","latitude":51.28213943,"longitude":-0.078302765,"stationOperator":"SN","crsCode":"CAT"},{"name":"Cheam","latitude":51.35547926,"longitude":-0.214166523,"stationOperator":"SN","crsCode":"CHE"},{"name":"Chichester","latitude":50.83204016,"longitude":-0.781752603,"stationOperator":"SN","crsCode":"CCH"},{"name":"Chipstead","latitude":51.30932005,"longitude":-0.169427771,"stationOperator":"SN","crsCode":"CHP"},{"name":"Christs Hospital","latitude":51.0506779,"longitude":-0.363547086,"stationOperator":"SN","crsCode":"CHH"},{"name":"Collington","latitude":50.8392821,"longitude":0.457878337,"stationOperator":"SN","crsCode":"CLL"},{"name":"Cooden Beach","latitude":50.83336546,"longitude":0.426874784,"stationOperator":"SN","crsCode":"COB"},{"name":"Cooksbridge","latitude":50.90375256,"longitude":-0.009198424,"stationOperator":"SN","crsCode":"CBR"},{"name":"Coulsdon South","latitude":51.31583718,"longitude":-0.137884398,"stationOperator":"SN","crsCode":"CDS"},{"name":"Coulsdon Town","latitude":51.322434,"longitude":-0.13432,"stationOperator":"SN","crsCode":"CDN"},{"name":"Cowden (Kent)","latitude":51.15563114,"longitude":0.110041555,"stationOperator":"SN","crsCode":"CWN"},{"name":"Crawley","latitude":51.1122072,"longitude":-0.186672649,"stationOperator":"SN","crsCode":"CRW"},{"name":"Crowborough","latitude":51.04638117,"longitude":0.188023149,"stationOperator":"SN","crsCode":"COH"},{"name":"Doleham","latitude":50.9187472,"longitude":0.610702875,"stationOperator":"SN","crsCode":"DLH"},{"name":"Dorking (Main)","latitude":51.240927,"longitude":-0.32423924,"stationOperator":"SN","crsCode":"DKG"},{"name":"Dormans","latitude":51.15578598,"longitude":-0.004302625,"stationOperator":"SN","crsCode":"DMS"},{"name":"Durrington-on-Sea","latitude":50.81752228,"longitude":-0.411461916,"stationOperator":"SN","crsCode":"DUR"},{"name":"Earlswood (Surrey)","latitude":51.22732507,"longitude":-0.170821639,"stationOperator":"SN","crsCode":"ELD"},{"name":"East Croydon","latitude":51.37500564,"longitude":-0.092276539,"stationOperator":"SN","crsCode":"ECR"},{"name":"East Dulwich","latitude":51.46132011,"longitude":-0.080717696,"stationOperator":"SN","crsCode":"EDW"},{"name":"East Grinstead","latitude":51.12626697,"longitude":-0.017895018,"stationOperator":"SN","crsCode":"EGR"},{"name":"East Worthing","latitude":50.82163957,"longitude":-0.354885361,"stationOperator":"SN","crsCode":"EWR"},{"name":"Eastbourne","latitude":50.76936955,"longitude":0.281258504,"stationOperator":"SN","crsCode":"EBN"},{"name":"Edenbridge","latitude":51.20843113,"longitude":0.060654046,"stationOperator":"SN","crsCode":"EBR"},{"name":"Edenbridge Town","latitude":51.20007799,"longitude":0.067180931,"stationOperator":"SN","crsCode":"EBT"},{"name":"Emsworth","latitude":50.85138028,"longitude":-0.93878361,"stationOperator":"SN","crsCode":"EMS"},{"name":"Epsom (Surrey)","latitude":51.3343926,"longitude":-0.268778341,"stationOperator":"SN","crsCode":"EPS"},{"name":"Epsom Downs","latitude":51.323687,"longitude":-0.238954739,"stationOperator":"SN","crsCode":"EPD"},{"name":"Eridge","latitude":51.08895742,"longitude":0.201442672,"stationOperator":"SN","crsCode":"ERI"},{"name":"Ewell East","latitude":51.34529966,"longitude":-0.241529469,"stationOperator":"SN","crsCode":"EWE"},{"name":"Falmer","latitude":50.86212415,"longitude":-0.087383616,"stationOperator":"SN","crsCode":"FMR"},{"name":"Faygate","latitude":51.09588376,"longitude":-0.26302061,"stationOperator":"SN","crsCode":"FGT"},{"name":"Fishbourne (Sussex)","latitude":50.83903838,"longitude":-0.815088781,"stationOperator":"SN","crsCode":"FSB"},{"name":"Fishersgate","latitude":50.83422898,"longitude":-0.219411,"stationOperator":"SN","crsCode":"FSG"},{"name":"Ford","latitude":50.82956237,"longitude":-0.578615542,"stationOperator":"SN","crsCode":"FOD"},{"name":"Gatwick Airport","latitude":51.15648532,"longitude":-0.161040264,"stationOperator":"SN","crsCode":"GTW"},{"name":"Gipsy Hill","latitude":51.42445509,"longitude":-0.083830832,"stationOperator":"SN","crsCode":"GIP"},{"name":"Glynde","latitude":50.85916668,"longitude":0.07008355,"stationOperator":"SN","crsCode":"GLY"},{"name":"Godstone","latitude":51.21815351,"longitude":-0.050080252,"stationOperator":"SN","crsCode":"GDN"},{"name":"Goring-by-Sea","latitude":50.8177157,"longitude":-0.433076924,"stationOperator":"SN","crsCode":"GBS"},{"name":"Hackbridge","latitude":51.37787262,"longitude":-0.153904728,"stationOperator":"SN","crsCode":"HCB"},{"name":"Ham Street","latitude":51.0683774,"longitude":0.854521617,"stationOperator":"SN","crsCode":"HMT"},{"name":"Hampden Park (Sussex)","latitude":50.79639828,"longitude":0.27936748,"stationOperator":"SN","crsCode":"HMD"},{"name":"Hassocks","latitude":50.92461282,"longitude":-0.145952423,"stationOperator":"SN","crsCode":"HSK"},{"name":"Haywards Heath","latitude":51.00525294,"longitude":-0.105306765,"stationOperator":"SN","crsCode":"HHE"},{"name":"Hever","latitude":51.18140581,"longitude":0.0950779,"stationOperator":"SN","crsCode":"HEV"},{"name":"Holmwood","latitude":51.18099754,"longitude":-0.321090928,"stationOperator":"SN","crsCode":"HLM"},{"name":"Horley","latitude":51.16877025,"longitude":-0.161052239,"stationOperator":"SN","crsCode":"HOR"},{"name":"Horsham","latitude":51.06605718,"longitude":-0.319258917,"stationOperator":"SN","crsCode":"HRH"},{"name":"Hove","latitude":50.8352109,"longitude":-0.170687991,"stationOperator":"SN","crsCode":"HOV"},{"name":"Hurst Green","latitude":51.24442735,"longitude":0.003945749,"stationOperator":"SN","crsCode":"HUR"},{"name":"Ifield","latitude":51.11561646,"longitude":-0.214772632,"stationOperator":"SN","crsCode":"IFI"},{"name":"Kenley","latitude":51.32460105,"longitude":-0.101215735,"stationOperator":"SN","crsCode":"KLY"},{"name":"Kingswood","latitude":51.29486144,"longitude":-0.211456639,"stationOperator":"SN","crsCode":"KND"},{"name":"Lancing","latitude":50.82707775,"longitude":-0.323099956,"stationOperator":"SN","crsCode":"LAC"},{"name":"Leatherhead","latitude":51.29875147,"longitude":-0.333064888,"stationOperator":"SN","crsCode":"LHD"},{"name":"Leigh (Kent)","latitude":51.19389559,"longitude":0.210506799,"stationOperator":"SN","crsCode":"LIH"},{"name":"Lewes","latitude":50.87062711,"longitude":0.011335211,"stationOperator":"SN","crsCode":"LWS"},{"name":"Lingfield","latitude":51.17644755,"longitude":-0.007158941,"stationOperator":"SN","crsCode":"LFD"},{"name":"Littlehampton","latitude":50.81010344,"longitude":-0.545991819,"stationOperator":"SN","crsCode":"LIT"},{"name":"Littlehaven","latitude":51.0797438,"longitude":-0.307969555,"stationOperator":"SN","crsCode":"LVN"},{"name":"London Road (Brighton)","latitude":50.83665742,"longitude":-0.136501977,"stationOperator":"SN","crsCode":"LRB"},{"name":"Merstham","latitude":51.26415181,"longitude":-0.150223451,"stationOperator":"SN","crsCode":"MHM"},{"name":"Mitcham Eastfields","latitude":51.40840457,"longitude":-0.15396924,"stationOperator":"SN","crsCode":"MTC"},{"name":"Mitcham Junction","latitude":51.39294461,"longitude":-0.157322869,"stationOperator":"SN","crsCode":"MIJ"},{"name":"Moulsecoomb","latitude":50.84671673,"longitude":-0.118840894,"stationOperator":"SN","crsCode":"MCB"},{"name":"Newhaven Harbour","latitude":50.78978441,"longitude":0.054998379,"stationOperator":"SN","crsCode":"NVH"},{"name":"Newhaven Town","latitude":50.79484885,"longitude":0.054950925,"stationOperator":"SN","crsCode":"NVN"},{"name":"Norbury","latitude":51.41144749,"longitude":-0.121922189,"stationOperator":"SN","crsCode":"NRB"},{"name":"Normans Bay","latitude":50.82609675,"longitude":0.389476518,"stationOperator":"SN","crsCode":"NSB"},{"name":"North Dulwich","latitude":51.45451316,"longitude":-0.087912394,"stationOperator":"SN","crsCode":"NDL"},{"name":"Nutbourne","latitude":50.8460569,"longitude":-0.882951949,"stationOperator":"SN","crsCode":"NUT"},{"name":"Nutfield","latitude":51.22686567,"longitude":-0.133758333,"stationOperator":"SN","crsCode":"NUF"},{"name":"Ockley","latitude":51.15150662,"longitude":-0.336003059,"stationOperator":"SN","crsCode":"OLY"},{"name":"Ore","latitude":50.86694236,"longitude":0.591574525,"stationOperator":"SN","crsCode":"ORE"},{"name":"Oxted","latitude":51.25790506,"longitude":-0.004812996,"stationOperator":"SN","crsCode":"OXT"},{"name":"Peckham Rye","latitude":51.47003714,"longitude":-0.069394247,"stationOperator":"SN","crsCode":"PMR"},{"name":"Penshurst","latitude":51.19733253,"longitude":0.173483045,"stationOperator":"SN","crsCode":"PHR"},{"name":"Pevensey & Westham","latitude":50.81579197,"longitude":0.324820485,"stationOperator":"SN","crsCode":"PEV"},{"name":"Pevensey Bay","latitude":50.81745345,"longitude":0.342920162,"stationOperator":"SN","crsCode":"PEB"},{"name":"Plumpton","latitude":50.9286601,"longitude":-0.060178055,"stationOperator":"SN","crsCode":"PMP"},{"name":"Polegate","latitude":50.82121828,"longitude":0.245732124,"stationOperator":"SN","crsCode":"PLG"},{"name":"Portslade","latitude":50.83567693,"longitude":-0.205323859,"stationOperator":"SN","crsCode":"PLD"},{"name":"Preston Park","latitude":50.84593878,"longitude":-0.155167744,"stationOperator":"SN","crsCode":"PRP"},{"name":"Pulborough","latitude":50.95734852,"longitude":-0.516553376,"stationOperator":"SN","crsCode":"PUL"},{"name":"Purley","latitude":51.33739162,"longitude":-0.113608701,"stationOperator":"SN","crsCode":"PUR"},{"name":"Purley Oaks","latitude":51.34704533,"longitude":-0.098851969,"stationOperator":"SN","crsCode":"PUO"},{"name":"Queens Road (Peckham)","latitude":51.47406855,"longitude":-0.057574233,"stationOperator":"SN","crsCode":"QRP"},{"name":"Redhill","latitude":51.24019809,"longitude":-0.165898311,"stationOperator":"SN","crsCode":"RDH"},{"name":"Reedham (Surrey)","latitude":51.33216069,"longitude":-0.12387235,"stationOperator":"SN","crsCode":"RHM"},{"name":"Reigate","latitude":51.24195549,"longitude":-0.203824541,"stationOperator":"SN","crsCode":"REI"},{"name":"Riddlesdown","latitude":51.33266611,"longitude":-0.099446924,"stationOperator":"SN","crsCode":"RDD"},{"name":"Rye (Sussex)","latitude":50.95236602,"longitude":0.730706155,"stationOperator":"SN","crsCode":"RYE"},{"name":"Salfords (Surrey)","latitude":51.20174387,"longitude":-0.162487674,"stationOperator":"SN","crsCode":"SAF"},{"name":"Sanderstead","latitude":51.34828313,"longitude":-0.093673971,"stationOperator":"SN","crsCode":"SNR"},{"name":"Seaford (Sussex)","latitude":50.77283582,"longitude":0.100140227,"stationOperator":"SN","crsCode":"SEF"},{"name":"Selhurst","latitude":51.39169797,"longitude":-0.087945474,"stationOperator":"SN","crsCode":"SRS"},{"name":"Shoreham-by-Sea","latitude":50.83442192,"longitude":-0.271709718,"stationOperator":"SN","crsCode":"SSE"},{"name":"South Bermondsey","latitude":51.48813928,"longitude":-0.054671432,"stationOperator":"SN","crsCode":"SBM"},{"name":"South Croydon","latitude":51.36296514,"longitude":-0.093452155,"stationOperator":"SN","crsCode":"SCY"},{"name":"Southbourne","latitude":50.84826453,"longitude":-0.90811384,"stationOperator":"SN","crsCode":"SOB"},{"name":"Southease","latitude":50.83134913,"longitude":0.030650137,"stationOperator":"SN","crsCode":"SEE"},{"name":"Southwick","latitude":50.83248265,"longitude":-0.237073077,"stationOperator":"SN","crsCode":"SWK"},{"name":"Streatham (Greater London)","latitude":51.42581015,"longitude":-0.131546583,"stationOperator":"SN","crsCode":"STE"},{"name":"Streatham Common","latitude":51.41868917,"longitude":-0.136151833,"stationOperator":"SN","crsCode":"SRC"},{"name":"Streatham Hill","latitude":51.4383461,"longitude":-0.128157209,"stationOperator":"SN","crsCode":"SRH"},{"name":"Sutton (Surrey)","latitude":51.35953356,"longitude":-0.191213151,"stationOperator":"SN","crsCode":"SUO"},{"name":"Tadworth","latitude":51.29163611,"longitude":-0.23596467,"stationOperator":"SN","crsCode":"TAD"},{"name":"Tattenham Corner","latitude":51.30918237,"longitude":-0.242609371,"stationOperator":"SN","crsCode":"TAT"},{"name":"Thornton Heath","latitude":51.3992396,"longitude":-0.101001212,"stationOperator":"SN","crsCode":"TTH"},{"name":"Three Bridges","latitude":51.11691722,"longitude":-0.161183058,"stationOperator":"SN","crsCode":"TBD"},{"name":"Three Oaks","latitude":50.90088723,"longitude":0.61337309,"stationOperator":"SN","crsCode":"TOK"},{"name":"Tulse Hill","latitude":51.43977376,"longitude":-0.105075902,"stationOperator":"SN","crsCode":"TUH"},{"name":"Uckfield","latitude":50.96867258,"longitude":0.096456894,"stationOperator":"SN","crsCode":"UCK"},{"name":"Upper Warlingham","latitude":51.30851045,"longitude":-0.077947217,"stationOperator":"SN","crsCode":"UWL"},{"name":"Waddon","latitude":51.36739826,"longitude":-0.117332121,"stationOperator":"SN","crsCode":"WDO"},{"name":"Wallington","latitude":51.3603868,"longitude":-0.150830146,"stationOperator":"SN","crsCode":"WLT"},{"name":"Wandsworth Common","latitude":51.4461876,"longitude":-0.163383008,"stationOperator":"SN","crsCode":"WSW"},{"name":"Warblington","latitude":50.8534334,"longitude":-0.967150888,"stationOperator":"SN","crsCode":"WBL"},{"name":"Warnham","latitude":51.09289508,"longitude":-0.329453706,"stationOperator":"SN","crsCode":"WNH"},{"name":"West Norwood","latitude":51.43180353,"longitude":-0.103808815,"stationOperator":"SN","crsCode":"WNW"},{"name":"West Worthing","latitude":50.81834832,"longitude":-0.392977891,"stationOperator":"SN","crsCode":"WWO"},{"name":"Whyteleafe","latitude":51.30995682,"longitude":-0.081143929,"stationOperator":"SN","crsCode":"WHY"},{"name":"Whyteleafe South","latitude":51.3035526,"longitude":-0.076691014,"stationOperator":"SN","crsCode":"WHS"},{"name":"Winchelsea","latitude":50.93376133,"longitude":0.702271814,"stationOperator":"SN","crsCode":"WSE"},{"name":"Wivelsfield","latitude":50.96378293,"longitude":-0.120837577,"stationOperator":"SN","crsCode":"WVF"},{"name":"Woldingham","latitude":51.29015597,"longitude":-0.051864564,"stationOperator":"SN","crsCode":"WOH"},{"name":"Woodmansterne","latitude":51.3190192,"longitude":-0.154259672,"stationOperator":"SN","crsCode":"WME"},{"name":"Worthing","latitude":50.8184932,"longitude":-0.376163686,"stationOperator":"SN","crsCode":"WRH"},{"name":"Aberdeen","latitude":57.14304825,"longitude":-2.097480496,"stationOperator":"SR","crsCode":"ABD"},{"name":"Aberdour","latitude":56.05458044,"longitude":-3.300556443,"stationOperator":"SR","crsCode":"AUR"},{"name":"Achanalt","latitude":57.60981331,"longitude":-4.914216676,"stationOperator":"SR","crsCode":"AAT"},{"name":"Achnasheen","latitude":57.57910082,"longitude":-5.072367544,"stationOperator":"SR","crsCode":"ACN"},{"name":"Achnashellach","latitude":57.4820548,"longitude":-5.33306294,"stationOperator":"SR","crsCode":"ACH"},{"name":"Addiewell","latitude":55.84340123,"longitude":-3.606517263,"stationOperator":"SR","crsCode":"ADW"},{"name":"Airbles","latitude":55.78282474,"longitude":-3.994178739,"stationOperator":"SR","crsCode":"AIR"},{"name":"Airdrie","latitude":55.86397274,"longitude":-3.982897473,"stationOperator":"SR","crsCode":"ADR"},{"name":"Alexandra Parade","latitude":55.86366362,"longitude":-4.211419355,"stationOperator":"SR","crsCode":"AXP"},{"name":"Alexandria","latitude":55.98507321,"longitude":-4.577469118,"stationOperator":"SR","crsCode":"ALX"},{"name":"Alloa","latitude":56.11778079,"longitude":-3.79004938,"stationOperator":"SR","crsCode":"ALO"},{"name":"Alness","latitude":57.69437787,"longitude":-4.249725543,"stationOperator":"SR","crsCode":"ASS"},{"name":"Altnabreac","latitude":58.38832585,"longitude":-3.705268158,"stationOperator":"SR","crsCode":"ABC"},{"name":"Anderston","latitude":55.85986476,"longitude":-4.271929947,"stationOperator":"SR","crsCode":"AND"},{"name":"Annan","latitude":54.98383786,"longitude":-3.262584309,"stationOperator":"SR","crsCode":"ANN"},{"name":"Anniesland","latitude":55.88949536,"longitude":-4.321640769,"stationOperator":"SR","crsCode":"ANL"},{"name":"Arbroath","latitude":56.55956606,"longitude":-2.5889364,"stationOperator":"SR","crsCode":"ARB"},{"name":"Ardgay","latitude":57.88101054,"longitude":-4.362578076,"stationOperator":"SR","crsCode":"ARD"},{"name":"Ardlui","latitude":56.3019481,"longitude":-4.721642823,"stationOperator":"SR","crsCode":"AUI"},{"name":"Ardrossan Harbour","latitude":55.63986185,"longitude":-4.821105156,"stationOperator":"SR","crsCode":"ADS"},{"name":"Ardrossan South Beach","latitude":55.6414058,"longitude":-4.801205601,"stationOperator":"SR","crsCode":"ASB"},{"name":"Ardrossan Town","latitude":55.63969607,"longitude":-4.812669742,"stationOperator":"SR","crsCode":"ADN"},{"name":"Argyle Street","latitude":55.85730754,"longitude":-4.250671495,"stationOperator":"SR","crsCode":"AGS"},{"name":"Arisaig","latitude":56.9125214,"longitude":-5.839071397,"stationOperator":"SR","crsCode":"ARG"},{"name":"Armadale (West Lothian)","latitude":55.88639,"longitude":-3.685049,"stationOperator":"SR","crsCode":"ARM"},{"name":"Arrochar & Tarbet","latitude":56.2039585,"longitude":-4.722756857,"stationOperator":"SR","crsCode":"ART"},{"name":"Ashfield","latitude":55.88890808,"longitude":-4.249206392,"stationOperator":"SR","crsCode":"ASF"},{"name":"Attadale","latitude":57.39476556,"longitude":-5.456481075,"stationOperator":"SR","crsCode":"ATT"},{"name":"Auchinleck","latitude":55.47026554,"longitude":-4.295346631,"stationOperator":"SR","crsCode":"AUK"},{"name":"Aviemore","latitude":57.18905401,"longitude":-3.828333974,"stationOperator":"SR","crsCode":"AVM"},{"name":"Ayr","latitude":55.45820439,"longitude":-4.626820483,"stationOperator":"SR","crsCode":"AYR"},{"name":"Baillieston","latitude":55.84470543,"longitude":-4.114497793,"stationOperator":"SR","crsCode":"BIO"},{"name":"Balloch","latitude":56.00291529,"longitude":-4.583469732,"stationOperator":"SR","crsCode":"BHC"},{"name":"Balmossie","latitude":56.47455611,"longitude":-2.838952177,"stationOperator":"SR","crsCode":"BSI"},{"name":"Banavie","latitude":56.84328828,"longitude":-5.095416228,"stationOperator":"SR","crsCode":"BNV"},{"name":"Barassie","latitude":55.5610457,"longitude":-4.651129008,"stationOperator":"SR","crsCode":"BSS"},{"name":"Bargeddie","latitude":55.8517241,"longitude":-4.071741852,"stationOperator":"SR","crsCode":"BGI"},{"name":"Barnhill","latitude":55.87782761,"longitude":-4.223416311,"stationOperator":"SR","crsCode":"BNL"},{"name":"Barrhead","latitude":55.80373712,"longitude":-4.397280292,"stationOperator":"SR","crsCode":"BRR"},{"name":"Barrhill","latitude":55.0969965,"longitude":-4.781779564,"stationOperator":"SR","crsCode":"BRL"},{"name":"Barry Links","latitude":56.49313971,"longitude":-2.745435354,"stationOperator":"SR","crsCode":"BYL"},{"name":"Bathgate","latitude":55.89911208,"longitude":-3.640968553,"stationOperator":"SR","crsCode":"BHG"},{"name":"Bearsden","latitude":55.91714482,"longitude":-4.332896496,"stationOperator":"SR","crsCode":"BRN"},{"name":"Beasdale","latitude":56.8995283,"longitude":-5.763793188,"stationOperator":"SR","crsCode":"BSL"},{"name":"Beauly","latitude":57.47820537,"longitude":-4.469945682,"stationOperator":"SR","crsCode":"BEL"},{"name":"Bellgrove","latitude":55.85711966,"longitude":-4.225428982,"stationOperator":"SR","crsCode":"BLG"},{"name":"Bellshill","latitude":55.81655045,"longitude":-4.025178029,"stationOperator":"SR","crsCode":"BLH"},{"name":"Bishopbriggs","latitude":55.90386474,"longitude":-4.224906239,"stationOperator":"SR","crsCode":"BBG"},{"name":"Bishopton (Strathclyde)","latitude":55.9021483,"longitude":-4.50156706,"stationOperator":"SR","crsCode":"BPT"},{"name":"Blackridge","latitude":55.883679,"longitude":-3.750483,"stationOperator":"SR","crsCode":"BKR"},{"name":"Blair Atholl","latitude":56.7655294,"longitude":-3.850217553,"stationOperator":"SR","crsCode":"BLA"},{"name":"Blairhill","latitude":55.86658923,"longitude":-4.042166208,"stationOperator":"SR","crsCode":"BAI"},{"name":"Blantyre","latitude":55.79755181,"longitude":-4.086413678,"stationOperator":"SR","crsCode":"BLT"},{"name":"Bogston","latitude":55.93703054,"longitude":-4.711389983,"stationOperator":"SR","crsCode":"BGS"},{"name":"Bowling","latitude":55.93106773,"longitude":-4.493824427,"stationOperator":"SR","crsCode":"BWG"},{"name":"Branchton","latitude":55.94058491,"longitude":-4.803539699,"stationOperator":"SR","crsCode":"BCN"},{"name":"Breich","latitude":55.82730421,"longitude":-3.668117841,"stationOperator":"SR","crsCode":"BRC"},{"name":"Bridge of Allan","latitude":56.15661923,"longitude":-3.957226282,"stationOperator":"SR","crsCode":"BEA"},{"name":"Bridge of Orchy","latitude":56.51584582,"longitude":-4.762977191,"stationOperator":"SR","crsCode":"BRO"},{"name":"Bridgeton","latitude":55.84892913,"longitude":-4.22607907,"stationOperator":"SR","crsCode":"BDG"},{"name":"Brora","latitude":58.01293309,"longitude":-3.852295093,"stationOperator":"SR","crsCode":"BRA"},{"name":"Broughty Ferry","latitude":56.4671506,"longitude":-2.873149715,"stationOperator":"SR","crsCode":"BYF"},{"name":"Brunstane","latitude":55.94250459,"longitude":-3.100977841,"stationOperator":"SR","crsCode":"BSU"},{"name":"Burnside (Strathclyde)","latitude":55.81707035,"longitude":-4.203986164,"stationOperator":"SR","crsCode":"BUI"},{"name":"Burntisland","latitude":56.05706911,"longitude":-3.233192254,"stationOperator":"SR","crsCode":"BTS"},{"name":"Busby","latitude":55.78033154,"longitude":-4.262194654,"stationOperator":"SR","crsCode":"BUS"},{"name":"Caldercruix","latitude":55.88791,"longitude":-3.889788,"stationOperator":"SR","crsCode":"CAC"},{"name":"Cambuslang","latitude":55.81959915,"longitude":-4.172999527,"stationOperator":"SR","crsCode":"CBL"},{"name":"Camelon","latitude":56.00608001,"longitude":-3.817600468,"stationOperator":"SR","crsCode":"CMO"},{"name":"Cardenden","latitude":56.14124635,"longitude":-3.261636609,"stationOperator":"SR","crsCode":"CDD"},{"name":"Cardonald","latitude":55.85255382,"longitude":-4.340687563,"stationOperator":"SR","crsCode":"CDO"},{"name":"Cardross","latitude":55.96036817,"longitude":-4.653060397,"stationOperator":"SR","crsCode":"CDR"},{"name":"Carfin","latitude":55.80733107,"longitude":-3.95625467,"stationOperator":"SR","crsCode":"CRF"},{"name":"Carluke","latitude":55.73125448,"longitude":-3.848923307,"stationOperator":"SR","crsCode":"CLU"},{"name":"Carmyle","latitude":55.83433026,"longitude":-4.15817078,"stationOperator":"SR","crsCode":"CML"},{"name":"Carnoustie","latitude":56.50055432,"longitude":-2.706592848,"stationOperator":"SR","crsCode":"CAN"},{"name":"Carntyne","latitude":55.85503598,"longitude":-4.178652587,"stationOperator":"SR","crsCode":"CAY"},{"name":"Carrbridge","latitude":57.27953805,"longitude":-3.828007433,"stationOperator":"SR","crsCode":"CAG"},{"name":"Carstairs","latitude":55.69103438,"longitude":-3.668466894,"stationOperator":"SR","crsCode":"CRS"},{"name":"Cartsdyke","latitude":55.94220229,"longitude":-4.731580258,"stationOperator":"SR","crsCode":"CDY"},{"name":"Cathcart","latitude":55.81766156,"longitude":-4.260529674,"stationOperator":"SR","crsCode":"CCT"},{"name":"Charing Cross (Glasgow)","latitude":55.86466734,"longitude":-4.269812977,"stationOperator":"SR","crsCode":"CHC"},{"name":"Chatelherault","latitude":55.76520989,"longitude":-4.004661095,"stationOperator":"SR","crsCode":"CTE"},{"name":"Clarkston","latitude":55.78934082,"longitude":-4.27563799,"stationOperator":"SR","crsCode":"CKS"},{"name":"Cleland","latitude":55.80463945,"longitude":-3.910243709,"stationOperator":"SR","crsCode":"CEA"},{"name":"Clydebank","latitude":55.90067284,"longitude":-4.404218143,"stationOperator":"SR","crsCode":"CYK"},{"name":"Coatbridge Central","latitude":55.86315609,"longitude":-4.032397297,"stationOperator":"SR","crsCode":"CBC"},{"name":"Coatbridge Sunnyside","latitude":55.86690882,"longitude":-4.028277989,"stationOperator":"SR","crsCode":"CBS"},{"name":"Coatdyke","latitude":55.86433402,"longitude":-4.004970414,"stationOperator":"SR","crsCode":"COA"},{"name":"Connel Ferry","latitude":56.45233144,"longitude":-5.385427005,"stationOperator":"SR","crsCode":"CON"},{"name":"Conon Bridge","latitude":57.5617,"longitude":-4.4404,"stationOperator":"SR","crsCode":"CBD"},{"name":"Corkerhill","latitude":55.83748586,"longitude":-4.334287526,"stationOperator":"SR","crsCode":"CKH"},{"name":"Corpach","latitude":56.84280695,"longitude":-5.121947882,"stationOperator":"SR","crsCode":"CPA"},{"name":"Corrour","latitude":56.76019896,"longitude":-4.690597107,"stationOperator":"SR","crsCode":"CRR"},{"name":"Cowdenbeath","latitude":56.11208188,"longitude":-3.343182977,"stationOperator":"SR","crsCode":"COW"},{"name":"Craigendoran","latitude":55.9947777,"longitude":-4.711231697,"stationOperator":"SR","crsCode":"CGD"},{"name":"Crianlarich","latitude":56.39046001,"longitude":-4.618415436,"stationOperator":"SR","crsCode":"CNR"},{"name":"Croftfoot","latitude":55.81824958,"longitude":-4.22831733,"stationOperator":"SR","crsCode":"CFF"},{"name":"Crookston","latitude":55.84218387,"longitude":-4.365941786,"stationOperator":"SR","crsCode":"CKT"},{"name":"Crosshill","latitude":55.83326984,"longitude":-4.256804153,"stationOperator":"SR","crsCode":"COI"},{"name":"Crossmyloof","latitude":55.83393038,"longitude":-4.284311038,"stationOperator":"SR","crsCode":"CMY"},{"name":"Croy","latitude":55.95566505,"longitude":-4.035961758,"stationOperator":"SR","crsCode":"CRO"},{"name":"Culrain","latitude":57.91949459,"longitude":-4.404282053,"stationOperator":"SR","crsCode":"CUA"},{"name":"Cumbernauld","latitude":55.94201304,"longitude":-3.980318658,"stationOperator":"SR","crsCode":"CUB"},{"name":"Cupar","latitude":56.31697353,"longitude":-3.008758431,"stationOperator":"SR","crsCode":"CUP"},{"name":"Curriehill","latitude":55.90055849,"longitude":-3.318749653,"stationOperator":"SR","crsCode":"CUH"},{"name":"Dalgety Bay","latitude":56.0420829,"longitude":-3.367718989,"stationOperator":"SR","crsCode":"DAG"},{"name":"Dalmally","latitude":56.40117417,"longitude":-4.983544174,"stationOperator":"SR","crsCode":"DAL"},{"name":"Dalmarnock","latitude":55.84207011,"longitude":-4.217700309,"stationOperator":"SR","crsCode":"DAK"},{"name":"Dalmeny","latitude":55.98630536,"longitude":-3.381618779,"stationOperator":"SR","crsCode":"DAM"},{"name":"Dalmuir","latitude":55.91191657,"longitude":-4.426678018,"stationOperator":"SR","crsCode":"DMR"},{"name":"Dalreoch","latitude":55.94740397,"longitude":-4.5778481,"stationOperator":"SR","crsCode":"DLR"},{"name":"Dalry","latitude":55.70621143,"longitude":-4.711070842,"stationOperator":"SR","crsCode":"DLY"},{"name":"Dalwhinnie","latitude":56.93515882,"longitude":-4.246197968,"stationOperator":"SR","crsCode":"DLW"},{"name":"Dingwall","latitude":57.59405759,"longitude":-4.42206913,"stationOperator":"SR","crsCode":"DIN"},{"name":"Drem","latitude":56.00511747,"longitude":-2.786046322,"stationOperator":"SR","crsCode":"DRM"},{"name":"Drumchapel","latitude":55.90479898,"longitude":-4.362874204,"stationOperator":"SR","crsCode":"DMC"},{"name":"Drumfrochar","latitude":55.9412369,"longitude":-4.774756808,"stationOperator":"SR","crsCode":"DFR"},{"name":"Drumgelloch","latitude":55.86582675,"longitude":-3.954080399,"stationOperator":"SR","crsCode":"DRU"},{"name":"Drumry","latitude":55.90457891,"longitude":-4.385468258,"stationOperator":"SR","crsCode":"DMY"},{"name":"Duirinish","latitude":57.31938444,"longitude":-5.692009059,"stationOperator":"SR","crsCode":"DRN"},{"name":"Duke Street","latitude":55.85842168,"longitude":-4.213039062,"stationOperator":"SR","crsCode":"DST"},{"name":"Dumbarton Central","latitude":55.94664381,"longitude":-4.566905428,"stationOperator":"SR","crsCode":"DBC"},{"name":"Dumbarton East","latitude":55.94223566,"longitude":-4.554121225,"stationOperator":"SR","crsCode":"DBE"},{"name":"Dumbreck","latitude":55.84501703,"longitude":-4.300936223,"stationOperator":"SR","crsCode":"DUM"},{"name":"Dumfries","latitude":55.07255321,"longitude":-3.604300326,"stationOperator":"SR","crsCode":"DMF"},{"name":"Dunbar","latitude":55.99828768,"longitude":-2.513352988,"stationOperator":"SR","crsCode":"DUN"},{"name":"Dunblane","latitude":56.18587463,"longitude":-3.965483792,"stationOperator":"SR","crsCode":"DBL"},{"name":"Duncraig","latitude":57.33708399,"longitude":-5.63692547,"stationOperator":"SR","crsCode":"DCG"},{"name":"Dundee","latitude":56.45647618,"longitude":-2.971204807,"stationOperator":"SR","crsCode":"DEE"},{"name":"Dunfermline Queen Margaret","latitude":56.08056397,"longitude":-3.421467431,"stationOperator":"SR","crsCode":"DFL"},{"name":"Dunfermline Town","latitude":56.06817924,"longitude":-3.452529288,"stationOperator":"SR","crsCode":"DFE"},{"name":"Dunkeld & Birnam","latitude":56.5570421,"longitude":-3.578399065,"stationOperator":"SR","crsCode":"DKD"},{"name":"Dunlop","latitude":55.71187096,"longitude":-4.532374915,"stationOperator":"SR","crsCode":"DNL"},{"name":"Dunrobin Castle","latitude":57.98559779,"longitude":-3.949447893,"stationOperator":"SR","crsCode":"DNO"},{"name":"Dyce","latitude":57.20564178,"longitude":-2.192327933,"stationOperator":"SR","crsCode":"DYC"},{"name":"East Kilbride","latitude":55.76599496,"longitude":-4.180218692,"stationOperator":"SR","crsCode":"EKL"},{"name":"Easterhouse","latitude":55.85974135,"longitude":-4.107164856,"stationOperator":"SR","crsCode":"EST"},{"name":"Edinburgh Park","latitude":55.92754466,"longitude":-3.307661937,"stationOperator":"SR","crsCode":"EDP"},{"name":"Elgin","latitude":57.6428985,"longitude":-3.311246353,"stationOperator":"SR","crsCode":"ELG"},{"name":"Eskbank","latitude":55.883801,"longitude":-3.0314367,"stationOperator":"SR","crsCode":"EKB"},{"name":"Exhibition Centre (Glasgow)","latitude":55.86153645,"longitude":-4.283582169,"stationOperator":"SR","crsCode":"EXG"},{"name":"Fairlie","latitude":55.75192633,"longitude":-4.853261694,"stationOperator":"SR","crsCode":"FRL"},{"name":"Falkirk Grahamston","latitude":56.0026016,"longitude":-3.785040515,"stationOperator":"SR","crsCode":"FKG"},{"name":"Falkirk High","latitude":55.99180314,"longitude":-3.792238796,"stationOperator":"SR","crsCode":"FKK"},{"name":"Falls of Cruachan","latitude":56.39386845,"longitude":-5.112457321,"stationOperator":"SR","crsCode":"FOC"},{"name":"Fauldhouse","latitude":55.82246535,"longitude":-3.719312799,"stationOperator":"SR","crsCode":"FLD"},{"name":"Fearn","latitude":57.77809525,"longitude":-3.993733544,"stationOperator":"SR","crsCode":"FRN"},{"name":"Forres","latitude":57.60978469,"longitude":-3.625959214,"stationOperator":"SR","crsCode":"FOR"},{"name":"Forsinard","latitude":58.35688312,"longitude":-3.89689083,"stationOperator":"SR","crsCode":"FRS"},{"name":"Fort Matilda","latitude":55.95902085,"longitude":-4.795258693,"stationOperator":"SR","crsCode":"FTM"},{"name":"Fort William","latitude":56.82042348,"longitude":-5.106134421,"stationOperator":"SR","crsCode":"FTW"},{"name":"Galashiels","latitude":-2.8063991,"longitude":55.617786,"stationOperator":"SR","crsCode":"GAL"},{"name":"Garelochhead","latitude":56.07984842,"longitude":-4.825707052,"stationOperator":"SR","crsCode":"GCH"},{"name":"Garrowhill","latitude":55.85522344,"longitude":-4.12944961,"stationOperator":"SR","crsCode":"GAR"},{"name":"Garscadden","latitude":55.88768109,"longitude":-4.365000058,"stationOperator":"SR","crsCode":"GRS"},{"name":"Gartcosh","latitude":55.88564646,"longitude":-4.079481648,"stationOperator":"SR","crsCode":"GRH"},{"name":"Garve","latitude":57.61302353,"longitude":-4.688400522,"stationOperator":"SR","crsCode":"GVE"},{"name":"Georgemas Junction","latitude":58.51361058,"longitude":-3.452134326,"stationOperator":"SR","crsCode":"GGJ"},{"name":"Giffnock","latitude":55.80401725,"longitude":-4.293569377,"stationOperator":"SR","crsCode":"GFN"},{"name":"Gilshochill","latitude":55.89728307,"longitude":-4.282003342,"stationOperator":"SR","crsCode":"GSC"},{"name":"Girvan","latitude":55.2463088,"longitude":-4.848380748,"stationOperator":"SR","crsCode":"GIR"},{"name":"Glasgow Queen Street","latitude":55.86232293,"longitude":-4.250657943,"stationOperator":"SR","crsCode":"GLQ"},{"name":"Gleneagles","latitude":56.27483656,"longitude":-3.731158525,"stationOperator":"SR","crsCode":"GLE"},{"name":"Glenfinnan","latitude":56.87238389,"longitude":-5.449620214,"stationOperator":"SR","crsCode":"GLF"},{"name":"Glengarnock","latitude":55.73887969,"longitude":-4.674491627,"stationOperator":"SR","crsCode":"GLG"},{"name":"Glenrothes with Thornton","latitude":56.16234823,"longitude":-3.143006549,"stationOperator":"SR","crsCode":"GLT"},{"name":"Golf Street","latitude":56.49778468,"longitude":-2.719536374,"stationOperator":"SR","crsCode":"GOF"},{"name":"Golspie","latitude":57.97145203,"longitude":-3.986876414,"stationOperator":"SR","crsCode":"GOL"},{"name":"Gorebridge","latitude":55.839779,"longitude":-3.0474629,"stationOperator":"SR","crsCode":"GBG"},{"name":"Gourock","latitude":55.96229993,"longitude":-4.816648842,"stationOperator":"SR","crsCode":"GRK"},{"name":"Greenfaulds","latitude":55.94532922,"longitude":-4.75262409,"stationOperator":"SR","crsCode":"GRL"},{"name":"Greenock Central","latitude":55.94532922,"longitude":-4.75262409,"stationOperator":"SR","crsCode":"GKC"},{"name":"Greenock West","latitude":55.94732563,"longitude":-4.76782372,"stationOperator":"SR","crsCode":"GKW"},{"name":"Gretna Green","latitude":55.00190839,"longitude":-3.064593507,"stationOperator":"SR","crsCode":"GEA"},{"name":"Hairmyres","latitude":55.76195707,"longitude":-4.220003661,"stationOperator":"SR","crsCode":"HMY"},{"name":"Hamilton Central","latitude":55.77318497,"longitude":-4.038872459,"stationOperator":"SR","crsCode":"HNC"},{"name":"Hamilton West","latitude":55.77895186,"longitude":-4.054163603,"stationOperator":"SR","crsCode":"HNW"},{"name":"Hartwood","latitude":55.81147256,"longitude":-3.839319533,"stationOperator":"SR","crsCode":"HTW"},{"name":"Hawkhead","latitude":55.8421756,"longitude":-4.398847672,"stationOperator":"SR","crsCode":"HKH"},{"name":"Haymarket","latitude":55.945802,"longitude":-3.218444586,"stationOperator":"SR","crsCode":"HYM"},{"name":"Helensburgh Central","latitude":56.00419011,"longitude":-4.732746326,"stationOperator":"SR","crsCode":"HLC"},{"name":"Helensburgh Upper","latitude":56.01234544,"longitude":-4.729792381,"stationOperator":"SR","crsCode":"HLU"},{"name":"Helmsdale","latitude":58.11773408,"longitude":-3.65904757,"stationOperator":"SR","crsCode":"HMS"},{"name":"High Street (Glasgow)","latitude":55.8595495,"longitude":-4.240110183,"stationOperator":"SR","crsCode":"HST"},{"name":"Hillfoot","latitude":55.9200798,"longitude":-4.320268221,"stationOperator":"SR","crsCode":"HLF"},{"name":"Hillington East","latitude":55.85471276,"longitude":-4.354719114,"stationOperator":"SR","crsCode":"HLE"},{"name":"Hillington West","latitude":55.85600676,"longitude":-4.371575959,"stationOperator":"SR","crsCode":"HLW"},{"name":"Holytown","latitude":55.81289048,"longitude":-3.973914426,"stationOperator":"SR","crsCode":"HLY"},{"name":"Howwood (Renfrewshire)","latitude":55.8105493,"longitude":-4.563043704,"stationOperator":"SR","crsCode":"HOZ"},{"name":"Huntly","latitude":57.444314,"longitude":-2.776356684,"stationOperator":"SR","crsCode":"HNT"},{"name":"Hyndland","latitude":55.87974019,"longitude":-4.31466261,"stationOperator":"SR","crsCode":"HYN"},{"name":"IBM Halt","latitude":55.92943602,"longitude":-4.827232334,"stationOperator":"SR","crsCode":"IBM"},{"name":"Insch","latitude":57.3374863,"longitude":-2.617112197,"stationOperator":"SR","crsCode":"INS"},{"name":"Invergordon","latitude":57.68848692,"longitude":-4.175538138,"stationOperator":"SR","crsCode":"IGD"},{"name":"Invergowrie","latitude":56.45646374,"longitude":-3.057400408,"stationOperator":"SR","crsCode":"ING"},{"name":"Inverkeithing","latitude":56.03466521,"longitude":-3.396186138,"stationOperator":"SR","crsCode":"INK"},{"name":"Inverkip","latitude":55.90609286,"longitude":-4.87257992,"stationOperator":"SR","crsCode":"INP"},{"name":"Inverness","latitude":57.48010225,"longitude":-4.223186338,"stationOperator":"SR","crsCode":"INV"},{"name":"Invershin","latitude":57.92488509,"longitude":-4.399575827,"stationOperator":"SR","crsCode":"INH"},{"name":"Inverurie","latitude":57.28626199,"longitude":-2.373553146,"stationOperator":"SR","crsCode":"INR"},{"name":"Irvine","latitude":55.6108626,"longitude":-4.675136283,"stationOperator":"SR","crsCode":"IRV"},{"name":"Johnstone (Strathclyde)","latitude":55.83469425,"longitude":-4.503621119,"stationOperator":"SR","crsCode":"JHN"},{"name":"Jordanhill","latitude":55.8822227,"longitude":-4.326003522,"stationOperator":"SR","crsCode":"JOR"},{"name":"Keith","latitude":57.55089374,"longitude":-2.954076816,"stationOperator":"SR","crsCode":"KEH"},{"name":"Kelvindale","latitude":55.89358274,"longitude":-4.309808848,"stationOperator":"SR","crsCode":"KVD"},{"name":"Kennishead","latitude":55.81304263,"longitude":-4.325066123,"stationOperator":"SR","crsCode":"KNS"},{"name":"Kildonan","latitude":58.17132307,"longitude":-3.869995441,"stationOperator":"SR","crsCode":"KIL"},{"name":"Kilmarnock","latitude":55.61210574,"longitude":-4.498670613,"stationOperator":"SR","crsCode":"KMK"},{"name":"Kilmaurs","latitude":55.63719684,"longitude":-4.53047696,"stationOperator":"SR","crsCode":"KLM"},{"name":"Kilpatrick","latitude":55.92468944,"longitude":-4.453393762,"stationOperator":"SR","crsCode":"KPT"},{"name":"Kilwinning","latitude":55.65594103,"longitude":-4.710010141,"stationOperator":"SR","crsCode":"KWN"},{"name":"Kinbrace","latitude":58.25830535,"longitude":-3.941050618,"stationOperator":"SR","crsCode":"KBC"},{"name":"Kinghorn","latitude":56.06932621,"longitude":-3.17414684,"stationOperator":"SR","crsCode":"KGH"},{"name":"Kings Park","latitude":55.81988233,"longitude":-4.247248478,"stationOperator":"SR","crsCode":"KGP"},{"name":"Kingsknowe","latitude":55.91926752,"longitude":-3.265617893,"stationOperator":"SR","crsCode":"KGE"},{"name":"Kingussie","latitude":57.07776559,"longitude":-4.052184734,"stationOperator":"SR","crsCode":"KIN"},{"name":"Kirkcaldy","latitude":56.11204798,"longitude":-3.1670206,"stationOperator":"SR","crsCode":"KDY"},{"name":"Kirkconnel","latitude":55.38830158,"longitude":-3.998490325,"stationOperator":"SR","crsCode":"KRK"},{"name":"Kirkhill","latitude":55.81410272,"longitude":-4.168702723,"stationOperator":"SR","crsCode":"KKH"},{"name":"Kirknewton","latitude":55.8886839,"longitude":-3.432513177,"stationOperator":"SR","crsCode":"KKN"},{"name":"Kirkwood","latitude":55.85418229,"longitude":-4.048385591,"stationOperator":"SR","crsCode":"KWD"},{"name":"Kyle of Lochalsh","latitude":57.27974817,"longitude":-5.713815801,"stationOperator":"SR","crsCode":"KYL"},{"name":"Ladybank","latitude":56.27377597,"longitude":-3.122265019,"stationOperator":"SR","crsCode":"LDY"},{"name":"Lairg","latitude":58.00159502,"longitude":-4.400985065,"stationOperator":"SR","crsCode":"LRG"},{"name":"Lanark","latitude":55.67307101,"longitude":-3.772865657,"stationOperator":"SR","crsCode":"LNK"},{"name":"Langbank","latitude":55.92450786,"longitude":-4.58526005,"stationOperator":"SR","crsCode":"LGB"},{"name":"Langside","latitude":55.82112633,"longitude":-4.277334114,"stationOperator":"SR","crsCode":"LGS"},{"name":"Larbert","latitude":56.02269305,"longitude":-3.830576234,"stationOperator":"SR","crsCode":"LBT"},{"name":"Largs","latitude":55.79272838,"longitude":-4.867191898,"stationOperator":"SR","crsCode":"LAR"},{"name":"Larkhall","latitude":55.73858564,"longitude":-3.975497722,"stationOperator":"SR","crsCode":"LRH"},{"name":"Laurencekirk","latitude":56.828662,"longitude":-2.478447,"stationOperator":"SR","crsCode":"LAU"},{"name":"Lenzie","latitude":55.92130529,"longitude":-4.1538798,"stationOperator":"SR","crsCode":"LNZ"},{"name":"Leuchars (for St. Andrews)","latitude":56.37509038,"longitude":-2.89371168,"stationOperator":"SR","crsCode":"LEU"},{"name":"Linlithgow","latitude":55.97643947,"longitude":-3.595841381,"stationOperator":"SR","crsCode":"LIN"},{"name":"Livingston North","latitude":55.90137746,"longitude":-3.544339538,"stationOperator":"SR","crsCode":"LSN"},{"name":"Livingston South","latitude":55.87168588,"longitude":-3.501556828,"stationOperator":"SR","crsCode":"LVG"},{"name":"Loch Awe","latitude":56.40200122,"longitude":-5.041969116,"stationOperator":"SR","crsCode":"LHA"},{"name":"Loch Eil Outward Bound","latitude":56.85524832,"longitude":-5.191569775,"stationOperator":"SR","crsCode":"LHE"},{"name":"Lochailort","latitude":56.88094612,"longitude":-5.663384877,"stationOperator":"SR","crsCode":"LCL"},{"name":"Locheilside","latitude":56.8553877,"longitude":-5.290032463,"stationOperator":"SR","crsCode":"LCS"},{"name":"Lochgelly","latitude":56.13532052,"longitude":-3.312935958,"stationOperator":"SR","crsCode":"LCG"},{"name":"Lochluichart","latitude":57.62117076,"longitude":-4.809599793,"stationOperator":"SR","crsCode":"LCC"},{"name":"Lochwinnoch","latitude":55.78714041,"longitude":-4.616062634,"stationOperator":"SR","crsCode":"LHW"},{"name":"Lockerbie","latitude":55.12305093,"longitude":-3.353538081,"stationOperator":"SR","crsCode":"LOC"},{"name":"Longniddry","latitude":55.9764786,"longitude":-2.888344638,"stationOperator":"SR","crsCode":"LND"},{"name":"Mallaig","latitude":57.00596656,"longitude":-5.829589323,"stationOperator":"SR","crsCode":"MLG"},{"name":"Markinch","latitude":56.2010078,"longitude":-3.130777483,"stationOperator":"SR","crsCode":"MNC"},{"name":"Maryhill","latitude":55.89714547,"longitude":-4.301942516,"stationOperator":"SR","crsCode":"MYH"},{"name":"Maxwell Park","latitude":55.83771381,"longitude":-4.288685601,"stationOperator":"SR","crsCode":"MAX"},{"name":"Maybole","latitude":55.35472644,"longitude":-4.68528221,"stationOperator":"SR","crsCode":"MAY"},{"name":"Merryton","latitude":55.74869713,"longitude":-3.978239595,"stationOperator":"SR","crsCode":"MEY"},{"name":"Milliken Park","latitude":55.82509709,"longitude":-4.533342722,"stationOperator":"SR","crsCode":"MIN"},{"name":"Milngavie","latitude":55.94084886,"longitude":-4.315104558,"stationOperator":"SR","crsCode":"MLN"},{"name":"Monifieth","latitude":56.48010302,"longitude":-2.818243249,"stationOperator":"SR","crsCode":"MON"},{"name":"Montrose","latitude":56.71278581,"longitude":-2.472074707,"stationOperator":"SR","crsCode":"MTS"},{"name":"Morar","latitude":56.96969552,"longitude":-5.821910524,"stationOperator":"SR","crsCode":"MRR"},{"name":"Mosspark","latitude":55.84082364,"longitude":-4.347809296,"stationOperator":"SR","crsCode":"MPK"},{"name":"Motherwell","latitude":55.79166603,"longitude":-3.994311557,"stationOperator":"SR","crsCode":"MTH"},{"name":"Mount Florida","latitude":55.82679274,"longitude":-4.262017463,"stationOperator":"SR","crsCode":"MFL"},{"name":"Mount Vernon","latitude":55.83982986,"longitude":-4.136593827,"stationOperator":"SR","crsCode":"MTV"},{"name":"Muir of Ord","latitude":57.51791206,"longitude":-4.460939805,"stationOperator":"SR","crsCode":"MOO"},{"name":"Muirend","latitude":55.81040572,"longitude":-4.273834935,"stationOperator":"SR","crsCode":"MUI"},{"name":"Musselburgh","latitude":55.93358441,"longitude":-3.073191904,"stationOperator":"SR","crsCode":"MUB"},{"name":"Nairn","latitude":57.58012963,"longitude":-3.872998212,"stationOperator":"SR","crsCode":"NRN"},{"name":"Neilston","latitude":55.78303028,"longitude":-4.426950811,"stationOperator":"SR","crsCode":"NEI"},{"name":"New Cumnock","latitude":55.40272967,"longitude":-4.184335551,"stationOperator":"SR","crsCode":"NCK"},{"name":"Newcraighall","latitude":55.93485014,"longitude":-3.092756701,"stationOperator":"SR","crsCode":"NEW"},{"name":"Newton (Lanark)","latitude":55.81877088,"longitude":-4.133044742,"stationOperator":"SR","crsCode":"NTN"},{"name":"Newtongrange","latitude":55.864925,"longitude":-3.0685446,"stationOperator":"SR","crsCode":"NEG"},{"name":"Newtonmore","latitude":57.05912906,"longitude":-4.119103389,"stationOperator":"SR","crsCode":"NWR"},{"name":"Newton-on-Ayr","latitude":55.47404673,"longitude":-4.625817279,"stationOperator":"SR","crsCode":"NOA"},{"name":"Nitshill","latitude":55.81191946,"longitude":-4.359954594,"stationOperator":"SR","crsCode":"NIT"},{"name":"North Berwick","latitude":56.0570324,"longitude":-2.730738187,"stationOperator":"SR","crsCode":"NBW"},{"name":"North Queensferry","latitude":56.01248816,"longitude":-3.394583946,"stationOperator":"SR","crsCode":"NQU"},{"name":"Oban","latitude":56.41246429,"longitude":-5.473920404,"stationOperator":"SR","crsCode":"OBN"},{"name":"Paisley Canal","latitude":55.84006858,"longitude":-4.423795846,"stationOperator":"SR","crsCode":"PCN"},{"name":"Paisley Gilmour Street","latitude":55.84733502,"longitude":-4.424503877,"stationOperator":"SR","crsCode":"PYG"},{"name":"Paisley St James","latitude":55.85210338,"longitude":-4.442440916,"stationOperator":"SR","crsCode":"PYJ"},{"name":"Partick","latitude":55.86987384,"longitude":-4.30880039,"stationOperator":"SR","crsCode":"PTK"},{"name":"Patterton","latitude":55.79038666,"longitude":-4.334882502,"stationOperator":"SR","crsCode":"PTT"},{"name":"Perth","latitude":56.39268166,"longitude":-3.4400422,"stationOperator":"SR","crsCode":"PTH"},{"name":"Pitlochry","latitude":56.70249117,"longitude":-3.735573831,"stationOperator":"SR","crsCode":"PIT"},{"name":"Plockton","latitude":57.3335421,"longitude":-5.666000294,"stationOperator":"SR","crsCode":"PLK"},{"name":"Pollokshaws East","latitude":55.82470459,"longitude":-4.287442409,"stationOperator":"SR","crsCode":"PWE"},{"name":"Pollokshaws West","latitude":55.82381126,"longitude":-4.30159977,"stationOperator":"SR","crsCode":"PWW"},{"name":"Pollokshields East","latitude":55.84105199,"longitude":-4.268595988,"stationOperator":"SR","crsCode":"PLE"},{"name":"Pollokshields West","latitude":55.83768428,"longitude":-4.27574678,"stationOperator":"SR","crsCode":"PLW"},{"name":"Polmont","latitude":55.98472465,"longitude":-3.714965487,"stationOperator":"SR","crsCode":"PMT"},{"name":"Port Glasgow","latitude":55.93350378,"longitude":-4.689814129,"stationOperator":"SR","crsCode":"PTG"},{"name":"Portlethen","latitude":57.06136367,"longitude":-2.126616063,"stationOperator":"SR","crsCode":"PLN"},{"name":"Possilpark & Parkhouse","latitude":55.89022945,"longitude":-4.25803113,"stationOperator":"SR","crsCode":"PPK"},{"name":"Prestonpans","latitude":55.95309226,"longitude":-2.974772045,"stationOperator":"SR","crsCode":"PST"},{"name":"Prestwick Town","latitude":55.50169183,"longitude":-4.615146801,"stationOperator":"SR","crsCode":"PTW"},{"name":"Priesthill & Darnley","latitude":55.81216496,"longitude":-4.342890613,"stationOperator":"SR","crsCode":"PTL"},{"name":"Queens Park (Glasgow)","latitude":55.83568277,"longitude":-4.26732499,"stationOperator":"SR","crsCode":"QPK"},{"name":"Rannoch","latitude":56.68602884,"longitude":-4.576863849,"stationOperator":"SR","crsCode":"RAN"},{"name":"Renton","latitude":55.97042084,"longitude":-4.586110938,"stationOperator":"SR","crsCode":"RTN"},{"name":"Rogart","latitude":57.98869553,"longitude":-4.158188999,"stationOperator":"SR","crsCode":"ROG"},{"name":"Rosyth","latitude":56.04550554,"longitude":-3.427306152,"stationOperator":"SR","crsCode":"ROS"},{"name":"Roy Bridge","latitude":56.88834445,"longitude":-4.837241562,"stationOperator":"SR","crsCode":"RYB"},{"name":"Rutherglen","latitude":55.83058595,"longitude":-4.212096258,"stationOperator":"SR","crsCode":"RUT"},{"name":"Saltcoats","latitude":55.63387161,"longitude":-4.784284143,"stationOperator":"SR","crsCode":"SLT"},{"name":"Sanquhar","latitude":55.37016496,"longitude":-3.924523151,"stationOperator":"SR","crsCode":"SQH"},{"name":"Scotscalder","latitude":58.48297756,"longitude":-3.552066936,"stationOperator":"SR","crsCode":"SCT"},{"name":"Scotstounhill","latitude":55.8851271,"longitude":-4.352883014,"stationOperator":"SR","crsCode":"SCH"},{"name":"Shawfair","latitude":55.915359,"longitude":-3.0884433,"stationOperator":"SR","crsCode":"SFI"},{"name":"Shawlands","latitude":55.82919724,"longitude":-4.29233699,"stationOperator":"SR","crsCode":"SHL"},{"name":"Shettleston","latitude":55.85352186,"longitude":-4.160033636,"stationOperator":"SR","crsCode":"SLS"},{"name":"Shieldmuir","latitude":55.77748196,"longitude":-3.956991069,"stationOperator":"SR","crsCode":"SDM"},{"name":"Shotts","latitude":55.81863947,"longitude":-3.798315601,"stationOperator":"SR","crsCode":"SHS"},{"name":"Singer","latitude":55.90765879,"longitude":-4.405482609,"stationOperator":"SR","crsCode":"SIN"},{"name":"Slateford","latitude":55.92668195,"longitude":-3.243452507,"stationOperator":"SR","crsCode":"SLA"},{"name":"South Gyle","latitude":55.93634763,"longitude":-3.299473655,"stationOperator":"SR","crsCode":"SGL"},{"name":"Spean Bridge","latitude":56.8899942,"longitude":-4.921608593,"stationOperator":"SR","crsCode":"SBR"},{"name":"Springburn","latitude":55.88169718,"longitude":-4.228114663,"stationOperator":"SR","crsCode":"SPR"},{"name":"Springfield","latitude":56.29495602,"longitude":-3.052451731,"stationOperator":"SR","crsCode":"SPF"},{"name":"Stepps","latitude":55.889898,"longitude":-4.14078439,"stationOperator":"SR","crsCode":"SPS"},{"name":"Stevenston","latitude":55.63426825,"longitude":-4.750782413,"stationOperator":"SR","crsCode":"STV"},{"name":"Stewarton","latitude":55.68214404,"longitude":-4.518043445,"stationOperator":"SR","crsCode":"STT"},{"name":"Stirling","latitude":56.11979974,"longitude":-3.935616947,"stationOperator":"SR","crsCode":"STG"},{"name":"Stonehaven","latitude":56.96681762,"longitude":-2.225305286,"stationOperator":"SR","crsCode":"STN"},{"name":"Stow","latitude":55.691624,"longitude":-2.8654726,"stationOperator":"SR","crsCode":"SOI"},{"name":"Stranraer","latitude":54.90959858,"longitude":-5.024729131,"stationOperator":"SR","crsCode":"STR"},{"name":"Strathcarron","latitude":57.42276127,"longitude":-5.428811191,"stationOperator":"SR","crsCode":"STC"},{"name":"Stromeferry","latitude":57.35235059,"longitude":-5.549452918,"stationOperator":"SR","crsCode":"STF"},{"name":"Summerston","latitude":55.89905346,"longitude":-4.291689497,"stationOperator":"SR","crsCode":"SUM"},{"name":"Tain","latitude":57.81427038,"longitude":-4.052128422,"stationOperator":"SR","crsCode":"TAI"},{"name":"Taynuilt","latitude":56.43078559,"longitude":-5.239592133,"stationOperator":"SR","crsCode":"TAY"},{"name":"Thornliebank","latitude":55.81086816,"longitude":-4.311688912,"stationOperator":"SR","crsCode":"THB"},{"name":"Thorntonhall","latitude":55.76867034,"longitude":-4.251155831,"stationOperator":"SR","crsCode":"THT"},{"name":"Thurso","latitude":58.58998665,"longitude":-3.527556041,"stationOperator":"SR","crsCode":"THS"},{"name":"Troon","latitude":55.54279764,"longitude":-4.655290297,"stationOperator":"SR","crsCode":"TRN"},{"name":"Tulloch","latitude":56.88425855,"longitude":-4.701316764,"stationOperator":"SR","crsCode":"TUL"},{"name":"Tweedbank","latitude":55.604801,"longitude":-2.7598488,"stationOperator":"SR","crsCode":"TWB"},{"name":"Tyndrum Lower","latitude":56.43332737,"longitude":-4.714805349,"stationOperator":"SR","crsCode":"TYL"},{"name":"Uddingston","latitude":55.82352079,"longitude":-4.08668628,"stationOperator":"SR","crsCode":"UDD"},{"name":"Uphall","latitude":55.91903662,"longitude":-3.502106809,"stationOperator":"SR","crsCode":"UHA"},{"name":"Upper Tyndrum","latitude":56.43464844,"longitude":-4.703705412,"stationOperator":"SR","crsCode":"UTY"},{"name":"Wallyford","latitude":55.9402781,"longitude":-3.014939754,"stationOperator":"SR","crsCode":"WAF"},{"name":"Wemyss Bay","latitude":55.87613182,"longitude":-4.889074359,"stationOperator":"SR","crsCode":"WMS"},{"name":"West Calder","latitude":55.85379587,"longitude":-3.567006408,"stationOperator":"SR","crsCode":"WCL"},{"name":"West Kilbride","latitude":55.69614641,"longitude":-4.851740821,"stationOperator":"SR","crsCode":"WKB"},{"name":"Wester Hailes","latitude":55.91431124,"longitude":-3.284336393,"stationOperator":"SR","crsCode":"WTA"},{"name":"Westerton","latitude":55.90479398,"longitude":-4.334874626,"stationOperator":"SR","crsCode":"WES"},{"name":"Whifflet","latitude":55.85368534,"longitude":-4.018641637,"stationOperator":"SR","crsCode":"WFF"},{"name":"Whinhill","latitude":55.93836064,"longitude":-4.746684343,"stationOperator":"SR","crsCode":"WNL"},{"name":"Whitecraigs","latitude":55.79031473,"longitude":-4.310151868,"stationOperator":"SR","crsCode":"WCR"},{"name":"Wick","latitude":58.44168704,"longitude":-3.097981057,"stationOperator":"SR","crsCode":"WCK"},{"name":"Williamwood","latitude":55.79410512,"longitude":-4.290114846,"stationOperator":"SR","crsCode":"WLM"},{"name":"Wishaw","latitude":55.77203337,"longitude":-3.926425243,"stationOperator":"SR","crsCode":"WSH"},{"name":"Woodhall","latitude":55.9311949,"longitude":-4.655388489,"stationOperator":"SR","crsCode":"WDL"},{"name":"Yoker","latitude":55.89273102,"longitude":-4.387412084,"stationOperator":"SR","crsCode":"YOK"},{"name":"Addlestone","latitude":51.37304695,"longitude":-0.484448913,"stationOperator":"SW","crsCode":"ASN"},{"name":"Aldershot","latitude":51.24641674,"longitude":-0.759860484,"stationOperator":"SW","crsCode":"AHT"},{"name":"Alton","latitude":51.15196497,"longitude":-0.966920228,"stationOperator":"SW","crsCode":"AON"},{"name":"Andover","latitude":51.21154584,"longitude":-1.49223998,"stationOperator":"SW","crsCode":"ADV"},{"name":"Ascot (Berks)","latitude":51.40624634,"longitude":-0.675830536,"stationOperator":"SW","crsCode":"ACT"},{"name":"Ash","latitude":51.24959566,"longitude":-0.712804737,"stationOperator":"SW","crsCode":"ASH"},{"name":"Ash Vale","latitude":51.27224595,"longitude":-0.72164797,"stationOperator":"SW","crsCode":"AHV"},{"name":"Ashford (Surrey)","latitude":51.43651024,"longitude":-0.468062256,"stationOperator":"SW","crsCode":"AFS"},{"name":"Ashurst New Forest","latitude":50.88984033,"longitude":-1.526640531,"stationOperator":"SW","crsCode":"ANF"},{"name":"Axminster","latitude":50.7785826,"longitude":-3.00522804,"stationOperator":"SW","crsCode":"AXM"},{"name":"Bagshot","latitude":51.36436905,"longitude":-0.688659892,"stationOperator":"SW","crsCode":"BAG"},{"name":"Barnes","latitude":51.46706806,"longitude":-0.240724454,"stationOperator":"SW","crsCode":"BNS"},{"name":"Barnes Bridge","latitude":51.47173404,"longitude":-0.252064268,"stationOperator":"SW","crsCode":"BNI"},{"name":"Basingstoke","latitude":51.26835654,"longitude":-1.087259112,"stationOperator":"SW","crsCode":"BSK"},{"name":"Beaulieu Road","latitude":50.85503752,"longitude":-1.504758891,"stationOperator":"SW","crsCode":"BEU"},{"name":"Bedhampton","latitude":50.85394444,"longitude":-0.995823664,"stationOperator":"SW","crsCode":"BDH"},{"name":"Bentley (Hants)","latitude":51.18122986,"longitude":-0.868130903,"stationOperator":"SW","crsCode":"BTY"},{"name":"Berrylands","latitude":51.39904691,"longitude":-0.28071427,"stationOperator":"SW","crsCode":"BRS"},{"name":"Bitterne","latitude":50.91844496,"longitude":-1.376987648,"stationOperator":"SW","crsCode":"BTE"},{"name":"Bookham","latitude":51.28873731,"longitude":-0.384010514,"stationOperator":"SW","crsCode":"BKA"},{"name":"Botley","latitude":50.91680133,"longitude":-1.258806196,"stationOperator":"SW","crsCode":"BOE"},{"name":"Bournemouth","latitude":50.72752854,"longitude":-1.863941342,"stationOperator":"SW","crsCode":"BMH"},{"name":"Bracknell","latitude":51.41309494,"longitude":-0.751703019,"stationOperator":"SW","crsCode":"BCE"},{"name":"Branksome","latitude":50.72757992,"longitude":-1.919197826,"stationOperator":"SW","crsCode":"BSM"},{"name":"Brentford","latitude":51.48785748,"longitude":-0.309064381,"stationOperator":"SW","crsCode":"BFD"},{"name":"Brockenhurst","latitude":50.81682895,"longitude":-1.573542545,"stationOperator":"SW","crsCode":"BCU"},{"name":"Brookwood","latitude":51.30375762,"longitude":-0.635744681,"stationOperator":"SW","crsCode":"BKO"},{"name":"Bursledon","latitude":50.88438037,"longitude":-1.305281384,"stationOperator":"SW","crsCode":"BUO"},{"name":"Byfleet & New Haw","latitude":51.34979727,"longitude":-0.481381942,"stationOperator":"SW","crsCode":"BFN"},{"name":"Camberley","latitude":51.33645865,"longitude":-0.744669753,"stationOperator":"SW","crsCode":"CAM"},{"name":"Chandlers Ford","latitude":50.98299772,"longitude":-1.384401049,"stationOperator":"SW","crsCode":"CFR"},{"name":"Chertsey","latitude":51.38716506,"longitude":-0.509665587,"stationOperator":"SW","crsCode":"CHY"},{"name":"Chessington North","latitude":51.36426238,"longitude":-0.300405044,"stationOperator":"SW","crsCode":"CSN"},{"name":"Chessington South","latitude":51.35655091,"longitude":-0.308159205,"stationOperator":"SW","crsCode":"CSS"},{"name":"Chiswick","latitude":51.48114063,"longitude":-0.267834947,"stationOperator":"SW","crsCode":"CHK"},{"name":"Christchurch","latitude":50.73820038,"longitude":-1.784549578,"stationOperator":"SW","crsCode":"CHR"},{"name":"Clandon","latitude":51.26400351,"longitude":-0.502759414,"stationOperator":"SW","crsCode":"CLA"},{"name":"Clapham Junction","latitude":51.46419065,"longitude":-0.170247351,"stationOperator":"SW","crsCode":"CLJ"},{"name":"Claygate","latitude":51.36121463,"longitude":-0.348236165,"stationOperator":"SW","crsCode":"CLG"},{"name":"Cobham & Stoke d'Abernon","latitude":51.31810024,"longitude":-0.389336167,"stationOperator":"SW","crsCode":"CSD"},{"name":"Cosham","latitude":50.84208432,"longitude":-1.06754988,"stationOperator":"SW","crsCode":"CSA"},{"name":"Cranbrook (Devon)","latitude":50.749689,"longitude":-3.4222744,"stationOperator":"SW","crsCode":"CBK"},{"name":"Crewkerne","latitude":50.87203517,"longitude":-2.778487421,"stationOperator":"SW","crsCode":"CKN"},{"name":"Datchet","latitude":51.48308149,"longitude":-0.579416012,"stationOperator":"SW","crsCode":"DAT"},{"name":"Dorchester South","latitude":50.70927877,"longitude":-2.437250357,"stationOperator":"SW","crsCode":"DCH"},{"name":"Earley","latitude":51.44109521,"longitude":-0.917992325,"stationOperator":"SW","crsCode":"EAR"},{"name":"Earlsfield","latitude":51.44199132,"longitude":-0.188445946,"stationOperator":"SW","crsCode":"EAD"},{"name":"Eastleigh","latitude":50.96924196,"longitude":-1.350088939,"stationOperator":"SW","crsCode":"ESL"},{"name":"Effingham Junction","latitude":51.29149416,"longitude":-0.419956236,"stationOperator":"SW","crsCode":"EFF"},{"name":"Egham","latitude":51.42964981,"longitude":-0.54650574,"stationOperator":"SW","crsCode":"EGH"},{"name":"Esher","latitude":51.37989226,"longitude":-0.353326233,"stationOperator":"SW","crsCode":"ESH"},{"name":"Ewell West","latitude":51.35004515,"longitude":-0.256986854,"stationOperator":"SW","crsCode":"EWW"},{"name":"Fareham","latitude":50.85302175,"longitude":-1.192037892,"stationOperator":"SW","crsCode":"FRM"},{"name":"Farnborough (Main)","latitude":51.29660513,"longitude":-0.755725906,"stationOperator":"SW","crsCode":"FNB"},{"name":"Farncombe","latitude":51.19715045,"longitude":-0.604545436,"stationOperator":"SW","crsCode":"FNC"},{"name":"Farnham","latitude":51.21190211,"longitude":-0.792428907,"stationOperator":"SW","crsCode":"FNH"},{"name":"Feltham","latitude":51.4479016,"longitude":-0.409827793,"stationOperator":"SW","crsCode":"FEL"},{"name":"Feniton","latitude":50.78644387,"longitude":-3.285357243,"stationOperator":"SW","crsCode":"FNT"},{"name":"Fleet","latitude":51.29063459,"longitude":-0.830808013,"stationOperator":"SW","crsCode":"FLE"},{"name":"Fratton","latitude":50.79632515,"longitude":-1.073980501,"stationOperator":"SW","crsCode":"FTN"},{"name":"Frimley","latitude":51.31186216,"longitude":-0.746991209,"stationOperator":"SW","crsCode":"FML"},{"name":"Fulwell","latitude":51.43393799,"longitude":-0.349469931,"stationOperator":"SW","crsCode":"FLW"},{"name":"Gillingham (Dorset)","latitude":51.03402105,"longitude":-2.272639221,"stationOperator":"SW","crsCode":"GIL"},{"name":"Godalming","latitude":51.18658296,"longitude":-0.618859352,"stationOperator":"SW","crsCode":"GOD"},{"name":"Grateley","latitude":51.17005721,"longitude":-1.620784549,"stationOperator":"SW","crsCode":"GRT"},{"name":"Guildford","latitude":51.23696786,"longitude":-0.580420682,"stationOperator":"SW","crsCode":"GLD"},{"name":"Hamble","latitude":50.8713636,"longitude":-1.329166492,"stationOperator":"SW","crsCode":"HME"},{"name":"Hampton (London)","latitude":51.41590963,"longitude":-0.372108616,"stationOperator":"SW","crsCode":"HMP"},{"name":"Hampton Court","latitude":51.40255764,"longitude":-0.342750055,"stationOperator":"SW","crsCode":"HMC"},{"name":"Hampton Wick","latitude":51.41452673,"longitude":-0.31249094,"stationOperator":"SW","crsCode":"HMW"},{"name":"Hamworthy","latitude":50.72517822,"longitude":-2.019367161,"stationOperator":"SW","crsCode":"HAM"},{"name":"Haslemere","latitude":51.08884213,"longitude":-0.719371718,"stationOperator":"SW","crsCode":"HSL"},{"name":"Havant","latitude":50.85441478,"longitude":-0.981606362,"stationOperator":"SW","crsCode":"HAV"},{"name":"Hedge End","latitude":50.93231017,"longitude":-1.294506472,"stationOperator":"SW","crsCode":"HDE"},{"name":"Hersham","latitude":51.37698201,"longitude":-0.389799091,"stationOperator":"SW","crsCode":"HER"},{"name":"Hilsea","latitude":50.82812716,"longitude":-1.058584319,"stationOperator":"SW","crsCode":"HLS"},{"name":"Hinchley Wood","latitude":51.37499946,"longitude":-0.340526968,"stationOperator":"SW","crsCode":"HYW"},{"name":"Hinton Admiral","latitude":50.75262651,"longitude":-1.714128129,"stationOperator":"SW","crsCode":"HNA"},{"name":"Holton Heath","latitude":50.71139466,"longitude":-2.07785667,"stationOperator":"SW","crsCode":"HOL"},{"name":"Honiton","latitude":50.79657202,"longitude":-3.186745856,"stationOperator":"SW","crsCode":"HON"},{"name":"Hook","latitude":51.27999802,"longitude":-0.961641845,"stationOperator":"SW","crsCode":"HOK"},{"name":"Horsley","latitude":51.2793455,"longitude":-0.435400001,"stationOperator":"SW","crsCode":"HSY"},{"name":"Hounslow","latitude":51.46252802,"longitude":-0.361826888,"stationOperator":"SW","crsCode":"HOU"},{"name":"Isleworth","latitude":51.47476682,"longitude":-0.336908528,"stationOperator":"SW","crsCode":"ISL"},{"name":"Kempton Park Racecourse","latitude":51.4209856,"longitude":-0.409741053,"stationOperator":"SW","crsCode":"KMP"},{"name":"Kew Bridge","latitude":51.48936263,"longitude":-0.28884221,"stationOperator":"SW","crsCode":"KWB"},{"name":"Kingston","latitude":51.41275341,"longitude":-0.301166881,"stationOperator":"SW","crsCode":"KNG"},{"name":"Liphook","latitude":51.07130974,"longitude":-0.800231253,"stationOperator":"SW","crsCode":"LIP"},{"name":"Liss","latitude":51.04356403,"longitude":-0.892872687,"stationOperator":"SW","crsCode":"LIS"},{"name":"London Road (Guildford)","latitude":51.24064745,"longitude":-0.565064166,"stationOperator":"SW","crsCode":"LRD"},{"name":"Longcross","latitude":51.38517473,"longitude":-0.594565138,"stationOperator":"SW","crsCode":"LNG"},{"name":"Lymington Pier","latitude":50.75828671,"longitude":-1.529457537,"stationOperator":"SW","crsCode":"LYP"},{"name":"Lymington Town","latitude":50.76089855,"longitude":-1.537172813,"stationOperator":"SW","crsCode":"LYT"},{"name":"Malden Manor","latitude":51.38463927,"longitude":-0.261133898,"stationOperator":"SW","crsCode":"MAL"},{"name":"Martins Heron","latitude":51.40759741,"longitude":-0.724677798,"stationOperator":"SW","crsCode":"MAO"},{"name":"Micheldever","latitude":51.18239077,"longitude":-1.260678431,"stationOperator":"SW","crsCode":"MIC"},{"name":"Milford (Surrey)","latitude":51.163315,"longitude":-0.636946048,"stationOperator":"SW","crsCode":"MLF"},{"name":"Millbrook (Hants)","latitude":50.91148638,"longitude":-1.433849643,"stationOperator":"SW","crsCode":"MBK"},{"name":"Moreton (Dorset)","latitude":50.70110851,"longitude":-2.312902315,"stationOperator":"SW","crsCode":"MTN"},{"name":"Mortlake","latitude":51.46835266,"longitude":-0.266591584,"stationOperator":"SW","crsCode":"MTL"},{"name":"Motspur Park","latitude":51.39510266,"longitude":-0.239174525,"stationOperator":"SW","crsCode":"MOT"},{"name":"Netley","latitude":50.8748526,"longitude":-1.341766118,"stationOperator":"SW","crsCode":"NTL"},{"name":"New Malden","latitude":51.40407643,"longitude":-0.255939507,"stationOperator":"SW","crsCode":"NEM"},{"name":"New Milton","latitude":50.75573929,"longitude":-1.65781268,"stationOperator":"SW","crsCode":"NWM"},{"name":"Norbiton","latitude":51.41249564,"longitude":-0.28409246,"stationOperator":"SW","crsCode":"NBT"},{"name":"North Sheen","latitude":51.46540691,"longitude":-0.286427277,"stationOperator":"SW","crsCode":"NSH"},{"name":"Overton","latitude":51.25405532,"longitude":-1.260016842,"stationOperator":"SW","crsCode":"OVR"},{"name":"Oxshott","latitude":51.33639577,"longitude":-0.362408246,"stationOperator":"SW","crsCode":"OXS"},{"name":"Parkstone (Dorset)","latitude":50.72310029,"longitude":-1.948956257,"stationOperator":"SW","crsCode":"PKS"},{"name":"Petersfield","latitude":51.00671834,"longitude":-0.941143838,"stationOperator":"SW","crsCode":"PTR"},{"name":"Pinhoe","latitude":50.73756769,"longitude":-3.47151678,"stationOperator":"SW","crsCode":"PIN"},{"name":"Pokesdown","latitude":50.73107393,"longitude":-1.825106845,"stationOperator":"SW","crsCode":"POK"},{"name":"Poole","latitude":50.71941418,"longitude":-1.983326736,"stationOperator":"SW","crsCode":"POO"},{"name":"Portchester","latitude":50.84873765,"longitude":-1.124238788,"stationOperator":"SW","crsCode":"PTC"},{"name":"Portsmouth & Southsea","latitude":50.79848174,"longitude":-1.090909302,"stationOperator":"SW","crsCode":"PMS"},{"name":"Portsmouth Harbour","latitude":50.79694873,"longitude":-1.10783895,"stationOperator":"SW","crsCode":"PMH"},{"name":"Putney","latitude":51.46130596,"longitude":-0.216473031,"stationOperator":"SW","crsCode":"PUT"},{"name":"Queenstown Road (Battersea)","latitude":51.47461422,"longitude":-0.146833069,"stationOperator":"SW","crsCode":"QRB"},{"name":"Raynes Park","latitude":51.40935291,"longitude":-0.22999932,"stationOperator":"SW","crsCode":"RAY"},{"name":"Redbridge","latitude":50.91993012,"longitude":-1.470167863,"stationOperator":"SW","crsCode":"RDB"},{"name":"Richmond (London)","latitude":51.46310164,"longitude":-0.301039568,"stationOperator":"SW","crsCode":"RMD"},{"name":"Rowlands Castle","latitude":50.89216101,"longitude":-0.957464705,"stationOperator":"SW","crsCode":"RLN"},{"name":"Salisbury","latitude":51.07054404,"longitude":-1.806389093,"stationOperator":"SW","crsCode":"SAL"},{"name":"Shawford","latitude":51.02181488,"longitude":-1.328195204,"stationOperator":"SW","crsCode":"SHW"},{"name":"Shepperton","latitude":51.39680664,"longitude":-0.446776819,"stationOperator":"SW","crsCode":"SHP"},{"name":"Sherborne","latitude":50.94400636,"longitude":-2.513081696,"stationOperator":"SW","crsCode":"SHE"},{"name":"Sholing","latitude":50.89674031,"longitude":-1.364351502,"stationOperator":"SW","crsCode":"SHO"},{"name":"Southampton Airport Parkway","latitude":50.95080673,"longitude":-1.363101804,"stationOperator":"SW","crsCode":"SOA"},{"name":"Southampton Central","latitude":50.90743864,"longitude":-1.413602474,"stationOperator":"SW","crsCode":"SOU"},{"name":"St Denys","latitude":50.92204734,"longitude":-1.388193499,"stationOperator":"SW","crsCode":"SDN"},{"name":"St Margarets (London)","latitude":51.45510669,"longitude":-0.320350685,"stationOperator":"SW","crsCode":"SMG"},{"name":"Staines","latitude":51.43245842,"longitude":-0.503156805,"stationOperator":"SW","crsCode":"SNS"},{"name":"Stoneleigh","latitude":51.3634013,"longitude":-0.248665136,"stationOperator":"SW","crsCode":"SNL"},{"name":"Strawberry Hill","latitude":51.43973402,"longitude":-0.339620394,"stationOperator":"SW","crsCode":"STW"},{"name":"Sunbury","latitude":51.4183156,"longitude":-0.41777264,"stationOperator":"SW","crsCode":"SUU"},{"name":"Sunningdale","latitude":51.39194259,"longitude":-0.633036903,"stationOperator":"SW","crsCode":"SNG"},{"name":"Sunnymeads","latitude":51.46990139,"longitude":-0.559005825,"stationOperator":"SW","crsCode":"SNY"},{"name":"Surbiton","latitude":51.39246129,"longitude":-0.303959858,"stationOperator":"SW","crsCode":"SUR"},{"name":"Swanwick","latitude":50.87565884,"longitude":-1.265855068,"stationOperator":"SW","crsCode":"SNW"},{"name":"Sway","latitude":50.78469022,"longitude":-1.610008474,"stationOperator":"SW","crsCode":"SWY"},{"name":"Swaythling","latitude":50.94113949,"longitude":-1.376413966,"stationOperator":"SW","crsCode":"SWG"},{"name":"Syon Lane","latitude":51.48179326,"longitude":-0.32513115,"stationOperator":"SW","crsCode":"SYL"},{"name":"Teddington","latitude":51.42452799,"longitude":-0.332691888,"stationOperator":"SW","crsCode":"TED"},{"name":"Templecombe","latitude":51.00113031,"longitude":-2.417513122,"stationOperator":"SW","crsCode":"TMC"},{"name":"Thames Ditton","latitude":51.38900668,"longitude":-0.33901409,"stationOperator":"SW","crsCode":"THD"},{"name":"Tisbury","latitude":51.06083999,"longitude":-2.079012098,"stationOperator":"SW","crsCode":"TIS"},{"name":"Tolworth","latitude":51.37681954,"longitude":-0.279679278,"stationOperator":"SW","crsCode":"TOL"},{"name":"Totton","latitude":50.91800544,"longitude":-1.482139753,"stationOperator":"SW","crsCode":"TTN"},{"name":"Twickenham","latitude":51.45037655,"longitude":-0.329159686,"stationOperator":"SW","crsCode":"TWI"},{"name":"Upper Halliford","latitude":51.41306951,"longitude":-0.43089616,"stationOperator":"SW","crsCode":"UPH"},{"name":"Upwey","latitude":50.64825691,"longitude":-2.466146876,"stationOperator":"SW","crsCode":"UPW"},{"name":"Vauxhall","latitude":51.48619345,"longitude":-0.122870783,"stationOperator":"SW","crsCode":"VXH"},{"name":"Virginia Water","latitude":51.40195798,"longitude":-0.562220659,"stationOperator":"SW","crsCode":"VIR"},{"name":"Walton-on-Thames","latitude":51.37293218,"longitude":-0.414625196,"stationOperator":"SW","crsCode":"WAL"},{"name":"Wanborough","latitude":51.24452137,"longitude":-0.667585828,"stationOperator":"SW","crsCode":"WAN"},{"name":"Wandsworth Town","latitude":51.46105105,"longitude":-0.188123102,"stationOperator":"SW","crsCode":"WNT"},{"name":"Wareham (Dorset)","latitude":50.69287417,"longitude":-2.11525952,"stationOperator":"SW","crsCode":"WRM"},{"name":"West Byfleet","latitude":51.33922612,"longitude":-0.505478144,"stationOperator":"SW","crsCode":"WBY"},{"name":"Weybridge","latitude":51.361772,"longitude":-0.457715753,"stationOperator":"SW","crsCode":"WYB"},{"name":"Weymouth","latitude":50.61601612,"longitude":-2.454887722,"stationOperator":"SW","crsCode":"WEY"},{"name":"Whimple","latitude":50.76801832,"longitude":-3.354340682,"stationOperator":"SW","crsCode":"WHM"},{"name":"Whitchurch (Hants)","latitude":51.23741109,"longitude":-1.338181206,"stationOperator":"SW","crsCode":"WCH"},{"name":"Whitton (London)","latitude":51.44961063,"longitude":-0.357683876,"stationOperator":"SW","crsCode":"WTN"},{"name":"Wimbledon","latitude":51.42158552,"longitude":-0.206498827,"stationOperator":"SW","crsCode":"WIM"},{"name":"Winchester","latitude":51.06720512,"longitude":-1.319703002,"stationOperator":"SW","crsCode":"WIN"},{"name":"Winchfield","latitude":51.28494989,"longitude":-0.906981902,"stationOperator":"SW","crsCode":"WNF"},{"name":"Windsor & Eton Riverside","latitude":51.48565491,"longitude":-0.606528915,"stationOperator":"SW","crsCode":"WNR"},{"name":"Winnersh","latitude":51.43027741,"longitude":-0.87686164,"stationOperator":"SW","crsCode":"WNS"},{"name":"Winnersh Triangle","latitude":51.4367367,"longitude":-0.89133506,"stationOperator":"SW","crsCode":"WTI"},{"name":"Witley","latitude":51.13315687,"longitude":-0.645781144,"stationOperator":"SW","crsCode":"WTY"},{"name":"Woking","latitude":51.31846927,"longitude":-0.556954188,"stationOperator":"SW","crsCode":"WOK"},{"name":"Wokingham","latitude":51.41122172,"longitude":-0.842545198,"stationOperator":"SW","crsCode":"WKM"},{"name":"Wool","latitude":50.68162341,"longitude":-2.221475875,"stationOperator":"SW","crsCode":"WOO"},{"name":"Woolston","latitude":50.89891313,"longitude":-1.377063456,"stationOperator":"SW","crsCode":"WLS"},{"name":"Worcester Park","latitude":51.3812537,"longitude":-0.245167023,"stationOperator":"SW","crsCode":"WCP"},{"name":"Worplesdon","latitude":51.2890166,"longitude":-0.582573597,"stationOperator":"SW","crsCode":"WPL"},{"name":"Wraysbury","latitude":51.45771219,"longitude":-0.541915109,"stationOperator":"SW","crsCode":"WRY"},{"name":"Yeovil Junction","latitude":50.92472896,"longitude":-2.613179136,"stationOperator":"SW","crsCode":"YVJ"},{"name":"Bedford","latitude":52.1362,"longitude":-0.47944,"stationOperator":"TL","crsCode":"BDM"},{"name":"City Thameslink","latitude":51.51394,"longitude":-0.10358,"stationOperator":"TL","crsCode":"CTK"},{"name":"Cricklewood","latitude":51.55872,"longitude":-0.21223,"stationOperator":"TL","crsCode":"CRI"},{"name":"Elephant & Castle","latitude":51.49409,"longitude":-0.09951,"stationOperator":"TL","crsCode":"EPH"},{"name":"Elstree & Borehamwood","latitude":51.65289,"longitude":-0.2798,"stationOperator":"TL","crsCode":"ELS"},{"name":"Flitwick","latitude":52.00365,"longitude":-0.49526,"stationOperator":"TL","crsCode":"FLT"},{"name":"Harlington (Beds)","latitude":51.96207,"longitude":-0.49568,"stationOperator":"TL","crsCode":"HLN"},{"name":"Harpenden","latitude":51.81488,"longitude":-0.35198,"stationOperator":"TL","crsCode":"HPD"},{"name":"Haydons Road","latitude":51.42545,"longitude":-0.18881,"stationOperator":"TL","crsCode":"HYR"},{"name":"Hendon","latitude":51.58008,"longitude":-0.23867,"stationOperator":"TL","crsCode":"HEN"},{"name":"Leagrave","latitude":51.90517,"longitude":-0.45851,"stationOperator":"TL","crsCode":"LEA"},{"name":"London Blackfriars","latitude":51.51181,"longitude":-0.10333,"stationOperator":"TL","crsCode":"BFR"},{"name":"Loughborough Junction","latitude":51.46671,"longitude":-0.10252,"stationOperator":"TL","crsCode":"LGJ"},{"name":"Luton","latitude":51.88231,"longitude":-0.41404,"stationOperator":"TL","crsCode":"LUT"},{"name":"Luton Airport Parkway","latitude":51.87286,"longitude":-0.3962,"stationOperator":"TL","crsCode":"LTN"},{"name":"Mill Hill Broadway","latitude":51.61288,"longitude":-0.24954,"stationOperator":"TL","crsCode":"MIL"},{"name":"Morden South","latitude":51.39631,"longitude":-0.20031,"stationOperator":"TL","crsCode":"MDS"},{"name":"Radlett","latitude":51.68519,"longitude":-0.31724,"stationOperator":"TL","crsCode":"RDT"},{"name":"South Merton","latitude":51.40323,"longitude":-0.20551,"stationOperator":"TL","crsCode":"SMO"},{"name":"St Albans City","latitude":51.75048,"longitude":-0.32754,"stationOperator":"TL","crsCode":"SAC"},{"name":"St Helier (Surrey)","latitude":51.39,"longitude":-0.19912,"stationOperator":"TL","crsCode":"SIH"},{"name":"Sutton Common","latitude":51.37557,"longitude":-0.19682,"stationOperator":"TL","crsCode":"SUC"},{"name":"Tooting","latitude":51.41989,"longitude":-0.16099,"stationOperator":"TL","crsCode":"TOO"},{"name":"West Hampstead Thameslink","latitude":51.54862,"longitude":-0.19243,"stationOperator":"TL","crsCode":"WHP"},{"name":"West Sutton","latitude":51.36616,"longitude":-0.20466,"stationOperator":"TL","crsCode":"WSU"},{"name":"Wimbledon Chase","latitude":51.40956,"longitude":-0.21403,"stationOperator":"TL","crsCode":"WBO"},{"name":"Arnside","latitude":54.20210888,"longitude":-2.827766101,"stationOperator":"NT","crsCode":"ARN"},{"name":"Barnetby","latitude":53.57424146,"longitude":-0.409705665,"stationOperator":"TP","crsCode":"BTB"},{"name":"Barrow-in-Furness","latitude":54.1190048,"longitude":-3.226129301,"stationOperator":"NT","crsCode":"BIF"},{"name":"Birchwood","latitude":53.41196101,"longitude":-2.528015343,"stationOperator":"NT","crsCode":"BWD"},{"name":"Brough","latitude":53.72724433,"longitude":-0.579439167,"stationOperator":"TP","crsCode":"BUH"},{"name":"Burneside (Cumbria)","latitude":54.35530768,"longitude":-2.76621552,"stationOperator":"NT","crsCode":"BUD"},{"name":"Carnforth","latitude":54.12969095,"longitude":-2.771228496,"stationOperator":"NT","crsCode":"CNF"},{"name":"Cleethorpes","latitude":53.56192407,"longitude":-0.029217393,"stationOperator":"TP","crsCode":"CLE"},{"name":"Dewsbury","latitude":53.69210344,"longitude":-1.633482066,"stationOperator":"TP","crsCode":"DEW"},{"name":"Grange-over-Sands","latitude":54.1952789,"longitude":-2.902736771,"stationOperator":"NT","crsCode":"GOS"},{"name":"Grimsby Town","latitude":53.56412028,"longitude":-0.086951656,"stationOperator":"TP","crsCode":"GMB"},{"name":"Huddersfield","latitude":53.64842819,"longitude":-1.785145834,"stationOperator":"TP","crsCode":"HUD"},{"name":"Hull","latitude":53.744177,"longitude":-0.346155,"stationOperator":"TP","crsCode":"HUL"},{"name":"Kendal","latitude":54.33210561,"longitude":-2.73964031,"stationOperator":"NT","crsCode":"KEN"},{"name":"Malton","latitude":54.13208477,"longitude":-0.797222763,"stationOperator":"TP","crsCode":"MLT"},{"name":"Manchester Airport","latitude":53.36505845,"longitude":-2.272981546,"stationOperator":"TP","crsCode":"MIA"},{"name":"Middlesbrough","latitude":54.57911045,"longitude":-1.234712568,"stationOperator":"TP","crsCode":"MBR"},{"name":"Northallerton","latitude":54.3330789,"longitude":-1.441275691,"stationOperator":"TP","crsCode":"NTR"},{"name":"Scarborough","latitude":54.27980423,"longitude":-0.405706875,"stationOperator":"TP","crsCode":"SCA"},{"name":"Scunthorpe","latitude":53.58619519,"longitude":-0.650979553,"stationOperator":"TP","crsCode":"SCU"},{"name":"Seamer","latitude":54.24076317,"longitude":-0.417034229,"stationOperator":"TP","crsCode":"SEM"},{"name":"Selby","latitude":53.78338472,"longitude":-1.063555365,"stationOperator":"TP","crsCode":"SBY"},{"name":"Stalybridge","latitude":53.48439291,"longitude":-2.061892539,"stationOperator":"TP","crsCode":"SYB"},{"name":"Staveley (Cumbria)","latitude":54.37544124,"longitude":-2.819395031,"stationOperator":"NT","crsCode":"SVL"},{"name":"Thirsk","latitude":54.22822386,"longitude":-1.372589271,"stationOperator":"TP","crsCode":"THI"},{"name":"Thornaby","latitude":54.55945018,"longitude":-1.300710445,"stationOperator":"TP","crsCode":"TBY"},{"name":"Ulverston","latitude":54.19159088,"longitude":-3.097920025,"stationOperator":"NT","crsCode":"ULV"},{"name":"Warrington Central","latitude":53.39188323,"longitude":-2.592413143,"stationOperator":"NT","crsCode":"WAC"},{"name":"Windermere","latitude":54.37960543,"longitude":-2.903389364,"stationOperator":"NT","crsCode":"WDM"},{"name":"Yarm","latitude":54.49377475,"longitude":-1.353090201,"stationOperator":"TP","crsCode":"YRM"},{"name":"Birmingham International","latitude":52.45081461,"longitude":-1.725863394,"stationOperator":"VT","crsCode":"BHI"},{"name":"Carlisle","latitude":54.89064626,"longitude":-2.933810228,"stationOperator":"VT","crsCode":"CAR"},{"name":"Coventry","latitude":52.40082838,"longitude":-1.513460517,"stationOperator":"VT","crsCode":"COV"},{"name":"Crewe","latitude":53.08964325,"longitude":-2.432977174,"stationOperator":"VT","crsCode":"CRE"},{"name":"Lancaster","latitude":54.04855789,"longitude":-2.807909914,"stationOperator":"VT","crsCode":"LAN"},{"name":"Macclesfield","latitude":53.25935609,"longitude":-2.121380478,"stationOperator":"VT","crsCode":"MAC"},{"name":"Oxenholme Lake District","latitude":54.30524797,"longitude":-2.722253183,"stationOperator":"VT","crsCode":"OXN"},{"name":"Penrith (North Lakes)","latitude":54.6618117,"longitude":-2.758035421,"stationOperator":"VT","crsCode":"PNR"},{"name":"Preston (Lancs)","latitude":53.75687052,"longitude":-2.708124657,"stationOperator":"VT","crsCode":"PRE"},{"name":"Rugby","latitude":52.37910798,"longitude":-1.250477907,"stationOperator":"VT","crsCode":"RUG"},{"name":"Runcorn","latitude":53.33871197,"longitude":-2.739251703,"stationOperator":"VT","crsCode":"RUN"},{"name":"Stafford","latitude":52.80390859,"longitude":-2.122036782,"stationOperator":"VT","crsCode":"STA"},{"name":"Stockport","latitude":53.40555627,"longitude":-2.163011702,"stationOperator":"VT","crsCode":"SPT"},{"name":"Stoke-on-Trent","latitude":53.00799558,"longitude":-2.180988926,"stationOperator":"VT","crsCode":"SOT"},{"name":"Warrington Bank Quay","latitude":53.38553871,"longitude":-2.602849785,"stationOperator":"VT","crsCode":"WBQ"},{"name":"Wigan North Western","latitude":53.54345134,"longitude":-2.633130699,"stationOperator":"VT","crsCode":"WGN"},{"name":"Wolverhampton","latitude":52.58785715,"longitude":-2.119516893,"stationOperator":"VT","crsCode":"WVH"},{"name":"Prestwick International Airport","latitude":55.5090299591,"longitude":-4.614160474,"stationOperator":"XG","crsCode":"PRA"},{"name":"Brentwood","latitude":51.6136457809,"longitude":0.3001535395,"stationOperator":"XR","crsCode":"BRE"},{"name":"Chadwell Heath","latitude":51.568044268,"longitude":0.1289703577,"stationOperator":"XR","crsCode":"CTH"},{"name":"Forest Gate","latitude":51.5494371822,"longitude":0.0243617394,"stationOperator":"XR","crsCode":"FOG"},{"name":"Gidea Park","latitude":51.5819097026,"longitude":0.2059785609,"stationOperator":"XR","crsCode":"GDP"},{"name":"Goodmayes","latitude":51.5661978709,"longitude":0.1117127319,"stationOperator":"XR","crsCode":"GMY"},{"name":"Harold Wood","latitude":51.59324565,"longitude":0.234249821,"stationOperator":"XR","crsCode":"HRO"},{"name":"Ilford","latitude":51.5591407316,"longitude":0.068680603,"stationOperator":"XR","crsCode":"IFD"},{"name":"Manor Park","latitude":51.5523565062,"longitude":0.0452924304,"stationOperator":"XR","crsCode":"MNP"},{"name":"Maryland","latitude":51.5458397394,"longitude":0.0060578399,"stationOperator":"XR","crsCode":"MYL"},{"name":"Romford","latitude":51.57483462,"longitude":0.183250919,"stationOperator":"XR","crsCode":"RMF"},{"name":"Seven Kings","latitude":51.5640458726,"longitude":0.0963182717,"stationOperator":"XR","crsCode":"SVK"},{"name":"Stratford (London)","latitude":51.5413741484,"longitude":-0.0036568449,"stationOperator":"XR","crsCode":"SRA"},{"name":"Southend Airport","latitude":51.568691,"longitude":0.704052,"stationOperator":"XS","crsCode":"SIA"},{"name":"Heathrow Airport Terminal 4","latitude":51.4582712542,"longitude":-0.4454539639,"stationOperator":"HX","crsCode":"HAF"},{"name":"Heathrow Airport Terminal 5","latitude":51.4700565929,"longitude":-0.4905807301,"stationOperator":"HX","crsCode":"HWV"},{"name":"Heathrow Airport Terminals 1, 2 and 3","latitude":51.47273,"longitude":-0.45072,"stationOperator":"HX","crsCode":"HXX"},{"name":"Farringdon","latitude":51.52053,"longitude":-0.10504,"stationOperator":"LT","crsCode":"ZFD"},{"name":"High Street Kensington Underground","latitude":51.3002,"longitude":-0.1133,"stationOperator":"ZZ","crsCode":"ZHS"},{"name":"Old Street","latitude":51.5258365574,"longitude":-0.0885295811,"stationOperator":"LT","crsCode":"OLD"}];

},{}],"/Users/dev/Documents/rail-fyi-client/app/js/index.js":[function(require,module,exports){
(function (process){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Routes = require('./Routes');

var _Routes2 = _interopRequireDefault(_Routes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (process.env.NODE_ENV !== 'production') {
  // Enable React devtools
  window.React = _react2.default;
}

_reactDom2.default.render(_Routes2.default, document.getElementById('app'));

}).call(this,require('_process'))

},{"./Routes":"/Users/dev/Documents/rail-fyi-client/app/js/Routes.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js","react-dom":"/Users/dev/Documents/rail-fyi-client/node_modules/react-dom/index.js"}],"/Users/dev/Documents/rail-fyi-client/app/js/pages/HomePage.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _NearestStation = require('../components/NearestStation');

var _NearestStation2 = _interopRequireDefault(_NearestStation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  currentUser: _react.PropTypes.object
};

var HomePage = function (_Component) {
  _inherits(HomePage, _Component);

  function HomePage(props) {
    _classCallCheck(this, HomePage);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(HomePage).call(this, props));
  }

  _createClass(HomePage, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'section',
        { className: 'home-page' },
        'Welcome to RAIL FYI!',
        _react2.default.createElement(_NearestStation2.default, null)
      );
    }
  }]);

  return HomePage;
}(_react.Component);

HomePage.propTypes = propTypes;

exports.default = HomePage;

},{"../components/NearestStation":"/Users/dev/Documents/rail-fyi-client/app/js/components/NearestStation.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/app/js/pages/NotFoundPage.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  currentUser: _react.PropTypes.object
};

var NotFoundPage = function (_Component) {
  _inherits(NotFoundPage, _Component);

  function NotFoundPage(props) {
    _classCallCheck(this, NotFoundPage);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(NotFoundPage).call(this, props));
  }

  _createClass(NotFoundPage, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'section',
        { className: 'not-found-page' },
        'Page Not Found'
      );
    }
  }]);

  return NotFoundPage;
}(_react.Component);

NotFoundPage.propTypes = propTypes;

exports.default = NotFoundPage;

},{"react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/deep-equal/index.js":[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":"/Users/dev/Documents/rail-fyi-client/node_modules/deep-equal/lib/is_arguments.js","./lib/keys.js":"/Users/dev/Documents/rail-fyi-client/node_modules/deep-equal/lib/keys.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/deep-equal/lib/is_arguments.js":[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/deep-equal/lib/keys.js":[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/EventListener.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function () {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function () {}
};

module.exports = EventListener;
}).call(this,require('_process'))

},{"./emptyFunction":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyFunction.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/camelize.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

"use strict";

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/camelizeStyleName.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/camelize.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/containsNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

'use strict';

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(_x, _x2) {
  var _again = true;

  _function: while (_again) {
    var outerNode = _x,
        innerNode = _x2;
    _again = false;

    if (!outerNode || !innerNode) {
      return false;
    } else if (outerNode === innerNode) {
      return true;
    } else if (isTextNode(outerNode)) {
      return false;
    } else if (isTextNode(innerNode)) {
      _x = outerNode;
      _x2 = innerNode.parentNode;
      _again = true;
      continue _function;
    } else if (outerNode.contains) {
      return outerNode.contains(innerNode);
    } else if (outerNode.compareDocumentPosition) {
      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    } else {
      return false;
    }
  }
}

module.exports = containsNode;
},{"./isTextNode":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/isTextNode.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/createArrayFromMixed.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFromMixed
 * @typechecks
 */

'use strict';

var toArray = require('./toArray');

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return(
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
},{"./toArray":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/toArray.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/createNodesFromMarkup.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var createArrayFromMixed = require('./createArrayFromMixed');
var getMarkupWrap = require('./getMarkupWrap');
var invariant = require('./invariant');

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = createArrayFromMixed(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
}).call(this,require('_process'))

},{"./ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js","./createArrayFromMixed":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/createArrayFromMixed.js","./getMarkupWrap":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/getMarkupWrap.js","./invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyFunction.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyObject.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/focusNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/getActiveElement.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 */
'use strict';

function getActiveElement() /*?DOMElement*/{
  if (typeof document === 'undefined') {
    return null;
  }
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/getMarkupWrap.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

/*eslint-disable fb-www/unsafe-html */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var invariant = require('./invariant');

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
}).call(this,require('_process'))

},{"./ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js","./invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/getUnboundedScrollPosition.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/hyphenate.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

'use strict';

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/hyphenateStyleName.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/hyphenate.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

function invariant(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/isNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
'use strict';

function isNode(object) {
  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/isTextNode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

'use strict';

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/isNode.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyMirror.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

'use strict';

var invariant = require('./invariant');

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function (obj) {
  var ret = {};
  var key;
  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;
}).call(this,require('_process'))

},{"./invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyOf.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without losing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
"use strict";

var keyOf = function (oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};

module.exports = keyOf;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/mapObject.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/memoizeStringOnly.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/performance.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"./ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/performanceNow.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

'use strict';

var performance = require('./performance');

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function () {
    return performance.now();
  };
} else {
  performanceNow = function () {
    return Date.now();
  };
}

module.exports = performanceNow;
},{"./performance":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/performance.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/shallowEqual.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 * @typechecks
 * 
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  var bHasOwnProperty = hasOwnProperty.bind(objB);
  for (var i = 0; i < keysA.length; i++) {
    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/toArray.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

'use strict';

var invariant = require('./invariant');

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;
}).call(this,require('_process'))

},{"./invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  warning = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    }
  };
}

module.exports = warning;
}).call(this,require('_process'))

},{"./emptyFunction":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyFunction.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/Actions.js":[function(require,module,exports){
/**
 * Indicates that navigation was caused by a call to history.push.
 */
'use strict';

exports.__esModule = true;
var PUSH = 'PUSH';

exports.PUSH = PUSH;
/**
 * Indicates that navigation was caused by a call to history.replace.
 */
var REPLACE = 'REPLACE';

exports.REPLACE = REPLACE;
/**
 * Indicates that navigation was caused by some other action such
 * as using a browser's back/forward buttons and/or manually manipulating
 * the URL in a browser's location bar. This is the default.
 *
 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
 * for more information.
 */
var POP = 'POP';

exports.POP = POP;
exports['default'] = {
  PUSH: PUSH,
  REPLACE: REPLACE,
  POP: POP
};
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/AsyncUtils.js":[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports.loopAsync = loopAsync;

function loopAsync(turns, work, callback) {
  var currentTurn = 0;
  var isDone = false;

  function done() {
    isDone = true;
    callback.apply(this, arguments);
  }

  function next() {
    if (isDone) return;

    if (currentTurn < turns) {
      work.call(this, currentTurn++, next, done);
    } else {
      done.apply(this, arguments);
    }
  }

  next();
}
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/DOMStateStorage.js":[function(require,module,exports){
(function (process){
/*eslint-disable no-empty */
'use strict';

exports.__esModule = true;
exports.saveState = saveState;
exports.readState = readState;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var KeyPrefix = '@@History/';
var QuotaExceededError = 'QuotaExceededError';
var SecurityError = 'SecurityError';

function createKey(key) {
  return KeyPrefix + key;
}

function saveState(key, state) {
  try {
    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
  } catch (error) {
    if (error.name === SecurityError) {
      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
      // attempt to access window.sessionStorage.
      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;

      return;
    }

    if (error.name === QuotaExceededError && window.sessionStorage.length === 0) {
      // Safari "private mode" throws QuotaExceededError.
      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;

      return;
    }

    throw error;
  }
}

function readState(key) {
  var json = undefined;
  try {
    json = window.sessionStorage.getItem(createKey(key));
  } catch (error) {
    if (error.name === SecurityError) {
      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
      // attempt to access window.sessionStorage.
      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;

      return null;
    }
  }

  if (json) {
    try {
      return JSON.parse(json);
    } catch (error) {
      // Ignore invalid JSON.
    }
  }

  return null;
}
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","warning":"/Users/dev/Documents/rail-fyi-client/node_modules/warning/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/DOMUtils.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.addEventListener = addEventListener;
exports.removeEventListener = removeEventListener;
exports.getHashPath = getHashPath;
exports.replaceHashPath = replaceHashPath;
exports.getWindowPath = getWindowPath;
exports.go = go;
exports.getUserConfirmation = getUserConfirmation;
exports.supportsHistory = supportsHistory;
exports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;

function addEventListener(node, event, listener) {
  if (node.addEventListener) {
    node.addEventListener(event, listener, false);
  } else {
    node.attachEvent('on' + event, listener);
  }
}

function removeEventListener(node, event, listener) {
  if (node.removeEventListener) {
    node.removeEventListener(event, listener, false);
  } else {
    node.detachEvent('on' + event, listener);
  }
}

function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  return window.location.href.split('#')[1] || '';
}

function replaceHashPath(path) {
  window.location.replace(window.location.pathname + window.location.search + '#' + path);
}

function getWindowPath() {
  return window.location.pathname + window.location.search + window.location.hash;
}

function go(n) {
  if (n) window.history.go(n);
}

function getUserConfirmation(message, callback) {
  callback(window.confirm(message));
}

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
 */

function supportsHistory() {
  var ua = navigator.userAgent;
  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
    return false;
  }
  // FIXME: Work around our browser history not working correctly on Chrome
  // iOS: https://github.com/rackt/react-router/issues/2565
  if (ua.indexOf('CriOS') !== -1) {
    return false;
  }
  return window.history && 'pushState' in window.history;
}

/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */

function supportsGoWithoutReloadUsingHash() {
  var ua = navigator.userAgent;
  return ua.indexOf('Firefox') === -1;
}
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/ExecutionEnvironment.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
exports.canUseDOM = canUseDOM;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createBrowserHistory.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _Actions = require('./Actions');

var _ExecutionEnvironment = require('./ExecutionEnvironment');

var _DOMUtils = require('./DOMUtils');

var _DOMStateStorage = require('./DOMStateStorage');

var _createDOMHistory = require('./createDOMHistory');

var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

/**
 * Creates and returns a history object that uses HTML5's history API
 * (pushState, replaceState, and the popstate event) to manage history.
 * This is the recommended method of managing history in browsers because
 * it provides the cleanest URLs.
 *
 * Note: In browsers that do not support the HTML5 history API full
 * page reloads will be used to preserve URLs.
 */
function createBrowserHistory() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;

  var forceRefresh = options.forceRefresh;

  var isSupported = _DOMUtils.supportsHistory();
  var useRefresh = !isSupported || forceRefresh;

  function getCurrentLocation(historyState) {
    historyState = historyState || window.history.state || {};

    var path = _DOMUtils.getWindowPath();
    var _historyState = historyState;
    var key = _historyState.key;

    var state = undefined;
    if (key) {
      state = _DOMStateStorage.readState(key);
    } else {
      state = null;
      key = history.createKey();

      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);
    }

    var location = _parsePath2['default'](path);

    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
  }

  function startPopStateListener(_ref) {
    var transitionTo = _ref.transitionTo;

    function popStateListener(event) {
      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.

      transitionTo(getCurrentLocation(event.state));
    }

    _DOMUtils.addEventListener(window, 'popstate', popStateListener);

    return function () {
      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);
    };
  }

  function finishTransition(location) {
    var basename = location.basename;
    var pathname = location.pathname;
    var search = location.search;
    var hash = location.hash;
    var state = location.state;
    var action = location.action;
    var key = location.key;

    if (action === _Actions.POP) return; // Nothing to do.

    _DOMStateStorage.saveState(key, state);

    var path = (basename || '') + pathname + search + hash;
    var historyState = {
      key: key
    };

    if (action === _Actions.PUSH) {
      if (useRefresh) {
        window.location.href = path;
        return false; // Prevent location update.
      } else {
          window.history.pushState(historyState, null, path);
        }
    } else {
      // REPLACE
      if (useRefresh) {
        window.location.replace(path);
        return false; // Prevent location update.
      } else {
          window.history.replaceState(historyState, null, path);
        }
    }
  }

  var history = _createDOMHistory2['default'](_extends({}, options, {
    getCurrentLocation: getCurrentLocation,
    finishTransition: finishTransition,
    saveState: _DOMStateStorage.saveState
  }));

  var listenerCount = 0,
      stopPopStateListener = undefined;

  function listenBefore(listener) {
    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

    var unlisten = history.listenBefore(listener);

    return function () {
      unlisten();

      if (--listenerCount === 0) stopPopStateListener();
    };
  }

  function listen(listener) {
    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

    var unlisten = history.listen(listener);

    return function () {
      unlisten();

      if (--listenerCount === 0) stopPopStateListener();
    };
  }

  // deprecated
  function registerTransitionHook(hook) {
    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

    history.registerTransitionHook(hook);
  }

  // deprecated
  function unregisterTransitionHook(hook) {
    history.unregisterTransitionHook(hook);

    if (--listenerCount === 0) stopPopStateListener();
  }

  return _extends({}, history, {
    listenBefore: listenBefore,
    listen: listen,
    registerTransitionHook: registerTransitionHook,
    unregisterTransitionHook: unregisterTransitionHook
  });
}

exports['default'] = createBrowserHistory;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./Actions":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/Actions.js","./DOMStateStorage":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/DOMStateStorage.js","./DOMUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/DOMUtils.js","./ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/ExecutionEnvironment.js","./createDOMHistory":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createDOMHistory.js","./parsePath":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/parsePath.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/invariant/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createDOMHistory.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _ExecutionEnvironment = require('./ExecutionEnvironment');

var _DOMUtils = require('./DOMUtils');

var _createHistory = require('./createHistory');

var _createHistory2 = _interopRequireDefault(_createHistory);

function createDOMHistory(options) {
  var history = _createHistory2['default'](_extends({
    getUserConfirmation: _DOMUtils.getUserConfirmation
  }, options, {
    go: _DOMUtils.go
  }));

  function listen(listener) {
    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;

    return history.listen(listener);
  }

  return _extends({}, history, {
    listen: listen
  });
}

exports['default'] = createDOMHistory;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./DOMUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/DOMUtils.js","./ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/ExecutionEnvironment.js","./createHistory":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createHistory.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/invariant/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createHashHistory.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _Actions = require('./Actions');

var _ExecutionEnvironment = require('./ExecutionEnvironment');

var _DOMUtils = require('./DOMUtils');

var _DOMStateStorage = require('./DOMStateStorage');

var _createDOMHistory = require('./createDOMHistory');

var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

function isAbsolutePath(path) {
  return typeof path === 'string' && path.charAt(0) === '/';
}

function ensureSlash() {
  var path = _DOMUtils.getHashPath();

  if (isAbsolutePath(path)) return true;

  _DOMUtils.replaceHashPath('/' + path);

  return false;
}

function addQueryStringValueToPath(path, key, value) {
  return path + (path.indexOf('?') === -1 ? '?' : '&') + (key + '=' + value);
}

function stripQueryStringValueFromPath(path, key) {
  return path.replace(new RegExp('[?&]?' + key + '=[a-zA-Z0-9]+'), '');
}

function getQueryStringValueFromPath(path, key) {
  var match = path.match(new RegExp('\\?.*?\\b' + key + '=(.+?)\\b'));
  return match && match[1];
}

var DefaultQueryKey = '_k';

function createHashHistory() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Hash history needs a DOM') : _invariant2['default'](false) : undefined;

  var queryKey = options.queryKey;

  if (queryKey === undefined || !!queryKey) queryKey = typeof queryKey === 'string' ? queryKey : DefaultQueryKey;

  function getCurrentLocation() {
    var path = _DOMUtils.getHashPath();

    var key = undefined,
        state = undefined;
    if (queryKey) {
      key = getQueryStringValueFromPath(path, queryKey);
      path = stripQueryStringValueFromPath(path, queryKey);

      if (key) {
        state = _DOMStateStorage.readState(key);
      } else {
        state = null;
        key = history.createKey();
        _DOMUtils.replaceHashPath(addQueryStringValueToPath(path, queryKey, key));
      }
    } else {
      key = state = null;
    }

    var location = _parsePath2['default'](path);

    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
  }

  function startHashChangeListener(_ref) {
    var transitionTo = _ref.transitionTo;

    function hashChangeListener() {
      if (!ensureSlash()) return; // Always make sure hashes are preceeded with a /.

      transitionTo(getCurrentLocation());
    }

    ensureSlash();
    _DOMUtils.addEventListener(window, 'hashchange', hashChangeListener);

    return function () {
      _DOMUtils.removeEventListener(window, 'hashchange', hashChangeListener);
    };
  }

  function finishTransition(location) {
    var basename = location.basename;
    var pathname = location.pathname;
    var search = location.search;
    var state = location.state;
    var action = location.action;
    var key = location.key;

    if (action === _Actions.POP) return; // Nothing to do.

    var path = (basename || '') + pathname + search;

    if (queryKey) {
      path = addQueryStringValueToPath(path, queryKey, key);
      _DOMStateStorage.saveState(key, state);
    } else {
      // Drop key and state.
      location.key = location.state = null;
    }

    var currentHash = _DOMUtils.getHashPath();

    if (action === _Actions.PUSH) {
      if (currentHash !== path) {
        window.location.hash = path;
      } else {
        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'You cannot PUSH the same path using hash history') : undefined;
      }
    } else if (currentHash !== path) {
      // REPLACE
      _DOMUtils.replaceHashPath(path);
    }
  }

  var history = _createDOMHistory2['default'](_extends({}, options, {
    getCurrentLocation: getCurrentLocation,
    finishTransition: finishTransition,
    saveState: _DOMStateStorage.saveState
  }));

  var listenerCount = 0,
      stopHashChangeListener = undefined;

  function listenBefore(listener) {
    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

    var unlisten = history.listenBefore(listener);

    return function () {
      unlisten();

      if (--listenerCount === 0) stopHashChangeListener();
    };
  }

  function listen(listener) {
    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

    var unlisten = history.listen(listener);

    return function () {
      unlisten();

      if (--listenerCount === 0) stopHashChangeListener();
    };
  }

  function push(location) {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

    history.push(location);
  }

  function replace(location) {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

    history.replace(location);
  }

  var goIsSupportedWithoutReload = _DOMUtils.supportsGoWithoutReloadUsingHash();

  function go(n) {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : undefined;

    history.go(n);
  }

  function createHref(path) {
    return '#' + history.createHref(path);
  }

  // deprecated
  function registerTransitionHook(hook) {
    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

    history.registerTransitionHook(hook);
  }

  // deprecated
  function unregisterTransitionHook(hook) {
    history.unregisterTransitionHook(hook);

    if (--listenerCount === 0) stopHashChangeListener();
  }

  // deprecated
  function pushState(state, path) {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

    history.pushState(state, path);
  }

  // deprecated
  function replaceState(state, path) {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

    history.replaceState(state, path);
  }

  return _extends({}, history, {
    listenBefore: listenBefore,
    listen: listen,
    push: push,
    replace: replace,
    go: go,
    createHref: createHref,

    registerTransitionHook: registerTransitionHook, // deprecated - warning is in createHistory
    unregisterTransitionHook: unregisterTransitionHook, // deprecated - warning is in createHistory
    pushState: pushState, // deprecated - warning is in createHistory
    replaceState: replaceState // deprecated - warning is in createHistory
  });
}

exports['default'] = createHashHistory;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./Actions":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/Actions.js","./DOMStateStorage":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/DOMStateStorage.js","./DOMUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/DOMUtils.js","./ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/ExecutionEnvironment.js","./createDOMHistory":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createDOMHistory.js","./parsePath":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/parsePath.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/invariant/browser.js","warning":"/Users/dev/Documents/rail-fyi-client/node_modules/warning/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createHistory.js":[function(require,module,exports){
//import warning from 'warning'
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _deepEqual = require('deep-equal');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _AsyncUtils = require('./AsyncUtils');

var _Actions = require('./Actions');

var _createLocation2 = require('./createLocation');

var _createLocation3 = _interopRequireDefault(_createLocation2);

var _runTransitionHook = require('./runTransitionHook');

var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

var _deprecate = require('./deprecate');

var _deprecate2 = _interopRequireDefault(_deprecate);

function createRandomKey(length) {
  return Math.random().toString(36).substr(2, length);
}

function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search &&
  //a.action === b.action && // Different action !== location change.
  a.key === b.key && _deepEqual2['default'](a.state, b.state);
}

var DefaultKeyLength = 6;

function createHistory() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var getCurrentLocation = options.getCurrentLocation;
  var finishTransition = options.finishTransition;
  var saveState = options.saveState;
  var go = options.go;
  var keyLength = options.keyLength;
  var getUserConfirmation = options.getUserConfirmation;

  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;

  var transitionHooks = [];

  function listenBefore(hook) {
    transitionHooks.push(hook);

    return function () {
      transitionHooks = transitionHooks.filter(function (item) {
        return item !== hook;
      });
    };
  }

  var allKeys = [];
  var changeListeners = [];
  var location = undefined;

  function getCurrent() {
    if (pendingLocation && pendingLocation.action === _Actions.POP) {
      return allKeys.indexOf(pendingLocation.key);
    } else if (location) {
      return allKeys.indexOf(location.key);
    } else {
      return -1;
    }
  }

  function updateLocation(newLocation) {
    var current = getCurrent();

    location = newLocation;

    if (location.action === _Actions.PUSH) {
      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);
    } else if (location.action === _Actions.REPLACE) {
      allKeys[current] = location.key;
    }

    changeListeners.forEach(function (listener) {
      listener(location);
    });
  }

  function listen(listener) {
    changeListeners.push(listener);

    if (location) {
      listener(location);
    } else {
      var _location = getCurrentLocation();
      allKeys = [_location.key];
      updateLocation(_location);
    }

    return function () {
      changeListeners = changeListeners.filter(function (item) {
        return item !== listener;
      });
    };
  }

  function confirmTransitionTo(location, callback) {
    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {
      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {
        if (result != null) {
          done(result);
        } else {
          next();
        }
      });
    }, function (message) {
      if (getUserConfirmation && typeof message === 'string') {
        getUserConfirmation(message, function (ok) {
          callback(ok !== false);
        });
      } else {
        callback(message !== false);
      }
    });
  }

  var pendingLocation = undefined;

  function transitionTo(nextLocation) {
    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.

    pendingLocation = nextLocation;

    confirmTransitionTo(nextLocation, function (ok) {
      if (pendingLocation !== nextLocation) return; // Transition was interrupted.

      if (ok) {
        // treat PUSH to current path like REPLACE to be consistent with browsers
        if (nextLocation.action === _Actions.PUSH) {
          var prevPath = createPath(location);
          var nextPath = createPath(nextLocation);

          if (nextPath === prevPath) nextLocation.action = _Actions.REPLACE;
        }

        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);
      } else if (location && nextLocation.action === _Actions.POP) {
        var prevIndex = allKeys.indexOf(location.key);
        var nextIndex = allKeys.indexOf(nextLocation.key);

        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.
      }
    });
  }

  function push(location) {
    transitionTo(createLocation(location, _Actions.PUSH, createKey()));
  }

  function replace(location) {
    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  function createKey() {
    return createRandomKey(keyLength);
  }

  function createPath(location) {
    if (location == null || typeof location === 'string') return location;

    var pathname = location.pathname;
    var search = location.search;
    var hash = location.hash;

    var result = pathname;

    if (search) result += search;

    if (hash) result += hash;

    return result;
  }

  function createHref(location) {
    return createPath(location);
  }

  function createLocation(location, action) {
    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];

    if (typeof action === 'object') {
      //warning(
      //  false,
      //  'The state (2nd) argument to history.createLocation is deprecated; use a ' +
      //  'location descriptor instead'
      //)

      if (typeof location === 'string') location = _parsePath2['default'](location);

      location = _extends({}, location, { state: action });

      action = key;
      key = arguments[3] || createKey();
    }

    return _createLocation3['default'](location, action, key);
  }

  // deprecated
  function setState(state) {
    if (location) {
      updateLocationState(location, state);
      updateLocation(location);
    } else {
      updateLocationState(getCurrentLocation(), state);
    }
  }

  function updateLocationState(location, state) {
    location.state = _extends({}, location.state, state);
    saveState(location.key, location.state);
  }

  // deprecated
  function registerTransitionHook(hook) {
    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);
  }

  // deprecated
  function unregisterTransitionHook(hook) {
    transitionHooks = transitionHooks.filter(function (item) {
      return item !== hook;
    });
  }

  // deprecated
  function pushState(state, path) {
    if (typeof path === 'string') path = _parsePath2['default'](path);

    push(_extends({ state: state }, path));
  }

  // deprecated
  function replaceState(state, path) {
    if (typeof path === 'string') path = _parsePath2['default'](path);

    replace(_extends({ state: state }, path));
  }

  return {
    listenBefore: listenBefore,
    listen: listen,
    transitionTo: transitionTo,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    createKey: createKey,
    createPath: createPath,
    createHref: createHref,
    createLocation: createLocation,

    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),
    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),
    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),
    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
  };
}

exports['default'] = createHistory;
module.exports = exports['default'];
},{"./Actions":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/Actions.js","./AsyncUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/AsyncUtils.js","./createLocation":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createLocation.js","./deprecate":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/deprecate.js","./parsePath":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/parsePath.js","./runTransitionHook":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/runTransitionHook.js","deep-equal":"/Users/dev/Documents/rail-fyi-client/node_modules/deep-equal/index.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createLocation.js":[function(require,module,exports){
//import warning from 'warning'
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Actions = require('./Actions');

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

function createLocation() {
  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

  if (typeof location === 'string') location = _parsePath2['default'](location);

  if (typeof action === 'object') {
    //warning(
    //  false,
    //  'The state (2nd) argument to createLocation is deprecated; use a ' +
    //  'location descriptor instead'
    //)

    location = _extends({}, location, { state: action });

    action = key || _Actions.POP;
    key = _fourthArg;
  }

  var pathname = location.pathname || '/';
  var search = location.search || '';
  var hash = location.hash || '';
  var state = location.state || null;

  return {
    pathname: pathname,
    search: search,
    hash: hash,
    state: state,
    action: action,
    key: key
  };
}

exports['default'] = createLocation;
module.exports = exports['default'];
},{"./Actions":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/Actions.js","./parsePath":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/parsePath.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createMemoryHistory.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _Actions = require('./Actions');

var _createHistory = require('./createHistory');

var _createHistory2 = _interopRequireDefault(_createHistory);

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

function createStateStorage(entries) {
  return entries.filter(function (entry) {
    return entry.state;
  }).reduce(function (memo, entry) {
    memo[entry.key] = entry.state;
    return memo;
  }, {});
}

function createMemoryHistory() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  if (Array.isArray(options)) {
    options = { entries: options };
  } else if (typeof options === 'string') {
    options = { entries: [options] };
  }

  var history = _createHistory2['default'](_extends({}, options, {
    getCurrentLocation: getCurrentLocation,
    finishTransition: finishTransition,
    saveState: saveState,
    go: go
  }));

  var _options = options;
  var entries = _options.entries;
  var current = _options.current;

  if (typeof entries === 'string') {
    entries = [entries];
  } else if (!Array.isArray(entries)) {
    entries = ['/'];
  }

  entries = entries.map(function (entry) {
    var key = history.createKey();

    if (typeof entry === 'string') return { pathname: entry, key: key };

    if (typeof entry === 'object' && entry) return _extends({}, entry, { key: key });

    !false ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Unable to create history entry from %s', entry) : _invariant2['default'](false) : undefined;
  });

  if (current == null) {
    current = entries.length - 1;
  } else {
    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : _invariant2['default'](false) : undefined;
  }

  var storage = createStateStorage(entries);

  function saveState(key, state) {
    storage[key] = state;
  }

  function readState(key) {
    return storage[key];
  }

  function getCurrentLocation() {
    var entry = entries[current];
    var key = entry.key;
    var basename = entry.basename;
    var pathname = entry.pathname;
    var search = entry.search;

    var path = (basename || '') + pathname + (search || '');

    var state = undefined;
    if (key) {
      state = readState(key);
    } else {
      state = null;
      key = history.createKey();
      entry.key = key;
    }

    var location = _parsePath2['default'](path);

    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
  }

  function canGo(n) {
    var index = current + n;
    return index >= 0 && index < entries.length;
  }

  function go(n) {
    if (n) {
      if (!canGo(n)) {
        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Cannot go(%s) there is not enough history', n) : undefined;
        return;
      }

      current += n;

      var currentLocation = getCurrentLocation();

      // change action to POP
      history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
    }
  }

  function finishTransition(location) {
    switch (location.action) {
      case _Actions.PUSH:
        current += 1;

        // if we are not on the top of stack
        // remove rest and push new
        if (current < entries.length) entries.splice(current);

        entries.push(location);
        saveState(location.key, location.state);
        break;
      case _Actions.REPLACE:
        entries[current] = location;
        saveState(location.key, location.state);
        break;
    }
  }

  return history;
}

exports['default'] = createMemoryHistory;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./Actions":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/Actions.js","./createHistory":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createHistory.js","./parsePath":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/parsePath.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/invariant/browser.js","warning":"/Users/dev/Documents/rail-fyi-client/node_modules/warning/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/deprecate.js":[function(require,module,exports){
//import warning from 'warning'

"use strict";

exports.__esModule = true;
function deprecate(fn) {
  return fn;
  //return function () {
  //  warning(false, '[history] ' + message)
  //  return fn.apply(this, arguments)
  //}
}

exports["default"] = deprecate;
module.exports = exports["default"];
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/extractPath.js":[function(require,module,exports){
"use strict";

exports.__esModule = true;
function extractPath(string) {
  var match = string.match(/^https?:\/\/[^\/]*/);

  if (match == null) return string;

  return string.substring(match[0].length);
}

exports["default"] = extractPath;
module.exports = exports["default"];
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/parsePath.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _extractPath = require('./extractPath');

var _extractPath2 = _interopRequireDefault(_extractPath);

function parsePath(path) {
  var pathname = _extractPath2['default'](path);
  var search = '';
  var hash = '';

  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like "%s"', path) : undefined;

  var hashIndex = pathname.indexOf('#');
  if (hashIndex !== -1) {
    hash = pathname.substring(hashIndex);
    pathname = pathname.substring(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');
  if (searchIndex !== -1) {
    search = pathname.substring(searchIndex);
    pathname = pathname.substring(0, searchIndex);
  }

  if (pathname === '') pathname = '/';

  return {
    pathname: pathname,
    search: search,
    hash: hash
  };
}

exports['default'] = parsePath;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./extractPath":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/extractPath.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","warning":"/Users/dev/Documents/rail-fyi-client/node_modules/warning/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/runTransitionHook.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

function runTransitionHook(hook, location, callback) {
  var result = hook(location, callback);

  if (hook.length < 2) {
    // Assume the hook runs synchronously and automatically
    // call the callback with the return value.
    callback(result);
  } else {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not "return" in a transition hook with a callback argument; call the callback instead') : undefined;
  }
}

exports['default'] = runTransitionHook;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","warning":"/Users/dev/Documents/rail-fyi-client/node_modules/warning/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/useBasename.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _ExecutionEnvironment = require('./ExecutionEnvironment');

var _runTransitionHook = require('./runTransitionHook');

var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

var _extractPath = require('./extractPath');

var _extractPath2 = _interopRequireDefault(_extractPath);

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

var _deprecate = require('./deprecate');

var _deprecate2 = _interopRequireDefault(_deprecate);

function useBasename(createHistory) {
  return function () {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var basename = options.basename;

    var historyOptions = _objectWithoutProperties(options, ['basename']);

    var history = createHistory(historyOptions);

    // Automatically use the value of <base href> in HTML
    // documents as basename if it's not explicitly given.
    if (basename == null && _ExecutionEnvironment.canUseDOM) {
      var base = document.getElementsByTagName('base')[0];

      if (base) basename = _extractPath2['default'](base.href);
    }

    function addBasename(location) {
      if (basename && location.basename == null) {
        if (location.pathname.indexOf(basename) === 0) {
          location.pathname = location.pathname.substring(basename.length);
          location.basename = basename;

          if (location.pathname === '') location.pathname = '/';
        } else {
          location.basename = '';
        }
      }

      return location;
    }

    function prependBasename(location) {
      if (!basename) return location;

      if (typeof location === 'string') location = _parsePath2['default'](location);

      var pname = location.pathname;
      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
      var pathname = normalizedBasename + normalizedPathname;

      return _extends({}, location, {
        pathname: pathname
      });
    }

    // Override all read methods with basename-aware versions.
    function listenBefore(hook) {
      return history.listenBefore(function (location, callback) {
        _runTransitionHook2['default'](hook, addBasename(location), callback);
      });
    }

    function listen(listener) {
      return history.listen(function (location) {
        listener(addBasename(location));
      });
    }

    // Override all write methods with basename-aware versions.
    function push(location) {
      history.push(prependBasename(location));
    }

    function replace(location) {
      history.replace(prependBasename(location));
    }

    function createPath(location) {
      return history.createPath(prependBasename(location));
    }

    function createHref(location) {
      return history.createHref(prependBasename(location));
    }

    function createLocation() {
      return addBasename(history.createLocation.apply(history, arguments));
    }

    // deprecated
    function pushState(state, path) {
      if (typeof path === 'string') path = _parsePath2['default'](path);

      push(_extends({ state: state }, path));
    }

    // deprecated
    function replaceState(state, path) {
      if (typeof path === 'string') path = _parsePath2['default'](path);

      replace(_extends({ state: state }, path));
    }

    return _extends({}, history, {
      listenBefore: listenBefore,
      listen: listen,
      push: push,
      replace: replace,
      createPath: createPath,
      createHref: createHref,
      createLocation: createLocation,

      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
    });
  };
}

exports['default'] = useBasename;
module.exports = exports['default'];
},{"./ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/ExecutionEnvironment.js","./deprecate":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/deprecate.js","./extractPath":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/extractPath.js","./parsePath":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/parsePath.js","./runTransitionHook":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/runTransitionHook.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/useQueries.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _queryString = require('query-string');

var _runTransitionHook = require('./runTransitionHook');

var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

var _parsePath = require('./parsePath');

var _parsePath2 = _interopRequireDefault(_parsePath);

var _deprecate = require('./deprecate');

var _deprecate2 = _interopRequireDefault(_deprecate);

var SEARCH_BASE_KEY = '$searchBase';

function defaultStringifyQuery(query) {
  return _queryString.stringify(query).replace(/%20/g, '+');
}

var defaultParseQueryString = _queryString.parse;

function isNestedObject(object) {
  for (var p in object) {
    if (object.hasOwnProperty(p) && typeof object[p] === 'object' && !Array.isArray(object[p]) && object[p] !== null) return true;
  }return false;
}

/**
 * Returns a new createHistory function that may be used to create
 * history objects that know how to handle URL queries.
 */
function useQueries(createHistory) {
  return function () {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var stringifyQuery = options.stringifyQuery;
    var parseQueryString = options.parseQueryString;

    var historyOptions = _objectWithoutProperties(options, ['stringifyQuery', 'parseQueryString']);

    var history = createHistory(historyOptions);

    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

    function addQuery(location) {
      if (location.query == null) {
        var search = location.search;

        location.query = parseQueryString(search.substring(1));
        location[SEARCH_BASE_KEY] = { search: search, searchBase: '' };
      }

      // TODO: Instead of all the book-keeping here, this should just strip the
      // stringified query from the search.

      return location;
    }

    function appendQuery(location, query) {
      var _extends2;

      var queryString = undefined;
      if (!query || (queryString = stringifyQuery(query)) === '') return location;

      process.env.NODE_ENV !== 'production' ? _warning2['default'](stringifyQuery !== defaultStringifyQuery || !isNestedObject(query), 'useQueries does not stringify nested query objects by default; ' + 'use a custom stringifyQuery function') : undefined;

      if (typeof location === 'string') location = _parsePath2['default'](location);

      var searchBaseSpec = location[SEARCH_BASE_KEY];
      var searchBase = undefined;
      if (searchBaseSpec && location.search === searchBaseSpec.search) {
        searchBase = searchBaseSpec.searchBase;
      } else {
        searchBase = location.search || '';
      }

      var search = searchBase + (searchBase ? '&' : '?') + queryString;

      return _extends({}, location, (_extends2 = {
        search: search
      }, _extends2[SEARCH_BASE_KEY] = { search: search, searchBase: searchBase }, _extends2));
    }

    // Override all read methods with query-aware versions.
    function listenBefore(hook) {
      return history.listenBefore(function (location, callback) {
        _runTransitionHook2['default'](hook, addQuery(location), callback);
      });
    }

    function listen(listener) {
      return history.listen(function (location) {
        listener(addQuery(location));
      });
    }

    // Override all write methods with query-aware versions.
    function push(location) {
      history.push(appendQuery(location, location.query));
    }

    function replace(location) {
      history.replace(appendQuery(location, location.query));
    }

    function createPath(location, query) {
      //warning(
      //  !query,
      //  'the query argument to createPath is deprecated; use a location descriptor instead'
      //)
      return history.createPath(appendQuery(location, query || location.query));
    }

    function createHref(location, query) {
      //warning(
      //  !query,
      //  'the query argument to createHref is deprecated; use a location descriptor instead'
      //)
      return history.createHref(appendQuery(location, query || location.query));
    }

    function createLocation() {
      return addQuery(history.createLocation.apply(history, arguments));
    }

    // deprecated
    function pushState(state, path, query) {
      if (typeof path === 'string') path = _parsePath2['default'](path);

      push(_extends({ state: state }, path, { query: query }));
    }

    // deprecated
    function replaceState(state, path, query) {
      if (typeof path === 'string') path = _parsePath2['default'](path);

      replace(_extends({ state: state }, path, { query: query }));
    }

    return _extends({}, history, {
      listenBefore: listenBefore,
      listen: listen,
      push: push,
      replace: replace,
      createPath: createPath,
      createHref: createHref,
      createLocation: createLocation,

      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
    });
  };
}

exports['default'] = useQueries;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./deprecate":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/deprecate.js","./parsePath":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/parsePath.js","./runTransitionHook":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/runTransitionHook.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","query-string":"/Users/dev/Documents/rail-fyi-client/node_modules/query-string/index.js","warning":"/Users/dev/Documents/rail-fyi-client/node_modules/warning/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/invariant/browser.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/query-string/index.js":[function(require,module,exports){
'use strict';
var strictUriEncode = require('strict-uri-encode');

exports.extract = function (str) {
	return str.split('?')[1] || '';
};

exports.parse = function (str) {
	if (typeof str !== 'string') {
		return {};
	}

	str = str.trim().replace(/^(\?|#|&)/, '');

	if (!str) {
		return {};
	}

	return str.split('&').reduce(function (ret, param) {
		var parts = param.replace(/\+/g, ' ').split('=');
		// Firefox (pre 40) decodes `%3D` to `=`
		// https://github.com/sindresorhus/query-string/pull/37
		var key = parts.shift();
		var val = parts.length > 0 ? parts.join('=') : undefined;

		key = decodeURIComponent(key);

		// missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		val = val === undefined ? null : decodeURIComponent(val);

		if (!ret.hasOwnProperty(key)) {
			ret[key] = val;
		} else if (Array.isArray(ret[key])) {
			ret[key].push(val);
		} else {
			ret[key] = [ret[key], val];
		}

		return ret;
	}, {});
};

exports.stringify = function (obj) {
	return obj ? Object.keys(obj).sort().map(function (key) {
		var val = obj[key];

		if (val === undefined) {
			return '';
		}

		if (val === null) {
			return key;
		}

		if (Array.isArray(val)) {
			return val.slice().sort().map(function (val2) {
				return strictUriEncode(key) + '=' + strictUriEncode(val2);
			}).join('&');
		}

		return strictUriEncode(key) + '=' + strictUriEncode(val);
	}).filter(function (x) {
		return x.length > 0;
	}).join('&') : '';
};

},{"strict-uri-encode":"/Users/dev/Documents/rail-fyi-client/node_modules/strict-uri-encode/index.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-dom/index.js":[function(require,module,exports){
'use strict';

module.exports = require('react/lib/ReactDOM');

},{"react/lib/ReactDOM":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOM.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/AsyncUtils.js":[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports.loopAsync = loopAsync;
exports.mapAsync = mapAsync;

function loopAsync(turns, work, callback) {
  var currentTurn = 0,
      isDone = false;

  function done() {
    isDone = true;
    callback.apply(this, arguments);
  }

  function next() {
    if (isDone) return;

    if (currentTurn < turns) {
      work.call(this, currentTurn++, next, done);
    } else {
      done.apply(this, arguments);
    }
  }

  next();
}

function mapAsync(array, work, callback) {
  var length = array.length;
  var values = [];

  if (length === 0) return callback(null, values);

  var isDone = false,
      doneCount = 0;

  function done(index, error, value) {
    if (isDone) return;

    if (error) {
      isDone = true;
      callback(error);
    } else {
      values[index] = value;

      isDone = ++doneCount === length;

      if (isDone) callback(null, values);
    }
  }

  array.forEach(function (item, index) {
    work(item, index, function (error, value) {
      done(index, error, value);
    });
  });
}
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/History.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _PropTypes = require('./PropTypes');

/**
 * A mixin that adds the "history" instance variable to components.
 */
var History = {

  contextTypes: {
    history: _PropTypes.history
  },

  componentWillMount: function componentWillMount() {
    this.history = this.context.history;
  }

};

exports['default'] = History;
module.exports = exports['default'];
},{"./PropTypes":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PropTypes.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/IndexLink.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Link = require('./Link');

var _Link2 = _interopRequireDefault(_Link);

/**
 * An <IndexLink> is used to link to an <IndexRoute>.
 */

var IndexLink = (function (_Component) {
  _inherits(IndexLink, _Component);

  function IndexLink() {
    _classCallCheck(this, IndexLink);

    _Component.apply(this, arguments);
  }

  IndexLink.prototype.render = function render() {
    return _react2['default'].createElement(_Link2['default'], _extends({}, this.props, { onlyActiveOnIndex: true }));
  };

  return IndexLink;
})(_react.Component);

exports['default'] = IndexLink;
module.exports = exports['default'];
},{"./Link":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/Link.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/IndexRedirect.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Redirect = require('./Redirect');

var _Redirect2 = _interopRequireDefault(_Redirect);

var _PropTypes = require('./PropTypes');

var _React$PropTypes = _react2['default'].PropTypes;
var string = _React$PropTypes.string;
var object = _React$PropTypes.object;

/**
 * An <IndexRedirect> is used to redirect from an indexRoute.
 */

var IndexRedirect = (function (_Component) {
  _inherits(IndexRedirect, _Component);

  function IndexRedirect() {
    _classCallCheck(this, IndexRedirect);

    _Component.apply(this, arguments);
  }

  /* istanbul ignore next: sanity check */

  IndexRedirect.prototype.render = function render() {
    !false ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
  };

  return IndexRedirect;
})(_react.Component);

IndexRedirect.propTypes = {
  to: string.isRequired,
  query: object,
  state: object,
  onEnter: _PropTypes.falsy,
  children: _PropTypes.falsy
};

IndexRedirect.createRouteFromReactElement = function (element, parentRoute) {
  /* istanbul ignore else: sanity check */
  if (parentRoute) {
    parentRoute.indexRoute = _Redirect2['default'].createRouteFromReactElement(element);
  } else {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'An <IndexRedirect> does not make sense at the root of your route config') : undefined;
  }
};

exports['default'] = IndexRedirect;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./PropTypes":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PropTypes.js","./Redirect":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/Redirect.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/invariant/browser.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js","warning":"/Users/dev/Documents/rail-fyi-client/node_modules/warning/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/IndexRoute.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RouteUtils = require('./RouteUtils');

var _PropTypes = require('./PropTypes');

var func = _react2['default'].PropTypes.func;

/**
 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
 * a JSX route config.
 */

var IndexRoute = (function (_Component) {
  _inherits(IndexRoute, _Component);

  function IndexRoute() {
    _classCallCheck(this, IndexRoute);

    _Component.apply(this, arguments);
  }

  /* istanbul ignore next: sanity check */

  IndexRoute.prototype.render = function render() {
    !false ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRoute> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
  };

  return IndexRoute;
})(_react.Component);

IndexRoute.propTypes = {
  path: _PropTypes.falsy,
  component: _PropTypes.component,
  components: _PropTypes.components,
  getComponent: func,
  getComponents: func
};

IndexRoute.createRouteFromReactElement = function (element, parentRoute) {
  /* istanbul ignore else: sanity check */
  if (parentRoute) {
    parentRoute.indexRoute = _RouteUtils.createRouteFromReactElement(element);
  } else {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'An <IndexRoute> does not make sense at the root of your route config') : undefined;
  }
};

exports['default'] = IndexRoute;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./PropTypes":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PropTypes.js","./RouteUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/invariant/browser.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js","warning":"/Users/dev/Documents/rail-fyi-client/node_modules/warning/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/Lifecycle.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var object = _react2['default'].PropTypes.object;

/**
 * The Lifecycle mixin adds the routerWillLeave lifecycle method to a
 * component that may be used to cancel a transition or prompt the user
 * for confirmation.
 *
 * On standard transitions, routerWillLeave receives a single argument: the
 * location we're transitioning to. To cancel the transition, return false.
 * To prompt the user for confirmation, return a prompt message (string).
 *
 * During the beforeunload event (assuming you're using the useBeforeUnload
 * history enhancer), routerWillLeave does not receive a location object
 * because it isn't possible for us to know the location we're transitioning
 * to. In this case routerWillLeave must return a prompt message to prevent
 * the user from closing the window/tab.
 */
var Lifecycle = {

  contextTypes: {
    history: object.isRequired,
    // Nested children receive the route as context, either
    // set by the route component using the RouteContext mixin
    // or by some other ancestor.
    route: object
  },

  propTypes: {
    // Route components receive the route object as a prop.
    route: object
  },

  componentDidMount: function componentDidMount() {
    !this.routerWillLeave ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin requires you to define a routerWillLeave method') : _invariant2['default'](false) : undefined;

    var route = this.props.route || this.context.route;

    !route ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin must be used on either a) a <Route component> or ' + 'b) a descendant of a <Route component> that uses the RouteContext mixin') : _invariant2['default'](false) : undefined;

    this._unlistenBeforeLeavingRoute = this.context.history.listenBeforeLeavingRoute(route, this.routerWillLeave);
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._unlistenBeforeLeavingRoute) this._unlistenBeforeLeavingRoute();
  }

};

exports['default'] = Lifecycle;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/invariant/browser.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/Link.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _React$PropTypes = _react2['default'].PropTypes;
var bool = _React$PropTypes.bool;
var object = _React$PropTypes.object;
var string = _React$PropTypes.string;
var func = _React$PropTypes.func;

function isLeftClickEvent(event) {
  return event.button === 0;
}

function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

function isEmptyObject(object) {
  for (var p in object) {
    if (object.hasOwnProperty(p)) return false;
  }return true;
}

/**
 * A <Link> is used to create an <a> element that links to a route.
 * When that route is active, the link gets the value of its
 * `activeClassName` prop
 *
 * For example, assuming you have the following route:
 *
 *   <Route path="/posts/:postID" component={Post} />
 *
 * You could use the following component to link to that route:
 *
 *   <Link to={`/posts/${post.id}`} />
 *
 * Links may pass along location state and/or query string parameters
 * in the state/query props, respectively.
 *
 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
 */

var Link = (function (_Component) {
  _inherits(Link, _Component);

  function Link() {
    _classCallCheck(this, Link);

    _Component.apply(this, arguments);
  }

  Link.prototype.handleClick = function handleClick(event) {
    var allowTransition = true;

    if (this.props.onClick) this.props.onClick(event);

    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

    if (event.defaultPrevented === true) allowTransition = false;

    // If target prop is set (e.g. to "_blank") let browser handle link.
    /* istanbul ignore if: untestable with Karma */
    if (this.props.target) {
      if (!allowTransition) event.preventDefault();

      return;
    }

    event.preventDefault();

    if (allowTransition) {
      var _props = this.props;
      var state = _props.state;
      var to = _props.to;
      var query = _props.query;
      var hash = _props.hash;

      if (hash) to += hash;

      this.context.history.pushState(state, to, query);
    }
  };

  Link.prototype.render = function render() {
    var _this = this;

    var _props2 = this.props;
    var to = _props2.to;
    var query = _props2.query;
    var hash = _props2.hash;
    var state = _props2.state;
    var activeClassName = _props2.activeClassName;
    var activeStyle = _props2.activeStyle;
    var onlyActiveOnIndex = _props2.onlyActiveOnIndex;

    var props = _objectWithoutProperties(_props2, ['to', 'query', 'hash', 'state', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);

    // Manually override onClick.
    props.onClick = function (e) {
      return _this.handleClick(e);
    };

    // Ignore if rendered outside the context of history, simplifies unit testing.
    var history = this.context.history;

    if (history) {
      props.href = history.createHref(to, query);

      if (hash) props.href += hash;

      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
        if (history.isActive(to, query, onlyActiveOnIndex)) {
          if (activeClassName) props.className += props.className === '' ? activeClassName : ' ' + activeClassName;

          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
        }
      }
    }

    return _react2['default'].createElement('a', props);
  };

  return Link;
})(_react.Component);

Link.contextTypes = {
  history: object
};

Link.propTypes = {
  to: string.isRequired,
  query: object,
  hash: string,
  state: object,
  activeStyle: object,
  activeClassName: string,
  onlyActiveOnIndex: bool.isRequired,
  onClick: func
};

Link.defaultProps = {
  onlyActiveOnIndex: false,
  className: '',
  style: {}
};

exports['default'] = Link;
module.exports = exports['default'];
},{"react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PatternUtils.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;
exports.compilePattern = compilePattern;
exports.matchPattern = matchPattern;
exports.getParamNames = getParamNames;
exports.getParams = getParams;
exports.formatPattern = formatPattern;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function escapeSource(string) {
  return escapeRegExp(string).replace(/\/+/g, '/+');
}

function _compilePattern(pattern) {
  var regexpSource = '';
  var paramNames = [];
  var tokens = [];

  var match = undefined,
      lastIndex = 0,
      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
  while (match = matcher.exec(pattern)) {
    if (match.index !== lastIndex) {
      tokens.push(pattern.slice(lastIndex, match.index));
      regexpSource += escapeSource(pattern.slice(lastIndex, match.index));
    }

    if (match[1]) {
      regexpSource += '([^/?#]+)';
      paramNames.push(match[1]);
    } else if (match[0] === '**') {
      regexpSource += '([\\s\\S]*)';
      paramNames.push('splat');
    } else if (match[0] === '*') {
      regexpSource += '([\\s\\S]*?)';
      paramNames.push('splat');
    } else if (match[0] === '(') {
      regexpSource += '(?:';
    } else if (match[0] === ')') {
      regexpSource += ')?';
    }

    tokens.push(match[0]);

    lastIndex = matcher.lastIndex;
  }

  if (lastIndex !== pattern.length) {
    tokens.push(pattern.slice(lastIndex, pattern.length));
    regexpSource += escapeSource(pattern.slice(lastIndex, pattern.length));
  }

  return {
    pattern: pattern,
    regexpSource: regexpSource,
    paramNames: paramNames,
    tokens: tokens
  };
}

var CompiledPatternsCache = {};

function compilePattern(pattern) {
  if (!(pattern in CompiledPatternsCache)) CompiledPatternsCache[pattern] = _compilePattern(pattern);

  return CompiledPatternsCache[pattern];
}

/**
 * Attempts to match a pattern on the given pathname. Patterns may use
 * the following special characters:
 *
 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
 *                  captured string is considered a "param"
 * - ()             Wraps a segment of the URL that is optional
 * - *              Consumes (non-greedy) all characters up to the next
 *                  character in the pattern, or to the end of the URL if
 *                  there is none
 * - **             Consumes (greedy) all characters up to the next character
 *                  in the pattern, or to the end of the URL if there is none
 *
 * The return value is an object with the following properties:
 *
 * - remainingPathname
 * - paramNames
 * - paramValues
 */

function matchPattern(pattern, pathname) {
  // Make leading slashes consistent between pattern and pathname.
  if (pattern.charAt(0) !== '/') {
    pattern = '/' + pattern;
  }
  if (pathname.charAt(0) !== '/') {
    pathname = '/' + pathname;
  }

  var _compilePattern2 = compilePattern(pattern);

  var regexpSource = _compilePattern2.regexpSource;
  var paramNames = _compilePattern2.paramNames;
  var tokens = _compilePattern2.tokens;

  regexpSource += '/*'; // Capture path separators

  // Special-case patterns like '*' for catch-all routes.
  var captureRemaining = tokens[tokens.length - 1] !== '*';

  if (captureRemaining) {
    // This will match newlines in the remaining path.
    regexpSource += '([\\s\\S]*?)';
  }

  var match = pathname.match(new RegExp('^' + regexpSource + '$', 'i'));

  var remainingPathname = undefined,
      paramValues = undefined;
  if (match != null) {
    if (captureRemaining) {
      remainingPathname = match.pop();
      var matchedPath = match[0].substr(0, match[0].length - remainingPathname.length);

      // If we didn't match the entire pathname, then make sure that the match
      // we did get ends at a path separator (potentially the one we added
      // above at the beginning of the path, if the actual match was empty).
      if (remainingPathname && matchedPath.charAt(matchedPath.length - 1) !== '/') {
        return {
          remainingPathname: null,
          paramNames: paramNames,
          paramValues: null
        };
      }
    } else {
      // If this matched at all, then the match was the entire pathname.
      remainingPathname = '';
    }

    paramValues = match.slice(1).map(function (v) {
      return v != null ? decodeURIComponent(v) : v;
    });
  } else {
    remainingPathname = paramValues = null;
  }

  return {
    remainingPathname: remainingPathname,
    paramNames: paramNames,
    paramValues: paramValues
  };
}

function getParamNames(pattern) {
  return compilePattern(pattern).paramNames;
}

function getParams(pattern, pathname) {
  var _matchPattern = matchPattern(pattern, pathname);

  var paramNames = _matchPattern.paramNames;
  var paramValues = _matchPattern.paramValues;

  if (paramValues != null) {
    return paramNames.reduce(function (memo, paramName, index) {
      memo[paramName] = paramValues[index];
      return memo;
    }, {});
  }

  return null;
}

/**
 * Returns a version of the given pattern with params interpolated. Throws
 * if there is a dynamic segment of the pattern for which there is no param.
 */

function formatPattern(pattern, params) {
  params = params || {};

  var _compilePattern3 = compilePattern(pattern);

  var tokens = _compilePattern3.tokens;

  var parenCount = 0,
      pathname = '',
      splatIndex = 0;

  var token = undefined,
      paramName = undefined,
      paramValue = undefined;
  for (var i = 0, len = tokens.length; i < len; ++i) {
    token = tokens[i];

    if (token === '*' || token === '**') {
      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;

      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : _invariant2['default'](false) : undefined;

      if (paramValue != null) pathname += encodeURI(paramValue);
    } else if (token === '(') {
      parenCount += 1;
    } else if (token === ')') {
      parenCount -= 1;
    } else if (token.charAt(0) === ':') {
      paramName = token.substring(1);
      paramValue = params[paramName];

      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : _invariant2['default'](false) : undefined;

      if (paramValue != null) pathname += encodeURIComponent(paramValue);
    } else {
      pathname += token;
    }
  }

  return pathname.replace(/\/+/g, '/');
}
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/invariant/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PropTypes.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.falsy = falsy;

var _react = require('react');

var func = _react.PropTypes.func;
var object = _react.PropTypes.object;
var arrayOf = _react.PropTypes.arrayOf;
var oneOfType = _react.PropTypes.oneOfType;
var element = _react.PropTypes.element;
var shape = _react.PropTypes.shape;
var string = _react.PropTypes.string;

function falsy(props, propName, componentName) {
  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
}

var history = shape({
  listen: func.isRequired,
  pushState: func.isRequired,
  replaceState: func.isRequired,
  go: func.isRequired
});

exports.history = history;
var location = shape({
  pathname: string.isRequired,
  search: string.isRequired,
  state: object,
  action: string.isRequired,
  key: string
});

exports.location = location;
var component = oneOfType([func, string]);
exports.component = component;
var components = oneOfType([component, object]);
exports.components = components;
var route = oneOfType([object, element]);
exports.route = route;
var routes = oneOfType([route, arrayOf(route)]);

exports.routes = routes;
exports['default'] = {
  falsy: falsy,
  history: history,
  location: location,
  component: component,
  components: components,
  route: route
};
},{"react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/Redirect.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RouteUtils = require('./RouteUtils');

var _PatternUtils = require('./PatternUtils');

var _PropTypes = require('./PropTypes');

var _React$PropTypes = _react2['default'].PropTypes;
var string = _React$PropTypes.string;
var object = _React$PropTypes.object;

/**
 * A <Redirect> is used to declare another URL path a client should
 * be sent to when they request a given URL.
 *
 * Redirects are placed alongside routes in the route configuration
 * and are traversed in the same manner.
 */

var Redirect = (function (_Component) {
  _inherits(Redirect, _Component);

  function Redirect() {
    _classCallCheck(this, Redirect);

    _Component.apply(this, arguments);
  }

  /* istanbul ignore next: sanity check */

  Redirect.prototype.render = function render() {
    !false ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Redirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
  };

  return Redirect;
})(_react.Component);

Redirect.createRouteFromReactElement = function (element) {
  var route = _RouteUtils.createRouteFromReactElement(element);

  if (route.from) route.path = route.from;

  route.onEnter = function (nextState, replaceState) {
    var location = nextState.location;
    var params = nextState.params;

    var pathname = undefined;
    if (route.to.charAt(0) === '/') {
      pathname = _PatternUtils.formatPattern(route.to, params);
    } else if (!route.to) {
      pathname = location.pathname;
    } else {
      var routeIndex = nextState.routes.indexOf(route);
      var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
      var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
      pathname = _PatternUtils.formatPattern(pattern, params);
    }

    replaceState(route.state || location.state, pathname, route.query || location.query);
  };

  return route;
};

Redirect.getRoutePattern = function (routes, routeIndex) {
  var parentPattern = '';

  for (var i = routeIndex; i >= 0; i--) {
    var route = routes[i];
    var pattern = route.path || '';
    parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;

    if (pattern.indexOf('/') === 0) break;
  }

  return '/' + parentPattern;
};

Redirect.propTypes = {
  path: string,
  from: string, // Alias for path
  to: string.isRequired,
  query: object,
  state: object,
  onEnter: _PropTypes.falsy,
  children: _PropTypes.falsy
};

exports['default'] = Redirect;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./PatternUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PatternUtils.js","./PropTypes":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PropTypes.js","./RouteUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/invariant/browser.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/Route.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RouteUtils = require('./RouteUtils');

var _PropTypes = require('./PropTypes');

var _React$PropTypes = _react2['default'].PropTypes;
var string = _React$PropTypes.string;
var func = _React$PropTypes.func;

/**
 * A <Route> is used to declare which components are rendered to the
 * page when the URL matches a given pattern.
 *
 * Routes are arranged in a nested tree structure. When a new URL is
 * requested, the tree is searched depth-first to find a route whose
 * path matches the URL.  When one is found, all routes in the tree
 * that lead to it are considered "active" and their components are
 * rendered into the DOM, nested in the same order as in the tree.
 */

var Route = (function (_Component) {
  _inherits(Route, _Component);

  function Route() {
    _classCallCheck(this, Route);

    _Component.apply(this, arguments);
  }

  /* istanbul ignore next: sanity check */

  Route.prototype.render = function render() {
    !false ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Route> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
  };

  return Route;
})(_react.Component);

Route.createRouteFromReactElement = _RouteUtils.createRouteFromReactElement;

Route.propTypes = {
  path: string,
  component: _PropTypes.component,
  components: _PropTypes.components,
  getComponent: func,
  getComponents: func
};

exports['default'] = Route;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./PropTypes":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PropTypes.js","./RouteUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/invariant/browser.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RouteContext.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var object = _react2['default'].PropTypes.object;

/**
 * The RouteContext mixin provides a convenient way for route
 * components to set the route in context. This is needed for
 * routes that render elements that want to use the Lifecycle
 * mixin to prevent transitions.
 */
var RouteContext = {

  propTypes: {
    route: object.isRequired
  },

  childContextTypes: {
    route: object.isRequired
  },

  getChildContext: function getChildContext() {
    return {
      route: this.props.route
    };
  }

};

exports['default'] = RouteContext;
module.exports = exports['default'];
},{"react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.isReactChildren = isReactChildren;
exports.createRouteFromReactElement = createRouteFromReactElement;
exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
exports.createRoutes = createRoutes;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

function isValidChild(object) {
  return object == null || _react2['default'].isValidElement(object);
}

function isReactChildren(object) {
  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
}

function checkPropTypes(componentName, propTypes, props) {
  componentName = componentName || 'UnknownComponent';

  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error = propTypes[propName](props, propName, componentName);

      /* istanbul ignore if: error logging */
      if (error instanceof Error) process.env.NODE_ENV !== 'production' ? _warning2['default'](false, error.message) : undefined;
    }
  }
}

function createRoute(defaultProps, props) {
  return _extends({}, defaultProps, props);
}

function createRouteFromReactElement(element) {
  var type = element.type;
  var route = createRoute(type.defaultProps, element.props);

  if (type.propTypes) checkPropTypes(type.displayName || type.name, type.propTypes, route);

  if (route.children) {
    var childRoutes = createRoutesFromReactChildren(route.children, route);

    if (childRoutes.length) route.childRoutes = childRoutes;

    delete route.children;
  }

  return route;
}

/**
 * Creates and returns a routes object from the given ReactChildren. JSX
 * provides a convenient way to visualize how routes in the hierarchy are
 * nested.
 *
 *   import { Route, createRoutesFromReactChildren } from 'react-router'
 *   
 *   const routes = createRoutesFromReactChildren(
 *     <Route component={App}>
 *       <Route path="home" component={Dashboard}/>
 *       <Route path="news" component={NewsFeed}/>
 *     </Route>
 *   )
 *
 * Note: This method is automatically used when you provide <Route> children
 * to a <Router> component.
 */

function createRoutesFromReactChildren(children, parentRoute) {
  var routes = [];

  _react2['default'].Children.forEach(children, function (element) {
    if (_react2['default'].isValidElement(element)) {
      // Component classes may have a static create* method.
      if (element.type.createRouteFromReactElement) {
        var route = element.type.createRouteFromReactElement(element, parentRoute);

        if (route) routes.push(route);
      } else {
        routes.push(createRouteFromReactElement(element));
      }
    }
  });

  return routes;
}

/**
 * Creates and returns an array of routes from the given object which
 * may be a JSX route, a plain object route, or an array of either.
 */

function createRoutes(routes) {
  if (isReactChildren(routes)) {
    routes = createRoutesFromReactChildren(routes);
  } else if (routes && !Array.isArray(routes)) {
    routes = [routes];
  }

  return routes;
}
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js","warning":"/Users/dev/Documents/rail-fyi-client/node_modules/warning/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/Router.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _historyLibCreateHashHistory = require('history/lib/createHashHistory');

var _historyLibCreateHashHistory2 = _interopRequireDefault(_historyLibCreateHashHistory);

var _RouteUtils = require('./RouteUtils');

var _RoutingContext = require('./RoutingContext');

var _RoutingContext2 = _interopRequireDefault(_RoutingContext);

var _useRoutes = require('./useRoutes');

var _useRoutes2 = _interopRequireDefault(_useRoutes);

var _PropTypes = require('./PropTypes');

var _React$PropTypes = _react2['default'].PropTypes;
var func = _React$PropTypes.func;
var object = _React$PropTypes.object;

/**
 * A <Router> is a high-level API for automatically setting up
 * a router that renders a <RoutingContext> with all the props
 * it needs each time the URL changes.
 */

var Router = (function (_Component) {
  _inherits(Router, _Component);

  function Router(props, context) {
    _classCallCheck(this, Router);

    _Component.call(this, props, context);

    this.state = {
      location: null,
      routes: null,
      params: null,
      components: null
    };
  }

  Router.prototype.handleError = function handleError(error) {
    if (this.props.onError) {
      this.props.onError.call(this, error);
    } else {
      // Throw errors by default so we don't silently swallow them!
      throw error; // This error probably occurred in getChildRoutes or getComponents.
    }
  };

  Router.prototype.componentWillMount = function componentWillMount() {
    var _this = this;

    var _props = this.props;
    var history = _props.history;
    var children = _props.children;
    var routes = _props.routes;
    var parseQueryString = _props.parseQueryString;
    var stringifyQuery = _props.stringifyQuery;

    var createHistory = history ? function () {
      return history;
    } : _historyLibCreateHashHistory2['default'];

    this.history = _useRoutes2['default'](createHistory)({
      routes: _RouteUtils.createRoutes(routes || children),
      parseQueryString: parseQueryString,
      stringifyQuery: stringifyQuery
    });

    this._unlisten = this.history.listen(function (error, state) {
      if (error) {
        _this.handleError(error);
      } else {
        _this.setState(state, _this.props.onUpdate);
      }
    });
  };

  /* istanbul ignore next: sanity check */

  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    process.env.NODE_ENV !== 'production' ? _warning2['default'](nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : undefined;

    process.env.NODE_ENV !== 'production' ? _warning2['default']((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : undefined;
  };

  Router.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this._unlisten) this._unlisten();
  };

  Router.prototype.render = function render() {
    var _state = this.state;
    var location = _state.location;
    var routes = _state.routes;
    var params = _state.params;
    var components = _state.components;
    var _props2 = this.props;
    var RoutingContext = _props2.RoutingContext;
    var createElement = _props2.createElement;

    var props = _objectWithoutProperties(_props2, ['RoutingContext', 'createElement']);

    if (location == null) return null; // Async match

    // Only forward non-Router-specific props to routing context, as those are
    // the only ones that might be custom routing context props.
    Object.keys(Router.propTypes).forEach(function (propType) {
      return delete props[propType];
    });

    return _react2['default'].createElement(RoutingContext, _extends({}, props, {
      history: this.history,
      createElement: createElement,
      location: location,
      routes: routes,
      params: params,
      components: components
    }));
  };

  return Router;
})(_react.Component);

Router.propTypes = {
  history: object,
  children: _PropTypes.routes,
  routes: _PropTypes.routes, // alias for children
  RoutingContext: func.isRequired,
  createElement: func,
  onError: func,
  onUpdate: func,
  parseQueryString: func,
  stringifyQuery: func
};

Router.defaultProps = {
  RoutingContext: _RoutingContext2['default']
};

exports['default'] = Router;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./PropTypes":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PropTypes.js","./RouteUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","./RoutingContext":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RoutingContext.js","./useRoutes":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/useRoutes.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","history/lib/createHashHistory":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createHashHistory.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js","warning":"/Users/dev/Documents/rail-fyi-client/node_modules/warning/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RoutingContext.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RouteUtils = require('./RouteUtils');

var _getRouteParams = require('./getRouteParams');

var _getRouteParams2 = _interopRequireDefault(_getRouteParams);

var _React$PropTypes = _react2['default'].PropTypes;
var array = _React$PropTypes.array;
var func = _React$PropTypes.func;
var object = _React$PropTypes.object;

/**
 * A <RoutingContext> renders the component tree for a given router state
 * and sets the history object and the current location in context.
 */

var RoutingContext = (function (_Component) {
  _inherits(RoutingContext, _Component);

  function RoutingContext() {
    _classCallCheck(this, RoutingContext);

    _Component.apply(this, arguments);
  }

  RoutingContext.prototype.getChildContext = function getChildContext() {
    var _props = this.props;
    var history = _props.history;
    var location = _props.location;

    return { history: history, location: location };
  };

  RoutingContext.prototype.createElement = function createElement(component, props) {
    return component == null ? null : this.props.createElement(component, props);
  };

  RoutingContext.prototype.render = function render() {
    var _this = this;

    var _props2 = this.props;
    var history = _props2.history;
    var location = _props2.location;
    var routes = _props2.routes;
    var params = _props2.params;
    var components = _props2.components;

    var element = null;

    if (components) {
      element = components.reduceRight(function (element, components, index) {
        if (components == null) return element; // Don't create new children; use the grandchildren.

        var route = routes[index];
        var routeParams = _getRouteParams2['default'](route, params);
        var props = {
          history: history,
          location: location,
          params: params,
          route: route,
          routeParams: routeParams,
          routes: routes
        };

        if (_RouteUtils.isReactChildren(element)) {
          props.children = element;
        } else if (element) {
          for (var prop in element) {
            if (element.hasOwnProperty(prop)) props[prop] = element[prop];
          }
        }

        if (typeof components === 'object') {
          var elements = {};

          for (var key in components) {
            if (components.hasOwnProperty(key)) {
              // Pass through the key as a prop to createElement to allow
              // custom createElement functions to know which named component
              // they're rendering, for e.g. matching up to fetched data.
              elements[key] = _this.createElement(components[key], _extends({
                key: key }, props));
            }
          }

          return elements;
        }

        return _this.createElement(components, props);
      }, element);
    }

    !(element === null || element === false || _react2['default'].isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The root route must render a single element') : _invariant2['default'](false) : undefined;

    return element;
  };

  return RoutingContext;
})(_react.Component);

RoutingContext.propTypes = {
  history: object.isRequired,
  createElement: func.isRequired,
  location: object.isRequired,
  routes: array.isRequired,
  params: object.isRequired,
  components: array.isRequired
};

RoutingContext.defaultProps = {
  createElement: _react2['default'].createElement
};

RoutingContext.childContextTypes = {
  history: object.isRequired,
  location: object.isRequired
};

exports['default'] = RoutingContext;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./RouteUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","./getRouteParams":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/getRouteParams.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/invariant/browser.js","react":"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/TransitionUtils.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.runEnterHooks = runEnterHooks;
exports.runLeaveHooks = runLeaveHooks;

var _AsyncUtils = require('./AsyncUtils');

function createEnterHook(hook, route) {
  return function (a, b, callback) {
    hook.apply(route, arguments);

    if (hook.length < 3) {
      // Assume hook executes synchronously and
      // automatically call the callback.
      callback();
    }
  };
}

function getEnterHooks(routes) {
  return routes.reduce(function (hooks, route) {
    if (route.onEnter) hooks.push(createEnterHook(route.onEnter, route));

    return hooks;
  }, []);
}

/**
 * Runs all onEnter hooks in the given array of routes in order
 * with onEnter(nextState, replaceState, callback) and calls
 * callback(error, redirectInfo) when finished. The first hook
 * to use replaceState short-circuits the loop.
 *
 * If a hook needs to run asynchronously, it may use the callback
 * function. However, doing so will cause the transition to pause,
 * which could lead to a non-responsive UI if the hook is slow.
 */

function runEnterHooks(routes, nextState, callback) {
  var hooks = getEnterHooks(routes);

  if (!hooks.length) {
    callback();
    return;
  }

  var redirectInfo = undefined;
  function replaceState(state, pathname, query) {
    redirectInfo = { pathname: pathname, query: query, state: state };
  }

  _AsyncUtils.loopAsync(hooks.length, function (index, next, done) {
    hooks[index](nextState, replaceState, function (error) {
      if (error || redirectInfo) {
        done(error, redirectInfo); // No need to continue.
      } else {
          next();
        }
    });
  }, callback);
}

/**
 * Runs all onLeave hooks in the given array of routes in order.
 */

function runLeaveHooks(routes) {
  for (var i = 0, len = routes.length; i < len; ++i) {
    if (routes[i].onLeave) routes[i].onLeave.call(routes[i]);
  }
}
},{"./AsyncUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/AsyncUtils.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/computeChangedRoutes.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _PatternUtils = require('./PatternUtils');

function routeParamsChanged(route, prevState, nextState) {
  if (!route.path) return false;

  var paramNames = _PatternUtils.getParamNames(route.path);

  return paramNames.some(function (paramName) {
    return prevState.params[paramName] !== nextState.params[paramName];
  });
}

/**
 * Returns an object of { leaveRoutes, enterRoutes } determined by
 * the change from prevState to nextState. We leave routes if either
 * 1) they are not in the next state or 2) they are in the next state
 * but their params have changed (i.e. /users/123 => /users/456).
 *
 * leaveRoutes are ordered starting at the leaf route of the tree
 * we're leaving up to the common parent route. enterRoutes are ordered
 * from the top of the tree we're entering down to the leaf route.
 */
function computeChangedRoutes(prevState, nextState) {
  var prevRoutes = prevState && prevState.routes;
  var nextRoutes = nextState.routes;

  var leaveRoutes = undefined,
      enterRoutes = undefined;
  if (prevRoutes) {
    leaveRoutes = prevRoutes.filter(function (route) {
      return nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
    });

    // onLeave hooks start at the leaf route.
    leaveRoutes.reverse();

    enterRoutes = nextRoutes.filter(function (route) {
      return prevRoutes.indexOf(route) === -1 || leaveRoutes.indexOf(route) !== -1;
    });
  } else {
    leaveRoutes = [];
    enterRoutes = nextRoutes;
  }

  return {
    leaveRoutes: leaveRoutes,
    enterRoutes: enterRoutes
  };
}

exports['default'] = computeChangedRoutes;
module.exports = exports['default'];
},{"./PatternUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PatternUtils.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/getComponents.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _AsyncUtils = require('./AsyncUtils');

function getComponentsForRoute(location, route, callback) {
  if (route.component || route.components) {
    callback(null, route.component || route.components);
  } else if (route.getComponent) {
    route.getComponent(location, callback);
  } else if (route.getComponents) {
    route.getComponents(location, callback);
  } else {
    callback();
  }
}

/**
 * Asynchronously fetches all components needed for the given router
 * state and calls callback(error, components) when finished.
 *
 * Note: This operation may finish synchronously if no routes have an
 * asynchronous getComponents method.
 */
function getComponents(nextState, callback) {
  _AsyncUtils.mapAsync(nextState.routes, function (route, index, callback) {
    getComponentsForRoute(nextState.location, route, callback);
  }, callback);
}

exports['default'] = getComponents;
module.exports = exports['default'];
},{"./AsyncUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/AsyncUtils.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/getRouteParams.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _PatternUtils = require('./PatternUtils');

/**
 * Extracts an object of params the given route cares about from
 * the given params object.
 */
function getRouteParams(route, params) {
  var routeParams = {};

  if (!route.path) return routeParams;

  var paramNames = _PatternUtils.getParamNames(route.path);

  for (var p in params) {
    if (params.hasOwnProperty(p) && paramNames.indexOf(p) !== -1) routeParams[p] = params[p];
  }return routeParams;
}

exports['default'] = getRouteParams;
module.exports = exports['default'];
},{"./PatternUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PatternUtils.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/index.js":[function(require,module,exports){
/* components */
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _Router2 = require('./Router');

var _Router3 = _interopRequireDefault(_Router2);

exports.Router = _Router3['default'];

var _Link2 = require('./Link');

var _Link3 = _interopRequireDefault(_Link2);

exports.Link = _Link3['default'];

var _IndexLink2 = require('./IndexLink');

var _IndexLink3 = _interopRequireDefault(_IndexLink2);

exports.IndexLink = _IndexLink3['default'];

/* components (configuration) */

var _IndexRedirect2 = require('./IndexRedirect');

var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);

exports.IndexRedirect = _IndexRedirect3['default'];

var _IndexRoute2 = require('./IndexRoute');

var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);

exports.IndexRoute = _IndexRoute3['default'];

var _Redirect2 = require('./Redirect');

var _Redirect3 = _interopRequireDefault(_Redirect2);

exports.Redirect = _Redirect3['default'];

var _Route2 = require('./Route');

var _Route3 = _interopRequireDefault(_Route2);

exports.Route = _Route3['default'];

/* mixins */

var _History2 = require('./History');

var _History3 = _interopRequireDefault(_History2);

exports.History = _History3['default'];

var _Lifecycle2 = require('./Lifecycle');

var _Lifecycle3 = _interopRequireDefault(_Lifecycle2);

exports.Lifecycle = _Lifecycle3['default'];

var _RouteContext2 = require('./RouteContext');

var _RouteContext3 = _interopRequireDefault(_RouteContext2);

exports.RouteContext = _RouteContext3['default'];

/* utils */

var _useRoutes2 = require('./useRoutes');

var _useRoutes3 = _interopRequireDefault(_useRoutes2);

exports.useRoutes = _useRoutes3['default'];

var _RouteUtils = require('./RouteUtils');

exports.createRoutes = _RouteUtils.createRoutes;

var _RoutingContext2 = require('./RoutingContext');

var _RoutingContext3 = _interopRequireDefault(_RoutingContext2);

exports.RoutingContext = _RoutingContext3['default'];

var _PropTypes2 = require('./PropTypes');

var _PropTypes3 = _interopRequireDefault(_PropTypes2);

exports.PropTypes = _PropTypes3['default'];

var _match2 = require('./match');

var _match3 = _interopRequireDefault(_match2);

exports.match = _match3['default'];

var _Router4 = _interopRequireDefault(_Router2);

exports['default'] = _Router4['default'];
},{"./History":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/History.js","./IndexLink":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/IndexLink.js","./IndexRedirect":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/IndexRedirect.js","./IndexRoute":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/IndexRoute.js","./Lifecycle":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/Lifecycle.js","./Link":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/Link.js","./PropTypes":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PropTypes.js","./Redirect":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/Redirect.js","./Route":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/Route.js","./RouteContext":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RouteContext.js","./RouteUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","./Router":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/Router.js","./RoutingContext":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RoutingContext.js","./match":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/match.js","./useRoutes":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/useRoutes.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/isActive.js":[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _PatternUtils = require('./PatternUtils');

function deepEqual(a, b) {
  if (a == b) return true;

  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
      return deepEqual(item, b[index]);
    });
  }

  if (typeof a === 'object') {
    for (var p in a) {
      if (!a.hasOwnProperty(p)) {
        continue;
      }

      if (a[p] === undefined) {
        if (b[p] !== undefined) {
          return false;
        }
      } else if (!b.hasOwnProperty(p)) {
        return false;
      } else if (!deepEqual(a[p], b[p])) {
        return false;
      }
    }

    return true;
  }

  return String(a) === String(b);
}

function paramsAreActive(paramNames, paramValues, activeParams) {
  // FIXME: This doesn't work on repeated params in activeParams.
  return paramNames.every(function (paramName, index) {
    return String(paramValues[index]) === String(activeParams[paramName]);
  });
}

function getMatchingRouteIndex(pathname, activeRoutes, activeParams) {
  var remainingPathname = pathname,
      paramNames = [],
      paramValues = [];

  for (var i = 0, len = activeRoutes.length; i < len; ++i) {
    var route = activeRoutes[i];
    var pattern = route.path || '';

    if (pattern.charAt(0) === '/') {
      remainingPathname = pathname;
      paramNames = [];
      paramValues = [];
    }

    if (remainingPathname !== null) {
      var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
      remainingPathname = matched.remainingPathname;
      paramNames = [].concat(paramNames, matched.paramNames);
      paramValues = [].concat(paramValues, matched.paramValues);
    }

    if (remainingPathname === '' && route.path && paramsAreActive(paramNames, paramValues, activeParams)) return i;
  }

  return null;
}

/**
 * Returns true if the given pathname matches the active routes
 * and params.
 */
function routeIsActive(pathname, routes, params, indexOnly) {
  var i = getMatchingRouteIndex(pathname, routes, params);

  if (i === null) {
    // No match.
    return false;
  } else if (!indexOnly) {
    // Any match is good enough.
    return true;
  }

  // If any remaining routes past the match index have paths, then we can't
  // be on the index route.
  return routes.slice(i + 1).every(function (route) {
    return !route.path;
  });
}

/**
 * Returns true if all key/value pairs in the given query are
 * currently active.
 */
function queryIsActive(query, activeQuery) {
  if (activeQuery == null) return query == null;

  if (query == null) return true;

  return deepEqual(query, activeQuery);
}

/**
 * Returns true if a <Link> to the given pathname/query combination is
 * currently active.
 */
function isActive(pathname, query, indexOnly, location, routes, params) {
  if (location == null) return false;

  if (!routeIsActive(pathname, routes, params, indexOnly)) return false;

  return queryIsActive(query, location.query);
}

exports['default'] = isActive;
module.exports = exports['default'];
},{"./PatternUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PatternUtils.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/match.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _historyLibCreateMemoryHistory = require('history/lib/createMemoryHistory');

var _historyLibCreateMemoryHistory2 = _interopRequireDefault(_historyLibCreateMemoryHistory);

var _historyLibUseBasename = require('history/lib/useBasename');

var _historyLibUseBasename2 = _interopRequireDefault(_historyLibUseBasename);

var _RouteUtils = require('./RouteUtils');

var _useRoutes = require('./useRoutes');

var _useRoutes2 = _interopRequireDefault(_useRoutes);

var createHistory = _useRoutes2['default'](_historyLibUseBasename2['default'](_historyLibCreateMemoryHistory2['default']));

/**
 * A high-level API to be used for server-side rendering.
 *
 * This function matches a location to a set of routes and calls
 * callback(error, redirectLocation, renderProps) when finished.
 *
 * Note: You probably don't want to use this in a browser. Use
 * the history.listen API instead.
 */
function match(_ref, callback) {
  var routes = _ref.routes;
  var location = _ref.location;
  var parseQueryString = _ref.parseQueryString;
  var stringifyQuery = _ref.stringifyQuery;
  var basename = _ref.basename;

  !location ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'match needs a location') : _invariant2['default'](false) : undefined;

  var history = createHistory({
    routes: _RouteUtils.createRoutes(routes),
    parseQueryString: parseQueryString,
    stringifyQuery: stringifyQuery,
    basename: basename
  });

  // Allow match({ location: '/the/path', ... })
  if (typeof location === 'string') location = history.createLocation(location);

  history.match(location, function (error, redirectLocation, nextState) {
    callback(error, redirectLocation, nextState && _extends({}, nextState, { history: history }));
  });
}

exports['default'] = match;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./RouteUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","./useRoutes":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/useRoutes.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","history/lib/createMemoryHistory":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/createMemoryHistory.js","history/lib/useBasename":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/useBasename.js","invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/invariant/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/matchRoutes.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _AsyncUtils = require('./AsyncUtils');

var _PatternUtils = require('./PatternUtils');

var _RouteUtils = require('./RouteUtils');

function getChildRoutes(route, location, callback) {
  if (route.childRoutes) {
    callback(null, route.childRoutes);
  } else if (route.getChildRoutes) {
    route.getChildRoutes(location, function (error, childRoutes) {
      callback(error, !error && _RouteUtils.createRoutes(childRoutes));
    });
  } else {
    callback();
  }
}

function getIndexRoute(route, location, callback) {
  if (route.indexRoute) {
    callback(null, route.indexRoute);
  } else if (route.getIndexRoute) {
    route.getIndexRoute(location, function (error, indexRoute) {
      callback(error, !error && _RouteUtils.createRoutes(indexRoute)[0]);
    });
  } else if (route.childRoutes) {
    (function () {
      var pathless = route.childRoutes.filter(function (obj) {
        return !obj.hasOwnProperty('path');
      });

      _AsyncUtils.loopAsync(pathless.length, function (index, next, done) {
        getIndexRoute(pathless[index], location, function (error, indexRoute) {
          if (error || indexRoute) {
            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
            done(error, routes);
          } else {
            next();
          }
        });
      }, function (err, routes) {
        callback(null, routes);
      });
    })();
  } else {
    callback();
  }
}

function assignParams(params, paramNames, paramValues) {
  return paramNames.reduce(function (params, paramName, index) {
    var paramValue = paramValues && paramValues[index];

    if (Array.isArray(params[paramName])) {
      params[paramName].push(paramValue);
    } else if (paramName in params) {
      params[paramName] = [params[paramName], paramValue];
    } else {
      params[paramName] = paramValue;
    }

    return params;
  }, params);
}

function createParams(paramNames, paramValues) {
  return assignParams({}, paramNames, paramValues);
}

function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
  var pattern = route.path || '';

  if (pattern.charAt(0) === '/') {
    remainingPathname = location.pathname;
    paramNames = [];
    paramValues = [];
  }

  if (remainingPathname !== null) {
    var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
    remainingPathname = matched.remainingPathname;
    paramNames = [].concat(paramNames, matched.paramNames);
    paramValues = [].concat(paramValues, matched.paramValues);

    if (remainingPathname === '' && route.path) {
      var _ret2 = (function () {
        var match = {
          routes: [route],
          params: createParams(paramNames, paramValues)
        };

        getIndexRoute(route, location, function (error, indexRoute) {
          if (error) {
            callback(error);
          } else {
            if (Array.isArray(indexRoute)) {
              var _match$routes;

              process.env.NODE_ENV !== 'production' ? _warning2['default'](indexRoute.every(function (route) {
                return !route.path;
              }), 'Index routes should not have paths') : undefined;
              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
            } else if (indexRoute) {
              process.env.NODE_ENV !== 'production' ? _warning2['default'](!indexRoute.path, 'Index routes should not have paths') : undefined;
              match.routes.push(indexRoute);
            }

            callback(null, match);
          }
        });
        return {
          v: undefined
        };
      })();

      if (typeof _ret2 === 'object') return _ret2.v;
    }
  }

  if (remainingPathname != null || route.childRoutes) {
    // Either a) this route matched at least some of the path or b)
    // we don't have to load this route's children asynchronously. In
    // either case continue checking for matches in the subtree.
    getChildRoutes(route, location, function (error, childRoutes) {
      if (error) {
        callback(error);
      } else if (childRoutes) {
        // Check the child routes to see if any of them match.
        matchRoutes(childRoutes, location, function (error, match) {
          if (error) {
            callback(error);
          } else if (match) {
            // A child route matched! Augment the match and pass it up the stack.
            match.routes.unshift(route);
            callback(null, match);
          } else {
            callback();
          }
        }, remainingPathname, paramNames, paramValues);
      } else {
        callback();
      }
    });
  } else {
    callback();
  }
}

/**
 * Asynchronously matches the given location to a set of routes and calls
 * callback(error, state) when finished. The state object will have the
 * following properties:
 *
 * - routes       An array of routes that matched, in hierarchical order
 * - params       An object of URL parameters
 *
 * Note: This operation may finish synchronously if no routes have an
 * asynchronous getChildRoutes method.
 */
function matchRoutes(routes, location, callback) {
  var remainingPathname = arguments.length <= 3 || arguments[3] === undefined ? location.pathname : arguments[3];
  var paramNames = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];
  var paramValues = arguments.length <= 5 || arguments[5] === undefined ? [] : arguments[5];
  return (function () {
    _AsyncUtils.loopAsync(routes.length, function (index, next, done) {
      matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
        if (error || match) {
          done(error, match);
        } else {
          next();
        }
      });
    }, callback);
  })();
}

exports['default'] = matchRoutes;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./AsyncUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/AsyncUtils.js","./PatternUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/PatternUtils.js","./RouteUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/RouteUtils.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","warning":"/Users/dev/Documents/rail-fyi-client/node_modules/warning/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/useRoutes.js":[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _historyLibActions = require('history/lib/Actions');

var _historyLibUseQueries = require('history/lib/useQueries');

var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

var _computeChangedRoutes2 = require('./computeChangedRoutes');

var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);

var _TransitionUtils = require('./TransitionUtils');

var _isActive2 = require('./isActive');

var _isActive3 = _interopRequireDefault(_isActive2);

var _getComponents = require('./getComponents');

var _getComponents2 = _interopRequireDefault(_getComponents);

var _matchRoutes = require('./matchRoutes');

var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

function hasAnyProperties(object) {
  for (var p in object) {
    if (object.hasOwnProperty(p)) return true;
  }return false;
}

/**
 * Returns a new createHistory function that may be used to create
 * history objects that know about routing.
 *
 * Enhances history objects with the following methods:
 *
 * - listen((error, nextState) => {})
 * - listenBeforeLeavingRoute(route, (nextLocation) => {})
 * - match(location, (error, redirectLocation, nextState) => {})
 * - isActive(pathname, query, indexOnly=false)
 */
function useRoutes(createHistory) {
  return function () {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var routes = options.routes;

    var historyOptions = _objectWithoutProperties(options, ['routes']);

    var history = _historyLibUseQueries2['default'](createHistory)(historyOptions);
    var state = {};

    function isActive(pathname, query) {
      var indexOnly = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

      return _isActive3['default'](pathname, query, indexOnly, state.location, state.routes, state.params);
    }

    function createLocationFromRedirectInfo(_ref) {
      var pathname = _ref.pathname;
      var query = _ref.query;
      var state = _ref.state;

      return history.createLocation(history.createPath(pathname, query), state, _historyLibActions.REPLACE);
    }

    var partialNextState = undefined;

    function match(location, callback) {
      if (partialNextState && partialNextState.location === location) {
        // Continue from where we left off.
        finishMatch(partialNextState, callback);
      } else {
        _matchRoutes2['default'](routes, location, function (error, nextState) {
          if (error) {
            callback(error);
          } else if (nextState) {
            finishMatch(_extends({}, nextState, { location: location }), callback);
          } else {
            callback();
          }
        });
      }
    }

    function finishMatch(nextState, callback) {
      var _computeChangedRoutes = _computeChangedRoutes3['default'](state, nextState);

      var leaveRoutes = _computeChangedRoutes.leaveRoutes;
      var enterRoutes = _computeChangedRoutes.enterRoutes;

      _TransitionUtils.runLeaveHooks(leaveRoutes);

      _TransitionUtils.runEnterHooks(enterRoutes, nextState, function (error, redirectInfo) {
        if (error) {
          callback(error);
        } else if (redirectInfo) {
          callback(null, createLocationFromRedirectInfo(redirectInfo));
        } else {
          // TODO: Fetch components after state is updated.
          _getComponents2['default'](nextState, function (error, components) {
            if (error) {
              callback(error);
            } else {
              // TODO: Make match a pure function and have some other API
              // for "match and update state".
              callback(null, null, state = _extends({}, nextState, { components: components }));
            }
          });
        }
      });
    }

    var RouteGuid = 1;

    function getRouteID(route) {
      return route.__id__ || (route.__id__ = RouteGuid++);
    }

    var RouteHooks = {};

    function getRouteHooksForRoutes(routes) {
      return routes.reduce(function (hooks, route) {
        hooks.push.apply(hooks, RouteHooks[getRouteID(route)]);
        return hooks;
      }, []);
    }

    function transitionHook(location, callback) {
      _matchRoutes2['default'](routes, location, function (error, nextState) {
        if (nextState == null) {
          // TODO: We didn't actually match anything, but hang
          // onto error/nextState so we don't have to matchRoutes
          // again in the listen callback.
          callback();
          return;
        }

        // Cache some state here so we don't have to
        // matchRoutes() again in the listen callback.
        partialNextState = _extends({}, nextState, { location: location });

        var hooks = getRouteHooksForRoutes(_computeChangedRoutes3['default'](state, partialNextState).leaveRoutes);

        var result = undefined;
        for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
          // Passing the location arg here indicates to
          // the user that this is a transition hook.
          result = hooks[i](location);
        }

        callback(result);
      });
    }

    function beforeUnloadHook() {
      // Synchronously check to see if any route hooks want
      // to prevent the current window/tab from closing.
      if (state.routes) {
        var hooks = getRouteHooksForRoutes(state.routes);

        var message = undefined;
        for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
          // Passing no args indicates to the user that this is a
          // beforeunload hook. We don't know the next location.
          message = hooks[i]();
        }

        return message;
      }
    }

    var unlistenBefore = undefined,
        unlistenBeforeUnload = undefined;

    /**
     * Registers the given hook function to run before leaving the given route.
     *
     * During a normal transition, the hook function receives the next location
     * as its only argument and must return either a) a prompt message to show
     * the user, to make sure they want to leave the page or b) false, to prevent
     * the transition.
     *
     * During the beforeunload event (in browsers) the hook receives no arguments.
     * In this case it must return a prompt message to prevent the transition.
     *
     * Returns a function that may be used to unbind the listener.
     */
    function listenBeforeLeavingRoute(route, hook) {
      // TODO: Warn if they register for a route that isn't currently
      // active. They're probably doing something wrong, like re-creating
      // route objects on every location change.
      var routeID = getRouteID(route);
      var hooks = RouteHooks[routeID];

      if (hooks == null) {
        var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);

        hooks = RouteHooks[routeID] = [hook];

        if (thereWereNoRouteHooks) {
          // setup transition & beforeunload hooks
          unlistenBefore = history.listenBefore(transitionHook);

          if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
        }
      } else if (hooks.indexOf(hook) === -1) {
        hooks.push(hook);
      }

      return function () {
        var hooks = RouteHooks[routeID];

        if (hooks != null) {
          var newHooks = hooks.filter(function (item) {
            return item !== hook;
          });

          if (newHooks.length === 0) {
            delete RouteHooks[routeID];

            if (!hasAnyProperties(RouteHooks)) {
              // teardown transition & beforeunload hooks
              if (unlistenBefore) {
                unlistenBefore();
                unlistenBefore = null;
              }

              if (unlistenBeforeUnload) {
                unlistenBeforeUnload();
                unlistenBeforeUnload = null;
              }
            }
          } else {
            RouteHooks[routeID] = newHooks;
          }
        }
      };
    }

    /**
     * This is the API for stateful environments. As the location
     * changes, we update state and call the listener. We can also
     * gracefully handle errors and redirects.
     */
    function listen(listener) {
      // TODO: Only use a single history listener. Otherwise we'll
      // end up with multiple concurrent calls to match.
      return history.listen(function (location) {
        if (state.location === location) {
          listener(null, state);
        } else {
          match(location, function (error, redirectLocation, nextState) {
            if (error) {
              listener(error);
            } else if (redirectLocation) {
              history.transitionTo(redirectLocation);
            } else if (nextState) {
              listener(null, nextState);
            } else {
              process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : undefined;
            }
          });
        }
      });
    }

    return _extends({}, history, {
      isActive: isActive,
      match: match,
      listenBeforeLeavingRoute: listenBeforeLeavingRoute,
      listen: listen
    });
  };
}

exports['default'] = useRoutes;
module.exports = exports['default'];
}).call(this,require('_process'))

},{"./TransitionUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/TransitionUtils.js","./computeChangedRoutes":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/computeChangedRoutes.js","./getComponents":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/getComponents.js","./isActive":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/isActive.js","./matchRoutes":"/Users/dev/Documents/rail-fyi-client/node_modules/react-router/lib/matchRoutes.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","history/lib/Actions":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/Actions.js","history/lib/useQueries":"/Users/dev/Documents/rail-fyi-client/node_modules/history/lib/useQueries.js","warning":"/Users/dev/Documents/rail-fyi-client/node_modules/warning/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/AutoFocusUtils.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusUtils
 * @typechecks static-only
 */

'use strict';

var ReactMount = require('./ReactMount');

var findDOMNode = require('./findDOMNode');
var focusNode = require('fbjs/lib/focusNode');

var Mixin = {
  componentDidMount: function () {
    if (this.props.autoFocus) {
      focusNode(findDOMNode(this));
    }
  }
};

var AutoFocusUtils = {
  Mixin: Mixin,

  focusDOMComponent: function () {
    focusNode(ReactMount.getNode(this._rootNodeID));
  }
};

module.exports = AutoFocusUtils;
},{"./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js","./findDOMNode":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/findDOMNode.js","fbjs/lib/focusNode":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/focusNode.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/BeforeInputEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var FallbackCompositionState = require('./FallbackCompositionState');
var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');
var SyntheticInputEvent = require('./SyntheticInputEvent');

var keyOf = require('fbjs/lib/keyOf');

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBeforeInput: null }),
      captured: keyOf({ onBeforeInputCapture: null })
    },
    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionEnd: null }),
      captured: keyOf({ onCompositionEndCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionStart: null }),
      captured: keyOf({ onCompositionStartCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionUpdate: null }),
      captured: keyOf({ onCompositionUpdateCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;
},{"./EventConstants":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPropagators.js","./FallbackCompositionState":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/FallbackCompositionState.js","./SyntheticCompositionEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticCompositionEvent.js","./SyntheticInputEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticInputEvent.js","fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/keyOf":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyOf.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/CSSProperty.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  stopOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/CSSPropertyOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactPerf = require('./ReactPerf');

var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
var dangerousStyleValue = require('./dangerousStyleValue');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
var warning = require('fbjs/lib/warning');

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function (styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function (node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styles[styleName]);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
  setValueForStyles: 'setValueForStyles'
});

module.exports = CSSPropertyOperations;
}).call(this,require('_process'))

},{"./CSSProperty":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/CSSProperty.js","./ReactPerf":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./dangerousStyleValue":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/dangerousStyleValue.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/camelizeStyleName":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/camelizeStyleName.js","fbjs/lib/hyphenateStyleName":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/hyphenateStyleName.js","fbjs/lib/memoizeStringOnly":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/memoizeStringOnly.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/CallbackQueue.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function (callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function () {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function () {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function () {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/PooledClass.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ChangeEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactUpdates = require('./ReactUpdates');
var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');
var isEventSupported = require('./isEventSupported');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onChange: null }),
      captured: keyOf({ onChangeCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
      if (targetID) {
        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
    }
  }

};

module.exports = ChangeEventPlugin;
},{"./EventConstants":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPluginHub.js","./EventPropagators":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPropagators.js","./ReactUpdates":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","./SyntheticEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js","./getEventTarget":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventTarget.js","./isEventSupported":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/isEventSupported.js","./isTextInputElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/isTextInputElement.js","fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/keyOf":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyOf.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ClientReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

'use strict';

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function () {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMChildrenOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

'use strict';

var Danger = require('./Danger');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');
var ReactPerf = require('./ReactPerf');

var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var invariant = require('fbjs/lib/invariant');

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.

  // fix render order error in safari
  // IE8 will throw error when index out of list size.
  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

  parentNode.insertBefore(childNode, beforeChild);
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: setTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function (updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; i < updates.length; i++) {
      update = updates[i];
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup;
    // markupList is either a list of markup or just a list of elements
    if (markupList.length && typeof markupList[0] === 'string') {
      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
    } else {
      renderedMarkup = markupList;
    }

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; k < updates.length; k++) {
      update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.SET_MARKUP:
          setInnerHTML(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
  updateTextContent: 'updateTextContent'
});

module.exports = DOMChildrenOperations;
}).call(this,require('_process'))

},{"./Danger":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Danger.js","./ReactMultiChildUpdateTypes":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./ReactPerf":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./setInnerHTML":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/setInnerHTML.js","./setTextContent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/setTextContent.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMProperty.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };

      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseAttribute:
   *   Whether the property must be accessed and mutated using `*Attribute()`.
   *   (This includes anything that fails `<propName> in <element>`.)
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasSideEffects:
   *   Whether or not setting a value causes side effects such as triggering
   *   resources to be loaded or text selection changes. If true, we read from
   *   the DOM before updating to ensure that the value is only set if it has
   *   changed.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function (nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMPropertyOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactPerf = require('./ReactPerf');

var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');
var warning = require('fbjs/lib/warning');

// Simplified subset
var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function (name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
      } else if (propertyInfo.mustUseAttribute) {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      } else {
        var propName = propertyInfo.propertyName;
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseAttribute) {
        node.removeAttribute(propertyInfo.attributeName);
      } else {
        var propName = propertyInfo.propertyName;
        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  }

};

ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
  setValueForProperty: 'setValueForProperty',
  setValueForAttribute: 'setValueForAttribute',
  deleteValueForProperty: 'deleteValueForProperty'
});

module.exports = DOMPropertyOperations;
}).call(this,require('_process'))

},{"./DOMProperty":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMProperty.js","./ReactPerf":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./quoteAttributeValueForBrowser":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/quoteAttributeValueForBrowser.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Danger.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
var emptyFunction = require('fbjs/lib/emptyFunction');
var getMarkupWrap = require('fbjs/lib/getMarkupWrap');
var invariant = require('fbjs/lib/invariant');

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function (markupList) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
          // This index will be parsed back out below.
          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;
        } else if (process.env.NODE_ENV !== 'production') {
          console.error('Danger: Discarding unexpected node:', renderNode);
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

    var newChild;
    if (typeof markup === 'string') {
      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    } else {
      newChild = markup;
    }
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/createNodesFromMarkup":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/createNodesFromMarkup.js","fbjs/lib/emptyFunction":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyFunction.js","fbjs/lib/getMarkupWrap":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/getMarkupWrap.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DefaultEventPluginOrder.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = require('fbjs/lib/keyOf');

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

module.exports = DefaultEventPluginOrder;
},{"fbjs/lib/keyOf":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyOf.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EnterLeaveEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');

var ReactMount = require('./ReactMount');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({ onMouseEnter: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  },
  mouseLeave: {
    registrationName: keyOf({ onMouseLeave: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    var fromID = '';
    var toID = '';
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      fromID = topLevelTargetID;
      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
      if (to) {
        toID = ReactMount.getID(to);
      } else {
        to = win;
      }
      to = to || win;
    } else {
      from = win;
      to = topLevelTarget;
      toID = topLevelTargetID;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;
},{"./EventConstants":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPropagators.js","./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js","./SyntheticMouseEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticMouseEvent.js","fbjs/lib/keyOf":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyOf.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventConstants.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var PropagationPhases = keyMirror({ bubbled: null, captured: null });

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topAbort: null,
  topBlur: null,
  topCanPlay: null,
  topCanPlayThrough: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topDurationChange: null,
  topEmptied: null,
  topEncrypted: null,
  topEnded: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topLoadedData: null,
  topLoadedMetadata: null,
  topLoadStart: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topPause: null,
  topPlay: null,
  topPlaying: null,
  topProgress: null,
  topRateChange: null,
  topReset: null,
  topScroll: null,
  topSeeked: null,
  topSeeking: null,
  topSelectionChange: null,
  topStalled: null,
  topSubmit: null,
  topSuspend: null,
  topTextInput: null,
  topTimeUpdate: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topVolumeChange: null,
  topWaiting: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;
},{"fbjs/lib/keyMirror":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyMirror.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPluginHub.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = require('./EventPluginRegistry');
var EventPluginUtils = require('./EventPluginUtils');
var ReactErrorUtils = require('./ReactErrorUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function (InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function () {
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function (id, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(id, registrationName, listener);
    }
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (id, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(id, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function (id) {
    for (var registrationName in listenerBank) {
      if (!listenerBank[registrationName][id]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(id, registrationName);
      }

      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
}).call(this,require('_process'))

},{"./EventPluginRegistry":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPluginRegistry.js","./EventPluginUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPluginUtils.js","./ReactErrorUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactErrorUtils.js","./accumulateInto":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/forEachAccumulated.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPluginRegistry.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (InjectedEventPluginOrder) {
    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPluginUtils.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = require('./EventConstants');
var ReactErrorUtils = require('./ReactErrorUtils');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function (InjectedMount) {
    injection.Mount = InjectedMount;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, simulated, listener, domID) {
  var type = event.type || 'unknown-event';
  event.currentTarget = injection.Mount.getNode(domID);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
  }
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getNode: function (id) {
    return injection.Mount.getNode(id);
  },
  getID: function (node) {
    return injection.Mount.getID(node);
  },

  injection: injection
};

module.exports = EventPluginUtils;
}).call(this,require('_process'))

},{"./EventConstants":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventConstants.js","./ReactErrorUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactErrorUtils.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPropagators.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');

var warning = require('fbjs/lib/warning');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
}).call(this,require('_process'))

},{"./EventConstants":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPluginHub.js","./accumulateInto":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/accumulateInto.js","./forEachAccumulated":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/forEachAccumulated.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/FallbackCompositionState.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/PooledClass.js","./getTextContentAccessor":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getTextContentAccessor.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/HTMLDOMPropertyConfig.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
}

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    challenge: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    headers: null,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    high: null,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    inputMode: MUST_USE_ATTRIBUTE,
    integrity: null,
    is: MUST_USE_ATTRIBUTE,
    keyParams: MUST_USE_ATTRIBUTE,
    keyType: MUST_USE_ATTRIBUTE,
    kind: null,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    low: null,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    minLength: MUST_USE_ATTRIBUTE,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    nonce: MUST_USE_ATTRIBUTE,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcLang: null,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    summary: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,
    wrap: null,

    /**
     * RDFa Properties
     */
    about: MUST_USE_ATTRIBUTE,
    datatype: MUST_USE_ATTRIBUTE,
    inlist: MUST_USE_ATTRIBUTE,
    prefix: MUST_USE_ATTRIBUTE,
    // property is also supported for OpenGraph in meta tags.
    property: MUST_USE_ATTRIBUTE,
    resource: MUST_USE_ATTRIBUTE,
    'typeof': MUST_USE_ATTRIBUTE,
    vocab: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: MUST_USE_ATTRIBUTE,
    autoCorrect: MUST_USE_ATTRIBUTE,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: null,
    // color is for Safari mask-icon link
    color: null,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: MUST_USE_ATTRIBUTE,
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    itemType: MUST_USE_ATTRIBUTE,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: MUST_USE_ATTRIBUTE,
    itemRef: MUST_USE_ATTRIBUTE,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: null,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: MUST_USE_ATTRIBUTE,
    // IE-only attribute that controls focus behavior
    unselectable: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoComplete: 'autocomplete',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    autoSave: 'autosave',
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
    encType: 'encoding',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;
},{"./DOMProperty":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMProperty.js","fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/LinkedValueUtils.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

'use strict';

var ReactPropTypes = require('./ReactPropTypes');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: ReactPropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
}).call(this,require('_process'))

},{"./ReactPropTypeLocations":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocations.js","./ReactPropTypes":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPropTypes.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

'use strict';

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
}

module.exports = assign;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/PooledClass.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/React.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

'use strict';

var ReactDOM = require('./ReactDOM');
var ReactDOMServer = require('./ReactDOMServer');
var ReactIsomorphic = require('./ReactIsomorphic');

var assign = require('./Object.assign');
var deprecated = require('./deprecated');

// `version` will be added here by ReactIsomorphic.
var React = {};

assign(React, ReactIsomorphic);

assign(React, {
  // ReactDOM
  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

  // ReactDOMServer
  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
});

React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

module.exports = React;
},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactDOM":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOM.js","./ReactDOMServer":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMServer.js","./ReactIsomorphic":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactIsomorphic.js","./deprecated":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/deprecated.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactBrowserComponentMixin.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

'use strict';

var ReactInstanceMap = require('./ReactInstanceMap');

var findDOMNode = require('./findDOMNode');
var warning = require('fbjs/lib/warning');

var didWarnKey = '_getDOMNodeDidWarn';

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function () {
    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
    this.constructor[didWarnKey] = true;
    return findDOMNode(this);
  }
};

module.exports = ReactBrowserComponentMixin;
}).call(this,require('_process'))

},{"./ReactInstanceMap":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInstanceMap.js","./findDOMNode":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/findDOMNode.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactBrowserEventEmitter.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');
var ReactPerf = require('./ReactPerf');
var ViewportMetrics = require('./ViewportMetrics');

var assign = require('./Object.assign');
var isEventSupported = require('./isEventSupported');

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
  putListener: 'putListener',
  deleteListener: 'deleteListener'
});

module.exports = ReactBrowserEventEmitter;
},{"./EventConstants":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPluginHub":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPluginHub.js","./EventPluginRegistry":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPluginRegistry.js","./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactEventEmitterMixin":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactEventEmitterMixin.js","./ReactPerf":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ViewportMetrics":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ViewportMetrics.js","./isEventSupported":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/isEventSupported.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactChildReconciler.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 * @typechecks static-only
 */

'use strict';

var ReactReconciler = require('./ReactReconciler');

var instantiateReactComponent = require('./instantiateReactComponent');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

function instantiateChild(childInstances, child, name) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, null);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};
    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, transaction, context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return null;
    }
    var name;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          ReactReconciler.unmountComponent(prevChild, name);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, null);
        nextChildren[name] = nextChildInstance;
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        ReactReconciler.unmountComponent(prevChildren[name]);
      }
    }
    return nextChildren;
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild);
      }
    }
  }

};

module.exports = ReactChildReconciler;
}).call(this,require('_process'))

},{"./ReactReconciler":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactReconciler.js","./instantiateReactComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/instantiateReactComponent.js","./shouldUpdateReactComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/shouldUpdateReactComponent.js","./traverseAllChildren":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/traverseAllChildren.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactChildren.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = require('./PooledClass');
var ReactElement = require('./ReactElement');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('./traverseAllChildren');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result;
  var keyPrefix = bookKeeping.keyPrefix;
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"./PooledClass":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/PooledClass.js","./ReactElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js","./traverseAllChildren":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/traverseAllChildren.js","fbjs/lib/emptyFunction":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyFunction.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactClass.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';

var ReactComponent = require('./ReactComponent');
var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var keyMirror = require('fbjs/lib/keyMirror');
var keyOf = require('fbjs/lib/keyOf');
var warning = require('fbjs/lib/warning');

var MIXINS_KEY = keyOf({ mixins: null });

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});

var injectedMixins = [];

var warnedSetProps = false;
function warnSetProps() {
  if (!warnedSetProps) {
    warnedSetProps = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
  }
}

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
    }
    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
    }
    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
    }
    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

// noop
function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but not in __DEV__
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = (name in RESERVED_SPEC_KEYS);
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

    var isInherited = (name in Constructor);
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    /* eslint-disable block-scoped-var, no-undef */
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
      /* eslint-enable */
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  setProps: function (partialProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueSetProps(this, partialProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Replace all the props.
   *
   * @param {object} newProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  replaceProps: function (newProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueReplaceProps(this, newProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  }
};

var ReactClassComponent = function () {};
assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    var Constructor = function (props, context, updater) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindMap) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

      this.state = initialState;
    };
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactComponent.js","./ReactElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactNoopUpdateQueue":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactNoopUpdateQueue.js","./ReactPropTypeLocationNames":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocations.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/emptyObject":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/keyMirror":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyMirror.js","fbjs/lib/keyOf":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyOf.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var canDefineProperty = require('./canDefineProperty');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
  }
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
    setProps: ['setProps', 'Instead, call render again at the top level.']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
}).call(this,require('_process'))

},{"./ReactNoopUpdateQueue":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactNoopUpdateQueue.js","./canDefineProperty":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/canDefineProperty.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/emptyObject":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactComponentBrowserEnvironment.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactMount = require('./ReactMount');

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function (rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  }

};

module.exports = ReactComponentBrowserEnvironment;
},{"./ReactDOMIDOperations":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMIDOperations.js","./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactComponentEnvironment.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null,

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkupByID: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactCompositeComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactPerf = require('./ReactPerf');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum(component) {
  var owner = component._currentElement._owner || null;
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  return Component(this.props, this.context, this.updater);
};

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;

    // See ReactUpdateQueue
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedComponent = null;

    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._rootNodeID = rootID;

    var publicProps = this._processProps(this._currentElement.props);
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    // Initialize the public class
    var inst;
    var renderedElement;

    // This is a way to detect if Component is a stateless arrow function
    // component, which is not newable. It might not be 100% reliable but is
    // something we can do until we start detecting that Component extends
    // React.Component. We already assume that typeof Component === 'function'.
    var canInstantiate = ('prototype' in Component);

    if (canInstantiate) {
      if (process.env.NODE_ENV !== 'production') {
        ReactCurrentOwner.current = this;
        try {
          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
        } finally {
          ReactCurrentOwner.current = null;
        }
      } else {
        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
      }
    }

    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
      renderedElement = inst;
      inst = new StatelessComponent(Component);
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
      } else {
        // We support ES6 inheriting from React.Component, the module pattern,
        // and stateless components, but not ES6 classes that don't extend
        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
      }
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = ReactUpdateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    if (inst.componentWillMount) {
      inst.componentWillMount();
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    this._renderedComponent = this._instantiateReactComponent(renderedElement);

    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
    if (inst.componentDidMount) {
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
    }

    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function () {
    var inst = this._instance;

    if (inst.componentWillUnmount) {
      inst.componentWillUnmount();
    }

    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;
    this._instance = null;

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var maskedContext = null;
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext = inst.getChildContext && inst.getChildContext();
    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
      if (process.env.NODE_ENV !== 'production') {
        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function (newProps) {
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.propTypes) {
        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function (propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.getName();
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // top-level render calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);

          if (location === ReactPropTypeLocations.prop) {
            // Preface gives us something to blacklist in warning module
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
          } else {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
          }
        }
      }
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
    }

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;

    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
    var nextProps;

    // Distinguish between a props update versus a simple state update
    if (prevParentElement === nextParentElement) {
      // Skip checking prop types again -- we don't read inst.props to avoid
      // warning for DOM component props in this upgrade
      nextProps = nextParentElement.props;
    } else {
      nextProps = this._processProps(nextParentElement.props);
      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.

      if (inst.componentWillReceiveProps) {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);

    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      inst.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      // These two IDs are actually the same! But nothing should rely on that.
      var thisID = this._rootNodeID;
      var prevComponentID = prevComponentInstance._rootNodeID;
      ReactReconciler.unmountComponent(prevComponentInstance);

      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    }
  },

  /**
   * @protected
   */
  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedComponent = inst.render();
    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;
      }
    }

    return renderedComponent;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedComponent;
    ReactCurrentOwner.current = this;
    try {
      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
    } finally {
      ReactCurrentOwner.current = null;
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
    return renderedComponent;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (inst instanceof StatelessComponent) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent',
  _renderValidatedComponent: '_renderValidatedComponent'
});

var ReactCompositeComponent = {

  Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactComponentEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactComponentEnvironment.js","./ReactCurrentOwner":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactInstanceMap":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInstanceMap.js","./ReactPerf":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ReactPropTypeLocationNames":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocations.js","./ReactReconciler":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactReconciler.js","./ReactUpdateQueue":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdateQueue.js","./shouldUpdateReactComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/shouldUpdateReactComponent.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/emptyObject":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOM.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdates = require('./ReactUpdates');
var ReactVersion = require('./ReactVersion');

var findDOMNode = require('./findDOMNode');
var renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');
var warning = require('fbjs/lib/warning');

ReactDefaultInjection.inject();

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  findDOMNode: findDOMNode,
  render: render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
/* eslint-enable camelcase */
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    CurrentOwner: ReactCurrentOwner,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    Reconciler: ReactReconciler,
    TextComponent: ReactDOMTextComponent
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

    // shams
    Object.create, Object.freeze];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
        break;
      }
    }
  }
}

module.exports = React;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactDOMTextComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMTextComponent.js","./ReactDefaultInjection":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDefaultInjection.js","./ReactInstanceHandles":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ReactReconciler":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactReconciler.js","./ReactUpdates":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","./ReactVersion":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactVersion.js","./findDOMNode":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/findDOMNode.js","./renderSubtreeIntoContainer":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/renderSubtreeIntoContainer.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMButton.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var mouseListenerNames = {
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,

  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
};

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = {
  getNativeProps: function (inst, props, context) {
    if (!props.disabled) {
      return props;
    }

    // Copy the props, except the mouse listeners
    var nativeProps = {};
    for (var key in props) {
      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
        nativeProps[key] = props[key];
      }
    }

    return nativeProps;
  }
};

module.exports = ReactDOMButton;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

/* global hasOwnProperty:true */

'use strict';

var AutoFocusUtils = require('./AutoFocusUtils');
var CSSPropertyOperations = require('./CSSPropertyOperations');
var DOMProperty = require('./DOMProperty');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var EventConstants = require('./EventConstants');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDOMButton = require('./ReactDOMButton');
var ReactDOMInput = require('./ReactDOMInput');
var ReactDOMOption = require('./ReactDOMOption');
var ReactDOMSelect = require('./ReactDOMSelect');
var ReactDOMTextarea = require('./ReactDOMTextarea');
var ReactMount = require('./ReactMount');
var ReactMultiChild = require('./ReactMultiChild');
var ReactPerf = require('./ReactPerf');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var isEventSupported = require('./isEventSupported');
var keyOf = require('fbjs/lib/keyOf');
var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var shallowEqual = require('fbjs/lib/shallowEqual');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var CHILDREN = keyOf({ children: null });
var STYLE = keyOf({ style: null });
var HTML = keyOf({ __html: null });

var ELEMENT_NODE_TYPE = 1;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

var legacyPropsDescriptor;
if (process.env.NODE_ENV !== 'production') {
  legacyPropsDescriptor = {
    props: {
      enumerable: false,
      get: function () {
        var component = this._reactInternalComponent;
        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
        return component._currentElement.props;
      }
    }
  };
}

function legacyGetDOMNode() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return this;
}

function legacyIsMounted() {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return !!component;
}

function legacySetStateEtc() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
}

function legacySetProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function legacyReplaceProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined becauses undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (process.env.NODE_ENV !== 'production') {
    if (voidElementTags[component._tag]) {
      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
    }
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
}

function enqueuePutListener(id, registrationName, listener, transaction) {
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
    listenTo(registrationName, doc);
  }
  transaction.getReactMountReady().enqueue(putListener, {
    id: id,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
  var node = ReactMount.getNode(inst._rootNodeID);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

  switch (inst._tag) {
    case 'iframe':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
        }
      }

      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
      break;
  }
}

function mountReadyInputWrapper() {
  ReactDOMInput.mountReadyWrapper(this);
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

// NOTE: menuitem's close tag should be omitted, but that causes problems.
var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = ({}).hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
    validatedTagCache[tag] = true;
  }
}

function processChildContextDev(context, inst) {
  // Pass down our tag name to child components for validation purposes
  context = assign({}, context);
  var info = context[validateDOMNesting.ancestorInfoContextKey];
  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
  return context;
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag.toLowerCase();
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._nodeWithLegacyProperties = null;
  if (process.env.NODE_ENV !== 'production') {
    this._unprocessedContextDev = null;
    this._processedContextDev = null;
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function (element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (rootID, transaction, context) {
    this._rootNodeID = rootID;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'button':
        props = ReactDOMButton.getNativeProps(this, props, context);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, context);
        props = ReactDOMInput.getNativeProps(this, props, context);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, context);
        props = ReactDOMOption.getNativeProps(this, props, context);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, context);
        props = ReactDOMSelect.getNativeProps(this, props, context);
        context = ReactDOMSelect.processChildContext(this, props, context);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, context);
        props = ReactDOMTextarea.getNativeProps(this, props, context);
        break;
    }

    assertValidProps(this, props);
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      this._unprocessedContextDev = context;
      this._processedContextDev = processChildContextDev(context, this);
      context = this._processedContextDev;
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement(this._currentElement.type);
      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
      // Populate node cache
      ReactMount.getID(el);
      this._updateDOMProperties({}, props, transaction, el);
      this._createInitialChildren(transaction, props, context, el);
      mountImage = el;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
      // falls through
      case 'button':
      case 'select':
      case 'textarea':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (propKey !== CHILDREN) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, el) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        setInnerHTML(el, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        setTextContent(el, contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          el.appendChild(mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'button':
        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
        break;
      case 'input':
        ReactDOMInput.updateWrapper(this);
        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
        break;
    }

    if (process.env.NODE_ENV !== 'production') {
      // If the context is reference-equal to the old one, pass down the same
      // processed object so the update bailout in ReactReconciler behaves
      // correctly (and identically in dev and prod). See #5005.
      if (this._unprocessedContextDev !== context) {
        this._unprocessedContextDev = context;
        this._processedContextDev = processChildContextDev(context, this);
      }
      context = this._processedContextDev;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction, null);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    if (!canDefineProperty && this._nodeWithLegacyProperties) {
      this._nodeWithLegacyProperties.props = nextProps;
    }

    if (this._tag === 'select') {
      // <select> value update needs to occur after <option> children
      // reconciliation
      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        DOMPropertyOperations.deleteValueForProperty(node, propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        if (propKey === CHILDREN) {
          nextProp = null;
        }
        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertantly setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      if (!node) {
        node = ReactMount.getNode(this._rootNodeID);
      }
      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction, context);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function () {
    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
        ReactDOMInput.unmountWrapper(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
        break;
    }

    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
    this._wrapperState = null;
    if (this._nodeWithLegacyProperties) {
      var node = this._nodeWithLegacyProperties;
      node._reactInternalComponent = null;
      this._nodeWithLegacyProperties = null;
    }
  },

  getPublicInstance: function () {
    if (!this._nodeWithLegacyProperties) {
      var node = ReactMount.getNode(this._rootNodeID);

      node._reactInternalComponent = this;
      node.getDOMNode = legacyGetDOMNode;
      node.isMounted = legacyIsMounted;
      node.setState = legacySetStateEtc;
      node.replaceState = legacySetStateEtc;
      node.forceUpdate = legacySetStateEtc;
      node.setProps = legacySetProps;
      node.replaceProps = legacyReplaceProps;

      if (process.env.NODE_ENV !== 'production') {
        if (canDefineProperty) {
          Object.defineProperties(node, legacyPropsDescriptor);
        } else {
          // updateComponent will update this property on subsequent renders
          node.props = this._currentElement.props;
        }
      } else {
        // updateComponent will update this property on subsequent renders
        node.props = this._currentElement.props;
      }

      this._nodeWithLegacyProperties = node;
    }
    return this._nodeWithLegacyProperties;
  }

};

ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent'
});

assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
}).call(this,require('_process'))

},{"./AutoFocusUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/AutoFocusUtils.js","./CSSPropertyOperations":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/CSSPropertyOperations.js","./DOMProperty":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMProperty.js","./DOMPropertyOperations":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMPropertyOperations.js","./EventConstants":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventConstants.js","./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactBrowserEventEmitter":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactComponentBrowserEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactDOMButton":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMButton.js","./ReactDOMInput":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMInput.js","./ReactDOMOption":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMOption.js","./ReactDOMSelect":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMSelect.js","./ReactDOMTextarea":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMTextarea.js","./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactMultiChild":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMultiChild.js","./ReactPerf":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ReactUpdateQueue":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdateQueue.js","./canDefineProperty":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/canDefineProperty.js","./escapeTextContentForBrowser":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/escapeTextContentForBrowser.js","./isEventSupported":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/isEventSupported.js","./setInnerHTML":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/setInnerHTML.js","./setTextContent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/setTextContent.js","./validateDOMNesting":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/validateDOMNesting.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/keyOf":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyOf.js","fbjs/lib/shallowEqual":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/shallowEqual.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMFactories.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFactories
 * @typechecks static-only
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');

var mapObject = require('fbjs/lib/mapObject');

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if (process.env.NODE_ENV !== 'production') {
    return ReactElementValidator.createFactory(tag);
  }
  return ReactElement.createFactory(tag);
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hgroup: 'hgroup',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  clipPath: 'clipPath',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  image: 'image',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOMFactories;
}).call(this,require('_process'))

},{"./ReactElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElementValidator.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/mapObject":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/mapObject.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMFeatureFlags.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFeatureFlags
 */

'use strict';

var ReactDOMFeatureFlags = {
  useCreateElement: false
};

module.exports = ReactDOMFeatureFlags;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMIDOperations.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var invariant = require('fbjs/lib/invariant');

/**
 * Errors for properties that should not be updated with `updatePropertyByID()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: function (id, name, value) {
    var node = ReactMount.getNode(id);
    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

    // If we're updating to null or undefined, we should remove the property
    // from the DOM node instead of inadvertantly setting to a string. This
    // brings us in line with the same behavior we have on initial render.
    if (value != null) {
      DOMPropertyOperations.setValueForProperty(node, name, value);
    } else {
      DOMPropertyOperations.deleteValueForProperty(node, name);
    }
  },

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
  },

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (updates, markup) {
    for (var i = 0; i < updates.length; i++) {
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
    }
    DOMChildrenOperations.processUpdates(updates, markup);
  }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;
}).call(this,require('_process'))

},{"./DOMChildrenOperations":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMChildrenOperations.js","./DOMPropertyOperations":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMPropertyOperations.js","./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPerf.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMInput.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var instancesByReactID = {};

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getNativeProps: function (inst, props, context) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var nativeProps = assign({}, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null,
      onChange: _handleChange.bind(inst)
    };
  },

  mountReadyWrapper: function (inst) {
    // Can't be in mountWrapper or else server rendering leaks.
    instancesByReactID[inst._rootNodeID] = inst;
  },

  unmountWrapper: function (inst) {
    delete instancesByReactID[inst._rootNodeID];
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
    }

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactMount.getNode(this._rootNodeID);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React with non-React.
      var otherID = ReactMount.getID(otherNode);
      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
      var otherInstance = instancesByReactID[otherID];
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
}).call(this,require('_process'))

},{"./LinkedValueUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactDOMIDOperations":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMIDOperations.js","./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMOption.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactDOMSelect = require('./ReactDOMSelect');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = ReactDOMSelect.valueContextKey;

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, context) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
    }

    // Look up whether this option is 'selected' via context
    var selectValue = context[valueContextKey];

    // If context key is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === '' + props.value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === '' + props.value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  getNativeProps: function (inst, props, context) {
    var nativeProps = assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      nativeProps.selected = inst._wrapperState.selected;
    }

    var content = '';

    // Flatten children and warn if they aren't strings or numbers;
    // invalid types are ignored.
    ReactChildren.forEach(props.children, function (child) {
      if (child == null) {
        return;
      }
      if (typeof child === 'string' || typeof child === 'number') {
        content += child;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
      }
    });

    if (content) {
      nativeProps.children = content;
    }

    return nativeProps;
  }

};

module.exports = ReactDOMOption;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactChildren":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactChildren.js","./ReactDOMSelect":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMSelect.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMSelect.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    if (props.multiple) {
      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    } else {
      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactMount.getNode(inst._rootNodeID).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  valueContextKey: valueContextKey,

  getNativeProps: function (inst, props, context) {
    return assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };
  },

  processChildContext: function (inst, props, context) {
    // Pass down initial value so initial generated markup has correct
    // `selected` attributes
    var childContext = assign({}, context);
    childContext[valueContextKey] = inst._wrapperState.initialValue;
    return childContext;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // the context value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  this._wrapperState.pendingUpdate = true;
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
}).call(this,require('_process'))

},{"./LinkedValueUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMSelection.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"./getNodeForCharacterOffset":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getNodeForCharacterOffset.js","./getTextContentAccessor":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getTextContentAccessor.js","fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMServer.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMServer
 */

'use strict';

var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactServerRendering = require('./ReactServerRendering');
var ReactVersion = require('./ReactVersion');

ReactDefaultInjection.inject();

var ReactDOMServer = {
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  version: ReactVersion
};

module.exports = ReactDOMServer;
},{"./ReactDefaultInjection":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDefaultInjection.js","./ReactServerRendering":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactServerRendering.js","./ReactVersion":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactVersion.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMTextComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactMount = require('./ReactMount');

var assign = require('./Object.assign');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setTextContent = require('./setTextContent');
var validateDOMNesting = require('./validateDOMNesting');

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (props) {
  // This constructor and its argument is currently used by mocks.
};

assign(ReactDOMTextComponent.prototype, {

  /**
   * @param {ReactText} text
   * @internal
   */
  construct: function (text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;

    // Properties
    this._rootNodeID = null;
    this._mountIndex = 0;
  },

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    this._rootNodeID = rootID;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement('span');
      DOMPropertyOperations.setAttributeForID(el, rootID);
      // Populate node cache
      ReactMount.getID(el);
      setTextContent(el, this._stringText);
      return el;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this in a `span` for the reasons stated above, but
        // since this is a situation where React won't take over (static pages),
        // we can simply return the text as it is.
        return escapedText;
      }

      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var node = ReactMount.getNode(this._rootNodeID);
        DOMChildrenOperations.updateTextContent(node, nextStringText);
      }
    }
  },

  unmountComponent: function () {
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
  }

});

module.exports = ReactDOMTextComponent;
}).call(this,require('_process'))

},{"./DOMChildrenOperations":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMChildrenOperations.js","./DOMPropertyOperations":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMPropertyOperations.js","./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactComponentBrowserEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js","./escapeTextContentForBrowser":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/escapeTextContentForBrowser.js","./setTextContent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/setTextContent.js","./validateDOMNesting":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/validateDOMNesting.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMTextarea.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getNativeProps: function (inst, props, context) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    var nativeProps = assign({}, props, {
      defaultValue: undefined,
      value: undefined,
      children: inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
      }
      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(props);

    inst._wrapperState = {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue),
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
}).call(this,require('_process'))

},{"./LinkedValueUtils":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/LinkedValueUtils.js","./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactDOMIDOperations":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMIDOperations.js","./ReactUpdates":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDefaultBatchingStrategy.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';

var ReactUpdates = require('./ReactUpdates');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d, e);
    } else {
      transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactUpdates":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","./Transaction":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Transaction.js","fbjs/lib/emptyFunction":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyFunction.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDefaultInjection.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');
var ChangeEventPlugin = require('./ChangeEventPlugin');
var ClientReactRootIndex = require('./ClientReactRootIndex');
var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');
var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');
var ReactBrowserComponentMixin = require('./ReactBrowserComponentMixin');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactDOMComponent = require('./ReactDOMComponent');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactEventListener = require('./ReactEventListener');
var ReactInjection = require('./ReactInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactReconcileTransaction = require('./ReactReconcileTransaction');
var SelectEventPlugin = require('./SelectEventPlugin');
var ServerReactRootIndex = require('./ServerReactRootIndex');
var SimpleEventPlugin = require('./SimpleEventPlugin');
var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if (process.env.NODE_ENV !== 'production') {
    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
    if (/[?&]react_perf\b/.test(url)) {
      var ReactDefaultPerf = require('./ReactDefaultPerf');
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};
}).call(this,require('_process'))

},{"./BeforeInputEventPlugin":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/BeforeInputEventPlugin.js","./ChangeEventPlugin":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ChangeEventPlugin.js","./ClientReactRootIndex":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ClientReactRootIndex.js","./DefaultEventPluginOrder":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DefaultEventPluginOrder.js","./EnterLeaveEventPlugin":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EnterLeaveEventPlugin.js","./HTMLDOMPropertyConfig":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/HTMLDOMPropertyConfig.js","./ReactBrowserComponentMixin":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactBrowserComponentMixin.js","./ReactComponentBrowserEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactComponentBrowserEnvironment.js","./ReactDOMComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMComponent.js","./ReactDOMTextComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMTextComponent.js","./ReactDefaultBatchingStrategy":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDefaultBatchingStrategy.js","./ReactDefaultPerf":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDefaultPerf.js","./ReactEventListener":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactEventListener.js","./ReactInjection":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInjection.js","./ReactInstanceHandles":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactReconcileTransaction":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactReconcileTransaction.js","./SVGDOMPropertyConfig":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SVGDOMPropertyConfig.js","./SelectEventPlugin":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SelectEventPlugin.js","./ServerReactRootIndex":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ServerReactRootIndex.js","./SimpleEventPlugin":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SimpleEventPlugin.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDefaultPerf.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var performanceNow = require('fbjs/lib/performanceNow');

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function () {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function () {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function () {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  getMeasurementsSummaryMap: function (measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
    return summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  printDOM: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function (item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result.type = item.type;
      result.args = JSON.stringify(item.args);
      return result;
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  _recordWrite: function (id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function (moduleName, fnName, func) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0,
          created: {}
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function (update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
          });
        } else {
          // basic format
          var id = args[0];
          if (typeof id === 'object') {
            id = ReactMount.getID(args[0]);
          }
          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
      fnName === '_renderValidatedComponent')) {

        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          entry.created[rootNodeID] = true;
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;
},{"./DOMProperty":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMProperty.js","./ReactDefaultPerfAnalysis":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDefaultPerfAnalysis.js","./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactPerf":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPerf.js","fbjs/lib/performanceNow":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/performanceNow.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDefaultPerfAnalysis.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

'use strict';

var assign = require('./Object.assign');

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  '_mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  SET_MARKUP: 'set innerHTML',
  TEXT_CONTENT: 'set textContent',
  'setValueForProperty': 'update attribute',
  'setValueForAttribute': 'update attribute',
  'deleteValueForProperty': 'remove attribute',
  'setValueForStyles': 'update styles',
  'replaceNodeWithMarkup': 'replace',
  'updateTextContent': 'set textContent'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  measurements.forEach(function (measurement) {
    Object.keys(measurement.writes).forEach(function (id) {
      measurement.writes[id].forEach(function (write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    });
  });
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function (a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function (a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    // check if component newly created
    if (measurement.created[id]) {
      isDirty = true;
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;
},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    Object.freeze(element.props);
    Object.freeze(element);
  }

  return element;
};

ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key;
    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

  if (process.env.NODE_ENV !== 'production') {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }

  return newElement;
};

ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (config.ref !== undefined) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (config.key !== undefined) {
      key = '' + config.key;
    }
    // Remaining properties override existing props
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactCurrentOwner":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./canDefineProperty":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/canDefineProperty.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElementValidator.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactCurrentOwner = require('./ReactCurrentOwner');

var canDefineProperty = require('./canDefineProperty');
var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

var loggedTypeFailures = {};

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
  if (addenda === null) {
    // we already showed the warning
    return;
  }
  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} messageType A key used for de-duping warnings.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 * @returns {?object} A set of addenda to use in the warning message, or null
 * if the warning has already been shown before (and shouldn't be shown again).
 */
function getAddendaForKeyUse(messageType, element, parentType) {
  var addendum = getDeclarationErrorAddendum();
  if (!addendum) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      addendum = ' Check the top-level render call using <' + parentName + '>.';
    }
  }

  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
  if (memoizer[addendum]) {
    return null;
  }
  memoizer[addendum] = true;

  var addenda = {
    parentOrOwner: addendum,
    url: ' See https://fb.me/react-warning-keys for more information.',
    childOwner: null
  };

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  return addenda;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum();
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactPropTypeLocationNames":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocationNames.js","./ReactPropTypeLocations":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocations.js","./canDefineProperty":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/canDefineProperty.js","./getIteratorFn":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getIteratorFn.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactEmptyComponent.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactReconciler = require('./ReactReconciler');

var assign = require('./Object.assign');

var placeholderElement;

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function (component) {
    placeholderElement = ReactElement.createElement(component);
  }
};

function registerNullComponentID() {
  ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);
}

var ReactEmptyComponent = function (instantiate) {
  this._currentElement = null;
  this._rootNodeID = null;
  this._renderedComponent = instantiate(placeholderElement);
};
assign(ReactEmptyComponent.prototype, {
  construct: function (element) {},
  mountComponent: function (rootID, transaction, context) {
    transaction.getReactMountReady().enqueue(registerNullComponentID, this);
    this._rootNodeID = rootID;
    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
  },
  receiveComponent: function () {},
  unmountComponent: function (rootID, transaction, context) {
    ReactReconciler.unmountComponent(this._renderedComponent);
    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
    this._rootNodeID = null;
    this._renderedComponent = null;
  }
});

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactEmptyComponentRegistry":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactEmptyComponentRegistry.js","./ReactReconciler":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactReconciler.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactEmptyComponentRegistry.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponentRegistry
 */

'use strict';

// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIDsRegistry = {};

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return !!nullComponentIDsRegistry[id];
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIDsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIDsRegistry[id];
}

var ReactEmptyComponentRegistry = {
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID,
  deregisterNullComponentID: deregisterNullComponentID
};

module.exports = ReactEmptyComponentRegistry;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactErrorUtils.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {?String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a, b) {
  try {
    return func(a, b);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
    return undefined;
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
      var boundFunc = func.bind(null, a, b);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactEventEmitterMixin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
},{"./EventPluginHub":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPluginHub.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactEventListener.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

'use strict';

var EventListener = require('fbjs/lib/EventListener');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var PooledClass = require('./PooledClass');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var getEventTarget = require('./getEventTarget');
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  // TODO: Re-enable event.path handling
  //
  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
  //   // New browsers have a path attribute on native events
  //   handleTopLevelWithPath(bookKeeping);
  // } else {
  //   // Legacy browsers don't have a path attribute on native events
  //   handleTopLevelWithoutPath(bookKeeping);
  // }

  void handleTopLevelWithPath; // temporarily unused
  handleTopLevelWithoutPath(bookKeeping);
}

// Legacy browsers don't have a path attribute on native events
function handleTopLevelWithoutPath(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// New browsers have a path attribute on native events
function handleTopLevelWithPath(bookKeeping) {
  var path = bookKeeping.nativeEvent.path;
  var currentNativeTarget = path[0];
  var eventsFired = 0;
  for (var i = 0; i < path.length; i++) {
    var currentPathElement = path[i];
    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
      currentNativeTarget = path[i + 1];
    }
    // TODO: slow
    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
    if (reactParent === currentPathElement) {
      var currentPathElementID = ReactMount.getID(currentPathElement);
      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
      bookKeeping.ancestors.push(currentPathElement);

      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
      eventsFired++;
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

      // Jump to the root of this React render tree
      while (currentPathElementID !== newRootID) {
        i++;
        currentPathElement = path[i];
        currentPathElementID = ReactMount.getID(currentPathElement);
      }
    }
  }
  if (eventsFired === 0) {
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;
},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/PooledClass.js","./ReactInstanceHandles":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js","./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js","./ReactUpdates":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","./getEventTarget":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventTarget.js","fbjs/lib/EventListener":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/EventListener.js","fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/getUnboundedScrollPosition":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/getUnboundedScrollPosition.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInjection.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginHub = require('./EventPluginHub');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactClass = require('./ReactClass');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactNativeComponent = require('./ReactNativeComponent');
var ReactPerf = require('./ReactPerf');
var ReactRootIndex = require('./ReactRootIndex');
var ReactUpdates = require('./ReactUpdates');

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  Class: ReactClass.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"./DOMProperty":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMProperty.js","./EventPluginHub":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPluginHub.js","./ReactBrowserEventEmitter":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactClass":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactClass.js","./ReactComponentEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactComponentEnvironment.js","./ReactEmptyComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactEmptyComponent.js","./ReactNativeComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactNativeComponent.js","./ReactPerf":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ReactRootIndex":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactRootIndex.js","./ReactUpdates":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdates.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInputSelection.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = require('./ReactDOMSelection');

var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var getActiveElement = require('fbjs/lib/getActiveElement');

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;
},{"./ReactDOMSelection":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMSelection.js","fbjs/lib/containsNode":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/containsNode.js","fbjs/lib/focusNode":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/focusNode.js","fbjs/lib/getActiveElement":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/getActiveElement.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

'use strict';

var ReactRootIndex = require('./ReactRootIndex');

var invariant = require('fbjs/lib/invariant');

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 10000;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {*} arg Argument to invoke the callback with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
  var traverseUp = isAncestorIDOf(stop, start);
  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start;; /* until break */id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function () {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function (rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function (id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Same as `traverseTwoPhase` but skips the `targetID`.
   */
  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, true);
      traverseParentPath(targetID, '', cb, arg, true, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function (targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;
}).call(this,require('_process'))

},{"./ReactRootIndex":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactRootIndex.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInstanceMap.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactIsomorphic.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactIsomorphic
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactComponent = require('./ReactComponent');
var ReactClass = require('./ReactClass');
var ReactDOMFactories = require('./ReactDOMFactories');
var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');
var ReactPropTypes = require('./ReactPropTypes');
var ReactVersion = require('./ReactVersion');

var assign = require('./Object.assign');
var onlyChild = require('./onlyChild');

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign
};

module.exports = React;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactChildren":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactChildren.js","./ReactClass":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactClass.js","./ReactComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactComponent.js","./ReactDOMFactories":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMFactories.js","./ReactElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactElementValidator":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElementValidator.js","./ReactPropTypes":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPropTypes.js","./ReactVersion":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactVersion.js","./onlyChild":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/onlyChild.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMarkupChecksum.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = require('./adler32');

var TAG_END = /\/?>/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags and self-closing tags)
    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;
},{"./adler32":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/adler32.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var containsNode = require('fbjs/lib/containsNode');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');
var setInnerHTML = require('./setInnerHTML');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if (process.env.NODE_ENV !== 'production') {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * Finds the node with the supplied public React instance.
 *
 * @param {*} instance A public React instance.
 * @return {?DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNodeFromInstance(instance) {
  var id = ReactInstanceMap.get(instance)._rootNodeID;
  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
    return null;
  }
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
  if (ReactDOMFeatureFlags.useCreateElement) {
    context = assign({}, context);
    if (container.nodeType === DOC_NODE_TYPE) {
      context[ownerDocumentContextKey] = container;
    } else {
      context[ownerDocumentContextKey] = container.ownerDocument;
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (context === emptyObject) {
      context = {};
    }
    var tag = container.nodeName.toLowerCase();
    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
  }
  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* forceHTML */shouldReuseMarkup);
  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container) {
  ReactReconciler.unmountComponent(instance);

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(node) {
  var reactRootID = getReactRootID(node);
  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
}

/**
 * Returns the first (deepest) ancestor of a node which is rendered by this copy
 * of React.
 */
function findFirstReactDOMImpl(node) {
  // This node might be from another React instance, so we make sure not to
  // examine the node cache here
  for (; node && node.parentNode !== node; node = node.parentNode) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      continue;
    }
    var nodeID = internalGetID(node);
    if (!nodeID) {
      continue;
    }
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

    // If containersByReactRootID contains the container we find by crawling up
    // the tree, we know that this instance of React rendered the node.
    // nb. isValid's strategy (with containsNode) does not work because render
    // trees may be nested and we don't want a false positive in that case.
    var current = node;
    var lastID;
    do {
      lastID = internalGetID(current);
      current = current.parentNode;
      if (current == null) {
        // The passed-in node has been detached from the container it was
        // originally rendered into.
        return null;
      }
    } while (lastID !== reactRootID);

    if (current === containersByReactRootID[reactRootID]) {
      return node;
    }
  }
  return null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var TopLevelWrapper = function () {};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  // this.props is actually a ReactElement
  return this.props;
};

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {

  TopLevelWrapper: TopLevelWrapper,

  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function (nextComponent, container) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(componentInstance, container);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function (container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var containerID = internalGetID(container);
      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
      }

      return false;
    }
    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if (process.env.NODE_ENV !== 'production') {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function (id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if (process.env.NODE_ENV !== 'production') {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        process.env.NODE_ENV !== 'production' ? warning(
        // Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
        var containerChild = container.firstChild;
        if (containerChild && reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function (id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component rendered by this copy of React.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function (node) {
    return findFirstReactDOMImpl(node);
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function (ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    if (process.env.NODE_ENV !== 'production') {
      // This will throw on the next line; give an early warning
      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
    }

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }
        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
  },

  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      container.appendChild(markup);
    } else {
      setInnerHTML(container, markup);
    }
  },

  ownerDocumentContextKey: ownerDocumentContextKey,

  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  getNodeFromInstance: getNodeFromInstance,

  isValid: isValid,

  purgeID: purgeID
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
  _renderNewRootComponent: '_renderNewRootComponent',
  _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;
}).call(this,require('_process'))

},{"./DOMProperty":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMProperty.js","./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactBrowserEventEmitter":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactCurrentOwner":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactDOMFeatureFlags":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMFeatureFlags.js","./ReactElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactEmptyComponentRegistry":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactEmptyComponentRegistry.js","./ReactInstanceHandles":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js","./ReactInstanceMap":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInstanceMap.js","./ReactMarkupChecksum":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMarkupChecksum.js","./ReactPerf":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ReactReconciler":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactReconciler.js","./ReactUpdateQueue":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdateQueue.js","./ReactUpdates":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","./instantiateReactComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/instantiateReactComponent.js","./setInnerHTML":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/setInnerHTML.js","./shouldUpdateReactComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/shouldUpdateReactComponent.js","./validateDOMNesting":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/validateDOMNesting.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/containsNode":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/containsNode.js","fbjs/lib/emptyObject":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMultiChild.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactReconciler = require('./ReactReconciler');
var ReactChildReconciler = require('./ReactChildReconciler');

var flattenChildren = require('./flattenChildren');

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueInsertMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    content: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the markup of a node.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function enqueueSetMarkup(parentID, markup) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.SET_MARKUP,
    markupIndex: null,
    content: markup,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    content: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
      var nextChildren;
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements);
          } finally {
            ReactCurrentOwner.current = null;
          }
          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements);
      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;
      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        // TODO: The setTextContent operation should be enough
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChild(prevChildren[name]);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        this.setMarkup(nextMarkup);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildrenElements, transaction, context);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
      this._renderedChildren = nextChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChild(prevChild);
          }
          // The child must be instantiated before it's mounted.
          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
          this._unmountChild(prevChildren[name]);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function () {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, mountImage) {
      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function (textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Sets this markup string.
     *
     * @param {string} markup Markup to set.
     * @protected
     */
    setMarkup: function (markup) {
      enqueueSetMarkup(this._rootNodeID, markup);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
      child._mountIndex = index;
      this.createChild(child, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child) {
      this.removeChild(child);
      child._mountIndex = null;
    }

  }

};

module.exports = ReactMultiChild;
}).call(this,require('_process'))

},{"./ReactChildReconciler":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactChildReconciler.js","./ReactComponentEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactComponentEnvironment.js","./ReactCurrentOwner":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactMultiChildUpdateTypes":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMultiChildUpdateTypes.js","./ReactReconciler":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactReconciler.js","./flattenChildren":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/flattenChildren.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMultiChildUpdateTypes.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  SET_MARKUP: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;
},{"fbjs/lib/keyMirror":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyMirror.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactNativeComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

'use strict';

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags.
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function (componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Get a composite component wrapper class for a specific tag.
 *
 * @param {ReactElement} element The tag for which to get the class.
 * @return {function} The React class constructor function.
 */
function getComponentClassForElement(element) {
  if (typeof element.type === 'function') {
    return element.type;
  }
  var tag = element.type;
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
  }
  return componentClass;
}

/**
 * Get a native internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
  return new genericComponentClass(element.type, element.props);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactNativeComponent = {
  getComponentClassForElement: getComponentClassForElement,
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactNoopUpdateQueue.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNoopUpdateQueue
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnTDZ(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnTDZ(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnTDZ(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnTDZ(publicInstance, 'setState');
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    warnTDZ(publicInstance, 'setProps');
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    warnTDZ(publicInstance, 'replaceProps');
  }

};

module.exports = ReactNoopUpdateQueue;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactOwner.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function (object) {
    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPerf.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

'use strict';

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * @param {object} object
   * @param {string} objectName
   * @param {object<string>} methodNames
   */
  measureMethods: function (object, objectName, methodNames) {
    if (process.env.NODE_ENV !== 'production') {
      for (var key in methodNames) {
        if (!methodNames.hasOwnProperty(key)) {
          continue;
        }
        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
      }
    }
  },

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function (objName, fnName, func) {
    if (process.env.NODE_ENV !== 'production') {
      var measuredFunc = null;
      var wrapper = function () {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function (measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocationNames.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocations.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;
},{"fbjs/lib/keyMirror":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyMirror.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPropTypes.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getIteratorFn = require('./getIteratorFn');

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return '<<anonymous>>';
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;
},{"./ReactElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactPropTypeLocationNames":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPropTypeLocationNames.js","./getIteratorFn":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getIteratorFn.js","fbjs/lib/emptyFunction":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyFunction.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactReconcileTransaction.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactInputSelection = require('./ReactInputSelection');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(forceHTML) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
},{"./CallbackQueue":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/PooledClass.js","./ReactBrowserEventEmitter":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactBrowserEventEmitter.js","./ReactDOMFeatureFlags":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDOMFeatureFlags.js","./ReactInputSelection":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInputSelection.js","./Transaction":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Transaction.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactReconciler.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = require('./ReactRef');

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, rootID, transaction, context) {
    var markup = internalInstance.mountComponent(rootID, transaction, context);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance) {
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent();
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction) {
    internalInstance.performUpdateIfNecessary(transaction);
  }

};

module.exports = ReactReconciler;
},{"./ReactRef":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactRef.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactRef.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = require('./ReactOwner');

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;

  return(
    // This has a few false positives w/r/t empty components.
    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
  );
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
},{"./ReactOwner":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactOwner.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

'use strict';

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function (_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactServerBatchingStrategy.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerBatchingStrategy
 * @typechecks
 */

'use strict';

var ReactServerBatchingStrategy = {
  isBatchingUpdates: false,
  batchedUpdates: function (callback) {
    // Don't do anything here. During the server rendering we don't want to
    // schedule any updates. We will simply ignore them.
  }
};

module.exports = ReactServerBatchingStrategy;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactServerRendering.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');
var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');
var ReactUpdates = require('./ReactUpdates');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, emptyObject);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};
}).call(this,require('_process'))

},{"./ReactDefaultBatchingStrategy":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactDefaultBatchingStrategy.js","./ReactElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js","./ReactMarkupChecksum":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMarkupChecksum.js","./ReactServerBatchingStrategy":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactServerBatchingStrategy.js","./ReactServerRenderingTransaction":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactServerRenderingTransaction.js","./ReactUpdates":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","./instantiateReactComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/instantiateReactComponent.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/emptyObject":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyObject.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactServerRenderingTransaction.js":[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

'use strict';

var PooledClass = require('./PooledClass');
var CallbackQueue = require('./CallbackQueue');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = false;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
},{"./CallbackQueue":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/PooledClass.js","./Transaction":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Transaction.js","fbjs/lib/emptyFunction":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyFunction.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdateQueue.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
  },

  enqueueSetPropsInternal: function (internalInstance, partialProps) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    var props = assign({}, element.props, partialProps);
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
  },

  enqueueReplacePropsInternal: function (internalInstance, props) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  enqueueElementInternal: function (internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);
  }

};

module.exports = ReactUpdateQueue;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactCurrentOwner":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactInstanceMap":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInstanceMap.js","./ReactUpdates":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdates.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactUpdates.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
}

assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
}).call(this,require('_process'))

},{"./CallbackQueue":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/CallbackQueue.js","./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/PooledClass.js","./ReactPerf":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactPerf.js","./ReactReconciler":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactReconciler.js","./Transaction":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Transaction.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactVersion.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactVersion
 */

'use strict';

module.exports = '0.14.8';
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SVGDOMPropertyConfig.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

var SVGDOMPropertyConfig = {
  Properties: {
    clipPath: MUST_USE_ATTRIBUTE,
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    xlinkActuate: MUST_USE_ATTRIBUTE,
    xlinkArcrole: MUST_USE_ATTRIBUTE,
    xlinkHref: MUST_USE_ATTRIBUTE,
    xlinkRole: MUST_USE_ATTRIBUTE,
    xlinkShow: MUST_USE_ATTRIBUTE,
    xlinkTitle: MUST_USE_ATTRIBUTE,
    xlinkType: MUST_USE_ATTRIBUTE,
    xmlBase: MUST_USE_ATTRIBUTE,
    xmlLang: MUST_USE_ATTRIBUTE,
    xmlSpace: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {
    clipPath: 'clip-path',
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox',
    xlinkActuate: 'xlink:actuate',
    xlinkArcrole: 'xlink:arcrole',
    xlinkHref: 'xlink:href',
    xlinkRole: 'xlink:role',
    xlinkShow: 'xlink:show',
    xlinkTitle: 'xlink:title',
    xlinkType: 'xlink:type',
    xmlBase: 'xml:base',
    xmlLang: 'xml:lang',
    xmlSpace: 'xml:space'
  }
};

module.exports = SVGDOMPropertyConfig;
},{"./DOMProperty":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/DOMProperty.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SelectEventPlugin.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactInputSelection = require('./ReactInputSelection');
var SyntheticEvent = require('./SyntheticEvent');

var getActiveElement = require('fbjs/lib/getActiveElement');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');
var shallowEqual = require('fbjs/lib/shallowEqual');

var topLevelTypes = EventConstants.topLevelTypes;

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSelect: null }),
      captured: keyOf({ onSelectCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events.
var hasListener = false;
var ON_SELECT_KEY = keyOf({ onSelect: null });

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case topLevelTypes.topSelectionChange:
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (id, registrationName, listener) {
    if (registrationName === ON_SELECT_KEY) {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;
},{"./EventConstants":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPropagators.js","./ReactInputSelection":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInputSelection.js","./SyntheticEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js","./isTextInputElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/isTextInputElement.js","fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js","fbjs/lib/getActiveElement":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/getActiveElement.js","fbjs/lib/keyOf":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyOf.js","fbjs/lib/shallowEqual":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/shallowEqual.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ServerReactRootIndex.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

'use strict';

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function () {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SimpleEventPlugin.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventListener = require('fbjs/lib/EventListener');
var EventPropagators = require('./EventPropagators');
var ReactMount = require('./ReactMount');
var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');
var SyntheticEvent = require('./SyntheticEvent');
var SyntheticFocusEvent = require('./SyntheticFocusEvent');
var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');
var SyntheticDragEvent = require('./SyntheticDragEvent');
var SyntheticTouchEvent = require('./SyntheticTouchEvent');
var SyntheticUIEvent = require('./SyntheticUIEvent');
var SyntheticWheelEvent = require('./SyntheticWheelEvent');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getEventCharCode = require('./getEventCharCode');
var invariant = require('fbjs/lib/invariant');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  abort: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onAbort: true }),
      captured: keyOf({ onAbortCapture: true })
    }
  },
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBlur: true }),
      captured: keyOf({ onBlurCapture: true })
    }
  },
  canPlay: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlay: true }),
      captured: keyOf({ onCanPlayCapture: true })
    }
  },
  canPlayThrough: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlayThrough: true }),
      captured: keyOf({ onCanPlayThroughCapture: true })
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onClick: true }),
      captured: keyOf({ onClickCapture: true })
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onContextMenu: true }),
      captured: keyOf({ onContextMenuCapture: true })
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCopy: true }),
      captured: keyOf({ onCopyCapture: true })
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCut: true }),
      captured: keyOf({ onCutCapture: true })
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDoubleClick: true }),
      captured: keyOf({ onDoubleClickCapture: true })
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrag: true }),
      captured: keyOf({ onDragCapture: true })
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnd: true }),
      captured: keyOf({ onDragEndCapture: true })
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnter: true }),
      captured: keyOf({ onDragEnterCapture: true })
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragExit: true }),
      captured: keyOf({ onDragExitCapture: true })
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragLeave: true }),
      captured: keyOf({ onDragLeaveCapture: true })
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragOver: true }),
      captured: keyOf({ onDragOverCapture: true })
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragStart: true }),
      captured: keyOf({ onDragStartCapture: true })
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrop: true }),
      captured: keyOf({ onDropCapture: true })
    }
  },
  durationChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDurationChange: true }),
      captured: keyOf({ onDurationChangeCapture: true })
    }
  },
  emptied: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEmptied: true }),
      captured: keyOf({ onEmptiedCapture: true })
    }
  },
  encrypted: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEncrypted: true }),
      captured: keyOf({ onEncryptedCapture: true })
    }
  },
  ended: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEnded: true }),
      captured: keyOf({ onEndedCapture: true })
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onError: true }),
      captured: keyOf({ onErrorCapture: true })
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onFocus: true }),
      captured: keyOf({ onFocusCapture: true })
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onInput: true }),
      captured: keyOf({ onInputCapture: true })
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyDown: true }),
      captured: keyOf({ onKeyDownCapture: true })
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyPress: true }),
      captured: keyOf({ onKeyPressCapture: true })
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyUp: true }),
      captured: keyOf({ onKeyUpCapture: true })
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoad: true }),
      captured: keyOf({ onLoadCapture: true })
    }
  },
  loadedData: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedData: true }),
      captured: keyOf({ onLoadedDataCapture: true })
    }
  },
  loadedMetadata: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedMetadata: true }),
      captured: keyOf({ onLoadedMetadataCapture: true })
    }
  },
  loadStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadStart: true }),
      captured: keyOf({ onLoadStartCapture: true })
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseDown: true }),
      captured: keyOf({ onMouseDownCapture: true })
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseMove: true }),
      captured: keyOf({ onMouseMoveCapture: true })
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOut: true }),
      captured: keyOf({ onMouseOutCapture: true })
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOver: true }),
      captured: keyOf({ onMouseOverCapture: true })
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseUp: true }),
      captured: keyOf({ onMouseUpCapture: true })
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPaste: true }),
      captured: keyOf({ onPasteCapture: true })
    }
  },
  pause: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPause: true }),
      captured: keyOf({ onPauseCapture: true })
    }
  },
  play: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlay: true }),
      captured: keyOf({ onPlayCapture: true })
    }
  },
  playing: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlaying: true }),
      captured: keyOf({ onPlayingCapture: true })
    }
  },
  progress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onProgress: true }),
      captured: keyOf({ onProgressCapture: true })
    }
  },
  rateChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onRateChange: true }),
      captured: keyOf({ onRateChangeCapture: true })
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onReset: true }),
      captured: keyOf({ onResetCapture: true })
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onScroll: true }),
      captured: keyOf({ onScrollCapture: true })
    }
  },
  seeked: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeked: true }),
      captured: keyOf({ onSeekedCapture: true })
    }
  },
  seeking: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeking: true }),
      captured: keyOf({ onSeekingCapture: true })
    }
  },
  stalled: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onStalled: true }),
      captured: keyOf({ onStalledCapture: true })
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSubmit: true }),
      captured: keyOf({ onSubmitCapture: true })
    }
  },
  suspend: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSuspend: true }),
      captured: keyOf({ onSuspendCapture: true })
    }
  },
  timeUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTimeUpdate: true }),
      captured: keyOf({ onTimeUpdateCapture: true })
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchCancel: true }),
      captured: keyOf({ onTouchCancelCapture: true })
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchEnd: true }),
      captured: keyOf({ onTouchEndCapture: true })
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchMove: true }),
      captured: keyOf({ onTouchMoveCapture: true })
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchStart: true }),
      captured: keyOf({ onTouchStartCapture: true })
    }
  },
  volumeChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onVolumeChange: true }),
      captured: keyOf({ onVolumeChangeCapture: true })
    }
  },
  waiting: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWaiting: true }),
      captured: keyOf({ onWaitingCapture: true })
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWheel: true }),
      captured: keyOf({ onWheelCapture: true })
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topAbort: eventTypes.abort,
  topBlur: eventTypes.blur,
  topCanPlay: eventTypes.canPlay,
  topCanPlayThrough: eventTypes.canPlayThrough,
  topClick: eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy: eventTypes.copy,
  topCut: eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag: eventTypes.drag,
  topDragEnd: eventTypes.dragEnd,
  topDragEnter: eventTypes.dragEnter,
  topDragExit: eventTypes.dragExit,
  topDragLeave: eventTypes.dragLeave,
  topDragOver: eventTypes.dragOver,
  topDragStart: eventTypes.dragStart,
  topDrop: eventTypes.drop,
  topDurationChange: eventTypes.durationChange,
  topEmptied: eventTypes.emptied,
  topEncrypted: eventTypes.encrypted,
  topEnded: eventTypes.ended,
  topError: eventTypes.error,
  topFocus: eventTypes.focus,
  topInput: eventTypes.input,
  topKeyDown: eventTypes.keyDown,
  topKeyPress: eventTypes.keyPress,
  topKeyUp: eventTypes.keyUp,
  topLoad: eventTypes.load,
  topLoadedData: eventTypes.loadedData,
  topLoadedMetadata: eventTypes.loadedMetadata,
  topLoadStart: eventTypes.loadStart,
  topMouseDown: eventTypes.mouseDown,
  topMouseMove: eventTypes.mouseMove,
  topMouseOut: eventTypes.mouseOut,
  topMouseOver: eventTypes.mouseOver,
  topMouseUp: eventTypes.mouseUp,
  topPaste: eventTypes.paste,
  topPause: eventTypes.pause,
  topPlay: eventTypes.play,
  topPlaying: eventTypes.playing,
  topProgress: eventTypes.progress,
  topRateChange: eventTypes.rateChange,
  topReset: eventTypes.reset,
  topScroll: eventTypes.scroll,
  topSeeked: eventTypes.seeked,
  topSeeking: eventTypes.seeking,
  topStalled: eventTypes.stalled,
  topSubmit: eventTypes.submit,
  topSuspend: eventTypes.suspend,
  topTimeUpdate: eventTypes.timeUpdate,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd: eventTypes.touchEnd,
  topTouchMove: eventTypes.touchMove,
  topTouchStart: eventTypes.touchStart,
  topVolumeChange: eventTypes.volumeChange,
  topWaiting: eventTypes.waiting,
  topWheel: eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var ON_CLICK_KEY = keyOf({ onClick: null });
var onClickListeners = {};

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topAbort:
      case topLevelTypes.topCanPlay:
      case topLevelTypes.topCanPlayThrough:
      case topLevelTypes.topDurationChange:
      case topLevelTypes.topEmptied:
      case topLevelTypes.topEncrypted:
      case topLevelTypes.topEnded:
      case topLevelTypes.topError:
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topLoadedData:
      case topLevelTypes.topLoadedMetadata:
      case topLevelTypes.topLoadStart:
      case topLevelTypes.topPause:
      case topLevelTypes.topPlay:
      case topLevelTypes.topPlaying:
      case topLevelTypes.topProgress:
      case topLevelTypes.topRateChange:
      case topLevelTypes.topReset:
      case topLevelTypes.topSeeked:
      case topLevelTypes.topSeeking:
      case topLevelTypes.topStalled:
      case topLevelTypes.topSubmit:
      case topLevelTypes.topSuspend:
      case topLevelTypes.topTimeUpdate:
      case topLevelTypes.topVolumeChange:
      case topLevelTypes.topWaiting:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (id, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    if (registrationName === ON_CLICK_KEY) {
      var node = ReactMount.getNode(id);
      if (!onClickListeners[id]) {
        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (id, registrationName) {
    if (registrationName === ON_CLICK_KEY) {
      onClickListeners[id].remove();
      delete onClickListeners[id];
    }
  }

};

module.exports = SimpleEventPlugin;
}).call(this,require('_process'))

},{"./EventConstants":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventConstants.js","./EventPropagators":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/EventPropagators.js","./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js","./SyntheticClipboardEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticClipboardEvent.js","./SyntheticDragEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticDragEvent.js","./SyntheticEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js","./SyntheticFocusEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticFocusEvent.js","./SyntheticKeyboardEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticKeyboardEvent.js","./SyntheticMouseEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticMouseEvent.js","./SyntheticTouchEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticTouchEvent.js","./SyntheticUIEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticUIEvent.js","./SyntheticWheelEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticWheelEvent.js","./getEventCharCode":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventCharCode.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/EventListener":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/EventListener.js","fbjs/lib/emptyFunction":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyFunction.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/keyOf":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/keyOf.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticClipboardEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"./SyntheticEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticCompositionEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"./SyntheticEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticDragEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"./SyntheticMouseEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticMouseEvent.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./PooledClass":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/PooledClass.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/emptyFunction":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyFunction.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticFocusEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"./SyntheticUIEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticUIEvent.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticInputEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"./SyntheticEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticKeyboardEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventCharCode = require('./getEventCharCode');
var getEventKey = require('./getEventKey');
var getEventModifierState = require('./getEventModifierState');

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"./SyntheticUIEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticUIEvent.js","./getEventCharCode":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventCharCode.js","./getEventKey":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventKey.js","./getEventModifierState":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventModifierState.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticMouseEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');
var ViewportMetrics = require('./ViewportMetrics');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"./SyntheticUIEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticUIEvent.js","./ViewportMetrics":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ViewportMetrics.js","./getEventModifierState":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventModifierState.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticTouchEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"./SyntheticUIEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticUIEvent.js","./getEventModifierState":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventModifierState.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticUIEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"./SyntheticEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticEvent.js","./getEventTarget":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventTarget.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticWheelEvent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"./SyntheticMouseEvent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/SyntheticMouseEvent.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Transaction.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occurred.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ViewportMetrics.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/accumulateInto.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/adler32.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    for (; i < Math.min(i + 4096, m); i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/canDefineProperty.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule canDefineProperty
 */

'use strict';

var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/dangerousStyleValue.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
},{"./CSSProperty":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/CSSProperty.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/deprecated.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

'use strict';

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} fnName The name of the function
 * @param {string} newModule The module that fn will exist in
 * @param {string} newPackage The module that fn will exist in
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {function} The function that will warn once and then call fn
 */
function deprecated(fnName, newModule, newPackage, ctx, fn) {
  var warned = false;
  if (process.env.NODE_ENV !== 'production') {
    var newFn = function () {
      process.env.NODE_ENV !== 'production' ? warning(warned,
      // Require examples in this string must be split to prevent React's
      // build tools from mistaking them for real requires.
      // Otherwise the build tools will attempt to build a '%s' module.
      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
      warned = true;
      return fn.apply(ctx, arguments);
    };
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/escapeTextContentForBrowser.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/findDOMNode.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 * @typechecks static-only
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMount = require('./ReactMount');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Returns the DOM node rendered by this element.
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }
  if (ReactInstanceMap.has(componentOrElement)) {
    return ReactMount.getNodeFromInstance(componentOrElement);
  }
  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
}

module.exports = findDOMNode;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactInstanceMap":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInstanceMap.js","./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/flattenChildren.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = result[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;
}).call(this,require('_process'))

},{"./traverseAllChildren":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/traverseAllChildren.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/forEachAccumulated.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function (arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventCharCode.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventKey.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

'use strict';

var getEventCharCode = require('./getEventCharCode');

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;
},{"./getEventCharCode":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventCharCode.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventModifierState.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getEventTarget.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getIteratorFn.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * @typechecks static-only
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getNodeForCharacterOffset.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getTextContentAccessor.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/instantiateReactComponent.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

'use strict';

var ReactCompositeComponent = require('./ReactCompositeComponent');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactNativeComponent = require('./ReactNativeComponent');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function () {};
assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node) {
  var instance;

  if (node === null || node === false) {
    instance = new ReactEmptyComponent(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactNativeComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);
    } else {
      instance = new ReactCompositeComponentWrapper();
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactNativeComponent.createInstanceForText(node);
  } else {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
  }

  // Sets up the instance. This can probably just move into the constructor now.
  instance.construct(node);

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._isOwnerNecessary = false;
    instance._warnedAboutRefsInRender = false;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","./ReactCompositeComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactCompositeComponent.js","./ReactEmptyComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactEmptyComponent.js","./ReactNativeComponent":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactNativeComponent.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/isEventSupported.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/isTextInputElement.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
}

module.exports = isTextInputElement;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/onlyChild.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
'use strict';

var ReactElement = require('./ReactElement');

var invariant = require('fbjs/lib/invariant');

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
  return children;
}

module.exports = onlyChild;
}).call(this,require('_process'))

},{"./ReactElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/quoteAttributeValueForBrowser.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"./escapeTextContentForBrowser":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/escapeTextContentForBrowser.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/renderSubtreeIntoContainer.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule renderSubtreeIntoContainer
*/

'use strict';

var ReactMount = require('./ReactMount');

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"./ReactMount":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactMount.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/setInnerHTML.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

/* globals MSApp */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function (node, html) {
  node.innerHTML = html;
};

// Win8 apps: Allow all html to be inserted
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
  setInnerHTML = function (node, html) {
    MSApp.execUnsafeLocalFunction(function () {
      node.innerHTML = html;
    });
  };
}

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;
},{"fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/setTextContent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setInnerHTML = require('./setInnerHTML');

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;
},{"./escapeTextContentForBrowser":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/escapeTextContentForBrowser.js","./setInnerHTML":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/setInnerHTML.js","fbjs/lib/ExecutionEnvironment":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/ExecutionEnvironment.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/shouldUpdateReactComponent.js":[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;
},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/traverseAllChildren.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} text Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactCurrentOwner.js","./ReactElement":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactElement.js","./ReactInstanceHandles":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/ReactInstanceHandles.js","./getIteratorFn":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/getIteratorFn.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/invariant":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/invariant.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/validateDOMNesting.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule validateDOMNesting
 */

'use strict';

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    parentTag: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.parentTag = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':

      case 'pre':
      case 'listing':

      case 'table':

      case 'hr':

      case 'xmp':

      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    /*eslint-disable space-after-keywords */
    do {
      /*eslint-enable space-after-keywords */
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
      }
    }
  };

  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
}).call(this,require('_process'))

},{"./Object.assign":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/Object.assign.js","_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js","fbjs/lib/emptyFunction":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/emptyFunction.js","fbjs/lib/warning":"/Users/dev/Documents/rail-fyi-client/node_modules/fbjs/lib/warning.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/react/react.js":[function(require,module,exports){
'use strict';

module.exports = require('./lib/React');

},{"./lib/React":"/Users/dev/Documents/rail-fyi-client/node_modules/react/lib/React.js"}],"/Users/dev/Documents/rail-fyi-client/node_modules/strict-uri-encode/index.js":[function(require,module,exports){
'use strict';
module.exports = function (str) {
	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	});
};

},{}],"/Users/dev/Documents/rail-fyi-client/node_modules/warning/browser.js":[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = function() {};

if (process.env.NODE_ENV !== 'production') {
  warning = function(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
        'warning. Please, use a more descriptive format than: ' + format
      );
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' +
        format.replace(/%s/g, function() {
          return args[argIndex++];
        });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch(x) {}
    }
  };
}

module.exports = warning;

}).call(this,require('_process'))

},{"_process":"/Users/dev/Documents/rail-fyi-client/node_modules/process/browser.js"}]},{},["/Users/dev/Documents/rail-fyi-client/app/js/index.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHAvanMvQXBwLmpzIiwiYXBwL2pzL1JvdXRlcy5qcyIsImFwcC9qcy9jb21wb25lbnRzL0Zvb3Rlci5qcyIsImFwcC9qcy9jb21wb25lbnRzL0hlYWRlci5qcyIsImFwcC9qcy9jb21wb25lbnRzL05lYXJlc3RTdGF0aW9uLmpzIiwiYXBwL2pzL2NvbXBvbmVudHMvU2hvd1R3ZWV0LmpzIiwiYXBwL2pzL2NvbXBvbmVudHMvU3RhZmZGb3JtLmpzIiwiYXBwL2pzL2RhdGEvc3RhdGlvbi1saXN0LmpzIiwiYXBwL2pzL2luZGV4LmpzIiwiYXBwL2pzL3BhZ2VzL0hvbWVQYWdlLmpzIiwiYXBwL2pzL3BhZ2VzL05vdEZvdW5kUGFnZS5qcyIsIm5vZGVfbW9kdWxlcy9kZWVwLWVxdWFsL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2RlZXAtZXF1YWwvbGliL2lzX2FyZ3VtZW50cy5qcyIsIm5vZGVfbW9kdWxlcy9kZWVwLWVxdWFsL2xpYi9rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL0V2ZW50TGlzdGVuZXIuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvY2FtZWxpemUuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvY2FtZWxpemVTdHlsZU5hbWUuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2NyZWF0ZUFycmF5RnJvbU1peGVkLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cC5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2ZvY3VzTm9kZS5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2dldE1hcmt1cFdyYXAuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24uanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvaHlwaGVuYXRlLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2h5cGhlbmF0ZVN0eWxlTmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvaXNOb2RlLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2lzVGV4dE5vZGUuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIva2V5TWlycm9yLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL2tleU9mLmpzIiwibm9kZV9tb2R1bGVzL2ZianMvbGliL21hcE9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9tZW1vaXplU3RyaW5nT25seS5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9wZXJmb3JtYW5jZS5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9wZXJmb3JtYW5jZU5vdy5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJub2RlX21vZHVsZXMvZmJqcy9saWIvdG9BcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9mYmpzL2xpYi93YXJuaW5nLmpzIiwibm9kZV9tb2R1bGVzL2hpc3RvcnkvbGliL0FjdGlvbnMuanMiLCJub2RlX21vZHVsZXMvaGlzdG9yeS9saWIvQXN5bmNVdGlscy5qcyIsIm5vZGVfbW9kdWxlcy9oaXN0b3J5L2xpYi9ET01TdGF0ZVN0b3JhZ2UuanMiLCJub2RlX21vZHVsZXMvaGlzdG9yeS9saWIvRE9NVXRpbHMuanMiLCJub2RlX21vZHVsZXMvaGlzdG9yeS9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJub2RlX21vZHVsZXMvaGlzdG9yeS9saWIvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJub2RlX21vZHVsZXMvaGlzdG9yeS9saWIvY3JlYXRlRE9NSGlzdG9yeS5qcyIsIm5vZGVfbW9kdWxlcy9oaXN0b3J5L2xpYi9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIm5vZGVfbW9kdWxlcy9oaXN0b3J5L2xpYi9jcmVhdGVIaXN0b3J5LmpzIiwibm9kZV9tb2R1bGVzL2hpc3RvcnkvbGliL2NyZWF0ZUxvY2F0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2hpc3RvcnkvbGliL2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJub2RlX21vZHVsZXMvaGlzdG9yeS9saWIvZGVwcmVjYXRlLmpzIiwibm9kZV9tb2R1bGVzL2hpc3RvcnkvbGliL2V4dHJhY3RQYXRoLmpzIiwibm9kZV9tb2R1bGVzL2hpc3RvcnkvbGliL3BhcnNlUGF0aC5qcyIsIm5vZGVfbW9kdWxlcy9oaXN0b3J5L2xpYi9ydW5UcmFuc2l0aW9uSG9vay5qcyIsIm5vZGVfbW9kdWxlcy9oaXN0b3J5L2xpYi91c2VCYXNlbmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9oaXN0b3J5L2xpYi91c2VRdWVyaWVzLmpzIiwibm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9xdWVyeS1zdHJpbmcvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvQXN5bmNVdGlscy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL0hpc3RvcnkuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9JbmRleExpbmsuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9JbmRleFJlZGlyZWN0LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvSW5kZXhSb3V0ZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL0xpZmVjeWNsZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL0xpbmsuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9QYXR0ZXJuVXRpbHMuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9Qcm9wVHlwZXMuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9SZWRpcmVjdC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1JvdXRlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvUm91dGVDb250ZXh0LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvUm91dGVVdGlscy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1JvdXRlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL1JvdXRpbmdDb250ZXh0LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvVHJhbnNpdGlvblV0aWxzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvY29tcHV0ZUNoYW5nZWRSb3V0ZXMuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9nZXRDb21wb25lbnRzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvZ2V0Um91dGVQYXJhbXMuanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL2lzQWN0aXZlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9saWIvbWF0Y2guanMiLCJub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2xpYi9tYXRjaFJvdXRlcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbGliL3VzZVJvdXRlcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvQXV0b0ZvY3VzVXRpbHMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0JlZm9yZUlucHV0RXZlbnRQbHVnaW4uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0NTU1Byb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0NhbGxiYWNrUXVldWUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0NoYW5nZUV2ZW50UGx1Z2luLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DbGllbnRSZWFjdFJvb3RJbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9ET01Qcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NUHJvcGVydHlPcGVyYXRpb25zLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9EYW5nZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0RlZmF1bHRFdmVudFBsdWdpbk9yZGVyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FbnRlckxlYXZlRXZlbnRQbHVnaW4uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50Q29uc3RhbnRzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFBsdWdpbkh1Yi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQbHVnaW5SZWdpc3RyeS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQbHVnaW5VdGlscy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQcm9wYWdhdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9IVE1MRE9NUHJvcGVydHlDb25maWcuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0xpbmtlZFZhbHVlVXRpbHMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL09iamVjdC5hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1Bvb2xlZENsYXNzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDaGlsZFJlY29uY2lsZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q2hpbGRyZW4uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q2xhc3MuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb3NpdGVDb21wb25lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01CdXR0b24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NQ29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTUZhY3Rvcmllcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01GZWF0dXJlRmxhZ3MuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NSURPcGVyYXRpb25zLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTUlucHV0LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTU9wdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01TZWxlY3QuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NU2VsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTVNlcnZlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01UZXh0Q29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTVRleHRhcmVhLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERlZmF1bHRJbmplY3Rpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RGVmYXVsdFBlcmYuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVsZW1lbnRWYWxpZGF0b3IuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RW1wdHlDb21wb25lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RW1wdHlDb21wb25lbnRSZWdpc3RyeS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFcnJvclV0aWxzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEV2ZW50RW1pdHRlck1peGluLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEV2ZW50TGlzdGVuZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5qZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdElucHV0U2VsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEluc3RhbmNlSGFuZGxlcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJbnN0YW5jZU1hcC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJc29tb3JwaGljLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE1hcmt1cENoZWNrc3VtLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE1vdW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE11bHRpQ2hpbGQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE5hdGl2ZUNvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3ROb29wVXBkYXRlUXVldWUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0T3duZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UGVyZi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFJlY29uY2lsZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UmVmLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFJvb3RJbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RTZXJ2ZXJCYXRjaGluZ1N0cmF0ZWd5LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFNlcnZlclJlbmRlcmluZy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RVcGRhdGVRdWV1ZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RVcGRhdGVzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFZlcnNpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1NWR0RPTVByb3BlcnR5Q29uZmlnLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TZWxlY3RFdmVudFBsdWdpbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU2VydmVyUmVhY3RSb290SW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1NpbXBsZUV2ZW50UGx1Z2luLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljRHJhZ0V2ZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TeW50aGV0aWNFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljRm9jdXNFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljSW5wdXRFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljS2V5Ym9hcmRFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljTW91c2VFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljVG91Y2hFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljVUlFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljV2hlZWxFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvVHJhbnNhY3Rpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1ZpZXdwb3J0TWV0cmljcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvYWNjdW11bGF0ZUludG8uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2FkbGVyMzIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2NhbkRlZmluZVByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9kZXByZWNhdGVkLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZpbmRET01Ob2RlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9mbGF0dGVuQ2hpbGRyZW4uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZvckVhY2hBY2N1bXVsYXRlZC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRDaGFyQ29kZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRLZXkuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEV2ZW50TW9kaWZpZXJTdGF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRUYXJnZXQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEl0ZXJhdG9yRm4uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldFRleHRDb250ZW50QWNjZXNzb3IuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2lzRXZlbnRTdXBwb3J0ZWQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2lzVGV4dElucHV0RWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvb25seUNoaWxkLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvcmVuZGVyU3VidHJlZUludG9Db250YWluZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL3NldElubmVySFRNTC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvc2V0VGV4dENvbnRlbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi90cmF2ZXJzZUFsbENoaWxkcmVuLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi92YWxpZGF0ZURPTU5lc3RpbmcuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanMiLCJub2RlX21vZHVsZXMvc3RyaWN0LXVyaS1lbmNvZGUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7Ozs7Ozs7O0FBRUE7Ozs7QUFFQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7QUFFQSxJQUFNLFlBQVk7QUFDaEIsVUFBUSxpQkFBVSxNQURGO0FBRWhCLFNBQU8saUJBQVUsTUFGRDtBQUdoQixZQUFVLGlCQUFVLFNBQVYsQ0FBb0IsQ0FDNUIsaUJBQVUsS0FEa0IsRUFFNUIsaUJBQVUsTUFGa0IsQ0FBcEI7QUFITSxDQUFsQjs7SUFTTSxHOzs7QUFFSixlQUFZLEtBQVos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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDbkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDOUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDakRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN4REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDeERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ25FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNqTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN2UEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDMUpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzNJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUMzS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNuREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEVBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN4RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDckVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDL0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNsS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2xPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNwREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUMxR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNsRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNqSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3BLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDM0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDMUhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUMzTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDbFNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDMUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQzlLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM1RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2hJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDek9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNoT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNoSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDM0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN0UkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDM05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3pNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN0SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDck9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNySUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN0SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNuVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3pIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNyTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2x3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3pIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3JyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNqREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNqOEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2hMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUM3RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3hKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3hGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDM0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbk5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUM5SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDbEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDaEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDdFBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN4UkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM1RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMzSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzdTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzVDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNqMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDL2VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUM3RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDckhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQzFGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDL0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNsRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN0RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNoUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM5TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzFrQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNuTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3REQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN0T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3REQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMvR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUM1TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDMVdBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMsIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEhlYWRlciBmcm9tICcuL2NvbXBvbmVudHMvSGVhZGVyJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi9jb21wb25lbnRzL0Zvb3Rlcic7XG5cbmNvbnN0IHByb3BUeXBlcyA9IHtcbiAgcGFyYW1zOiBQcm9wVHlwZXMub2JqZWN0LFxuICBxdWVyeTogUHJvcFR5cGVzLm9iamVjdCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5hcnJheSxcbiAgICBQcm9wVHlwZXMub2JqZWN0XG4gIF0pXG59O1xuXG5jbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGNvbnNvbGUubG9nKCdBYm91dCB0byBtb3VudCBBcHAnKTtcbiAgfVxuXG4gIHJlbmRlckNoaWxkcmVuKCkge1xuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5jaGlsZHJlbiwge1xuICAgICAgcGFyYW1zOiB0aGlzLnByb3BzLnBhcmFtcyxcbiAgICAgIHF1ZXJ5OiB0aGlzLnByb3BzLnF1ZXJ5XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpbi13cmFwcGVyXCI+XG4gICAgICAgIDxIZWFkZXIgLz5cbiAgICAgICAgICB7IHRoaXMucmVuZGVyQ2hpbGRyZW4oKSB9XG4gICAgICAgIDxGb290ZXIgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxufVxuXG5BcHAucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1JvdXRlciwgUm91dGUsIEluZGV4Um91dGV9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgQ3JlYXRlQnJvd3Nlckhpc3RvcnkgZnJvbSAnaGlzdG9yeS9saWIvY3JlYXRlQnJvd3Nlckhpc3RvcnknO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5pbXBvcnQgSG9tZVBhZ2UgZnJvbSAnLi9wYWdlcy9Ib21lUGFnZSc7XG5pbXBvcnQgTm90Rm91bmRQYWdlIGZyb20gJy4vcGFnZXMvTm90Rm91bmRQYWdlJztcbmltcG9ydCBTdGFmZkZvcm0gZnJvbSAnLi9jb21wb25lbnRzL1N0YWZmRm9ybSc7XG5pbXBvcnQgTmVhcmVzdFN0YXRpb24gZnJvbSAnLi9jb21wb25lbnRzL05lYXJlc3RTdGF0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgKFxuICA8Um91dGVyIGhpc3Rvcnk9e0NyZWF0ZUJyb3dzZXJIaXN0b3J5KCl9PlxuICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGNvbXBvbmVudD17QXBwfT5cblxuICAgICAgPEluZGV4Um91dGUgY29tcG9uZW50PXtIb21lUGFnZX0gLz5cblxuICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgY29tcG9uZW50PXtIb21lUGFnZX0gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPVwiL3N0YWZmLWZvcm1cIiBjb21wb25lbnQ9e1N0YWZmRm9ybX0gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPVwiL25lYXJlc3Qtc3RhdGlvblwiIGNvbXBvbmVudD17TmVhcmVzdFN0YXRpb259IC8+XG5cbiAgICAgIDxSb3V0ZSBwYXRoPVwiKlwiIGNvbXBvbmVudD17Tm90Rm91bmRQYWdlfSAvPlxuXG4gICAgPC9Sb3V0ZT5cbiAgPC9Sb3V0ZXI+XG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5jbGFzcyBGb290ZXIgZXh0ZW5kcyBDb21wb25lbnR7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxmb290ZXI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzTmFtZT1cImJ1dHRvbi1zZWNvbmRhcnkgb25lLXRoaXJkIGNvbHVtblwiPlByZXZpb3VzPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzTmFtZT1cImJ1dHRvbi1wcmltYXJ5IG9uZS10aGlyZCBjb2x1bW5cIj5OZXh0PC9idXR0b24+XG4gICAgICA8L2Zvb3Rlcj5cbiAgICApO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9vdGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5jbGFzcyBIZWFkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8aGVhZGVyPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvZ29cIj5SQUlMIEZZSTwvZGl2PlxuICAgICAgPC9oZWFkZXI+XG4gICAgKTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEhlYWRlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHN0YXRpb25MaXN0IGZyb20gJy4uL2RhdGEvc3RhdGlvbi1saXN0JztcblxuY2xhc3MgTmVhcmVzdFN0YXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGlvbkxpc3QgPSBzdGF0aW9uTGlzdDtcbiAgICB0aGlzLnN0YXRlID0ge307XG4gICAgdGhpcy5fZmluZE5lYXJlc3RMb2NhdGlvbigpO1xuICB9XG5cbiAgX2RldGVybWluZURpc3RhbmNlKGxhdDEsIGxvbjEsIGxhdDIsIGxvbjIpIHtcbiAgICBjb25zdCBwID0gMC4wMTc0NTMyOTI1MTk5NDMyOTU7ICAgIC8vIE1hdGguUEkgLyAxODBcbiAgICBjb25zdCBjID0gTWF0aC5jb3M7XG4gICAgY29uc3QgYSA9IDAuNSAtIGMoKGxhdDIgLSBsYXQxKSAqIHApLzIgK1xuICAgICAgICAgICAgICBjKGxhdDEgKiBwKSAqIGMobGF0MiAqIHApICpcbiAgICAgICAgICAgICAgKDEgLSBjKChsb24yIC0gbG9uMSkgKiBwKSkvMjtcblxuICAgIHJldHVybiAxMjc0MiAqIE1hdGguYXNpbihNYXRoLnNxcnQoYSkpOyAvLyAyICogUjsgUiA9IDYzNzEga21cbiAgfVxuXG4gIF91cGRhdGVMb2NhdGlvbihzdGF0aW9uLCBkaXN0YW5jZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbmVhcmVzdENvZGU6IHN0YXRpb24uY3JzQ29kZSxcbiAgICAgIG5lYXJlc3ROYW1lOiBzdGF0aW9uLm5hbWUsXG4gICAgICBkaXN0YW5jZTogTWF0aC5yb3VuZChkaXN0YW5jZSlcbiAgICB9KTtcbiAgfVxuXG4gIF9maW5kTmVhcmVzdExvY2F0aW9uKCkge1xuXG4gICAgbGV0IG5hdmlnYXRvciA9IHdpbmRvdy5uYXZpZ2F0b3I7XG5cbiAgICBpZiAobmF2aWdhdG9yICYmIG5hdmlnYXRvci5nZW9sb2NhdGlvbikge1xuXG4gICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKChwb3MpID0+IHtcbiAgICAgICAgY29uc3QgZGlzdGFuY2VzID0gdGhpcy5zdGF0aW9uTGlzdC5tYXAoc3RhdGlvbiA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2RldGVybWluZURpc3RhbmNlKHBvcy5jb29yZHMubGF0aXR1ZGUsIHBvcy5jb29yZHMubG9uZ2l0dWRlLCBzdGF0aW9uLmxhdGl0dWRlLCBzdGF0aW9uLmxvbmdpdHVkZSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IG1pblZhbHVlID0gSW5maW5pdHk7XG4gICAgICAgIGxldCBtaW5JbmRleCA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBkaXN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAobWluVmFsdWUgPiBkaXN0YW5jZXNbaV0pXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWluSW5kZXggPSBpO1xuICAgICAgICAgICAgbWluVmFsdWUgPSBkaXN0YW5jZXNbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGlvbiA9IHRoaXMuc3RhdGlvbkxpc3RbbWluSW5kZXhdO1xuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IGRpc3RhbmNlc1ttaW5JbmRleF07XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlTG9jYXRpb24oc3RhdGlvbiwgZGlzdGFuY2UpO1xuXG4gICAgICB9KTtcblxuICAgIH1cblxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IG5lYXJlc3QgPSA8cD5OZWFyZXN0IHN0YXRpb246IDxhIGhyZWY9e3RoaXMuc3RhdGUubmVhcmVzdENvZGV9Pnt0aGlzLnN0YXRlLm5lYXJlc3ROYW1lfTwvYT4ge3RoaXMuc3RhdGUuZGlzdGFuY2V9IGttPC9wPjtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAge3RoaXMuc3RhdGUubmVhcmVzdENvZGUgPyBuZWFyZXN0IDogJ0ZpbmRpbmcgbmVhcmVzdCBzdGF0aW9uLi4uJ31cbiAgICAgIDwvZGl2Pik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmVhcmVzdFN0YXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmNsYXNzIFNob3dUd2VldCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHt0d2VldDogbnVsbH0sIHRoaXMucHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPVwidHdlZXRcIiBpZD1cInR3ZWV0XCIgY29scz1cIjMwXCIgcm93cz1cIjEwXCIgY2xhc3NOYW1lPVwidS1mdWxsLXdpZHRoXCIgdmFsdWU9e3RoaXMucHJvcHMudHdlZXR9PjwvdGV4dGFyZWE+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaG93VHdlZXQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU2hvd1R3ZWV0IGZyb20gJy4vU2hvd1R3ZWV0JztcblxuY2xhc3MgU3RhZmZGb3JtIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgeyBpbnRlcmFjdGlvbjogJ3N0YWZmJywgdHlwZTogJ2tub3dsZWRnZScsIHNlbnRpbWVudDogJ3Bvc2l0aXZlJywgc3RhZmZJZDogbnVsbCwgdHdlZXQ6IG51bGwgfSwgdGhpcy5wcm9wcyk7XG4gIH1cblxuICBzZWxlY3RlZFR5cGUgKHR5cGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdHlwZTogdHlwZSB9KTtcbiAgfVxuXG4gIHNlbGVjdGVkU2VudGltZW50IChzZW50aW1lbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2VudGltZW50OiBzZW50aW1lbnQgfSk7XG4gIH1cblxuICBzdGFmZklkQ2hhbmdlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHN0YWZmSWQ6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBrbm93bGVkZ2VCdXR0b25DbGFzcyA9IGBidXR0b24tcHJpbWFyeSBvbmUtdGhpcmQgY29sdW1uICR7dGhpcy5zdGF0ZS50eXBlID09PSAna25vd2xlZGdlJyA/ICcgYWN0aXZlJzogJyd9YDtcbiAgICBjb25zdCBiZWhhdmlvdXJCdXR0b25DbGFzcyA9IGBidXR0b24tcHJpbWFyeSBvbmUtdGhpcmQgY29sdW1uICR7dGhpcy5zdGF0ZS50eXBlID09PSAnYmVoYXZpb3VyJyA/ICcgYWN0aXZlJzogJyd9YDtcbiAgICBjb25zdCBhdmFpbGFiaWxpdHlCdXR0b25DbGFzcyA9IGBidXR0b24tcHJpbWFyeSBvbmUtdGhpcmQgY29sdW1uICR7dGhpcy5zdGF0ZS50eXBlID09PSAnYXZhaWxhYmlsaXR5JyA/ICcgYWN0aXZlJzogJyd9YDtcblxuICAgIGNvbnN0IHBvc2l0aXZlQnV0dG9uQ2xhc3MgPSBgYnV0dG9uLXByaW1hcnkgb25lLWhhbGYgY29sdW1uICR7dGhpcy5zdGF0ZS5zZW50aW1lbnQgPT09ICdwb3NpdGl2ZScgPyAnIGFjdGl2ZSc6ICcnfWA7XG4gICAgY29uc3QgbmVnYXRpdmVCdXR0b25DbGFzcyA9IGBidXR0b24tcHJpbWFyeSBvbmUtaGFsZiBjb2x1bW4gJHt0aGlzLnN0YXRlLnNlbnRpbWVudCA9PT0gJ25lZ2F0aXZlJyA/ICcgYWN0aXZlJzogJyd9YDtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0YWZmLWlkIHJvd1wiPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwic3RhZmYtaWRcIj5TdGFmZiBJRCBvciBOYW1lPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwidS1mdWxsLXdpZHRoXCIgdHlwZT1cInRleHRcIiBuYW1lPVwic3RhZmYtaWRcIiBpZD1cInN0YWZmLWlkXCIgcGxhY2Vob2xkZXI9XCJQbGVhc2UgZW50ZXIgdGhlIHN0YWZmIGlkIG9yIG5hbWVcIlxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnN0YWZmSWRDaGFuZ2V9IHZhbHVlPXt0aGlzLnN0YXRlLnN0YWZmSWR9Lz5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0eXBlLWJ1dHRvbnMgcm93XCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17a25vd2xlZGdlQnV0dG9uQ2xhc3N9XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnNlbGVjdGVkVHlwZS5iaW5kKHRoaXMsICdrbm93bGVkZ2UnKX0+S25vd2xlZGdlPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YmVoYXZpb3VyQnV0dG9uQ2xhc3N9XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnNlbGVjdGVkVHlwZS5iaW5kKHRoaXMsICdiZWhhdmlvdXInKX0+QmVoYXZpb3VyPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YXZhaWxhYmlsaXR5QnV0dG9uQ2xhc3N9XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnNlbGVjdGVkVHlwZS5iaW5kKHRoaXMsICdhdmFpbGFiaWxpdHknKX0+QXZhaWxhYmlsaXR5PC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VudGltZW50LWJ1dHRvbnMgcm93XCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17cG9zaXRpdmVCdXR0b25DbGFzc31cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuc2VsZWN0ZWRTZW50aW1lbnQuYmluZCh0aGlzLCAncG9zaXRpdmUnKX0+UG9zaXRpdmU8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtuZWdhdGl2ZUJ1dHRvbkNsYXNzfVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5zZWxlY3RlZFNlbnRpbWVudC5iaW5kKHRoaXMsICduZWdhdGl2ZScpfT5OZWdhdGl2ZTwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ1dHRvbi1wcmltYXJ5XCIgdHlwZT1cInN1Ym1pdFwiIG9uQ2xpY2s9e3RoaXMuZG9TdGF0ZVN1Ym1pdH0+U3VibWl0PC9idXR0b24+XG5cbiAgICAgICAgPFNob3dUd2VldCB0d2VldD17dGhpcy5zdGF0ZS50d2VldH0gLz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTdGFmZkZvcm07XG4iLCIndXNlIHN0cmljdCc7XG5leHBvcnQgZGVmYXVsdCBbXG4gIHtcIm5hbWVcIjpcIkFiZXJcIixcImxhdGl0dWRlXCI6NTEuNTc0OTYwNjksXCJsb25naXR1ZGVcIjotMy4yMjk4Mzg5MzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJBQkVcIn0se1wibmFtZVwiOlwiQWJlcmN5bm9uXCIsXCJsYXRpdHVkZVwiOjUxLjY0NDcwNixcImxvbmdpdHVkZVwiOi0zLjMyNzAwMDc1NCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkFDWVwifSx7XCJuYW1lXCI6XCJBYmVyZGFyZVwiLFwibGF0aXR1ZGVcIjo1MS43MTUwNTc0NyxcImxvbmdpdHVkZVwiOi0zLjQ0MzA5OTE0NyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkFCQVwifSx7XCJuYW1lXCI6XCJBYmVyZG92ZXlcIixcImxhdGl0dWRlXCI6NTIuNTQzOTcyMjMsXCJsb25naXR1ZGVcIjotNC4wNTcwODA4MzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJBVllcIn0se1wibmFtZVwiOlwiQWJlcmVyY2hcIixcImxhdGl0dWRlXCI6NTIuODk4NjAwNDYsXCJsb25naXR1ZGVcIjotNC4zNzQxOTU5NTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJBQkhcIn0se1wibmFtZVwiOlwiQWJlcmdhdmVubnlcIixcImxhdGl0dWRlXCI6NTEuODE2NjkxMjQsXCJsb25naXR1ZGVcIjotMy4wMDk2NjQyNDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJBR1ZcIn0se1wibmFtZVwiOlwiQWJlcmdlbGUgJiBQZW5zYXJuXCIsXCJsYXRpdHVkZVwiOjUzLjI5NDU5MDk0LFwibG9uZ2l0dWRlXCI6LTMuNTgyNjMyMDYyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiQUdMXCJ9LHtcIm5hbWVcIjpcIkFiZXJ5c3R3eXRoXCIsXCJsYXRpdHVkZVwiOjUyLjQxNDA1NjkyLFwibG9uZ2l0dWRlXCI6LTQuMDgxOTA4Njk4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiQVlXXCJ9LHtcIm5hbWVcIjpcIkFtbWFuZm9yZFwiLFwibGF0aXR1ZGVcIjo1MS43OTU5Nzc2NyxcImxvbmdpdHVkZVwiOi0zLjk5Njc2NTc5MixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkFNRlwifSx7XCJuYW1lXCI6XCJCYWdsYW5cIixcImxhdGl0dWRlXCI6NTEuNjE1NTM4MjIsXCJsb25naXR1ZGVcIjotMy44MTExNjIzMTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJCQUpcIn0se1wibmFtZVwiOlwiQmFuZ29yIChHd3luZWRkKVwiLFwibGF0aXR1ZGVcIjo1My4yMjIyOTk3OCxcImxvbmdpdHVkZVwiOi00LjEzNTg5MTM1OCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkJOR1wifSx7XCJuYW1lXCI6XCJCYXJnb2VkXCIsXCJsYXRpdHVkZVwiOjUxLjY5MjMwNzY3LFwibG9uZ2l0dWRlXCI6LTMuMjI5Njg5Mzc2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiQkdEXCJ9LHtcIm5hbWVcIjpcIkJhcm1vdXRoXCIsXCJsYXRpdHVkZVwiOjUyLjcyMjkxMTMsXCJsb25naXR1ZGVcIjotNC4wNTY2MDg1MzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJCUk1cIn0se1wibmFtZVwiOlwiQmFycnlcIixcImxhdGl0dWRlXCI6NTEuMzk2NzgxODEsXCJsb25naXR1ZGVcIjotMy4yODQ5OTc1NjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJCUllcIn0se1wibmFtZVwiOlwiQmFycnkgRG9ja3NcIixcImxhdGl0dWRlXCI6NTEuNDAyNDQwOTcsXCJsb25naXR1ZGVcIjotMy4yNjA3MTU4MzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJCWURcIn0se1wibmFtZVwiOlwiQmFycnkgSXNsYW5kXCIsXCJsYXRpdHVkZVwiOjUxLjM5MjQxMjQ4LFwibG9uZ2l0dWRlXCI6LTMuMjczMzc2MzE3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiQllJXCJ9LHtcIm5hbWVcIjpcIkJldHdzLXktQ29lZFwiLFwibGF0aXR1ZGVcIjo1My4wOTIwODgsXCJsb25naXR1ZGVcIjotMy44MDA4NzkxODgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJCWUNcIn0se1wibmFtZVwiOlwiQmlyY2hncm92ZVwiLFwibGF0aXR1ZGVcIjo1MS41MjE3NDAxMyxcImxvbmdpdHVkZVwiOi0zLjIwMzQ2ODE3NSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkJDR1wifSx7XCJuYW1lXCI6XCJCbGFlbmF1IEZmZXN0aW5pb2dcIixcImxhdGl0dWRlXCI6NTIuOTk0NTY3NjQsXCJsb25naXR1ZGVcIjotMy45Mzg2MDIzODcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJCRkZcIn0se1wibmFtZVwiOlwiQm9kb3JnYW5cIixcImxhdGl0dWRlXCI6NTMuMjA0MzE5MTgsXCJsb25naXR1ZGVcIjotNC40MTgwMjI4MzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJCT1JcIn0se1wibmFtZVwiOlwiQm9ydGhcIixcImxhdGl0dWRlXCI6NTIuNDkxMDQxMSxcImxvbmdpdHVkZVwiOi00LjA1MDE5MDA0NixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkJSSFwifSx7XCJuYW1lXCI6XCJCcmlkZ2VuZFwiLFwibGF0aXR1ZGVcIjo1MS41MDY5NzY0MyxcImxvbmdpdHVkZVwiOi0zLjU3NTI5NjQ4MSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkJHTlwifSx7XCJuYW1lXCI6XCJCcml0aGRpclwiLFwibGF0aXR1ZGVcIjo1MS43MTAzMDE0OCxcImxvbmdpdHVkZVwiOi0zLjIyODcyOTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJCSERcIn0se1wibmFtZVwiOlwiQnJpdG9uIEZlcnJ5XCIsXCJsYXRpdHVkZVwiOjUxLjYzNzg5NDA5LFwibG9uZ2l0dWRlXCI6LTMuODE5Mjc4OTIyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiQk5GXCJ9LHtcIm5hbWVcIjpcIkJyb29tZVwiLFwibGF0aXR1ZGVcIjo1Mi40MjI3ODA5OCxcImxvbmdpdHVkZVwiOi0yLjg4NTIxNzkxNixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkJNRVwifSx7XCJuYW1lXCI6XCJCdWNrbGV5XCIsXCJsYXRpdHVkZVwiOjUzLjE2MzA0ODY5LFwibG9uZ2l0dWRlXCI6LTMuMDU1OTM2MzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJCQ0tcIn0se1wibmFtZVwiOlwiQnVja25lbGxcIixcImxhdGl0dWRlXCI6NTIuMzU3NTU3MyxcImxvbmdpdHVkZVwiOi0yLjk0ODUyNDcyNyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkJVS1wifSx7XCJuYW1lXCI6XCJCdWlsdGggUm9hZFwiLFwibGF0aXR1ZGVcIjo1Mi4xNjkzMjU2NSxcImxvbmdpdHVkZVwiOi0zLjQyNzA0NTExOSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkJIUlwifSx7XCJuYW1lXCI6XCJCeW5lYVwiLFwibGF0aXR1ZGVcIjo1MS42NzIwMzE1NyxcImxvbmdpdHVkZVwiOi00LjA5ODkwMDY2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkJZRVwifSx7XCJuYW1lXCI6XCJDYWRveHRvblwiLFwibGF0aXR1ZGVcIjo1MS40MTIyNzkxMyxcImxvbmdpdHVkZVwiOi0zLjI0ODkwNzQ2OSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkNBRFwifSx7XCJuYW1lXCI6XCJDYWVyZ3dybGVcIixcImxhdGl0dWRlXCI6NTMuMTA3ODgzNDEsXCJsb25naXR1ZGVcIjotMy4wMzI5MjMzMjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDR1dcIn0se1wibmFtZVwiOlwiQ2FlcnBoaWxseVwiLFwibGF0aXR1ZGVcIjo1MS41NzE1NzIxNSxcImxvbmdpdHVkZVwiOi0zLjIxODQ5MjE0NyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkNQSFwifSx7XCJuYW1lXCI6XCJDYWVyc3dzXCIsXCJsYXRpdHVkZVwiOjUyLjUxNjEzNzM1LFwibG9uZ2l0dWRlXCI6LTMuNDMyNTA4OTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDV1NcIn0se1wibmFtZVwiOlwiQ2FsZGljb3RcIixcImxhdGl0dWRlXCI6NTEuNTg0Nzg0NTcsXCJsb25naXR1ZGVcIjotMi43NjA1ODUxNzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDRFRcIn0se1wibmFtZVwiOlwiQ2FyZGlmZiBCYXlcIixcImxhdGl0dWRlXCI6NTEuNDY3MTA5MzcsXCJsb25naXR1ZGVcIjotMy4xNjY0MjY3OCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkNEQlwifSx7XCJuYW1lXCI6XCJDYXJkaWZmIENlbnRyYWxcIixcImxhdGl0dWRlXCI6NTEuNDc2MDI2NjIsXCJsb25naXR1ZGVcIjotMy4xNzkzMTE1NDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDREZcIn0se1wibmFtZVwiOlwiQ2FyZGlmZiBRdWVlbiBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTEuNDgxOTYyNzcsXCJsb25naXR1ZGVcIjotMy4xNzAyMDQ0NzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDRFFcIn0se1wibmFtZVwiOlwiQ2FybWFydGhlblwiLFwibGF0aXR1ZGVcIjo1MS44NTMzNTc5OSxcImxvbmdpdHVkZVwiOi00LjMwNTk4NTc3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiQ01OXCJ9LHtcIm5hbWVcIjpcIkNhdGhheXNcIixcImxhdGl0dWRlXCI6NTEuNDg4OTAwNjQsXCJsb25naXR1ZGVcIjotMy4xNzg2OTMwNDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDWVNcIn0se1wibmFtZVwiOlwiQ2Vmbi15LUJlZGRcIixcImxhdGl0dWRlXCI6NTMuMDk4ODE5OTcsXCJsb25naXR1ZGVcIjotMy4wMzEwNjMyODYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDWUJcIn0se1wibmFtZVwiOlwiQ2hlcHN0b3dcIixcImxhdGl0dWRlXCI6NTEuNjQwMTc0OTQsXCJsb25naXR1ZGVcIjotMi42NzE5MTQxMTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDUFdcIn0se1wibmFtZVwiOlwiQ2hlc3RlclwiLFwibGF0aXR1ZGVcIjo1My4xOTY4Mzk1OCxcImxvbmdpdHVkZVwiOi0yLjg4MDEyNTU4OCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkNUUlwifSx7XCJuYW1lXCI6XCJDaGlya1wiLFwibGF0aXR1ZGVcIjo1Mi45MzMxMDI1MixcImxvbmdpdHVkZVwiOi0zLjA2NTY1NTYwMSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkNSS1wifSx7XCJuYW1lXCI6XCJDaHVyY2ggU3RyZXR0b25cIixcImxhdGl0dWRlXCI6NTIuNTM3NDMzODUsXCJsb25naXR1ZGVcIjotMi44MDM3MDE3NzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDVFRcIn0se1wibmFtZVwiOlwiQ2lsbWVyaVwiLFwibGF0aXR1ZGVcIjo1Mi4xNTA1MzI1MyxcImxvbmdpdHVkZVwiOi0zLjQ1NjU1NDUyNixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkNJTVwifSx7XCJuYW1lXCI6XCJDbGFyYmVzdG9uIFJvYWRcIixcImxhdGl0dWRlXCI6NTEuODUxNjcxOTMsXCJsb25naXR1ZGVcIjotNC44ODM1NzQ0OTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDTFJcIn0se1wibmFtZVwiOlwiQ2x1bmRlcndlblwiLFwibGF0aXR1ZGVcIjo1MS44NDA1NDU2MyxcImxvbmdpdHVkZVwiOi00LjczMTg3ODgxMixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkNVV1wifSx7XCJuYW1lXCI6XCJDb2dhblwiLFwibGF0aXR1ZGVcIjo1MS40NDU5OTI3LFwibG9uZ2l0dWRlXCI6LTMuMTg5MTAwMDc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiQ0dOXCJ9LHtcIm5hbWVcIjpcIkNvbHd5biBCYXlcIixcImxhdGl0dWRlXCI6NTMuMjk2Mzc3MDksXCJsb25naXR1ZGVcIjotMy43MjU0MzA3NDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDV0JcIn0se1wibmFtZVwiOlwiQ29ud3lcIixcImxhdGl0dWRlXCI6NTMuMjgwMTE5NzEsXCJsb25naXR1ZGVcIjotMy44MzA1NDE0OTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDTldcIn0se1wibmFtZVwiOlwiQ29yeXRvblwiLFwibGF0aXR1ZGVcIjo1MS41MjAzNjk3MyxcImxvbmdpdHVkZVwiOi0zLjIzMTUzODc5NyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkNPWVwifSx7XCJuYW1lXCI6XCJDcmF2ZW4gQXJtc1wiLFwibGF0aXR1ZGVcIjo1Mi40NDIwMTE4NyxcImxvbmdpdHVkZVwiOi0yLjgzNzA1MjgzMyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkNSVlwifSx7XCJuYW1lXCI6XCJDcmljY2lldGhcIixcImxhdGl0dWRlXCI6NTIuOTE4NDI4MTksXCJsb25naXR1ZGVcIjotNC4yMzc1Mjg0MDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDQ0NcIn0se1wibmFtZVwiOlwiQ3Jvc3NrZXlzXCIsXCJsYXRpdHVkZVwiOjUxLjYyMDg5Nzk2LFwibG9uZ2l0dWRlXCI6LTMuMTI2MTkxNjY3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiQ0tZXCJ9LHtcIm5hbWVcIjpcIkN3bWJhY2hcIixcImxhdGl0dWRlXCI6NTEuNzAxOTI2NDEsXCJsb25naXR1ZGVcIjotMy40MTM3MzgwMjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJDTUhcIn0se1wibmFtZVwiOlwiQ3dtYnJhblwiLFwibGF0aXR1ZGVcIjo1MS42NTY1ODI4MixcImxvbmdpdHVkZVwiOi0zLjAxNjIyMTgxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiQ1dNXCJ9LHtcIm5hbWVcIjpcIkN5bmdob3JkeVwiLFwibGF0aXR1ZGVcIjo1Mi4wNTE1MDc1NixcImxvbmdpdHVkZVwiOi0zLjc0ODIzMzE0OCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkNZTlwifSx7XCJuYW1lXCI6XCJEYW5lc2NvdXJ0XCIsXCJsYXRpdHVkZVwiOjUxLjUwMDUwNzg5LFwibG9uZ2l0dWRlXCI6LTMuMjMzOTI4MDMzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiRENUXCJ9LHtcIm5hbWVcIjpcIkRlZ2Fud3lcIixcImxhdGl0dWRlXCI6NTMuMjk0NzY1ODcsXCJsb25naXR1ZGVcIjotMy44MzM0MDM1OTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJER1lcIn0se1wibmFtZVwiOlwiRGluYXMgKFJob25kZGEpXCIsXCJsYXRpdHVkZVwiOjUxLjYxNzgzMDc3LFwibG9uZ2l0dWRlXCI6LTMuNDM3NTU3MTQ3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiRE1HXCJ9LHtcIm5hbWVcIjpcIkRpbmFzIFBvd3lzXCIsXCJsYXRpdHVkZVwiOjUxLjQzMTY2NDMsXCJsb25naXR1ZGVcIjotMy4yMTgzNjI2OTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJETlNcIn0se1wibmFtZVwiOlwiRGluZ2xlIFJvYWRcIixcImxhdGl0dWRlXCI6NTEuNDQwMDUzNjcsXCJsb25naXR1ZGVcIjotMy4xODA2MTQ5NTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJER0xcIn0se1wibmFtZVwiOlwiRG9sYXVcIixcImxhdGl0dWRlXCI6NTIuMjk1MzU3MDcsXCJsb25naXR1ZGVcIjotMy4yNjM2Mjc1MzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJET0xcIn0se1wibmFtZVwiOlwiRG9sZ2Fycm9nXCIsXCJsYXRpdHVkZVwiOjUzLjE4NjM2MzI5LFwibG9uZ2l0dWRlXCI6LTMuODIyNjUzNzA2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiRExHXCJ9LHtcIm5hbWVcIjpcIkRvbHd5ZGRlbGFuXCIsXCJsYXRpdHVkZVwiOjUzLjA1MjAzMzE3LFwibG9uZ2l0dWRlXCI6LTMuODg1MTM3NzU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiRFdEXCJ9LHtcIm5hbWVcIjpcIkRvdmV5IEp1bmN0aW9uXCIsXCJsYXRpdHVkZVwiOjUyLjU2NDM3NDc5LFwibG9uZ2l0dWRlXCI6LTMuOTIzOTExOTc3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiRFZZXCJ9LHtcIm5hbWVcIjpcIkR1YmxpbiBGZXJyeXBvcnRcIixcImxhdGl0dWRlXCI6NTMuMzQ5NDQyNixcImxvbmdpdHVkZVwiOi02LjI2MDA4MjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJERlBcIn0se1wibmFtZVwiOlwiRHVibGluIFBvcnQgLSBTdGVuYVwiLFwibGF0aXR1ZGVcIjo1My4zNTEwNzU5LFwibG9uZ2l0dWRlXCI6LTYuMjE0NTAyNzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJEUFNcIn0se1wibmFtZVwiOlwiRHlmZnJ5biBBcmR1ZHd5XCIsXCJsYXRpdHVkZVwiOjUyLjc4ODg2NTE0LFwibG9uZ2l0dWRlXCI6LTQuMTA0NjU3MDE0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiRFlGXCJ9LHtcIm5hbWVcIjpcIkVhc3Ricm9va1wiLFwibGF0aXR1ZGVcIjo1MS40Mzc2MzU1OSxcImxvbmdpdHVkZVwiOi0zLjIwNjE0ODE5NSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkVCS1wifSx7XCJuYW1lXCI6XCJFYmJ3IFZhbGUgUGFya3dheVwiLFwibGF0aXR1ZGVcIjo1MS43NTcxNDM3NCxcImxvbmdpdHVkZVwiOi0zLjE5NjExMTIzMyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkVCVlwifSx7XCJuYW1lXCI6XCJFYmJ3IFZhbGUgVG93blwiLFwibGF0aXR1ZGVcIjo1MS43NzcyNTIsXCJsb25naXR1ZGVcIjotMy4yMDIyODgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJFQkJcIn0se1wibmFtZVwiOlwiRW5lcmdseW4gJiBDaHVyY2hpbGwgUGFya1wiLFwibGF0aXR1ZGVcIjo1MS41ODM3NixcImxvbmdpdHVkZVwiOi0zLjIyOTczLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiRUNQXCJ9LHtcIm5hbWVcIjpcIkZhaXJib3VybmVcIixcImxhdGl0dWRlXCI6NTIuNjk2MDYxNTMsXCJsb25naXR1ZGVcIjotNC4wNDk0MjYwOTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJGUkJcIn0se1wibmFtZVwiOlwiRmFpcndhdGVyXCIsXCJsYXRpdHVkZVwiOjUxLjQ5MzkwODQ0LFwibG9uZ2l0dWRlXCI6LTMuMjMzODUwNjYyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiRlJXXCJ9LHtcIm5hbWVcIjpcIkZlcm5oaWxsXCIsXCJsYXRpdHVkZVwiOjUxLjY4NjQ5MzYyLFwibG9uZ2l0dWRlXCI6LTMuMzk1ODk3MTczLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiRkVSXCJ9LHtcIm5hbWVcIjpcIkZlcnJ5c2lkZVwiLFwibGF0aXR1ZGVcIjo1MS43NjgzNzAyNCxcImxvbmdpdHVkZVwiOi00LjM2OTQ4NTIyOSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkZZU1wifSx7XCJuYW1lXCI6XCJGZmFpcmZhY2hcIixcImxhdGl0dWRlXCI6NTEuODcyNDc5NTcsXCJsb25naXR1ZGVcIjotMy45OTI4ODk4MzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJGRkFcIn0se1wibmFtZVwiOlwiRmlzaGd1YXJkICYgR29vZHdpY2tcIixcImxhdGl0dWRlXCI6NTIuMDA0MTEyLFwibG9uZ2l0dWRlXCI6LTQuOTk0ODM3NyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkZHV1wifSx7XCJuYW1lXCI6XCJGaXNoZ3VhcmQgSGFyYm91clwiLFwibGF0aXR1ZGVcIjo1Mi4wMTE1NTQxNyxcImxvbmdpdHVkZVwiOi00Ljk4NTY3MDkxNSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkZHSFwifSx7XCJuYW1lXCI6XCJGbGludFwiLFwibGF0aXR1ZGVcIjo1My4yNDk1Mzk2MyxcImxvbmdpdHVkZVwiOi0zLjEzMzAwNTUxNCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkZMTlwifSx7XCJuYW1lXCI6XCJGcm9kc2hhbVwiLFwibGF0aXR1ZGVcIjo1My4yOTU4Nzg2OCxcImxvbmdpdHVkZVwiOi0yLjcyMzExNzg3OSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkZSRFwifSx7XCJuYW1lXCI6XCJHYXJ0aCAoTWlkIEdsYW1vcmdhbilcIixcImxhdGl0dWRlXCI6NTEuNTk2NDUyMixcImxvbmdpdHVkZVwiOi0zLjY0MTQ3MTg1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiR01HXCJ9LHtcIm5hbWVcIjpcIkdhcnRoIChQb3d5cylcIixcImxhdGl0dWRlXCI6NTIuMTMzMjQ3OTUsXCJsb25naXR1ZGVcIjotMy41Mjk5MjMwNDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJHVEhcIn0se1wibmFtZVwiOlwiR2lsZmFjaCBGYXJnb2VkXCIsXCJsYXRpdHVkZVwiOjUxLjY4NDI0NzQ4LFwibG9uZ2l0dWRlXCI6LTMuMjI2NTc3ODMzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiR0ZGXCJ9LHtcIm5hbWVcIjpcIkdsYW4gQ29ud3lcIixcImxhdGl0dWRlXCI6NTMuMjY3NDM5MDQsXCJsb25naXR1ZGVcIjotMy43OTc3NDM4MTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJHQ1dcIn0se1wibmFtZVwiOlwiR29ib3dlblwiLFwibGF0aXR1ZGVcIjo1Mi44OTM1MzkzMyxcImxvbmdpdHVkZVwiOi0zLjAzNTk5NTUzMSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkdPQlwifSx7XCJuYW1lXCI6XCJHb3dlcnRvblwiLFwibGF0aXR1ZGVcIjo1MS42NDg3MjQzLFwibG9uZ2l0dWRlXCI6LTQuMDM1OTY3MjY5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiR1dOXCJ9LHtcIm5hbWVcIjpcIkdyYW5nZXRvd24gKENhcmRpZmYpXCIsXCJsYXRpdHVkZVwiOjUxLjQ2NzAzNDc4LFwibG9uZ2l0dWRlXCI6LTMuMTg5MDcxMTI4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiR1ROXCJ9LHtcIm5hbWVcIjpcIkd3ZXJzeWxsdFwiLFwibGF0aXR1ZGVcIjo1My4wNzI1OTM1MSxcImxvbmdpdHVkZVwiOi0zLjAxNzg5ODM5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkdXRVwifSx7XCJuYW1lXCI6XCJIYXJsZWNoXCIsXCJsYXRpdHVkZVwiOjUyLjg2MTM0NDM5LFwibG9uZ2l0dWRlXCI6LTQuMTA5MjAzNTg2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiSFJMXCJ9LHtcIm5hbWVcIjpcIkhhdmVyZm9yZHdlc3RcIixcImxhdGl0dWRlXCI6NTEuODAyNjM3NTYsXCJsb25naXR1ZGVcIjotNC45NjAyMzIzNzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJIVkZcIn0se1wibmFtZVwiOlwiSGF3YXJkZW5cIixcImxhdGl0dWRlXCI6NTMuMTg1MzcyMDQsXCJsb25naXR1ZGVcIjotMy4wMzIwOTA2MDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJIV0RcIn0se1wibmFtZVwiOlwiSGF3YXJkZW4gQnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUzLjIxODA4ODQsXCJsb25naXR1ZGVcIjotMy4wMzI3MjcxNDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJIV0JcIn0se1wibmFtZVwiOlwiSGVhdGggSGlnaCBMZXZlbFwiLFwibGF0aXR1ZGVcIjo1MS41MTY1NjYwNCxcImxvbmdpdHVkZVwiOi0zLjE4MTcxMzA2OCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkhITFwifSx7XCJuYW1lXCI6XCJIZWF0aCBMb3cgTGV2ZWxcIixcImxhdGl0dWRlXCI6NTEuNTE1NjY0MTYsXCJsb25naXR1ZGVcIjotMy4xODE5Nzc5NzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJITExcIn0se1wibmFtZVwiOlwiSGVsc2J5XCIsXCJsYXRpdHVkZVwiOjUzLjI3NTE3NDgyLFwibG9uZ2l0dWRlXCI6LTIuNzcwNzU3ODE2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiSFNCXCJ9LHtcIm5hbWVcIjpcIkhlbmdvZWRcIixcImxhdGl0dWRlXCI6NTEuNjQ3NDA2MDEsXCJsb25naXR1ZGVcIjotMy4yMjQxMzc4MjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJITkdcIn0se1wibmFtZVwiOlwiSGVyZWZvcmRcIixcImxhdGl0dWRlXCI6NTIuMDYxMTY5OTMsXCJsb25naXR1ZGVcIjotMi43MDgyMTc3NjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJIRkRcIn0se1wibmFtZVwiOlwiSGVzd2FsbFwiLFwibGF0aXR1ZGVcIjo1My4zMjk3MzQ3NixcImxvbmdpdHVkZVwiOi0zLjA3MzcxMjk2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiSFNXXCJ9LHtcIm5hbWVcIjpcIkhvbHloZWFkXCIsXCJsYXRpdHVkZVwiOjUzLjMwNzcwNDc5LFwibG9uZ2l0dWRlXCI6LTQuNjMxMDEyNjc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiSEhEXCJ9LHtcIm5hbWVcIjpcIkhvcGUgKEZsaW50c2hpcmUpXCIsXCJsYXRpdHVkZVwiOjUzLjExNzM3OCxcImxvbmdpdHVkZVwiOi0zLjAzNjg4NjQxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiSFBFXCJ9LHtcIm5hbWVcIjpcIkhvcHRvbiBIZWF0aFwiLFwibGF0aXR1ZGVcIjo1Mi4zOTEzODA2LFwibG9uZ2l0dWRlXCI6LTIuOTExOTIzMTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJIUFRcIn0se1wibmFtZVwiOlwiSm9obnN0b24gKFBlbWJzKVwiLFwibGF0aXR1ZGVcIjo1MS43NTY3NTA5NCxcImxvbmdpdHVkZVwiOi00Ljk5NjM1ODY4NCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkpPSFwifSx7XCJuYW1lXCI6XCJLaWR3ZWxseVwiLFwibGF0aXR1ZGVcIjo1MS43MzQzNDM4NixcImxvbmdpdHVkZVwiOi00LjMxNzAxMTI0NSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIktXTFwifSx7XCJuYW1lXCI6XCJLaWxnZXR0eVwiLFwibGF0aXR1ZGVcIjo1MS43MzIxMDkxNixcImxvbmdpdHVkZVwiOi00LjcxNTE5MjczOCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIktHVFwifSx7XCJuYW1lXCI6XCJLbmlnaHRvblwiLFwibGF0aXR1ZGVcIjo1Mi4zNDUwODAxMyxcImxvbmdpdHVkZVwiOi0zLjA0MjIxMTAxMixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIktOSVwifSx7XCJuYW1lXCI6XCJLbnVja2xhc1wiLFwibGF0aXR1ZGVcIjo1Mi4zNTk4Njk1MyxcImxvbmdpdHVkZVwiOi0zLjA5Njg5NDIwMixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIktOVVwifSx7XCJuYW1lXCI6XCJMYW1waGV5XCIsXCJsYXRpdHVkZVwiOjUxLjY2NzE5NjY1LFwibG9uZ2l0dWRlXCI6LTQuODczMjk4NjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJMQU1cIn0se1wibmFtZVwiOlwiTGVvbWluc3RlclwiLFwibGF0aXR1ZGVcIjo1Mi4yMjUxNDUwNyxcImxvbmdpdHVkZVwiOi0yLjczMDQ4NTczNyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkxFT1wifSx7XCJuYW1lXCI6XCJMaXN2YW5lICYgVGhvcm5oaWxsXCIsXCJsYXRpdHVkZVwiOjUxLjU0NDU3MzA4LFwibG9uZ2l0dWRlXCI6LTMuMTg1NjExMTgyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTFZUXCJ9LHtcIm5hbWVcIjpcIkxsYW5hYmVyXCIsXCJsYXRpdHVkZVwiOjUyLjc0MTUyNDMxLFwibG9uZ2l0dWRlXCI6LTQuMDc3MTg5MDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJMTEFcIn0se1wibmFtZVwiOlwiTGxhbmJlZHJcIixcImxhdGl0dWRlXCI6NTIuODIwODY1NixcImxvbmdpdHVkZVwiOi00LjExMDIxMDc2OSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkxCUlwifSx7XCJuYW1lXCI6XCJMbGFuYmlzdGVyIFJvYWRcIixcImxhdGl0dWRlXCI6NTIuMzM2NDMyODUsXCJsb25naXR1ZGVcIjotMy4yMTM0MjYzMDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJMTFRcIn0se1wibmFtZVwiOlwiTGxhbmJyYWRhY2hcIixcImxhdGl0dWRlXCI6NTEuNjAzMjUxODgsXCJsb25naXR1ZGVcIjotMy4yMzMwNTc5NzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJMTkJcIn0se1wibmFtZVwiOlwiTGxhbmRhZlwiLFwibGF0aXR1ZGVcIjo1MS41MDg1Mjc2LFwibG9uZ2l0dWRlXCI6LTMuMjI4OTEzODU4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTExOXCJ9LHtcIm5hbWVcIjpcIkxsYW5kYW53Z1wiLFwibGF0aXR1ZGVcIjo1Mi44MzYxNzY5MSxcImxvbmdpdHVkZVwiOi00LjEyMzg3MDM2MixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkxETlwifSx7XCJuYW1lXCI6XCJMbGFuZGVjd3luXCIsXCJsYXRpdHVkZVwiOjUyLjkyMDcwMjI0LFwibG9uZ2l0dWRlXCI6LTQuMDU3MDQ1OTU2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTExDXCJ9LHtcIm5hbWVcIjpcIkxsYW5kZWlsb1wiLFwibGF0aXR1ZGVcIjo1MS44ODUzNDk4LFwibG9uZ2l0dWRlXCI6LTMuOTg2OTE5OTk0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTExMXCJ9LHtcIm5hbWVcIjpcIkxsYW5kb3ZlcnlcIixcImxhdGl0dWRlXCI6NTEuOTk1MzIwNzEsXCJsb25naXR1ZGVcIjotMy44MDI4NTMyNzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJMTFZcIn0se1wibmFtZVwiOlwiTGxhbmRyaW5kb2RcIixcImxhdGl0dWRlXCI6NTIuMjQyMzY1MSxcImxvbmdpdHVkZVwiOi0zLjM3OTE0ODcyNCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkxMT1wifSx7XCJuYW1lXCI6XCJMbGFuZHVkbm9cIixcImxhdGl0dWRlXCI6NTMuMzIwOTM1NjIsXCJsb25naXR1ZGVcIjotMy44MjcwMTgxMzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJMTERcIn0se1wibmFtZVwiOlwiTGxhbmR1ZG5vIEp1bmN0aW9uXCIsXCJsYXRpdHVkZVwiOjUzLjI4Mzk2MTksXCJsb25naXR1ZGVcIjotMy44MDkxMTg1MDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJMTEpcIn0se1wibmFtZVwiOlwiTGxhbmR5YmllXCIsXCJsYXRpdHVkZVwiOjUxLjgyMTAzOTE0LFwibG9uZ2l0dWRlXCI6LTQuMDAzNjc4MjQ1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTExJXCJ9LHtcIm5hbWVcIjpcIkxsYW5lbGxpXCIsXCJsYXRpdHVkZVwiOjUxLjY3Mzg2NjcxLFwibG9uZ2l0dWRlXCI6LTQuMTYxMzI1MTY3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTExFXCJ9LHtcIm5hbWVcIjpcIkxsYW5mYWlyZmVjaGFuXCIsXCJsYXRpdHVkZVwiOjUzLjI1NzMwNTIyLFwibG9uZ2l0dWRlXCI6LTMuOTgzMjA5NDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJMTEZcIn0se1wibmFtZVwiOlwiTGxhbmZhaXJwd2xsXCIsXCJsYXRpdHVkZVwiOjUzLjIyMDk2MjM2LFwibG9uZ2l0dWRlXCI6LTQuMjA5MjI4ODg1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTFBHXCJ9LHtcIm5hbWVcIjpcIkxsYW5nYWRvZ1wiLFwibGF0aXR1ZGVcIjo1MS45NDAyMTk5LFwibG9uZ2l0dWRlXCI6LTMuODkzMTc0Mjg5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTExHXCJ9LHtcIm5hbWVcIjpcIkxsYW5nYW1tYXJjaFwiLFwibGF0aXR1ZGVcIjo1Mi4xMTQzMDk1NSxcImxvbmdpdHVkZVwiOi0zLjU1NDgzMzMyOCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkxMTVwifSx7XCJuYW1lXCI6XCJMbGFuZ2VubmVjaFwiLFwibGF0aXR1ZGVcIjo1MS42OTExMzY1MyxcImxvbmdpdHVkZVwiOi00LjA3ODk0ODY1NSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkxMSFwifSx7XCJuYW1lXCI6XCJMbGFuZ3lubGxvXCIsXCJsYXRpdHVkZVwiOjUyLjM0OTYzMzE3LFwibG9uZ2l0dWRlXCI6LTMuMTYxMzczMTkxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTEdPXCJ9LHtcIm5hbWVcIjpcIkxsYW5oYXJhblwiLFwibGF0aXR1ZGVcIjo1MS41Mzc1ODkyNixcImxvbmdpdHVkZVwiOi0zLjQ0MDc5NTEyNyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkxMUlwifSx7XCJuYW1lXCI6XCJMbGFuaGlsbGV0aFwiLFwibGF0aXR1ZGVcIjo1MS43MDAyOTkyOSxcImxvbmdpdHVkZVwiOi0zLjEzNTIwOTE3MyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkxUSFwifSx7XCJuYW1lXCI6XCJMbGFuaXNoZW5cIixcImxhdGl0dWRlXCI6NTEuNTMyNzQwMDgsXCJsb25naXR1ZGVcIjotMy4xODE5ODc2OCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkxMU1wifSx7XCJuYW1lXCI6XCJMbGFucndzdFwiLFwibGF0aXR1ZGVcIjo1My4xNDQxOTk3OSxcImxvbmdpdHVkZVwiOi0zLjgwMzA1ODkxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTFdSXCJ9LHtcIm5hbWVcIjpcIkxsYW5zYW1sZXRcIixcImxhdGl0dWRlXCI6NTEuNjYxNTAxNTEsXCJsb25naXR1ZGVcIjotMy44ODQ3MTM2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkxBU1wifSx7XCJuYW1lXCI6XCJMbGFudHdpdCBNYWpvclwiLFwibGF0aXR1ZGVcIjo1MS40MDk3NDc3MyxcImxvbmdpdHVkZVwiOi0zLjQ4MTYzNTgzNSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkxXTVwifSx7XCJuYW1lXCI6XCJMbGFud3JkYVwiLFwibGF0aXR1ZGVcIjo1MS45NjI1OTQxOCxcImxvbmdpdHVkZVwiOi0zLjg3MTcwMDQwNixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkxOUlwifSx7XCJuYW1lXCI6XCJMbGFud3J0eWRcIixcImxhdGl0dWRlXCI6NTIuMTA0NzIxOTEsXCJsb25naXR1ZGVcIjotMy42MzIxODIzNTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJMTldcIn0se1wibmFtZVwiOlwiTGx3eW5nd3JpbFwiLFwibGF0aXR1ZGVcIjo1Mi42NjY4MDA2NyxcImxvbmdpdHVkZVwiOi00LjA4NzY5Mjk0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTExXXCJ9LHtcIm5hbWVcIjpcIkxsd3lueXBpYVwiLFwibGF0aXR1ZGVcIjo1MS42MzM5OTk4NSxcImxvbmdpdHVkZVwiOi0zLjQ1MzUyOTg2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIkxMWVwifSx7XCJuYW1lXCI6XCJMdWRsb3dcIixcImxhdGl0dWRlXCI6NTIuMzcwODg3MTMsXCJsb25naXR1ZGVcIjotMi43MTUyNjE1MjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJMVURcIn0se1wibmFtZVwiOlwiTHlkbmV5XCIsXCJsYXRpdHVkZVwiOjUxLjcxNDYyNjUsXCJsb25naXR1ZGVcIjotMi41MzExNjM0NzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJMWURcIn0se1wibmFtZVwiOlwiTWFjaHlubGxldGhcIixcImxhdGl0dWRlXCI6NTIuNTk1MTUzMSxcImxvbmdpdHVkZVwiOi0zLjg1NDU0OTg4NSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIk1DTlwifSx7XCJuYW1lXCI6XCJNYWVzdGVnXCIsXCJsYXRpdHVkZVwiOjUxLjYwOTkzNTM1LFwibG9uZ2l0dWRlXCI6LTMuNjU0NjY3NzgxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTVNUXCJ9LHtcIm5hbWVcIjpcIk1hZXN0ZWcgKEV3ZW5ueSBSb2FkKVwiLFwibGF0aXR1ZGVcIjo1MS42MDUzMzg4OSxcImxvbmdpdHVkZVwiOi0zLjY0OTAxMjk4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTUVXXCJ9LHtcIm5hbWVcIjpcIk1hbm9yYmllclwiLFwibGF0aXR1ZGVcIjo1MS42NjAxNjc5NixcImxvbmdpdHVkZVwiOi00Ljc5MTg3MDE1MSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIk1SQlwifSx7XCJuYW1lXCI6XCJNZXJ0aHlyIFR5ZGZpbFwiLFwibGF0aXR1ZGVcIjo1MS43NDQ1ODU2OSxcImxvbmdpdHVkZVwiOi0zLjM3NzI5MTk1MixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIk1FUlwifSx7XCJuYW1lXCI6XCJNZXJ0aHlyIFZhbGVcIixcImxhdGl0dWRlXCI6NTEuNjg2NjQzOTYsXCJsb25naXR1ZGVcIjotMy4zMzY1ODg0NDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJNRVZcIn0se1wibmFtZVwiOlwiTWlsZm9yZCBIYXZlblwiLFwibGF0aXR1ZGVcIjo1MS43MTQ5NzYyMixcImxvbmdpdHVkZVwiOi01LjA0MTAwMDM2MSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIk1GSFwifSx7XCJuYW1lXCI6XCJNaW5mZm9yZGRcIixcImxhdGl0dWRlXCI6NTIuOTI2MTQ5MzcsXCJsb25naXR1ZGVcIjotNC4wODQ5Nzc0OTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJNRkZcIn0se1wibmFtZVwiOlwiTW9yZmEgTWF3ZGRhY2hcIixcImxhdGl0dWRlXCI6NTIuNzA3MTQ4MTMsXCJsb25naXR1ZGVcIjotNC4wMzIxODE2NzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJNRkFcIn0se1wibmFtZVwiOlwiTW91bnRhaW4gQXNoXCIsXCJsYXRpdHVkZVwiOjUxLjY4MTMyOTAyLFwibG9uZ2l0dWRlXCI6LTMuMzc2MzU1MjI1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTVRBXCJ9LHtcIm5hbWVcIjpcIk5hbnR3aWNoXCIsXCJsYXRpdHVkZVwiOjUzLjA2MzIyODg3LFwibG9uZ2l0dWRlXCI6LTIuNTE5MjQ5MzUxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTkFOXCJ9LHtcIm5hbWVcIjpcIk5hcmJlcnRoXCIsXCJsYXRpdHVkZVwiOjUxLjc5OTM3MzI2LFwibG9uZ2l0dWRlXCI6LTQuNzI3MjEyMTY2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTkFSXCJ9LHtcIm5hbWVcIjpcIk5lYXRoXCIsXCJsYXRpdHVkZVwiOjUxLjY2MjM1OTc0LFwibG9uZ2l0dWRlXCI6LTMuODA3MjQ1MTgzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTlRIXCJ9LHtcIm5hbWVcIjpcIk5lc3RvblwiLFwibGF0aXR1ZGVcIjo1My4yOTI0Mjc5MSxcImxvbmdpdHVkZVwiOi0zLjA2Mzc3NTMxOSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIk5FU1wifSx7XCJuYW1lXCI6XCJOZXdicmlkZ2VcIixcImxhdGl0dWRlXCI6NTEuNjY1ODEyODUsXCJsb25naXR1ZGVcIjotMy4xNDI5MDcxMjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJOQkVcIn0se1wibmFtZVwiOlwiTmV3cG9ydCAoU291dGggV2FsZXMpXCIsXCJsYXRpdHVkZVwiOjUxLjU4OTc0NDM2LFwibG9uZ2l0dWRlXCI6LTIuOTk4NjQ4NjE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiTldQXCJ9LHtcIm5hbWVcIjpcIk5ld3Rvd24gKFBvd3lzKVwiLFwibGF0aXR1ZGVcIjo1Mi41MTIzMjY4NCxcImxvbmdpdHVkZVwiOi0zLjMxMTM5OTA3OCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIk5XVFwifSx7XCJuYW1lXCI6XCJOaW5pYW4gUGFya1wiLFwibGF0aXR1ZGVcIjo1MS40NzY0NDA3MixcImxvbmdpdHVkZVwiOi0zLjIwMTQxMTU2NyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIk5OUFwifSx7XCJuYW1lXCI6XCJOb3J0aCBMbGFucndzdFwiLFwibGF0aXR1ZGVcIjo1My4xNDM4NDQ5MyxcImxvbmdpdHVkZVwiOi0zLjgwMjc0NDk5MixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIk5MUlwifSx7XCJuYW1lXCI6XCJQYW50eWZmeW5ub25cIixcImxhdGl0dWRlXCI6NTEuNzc4ODgwMDEsXCJsb25naXR1ZGVcIjotMy45OTc0NjA0NDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQVEZcIn0se1wibmFtZVwiOlwiUGVtYnJleSAmIEJ1cnJ5IFBvcnRcIixcImxhdGl0dWRlXCI6NTEuNjgzNTI4MDIsXCJsb25naXR1ZGVcIjotNC4yNDc4NjUyMDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQQllcIn0se1wibmFtZVwiOlwiUGVtYnJva2VcIixcImxhdGl0dWRlXCI6NTEuNjcyOTQ2NTgsXCJsb25naXR1ZGVcIjotNC45MDYwNjU3MjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQTUJcIn0se1wibmFtZVwiOlwiUGVtYnJva2UgRG9ja1wiLFwibGF0aXR1ZGVcIjo1MS42OTM5MTU0OCxcImxvbmdpdHVkZVwiOi00LjkzODA3NjYxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiUE1EXCJ9LHtcIm5hbWVcIjpcIlBlbmFsbHlcIixcImxhdGl0dWRlXCI6NTEuNjU4OTIwMDgsXCJsb25naXR1ZGVcIjotNC43MjIwOTI2MTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQTkFcIn0se1wibmFtZVwiOlwiUGVuYXJ0aFwiLFwibGF0aXR1ZGVcIjo1MS40MzU4ODkwOSxcImxvbmdpdHVkZVwiOi0zLjE3NDQ2NTAyMixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlBFTlwifSx7XCJuYW1lXCI6XCJQZW5jb2VkXCIsXCJsYXRpdHVkZVwiOjUxLjUyNDYxMTE4LFwibG9uZ2l0dWRlXCI6LTMuNTAwNDk3NjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQQ0RcIn0se1wibmFtZVwiOlwiUGVuZ2FtXCIsXCJsYXRpdHVkZVwiOjUxLjY3MDQ1MjkxLFwibG9uZ2l0dWRlXCI6LTMuMjMwMTA5NzMyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiUEdNXCJ9LHtcIm5hbWVcIjpcIlBlbmhlbGlnXCIsXCJsYXRpdHVkZVwiOjUyLjU0NTcwMjA4LFwibG9uZ2l0dWRlXCI6LTQuMDM1MDM4MzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQSEdcIn0se1wibmFtZVwiOlwiUGVubWFlbm1hd3JcIixcImxhdGl0dWRlXCI6NTMuMjcwNDgzNTgsXCJsb25naXR1ZGVcIjotMy45MjM1MTU4NzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQTVdcIn0se1wibmFtZVwiOlwiUGVucmhpd2NlaWJlclwiLFwibGF0aXR1ZGVcIjo1MS42Njk5MjAzMSxcImxvbmdpdHVkZVwiOi0zLjM1OTk1NzI5MSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlBFUlwifSx7XCJuYW1lXCI6XCJQZW5yaHluZGV1ZHJhZXRoXCIsXCJsYXRpdHVkZVwiOjUyLjkyODg0MzQ2LFwibG9uZ2l0dWRlXCI6LTQuMDY0NTczOTQ4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiUFJIXCJ9LHtcIm5hbWVcIjpcIlBlbnNhcm4gKEd3eW5lZGQpXCIsXCJsYXRpdHVkZVwiOjUyLjgzMDcyMTE1LFwibG9uZ2l0dWRlXCI6LTQuMTEyMTczMDc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiUEVTXCJ9LHtcIm5hbWVcIjpcIlBlbnRyZS1CYWNoXCIsXCJsYXRpdHVkZVwiOjUxLjcyNTAxMzczLFwibG9uZ2l0dWRlXCI6LTMuMzYyMzMzOTM5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiUFRCXCJ9LHtcIm5hbWVcIjpcIlBlbi15LUJvbnRcIixcImxhdGl0dWRlXCI6NTIuMjczOTQ5MjQsXCJsb25naXR1ZGVcIjotMy4zMjE5NDAwMjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQTllcIn0se1wibmFtZVwiOlwiUGVueWNoYWluXCIsXCJsYXRpdHVkZVwiOjUyLjkwMjg4MixcImxvbmdpdHVkZVwiOi00LjMzODcyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiUE5DXCJ9LHtcIm5hbWVcIjpcIlBlbnlmZm9yZGRcIixcImxhdGl0dWRlXCI6NTMuMTQzMTEwMzcsXCJsb25naXR1ZGVcIjotMy4wNTQ4NDkyMTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQTkZcIn0se1wibmFtZVwiOlwiUG9udGFyZGR1bGFpc1wiLFwibGF0aXR1ZGVcIjo1MS43MTc2MjE2NCxcImxvbmdpdHVkZVwiOi00LjA0NTU3NjAxNSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlBURFwifSx7XCJuYW1lXCI6XCJQb250bG90dHluXCIsXCJsYXRpdHVkZVwiOjUxLjc0NjYzMjA2LFwibG9uZ2l0dWRlXCI6LTMuMjc4OTY2NzcxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiUExUXCJ9LHtcIm5hbWVcIjpcIlBvbnR5Y2x1blwiLFwibGF0aXR1ZGVcIjo1MS41MjM3NzA3LFwibG9uZ2l0dWRlXCI6LTMuMzkyOTMzMzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQWUNcIn0se1wibmFtZVwiOlwiUG9udC15LVBhbnRcIixcImxhdGl0dWRlXCI6NTMuMDY1MTUyNzcsXCJsb25naXR1ZGVcIjotMy44NjI3NDAzNjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQWVBcIn0se1wibmFtZVwiOlwiUG9udHlwb29sICYgTmV3IElublwiLFwibGF0aXR1ZGVcIjo1MS42OTc5NjE5NyxcImxvbmdpdHVkZVwiOi0zLjAxNDI1NDUwMixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlBQTFwifSx7XCJuYW1lXCI6XCJQb250eXByaWRkXCIsXCJsYXRpdHVkZVwiOjUxLjU5OTM2NjI1LFwibG9uZ2l0dWRlXCI6LTMuMzQxMzg4MTY0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiUFBEXCJ9LHtcIm5hbWVcIjpcIlBvcnQgVGFsYm90IFBhcmt3YXlcIixcImxhdGl0dWRlXCI6NTEuNTkxNzE0NzMsXCJsb25naXR1ZGVcIjotMy43ODEzNDAxMDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQVEFcIn0se1wibmFtZVwiOlwiUG9ydGhcIixcImxhdGl0dWRlXCI6NTEuNjEyNTMzNDksXCJsb25naXR1ZGVcIjotMy40MDcyMDM1NTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQT1JcIn0se1wibmFtZVwiOlwiUG9ydGhtYWRvZ1wiLFwibGF0aXR1ZGVcIjo1Mi45MzA5MzQ5MyxcImxvbmdpdHVkZVwiOi00LjEzNDQ1OTc4NyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlBUTVwifSx7XCJuYW1lXCI6XCJQcmVlc1wiLFwibGF0aXR1ZGVcIjo1Mi44OTk2NTA0NixcImxvbmdpdHVkZVwiOi0yLjY4OTc0NDI0OCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlBSU1wifSx7XCJuYW1lXCI6XCJQcmVzdGF0eW5cIixcImxhdGl0dWRlXCI6NTMuMzM2NTE2MzUsXCJsb25naXR1ZGVcIjotMy40MDcxMzY1MTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJQUlRcIn0se1wibmFtZVwiOlwiUHdsbGhlbGlcIixcImxhdGl0dWRlXCI6NTIuODg3ODUxNTgsXCJsb25naXR1ZGVcIjotNC40MTY3MTkzMSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlBXTFwifSx7XCJuYW1lXCI6XCJQeWUgQ29ybmVyXCIsXCJsYXRpdHVkZVwiOjUxLjU3OTUxMyxcImxvbmdpdHVkZVwiOi0zLjAzODI5NSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlBZRVwifSx7XCJuYW1lXCI6XCJQeWxlXCIsXCJsYXRpdHVkZVwiOjUxLjUyNTczOSxcImxvbmdpdHVkZVwiOi0zLjY5ODA3NjM4NSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlBZTFwifSx7XCJuYW1lXCI6XCJRdWFrZXJzIFlhcmRcIixcImxhdGl0dWRlXCI6NTEuNjYwNzIzMSxcImxvbmdpdHVkZVwiOi0zLjMyMjgxMzA0MixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlFZRFwifSx7XCJuYW1lXCI6XCJSYWR5clwiLFwibGF0aXR1ZGVcIjo1MS41MTY1MDg4NixcImxvbmdpdHVkZVwiOi0zLjI0ODAwOTA2MixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlJEUlwifSx7XCJuYW1lXCI6XCJSaGl3YmluYVwiLFwibGF0aXR1ZGVcIjo1MS41MjExODIyNixcImxvbmdpdHVkZVwiOi0zLjIxMzk3NTY2MSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlJISVwifSx7XCJuYW1lXCI6XCJSaG9vc2UgQ2FyZGlmZiBJbnRlcm5hdGlvbmFsIEFpcnBvcnRcIixcImxhdGl0dWRlXCI6NTEuMzg3MDY1NDUsXCJsb25naXR1ZGVcIjotMy4zNDkzOTg5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlJJQVwifSx7XCJuYW1lXCI6XCJSaG9zbmVpZ3JcIixcImxhdGl0dWRlXCI6NTMuMjM0ODU1OTQsXCJsb25naXR1ZGVcIjotNC41MDY2NjM5MTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJSSE9cIn0se1wibmFtZVwiOlwiUmh5bFwiLFwibGF0aXR1ZGVcIjo1My4zMTg0NDA3NCxcImxvbmdpdHVkZVwiOi0zLjQ4OTExMjUwNyxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlJITFwifSx7XCJuYW1lXCI6XCJSaHltbmV5XCIsXCJsYXRpdHVkZVwiOjUxLjc1ODgzNzg5LFwibG9uZ2l0dWRlXCI6LTMuMjg5MzA5NDc2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiUkhZXCJ9LHtcIm5hbWVcIjpcIlJpc2NhICYgUG9udHltaXN0ZXJcIixcImxhdGl0dWRlXCI6NTEuNjA1ODQyNjUsXCJsb25naXR1ZGVcIjotMy4wOTIyMzAxNjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJSQ0FcIn0se1wibmFtZVwiOlwiUm9nZXJzdG9uZVwiLFwibGF0aXR1ZGVcIjo1MS41OTU2MTE0NCxcImxvbmdpdHVkZVwiOi0zLjA2NjYzMjY5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlJPUlwifSx7XCJuYW1lXCI6XCJSb21hbiBCcmlkZ2VcIixcImxhdGl0dWRlXCI6NTMuMDQ0NDM2LFwibG9uZ2l0dWRlXCI6LTMuOTIxNjU0NjM0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiUk1CXCJ9LHtcIm5hbWVcIjpcIlJ1YWJvblwiLFwibGF0aXR1ZGVcIjo1Mi45NjAxODc3NCxcImxvbmdpdHVkZVwiOi0zLjA0MjUwMDk5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiUlVBXCJ9LHtcIm5hbWVcIjpcIlJ1bmNvcm4gRWFzdFwiLFwibGF0aXR1ZGVcIjo1My4zMjY5NDEyLFwibG9uZ2l0dWRlXCI6LTIuNjY1MDg1MzM1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiUlVFXCJ9LHtcIm5hbWVcIjpcIlNhcm5cIixcImxhdGl0dWRlXCI6NTEuNTM4NzIwMTQsXCJsb25naXR1ZGVcIjotMy41ODk5MzI3OTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJTUlJcIn0se1wibmFtZVwiOlwiU2F1bmRlcnNmb290XCIsXCJsYXRpdHVkZVwiOjUxLjcyMjA5MzE0LFwibG9uZ2l0dWRlXCI6LTQuNzE2NjE5NjIyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiU0RGXCJ9LHtcIm5hbWVcIjpcIlNldmVybiBUdW5uZWwgSnVuY3Rpb25cIixcImxhdGl0dWRlXCI6NTEuNTg0NjcxMDcsXCJsb25naXR1ZGVcIjotMi43Nzc5MDM2MTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJTVEpcIn0se1wibmFtZVwiOlwiU2hvdHRvblwiLFwibGF0aXR1ZGVcIjo1My4yMTI1NTUyLFwibG9uZ2l0dWRlXCI6LTMuMDM4NDM0Mzc2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiU0hUXCJ9LHtcIm5hbWVcIjpcIlNocmV3c2J1cnlcIixcImxhdGl0dWRlXCI6NTIuNzExNDExNTksXCJsb25naXR1ZGVcIjotMi43NDg5NDI3NixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlNIUlwifSx7XCJuYW1lXCI6XCJTa2V3ZW5cIixcImxhdGl0dWRlXCI6NTEuNjYxMzg4NzIsXCJsb25naXR1ZGVcIjotMy44NDY1MzYwMjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJTS0VcIn0se1wibmFtZVwiOlwiU3VnYXIgTG9hZlwiLFwibGF0aXR1ZGVcIjo1Mi4wODIyODA0MixcImxvbmdpdHVkZVwiOi0zLjY4Njk2OTQ5MixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlNVR1wifSx7XCJuYW1lXCI6XCJTd2Fuc2VhXCIsXCJsYXRpdHVkZVwiOjUxLjYyNTE0MzgxLFwibG9uZ2l0dWRlXCI6LTMuOTQxNTc2MjI2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiU1dBXCJ9LHtcIm5hbWVcIjpcIlRhZmZzIFdlbGxcIixcImxhdGl0dWRlXCI6NTEuNTQwNzk4NjQsXCJsb25naXR1ZGVcIjotMy4yNjI5NDk0NTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJUQUZcIn0se1wibmFtZVwiOlwiVGFsc2FybmF1XCIsXCJsYXRpdHVkZVwiOjUyLjkwNDMyNTA2LFwibG9uZ2l0dWRlXCI6LTQuMDY4MTY2MzM2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiVEFMXCJ9LHtcIm5hbWVcIjpcIlRhbHlib250XCIsXCJsYXRpdHVkZVwiOjUyLjc3MjY0MzM3LFwibG9uZ2l0dWRlXCI6LTQuMDk2NjA5NjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJUTEJcIn0se1wibmFtZVwiOlwiVGFsLXktQ2FmblwiLFwibGF0aXR1ZGVcIjo1My4yMjgzNzkyNixcImxvbmdpdHVkZVwiOi0zLjgxODI4MDM1MSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlRMQ1wifSx7XCJuYW1lXCI6XCJUZW5ieVwiLFwibGF0aXR1ZGVcIjo1MS42NzI5NDU4NCxcImxvbmdpdHVkZVwiOi00LjcwNjczMzAxNCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlRFTlwifSx7XCJuYW1lXCI6XCJUaXItUGhpbFwiLFwibGF0aXR1ZGVcIjo1MS43MjA5MDU3LFwibG9uZ2l0dWRlXCI6LTMuMjQ2MzkwMjcyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiVElSXCJ9LHtcIm5hbWVcIjpcIlRvbiBQZW50cmVcIixcImxhdGl0dWRlXCI6NTEuNjQ3Nzk4NDQsXCJsb25naXR1ZGVcIjotMy40ODYyMDQ2MDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJUUE5cIn0se1wibmFtZVwiOlwiVG9uZHVcIixcImxhdGl0dWRlXCI6NTEuNTQ3MzY2MjUsXCJsb25naXR1ZGVcIjotMy41OTU1NzA2MzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJURFVcIn0se1wibmFtZVwiOlwiVG9uZmFuYXVcIixcImxhdGl0dWRlXCI6NTIuNjEzNTU5NjMsXCJsb25naXR1ZGVcIjotNC4xMjM3MTMyMzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJUTkZcIn0se1wibmFtZVwiOlwiVG9ueXBhbmR5XCIsXCJsYXRpdHVkZVwiOjUxLjYxOTc1OTY5LFwibG9uZ2l0dWRlXCI6LTMuNDQ4ODg1NTkxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiVE5QXCJ9LHtcIm5hbWVcIjpcIlRyZWZmb3Jlc3RcIixcImxhdGl0dWRlXCI6NTEuNTkxNDU4MDEsXCJsb25naXR1ZGVcIjotMy4zMjUxMzA4MzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJUUkZcIn0se1wibmFtZVwiOlwiVHJlZmZvcmVzdCBFc3RhdGVcIixcImxhdGl0dWRlXCI6NTEuNTY4Mjg3MixcImxvbmdpdHVkZVwiOi0zLjI5MDI2MDMxMixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlRSRVwifSx7XCJuYW1lXCI6XCJUcmVoYWZvZFwiLFwibGF0aXR1ZGVcIjo1MS42MTAxNDcxOCxcImxvbmdpdHVkZVwiOi0zLjM4MDk4OTA2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlRSSFwifSx7XCJuYW1lXCI6XCJUcmVoZXJiZXJ0XCIsXCJsYXRpdHVkZVwiOjUxLjY3MjI0MTY2LFwibG9uZ2l0dWRlXCI6LTMuNTM2MzIxMDI1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiVFJCXCJ9LHtcIm5hbWVcIjpcIlRyZW9yY2h5XCIsXCJsYXRpdHVkZVwiOjUxLjY1NzUzMDczLFwibG9uZ2l0dWRlXCI6LTMuNTA1NzUxNTg0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiVFJZXCJ9LHtcIm5hbWVcIjpcIlRyb2VkLXktcmhpd1wiLFwibGF0aXR1ZGVcIjo1MS43MTI0MjQ3MyxcImxvbmdpdHVkZVwiOi0zLjM0Njc1Njk5OSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlRSRFwifSx7XCJuYW1lXCI6XCJUeSBDcm9lc1wiLFwibGF0aXR1ZGVcIjo1My4yMjI1NzU0MSxcImxvbmdpdHVkZVwiOi00LjQ3NDc1Mzk0NixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlRZQ1wifSx7XCJuYW1lXCI6XCJUeSBHbGFzXCIsXCJsYXRpdHVkZVwiOjUxLjUyMTU0MTIsXCJsb25naXR1ZGVcIjotMy4xOTY1NDQxOCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlRHU1wifSx7XCJuYW1lXCI6XCJUeWd3eW5cIixcImxhdGl0dWRlXCI6NTIuODkzODAxODYsXCJsb25naXR1ZGVcIjotNC4wNzg2NjY3NTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJUWUdcIn0se1wibmFtZVwiOlwiVHl3eW5cIixcImxhdGl0dWRlXCI6NTIuNTg1NTkyOTcsXCJsb25naXR1ZGVcIjotNC4wOTM1NzM3NixcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIlRZV1wifSx7XCJuYW1lXCI6XCJVcHRvbiAoTWVyc2V5c2lkZSlcIixcImxhdGl0dWRlXCI6NTMuMzg2MTc3ODEsXCJsb25naXR1ZGVcIjotMy4wODQ3NTU4MDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJVUFRcIn0se1wibmFtZVwiOlwiVmFsbGV5XCIsXCJsYXRpdHVkZVwiOjUzLjI4MTMwNDE3LFwibG9uZ2l0dWRlXCI6LTQuNTYzMzkyMjQ3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiVkFMXCJ9LHtcIm5hbWVcIjpcIldhdW4tR3JvbiBQYXJrXCIsXCJsYXRpdHVkZVwiOjUxLjQ4ODE5NzQxLFwibG9uZ2l0dWRlXCI6LTMuMjI5NjYzNDgzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiV05HXCJ9LHtcIm5hbWVcIjpcIldlbHNocG9vbFwiLFwibGF0aXR1ZGVcIjo1Mi42NTc1MTExMSxcImxvbmdpdHVkZVwiOi0zLjEzOTg3MjgyOCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIldMUFwifSx7XCJuYW1lXCI6XCJXZW1cIixcImxhdGl0dWRlXCI6NTIuODU2MzI3NDEsXCJsb25naXR1ZGVcIjotMi43MTg3NjA5MTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJXRU1cIn0se1wibmFtZVwiOlwiV2hpdGNodXJjaCAoQ2FyZGlmZilcIixcImxhdGl0dWRlXCI6NTEuNTIwNjQ3NDgsXCJsb25naXR1ZGVcIjotMy4yMjIxNzczMSxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIldIVFwifSx7XCJuYW1lXCI6XCJXaGl0Y2h1cmNoIChTaHJvcHNoaXJlKVwiLFwibGF0aXR1ZGVcIjo1Mi45NjgwNzY3NixcImxvbmdpdHVkZVwiOi0yLjY3MTQ3NTg2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiV1RDXCJ9LHtcIm5hbWVcIjpcIldoaXRsYW5kXCIsXCJsYXRpdHVkZVwiOjUxLjgxODAzNTAyLFwibG9uZ2l0dWRlXCI6LTQuNjE0NDI0NDUxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiV1RMXCJ9LHtcIm5hbWVcIjpcIldpbGRtaWxsXCIsXCJsYXRpdHVkZVwiOjUxLjUyMDg3NDEzLFwibG9uZ2l0dWRlXCI6LTMuNTc5NjUzNTAyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiV01JXCJ9LHtcIm5hbWVcIjpcIldyZW5idXJ5XCIsXCJsYXRpdHVkZVwiOjUzLjAxOTcxODQsXCJsb25naXR1ZGVcIjotMi41OTYyNDczNCxcInN0YXRpb25PcGVyYXRvclwiOlwiQVdcIixcImNyc0NvZGVcIjpcIldSRVwifSx7XCJuYW1lXCI6XCJXcmV4aGFtIENlbnRyYWxcIixcImxhdGl0dWRlXCI6NTMuMDQ2MjA2NTQsXCJsb25naXR1ZGVcIjotMi45OTkwNjI0ODIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJXWENcIn0se1wibmFtZVwiOlwiV3JleGhhbSBHZW5lcmFsXCIsXCJsYXRpdHVkZVwiOjUzLjA1MDI1MDM2LFwibG9uZ2l0dWRlXCI6LTMuMDAyNDUzMDUxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiV1JYXCJ9LHtcIm5hbWVcIjpcIllueXN3ZW5cIixcImxhdGl0dWRlXCI6NTEuNjY0OTY5NjEsXCJsb25naXR1ZGVcIjotMy41MjE2MTQ5OTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJZTldcIn0se1wibmFtZVwiOlwiWW9ydG9uXCIsXCJsYXRpdHVkZVwiOjUyLjgwODk2ODE0LFwibG9uZ2l0dWRlXCI6LTIuNzM2NDY0OTA0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJBV1wiLFwiY3JzQ29kZVwiOlwiWVJUXCJ9LHtcIm5hbWVcIjpcIllzdHJhZCBNeW5hY2hcIixcImxhdGl0dWRlXCI6NTEuNjQwOTMxMzksXCJsb25naXR1ZGVcIjotMy4yNDEzMDU3ODQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJZU01cIn0se1wibmFtZVwiOlwiWXN0cmFkIFJob25kZGFcIixcImxhdGl0dWRlXCI6NTEuNjQzNjM3NTIsXCJsb25naXR1ZGVcIjotMy40NjY3MDEzMzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkFXXCIsXCJjcnNDb2RlXCI6XCJZU1JcIn0se1wibmFtZVwiOlwiQmFya2luZ1wiLFwibGF0aXR1ZGVcIjo1MS41NDAwNDEyMzQ1LFwibG9uZ2l0dWRlXCI6MC4wODA3OTMzODI3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDQ1wiLFwiY3JzQ29kZVwiOlwiQktHXCJ9LHtcIm5hbWVcIjpcIkJhc2lsZG9uXCIsXCJsYXRpdHVkZVwiOjUxLjU2ODExMTQ1NTgsXCJsb25naXR1ZGVcIjowLjQ1Njc5NTY5NTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNDXCIsXCJjcnNDb2RlXCI6XCJCU09cIn0se1wibmFtZVwiOlwiQmVuZmxlZXRcIixcImxhdGl0dWRlXCI6NTEuNTQzOTQ5MDg1NSxcImxvbmdpdHVkZVwiOjAuNTYxNzIzMDAyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDQ1wiLFwiY3JzQ29kZVwiOlwiQkVGXCJ9LHtcIm5hbWVcIjpcIkNoYWZmb3JkIEh1bmRyZWQgTGFrZXNpZGVcIixcImxhdGl0dWRlXCI6NTEuNDg1NjQ1MzYyLFwibG9uZ2l0dWRlXCI6MC4yODcyMzY2NTE3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDQ1wiLFwiY3JzQ29kZVwiOlwiQ0ZIXCJ9LHtcIm5hbWVcIjpcIkNoYWxrd2VsbFwiLFwibGF0aXR1ZGVcIjo1MS41Mzg3MjI3MTcsXCJsb25naXR1ZGVcIjowLjY3MDYwNTI1NzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNDXCIsXCJjcnNDb2RlXCI6XCJDSFdcIn0se1wibmFtZVwiOlwiRGFnZW5oYW0gRG9ja1wiLFwibGF0aXR1ZGVcIjo1MS41MjYyOTM0MjQ3LFwibG9uZ2l0dWRlXCI6MC4xNDUwNDMxOTM4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDQ1wiLFwiY3JzQ29kZVwiOlwiRERLXCJ9LHtcIm5hbWVcIjpcIkVhc3QgVGlsYnVyeVwiLFwibGF0aXR1ZGVcIjo1MS40ODQ4MzQwNzg3LFwibG9uZ2l0dWRlXCI6MC40MTI5MzI4NTgyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDQ1wiLFwiY3JzQ29kZVwiOlwiRVRMXCJ9LHtcIm5hbWVcIjpcIkdyYXlzXCIsXCJsYXRpdHVkZVwiOjUxLjQ3NjI1MDU3NTcsXCJsb25naXR1ZGVcIjowLjMyMTgzNDYwMjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNDXCIsXCJjcnNDb2RlXCI6XCJHUllcIn0se1wibmFtZVwiOlwiTGFpbmRvblwiLFwibGF0aXR1ZGVcIjo1MS41Njc3NjY5MTM1LFwibG9uZ2l0dWRlXCI6MC40MjM2NDM2ODk5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDQ1wiLFwiY3JzQ29kZVwiOlwiTEFJXCJ9LHtcIm5hbWVcIjpcIkxlaWdoLW9uLVNlYVwiLFwibGF0aXR1ZGVcIjo1MS41NDEzNjY4MDk4LFwibG9uZ2l0dWRlXCI6MC42NDA0MjgzMTc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDQ1wiLFwiY3JzQ29kZVwiOlwiTEVTXCJ9LHtcIm5hbWVcIjpcIkxpbWVob3VzZVwiLFwibGF0aXR1ZGVcIjo1MS41MTI3OTQ0MzIsXCJsb25naXR1ZGVcIjotMC4wMzkzNTI3MzQ5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDQ1wiLFwiY3JzQ29kZVwiOlwiTEhTXCJ9LHtcIm5hbWVcIjpcIkxvbmRvbiBGZW5jaHVyY2ggU3RyZWV0XCIsXCJsYXRpdHVkZVwiOjUxLjUxMTU3MzQxLFwibG9uZ2l0dWRlXCI6LTAuMDc4NTkxNTc5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDQ1wiLFwiY3JzQ29kZVwiOlwiRlNUXCJ9LHtcIm5hbWVcIjpcIk9ja2VuZG9uXCIsXCJsYXRpdHVkZVwiOjUxLjUyMTk5NjE4NDksXCJsb25naXR1ZGVcIjowLjI5MDQ3MDkyNzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNDXCIsXCJjcnNDb2RlXCI6XCJPQ0tcIn0se1wibmFtZVwiOlwiUGl0c2VhXCIsXCJsYXRpdHVkZVwiOjUxLjU2MDM2Mzg0ODEsXCJsb25naXR1ZGVcIjowLjUwNjMwMTIxNDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNDXCIsXCJjcnNDb2RlXCI6XCJQU0VcIn0se1wibmFtZVwiOlwiUHVyZmxlZXRcIixcImxhdGl0dWRlXCI6NTEuNDgxMDE2MTUwNixcImxvbmdpdHVkZVwiOjAuMjM2NzgxMzk1MyxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0NcIixcImNyc0NvZGVcIjpcIlBGTFwifSx7XCJuYW1lXCI6XCJSYWluaGFtIChFc3NleClcIixcImxhdGl0dWRlXCI6NTEuNTE3MzU0NjI4NCxcImxvbmdpdHVkZVwiOjAuMTkwNzQ5MDIxNSxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0NcIixcImNyc0NvZGVcIjpcIlJOTVwifSx7XCJuYW1lXCI6XCJTaG9lYnVyeW5lc3NcIixcImxhdGl0dWRlXCI6NTEuNTMwOTc1ODcwMSxcImxvbmdpdHVkZVwiOjAuNzk1MzYwNzkzMSxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0NcIixcImNyc0NvZGVcIjpcIlNSWVwifSx7XCJuYW1lXCI6XCJTb3V0aGVuZCBDZW50cmFsXCIsXCJsYXRpdHVkZVwiOjUxLjUzNzA2ODA0MTEsXCJsb25naXR1ZGVcIjowLjcxMTc0MDQxODcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNDXCIsXCJjcnNDb2RlXCI6XCJTT0NcIn0se1wibmFtZVwiOlwiU291dGhlbmQgRWFzdFwiLFwibGF0aXR1ZGVcIjo1MS41Mzg5NzYxMDQ5LFwibG9uZ2l0dWRlXCI6MC43MzE4MjkxMDk0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDQ1wiLFwiY3JzQ29kZVwiOlwiU09FXCJ9LHtcIm5hbWVcIjpcIlN0YW5mb3JkLWxlLUhvcGVcIixcImxhdGl0dWRlXCI6NTEuNTE0MzY3MTM3MixcImxvbmdpdHVkZVwiOjAuNDIzMDQxMjgzNyxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0NcIixcImNyc0NvZGVcIjpcIlNGT1wifSx7XCJuYW1lXCI6XCJUaG9ycGUgQmF5XCIsXCJsYXRpdHVkZVwiOjUxLjUzNzU3Mzc2MDMsXCJsb25naXR1ZGVcIjowLjc2MTc0MzE4NjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNDXCIsXCJjcnNDb2RlXCI6XCJUUEJcIn0se1wibmFtZVwiOlwiVGlsYnVyeSBUb3duXCIsXCJsYXRpdHVkZVwiOjUxLjQ2MjM2MDc5MTYsXCJsb25naXR1ZGVcIjowLjM1NDA0MTczMjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNDXCIsXCJjcnNDb2RlXCI6XCJUSUxcIn0se1wibmFtZVwiOlwiVXBtaW5zdGVyXCIsXCJsYXRpdHVkZVwiOjUxLjU1OTM2MzI1MDQsXCJsb25naXR1ZGVcIjowLjI1MTkyMTYwMDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNDXCIsXCJjcnNDb2RlXCI6XCJVUE1cIn0se1wibmFtZVwiOlwiV2VzdCBIb3JuZG9uXCIsXCJsYXRpdHVkZVwiOjUxLjU2Nzk1MDU2OCxcImxvbmdpdHVkZVwiOjAuMzQwNjQ3MTk2NyxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0NcIixcImNyc0NvZGVcIjpcIldIUlwifSx7XCJuYW1lXCI6XCJXZXN0Y2xpZmZcIixcImxhdGl0dWRlXCI6NTEuNTM3MzM3MDMyNCxcImxvbmdpdHVkZVwiOjAuNjkxNDc5MTM1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDQ1wiLFwiY3JzQ29kZVwiOlwiV0NGXCJ9LHtcIm5hbWVcIjpcIkF5bGVzYnVyeVwiLFwibGF0aXR1ZGVcIjo1MS44MTM4OTYxNCxcImxvbmdpdHVkZVwiOi0wLjgxNTA5NDk2NixcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIkFZU1wifSx7XCJuYW1lXCI6XCJBeWxlc2J1cnkgVmFsZSBQYXJrd2F5XCIsXCJsYXRpdHVkZVwiOjUxLjgzMDc5NSxcImxvbmdpdHVkZVwiOi0wLjg2MDc4NyxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIkFWUFwifSx7XCJuYW1lXCI6XCJCYW5idXJ5XCIsXCJsYXRpdHVkZVwiOjUyLjA2MDMxMjgyLFwibG9uZ2l0dWRlXCI6LTEuMzI4MTMwNDU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDSFwiLFwiY3JzQ29kZVwiOlwiQkFOXCJ9LHtcIm5hbWVcIjpcIkJlYWNvbnNmaWVsZFwiLFwibGF0aXR1ZGVcIjo1MS42MTEyOTA2NixcImxvbmdpdHVkZVwiOi0wLjY0MzgxNzY3NSxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIkJDRlwifSx7XCJuYW1lXCI6XCJCaWNlc3RlciBOb3J0aFwiLFwibGF0aXR1ZGVcIjo1MS45MDM0OTE1MyxcImxvbmdpdHVkZVwiOi0xLjE1MDM3Njg3OCxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIkJDU1wifSx7XCJuYW1lXCI6XCJCaWNlc3RlciBWaWxsYWdlXCIsXCJsYXRpdHVkZVwiOjUxLjg5MzQ5NDQzLFwibG9uZ2l0dWRlXCI6LTEuMTQ4MDY1ODYyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDSFwiLFwiY3JzQ29kZVwiOlwiQklUXCJ9LHtcIm5hbWVcIjpcIkJpcm1pbmdoYW0gTW9vciBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTIuNDc5MDg4LFwibG9uZ2l0dWRlXCI6LTEuODkyNDY5MDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNIXCIsXCJjcnNDb2RlXCI6XCJCTU9cIn0se1wibmFtZVwiOlwiRGVuaGFtXCIsXCJsYXRpdHVkZVwiOjUxLjU3ODgzNTQsXCJsb25naXR1ZGVcIjotMC40OTc0MjgzNDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNIXCIsXCJjcnNDb2RlXCI6XCJETk1cIn0se1wibmFtZVwiOlwiRGVuaGFtIEdvbGYgQ2x1YlwiLFwibGF0aXR1ZGVcIjo1MS41ODA1OTU5MixcImxvbmdpdHVkZVwiOi0wLjUxNzc3ODczNCxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIkRHQ1wifSx7XCJuYW1lXCI6XCJEb3JyaWRnZVwiLFwibGF0aXR1ZGVcIjo1Mi4zNzIwODI4NixcImxvbmdpdHVkZVwiOi0xLjc1MjkwODE1NixcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIkRER1wifSx7XCJuYW1lXCI6XCJHZXJyYXJkcyBDcm9zc1wiLFwibGF0aXR1ZGVcIjo1MS41ODkwMjE1NyxcImxvbmdpdHVkZVwiOi0wLjU1NTI2ODQ3MSxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIkdFUlwifSx7XCJuYW1lXCI6XCJHcmVhdCBNaXNzZW5kZW5cIixcImxhdGl0dWRlXCI6NTEuNzAzNTIwNzIsXCJsb25naXR1ZGVcIjotMC43MDkxMzc3NTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNIXCIsXCJjcnNDb2RlXCI6XCJHTU5cIn0se1wibmFtZVwiOlwiSGFkZGVuaGFtICYgVGhhbWUgUGFya3dheVwiLFwibGF0aXR1ZGVcIjo1MS43NzA4NTk4NixcImxvbmdpdHVkZVwiOi0wLjk0MjEzOTk2NyxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIkhETVwifSx7XCJuYW1lXCI6XCJIYXR0b25cIixcImxhdGl0dWRlXCI6NTIuMjk1Mjg5OTEsXCJsb25naXR1ZGVcIjotMS42NzI5ODEyMTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNIXCIsXCJjcnNDb2RlXCI6XCJIVE5cIn0se1wibmFtZVwiOlwiSGlnaCBXeWNvbWJlXCIsXCJsYXRpdHVkZVwiOjUxLjYyOTU4NjE1LFwibG9uZ2l0dWRlXCI6LTAuNzQ1NDA4MDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNIXCIsXCJjcnNDb2RlXCI6XCJIV1lcIn0se1wibmFtZVwiOlwiSXNsaXBcIixcImxhdGl0dWRlXCI6NTEuODI1NzYwMDMsXCJsb25naXR1ZGVcIjotMS4yMzgxNzgwNzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNIXCIsXCJjcnNDb2RlXCI6XCJJU1BcIn0se1wibmFtZVwiOlwiS2luZ3MgU3V0dG9uXCIsXCJsYXRpdHVkZVwiOjUyLjAyMTM1NDc0LFwibG9uZ2l0dWRlXCI6LTEuMjgwOTI3MTQ4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDSFwiLFwiY3JzQ29kZVwiOlwiS0dTXCJ9LHtcIm5hbWVcIjpcIkxhcHdvcnRoXCIsXCJsYXRpdHVkZVwiOjUyLjM0MTI3NTA5LFwibG9uZ2l0dWRlXCI6LTEuNzI1NDg0NDcyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDSFwiLFwiY3JzQ29kZVwiOlwiTFBXXCJ9LHtcIm5hbWVcIjpcIkxlYW1pbmd0b24gU3BhXCIsXCJsYXRpdHVkZVwiOjUyLjI4NDUwMTg2LFwibG9uZ2l0dWRlXCI6LTEuNTM2MjEyMjQzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDSFwiLFwiY3JzQ29kZVwiOlwiTE1TXCJ9LHtcIm5hbWVcIjpcIkxpdHRsZSBLaW1ibGVcIixcImxhdGl0dWRlXCI6NTEuNzUyMjM1NjIsXCJsb25naXR1ZGVcIjotMC44MDg0NTE1ODMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNIXCIsXCJjcnNDb2RlXCI6XCJMVEtcIn0se1wibmFtZVwiOlwiTG9uZG9uIE1hcnlsZWJvbmVcIixcImxhdGl0dWRlXCI6NTEuNTIyNTQwMSxcImxvbmdpdHVkZVwiOi0wLjE2MzYyNzc0OSxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIk1ZQlwifSx7XCJuYW1lXCI6XCJNb25rcyBSaXNib3JvdWdoXCIsXCJsYXRpdHVkZVwiOjUxLjczNTc2NTcyLFwibG9uZ2l0dWRlXCI6LTAuODI5MzMzNTc5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDSFwiLFwiY3JzQ29kZVwiOlwiTVJTXCJ9LHtcIm5hbWVcIjpcIk5vcnRob2x0IFBhcmtcIixcImxhdGl0dWRlXCI6NTEuNTU3NjM1MzUsXCJsb25naXR1ZGVcIjotMC4zNTk0MjEzMTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNIXCIsXCJjcnNDb2RlXCI6XCJOTFRcIn0se1wibmFtZVwiOlwiT3hmb3JkIFBhcmt3YXlcIixcImxhdGl0dWRlXCI6MS4yNzQ1LFwibG9uZ2l0dWRlXCI6NTEuODA0MixcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIk9YUFwifSx7XCJuYW1lXCI6XCJQcmluY2VzIFJpc2Jvcm91Z2hcIixcImxhdGl0dWRlXCI6NTEuNzE3ODYzMjIsXCJsb25naXR1ZGVcIjotMC44NDM4ODE0NzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNIXCIsXCJjcnNDb2RlXCI6XCJQUlJcIn0se1wibmFtZVwiOlwiU2F1bmRlcnRvblwiLFwibGF0aXR1ZGVcIjo1MS42NzU5MDQ0NixcImxvbmdpdHVkZVwiOi0wLjgyNTQ2ODYzMyxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIlNEUlwifSx7XCJuYW1lXCI6XCJTZWVyIEdyZWVuICYgSm9yZGFuc1wiLFwibGF0aXR1ZGVcIjo1MS42MDk2Njg2NCxcImxvbmdpdHVkZVwiOi0wLjYwNzQyODM2NSxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIlNSR1wifSx7XCJuYW1lXCI6XCJTb2xpaHVsbFwiLFwibGF0aXR1ZGVcIjo1Mi40MTQ0MDY0MyxcImxvbmdpdHVkZVwiOi0xLjc4ODM5OTIxNSxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIlNPTFwifSx7XCJuYW1lXCI6XCJTdG9rZSBNYW5kZXZpbGxlXCIsXCJsYXRpdHVkZVwiOjUxLjc4NzgwMDI5LFwibG9uZ2l0dWRlXCI6LTAuNzg0MDg0NTQ4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDSFwiLFwiY3JzQ29kZVwiOlwiU0tNXCJ9LHtcIm5hbWVcIjpcIlN1ZGJ1cnkgJiBIYXJyb3cgUm9hZFwiLFwibGF0aXR1ZGVcIjo1MS41NTQ1MDE4LFwibG9uZ2l0dWRlXCI6LTAuMzE1OTcwMTQzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDSFwiLFwiY3JzQ29kZVwiOlwiU1VEXCJ9LHtcIm5hbWVcIjpcIlN1ZGJ1cnkgSGlsbCBIYXJyb3dcIixcImxhdGl0dWRlXCI6NTEuNTU4Mzg2OTgsXCJsb25naXR1ZGVcIjotMC4zMzYxNjc4MjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNIXCIsXCJjcnNDb2RlXCI6XCJTREhcIn0se1wibmFtZVwiOlwiV2Fyd2lja1wiLFwibGF0aXR1ZGVcIjo1Mi4yODY1NTEzMyxcImxvbmdpdHVkZVwiOi0xLjU4MTg1ODAxNCxcInN0YXRpb25PcGVyYXRvclwiOlwiQ0hcIixcImNyc0NvZGVcIjpcIldSV1wifSx7XCJuYW1lXCI6XCJXYXJ3aWNrIFBhcmt3YXlcIixcImxhdGl0dWRlXCI6NTIuMjg2MTE0OTcsXCJsb25naXR1ZGVcIjotMS42MTIwNjIyMjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkNIXCIsXCJjcnNDb2RlXCI6XCJXUlBcIn0se1wibmFtZVwiOlwiV2VtYmxleSBTdGFkaXVtXCIsXCJsYXRpdHVkZVwiOjUxLjU1NDY5NjYzLFwibG9uZ2l0dWRlXCI6LTAuMjg1OTU4Mzk1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDSFwiLFwiY3JzQ29kZVwiOlwiV0NYXCJ9LHtcIm5hbWVcIjpcIldlbmRvdmVyXCIsXCJsYXRpdHVkZVwiOjUxLjc2MTc2MTIzLFwibG9uZ2l0dWRlXCI6LTAuNzQ3MzY5NzYzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJDSFwiLFwiY3JzQ29kZVwiOlwiV05EXCJ9LHtcIm5hbWVcIjpcIkFsZnJldG9uXCIsXCJsYXRpdHVkZVwiOjUzLjEwMDQ1NzA2LFwibG9uZ2l0dWRlXCI6LTEuMzY5Njg4NjMyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiQUxGXCJ9LHtcIm5hbWVcIjpcIkFsc2FnZXJcIixcImxhdGl0dWRlXCI6NTMuMDkyNzUyOTgsXCJsb25naXR1ZGVcIjotMi4yOTg2MTIxNTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJBU0dcIn0se1wibmFtZVwiOlwiQW1iZXJnYXRlXCIsXCJsYXRpdHVkZVwiOjUzLjA2MDU0MDc4LFwibG9uZ2l0dWRlXCI6LTEuNDgwNjkzNDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJBTUJcIn0se1wibmFtZVwiOlwiQW5jYXN0ZXJcIixcImxhdGl0dWRlXCI6NTIuOTg3OTMyNDksXCJsb25naXR1ZGVcIjotMC41MzU2MTUxMjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJBTkNcIn0se1wibmFtZVwiOlwiQXNsb2NrdG9uXCIsXCJsYXRpdHVkZVwiOjUyLjk1MTM5NDI2LFwibG9uZ2l0dWRlXCI6LTAuODk4NTQzMzYxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiQUxLXCJ9LHtcIm5hbWVcIjpcIkF0dGVuYm9yb3VnaFwiLFwibGF0aXR1ZGVcIjo1Mi45MDYzNjY0LFwibG9uZ2l0dWRlXCI6LTEuMjMxMjY5MTA1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiQVRCXCJ9LHtcIm5hbWVcIjpcIkJhcnJvdy1VcG9uLVNvYXJcIixcImxhdGl0dWRlXCI6NTIuNzUwMjgzNTMsXCJsb25naXR1ZGVcIjotMS4xNDk1Njg5MTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJCV1NcIn0se1wibmFtZVwiOlwiQmVlc3RvblwiLFwibGF0aXR1ZGVcIjo1Mi45MjA3NzQ3NSxcImxvbmdpdHVkZVwiOi0xLjIwNzY2MTgwMyxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIkJFRVwifSx7XCJuYW1lXCI6XCJCZWxwZXJcIixcImxhdGl0dWRlXCI6NTMuMDI0NTkxMzMsXCJsb25naXR1ZGVcIjotMS40ODI2MTYyMjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJCTFBcIn0se1wibmFtZVwiOlwiQmluZ2hhbVwiLFwibGF0aXR1ZGVcIjo1Mi45NTQ1NzUwOSxcImxvbmdpdHVkZVwiOi0wLjk1MjA1MTc5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIkJJTlwifSx7XCJuYW1lXCI6XCJCbGVhc2J5XCIsXCJsYXRpdHVkZVwiOjUzLjA0MTY5MTgyLFwibG9uZ2l0dWRlXCI6LTAuOTQyNDgyMzA2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiQlNCXCJ9LHtcIm5hbWVcIjpcIkJseXRoZSBCcmlkZ2VcIixcImxhdGl0dWRlXCI6NTIuOTY4MTY1MzgsXCJsb25naXR1ZGVcIjotMi4wNjY5NTk2OTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJCWUJcIn0se1wibmFtZVwiOlwiQm9zdG9uXCIsXCJsYXRpdHVkZVwiOjUyLjk3ODExODE4LFwibG9uZ2l0dWRlXCI6LTAuMDMxMDAyMjY0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiQlNOXCJ9LHtcIm5hbWVcIjpcIkJvdHRlc2ZvcmRcIixcImxhdGl0dWRlXCI6NTIuOTQ1MDA1NzcsXCJsb25naXR1ZGVcIjotMC43OTYwMTQ4MjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJCVEZcIn0se1wibmFtZVwiOlwiQnVsd2VsbFwiLFwibGF0aXR1ZGVcIjo1Mi45OTk3MTc2NSxcImxvbmdpdHVkZVwiOi0xLjE5NjIzMzU0MyxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIkJMV1wifSx7XCJuYW1lXCI6XCJCdXJ0b24gSm95Y2VcIixcImxhdGl0dWRlXCI6NTIuOTg0MDkxMTYsXCJsb25naXR1ZGVcIjotMS4wNDA3MTMzNzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJCVUpcIn0se1wibmFtZVwiOlwiQnVydG9uLW9uLVRyZW50XCIsXCJsYXRpdHVkZVwiOjUyLjgwNTgzMzA2LFwibG9uZ2l0dWRlXCI6LTEuNjQyNDYyMDI2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiQlVUXCJ9LHtcIm5hbWVcIjpcIkNhcmx0b25cIixcImxhdGl0dWRlXCI6NTIuOTY0OTc3OTcsXCJsb25naXR1ZGVcIjotMS4wNzkyNTMxODksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJDVE9cIn0se1wibmFtZVwiOlwiQ2hlc3RlcmZpZWxkXCIsXCJsYXRpdHVkZVwiOjUzLjIzODI0MDU0LFwibG9uZ2l0dWRlXCI6LTEuNDIwMTA5MDg1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiQ0hEXCJ9LHtcIm5hbWVcIjpcIkNvbGxpbmdoYW1cIixcImxhdGl0dWRlXCI6NTMuMTQ0MTExNDQsXCJsb25naXR1ZGVcIjotMC43NTAzODMxODEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJDTE1cIn0se1wibmFtZVwiOlwiQ29yYnlcIixcImxhdGl0dWRlXCI6NTIuNDg4MDUxLFwibG9uZ2l0dWRlXCI6LTAuNjg5MjQzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiQ09SXCJ9LHtcIm5hbWVcIjpcIkNyZXN3ZWxsXCIsXCJsYXRpdHVkZVwiOjUzLjI2NDAzOTg4LFwibG9uZ2l0dWRlXCI6LTEuMjE1ODczOTE5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiQ1dEXCJ9LHtcIm5hbWVcIjpcIkNyb21mb3JkXCIsXCJsYXRpdHVkZVwiOjUzLjExMjk0NzgxLFwibG9uZ2l0dWRlXCI6LTEuNTQ4Nzg2MTIyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiQ01GXCJ9LHtcIm5hbWVcIjpcIkRlcmJ5XCIsXCJsYXRpdHVkZVwiOjUyLjkxNjE4MDM2LFwibG9uZ2l0dWRlXCI6LTEuNDYzMDczMjYyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiREJZXCJ9LHtcIm5hbWVcIjpcIkR1ZmZpZWxkXCIsXCJsYXRpdHVkZVwiOjUyLjk4Nzc0OTE3LFwibG9uZ2l0dWRlXCI6LTEuNDg2MDM1OTE3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiREZJXCJ9LHtcIm5hbWVcIjpcIkVhc3QgTWlkbGFuZHMgUGFya3dheVwiLFwibGF0aXR1ZGVcIjo1Mi44NjQzMDYsXCJsb25naXR1ZGVcIjotMS4yNjQ2ODcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJFTURcIn0se1wibmFtZVwiOlwiRWx0b24gJiBPcnN0b25cIixcImxhdGl0dWRlXCI6NTIuOTUxODg1MjMsXCJsb25naXR1ZGVcIjotMC44NTUzNjQyNDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJFTE9cIn0se1wibmFtZVwiOlwiRmlza2VydG9uXCIsXCJsYXRpdHVkZVwiOjUzLjA2MDI5NzE1LFwibG9uZ2l0dWRlXCI6LTAuOTEyMTgyMDU0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiRlNLXCJ9LHtcIm5hbWVcIjpcIkdhaW5zYm9yb3VnaCBMZWEgUm9hZFwiLFwibGF0aXR1ZGVcIjo1My4zODYxMTI0NyxcImxvbmdpdHVkZVwiOi0wLjc2ODU4MzA3NixcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIkdCTFwifSx7XCJuYW1lXCI6XCJIYXZlbmhvdXNlXCIsXCJsYXRpdHVkZVwiOjUzLjExNDQ5MDg0LFwibG9uZ2l0dWRlXCI6MC4yNzMxNzc2MTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJIVk5cIn0se1wibmFtZVwiOlwiSGVja2luZ3RvblwiLFwibGF0aXR1ZGVcIjo1Mi45NzczMzczMyxcImxvbmdpdHVkZVwiOi0wLjI5MzkzNjU0OCxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIkhFQ1wifSx7XCJuYW1lXCI6XCJIaW5ja2xleSAoTGVpY3MpXCIsXCJsYXRpdHVkZVwiOjUyLjUzNTAxNjcxLFwibG9uZ2l0dWRlXCI6LTEuMzcxOTE5MjUzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiSE5LXCJ9LHtcIm5hbWVcIjpcIkh1YmJlcnRzIEJyaWRnZVwiLFwibGF0aXR1ZGVcIjo1Mi45NzU2NDM2OSxcImxvbmdpdHVkZVwiOi0wLjExMDA3MTgyMyxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIkhCQlwifSx7XCJuYW1lXCI6XCJIdWNrbmFsbFwiLFwibGF0aXR1ZGVcIjo1My4wMzgzMDczMixcImxvbmdpdHVkZVwiOi0xLjE5NTgxNDMyMSxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIkhLTlwifSx7XCJuYW1lXCI6XCJIeWtlaGFtXCIsXCJsYXRpdHVkZVwiOjUzLjE5NTM2NzI4LFwibG9uZ2l0dWRlXCI6LTAuNTk4MTY0MTcxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiSEtNXCJ9LHtcIm5hbWVcIjpcIktldHRlcmluZ1wiLFwibGF0aXR1ZGVcIjo1Mi4zOTM1Njc4MyxcImxvbmdpdHVkZVwiOi0wLjczMTU1NTU0NyxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIktFVFwifSx7XCJuYW1lXCI6XCJLaWRzZ3JvdmVcIixcImxhdGl0dWRlXCI6NTMuMDg2NTgzMjYsXCJsb25naXR1ZGVcIjotMi4yNDQ4MTg3ODgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJLREdcIn0se1wibmFtZVwiOlwiS2lya2J5LWluLUFzaGZpZWxkXCIsXCJsYXRpdHVkZVwiOjUzLjEwMDEyMzk2LFwibG9uZ2l0dWRlXCI6LTEuMjUzMDYwNzU5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiS0tCXCJ9LHtcIm5hbWVcIjpcIkxhbmdsZXkgTWlsbFwiLFwibGF0aXR1ZGVcIjo1My4wMTgwODMyMSxcImxvbmdpdHVkZVwiOi0xLjMzMTIzNjM0NSxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIkxHTVwifSx7XCJuYW1lXCI6XCJMYW5nd2l0aC1XaGFsZXkgVGhvcm5zXCIsXCJsYXRpdHVkZVwiOjUzLjIzMjUzNjY3LFwibG9uZ2l0dWRlXCI6LTEuMjA5NzA3ODY0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiTEFHXCJ9LHtcIm5hbWVcIjpcIkxlaWNlc3RlclwiLFwibGF0aXR1ZGVcIjo1Mi42MzE0NDU2NixcImxvbmdpdHVkZVwiOi0xLjEyNTI3ODU4NCxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIkxFSVwifSx7XCJuYW1lXCI6XCJMaW5jb2xuIENlbnRyYWxcIixcImxhdGl0dWRlXCI6NTMuMjI2MTA1NDQsXCJsb25naXR1ZGVcIjotMC41Mzk5MTk4NTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJMQ05cIn0se1wibmFtZVwiOlwiTG9uZyBFYXRvblwiLFwibGF0aXR1ZGVcIjo1Mi44ODUxNDUxMyxcImxvbmdpdHVkZVwiOi0xLjI4ODEwNDI2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIkxHRVwifSx7XCJuYW1lXCI6XCJMb25ncG9ydFwiLFwibGF0aXR1ZGVcIjo1My4wNDE2OTE5NCxcImxvbmdpdHVkZVwiOi0yLjIxNjIyNTQ5MyxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIkxQVFwifSx7XCJuYW1lXCI6XCJMb25ndG9uXCIsXCJsYXRpdHVkZVwiOjUyLjk4OTY3MSxcImxvbmdpdHVkZVwiOi0yLjEzNzAxMDA2NyxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIkxHTlwifSx7XCJuYW1lXCI6XCJMb3VnaGJvcm91Z2hcIixcImxhdGl0dWRlXCI6NTIuNzc4OTcwMzgsXCJsb25naXR1ZGVcIjotMS4xOTU5MzI5MjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJMQk9cIn0se1wibmFtZVwiOlwiTG93ZGhhbVwiLFwibGF0aXR1ZGVcIjo1My4wMDY5MjkwMixcImxvbmdpdHVkZVwiOi0wLjk5NzU4MjIzNyxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIkxPV1wifSx7XCJuYW1lXCI6XCJNYW5zZmllbGRcIixcImxhdGl0dWRlXCI6NTMuMTQyNTU4OTYsXCJsb25naXR1ZGVcIjotMS4xOTcxNTc0OTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJNRlRcIn0se1wibmFtZVwiOlwiTWFuc2ZpZWxkIFdvb2Rob3VzZVwiLFwibGF0aXR1ZGVcIjo1My4xNjE0NTQ1NCxcImxvbmdpdHVkZVwiOi0xLjE5OTc5NjM1OCxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIk1TV1wifSx7XCJuYW1lXCI6XCJNYXJrZXQgSGFyYm9yb3VnaFwiLFwibGF0aXR1ZGVcIjo1Mi40ODA0MDc1NixcImxvbmdpdHVkZVwiOi0wLjkwODg3MTcyMyxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIk1IUlwifSx7XCJuYW1lXCI6XCJNYXJrZXQgUmFzZW5cIixcImxhdGl0dWRlXCI6NTMuMzg0NDc3MjUsXCJsb25naXR1ZGVcIjotMC4zMzcwOTQyNzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJNS1JcIn0se1wibmFtZVwiOlwiTWF0bG9ja1wiLFwibGF0aXR1ZGVcIjo1My4xMzgxNTYwOCxcImxvbmdpdHVkZVwiOi0xLjU1ODk4NjExOCxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIk1BVFwifSx7XCJuYW1lXCI6XCJNYXRsb2NrIEJhdGhcIixcImxhdGl0dWRlXCI6NTMuMTIxOTcwNDIsXCJsb25naXR1ZGVcIjotMS41NTc2NTc0OTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJNVEJcIn0se1wibmFtZVwiOlwiTWVsdG9uIE1vd2JyYXlcIixcImxhdGl0dWRlXCI6NTIuNzYwNjgzMyxcImxvbmdpdHVkZVwiOi0wLjg4NTU3Nzc2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIk1NT1wifSx7XCJuYW1lXCI6XCJNZXRoZXJpbmdoYW1cIixcImxhdGl0dWRlXCI6NTMuMTM4OTA0MzMsXCJsb25naXR1ZGVcIjotMC4zOTE0NDcwMjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJNR01cIn0se1wibmFtZVwiOlwiTmFyYm9yb3VnaFwiLFwibGF0aXR1ZGVcIjo1Mi41NzEzMTIxMixcImxvbmdpdHVkZVwiOi0xLjIwMzM1MTc4NyxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIk5CUlwifSx7XCJuYW1lXCI6XCJOZXRoZXJmaWVsZFwiLFwibGF0aXR1ZGVcIjo1Mi45NjE0NzQ4MyxcImxvbmdpdHVkZVwiOi0xLjA3OTYyNTM4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiTkVUXCJ9LHtcIm5hbWVcIjpcIk5ld2FyayBDYXN0bGVcIixcImxhdGl0dWRlXCI6NTMuMDgwMDI3MTQsXCJsb25naXR1ZGVcIjotMC44MTMxNTE3MixcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIk5DVFwifSx7XCJuYW1lXCI6XCJOZXdzdGVhZFwiLFwibGF0aXR1ZGVcIjo1My4wNzE3MTgyMixcImxvbmdpdHVkZVwiOi0xLjIyMjM1NzIyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiTlNEXCJ9LHtcIm5hbWVcIjpcIk5vdHRpbmdoYW1cIixcImxhdGl0dWRlXCI6NTIuOTQ3MTc5NDcsXCJsb25naXR1ZGVcIjotMS4xNDY4ODgwOCxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIk5PVFwifSx7XCJuYW1lXCI6XCJPYWtoYW1cIixcImxhdGl0dWRlXCI6NTIuNjcyMjM1NTgsXCJsb25naXR1ZGVcIjotMC43MzQxNjI3OCxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIk9LTVwifSx7XCJuYW1lXCI6XCJQZWFydHJlZVwiLFwibGF0aXR1ZGVcIjo1Mi44OTgwNjQyNSxcImxvbmdpdHVkZVwiOi0xLjQ3MjY3NzY0NixcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIlBFQVwifSx7XCJuYW1lXCI6XCJSYWRjbGlmZmUtb24tVHJlbnRcIixcImxhdGl0dWRlXCI6NTIuOTQ4OTA3NTUsXCJsb25naXR1ZGVcIjotMS4wMzY1ODAzMzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJSREZcIn0se1wibmFtZVwiOlwiUmF1Y2VieVwiLFwibGF0aXR1ZGVcIjo1Mi45ODUyMjQ3NixcImxvbmdpdHVkZVwiOi0wLjQ1NjYwMjk0MixcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIlJBVVwifSx7XCJuYW1lXCI6XCJSb2xsZXN0b25cIixcImxhdGl0dWRlXCI6NTMuMDY1NzQ3MzYsXCJsb25naXR1ZGVcIjotMC44OTg3NjIxNTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJST0xcIn0se1wibmFtZVwiOlwiUnVza2luZ3RvblwiLFwibGF0aXR1ZGVcIjo1My4wNDE0ODQ1NixcImxvbmdpdHVkZVwiOi0wLjM4MDc1NjM3OSxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIlJLVFwifSx7XCJuYW1lXCI6XCJTYXhpbGJ5XCIsXCJsYXRpdHVkZVwiOjUzLjI2NzIyNDIzLFwibG9uZ2l0dWRlXCI6LTAuNjY0MDQwNzkxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiU1hZXCJ9LHtcIm5hbWVcIjpcIlNoZWZmaWVsZFwiLFwibGF0aXR1ZGVcIjo1My4zNzgyMzUzOCxcImxvbmdpdHVkZVwiOi0xLjQ2MjEwNDUyOSxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIlNIRlwifSx7XCJuYW1lXCI6XCJTaGlyZWJyb29rXCIsXCJsYXRpdHVkZVwiOjUzLjIwNDI2MTc3LFwibG9uZ2l0dWRlXCI6LTEuMjAyNDQyNzIxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiU0hCXCJ9LHtcIm5hbWVcIjpcIlNpbGVieVwiLFwibGF0aXR1ZGVcIjo1Mi43MzEwMjE1OCxcImxvbmdpdHVkZVwiOi0xLjEwOTY2MjI0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiU0lMXCJ9LHtcIm5hbWVcIjpcIlNrZWduZXNzXCIsXCJsYXRpdHVkZVwiOjUzLjE0MzA3NjUsXCJsb25naXR1ZGVcIjowLjMzMzkwMzg0NyxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIlNLR1wifSx7XCJuYW1lXCI6XCJTbGVhZm9yZFwiLFwibGF0aXR1ZGVcIjo1Mi45OTU0OTM0OSxcImxvbmdpdHVkZVwiOi0wLjQxMDM0MjMzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiU0xSXCJ9LHtcIm5hbWVcIjpcIlNvdXRoIFdpZ3N0b25cIixcImxhdGl0dWRlXCI6NTIuNTgyMjQzNTQsXCJsb25naXR1ZGVcIjotMS4xMzQwODA3NjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJTV1NcIn0se1wibmFtZVwiOlwiU3BhbGRpbmdcIixcImxhdGl0dWRlXCI6NTIuNzg4ODI5MzcsXCJsb25naXR1ZGVcIjotMC4xNTY4NzMxODIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJTUEFcIn0se1wibmFtZVwiOlwiU3BvbmRvblwiLFwibGF0aXR1ZGVcIjo1Mi45MTE4ODg3NCxcImxvbmdpdHVkZVwiOi0xLjQxMTA5MzU5MSxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIlNQT1wifSx7XCJuYW1lXCI6XCJTdGFtZm9yZCAoTGluY3MpXCIsXCJsYXRpdHVkZVwiOjUyLjY0NzQwNzA0LFwibG9uZ2l0dWRlXCI6LTAuNDgwNDk5NDI0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiU01EXCJ9LHtcIm5hbWVcIjpcIlN1dHRvbiBQYXJrd2F5XCIsXCJsYXRpdHVkZVwiOjUzLjExNDIwODY1LFwibG9uZ2l0dWRlXCI6LTEuMjQ1NjQ1MTg0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiU1BLXCJ9LHtcIm5hbWVcIjpcIlN3aW5kZXJieVwiLFwibGF0aXR1ZGVcIjo1My4xNjk1ODE4OSxcImxvbmdpdHVkZVwiOi0wLjcwMjY4MjE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiU1dEXCJ9LHtcIm5hbWVcIjpcIlN3aW5lc2hlYWRcIixcImxhdGl0dWRlXCI6NTIuOTY5ODMxNzQsXCJsb25naXR1ZGVcIjotMC4xODcxNTYxNTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJTV0VcIn0se1wibmFtZVwiOlwiU3lzdG9uXCIsXCJsYXRpdHVkZVwiOjUyLjY5NDY3MTMsXCJsb25naXR1ZGVcIjotMS4wODIxMzk0ODYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJTWVNcIn0se1wibmFtZVwiOlwiVGhvcnBlIEN1bHZlcnRcIixcImxhdGl0dWRlXCI6NTMuMTIyNzk4OTQsXCJsb25naXR1ZGVcIjowLjE5OTQ4MTg5MSxcInN0YXRpb25PcGVyYXRvclwiOlwiRU1cIixcImNyc0NvZGVcIjpcIlRQQ1wifSx7XCJuYW1lXCI6XCJUaHVyZ2FydG9uXCIsXCJsYXRpdHVkZVwiOjUzLjAyOTIyNDMxLFwibG9uZ2l0dWRlXCI6LTAuOTYyMDIzMjM5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiVEhVXCJ9LHtcIm5hbWVcIjpcIlR1dGJ1cnkgJiBIYXR0b25cIixcImxhdGl0dWRlXCI6NTIuODY0Mzc4OTIsXCJsb25naXR1ZGVcIjotMS42ODIwODc3NTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJUVVRcIn0se1wibmFtZVwiOlwiVXR0b3hldGVyXCIsXCJsYXRpdHVkZVwiOjUyLjg5NzA4MTI1LFwibG9uZ2l0dWRlXCI6LTEuODU3MjYxNTk1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiVVRUXCJ9LHtcIm5hbWVcIjpcIldhaW5mbGVldFwiLFwibGF0aXR1ZGVcIjo1My4xMDUxNDg4NyxcImxvbmdpdHVkZVwiOjAuMjM0NzM2MzE5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiV0ZMXCJ9LHtcIm5hbWVcIjpcIldlbGxpbmdib3JvdWdoXCIsXCJsYXRpdHVkZVwiOjUyLjMwMzc5Mjg0LFwibG9uZ2l0dWRlXCI6LTAuNjc2NjQzMjE2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiV0VMXCJ9LHtcIm5hbWVcIjpcIldoYXRzdGFuZHdlbGxcIixcImxhdGl0dWRlXCI6NTMuMDgzMTE1MDIsXCJsb25naXR1ZGVcIjotMS41MDQzMDkyNDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJXVFNcIn0se1wibmFtZVwiOlwiV2hpdHdlbGwgKERlcmJ5c2hpcmUpXCIsXCJsYXRpdHVkZVwiOjUzLjI4MDM4MDU4LFwibG9uZ2l0dWRlXCI6LTEuMTk5Mzc2NDAxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFTVwiLFwiY3JzQ29kZVwiOlwiV1dMXCJ9LHtcIm5hbWVcIjpcIldpbGxpbmd0b25cIixcImxhdGl0dWRlXCI6NTIuODUzNjYzNTcsXCJsb25naXR1ZGVcIjotMS41NjMzNjAxOTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkVNXCIsXCJjcnNDb2RlXCI6XCJXSUxcIn0se1wibmFtZVwiOlwiQXNoZm9yZCBJbnRlcm5hdGlvbmFsIChFdXJvc3RhcilcIixcImxhdGl0dWRlXCI6NTEuMTQwOSxcImxvbmdpdHVkZVwiOjAuODc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFU1wiLFwiY3JzQ29kZVwiOlwiQVNJXCJ9LHtcIm5hbWVcIjpcIkxvbmRvbiBTdCBQYW5jcmFzIChJbnRsKVwiLFwibGF0aXR1ZGVcIjo1MS41MzI0MixcImxvbmdpdHVkZVwiOi0wLjEyNjAzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJFU1wiLFwiY3JzQ29kZVwiOlwiU1BYXCJ9LHtcIm5hbWVcIjpcIkFsZXhhbmRyYSBQYWxhY2VcIixcImxhdGl0dWRlXCI6NTEuNTk4MjksXCJsb25naXR1ZGVcIjotMC4xMjAxNCxcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIkFBUFwifSx7XCJuYW1lXCI6XCJBcmxlc2V5XCIsXCJsYXRpdHVkZVwiOjUyLjAyNjA0LFwibG9uZ2l0dWRlXCI6LTAuMjY2MzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJBUkxcIn0se1wibmFtZVwiOlwiQXNod2VsbCAmIE1vcmRlblwiLFwibGF0aXR1ZGVcIjo1Mi4wMzA3OCxcImxvbmdpdHVkZVwiOi0wLjEwOTc4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiQVdNXCJ9LHtcIm5hbWVcIjpcIkJhbGRvY2tcIixcImxhdGl0dWRlXCI6NTEuOTkyODgsXCJsb25naXR1ZGVcIjotMC4xODc1NixcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIkJES1wifSx7XCJuYW1lXCI6XCJCYXlmb3JkXCIsXCJsYXRpdHVkZVwiOjUxLjc1NzcyLFwibG9uZ2l0dWRlXCI6LTAuMDk1NixcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIkJBWVwifSx7XCJuYW1lXCI6XCJCaWdnbGVzd2FkZVwiLFwibGF0aXR1ZGVcIjo1Mi4wODQ2OSxcImxvbmdpdHVkZVwiOi0wLjI2MTE4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiQklXXCJ9LHtcIm5hbWVcIjpcIkJvd2VzIFBhcmtcIixcImxhdGl0dWRlXCI6NTEuNjA3MjgsXCJsb25naXR1ZGVcIjotMC4xMTk3NyxcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIkJPUFwifSx7XCJuYW1lXCI6XCJCcm9va21hbnMgUGFya1wiLFwibGF0aXR1ZGVcIjo1MS43MjEwNixcImxvbmdpdHVkZVwiOi0wLjIwNDU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiQlBLXCJ9LHtcIm5hbWVcIjpcIkNyZXdzIEhpbGxcIixcImxhdGl0dWRlXCI6NTEuNjg0NDksXCJsb25naXR1ZGVcIjotMC4xMDY4OCxcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIkNXSFwifSx7XCJuYW1lXCI6XCJDdWZmbGV5XCIsXCJsYXRpdHVkZVwiOjUxLjcwODcyLFwibG9uZ2l0dWRlXCI6LTAuMTA5NzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJDVUZcIn0se1wibmFtZVwiOlwiRG93bmhhbSBNYXJrZXRcIixcImxhdGl0dWRlXCI6NTIuNjA0MTMsXCJsb25naXR1ZGVcIjowLjM2NTY5MSxcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIkRPV1wifSx7XCJuYW1lXCI6XCJEcmF5dG9uIFBhcmtcIixcImxhdGl0dWRlXCI6NTEuNTUzMDksXCJsb25naXR1ZGVcIjotMC4xMDU3MSxcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIkRZUFwifSx7XCJuYW1lXCI6XCJFbmZpZWxkIENoYXNlXCIsXCJsYXRpdHVkZVwiOjUxLjY1Mjc2LFwibG9uZ2l0dWRlXCI6LTAuMDkwNzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJFTkNcIn0se1wibmFtZVwiOlwiRXNzZXggUm9hZFwiLFwibGF0aXR1ZGVcIjo1MS41NDA3MSxcImxvbmdpdHVkZVwiOi0wLjA5NjI3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiRVhSXCJ9LHtcIm5hbWVcIjpcIkZpbnNidXJ5IFBhcmtcIixcImxhdGl0dWRlXCI6NTEuNTY0NzgsXCJsb25naXR1ZGVcIjotMC4xMDU2NSxcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIkZQS1wifSx7XCJuYW1lXCI6XCJGb3h0b25cIixcImxhdGl0dWRlXCI6NTIuMTE5MTMsXCJsb25naXR1ZGVcIjowLjA1NjUzNixcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIkZYTlwifSx7XCJuYW1lXCI6XCJHb3Jkb24gSGlsbFwiLFwibGF0aXR1ZGVcIjo1MS42NjM1MixcImxvbmdpdHVkZVwiOi0wLjA5NDMxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiR0RIXCJ9LHtcIm5hbWVcIjpcIkdyYW5nZSBQYXJrXCIsXCJsYXRpdHVkZVwiOjUxLjY0MjYyLFwibG9uZ2l0dWRlXCI6LTAuMDk3MzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJHUEtcIn0se1wibmFtZVwiOlwiSGFkbGV5IFdvb2RcIixcImxhdGl0dWRlXCI6NTEuNjY4NDEsXCJsb25naXR1ZGVcIjotMC4xNzY1MyxcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIkhEV1wifSx7XCJuYW1lXCI6XCJIYXJyaW5nYXlcIixcImxhdGl0dWRlXCI6NTEuNTc3MzcsXCJsb25naXR1ZGVcIjotMC4xMDUxMyxcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIkhHWVwifSx7XCJuYW1lXCI6XCJIYXRmaWVsZCAoSGVydHMpXCIsXCJsYXRpdHVkZVwiOjUxLjc2Mzg4LFwibG9uZ2l0dWRlXCI6LTAuMjE1NTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJIQVRcIn0se1wibmFtZVwiOlwiSGVydGZvcmQgTm9ydGhcIixcImxhdGl0dWRlXCI6NTEuNzk4ODYsXCJsb25naXR1ZGVcIjotMC4wOTE3OCxcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIkhGTlwifSx7XCJuYW1lXCI6XCJIaXRjaGluXCIsXCJsYXRpdHVkZVwiOjUxLjk1MzI5LFwibG9uZ2l0dWRlXCI6LTAuMjYzNDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJISVRcIn0se1wibmFtZVwiOlwiSG9ybnNleVwiLFwibGF0aXR1ZGVcIjo1MS41ODY0NyxcImxvbmdpdHVkZVwiOi0wLjExMTk3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiSFJOXCJ9LHtcIm5hbWVcIjpcIkh1bnRpbmdkb25cIixcImxhdGl0dWRlXCI6NTIuMzI4NjYsXCJsb25naXR1ZGVcIjotMC4xOTIwNixcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIkhVTlwifSx7XCJuYW1lXCI6XCJLaW5ncyBMeW5uXCIsXCJsYXRpdHVkZVwiOjUyLjc1MzgxLFwibG9uZ2l0dWRlXCI6MC40MDM1MjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJLTE5cIn0se1wibmFtZVwiOlwiS25lYndvcnRoXCIsXCJsYXRpdHVkZVwiOjUxLjg2Njg2LFwibG9uZ2l0dWRlXCI6LTAuMTg3MjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJLQldcIn0se1wibmFtZVwiOlwiTGV0Y2h3b3J0aCBHYXJkZW4gQ2l0eVwiLFwibGF0aXR1ZGVcIjo1MS45Nzk5NyxcImxvbmdpdHVkZVwiOi0wLjIyOTI2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiTEVUXCJ9LHtcIm5hbWVcIjpcIkxpdHRsZXBvcnRcIixcImxhdGl0dWRlXCI6NTIuNDYyNCxcImxvbmdpdHVkZVwiOjAuMzE2NTY3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiTFRQXCJ9LHtcIm5hbWVcIjpcIk1lbGRyZXRoXCIsXCJsYXRpdHVkZVwiOjUyLjA5MDczLFwibG9uZ2l0dWRlXCI6MC4wMDg5NTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJNRUxcIn0se1wibmFtZVwiOlwiTmV3IEJhcm5ldFwiLFwibGF0aXR1ZGVcIjo1MS42NDg1NyxcImxvbmdpdHVkZVwiOi0wLjE3Mjk5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiTkJBXCJ9LHtcIm5hbWVcIjpcIk5ldyBTb3V0aGdhdGVcIixcImxhdGl0dWRlXCI6NTEuNjE0MTIsXCJsb25naXR1ZGVcIjotMC4xNDMwMyxcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIk5TR1wifSx7XCJuYW1lXCI6XCJPYWtsZWlnaCBQYXJrXCIsXCJsYXRpdHVkZVwiOjUxLjYzNzY5LFwibG9uZ2l0dWRlXCI6LTAuMTY2MjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJPS0xcIn0se1wibmFtZVwiOlwiUGFsbWVycyBHcmVlblwiLFwibGF0aXR1ZGVcIjo1MS42MTg4MixcImxvbmdpdHVkZVwiOi0wLjExMDM0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiUEFMXCJ9LHtcIm5hbWVcIjpcIlBvdHRlcnMgQmFyXCIsXCJsYXRpdHVkZVwiOjUxLjY5NzI5LFwibG9uZ2l0dWRlXCI6LTAuMTkyMzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJQQlJcIn0se1wibmFtZVwiOlwiUm95c3RvblwiLFwibGF0aXR1ZGVcIjo1Mi4wNTMwOSxcImxvbmdpdHVkZVwiOi0wLjAyNjkxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiUllTXCJ9LHtcIm5hbWVcIjpcIlNhbmR5XCIsXCJsYXRpdHVkZVwiOjUyLjEyNDc1LFwibG9uZ2l0dWRlXCI6LTAuMjgxMTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJTRFlcIn0se1wibmFtZVwiOlwiU2hlcHJldGhcIixcImxhdGl0dWRlXCI6NTIuMTE0MTcsXCJsb25naXR1ZGVcIjowLjAzMTMzMixcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIlNUSFwifSx7XCJuYW1lXCI6XCJTdCBOZW90c1wiLFwibGF0aXR1ZGVcIjo1Mi4yMzE1OCxcImxvbmdpdHVkZVwiOi0wLjI0NzQxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiU05PXCJ9LHtcIm5hbWVcIjpcIlN0ZXZlbmFnZVwiLFwibGF0aXR1ZGVcIjo1MS45MDE2OSxcImxvbmdpdHVkZVwiOi0wLjIwNzExLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiU1ZHXCJ9LHtcIm5hbWVcIjpcIldhdGVyYmVhY2hcIixcImxhdGl0dWRlXCI6NTIuMjYyNDUsXCJsb25naXR1ZGVcIjowLjE5NzM4NixcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIldCQ1wifSx7XCJuYW1lXCI6XCJXYXRsaW5ndG9uXCIsXCJsYXRpdHVkZVwiOjUyLjY3MzE5LFwibG9uZ2l0dWRlXCI6MC4zODMzMjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJXVEdcIn0se1wibmFtZVwiOlwiV2F0dG9uLWF0LVN0b25lXCIsXCJsYXRpdHVkZVwiOjUxLjg1NjM2LFwibG9uZ2l0dWRlXCI6LTAuMTE5NzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJXQVNcIn0se1wibmFtZVwiOlwiV2VsaGFtIEdyZWVuXCIsXCJsYXRpdHVkZVwiOjUxLjczNjM1LFwibG9uZ2l0dWRlXCI6LTAuMjEwNjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJXTUdcIn0se1wibmFtZVwiOlwiV2Vsd3luIEdhcmRlbiBDaXR5XCIsXCJsYXRpdHVkZVwiOjUxLjgwMTA1LFwibG9uZ2l0dWRlXCI6LTAuMjA0MDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdOXCIsXCJjcnNDb2RlXCI6XCJXR0NcIn0se1wibmFtZVwiOlwiV2Vsd3luIE5vcnRoXCIsXCJsYXRpdHVkZVwiOjUxLjgyMzUsXCJsb25naXR1ZGVcIjotMC4xOTIwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiR05cIixcImNyc0NvZGVcIjpcIldMV1wifSx7XCJuYW1lXCI6XCJXaW5jaG1vcmUgSGlsbFwiLFwibGF0aXR1ZGVcIjo1MS42MzM5NSxcImxvbmdpdHVkZVwiOi0wLjEwMDg5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHTlwiLFwiY3JzQ29kZVwiOlwiV0lIXCJ9LHtcIm5hbWVcIjpcIkJlcndpY2stdXBvbi1Ud2VlZFwiLFwibGF0aXR1ZGVcIjo1NS43NzQ4MjY5MixcImxvbmdpdHVkZVwiOi0yLjAxMTEyNzA0OCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1JcIixcImNyc0NvZGVcIjpcIkJXS1wifSx7XCJuYW1lXCI6XCJEYXJsaW5ndG9uXCIsXCJsYXRpdHVkZVwiOjU0LjUyMDQ1MTM2LFwibG9uZ2l0dWRlXCI6LTEuNTQ3MzI4NDc5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHUlwiLFwiY3JzQ29kZVwiOlwiREFSXCJ9LHtcIm5hbWVcIjpcIkRvbmNhc3RlclwiLFwibGF0aXR1ZGVcIjo1My41MjE0OTcxLFwibG9uZ2l0dWRlXCI6LTEuMTQwMjM0NDc5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHUlwiLFwiY3JzQ29kZVwiOlwiRE9OXCJ9LHtcIm5hbWVcIjpcIkR1cmhhbVwiLFwibGF0aXR1ZGVcIjo1NC43NzkzOTIyNyxcImxvbmdpdHVkZVwiOi0xLjU4MTc1NjAxNyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1JcIixcImNyc0NvZGVcIjpcIkRITVwifSx7XCJuYW1lXCI6XCJHcmFudGhhbVwiLFwibGF0aXR1ZGVcIjo1Mi45MDY0OTA3OCxcImxvbmdpdHVkZVwiOi0wLjY0MjQ1Mjg3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1JcIixcImNyc0NvZGVcIjpcIkdSQVwifSx7XCJuYW1lXCI6XCJOZXdhcmsgTm9ydGggR2F0ZVwiLFwibGF0aXR1ZGVcIjo1My4wODE5MTAwOCxcImxvbmdpdHVkZVwiOi0wLjgwMDExMDg0NixcInN0YXRpb25PcGVyYXRvclwiOlwiR1JcIixcImNyc0NvZGVcIjpcIk5OR1wifSx7XCJuYW1lXCI6XCJOZXdjYXN0bGVcIixcImxhdGl0dWRlXCI6NTQuOTY4MjIwNTYsXCJsb25naXR1ZGVcIjotMS42MTcyODU0OTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdSXCIsXCJjcnNDb2RlXCI6XCJOQ0xcIn0se1wibmFtZVwiOlwiUGV0ZXJib3JvdWdoXCIsXCJsYXRpdHVkZVwiOjUyLjU3NDk5MjM2LFwibG9uZ2l0dWRlXCI6LTAuMjQ5ODMwMDYxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHUlwiLFwiY3JzQ29kZVwiOlwiUEJPXCJ9LHtcIm5hbWVcIjpcIlJldGZvcmRcIixcImxhdGl0dWRlXCI6NTMuMzE1MTc1NTYsXCJsb25naXR1ZGVcIjotMC45NDc4NzgxNDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdSXCIsXCJjcnNDb2RlXCI6XCJSRVRcIn0se1wibmFtZVwiOlwiV2FrZWZpZWxkIFdlc3RnYXRlXCIsXCJsYXRpdHVkZVwiOjUzLjY4MTc0Njc5LFwibG9uZ2l0dWRlXCI6LTEuNTA1NDA3NjYyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHUlwiLFwiY3JzQ29kZVwiOlwiV0tGXCJ9LHtcIm5hbWVcIjpcIllvcmtcIixcImxhdGl0dWRlXCI6NTMuOTU3OTc5MjQsXCJsb25naXR1ZGVcIjotMS4wOTMxNzY5MTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdSXCIsXCJjcnNDb2RlXCI6XCJZUktcIn0se1wibmFtZVwiOlwiQWN0b24gTWFpbiBMaW5lXCIsXCJsYXRpdHVkZVwiOjUxLjUxNjkyODMyLFwibG9uZ2l0dWRlXCI6LTAuMjY3NjMwNDg1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQU1MXCJ9LHtcIm5hbWVcIjpcIkFsZGVybWFzdG9uXCIsXCJsYXRpdHVkZVwiOjUxLjQwMjAxMTEyLFwibG9uZ2l0dWRlXCI6LTEuMTM4NzcwMjk2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQU1UXCJ9LHtcIm5hbWVcIjpcIkFwcGxlZm9yZFwiLFwibGF0aXR1ZGVcIjo1MS42Mzk2NDI3MixcImxvbmdpdHVkZVwiOi0xLjI0MjEzOTA3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkFQRlwifSx7XCJuYW1lXCI6XCJBc2NvdHQtdW5kZXItV3ljaHdvb2RcIixcImxhdGl0dWRlXCI6NTEuODY3MzQwNDgsXCJsb25naXR1ZGVcIjotMS41NjQwNTgxMzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJBVVdcIn0se1wibmFtZVwiOlwiQXNoY2h1cmNoIGZvciBUZXdrZXNidXJ5XCIsXCJsYXRpdHVkZVwiOjUxLjk5OTE2OTEyLFwibG9uZ2l0dWRlXCI6LTIuMTA5MDU3NDQ0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQVNDXCJ9LHtcIm5hbWVcIjpcIkF2b25jbGlmZlwiLFwibGF0aXR1ZGVcIjo1MS4zMzk2NDYxNCxcImxvbmdpdHVkZVwiOi0yLjI4MTMzOTM5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkFWRlwifSx7XCJuYW1lXCI6XCJBdm9ubW91dGhcIixcImxhdGl0dWRlXCI6NTEuNTAwMTI2NDYsXCJsb25naXR1ZGVcIjotMi42OTg0MjEzNzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJBVk5cIn0se1wibmFtZVwiOlwiQmFybnN0YXBsZVwiLFwibGF0aXR1ZGVcIjo1MS4wNzM5NjExMSxcImxvbmdpdHVkZVwiOi00LjA2MzE1MzQxNixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkJOUFwifSx7XCJuYW1lXCI6XCJCYXRoIFNwYVwiLFwibGF0aXR1ZGVcIjo1MS4zNzc2ODI3NixcImxvbmdpdHVkZVwiOi0yLjM1NzAzNDE3OCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkJUSFwifSx7XCJuYW1lXCI6XCJCZWRtaW5zdGVyXCIsXCJsYXRpdHVkZVwiOjUxLjQ0MDA4Njc0LFwibG9uZ2l0dWRlXCI6LTIuNTk0MTU2OTAxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQk1UXCJ9LHtcIm5hbWVcIjpcIkJlZHd5blwiLFwibGF0aXR1ZGVcIjo1MS4zNzk2MzQ5OCxcImxvbmdpdHVkZVwiOi0xLjU5ODc5NTI3OSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkJEV1wifSx7XCJuYW1lXCI6XCJCZXJlIEFsc3RvblwiLFwibGF0aXR1ZGVcIjo1MC40ODU1ODY4LFwibG9uZ2l0dWRlXCI6LTQuMjAwMzk4MjcxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQkFTXCJ9LHtcIm5hbWVcIjpcIkJlcmUgRmVycmVyc1wiLFwibGF0aXR1ZGVcIjo1MC40NTA4NTY3OCxcImxvbmdpdHVkZVwiOi00LjE4MTg4MTI5OSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkJGRVwifSx7XCJuYW1lXCI6XCJCZXRjaHdvcnRoXCIsXCJsYXRpdHVkZVwiOjUxLjI0ODE4NjY0LFwibG9uZ2l0dWRlXCI6LTAuMjY2OTc0MTQ3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQlRPXCJ9LHtcIm5hbWVcIjpcIkJsYWNrd2F0ZXJcIixcImxhdGl0dWRlXCI6NTEuMzMxODEwMTQsXCJsb25naXR1ZGVcIjotMC43NzcwMjI2MTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJCQVdcIn0se1wibmFtZVwiOlwiQm9kbWluIFBhcmt3YXlcIixcImxhdGl0dWRlXCI6NTAuNDQ1ODU1ODgsXCJsb25naXR1ZGVcIjotNC42NjI5NzExMDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJCT0RcIn0se1wibmFtZVwiOlwiQm91cm5lIEVuZFwiLFwibGF0aXR1ZGVcIjo1MS41NzcxMTY1MSxcImxvbmdpdHVkZVwiOi0wLjcxMDQ3MTAxNyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkJORVwifSx7XCJuYW1lXCI6XCJCcmFkZm9yZC1vbi1Bdm9uXCIsXCJsYXRpdHVkZVwiOjUxLjM0NDkwOTU2LFwibG9uZ2l0dWRlXCI6LTIuMjUyMzM5OTE4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQk9BXCJ9LHtcIm5hbWVcIjpcIkJyYW1sZXkgKEhhbnRzKVwiLFwibGF0aXR1ZGVcIjo1MS4zMzAwNzg2NixcImxvbmdpdHVkZVwiOi0xLjA2MDk4NzAxMixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkJNWVwifSx7XCJuYW1lXCI6XCJCcmlkZ3dhdGVyXCIsXCJsYXRpdHVkZVwiOjUxLjEyODA3MzE4LFwibG9uZ2l0dWRlXCI6LTIuOTkwMjg4MDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJCV1RcIn0se1wibmFtZVwiOlwiQnJpc3RvbCBQYXJrd2F5XCIsXCJsYXRpdHVkZVwiOjUxLjUxMzgzNTc0LFwibG9uZ2l0dWRlXCI6LTIuNTQyNjU5NTI3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQlBXXCJ9LHtcIm5hbWVcIjpcIkJydXRvblwiLFwibGF0aXR1ZGVcIjo1MS4xMTE2MjgxOCxcImxvbmdpdHVkZVwiOi0yLjQ0NzA3OTEzNCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkJSVVwifSx7XCJuYW1lXCI6XCJCdWdsZVwiLFwibGF0aXR1ZGVcIjo1MC4zOTk5NDMyOCxcImxvbmdpdHVkZVwiOi00Ljc5MTg0MTg5NixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkJHTFwifSx7XCJuYW1lXCI6XCJCdXJuaGFtIChCdWNrcylcIixcImxhdGl0dWRlXCI6NTEuNTIzNTAyNDYsXCJsb25naXR1ZGVcIjotMC42NDYzNjk4MjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJCTk1cIn0se1wibmFtZVwiOlwiQ2Fsc3RvY2tcIixcImxhdGl0dWRlXCI6NTAuNDk3NTcxOTMsXCJsb25naXR1ZGVcIjotNC4yMDg3MTEwNzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJDU0tcIn0se1wibmFtZVwiOlwiQ2FtICYgRHVyc2xleVwiLFwibGF0aXR1ZGVcIjo1MS43MTc2MTYwOCxcImxvbmdpdHVkZVwiOi0yLjM1OTA5NjgzOCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkNEVVwifSx7XCJuYW1lXCI6XCJDYW1ib3JuZVwiLFwibGF0aXR1ZGVcIjo1MC4yMTA0MjM2OSxcImxvbmdpdHVkZVwiOi01LjI5NzQ3MjA4MyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkNCTlwifSx7XCJuYW1lXCI6XCJDYXJiaXMgQmF5XCIsXCJsYXRpdHVkZVwiOjUwLjE5NzE1MDYzLFwibG9uZ2l0dWRlXCI6LTUuNDY0MDM3OTg4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQ0JCXCJ9LHtcIm5hbWVcIjpcIkNhc3RsZSBCYXIgUGFya1wiLFwibGF0aXR1ZGVcIjo1MS41MjI5Nzg3NCxcImxvbmdpdHVkZVwiOi0wLjMzMTQwNDUwMixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkNCUFwifSx7XCJuYW1lXCI6XCJDYXN0bGUgQ2FyeVwiLFwibGF0aXR1ZGVcIjo1MS4wOTk4MDM4NyxcImxvbmdpdHVkZVwiOi0yLjUyMjgwMjE2NixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkNMQ1wifSx7XCJuYW1lXCI6XCJDYXVzZWxhbmRcIixcImxhdGl0dWRlXCI6NTAuNDA1NjgxOTcsXCJsb25naXR1ZGVcIjotNC40NjY0ODUzMDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJDQVVcIn0se1wibmFtZVwiOlwiQ2hhcGVsdG9uIChEZXZvbilcIixcImxhdGl0dWRlXCI6NTEuMDE1ODIxMzEsXCJsb25naXR1ZGVcIjotNC4wMjQzNzA1MyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkNQTlwifSx7XCJuYW1lXCI6XCJDaGFybGJ1cnlcIixcImxhdGl0dWRlXCI6NTEuODcyNDM2MixcImxvbmdpdHVkZVwiOi0xLjQ4OTY5NzA0NCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkNCWVwifSx7XCJuYW1lXCI6XCJDaGVsdGVuaGFtIFNwYVwiLFwibGF0aXR1ZGVcIjo1MS44OTczOTksXCJsb25naXR1ZGVcIjotMi4wOTk2MjU4MjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJDTk1cIn0se1wibmFtZVwiOlwiQ2hldG5vbGVcIixcImxhdGl0dWRlXCI6NTAuODY2NDg0MDYsXCJsb25naXR1ZGVcIjotMi41NzQwNDYxODEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJDTk9cIn0se1wibmFtZVwiOlwiQ2hpbHdvcnRoXCIsXCJsYXRpdHVkZVwiOjUxLjIxNTIxMDA5LFwibG9uZ2l0dWRlXCI6LTAuNTI0ODE4MzU5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQ0hMXCJ9LHtcIm5hbWVcIjpcIkNoaXBwZW5oYW1cIixcImxhdGl0dWRlXCI6NTEuNDYyNDg2MzgsXCJsb25naXR1ZGVcIjotMi4xMTU0MDI2ODIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJDUE1cIn0se1wibmFtZVwiOlwiQ2hvbHNleVwiLFwibGF0aXR1ZGVcIjo1MS41NzAyMDE2NixcImxvbmdpdHVkZVwiOi0xLjE1ODAxODYxMixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkNIT1wifSx7XCJuYW1lXCI6XCJDbGlmdG9uIERvd25cIixcImxhdGl0dWRlXCI6NTEuNDY0NTQ0MTcsXCJsb25naXR1ZGVcIjotMi42MTE3NDkxNTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJDRk5cIn0se1wibmFtZVwiOlwiQ29tYmUgKE94b24pXCIsXCJsYXRpdHVkZVwiOjUxLjgzMjM0Mjk2LFwibG9uZ2l0dWRlXCI6LTEuMzkyOTAxOTM1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQ01FXCJ9LHtcIm5hbWVcIjpcIkNvb2toYW1cIixcImxhdGl0dWRlXCI6NTEuNTU3NDYwOCxcImxvbmdpdHVkZVwiOi0wLjcyMjA3Njk4NixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkNPT1wifSx7XCJuYW1lXCI6XCJDb29tYmUgSnVuY3Rpb24gSGFsdFwiLFwibGF0aXR1ZGVcIjo1MC40NDU0NzA3MyxcImxvbmdpdHVkZVwiOi00LjQ4MTkzNjI2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQ09FXCJ9LHtcIm5hbWVcIjpcIkNvcHBsZXN0b25lXCIsXCJsYXRpdHVkZVwiOjUwLjgxNDQ1OTE5LFwibG9uZ2l0dWRlXCI6LTMuNzUxNjAxMTU4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQ09QXCJ9LHtcIm5hbWVcIjpcIkNyZWRpdG9uXCIsXCJsYXRpdHVkZVwiOjUwLjc4MzQyODA5LFwibG9uZ2l0dWRlXCI6LTMuNjQ2ODc5ODg1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQ0RJXCJ9LHtcIm5hbWVcIjpcIkNyb3d0aG9ybmVcIixcImxhdGl0dWRlXCI6NTEuMzY2NzI5NDQsXCJsb25naXR1ZGVcIjotMC44MTkyNzQ5NTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJDUk5cIn0se1wibmFtZVwiOlwiQ3VsaGFtXCIsXCJsYXRpdHVkZVwiOjUxLjY1Mzc5NTEyLFwibG9uZ2l0dWRlXCI6LTEuMjM2NTExMTM0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiQ1VNXCJ9LHtcIm5hbWVcIjpcIkRhd2xpc2hcIixcImxhdGl0dWRlXCI6NTAuNTgwODA1OTQsXCJsb25naXR1ZGVcIjotMy40NjQ2NDc4MTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJEV0xcIn0se1wibmFtZVwiOlwiRGF3bGlzaCBXYXJyZW5cIixcImxhdGl0dWRlXCI6NTAuNTk5MDUwOTEsXCJsb25naXR1ZGVcIjotMy40NDQwMTgxNzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJEV1dcIn0se1wibmFtZVwiOlwiRGVhbiAoV2lsdHMpXCIsXCJsYXRpdHVkZVwiOjUxLjA0MjIzMDQsXCJsb25naXR1ZGVcIjotMS42MzQ4MDk0NzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJERU5cIn0se1wibmFtZVwiOlwiRGV2b25wb3J0IChEZXZvbilcIixcImxhdGl0dWRlXCI6NTAuMzc4MTk0NSxcImxvbmdpdHVkZVwiOi00LjE3MTUxMTg5MyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkRQVFwifSx7XCJuYW1lXCI6XCJEZXZvbnBvcnQgRG9ja3lhcmRcIixcImxhdGl0dWRlXCI6NTAuMzgyMjQ5NjgsXCJsb25naXR1ZGVcIjotNC4xNzU5MTcyNjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJET0NcIn0se1wibmFtZVwiOlwiRGlkY290IFBhcmt3YXlcIixcImxhdGl0dWRlXCI6NTEuNjEwOTU1MDQsXCJsb25naXR1ZGVcIjotMS4yNDI4OTEyOTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJESURcIn0se1wibmFtZVwiOlwiRGlnYnkgJiBTb3d0b25cIixcImxhdGl0dWRlXCI6NTAuNzEzNzA0OTksXCJsb25naXR1ZGVcIjotMy40NzM4ODU2OTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJESUdcIn0se1wibmFtZVwiOlwiRGlsdG9uIE1hcnNoXCIsXCJsYXRpdHVkZVwiOjUxLjI0Nzk5MTUyLFwibG9uZ2l0dWRlXCI6LTIuMjA3NDIxOTI0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiRE1IXCJ9LHtcIm5hbWVcIjpcIkRvcmNoZXN0ZXIgV2VzdFwiLFwibGF0aXR1ZGVcIjo1MC43MTA5NDA0NyxcImxvbmdpdHVkZVwiOi0yLjQ0MjU0ODc3MyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkRDV1wifSx7XCJuYW1lXCI6XCJEb3JraW5nIERlZXBkZW5lXCIsXCJsYXRpdHVkZVwiOjUxLjIzODgwMTI5LFwibG9uZ2l0dWRlXCI6LTAuMzI0NjMxNjY4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiRFBEXCJ9LHtcIm5hbWVcIjpcIkRvcmtpbmcgV2VzdFwiLFwibGF0aXR1ZGVcIjo1MS4yMzYyMjMwNCxcImxvbmdpdHVkZVwiOi0wLjMzOTk2NzQ4OCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkRLVFwifSx7XCJuYW1lXCI6XCJEcmF5dG9uIEdyZWVuXCIsXCJsYXRpdHVkZVwiOjUxLjUxNjAyOTM4LFwibG9uZ2l0dWRlXCI6LTAuMzI5NjQwNjgxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiRFJHXCJ9LHtcIm5hbWVcIjpcIkVhbGluZyBCcm9hZHdheVwiLFwibGF0aXR1ZGVcIjo1MS41MTQ4NDY1MSxcImxvbmdpdHVkZVwiOi0wLjMwMTc1MjI1OSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkVBTFwifSx7XCJuYW1lXCI6XCJFZ2dlc2ZvcmRcIixcImxhdGl0dWRlXCI6NTAuODg3NzMxNjYsXCJsb25naXR1ZGVcIjotMy44NzQ3Nzc2NTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJFR0dcIn0se1wibmFtZVwiOlwiRXZlc2hhbVwiLFwibGF0aXR1ZGVcIjo1Mi4wOTg0MDQxNCxcImxvbmdpdHVkZVwiOi0xLjk0NzMxMzg2OCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkVWRVwifSx7XCJuYW1lXCI6XCJFeGV0ZXIgQ2VudHJhbFwiLFwibGF0aXR1ZGVcIjo1MC43MjY1MjM1MSxcImxvbmdpdHVkZVwiOi0zLjUzMjk0NzYwMixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkVYQ1wifSx7XCJuYW1lXCI6XCJFeGV0ZXIgU3QgRGF2aWQnc1wiLFwibGF0aXR1ZGVcIjo1MC43MjkxNTIxNixcImxvbmdpdHVkZVwiOi0zLjU0MzY2MDc4OSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkVYRFwifSx7XCJuYW1lXCI6XCJFeGV0ZXIgU3QgVGhvbWFzXCIsXCJsYXRpdHVkZVwiOjUwLjcxNjU1ODAzLFwibG9uZ2l0dWRlXCI6LTMuNTM5ODE4NzgzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiRVhUXCJ9LHtcIm5hbWVcIjpcIkV4bW91dGhcIixcImxhdGl0dWRlXCI6NTAuNjIxNjIxNCxcImxvbmdpdHVkZVwiOi0zLjQxNDk5MjY3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiRVhNXCJ9LHtcIm5hbWVcIjpcIkV4dG9uXCIsXCJsYXRpdHVkZVwiOjUwLjY2ODI5MTUxLFwibG9uZ2l0dWRlXCI6LTMuNDQ0MTE3ODExLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiRVhOXCJ9LHtcIm5hbWVcIjpcIkZhbG1vdXRoIERvY2tzXCIsXCJsYXRpdHVkZVwiOjUwLjE1MDY5MzE3LFwibG9uZ2l0dWRlXCI6LTUuMDU2MDgyOTI1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiRkFMXCJ9LHtcIm5hbWVcIjpcIkZhbG1vdXRoIFRvd25cIixcImxhdGl0dWRlXCI6NTAuMTQ4MzYzNjgsXCJsb25naXR1ZGVcIjotNS4wNjUyNzIzODIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJGTVRcIn0se1wibmFtZVwiOlwiRmFybmJvcm91Z2ggTm9ydGhcIixcImxhdGl0dWRlXCI6NTEuMzAyMDQ0ODQsXCJsb25naXR1ZGVcIjotMC43NDMwMjY3MjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJGTk5cIn0se1wibmFtZVwiOlwiRmlsdG9uIEFiYmV5IFdvb2RcIixcImxhdGl0dWRlXCI6NTEuNTA0OTM5NjIsXCJsb25naXR1ZGVcIjotMi41NjI0MzcyNTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJGSVRcIn0se1wibmFtZVwiOlwiRmluc3RvY2tcIixcImxhdGl0dWRlXCI6NTEuODUyNzkwMjEsXCJsb25naXR1ZGVcIjotMS40NjkzNDU3NTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJGSU5cIn0se1wibmFtZVwiOlwiRnJlc2hmb3JkXCIsXCJsYXRpdHVkZVwiOjUxLjM0MjAyNTA1LFwibG9uZ2l0dWRlXCI6LTIuMzAxMDIzMDc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiRkZEXCJ9LHtcIm5hbWVcIjpcIkZyb21lXCIsXCJsYXRpdHVkZVwiOjUxLjIyNzI2MjY4LFwibG9uZ2l0dWRlXCI6LTIuMzEwMDEyMjcxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiRlJPXCJ9LHtcIm5hbWVcIjpcIkZ1cnplIFBsYXR0XCIsXCJsYXRpdHVkZVwiOjUxLjUzMzAxNzY3LFwibG9uZ2l0dWRlXCI6LTAuNzI4NDcxMDY5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiRlpQXCJ9LHtcIm5hbWVcIjpcIkdsb3VjZXN0ZXJcIixcImxhdGl0dWRlXCI6NTEuODY1NDE1NDgsXCJsb25naXR1ZGVcIjotMi4yMzg2NTY1NjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJHQ1JcIn0se1wibmFtZVwiOlwiR29tc2hhbGxcIixcImxhdGl0dWRlXCI6NTEuMjE5NDcwMTQsXCJsb25naXR1ZGVcIjotMC40NDIwNTYzNDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJHT01cIn0se1wibmFtZVwiOlwiR29yaW5nICYgU3RyZWF0bGV5XCIsXCJsYXRpdHVkZVwiOjUxLjUyMTQ5MDY1LFwibG9uZ2l0dWRlXCI6LTEuMTMzMDQ0NjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJHT1JcIn0se1wibmFtZVwiOlwiR3VubmlzbGFrZVwiLFwibGF0aXR1ZGVcIjo1MC41MTYwNjcyNSxcImxvbmdpdHVkZVwiOi00LjIxOTQ0OTMyMyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkdTTFwifSx7XCJuYW1lXCI6XCJIYW5ib3JvdWdoXCIsXCJsYXRpdHVkZVwiOjUxLjgyNTE2NTE3LFwibG9uZ2l0dWRlXCI6LTEuMzczNTI1Njc5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiSE5EXCJ9LHtcIm5hbWVcIjpcIkhhbndlbGxcIixcImxhdGl0dWRlXCI6NTEuNTExOTMxOTIsXCJsb25naXR1ZGVcIjotMC4zMzg3MjU4MjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJIQU5cIn0se1wibmFtZVwiOlwiSGF5ZXMgJiBIYXJsaW5ndG9uXCIsXCJsYXRpdHVkZVwiOjUxLjUwMzEwMDQyLFwibG9uZ2l0dWRlXCI6LTAuNDIwNjczMDY0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiSEFZXCJ9LHtcIm5hbWVcIjpcIkhheWxlXCIsXCJsYXRpdHVkZVwiOjUwLjE4NjIzNTMxLFwibG9uZ2l0dWRlXCI6LTUuNDE5NTI5NjM0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiSFlMXCJ9LHtcIm5hbWVcIjpcIkhlbmxleS1vbi1UaGFtZXNcIixcImxhdGl0dWRlXCI6NTEuNTM0MTc3OTMsXCJsb25naXR1ZGVcIjotMC45MDAyMTUyODcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJIT1RcIn0se1wibmFtZVwiOlwiSGV5Zm9yZFwiLFwibGF0aXR1ZGVcIjo1MS45MTkxOTk4NSxcImxvbmdpdHVkZVwiOi0xLjI5OTI2NzU2OCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkhZRFwifSx7XCJuYW1lXCI6XCJIaWdoYnJpZGdlICYgQnVybmhhbVwiLFwibGF0aXR1ZGVcIjo1MS4yMTgxNTAxNixcImxvbmdpdHVkZVwiOi0yLjk3MjE3MzEzOCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkhJR1wifSx7XCJuYW1lXCI6XCJIb25leWJvdXJuZVwiLFwibGF0aXR1ZGVcIjo1Mi4xMDE0MjkyMyxcImxvbmdpdHVkZVwiOi0xLjgzNDk4MTQ4NyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkhZQlwifSx7XCJuYW1lXCI6XCJIdW5nZXJmb3JkXCIsXCJsYXRpdHVkZVwiOjUxLjQxNDkwNjAyLFwibG9uZ2l0dWRlXCI6LTEuNTEyMjkzNTM1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiSEdEXCJ9LHtcIm5hbWVcIjpcIkl2ZXJcIixcImxhdGl0dWRlXCI6NTEuNTA4NTA3OTksXCJsb25naXR1ZGVcIjotMC41MDY3MTc5MjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJJVlJcIn0se1wibmFtZVwiOlwiSXZ5YnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUwLjM5MzU3ODU0LFwibG9uZ2l0dWRlXCI6LTMuOTA0NDU4MjE0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiSVZZXCJ9LHtcIm5hbWVcIjpcIktlbWJsZVwiLFwibGF0aXR1ZGVcIjo1MS42NzYyNzE0OCxcImxvbmdpdHVkZVwiOi0yLjAyMzA5NjQ4MyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIktFTVwifSx7XCJuYW1lXCI6XCJLZXloYW1cIixcImxhdGl0dWRlXCI6NTAuMzg5NzQ2MDYsXCJsb25naXR1ZGVcIjotNC4xNzkwNzQzNDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJLRVlcIn0se1wibmFtZVwiOlwiS2V5bnNoYW1cIixcImxhdGl0dWRlXCI6NTEuNDE3MTY5OTMsXCJsb25naXR1ZGVcIjotMi40OTQ2MzMyNTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJLWU5cIn0se1wibmFtZVwiOlwiS2luZ2hhbVwiLFwibGF0aXR1ZGVcIjo1MS45MDIyNTA0NSxcImxvbmdpdHVkZVwiOi0xLjYyODc5MzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJLR01cIn0se1wibmFtZVwiOlwiS2luZ3MgTnltcHRvblwiLFwibGF0aXR1ZGVcIjo1MC45MzU5Nzc3OSxcImxvbmdpdHVkZVwiOi0zLjkwNTYxMDg4NSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIktHTlwifSx7XCJuYW1lXCI6XCJLaW50YnVyeVwiLFwibGF0aXR1ZGVcIjo1MS40MDI1MTcyMyxcImxvbmdpdHVkZVwiOi0xLjQ0NTk5MzYyNyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIktJVFwifSx7XCJuYW1lXCI6XCJMYW5nbGV5IChCZXJrcylcIixcImxhdGl0dWRlXCI6NTEuNTA4MDY3NTQsXCJsb25naXR1ZGVcIjotMC41NDE3NDkwNTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJMTllcIn0se1wibmFtZVwiOlwiTGFwZm9yZFwiLFwibGF0aXR1ZGVcIjo1MC44NTc0MzM4MSxcImxvbmdpdHVkZVwiOi0zLjgxMTQ2ODE1OSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkxBUFwifSx7XCJuYW1lXCI6XCJMYXdyZW5jZSBIaWxsXCIsXCJsYXRpdHVkZVwiOjUxLjQ1ODIxODY5LFwibG9uZ2l0dWRlXCI6LTIuNTY0MTY1ODA2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiTFdIXCJ9LHtcIm5hbWVcIjpcIkxlbGFudFwiLFwibGF0aXR1ZGVcIjo1MC4xODQxMTEyNSxcImxvbmdpdHVkZVwiOi01LjQzNjYxMTkwMyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkxFTFwifSx7XCJuYW1lXCI6XCJMZWxhbnQgU2FsdGluZ3NcIixcImxhdGl0dWRlXCI6NTAuMTc5Mjg5NixcImxvbmdpdHVkZVwiOi01LjQ0MTQ0OTMwMixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkxUU1wifSx7XCJuYW1lXCI6XCJMaXNrZWFyZFwiLFwibGF0aXR1ZGVcIjo1MC40NDY4NDgzMixcImxvbmdpdHVkZVwiOi00LjQ2NzQ5ODkxNyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkxTS1wifSx7XCJuYW1lXCI6XCJMb29lXCIsXCJsYXRpdHVkZVwiOjUwLjM1OTIxNTcsXCJsb25naXR1ZGVcIjotNC40NTYyMDExMDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJMT09cIn0se1wibmFtZVwiOlwiTG9zdHdpdGhpZWxcIixcImxhdGl0dWRlXCI6NTAuNDA3NDk3MTcsXCJsb25naXR1ZGVcIjotNC42NjU0NjQxMzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJMT1NcIn0se1wibmFtZVwiOlwiTHV4dWx5YW5cIixcImxhdGl0dWRlXCI6NTAuMzkwMjk0OTEsXCJsb25naXR1ZGVcIjotNC43NDc1MTUwNyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkxVWFwifSx7XCJuYW1lXCI6XCJMeW1wc3RvbmUgQ29tbWFuZG9cIixcImxhdGl0dWRlXCI6NTAuNjYyMjI1MTksXCJsb25naXR1ZGVcIjotMy40NDA4NjEyNTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJMWUNcIn0se1wibmFtZVwiOlwiTHltcHN0b25lIFZpbGxhZ2VcIixcImxhdGl0dWRlXCI6NTAuNjQ4NjcxNjQsXCJsb25naXR1ZGVcIjotMy40MzEzOTM0NzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJMWU1cIn0se1wibmFtZVwiOlwiTWFpZGVuIE5ld3RvblwiLFwibGF0aXR1ZGVcIjo1MC43Nzk5OTUzNyxcImxvbmdpdHVkZVwiOi0yLjU2OTQ0MDU0MSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIk1ETlwifSx7XCJuYW1lXCI6XCJNYWlkZW5oZWFkXCIsXCJsYXRpdHVkZVwiOjUxLjUxODY2NTk1LFwibG9uZ2l0dWRlXCI6LTAuNzIyNjU4Njk4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiTUFJXCJ9LHtcIm5hbWVcIjpcIk1hcmxvd1wiLFwibGF0aXR1ZGVcIjo1MS41NzA5OTE5OSxcImxvbmdpdHVkZVwiOi0wLjc2NjQyOTg2MixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIk1MV1wifSx7XCJuYW1lXCI6XCJNZWxrc2hhbVwiLFwibGF0aXR1ZGVcIjo1MS4zNzk4MTkwNixcImxvbmdpdHVkZVwiOi0yLjE0NDUwNzA0NyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIk1LTVwifSx7XCJuYW1lXCI6XCJNZW5oZW5pb3RcIixcImxhdGl0dWRlXCI6NTAuNDI2MjIwODIsXCJsb25naXR1ZGVcIjotNC40MDkyNTg4MSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIk1FTlwifSx7XCJuYW1lXCI6XCJNaWRnaGFtXCIsXCJsYXRpdHVkZVwiOjUxLjM5NTk2OTM2LFwibG9uZ2l0dWRlXCI6LTEuMTc3NzA4NDczLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiTURHXCJ9LHtcIm5hbWVcIjpcIk1vbnRwZWxpZXJcIixcImxhdGl0dWRlXCI6NTEuNDY4ODk1MTksXCJsb25naXR1ZGVcIjotMi41ODczMzI1NDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJNVFBcIn0se1wibmFtZVwiOlwiTW9yY2hhcmQgUm9hZFwiLFwibGF0aXR1ZGVcIjo1MC44MzE4OTE2MSxcImxvbmdpdHVkZVwiOi0zLjc3NjM5NTg2OSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIk1SRFwifSx7XCJuYW1lXCI6XCJNb3JldG9uLWluLU1hcnNoXCIsXCJsYXRpdHVkZVwiOjUxLjk5MjI4NDE1LFwibG9uZ2l0dWRlXCI6LTEuNzAwMzg4OTcyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiTUlNXCJ9LHtcIm5hbWVcIjpcIk1vcnRpbWVyXCIsXCJsYXRpdHVkZVwiOjUxLjM3MjA3MjExLFwibG9uZ2l0dWRlXCI6LTEuMDM1NTAzNDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJNT1JcIn0se1wibmFtZVwiOlwiTW90dGlzZm9udCAmIER1bmJyaWRnZVwiLFwibGF0aXR1ZGVcIjo1MS4wMzM3OTI3NyxcImxvbmdpdHVkZVwiOi0xLjU0NjcyNDgxMixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIkRCR1wifSx7XCJuYW1lXCI6XCJOYWlsc2VhICYgQmFja3dlbGxcIixcImxhdGl0dWRlXCI6NTEuNDE5NDA2ODEsXCJsb25naXR1ZGVcIjotMi43NTA2NDYyOTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJOTFNcIn0se1wibmFtZVwiOlwiTmV3YnVyeVwiLFwibGF0aXR1ZGVcIjo1MS4zOTc2NDQyNyxcImxvbmdpdHVkZVwiOi0xLjMyMjg2MjQ1OSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIk5CWVwifSx7XCJuYW1lXCI6XCJOZXdidXJ5IFJhY2Vjb3Vyc2VcIixcImxhdGl0dWRlXCI6NTEuMzk4NDU1NDgsXCJsb25naXR1ZGVcIjotMS4zMDc3OTk5OTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJOUkNcIn0se1wibmFtZVwiOlwiTmV3Y291cnRcIixcImxhdGl0dWRlXCI6LTMuNDcyNTUxLFwibG9uZ2l0dWRlXCI6NTAuNzAyNjU2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiTkNPXCJ9LHtcIm5hbWVcIjpcIk5ld3F1YXlcIixcImxhdGl0dWRlXCI6NTAuNDE1MDg4MTEsXCJsb25naXR1ZGVcIjotNS4wNzU3MDg2MzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJOUVlcIn0se1wibmFtZVwiOlwiTmV3dG9uIEFiYm90XCIsXCJsYXRpdHVkZVwiOjUwLjUyOTU2OTg2LFwibG9uZ2l0dWRlXCI6LTMuNTk5MTkzMzc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiTlRBXCJ9LHtcIm5hbWVcIjpcIk5ld3RvbiBTdCBDeXJlc1wiLFwibGF0aXR1ZGVcIjo1MC43Nzg5MTkyNixcImxvbmdpdHVkZVwiOi0zLjU4OTQxNDA4OCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIk5UQ1wifSx7XCJuYW1lXCI6XCJOb3J0aCBDYW1wXCIsXCJsYXRpdHVkZVwiOjUxLjI3NTc5Mzk5LFwibG9uZ2l0dWRlXCI6LTAuNzMxMTk4MzU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiTkNNXCJ9LHtcIm5hbWVcIjpcIk9rZWhhbXB0b25cIixcImxhdGl0dWRlXCI6NTAuNzM3NTIxLFwibG9uZ2l0dWRlXCI6LTMuOTk1Mjk5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiT0tFXCJ9LHtcIm5hbWVcIjpcIk9sZGZpZWxkIFBhcmtcIixcImxhdGl0dWRlXCI6NTEuMzc5MjAxMTYsXCJsb25naXR1ZGVcIjotMi4zODAyOTQ1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiT0xGXCJ9LHtcIm5hbWVcIjpcIk94Zm9yZFwiLFwibGF0aXR1ZGVcIjo1MS43NTM1MDA3NSxcImxvbmdpdHVkZVwiOi0xLjI3MDE1MTE3MyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIk9YRlwifSx7XCJuYW1lXCI6XCJQYWlnbnRvblwiLFwibGF0aXR1ZGVcIjo1MC40MzQ3MDc4MSxcImxvbmdpdHVkZVwiOi0zLjU2NDMzODc3MyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlBHTlwifSx7XCJuYW1lXCI6XCJQYW5nYm91cm5lXCIsXCJsYXRpdHVkZVwiOjUxLjQ4NTM5ODIsXCJsb25naXR1ZGVcIjotMS4wOTA0NjQ2NjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJQQU5cIn0se1wibmFtZVwiOlwiUGFyXCIsXCJsYXRpdHVkZVwiOjUwLjM1NTMxNzIzLFwibG9uZ2l0dWRlXCI6LTQuNzA0NzE5NjM5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiUEFSXCJ9LHtcIm5hbWVcIjpcIlBhcnNvbiBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTEuNDMzNTM5OTUsXCJsb25naXR1ZGVcIjotMi42MDgzMTM5MzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJQU05cIn0se1wibmFtZVwiOlwiUGF0Y2h3YXlcIixcImxhdGl0dWRlXCI6NTEuNTI1OTI1MjIsXCJsb25naXR1ZGVcIjotMi41NjI2OTU3NzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJQV1lcIn0se1wibmFtZVwiOlwiUGVubWVyZVwiLFwibGF0aXR1ZGVcIjo1MC4xNDk3ODMxLFwibG9uZ2l0dWRlXCI6LTUuMDgzMDAzODU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiUE5NXCJ9LHtcIm5hbWVcIjpcIlBlbnJ5biAoQ29ybndhbGwpXCIsXCJsYXRpdHVkZVwiOjUwLjE3MDI2ODU1LFwibG9uZ2l0dWRlXCI6LTUuMTEwOTM1NDAxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiUFlOXCJ9LHtcIm5hbWVcIjpcIlBlbnphbmNlXCIsXCJsYXRpdHVkZVwiOjUwLjEyMTY4MjI5LFwibG9uZ2l0dWRlXCI6LTUuNTMyNDY3MTUzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiUE5aXCJ9LHtcIm5hbWVcIjpcIlBlcnJhbndlbGxcIixcImxhdGl0dWRlXCI6NTAuMjE2NDg0NDEsXCJsb25naXR1ZGVcIjotNS4xMTE4Mzk1OTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJQUldcIn0se1wibmFtZVwiOlwiUGVyc2hvcmVcIixcImxhdGl0dWRlXCI6NTIuMTMwMjkzNDgsXCJsb25naXR1ZGVcIjotMi4wNzE1NDAwOCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlBTSFwifSx7XCJuYW1lXCI6XCJQZXdzZXlcIixcImxhdGl0dWRlXCI6NTEuMzQyMTg3MzQsXCJsb25naXR1ZGVcIjotMS43NzA2NzUwMzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJQRVdcIn0se1wibmFtZVwiOlwiUGlsbmluZ1wiLFwibGF0aXR1ZGVcIjo1MS41NTY2MjAxNixcImxvbmdpdHVkZVwiOi0yLjYyNzExOTc1NyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlBJTFwifSx7XCJuYW1lXCI6XCJQbHltb3V0aFwiLFwibGF0aXR1ZGVcIjo1MC4zNzc4MTczNixcImxvbmdpdHVkZVwiOi00LjE0MzM2MzEzMSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlBMWVwifSx7XCJuYW1lXCI6XCJQb2xzbG9lIEJyaWRnZVwiLFwibGF0aXR1ZGVcIjo1MC43MzEwNjk4NyxcImxvbmdpdHVkZVwiOi0zLjUwMTQ5NjAyMixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlBPTFwifSx7XCJuYW1lXCI6XCJQb3J0c21vdXRoIEFybXNcIixcImxhdGl0dWRlXCI6NTAuOTU2OTk5MTIsXCJsb25naXR1ZGVcIjotMy45NTA2MTM4MTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJQTUFcIn0se1wibmFtZVwiOlwiUXVpbnRyZWxsIERvd25zXCIsXCJsYXRpdHVkZVwiOjUwLjQwMzk2OTQyLFwibG9uZ2l0dWRlXCI6LTUuMDI5ODA2MjU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiUVVJXCJ9LHtcIm5hbWVcIjpcIlJhZGxleVwiLFwibGF0aXR1ZGVcIjo1MS42ODYyMDg3MyxcImxvbmdpdHVkZVwiOi0xLjI0MDQ3OTM1MSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlJBRFwifSx7XCJuYW1lXCI6XCJSZWFkaW5nIFdlc3RcIixcImxhdGl0dWRlXCI6NTEuNDU1NDUzMjEsXCJsb25naXR1ZGVcIjotMC45OTAyOTQ2NzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJSRFdcIn0se1wibmFtZVwiOlwiUmVkbGFuZFwiLFwibGF0aXR1ZGVcIjo1MS40NjgzODU5MSxcImxvbmdpdHVkZVwiOi0yLjU5OTEzMTM2MixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlJEQVwifSx7XCJuYW1lXCI6XCJSZWRydXRoXCIsXCJsYXRpdHVkZVwiOjUwLjIzMzI0MTMsXCJsb25naXR1ZGVcIjotNS4yMjU5NzQ1NDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJSRURcIn0se1wibmFtZVwiOlwiUm9jaGVcIixcImxhdGl0dWRlXCI6NTAuNDE4MjY1MjksXCJsb25naXR1ZGVcIjotNC44MzAyMjkwNjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJST0NcIn0se1wibmFtZVwiOlwiUm9tc2V5XCIsXCJsYXRpdHVkZVwiOjUwLjk5MjUyMTc0LFwibG9uZ2l0dWRlXCI6LTEuNDkzMTUxODE0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiUk9NXCJ9LHtcIm5hbWVcIjpcIlNhbHRhc2hcIixcImxhdGl0dWRlXCI6NTAuNDA3MzQ3NjMsXCJsb25naXR1ZGVcIjotNC4yMDkxNTY5NixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlNUU1wifSx7XCJuYW1lXCI6XCJTYW1wZm9yZCBDb3VydGVuYXlcIixcImxhdGl0dWRlXCI6NTAuNzc4OTY4LFwibG9uZ2l0dWRlXCI6LTMuOTM3NDg1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiU01DXCJ9LHtcIm5hbWVcIjpcIlNhbmRodXJzdCAoQmVya3MpXCIsXCJsYXRpdHVkZVwiOjUxLjM0NjQ3NTY4LFwibG9uZ2l0dWRlXCI6LTAuODAzOTE0NDcyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiU05EXCJ9LHtcIm5hbWVcIjpcIlNhbmRwbGFjZVwiLFwibGF0aXR1ZGVcIjo1MC4zODY3NDQyOSxcImxvbmdpdHVkZVwiOi00LjQ2NDUxNzQzOCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlNEUFwifSx7XCJuYW1lXCI6XCJTZWEgTWlsbHNcIixcImxhdGl0dWRlXCI6NTEuNDc5NTM0MDYsXCJsb25naXR1ZGVcIjotMi42NTAxMTA0ODQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJTTUxcIn0se1wibmFtZVwiOlwiU2V2ZXJuIEJlYWNoXCIsXCJsYXRpdHVkZVwiOjUxLjU1OTU1MzgzLFwibG9uZ2l0dWRlXCI6LTIuNjY0Mjc3MTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJTVkJcIn0se1wibmFtZVwiOlwiU2hhbGZvcmQgKFN1cnJleSlcIixcImxhdGl0dWRlXCI6NTEuMjE0MzE5OTcsXCJsb25naXR1ZGVcIjotMC41NjY3OTkxODIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJTRlJcIn0se1wibmFtZVwiOlwiU2hpcGxha2VcIixcImxhdGl0dWRlXCI6NTEuNTExMjE1ODcsXCJsb25naXR1ZGVcIjotMC44ODI1MjQzNzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJTSElcIn0se1wibmFtZVwiOlwiU2hpcHRvblwiLFwibGF0aXR1ZGVcIjo1MS44NjU2NTM4NixcImxvbmdpdHVkZVwiOi0xLjU5MjY5OTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJTSVBcIn0se1wibmFtZVwiOlwiU2hpcmVoYW1wdG9uXCIsXCJsYXRpdHVkZVwiOjUxLjQ4NDU4OTg5LFwibG9uZ2l0dWRlXCI6LTIuNjc4MjY2MTE4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiU0hIXCJ9LHtcIm5hbWVcIjpcIlNsb3VnaFwiLFwibGF0aXR1ZGVcIjo1MS41MTE4NzY4OSxcImxvbmdpdHVkZVwiOi0wLjU5MTUwNDk4MSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlNMT1wifSx7XCJuYW1lXCI6XCJTb3V0aCBHcmVlbmZvcmRcIixcImxhdGl0dWRlXCI6NTEuNTMzMjE0ODUsXCJsb25naXR1ZGVcIjotMC4zMzY2NTMzNjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJTR05cIn0se1wibmFtZVwiOlwiU291dGhhbGxcIixcImxhdGl0dWRlXCI6NTEuNTA1OTYxNTgsXCJsb25naXR1ZGVcIjotMC4zNzg2MTMwODMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJTVExcIn0se1wibmFtZVwiOlwiU3QgQW5kcmV3cyBSb2FkXCIsXCJsYXRpdHVkZVwiOjUxLjUxMjc5NzI0LFwibG9uZ2l0dWRlXCI6LTIuNjk2Njk4NDgxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiU0FSXCJ9LHtcIm5hbWVcIjpcIlN0IEF1c3RlbGxcIixcImxhdGl0dWRlXCI6NTAuMzM5NTA3MzcsXCJsb25naXR1ZGVcIjotNC43ODk0MDU1NzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJTQVVcIn0se1wibmFtZVwiOlwiU3QgQnVkZWF1eCBGZXJyeSBSb2FkXCIsXCJsYXRpdHVkZVwiOjUwLjQwMTM4NjkzLFwibG9uZ2l0dWRlXCI6LTQuMTg2NjQ0Njg0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiU0JGXCJ9LHtcIm5hbWVcIjpcIlN0IEJ1ZGVhdXggVmljdG9yaWEgUm9hZFwiLFwibGF0aXR1ZGVcIjo1MC40MDIxNjkzLFwibG9uZ2l0dWRlXCI6LTQuMTg4MDg4MDAyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiU0JWXCJ9LHtcIm5hbWVcIjpcIlN0IENvbHVtYiBSb2FkXCIsXCJsYXRpdHVkZVwiOjUwLjM5OTA1ODEyLFwibG9uZ2l0dWRlXCI6LTQuOTQwODI4MTMxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiU0NSXCJ9LHtcIm5hbWVcIjpcIlN0IEVydGhcIixcImxhdGl0dWRlXCI6NTAuMTcwNDc3NyxcImxvbmdpdHVkZVwiOi01LjQ0NDMxNzUyMSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlNFUlwifSx7XCJuYW1lXCI6XCJTdCBHZXJtYW5zXCIsXCJsYXRpdHVkZVwiOjUwLjM5NDI2NTMxLFwibG9uZ2l0dWRlXCI6LTQuMzA4NDUxNDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJTR01cIn0se1wibmFtZVwiOlwiU3QgSXZlcyAoQ29ybndhbGwpXCIsXCJsYXRpdHVkZVwiOjUwLjIwODY0NTAxLFwibG9uZ2l0dWRlXCI6LTUuNDc2Nzg2OTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJTSVZcIn0se1wibmFtZVwiOlwiU3QgSmFtZXMgUGFyayAoRXhldGVyKVwiLFwibGF0aXR1ZGVcIjo1MC43MzA2ODA4NixcImxvbmdpdHVkZVwiOi0zLjUyMzE2NDEwMyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlNKUFwifSx7XCJuYW1lXCI6XCJTdCBLZXluZSBXaXNoaW5nIFdlbGwgSGFsdFwiLFwibGF0aXR1ZGVcIjo1MC40MjMwNTU0OSxcImxvbmdpdHVkZVwiOi00LjQ2MTYxNTM4MixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlNLTlwifSx7XCJuYW1lXCI6XCJTdGFwbGV0b24gUm9hZFwiLFwibGF0aXR1ZGVcIjo1MS40Njc1MDYzNixcImxvbmdpdHVkZVwiOi0yLjU2NjIyMzg2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlNSRFwifSx7XCJuYW1lXCI6XCJTdGFyY3Jvc3NcIixcImxhdGl0dWRlXCI6NTAuNjI3Nzg0NTUsXCJsb25naXR1ZGVcIjotMy40NDc3MjYxMzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJTQ1NcIn0se1wibmFtZVwiOlwiU3RvbmVob3VzZVwiLFwibGF0aXR1ZGVcIjo1MS43NDU4ODU0NixcImxvbmdpdHVkZVwiOi0yLjI3OTUxMDI5MyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlNIVVwifSx7XCJuYW1lXCI6XCJTdHJvdWQgKEdsb3VjcylcIixcImxhdGl0dWRlXCI6NTEuNzQ0NTc0NDMsXCJsb25naXR1ZGVcIjotMi4yMTkzOTI1NjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJTVERcIn0se1wibmFtZVwiOlwiU3dpbmRvbiAoV2lsdHMpXCIsXCJsYXRpdHVkZVwiOjUxLjU2NTQ3MjkzLFwibG9uZ2l0dWRlXCI6LTEuNzg1NTEwMTAzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiU1dJXCJ9LHtcIm5hbWVcIjpcIlRhY2tsZXlcIixcImxhdGl0dWRlXCI6NTEuODgxMzI1NDgsXCJsb25naXR1ZGVcIjotMS4yOTcyMjY5NTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJUQUNcIn0se1wibmFtZVwiOlwiVGFwbG93XCIsXCJsYXRpdHVkZVwiOjUxLjUyMzU1OTQsXCJsb25naXR1ZGVcIjotMC42ODEzNjc0NSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlRBUFwifSx7XCJuYW1lXCI6XCJUYXVudG9uXCIsXCJsYXRpdHVkZVwiOjUxLjAyMzY1NjI1LFwibG9uZ2l0dWRlXCI6LTMuMTAyMTMyOTE4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiVEFVXCJ9LHtcIm5hbWVcIjpcIlRlaWdubW91dGhcIixcImxhdGl0dWRlXCI6NTAuNTQ4MDQ2NzYsXCJsb25naXR1ZGVcIjotMy40OTQ2ODYzNjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJUR01cIn0se1wibmFtZVwiOlwiVGhhdGNoYW1cIixcImxhdGl0dWRlXCI6NTEuMzkzODM4NzksXCJsb25naXR1ZGVcIjotMS4yNDMxODkxNzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJUSEFcIn0se1wibmFtZVwiOlwiVGhlYWxlXCIsXCJsYXRpdHVkZVwiOjUxLjQzMzQ0Njg2LFwibG9uZ2l0dWRlXCI6LTEuMDc0OTY3MjA0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiVEhFXCJ9LHtcIm5hbWVcIjpcIlRob3JuZm9yZFwiLFwibGF0aXR1ZGVcIjo1MC45MTE5NTAzNCxcImxvbmdpdHVkZVwiOi0yLjU3OTcyNjA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiVEhPXCJ9LHtcIm5hbWVcIjpcIlRpbGVodXJzdFwiLFwibGF0aXR1ZGVcIjo1MS40NzE1MDUwOCxcImxvbmdpdHVkZVwiOi0xLjAyOTgyMjk3NyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlRMSFwifSx7XCJuYW1lXCI6XCJUaXZlcnRvbiBQYXJrd2F5XCIsXCJsYXRpdHVkZVwiOjUwLjkxNzUyODYsXCJsb25naXR1ZGVcIjotMy4zNTk5NTcwMjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJUVlBcIn0se1wibmFtZVwiOlwiVG9wc2hhbVwiLFwibGF0aXR1ZGVcIjo1MC42ODYwNDM2MixcImxvbmdpdHVkZVwiOi0zLjQ2MzY3NTI3OCxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlRPUFwifSx7XCJuYW1lXCI6XCJUb3JxdWF5XCIsXCJsYXRpdHVkZVwiOjUwLjQ2MTE2NTM0LFwibG9uZ2l0dWRlXCI6LTMuNTQzNjY4NTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJUUVlcIn0se1wibmFtZVwiOlwiVG9ycmVcIixcImxhdGl0dWRlXCI6NTAuNDczMTcxNCxcImxvbmdpdHVkZVwiOi0zLjU0NjQ0MTMwMSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIlRSUlwifSx7XCJuYW1lXCI6XCJUb3RuZXNcIixcImxhdGl0dWRlXCI6NTAuNDM1ODQ2ODYsXCJsb25naXR1ZGVcIjotMy42ODg3MjE4NDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJUT1RcIn0se1wibmFtZVwiOlwiVHJvd2JyaWRnZVwiLFwibGF0aXR1ZGVcIjo1MS4zMTk4MjU2NSxcImxvbmdpdHVkZVwiOi0yLjIxNDM0Njc3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiVFJPXCJ9LHtcIm5hbWVcIjpcIlRydXJvXCIsXCJsYXRpdHVkZVwiOjUwLjI2MzgyOTYyLFwibG9uZ2l0dWRlXCI6LTUuMDY0ODY2OTQ3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiVFJVXCJ9LHtcIm5hbWVcIjpcIlR3eWZvcmRcIixcImxhdGl0dWRlXCI6NTEuNDc1NTMwMTgsXCJsb25naXR1ZGVcIjotMC44NjMyOTQ5OTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJUV1lcIn0se1wibmFtZVwiOlwiVW1iZXJsZWlnaFwiLFwibGF0aXR1ZGVcIjo1MC45OTY3NDYzOSxcImxvbmdpdHVkZVwiOi0zLjk4MjkyMTk5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiVU1CXCJ9LHtcIm5hbWVcIjpcIldhcmdyYXZlXCIsXCJsYXRpdHVkZVwiOjUxLjQ5ODE1NTkzLFwibG9uZ2l0dWRlXCI6LTAuODc2NTE5MzIxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiV0dWXCJ9LHtcIm5hbWVcIjpcIldhcm1pbnN0ZXJcIixcImxhdGl0dWRlXCI6NTEuMjA2NzY3OSxcImxvbmdpdHVkZVwiOi0yLjE3Njc0NTk1NixcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIldNTlwifSx7XCJuYW1lXCI6XCJXZXN0IERyYXl0b25cIixcImxhdGl0dWRlXCI6NTEuNTEwMDYwMDUsXCJsb25naXR1ZGVcIjotMC40NzIyMjUyMzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJXRFRcIn0se1wibmFtZVwiOlwiV2VzdCBFYWxpbmdcIixcImxhdGl0dWRlXCI6NTEuNTEzNjQwNDMsXCJsb25naXR1ZGVcIjotMC4zMTk3ODM2MjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJXRUFcIn0se1wibmFtZVwiOlwiV2VzdGJ1cnkgKFdpbHRzKVwiLFwibGF0aXR1ZGVcIjo1MS4yNjY5NzkxNSxcImxvbmdpdHVkZVwiOi0yLjE5OTE5Mzg5NyxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIldTQlwifSx7XCJuYW1lXCI6XCJXZXN0b24gTWlsdG9uXCIsXCJsYXRpdHVkZVwiOjUxLjM0ODc3NDY4LFwibG9uZ2l0dWRlXCI6LTIuOTQzMzQzOTU5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiV05NXCJ9LHtcIm5hbWVcIjpcIldlc3Rvbi1zdXBlci1NYXJlXCIsXCJsYXRpdHVkZVwiOjUxLjM0NDMxNjcxLFwibG9uZ2l0dWRlXCI6LTIuOTcxNjgxNTMxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiV1NNXCJ9LHtcIm5hbWVcIjpcIldpbmRzb3IgJiBFdG9uIENlbnRyYWxcIixcImxhdGl0dWRlXCI6NTEuNDgzMjcyNjIsXCJsb25naXR1ZGVcIjotMC42MTAzNzQ5MjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJXTkNcIn0se1wibmFtZVwiOlwiV29ybGVcIixcImxhdGl0dWRlXCI6NTEuMzU4MDMzNDQsXCJsb25naXR1ZGVcIjotMi45MDk2Mzg4ODYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJXT1JcIn0se1wibmFtZVwiOlwiWWF0ZVwiLFwibGF0aXR1ZGVcIjo1MS41NDA2MDMzMyxcImxvbmdpdHVkZVwiOi0yLjQzMjUyNDUwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIllBRVwifSx7XCJuYW1lXCI6XCJZYXR0b25cIixcImxhdGl0dWRlXCI6NTEuMzkxMDExOTUsXCJsb25naXR1ZGVcIjotMi44Mjc3OTM2MSxcInN0YXRpb25PcGVyYXRvclwiOlwiR1dcIixcImNyc0NvZGVcIjpcIllBVFwifSx7XCJuYW1lXCI6XCJZZW9mb3JkXCIsXCJsYXRpdHVkZVwiOjUwLjc3Njg4NjUsXCJsb25naXR1ZGVcIjotMy43MjYwODMxNjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJZRU9cIn0se1wibmFtZVwiOlwiWWVvdmlsIFBlbiBNaWxsXCIsXCJsYXRpdHVkZVwiOjUwLjk0NDUxMTUzLFwibG9uZ2l0dWRlXCI6LTIuNjEzNDM5MzM5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJHV1wiLFwiY3JzQ29kZVwiOlwiWVZQXCJ9LHtcIm5hbWVcIjpcIllldG1pbnN0ZXJcIixcImxhdGl0dWRlXCI6NTAuODk2MTU2MzksXCJsb25naXR1ZGVcIjotMi41NzI5ODg5MzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkdXXCIsXCJjcnNDb2RlXCI6XCJZRVRcIn0se1wibmFtZVwiOlwiQnJhZGluZ1wiLFwibGF0aXR1ZGVcIjo1MC42NzgzNTUwNCxcImxvbmdpdHVkZVwiOi0xLjEzODcyMjY0OSxcInN0YXRpb25PcGVyYXRvclwiOlwiSUxcIixcImNyc0NvZGVcIjpcIkJETlwifSx7XCJuYW1lXCI6XCJMYWtlXCIsXCJsYXRpdHVkZVwiOjUwLjY0NjQ2ODE4LFwibG9uZ2l0dWRlXCI6LTEuMTY2MzQ5NTc0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJJTFwiLFwiY3JzQ29kZVwiOlwiTEtFXCJ9LHtcIm5hbWVcIjpcIlJ5ZGUgRXNwbGFuYWRlXCIsXCJsYXRpdHVkZVwiOjUwLjczMjg1NDIxLFwibG9uZ2l0dWRlXCI6LTEuMTU5NzcyNTA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJJTFwiLFwiY3JzQ29kZVwiOlwiUllEXCJ9LHtcIm5hbWVcIjpcIlJ5ZGUgUGllciBIZWFkXCIsXCJsYXRpdHVkZVwiOjUwLjczOTE2OTkxLFwibG9uZ2l0dWRlXCI6LTEuMTYwMTI3MTc2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJJTFwiLFwiY3JzQ29kZVwiOlwiUllQXCJ9LHtcIm5hbWVcIjpcIlJ5ZGUgU3QgSm9obnMgUm9hZFwiLFwibGF0aXR1ZGVcIjo1MC43MjQzNTA1NyxcImxvbmdpdHVkZVwiOi0xLjE1NjU2Njg2NSxcInN0YXRpb25PcGVyYXRvclwiOlwiSUxcIixcImNyc0NvZGVcIjpcIlJZUlwifSx7XCJuYW1lXCI6XCJTYW5kb3duXCIsXCJsYXRpdHVkZVwiOjUwLjY1Njg1MzkyLFwibG9uZ2l0dWRlXCI6LTEuMTYyMzg4Mzg2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJJTFwiLFwiY3JzQ29kZVwiOlwiU0FOXCJ9LHtcIm5hbWVcIjpcIlNoYW5rbGluXCIsXCJsYXRpdHVkZVwiOjUwLjYzMzkwMTQxLFwibG9uZ2l0dWRlXCI6LTEuMTc5ODM1NjM2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJJTFwiLFwiY3JzQ29kZVwiOlwiU0hOXCJ9LHtcIm5hbWVcIjpcIlNtYWxsYnJvb2sgSnVuY3Rpb25cIixcImxhdGl0dWRlXCI6NTAuNzExMjA5ODEsXCJsb25naXR1ZGVcIjotMS4xNTUwNzQ3MjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIklMXCIsXCJjcnNDb2RlXCI6XCJTQUJcIn0se1wibmFtZVwiOlwiQWNsZVwiLFwibGF0aXR1ZGVcIjo1Mi42MzQ3MDYyMyxcImxvbmdpdHVkZVwiOjEuNTQzOTMwMjc4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiQUNMXCJ9LHtcIm5hbWVcIjpcIkFscmVzZm9yZCAoRXNzZXgpXCIsXCJsYXRpdHVkZVwiOjUxLjg1NDAwNDc0LFwibG9uZ2l0dWRlXCI6MC45OTY3MDQ3NDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJBTFJcIn0se1wibmFtZVwiOlwiQWx0aG9ybmUgKEVzc2V4KVwiLFwibGF0aXR1ZGVcIjo1MS42NDc4NzY5NSxcImxvbmdpdHVkZVwiOjAuNzUyNDk5MTU0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiQUxOXCJ9LHtcIm5hbWVcIjpcIkFuZ2VsIFJvYWRcIixcImxhdGl0dWRlXCI6NTEuNjEyNDEyMTMsXCJsb25naXR1ZGVcIjotMC4wNDg3ODQxNjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJBR1JcIn0se1wibmFtZVwiOlwiQXR0bGVib3JvdWdoXCIsXCJsYXRpdHVkZVwiOjUyLjUxNDI2NDc5LFwibG9uZ2l0dWRlXCI6MS4wMjI2Nzk3NzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJBVExcIn0se1wibmFtZVwiOlwiQXVkbGV5IEVuZFwiLFwibGF0aXR1ZGVcIjo1Mi4wMDQ0NTE1MyxcImxvbmdpdHVkZVwiOjAuMjA3MTYyMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkFVRFwifSx7XCJuYW1lXCI6XCJCYXR0bGVzYnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUxLjYyNDg2NTU3LFwibG9uZ2l0dWRlXCI6MC41NjU4MDM0MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkJMQlwifSx7XCJuYW1lXCI6XCJCZWNjbGVzXCIsXCJsYXRpdHVkZVwiOjUyLjQ1ODU0MTYyLFwibG9uZ2l0dWRlXCI6MS41Njk1MDgwOTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJCQ0NcIn0se1wibmFtZVwiOlwiQmVybmV5IEFybXNcIixcImxhdGl0dWRlXCI6NTIuNTg5ODA5ODYsXCJsb25naXR1ZGVcIjoxLjYzMDM5MjgzNixcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkJZQVwifSx7XCJuYW1lXCI6XCJCaWxsZXJpY2F5XCIsXCJsYXRpdHVkZVwiOjUxLjYyODg5MDQ1LFwibG9uZ2l0dWRlXCI6MC40MTg2MzU3NjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJCSUNcIn0se1wibmFtZVwiOlwiQmlzaG9wcyBTdG9ydGZvcmRcIixcImxhdGl0dWRlXCI6NTEuODY2Njk2MjcsXCJsb25naXR1ZGVcIjowLjE2NDkwODYyOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkJJU1wifSx7XCJuYW1lXCI6XCJCcmFpbnRyZWVcIixcImxhdGl0dWRlXCI6NTEuODc1NDA1MTEsXCJsb25naXR1ZGVcIjowLjU1NjY5ODY1NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkJUUlwifSx7XCJuYW1lXCI6XCJCcmFpbnRyZWUgRnJlZXBvcnRcIixcImxhdGl0dWRlXCI6NTEuODY5MDEwNDcsXCJsb25naXR1ZGVcIjowLjU2NzQ0OTQyOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkJUUFwifSx7XCJuYW1lXCI6XCJCcmFtcHRvbiAoU3VmZm9saylcIixcImxhdGl0dWRlXCI6NTIuMzk1NDUyNDQsXCJsb25naXR1ZGVcIjoxLjU0MzgyNDEzMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkJSUFwifSx7XCJuYW1lXCI6XCJCcmFuZG9uXCIsXCJsYXRpdHVkZVwiOjUyLjQ1NDAyODQ1LFwibG9uZ2l0dWRlXCI6MC42MjQ3MzM5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkJORFwifSx7XCJuYW1lXCI6XCJCcmltc2Rvd25cIixcImxhdGl0dWRlXCI6NTEuNjU1MjgwODcsXCJsb25naXR1ZGVcIjotMC4wMzEwMzk3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkJNRFwifSx7XCJuYW1lXCI6XCJCcm94Ym91cm5lXCIsXCJsYXRpdHVkZVwiOjUxLjc0NjkxMjMzLFwibG9uZ2l0dWRlXCI6LTAuMDExMDc3OTQxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiQlhCXCJ9LHtcIm5hbWVcIjpcIkJydW5kYWxsXCIsXCJsYXRpdHVkZVwiOjUyLjYxOTgwNTQyLFwibG9uZ2l0dWRlXCI6MS40MzkyNzUxMDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJCREFcIn0se1wibmFtZVwiOlwiQnJ1bmRhbGwgR2FyZGVuc1wiLFwibGF0aXR1ZGVcIjo1Mi42MjMwOTU3OSxcImxvbmdpdHVkZVwiOjEuNDE4ODQyMDkyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiQkdBXCJ9LHtcIm5hbWVcIjpcIkJ1Y2tlbmhhbSAoTm9yZm9saylcIixcImxhdGl0dWRlXCI6NTIuNTk3NzYxNzcsXCJsb25naXR1ZGVcIjoxLjQ3MDMzODE0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiQlVDXCJ9LHtcIm5hbWVcIjpcIkJ1cmVzXCIsXCJsYXRpdHVkZVwiOjUxLjk3MDk5MjQyLFwibG9uZ2l0dWRlXCI6MC43NjkwMDUxMjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJCVUVcIn0se1wibmFtZVwiOlwiQnVybmhhbS1vbi1Dcm91Y2hcIixcImxhdGl0dWRlXCI6NTEuNjMzNjYzNzMsXCJsb25naXR1ZGVcIjowLjgxNDA0NTE3MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkJVVVwifSx7XCJuYW1lXCI6XCJCdXJ5IFN0IEVkbXVuZHNcIixcImxhdGl0dWRlXCI6NTIuMjUzNzc4NDYsXCJsb25naXR1ZGVcIjowLjcxMzMxMDE2MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkJTRVwifSx7XCJuYW1lXCI6XCJDYW1icmlkZ2VcIixcImxhdGl0dWRlXCI6NTIuMTk0NTc0NixcImxvbmdpdHVkZVwiOjAuMTM3NTU0NTUyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiQ0JHXCJ9LHtcIm5hbWVcIjpcIkNhbnRsZXlcIixcImxhdGl0dWRlXCI6NTIuNTc4NzcwODIsXCJsb25naXR1ZGVcIjoxLjUxMzQyNjA2OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkNOWVwifSx7XCJuYW1lXCI6XCJDaGFwcGVsICYgV2FrZXMgQ29sbmVcIixcImxhdGl0dWRlXCI6NTEuOTI1OTIwMzEsXCJsb25naXR1ZGVcIjowLjc1ODUxODkwNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkNXQ1wifSx7XCJuYW1lXCI6XCJDaGVsbXNmb3JkXCIsXCJsYXRpdHVkZVwiOjUxLjczNjM4MjM2LFwibG9uZ2l0dWRlXCI6MC40Njg1ODAzMzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJDSE1cIn0se1wibmFtZVwiOlwiQ2hlc2h1bnRcIixcImxhdGl0dWRlXCI6NTEuNzAyODc2OTEsXCJsb25naXR1ZGVcIjotMC4wMjM5NTE1ODUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJDSE5cIn0se1wibmFtZVwiOlwiQ2xhY3Rvbi1vbi1TZWFcIixcImxhdGl0dWRlXCI6NTEuNzk0MDEyNzMsXCJsb25naXR1ZGVcIjoxLjE1NDEwNTI4NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkNMVFwifSx7XCJuYW1lXCI6XCJDb2xjaGVzdGVyXCIsXCJsYXRpdHVkZVwiOjUxLjkwMDYxNjE5LFwibG9uZ2l0dWRlXCI6MC44OTM0NzAxNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkNPTFwifSx7XCJuYW1lXCI6XCJDb2xjaGVzdGVyIFRvd25cIixcImxhdGl0dWRlXCI6NTEuODg2NTI5NCxcImxvbmdpdHVkZVwiOjAuOTA0MTQ4NTU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiQ0VUXCJ9LHtcIm5hbWVcIjpcIkNyZXNzaW5nIChFc3NleClcIixcImxhdGl0dWRlXCI6NTEuODUyMzQ5NDIsXCJsb25naXR1ZGVcIjowLjU3Nzk3MzE2NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkNFU1wifSx7XCJuYW1lXCI6XCJDcm9tZXJcIixcImxhdGl0dWRlXCI6NTIuOTMwMTA4OCxcImxvbmdpdHVkZVwiOjEuMjkyODMzNjE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiQ01SXCJ9LHtcIm5hbWVcIjpcIkRhcnNoYW1cIixcImxhdGl0dWRlXCI6NTIuMjczMDEzMTQsXCJsb25naXR1ZGVcIjoxLjUyMzQ4MjA3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkRTTVwifSx7XCJuYW1lXCI6XCJEZXJieSBSb2FkIChJcHN3aWNoKVwiLFwibGF0aXR1ZGVcIjo1Mi4wNTA1NzE5NixcImxvbmdpdHVkZVwiOjEuMTgyNjU5NDg2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiREJSXCJ9LHtcIm5hbWVcIjpcIkRpc3NcIixcImxhdGl0dWRlXCI6NTIuMzczNjc1MzksXCJsb25naXR1ZGVcIjoxLjEyMzcxMzQyNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkRJU1wifSx7XCJuYW1lXCI6XCJEb3ZlcmNvdXJ0XCIsXCJsYXRpdHVkZVwiOjUxLjkzODc1MjA4LFwibG9uZ2l0dWRlXCI6MS4yODA2MjkxNjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJEVkNcIn0se1wibmFtZVwiOlwiRHVsbGluZ2hhbVwiLFwibGF0aXR1ZGVcIjo1Mi4yMDE2NjUwMyxcImxvbmdpdHVkZVwiOjAuMzY2NjcxNjk2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiRFVMXCJ9LHtcIm5hbWVcIjpcIkVjY2xlcyBSb2FkXCIsXCJsYXRpdHVkZVwiOjUyLjQ3MDkwNDY3LFwibG9uZ2l0dWRlXCI6MC45Njk5Mjk0NjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJFQ1NcIn0se1wibmFtZVwiOlwiRWxtc3dlbGxcIixcImxhdGl0dWRlXCI6NTIuMjM4MDU0NDQsXCJsb25naXR1ZGVcIjowLjkxMjU5ODUxNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkVTV1wifSx7XCJuYW1lXCI6XCJFbHNlbmhhbSAoRXNzZXgpXCIsXCJsYXRpdHVkZVwiOjUxLjkyMDU1MjA2LFwibG9uZ2l0dWRlXCI6MC4yMjgwNzI0MDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJFU01cIn0se1wibmFtZVwiOlwiRWx5XCIsXCJsYXRpdHVkZVwiOjUyLjM5MTI0OTYxLFwibG9uZ2l0dWRlXCI6MC4yNjY4MzM4MjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJFTFlcIn0se1wibmFtZVwiOlwiRW5maWVsZCBMb2NrXCIsXCJsYXRpdHVkZVwiOjUxLjY3MDg4MjgxLFwibG9uZ2l0dWRlXCI6LTAuMDI4MzM4MzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJFTkxcIn0se1wibmFtZVwiOlwiRmVsaXhzdG93ZVwiLFwibGF0aXR1ZGVcIjo1MS45NjcwODY2OCxcImxvbmdpdHVkZVwiOjEuMzUwNDU1NDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJGTFhcIn0se1wibmFtZVwiOlwiRnJpbnRvbi1vbi1TZWFcIixcImxhdGl0dWRlXCI6NTEuODM3NjkzNDIsXCJsb25naXR1ZGVcIjoxLjI0MzE4NzA1NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkZSSVwifSx7XCJuYW1lXCI6XCJHcmVhdCBCZW50bGV5XCIsXCJsYXRpdHVkZVwiOjUxLjg1MTc3MTY2LFwibG9uZ2l0dWRlXCI6MS4wNjUxNjQ4OTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJHUkJcIn0se1wibmFtZVwiOlwiR3JlYXQgQ2hlc3RlcmZvcmRcIixcImxhdGl0dWRlXCI6NTIuMDU5ODIxNDIsXCJsb25naXR1ZGVcIjowLjE5MzUyMzAzOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkdSQ1wifSx7XCJuYW1lXCI6XCJHcmVhdCBZYXJtb3V0aFwiLFwibGF0aXR1ZGVcIjo1Mi42MTIxODI5OCxcImxvbmdpdHVkZVwiOjEuNzIwOTA2Mjc4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiR1lNXCJ9LHtcIm5hbWVcIjpcIkd1bnRvblwiLFwibGF0aXR1ZGVcIjo1Mi44NjYxMzYzMSxcImxvbmdpdHVkZVwiOjEuMzQ4NzY2OTg4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiR05UXCJ9LHtcIm5hbWVcIjpcIkhhZGRpc2NvZVwiLFwibGF0aXR1ZGVcIjo1Mi41Mjg4OTAwNCxcImxvbmdpdHVkZVwiOjEuNjIyNDExMTE2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiSEFEXCJ9LHtcIm5hbWVcIjpcIkhhbGVzd29ydGhcIixcImxhdGl0dWRlXCI6NTIuMzQ2Njk3MTksXCJsb25naXR1ZGVcIjoxLjUwNTY5ODEyNixcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkhBU1wifSx7XCJuYW1lXCI6XCJIYXJsaW5nIFJvYWRcIixcImxhdGl0dWRlXCI6NTIuNDUzNzEwMjEsXCJsb25naXR1ZGVcIjowLjkwOTE1MjY3MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkhSRFwifSx7XCJuYW1lXCI6XCJIYXJsb3cgTWlsbFwiLFwibGF0aXR1ZGVcIjo1MS43OTAzNjgyNyxcImxvbmdpdHVkZVwiOjAuMTMyMzIwNjU2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiSFdNXCJ9LHtcIm5hbWVcIjpcIkhhcmxvdyBUb3duXCIsXCJsYXRpdHVkZVwiOjUxLjc4MTA3Mjk4LFwibG9uZ2l0dWRlXCI6MC4wOTUxNDM3OTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJIV05cIn0se1wibmFtZVwiOlwiSGFyd2ljaCBJbnRlcm5hdGlvbmFsXCIsXCJsYXRpdHVkZVwiOjUxLjk0NzMwMzUsXCJsb25naXR1ZGVcIjoxLjI1NTE0MTg2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiSFBRXCJ9LHtcIm5hbWVcIjpcIkhhcndpY2ggVG93blwiLFwibGF0aXR1ZGVcIjo1MS45NDQxNTkyMixcImxvbmdpdHVkZVwiOjEuMjg2NzAwMTY4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiSFdDXCJ9LHtcIm5hbWVcIjpcIkhhdGZpZWxkIFBldmVyZWxcIixcImxhdGl0dWRlXCI6NTEuNzc5ODc1LFwibG9uZ2l0dWRlXCI6MC41OTIxMzU3NDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJIQVBcIn0se1wibmFtZVwiOlwiSGVydGZvcmQgRWFzdFwiLFwibGF0aXR1ZGVcIjo1MS43OTkwMzg0MixcImxvbmdpdHVkZVwiOi0wLjA3MjkzNDA2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiSEZFXCJ9LHtcIm5hbWVcIjpcIkhvY2tsZXlcIixcImxhdGl0dWRlXCI6NTEuNjAzNTYxNjgsXCJsb25naXR1ZGVcIjowLjY1OTAxMzg2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiSE9DXCJ9LHtcIm5hbWVcIjpcIkhvdmV0b24gJiBXcm94aGFtXCIsXCJsYXRpdHVkZVwiOjUyLjcxNTU5ODE0LFwibG9uZ2l0dWRlXCI6MS40MDgwMDg4ODksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJIWE1cIn0se1wibmFtZVwiOlwiSHl0aGUgKEVzc2V4KVwiLFwibGF0aXR1ZGVcIjo1MS44ODU2NTI2MyxcImxvbmdpdHVkZVwiOjAuOTI3NTM1MzMzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiSFlIXCJ9LHtcIm5hbWVcIjpcIkluZ2F0ZXN0b25lXCIsXCJsYXRpdHVkZVwiOjUxLjY2NzA1MTAzLFwibG9uZ2l0dWRlXCI6MC4zODQyNTIxMzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJJTlRcIn0se1wibmFtZVwiOlwiSXBzd2ljaFwiLFwibGF0aXR1ZGVcIjo1Mi4wNTA2MDk1NyxcImxvbmdpdHVkZVwiOjEuMTQ0NDQwNjIzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiSVBTXCJ9LHtcIm5hbWVcIjpcIktlbHZlZG9uXCIsXCJsYXRpdHVkZVwiOjUxLjg0MDcxNDM4LFwibG9uZ2l0dWRlXCI6MC43MDI0MDExNDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJLRUxcIn0se1wibmFtZVwiOlwiS2VubmV0dFwiLFwibGF0aXR1ZGVcIjo1Mi4yNzcyODAyNSxcImxvbmdpdHVkZVwiOjAuNDkwNDc2MzE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiS05FXCJ9LHtcIm5hbWVcIjpcIktpcmJ5IENyb3NzXCIsXCJsYXRpdHVkZVwiOjUxLjg0MTQwODk5LFwibG9uZ2l0dWRlXCI6MS4yMTUwMDgyMTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJLQlhcIn0se1wibmFtZVwiOlwiTGFrZW5oZWF0aFwiLFwibGF0aXR1ZGVcIjo1Mi40NDc1MTI3LFwibG9uZ2l0dWRlXCI6MC41MzM4OTI2MDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJMQUtcIn0se1wibmFtZVwiOlwiTGVhIEJyaWRnZVwiLFwibGF0aXR1ZGVcIjo1MS41Njc2NjksXCJsb25naXR1ZGVcIjotMC4wMzU1NTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJMRUJcIn0se1wibmFtZVwiOlwiTGluZ3dvb2RcIixcImxhdGl0dWRlXCI6NTIuNjIyMjM2NzksXCJsb25naXR1ZGVcIjoxLjQ4OTg2MzMzMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkxHRFwifSx7XCJuYW1lXCI6XCJMb3dlc3RvZnRcIixcImxhdGl0dWRlXCI6NTIuNDc0NDU2OTEsXCJsb25naXR1ZGVcIjoxLjc0OTcyNzg0NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIkxXVFwifSx7XCJuYW1lXCI6XCJNYW5lYVwiLFwibGF0aXR1ZGVcIjo1Mi40OTc4NTI4OSxcImxvbmdpdHVkZVwiOjAuMTc3Njk3NTc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiTU5FXCJ9LHtcIm5hbWVcIjpcIk1hbm5pbmd0cmVlXCIsXCJsYXRpdHVkZVwiOjUxLjk0OTA2NjEyLFwibG9uZ2l0dWRlXCI6MS4wNDUyNTE0MjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJNTkdcIn0se1wibmFtZVwiOlwiTWFyY2hcIixcImxhdGl0dWRlXCI6NTIuNTU5OTA5ODcsXCJsb25naXR1ZGVcIjowLjA5MTE5OTU4MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIk1DSFwifSx7XCJuYW1lXCI6XCJNYXJrcyBUZXlcIixcImxhdGl0dWRlXCI6NTEuODgwOTUxOTQsXCJsb25naXR1ZGVcIjowLjc4MzM0NTUzMixcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIk1LVFwifSx7XCJuYW1lXCI6XCJNZWx0b24gKFN1ZmZvbGspXCIsXCJsYXRpdHVkZVwiOjUyLjEwNDQ1NzI4LFwibG9uZ2l0dWRlXCI6MS4zMzgyNTc1ODMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJNRVNcIn0se1wibmFtZVwiOlwiTWlzdGxleVwiLFwibGF0aXR1ZGVcIjo1MS45NDM2NDUzNSxcImxvbmdpdHVkZVwiOjEuMDgxNDEyNTk4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiTUlTXCJ9LHtcIm5hbWVcIjpcIk5lZWRoYW0gTWFya2V0XCIsXCJsYXRpdHVkZVwiOjUyLjE1MjYwMDk1LFwibG9uZ2l0dWRlXCI6MS4wNTUyNzIzNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIk5NVFwifSx7XCJuYW1lXCI6XCJOZXdtYXJrZXRcIixcImxhdGl0dWRlXCI6NTIuMjM3OTU5MjgsXCJsb25naXR1ZGVcIjowLjQwNjIxNzQ4MixcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIk5NS1wifSx7XCJuYW1lXCI6XCJOZXdwb3J0IChFc3NleClcIixcImxhdGl0dWRlXCI6NTEuOTc5ODc3ODEsXCJsb25naXR1ZGVcIjowLjIxNTE0MjYxNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIk5XRVwifSx7XCJuYW1lXCI6XCJOb3J0aCBGYW1icmlkZ2VcIixcImxhdGl0dWRlXCI6NTEuNjQ4NTkwNDEsXCJsb25naXR1ZGVcIjowLjY4MTY3MjUwOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIk5GQVwifSx7XCJuYW1lXCI6XCJOb3J0aCBXYWxzaGFtXCIsXCJsYXRpdHVkZVwiOjUyLjgxNjkxNTgxLFwibG9uZ2l0dWRlXCI6MS4zODQ0NjYxMTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJOV0FcIn0se1wibmFtZVwiOlwiTm9ydGh1bWJlcmxhbmQgUGFya1wiLFwibGF0aXR1ZGVcIjo1MS42MDE3MDA0MSxcImxvbmdpdHVkZVwiOi0wLjA1MzU3NTY1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiTlVNXCJ9LHtcIm5hbWVcIjpcIk5vcndpY2hcIixcImxhdGl0dWRlXCI6NTIuNjI3MTc4MTgsXCJsb25naXR1ZGVcIjoxLjMwNjgyODMzMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIk5SV1wifSx7XCJuYW1lXCI6XCJPdWx0b24gQnJvYWQgTm9ydGhcIixcImxhdGl0dWRlXCI6NTIuNDc3Nzc5ODYsXCJsb25naXR1ZGVcIjoxLjcxNTcyOTcxNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIk9VTlwifSx7XCJuYW1lXCI6XCJPdWx0b24gQnJvYWQgU291dGhcIixcImxhdGl0dWRlXCI6NTIuNDY5NzQ3NzgsXCJsb25naXR1ZGVcIjoxLjcwNzk4MjM2NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIk9VU1wifSx7XCJuYW1lXCI6XCJQb25kZXJzIEVuZFwiLFwibGF0aXR1ZGVcIjo1MS42NDI3NDg2MixcImxvbmdpdHVkZVwiOi0wLjAzNDQ3MzUzNixcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIlBPTlwifSx7XCJuYW1lXCI6XCJQcml0dGxld2VsbFwiLFwibGF0aXR1ZGVcIjo1MS41NTA2OTExNSxcImxvbmdpdHVkZVwiOjAuNzEwNjg5OTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJQUkxcIn0se1wibmFtZVwiOlwiUmF5bGVpZ2hcIixcImxhdGl0dWRlXCI6NTEuNTg5NDU1MDgsXCJsb25naXR1ZGVcIjowLjYwMDYzODYxMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIlJMR1wifSx7XCJuYW1lXCI6XCJSZWVkaGFtIChOb3Jmb2xrKVwiLFwibGF0aXR1ZGVcIjo1Mi41NjQ1MjU5LFwibG9uZ2l0dWRlXCI6MS41NTk2NjYzNzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJSRUVcIn0se1wibmFtZVwiOlwiUm9jaGZvcmRcIixcImxhdGl0dWRlXCI6NTEuNTgxNzMzNDMsXCJsb25naXR1ZGVcIjowLjcwMjMxNzA5MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIlJGRFwifSx7XCJuYW1lXCI6XCJSb3VnaHRvbiBSb2FkXCIsXCJsYXRpdHVkZVwiOjUyLjkxODA0MzY5LFwibG9uZ2l0dWRlXCI6MS4yOTk4MDM0MTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJSTlJcIn0se1wibmFtZVwiOlwiUm95ZG9uXCIsXCJsYXRpdHVkZVwiOjUxLjc3NTQ4OTM3LFwibG9uZ2l0dWRlXCI6MC4wMzYyNjIwMDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJSWU5cIn0se1wibmFtZVwiOlwiUnllIEhvdXNlXCIsXCJsYXRpdHVkZVwiOjUxLjc2OTQxNTQ0LFwibG9uZ2l0dWRlXCI6MC4wMDU2Mzc1NjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJSWUhcIn0se1wibmFtZVwiOlwiU2FsaG91c2VcIixcImxhdGl0dWRlXCI6NTIuNjc1NjAwODEsXCJsb25naXR1ZGVcIjoxLjM5MTQyNjUwNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIlNBSFwifSx7XCJuYW1lXCI6XCJTYXdicmlkZ2V3b3J0aFwiLFwibGF0aXR1ZGVcIjo1MS44MTQzNTEyNyxcImxvbmdpdHVkZVwiOjAuMTYwNDI1MDY4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiU0FXXCJ9LHtcIm5hbWVcIjpcIlNheG11bmRoYW1cIixcImxhdGl0dWRlXCI6NTIuMjE0OTE2OTQsXCJsb25naXR1ZGVcIjoxLjQ5MDE3NjM2MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIlNBWFwifSx7XCJuYW1lXCI6XCJTaGVsZm9yZCAoQ2FtYnMpXCIsXCJsYXRpdHVkZVwiOjUyLjE0ODg0MTAzLFwibG9uZ2l0dWRlXCI6MC4xMzk5ODE5NzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJTRURcIn0se1wibmFtZVwiOlwiU2hlbmZpZWxkXCIsXCJsYXRpdHVkZVwiOjUxLjYzMDg4NDQxLFwibG9uZ2l0dWRlXCI6MC4zMjk4NTQ4NjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJTTkZcIn0se1wibmFtZVwiOlwiU2hlcmluZ2hhbVwiLFwibGF0aXR1ZGVcIjo1Mi45NDA4ODU0MSxcImxvbmdpdHVkZVwiOjEuMjExMzI3MTc4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiU0hNXCJ9LHtcIm5hbWVcIjpcIlNoaXBwZWEgSGlsbFwiLFwibGF0aXR1ZGVcIjo1Mi40MzAyMzM5OCxcImxvbmdpdHVkZVwiOjAuNDEzMzU1ODYzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiU1BQXCJ9LHtcIm5hbWVcIjpcIlNvbWVybGV5dG9uXCIsXCJsYXRpdHVkZVwiOjUyLjUxMDI1MTExLFwibG9uZ2l0dWRlXCI6MS42NTIyNzc1NDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJTWVRcIn0se1wibmFtZVwiOlwiU291dGggV29vZGhhbSBGZXJyZXJzXCIsXCJsYXRpdHVkZVwiOjUxLjY0OTY2ODYxLFwibG9uZ2l0dWRlXCI6MC42MDY2NzI5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiU09GXCJ9LHtcIm5hbWVcIjpcIlNvdXRoZW5kIFZpY3RvcmlhXCIsXCJsYXRpdHVkZVwiOjUxLjU0MTUxNjI3LFwibG9uZ2l0dWRlXCI6MC43MTE1MTQ1OTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJTT1ZcIn0se1wibmFtZVwiOlwiU291dGhtaW5zdGVyXCIsXCJsYXRpdHVkZVwiOjUxLjY2MDYzMDkzLFwibG9uZ2l0dWRlXCI6MC44MzUyMTA2NjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJTTU5cIn0se1wibmFtZVwiOlwiU3Bvb25lciBSb3dcIixcImxhdGl0dWRlXCI6NTIuNTM1MDE5MTksXCJsb25naXR1ZGVcIjoxLjA4NjQ5MTY0MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIlNQTlwifSx7XCJuYW1lXCI6XCJTdCBNYXJnYXJldHMgKEhlcnRzKVwiLFwibGF0aXR1ZGVcIjo1MS43ODc4NDM2LFwibG9uZ2l0dWRlXCI6MC4wMDEyNzg1MjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJTTVRcIn0se1wibmFtZVwiOlwiU3RhbnN0ZWQgQWlycG9ydFwiLFwibGF0aXR1ZGVcIjo1MS44ODg1OTY2LFwibG9uZ2l0dWRlXCI6MC4yNjA4MTgzNixcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIlNTRFwifSx7XCJuYW1lXCI6XCJTdGFuc3RlZCBNb3VudGZpdGNoZXRcIixcImxhdGl0dWRlXCI6NTEuOTAxMzEwMTgsXCJsb25naXR1ZGVcIjowLjE5OTc0NjQ1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiU1NUXCJ9LHtcIm5hbWVcIjpcIlN0b3dtYXJrZXRcIixcImxhdGl0dWRlXCI6NTIuMTg5NzI1NjUsXCJsb25naXR1ZGVcIjoxLjAwMDAxNjU0MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIlNNS1wifSx7XCJuYW1lXCI6XCJTdWRidXJ5IChTdWZmb2xrKVwiLFwibGF0aXR1ZGVcIjo1Mi4wMzYyODY3MyxcImxvbmdpdHVkZVwiOjAuNzM1NDYxNTcxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiU1VZXCJ9LHtcIm5hbWVcIjpcIlRoZXRmb3JkXCIsXCJsYXRpdHVkZVwiOjUyLjQxOTE0NTA5LFwibG9uZ2l0dWRlXCI6MC43NDUwNzg0MjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJUVEZcIn0se1wibmFtZVwiOlwiVGhvcnBlLWxlLVNva2VuXCIsXCJsYXRpdHVkZVwiOjUxLjg0Nzc3Njg0LFwibG9uZ2l0dWRlXCI6MS4xNjE2NDE0NTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJUTFNcIn0se1wibmFtZVwiOlwiVGh1cnN0b25cIixcImxhdGl0dWRlXCI6NTIuMjUwMjY3NjcsXCJsb25naXR1ZGVcIjowLjgwOTUwOTg2MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIlRSU1wifSx7XCJuYW1lXCI6XCJUb3R0ZW5oYW0gSGFsZVwiLFwibGF0aXR1ZGVcIjo1MS41ODgzMTYzOSxcImxvbmdpdHVkZVwiOi0wLjA1OTkyMjM5OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIlRPTVwifSx7XCJuYW1lXCI6XCJUcmltbGV5XCIsXCJsYXRpdHVkZVwiOjUxLjk3NjU0MzYsXCJsb25naXR1ZGVcIjoxLjMxOTU1NTkxNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIlRSTVwifSx7XCJuYW1lXCI6XCJXYWx0aGFtIENyb3NzXCIsXCJsYXRpdHVkZVwiOjUxLjY4NTA3MDE5LFwibG9uZ2l0dWRlXCI6LTAuMDI2NTUwMDUzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiV0xDXCJ9LHtcIm5hbWVcIjpcIldhbHRvbi1vbi10aGUtTmF6ZVwiLFwibGF0aXR1ZGVcIjo1MS44NDYyMDA2OSxcImxvbmdpdHVkZVwiOjEuMjY3OTIwNjk3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiV09OXCJ9LHtcIm5hbWVcIjpcIldhcmUgKEhlcnRzKVwiLFwibGF0aXR1ZGVcIjo1MS44MDc5NjQwOSxcImxvbmdpdHVkZVwiOi0wLjAyODc3MjcxNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIldBUlwifSx7XCJuYW1lXCI6XCJXZWVsZXlcIixcImxhdGl0dWRlXCI6NTEuODUzMTEwNjMsXCJsb25naXR1ZGVcIjoxLjExNTQ5NDU5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIldFRVwifSx7XCJuYW1lXCI6XCJXZXN0IFJ1bnRvblwiLFwibGF0aXR1ZGVcIjo1Mi45MzU1NTAzLFwibG9uZ2l0dWRlXCI6MS4yNDU0NjUzMDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJXUk5cIn0se1wibmFtZVwiOlwiV2VzdGVyZmllbGRcIixcImxhdGl0dWRlXCI6NTIuMDgwODc4MzYsXCJsb25naXR1ZGVcIjoxLjE2NjEzMDk1NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIldGSVwifSx7XCJuYW1lXCI6XCJXaGl0ZSBOb3RsZXlcIixcImxhdGl0dWRlXCI6NTEuODM4OTI0MSxcImxvbmdpdHVkZVwiOjAuNTk1ODc1OTUyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiV05ZXCJ9LHtcIm5hbWVcIjpcIldoaXR0bGVzZWFcIixcImxhdGl0dWRlXCI6NTIuNTQ5OTU1NjksXCJsb25naXR1ZGVcIjotMC4xMTgyMjU0NjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJXTEVcIn0se1wibmFtZVwiOlwiV2hpdHRsZXNmb3JkIFBhcmt3YXlcIixcImxhdGl0dWRlXCI6NTIuMTAzNjAwMDksXCJsb25naXR1ZGVcIjowLjE2NTYxODYwNixcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIldMRlwifSx7XCJuYW1lXCI6XCJXaWNrZm9yZFwiLFwibGF0aXR1ZGVcIjo1MS42MTUwMjkyOCxcImxvbmdpdHVkZVwiOjAuNTE5MTkzOTM5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiV0lDXCJ9LHtcIm5hbWVcIjpcIldpY2toYW0gTWFya2V0XCIsXCJsYXRpdHVkZVwiOjUyLjE1MTEyMDA2LFwibG9uZ2l0dWRlXCI6MS4zOTg2ODg1NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIldDTVwifSx7XCJuYW1lXCI6XCJXaXRoYW1cIixcImxhdGl0dWRlXCI6NTEuODA1OTc5ODksXCJsb25naXR1ZGVcIjowLjYzOTE0MzYxNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIldUTVwifSx7XCJuYW1lXCI6XCJXaXZlbmhvZVwiLFwibGF0aXR1ZGVcIjo1MS44NTY1NDI3NixcImxvbmdpdHVkZVwiOjAuOTU2MTQ2MDA5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiV0lWXCJ9LHtcIm5hbWVcIjpcIldvb2RicmlkZ2VcIixcImxhdGl0dWRlXCI6NTIuMDkwNDY0NTIsXCJsb25naXR1ZGVcIjoxLjMxNzc5MTQyMixcInN0YXRpb25PcGVyYXRvclwiOlwiTEVcIixcImNyc0NvZGVcIjpcIldEQlwifSx7XCJuYW1lXCI6XCJXb3JzdGVhZFwiLFwibGF0aXR1ZGVcIjo1Mi43NzczMTYwMSxcImxvbmdpdHVkZVwiOjEuNDA0MjMwNzg1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMRVwiLFwiY3JzQ29kZVwiOlwiV1JUXCJ9LHtcIm5hbWVcIjpcIldyYWJuZXNzXCIsXCJsYXRpdHVkZVwiOjUxLjkzOTQ1ODY4LFwibG9uZ2l0dWRlXCI6MS4xNzE5MTU5NDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJXUkJcIn0se1wibmFtZVwiOlwiV3ltb25kaGFtXCIsXCJsYXRpdHVkZVwiOjUyLjU2NDg2MDY1LFwibG9uZ2l0dWRlXCI6MS4xMTc2NjIzMTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxFXCIsXCJjcnNDb2RlXCI6XCJXTURcIn0se1wibmFtZVwiOlwiQWNvY2tzIEdyZWVuXCIsXCJsYXRpdHVkZVwiOjUyLjQ0OTMzMDU3LFwibG9uZ2l0dWRlXCI6LTEuODE4OTg0NzkyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQUNHXCJ9LHtcIm5hbWVcIjpcIkFjdG9uIEJyaWRnZSAoQ2hlc2hpcmUpXCIsXCJsYXRpdHVkZVwiOjUzLjI2NTk4NTA0LFwibG9uZ2l0dWRlXCI6LTIuNjAyNjY2MjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJBQ0JcIn0se1wibmFtZVwiOlwiQWRkZXJsZXkgUGFya1wiLFwibGF0aXR1ZGVcIjo1Mi40ODMwOTQ3NixcImxvbmdpdHVkZVwiOi0xLjg1NTkzOTkzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQUREXCJ9LHtcIm5hbWVcIjpcIkFsYnJpZ2h0b25cIixcImxhdGl0dWRlXCI6NTIuNjM3OTU2MzksXCJsb25naXR1ZGVcIjotMi4yNjg5MDYyOTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJBTEJcIn0se1wibmFtZVwiOlwiQWx2ZWNodXJjaFwiLFwibGF0aXR1ZGVcIjo1Mi4zNDYwODQ3NSxcImxvbmdpdHVkZVwiOi0xLjk2NzY1OTk5NixcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkFMVlwifSx7XCJuYW1lXCI6XCJBcHNsZXlcIixcImxhdGl0dWRlXCI6NTEuNzMyNTI0MTgsXCJsb25naXR1ZGVcIjotMC40NjI5MjQzNjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJBUFNcIn0se1wibmFtZVwiOlwiQXNwbGV5IEd1aXNlXCIsXCJsYXRpdHVkZVwiOjUyLjAyMTI0Nzg2LFwibG9uZ2l0dWRlXCI6LTAuNjMyMzI3MDI3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQVBHXCJ9LHtcIm5hbWVcIjpcIkFzdG9uXCIsXCJsYXRpdHVkZVwiOjUyLjUwNTEzODk3LFwibG9uZ2l0dWRlXCI6LTEuODcxNzc5NDMyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQVNUXCJ9LHtcIm5hbWVcIjpcIkF0aGVyc3RvbmVcIixcImxhdGl0dWRlXCI6NTIuNTc4OTgyMSxcImxvbmdpdHVkZVwiOi0xLjU1MjgxMjM1MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkFUSFwifSx7XCJuYW1lXCI6XCJCYXJsYXN0b25cIixcImxhdGl0dWRlXCI6NTIuOTQyODg1NzgsXCJsb25naXR1ZGVcIjotMi4xNjgxMTI3MjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJCUlRcIn0se1wibmFtZVwiOlwiQmFybnQgR3JlZW5cIixcImxhdGl0dWRlXCI6NTIuMzYxMDkzOTIsXCJsb25naXR1ZGVcIjotMS45OTI0NjY2MTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJCVEdcIn0se1wibmFtZVwiOlwiQmVhcmxleVwiLFwibGF0aXR1ZGVcIjo1Mi4yNDQ0MjEyMyxcImxvbmdpdHVkZVwiOi0xLjc1MDI2Mzg1MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkJFUlwifSx7XCJuYW1lXCI6XCJCZWRmb3JkIFN0IEpvaG5zXCIsXCJsYXRpdHVkZVwiOjUyLjEyOTQ5MjAzLFwibG9uZ2l0dWRlXCI6LTAuNDY3NTAyNzgxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQlNKXCJ9LHtcIm5hbWVcIjpcIkJlZHdvcnRoXCIsXCJsYXRpdHVkZVwiOjUyLjQ3OTMxMzU2LFwibG9uZ2l0dWRlXCI6LTEuNDY3MzkxMTg5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQkVIXCJ9LHtcIm5hbWVcIjpcIkJlcmtoYW1zdGVkXCIsXCJsYXRpdHVkZVwiOjUxLjc2MzEzNzM4LFwibG9uZ2l0dWRlXCI6LTAuNTYyMDA1MTM0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQktNXCJ9LHtcIm5hbWVcIjpcIkJlcmtzd2VsbFwiLFwibGF0aXR1ZGVcIjo1Mi4zOTU4OTU4MSxcImxvbmdpdHVkZVwiOi0xLjY0Mjg0NDkxOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkJLV1wifSx7XCJuYW1lXCI6XCJCZXJtdWRhIFBhcmtcIixcImxhdGl0dWRlXCI6NTIuNTA0NDc5LFwibG9uZ2l0dWRlXCI6LTEuNDczODc5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQkVQXCJ9LHtcIm5hbWVcIjpcIkJlc2NvdCBTdGFkaXVtXCIsXCJsYXRpdHVkZVwiOjUyLjU2Mjc0NDkzLFwibG9uZ2l0dWRlXCI6LTEuOTkxMTA0NDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJCU0NcIn0se1wibmFtZVwiOlwiQmlsYnJvb2tcIixcImxhdGl0dWRlXCI6NTIuNjIzNzMxNCxcImxvbmdpdHVkZVwiOi0yLjE4NjA5MTgwNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkJCS1wifSx7XCJuYW1lXCI6XCJCaXJtaW5naGFtIFNub3cgSGlsbFwiLFwibGF0aXR1ZGVcIjo1Mi40ODM1ODk1NixcImxvbmdpdHVkZVwiOi0xLjg5OTgyMDk2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkJTV1wifSx7XCJuYW1lXCI6XCJCbGFrZSBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTIuNjA0ODk3LFwibG9uZ2l0dWRlXCI6LTEuODQ0OTA4ODMxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQktUXCJ9LHtcIm5hbWVcIjpcIkJsYWtlZG93blwiLFwibGF0aXR1ZGVcIjo1Mi40MDYxODQxNSxcImxvbmdpdHVkZVwiOi0yLjE3NjM1NTA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQktEXCJ9LHtcIm5hbWVcIjpcIkJsZXRjaGxleVwiLFwibGF0aXR1ZGVcIjo1MS45OTUzNDQ5OCxcImxvbmdpdHVkZVwiOi0wLjczNjMxNjEzNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkJMWVwifSx7XCJuYW1lXCI6XCJCbG94d2ljaFwiLFwibGF0aXR1ZGVcIjo1Mi42MTgyMTMyOSxcImxvbmdpdHVkZVwiOi0yLjAxMTQ3Njk0NixcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkJMWFwifSx7XCJuYW1lXCI6XCJCbG94d2ljaCBOb3J0aFwiLFwibGF0aXR1ZGVcIjo1Mi42MjU2NzM5OSxcImxvbmdpdHVkZVwiOi0yLjAxOTE2MTA0MixcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkJXTlwifSx7XCJuYW1lXCI6XCJCb3JkZXNsZXlcIixcImxhdGl0dWRlXCI6NTIuNDcxODgxNTQsXCJsb25naXR1ZGVcIjotMS44Nzc3NjQ4MzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJCQlNcIn0se1wibmFtZVwiOlwiQm91cm52aWxsZVwiLFwibGF0aXR1ZGVcIjo1Mi40MjY5NzA1LFwibG9uZ2l0dWRlXCI6LTEuOTI2NDIxNjgyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQlJWXCJ9LHtcIm5hbWVcIjpcIkJvdyBCcmlja2hpbGxcIixcImxhdGl0dWRlXCI6NTIuMDA0MzExNDEsXCJsb25naXR1ZGVcIjotMC42OTYwNzIyNjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJCV0JcIn0se1wibmFtZVwiOlwiQnJpY2tldCBXb29kXCIsXCJsYXRpdHVkZVwiOjUxLjcwNTQyOTQ5LFwibG9uZ2l0dWRlXCI6LTAuMzU5MTE2MzE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQldPXCJ9LHtcIm5hbWVcIjpcIkJyb21zZ3JvdmVcIixcImxhdGl0dWRlXCI6NTIuMzIyNzA0MTQsXCJsb25naXR1ZGVcIjotMi4wNDgzNzQzOTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJCTVZcIn0se1wibmFtZVwiOlwiQnV0bGVycyBMYW5lXCIsXCJsYXRpdHVkZVwiOjUyLjU5MjQ4MTUxLFwibG9uZ2l0dWRlXCI6LTEuODM4MDE0NDM0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQlVMXCJ9LHtcIm5hbWVcIjpcIkNhbmxleVwiLFwibGF0aXR1ZGVcIjo1Mi4zOTkyNTU2OCxcImxvbmdpdHVkZVwiOi0xLjU0NzU3NjU5MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkNOTFwifSx7XCJuYW1lXCI6XCJDYW5ub2NrXCIsXCJsYXRpdHVkZVwiOjUyLjY4NjE3NTgsXCJsb25naXR1ZGVcIjotMi4wMjIxNDYyNjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJDQU9cIn0se1wibmFtZVwiOlwiQ2hlZGRpbmd0b25cIixcImxhdGl0dWRlXCI6NTEuODU3OTI0NjksXCJsb25naXR1ZGVcIjotMC42NjIxNDYyNTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJDRURcIn0se1wibmFtZVwiOlwiQ2hlc3RlciBSb2FkXCIsXCJsYXRpdHVkZVwiOjUyLjUzNTY1NjQxLFwibG9uZ2l0dWRlXCI6LTEuODMyNDczODA4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQ1JEXCJ9LHtcIm5hbWVcIjpcIkNsYXZlcmRvblwiLFwibGF0aXR1ZGVcIjo1Mi4yNzcxMDIwNixcImxvbmdpdHVkZVwiOi0xLjY5NjU2NjY3OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkNMVlwifSx7XCJuYW1lXCI6XCJDb2RzYWxsXCIsXCJsYXRpdHVkZVwiOjUyLjYyNzMwMTc0LFwibG9uZ2l0dWRlXCI6LTIuMjAxNzY3MzEzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQ1NMXCJ9LHtcIm5hbWVcIjpcIkNvbGVzaGlsbCBQYXJrd2F5XCIsXCJsYXRpdHVkZVwiOjUyLjUxNjUzNTksXCJsb25naXR1ZGVcIjotMS43MDgxODMwNTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJDRUhcIn0se1wibmFtZVwiOlwiQ29sd2FsbFwiLFwibGF0aXR1ZGVcIjo1Mi4wNzk4NzU4NCxcImxvbmdpdHVkZVwiOi0yLjM1Njk2MjE2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkNXTFwifSx7XCJuYW1lXCI6XCJDb3NlbGV5XCIsXCJsYXRpdHVkZVwiOjUyLjU0NTA5MzYsXCJsb25naXR1ZGVcIjotMi4wODU3NzkxNTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJDU1lcIn0se1wibmFtZVwiOlwiQ29zZm9yZFwiLFwibGF0aXR1ZGVcIjo1Mi42NDQ5NjgsXCJsb25naXR1ZGVcIjotMi4zMDYxOTQ2NjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJDT1NcIn0se1wibmFtZVwiOlwiQ292ZW50cnkgQXJlbmFcIixcImxhdGl0dWRlXCI6NTIuNDQ4NDU3LFwibG9uZ2l0dWRlXCI6LTEuNDk2NjI4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiQ0FBXCJ9LHtcIm5hbWVcIjpcIkNyYWRsZXkgSGVhdGhcIixcImxhdGl0dWRlXCI6NTIuNDY5NjYyNTMsXCJsb25naXR1ZGVcIjotMi4wOTA0OTAzOTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJDUkFcIn0se1wibmFtZVwiOlwiRGFuemV5XCIsXCJsYXRpdHVkZVwiOjUyLjMyNDM3NjksXCJsb25naXR1ZGVcIjotMS44MjEyNDEyMjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJEWllcIn0se1wibmFtZVwiOlwiRHJvaXR3aWNoIFNwYVwiLFwibGF0aXR1ZGVcIjo1Mi4yNjgyMTUzNSxcImxvbmdpdHVkZVwiOi0yLjE1ODM2ODUzNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkRUV1wifSx7XCJuYW1lXCI6XCJEdWRkZXN0b25cIixcImxhdGl0dWRlXCI6NTIuNDg4MzcxODMsXCJsb25naXR1ZGVcIjotMS44NzEzODYzNzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJEVURcIn0se1wibmFtZVwiOlwiRHVkbGV5IFBvcnRcIixcImxhdGl0dWRlXCI6NTIuNTI0NjYxNzksXCJsb25naXR1ZGVcIjotMi4wNDk0ODAzMTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJERFBcIn0se1wibmFtZVwiOlwiRWFybHN3b29kIChXZXN0IE1pZGxhbmRzKVwiLFwibGF0aXR1ZGVcIjo1Mi4zNjY1OTU2NixcImxvbmdpdHVkZVwiOi0xLjg2MTE2NTgyMixcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkVXRFwifSx7XCJuYW1lXCI6XCJFcmRpbmd0b25cIixcImxhdGl0dWRlXCI6NTIuNTI4NDczNzMsXCJsb25naXR1ZGVcIjotMS44MzkyODE4NzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJFUkRcIn0se1wibmFtZVwiOlwiRmVubnkgU3RyYXRmb3JkXCIsXCJsYXRpdHVkZVwiOjUxLjk5OTg5OTk2LFwibG9uZ2l0dWRlXCI6LTAuNzE3NjcyNzY4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiRkVOXCJ9LHtcIm5hbWVcIjpcIkZpdmUgV2F5c1wiLFwibGF0aXR1ZGVcIjo1Mi40NzExMDM1NSxcImxvbmdpdHVkZVwiOi0xLjkxMjk1MTQ5NixcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkZXWVwifSx7XCJuYW1lXCI6XCJGb3VyIE9ha3NcIixcImxhdGl0dWRlXCI6NTIuNTc5NzkxNDcsXCJsb25naXR1ZGVcIjotMS44MjgwNDA1NjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJGT0tcIn0se1wibmFtZVwiOlwiR2Fyc3RvbiAoSGVydGZvcmRzaGlyZSlcIixcImxhdGl0dWRlXCI6NTEuNjg2NzIzNzMsXCJsb25naXR1ZGVcIjotMC4zODE2NjcwOTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJHU05cIn0se1wibmFtZVwiOlwiR3JhdmVsbHkgSGlsbFwiLFwibGF0aXR1ZGVcIjo1Mi41MTUwMDU4MixcImxvbmdpdHVkZVwiOi0xLjg1MjU5MzYyMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkdWSFwifSx7XCJuYW1lXCI6XCJHcmVhdCBNYWx2ZXJuXCIsXCJsYXRpdHVkZVwiOjUyLjEwOTIwNjg1LFwibG9uZ2l0dWRlXCI6LTIuMzE4MjgxNjYyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiR01WXCJ9LHtcIm5hbWVcIjpcIkhhZ2xleVwiLFwibGF0aXR1ZGVcIjo1Mi40MjI0MDY4NixcImxvbmdpdHVkZVwiOi0yLjE0NzAwOTEyMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkhBR1wifSx7XCJuYW1lXCI6XCJIYWxsIEdyZWVuXCIsXCJsYXRpdHVkZVwiOjUyLjQzNjc4MTc5LFwibG9uZ2l0dWRlXCI6LTEuODQ1NDk5NzI0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiSExHXCJ9LHtcIm5hbWVcIjpcIkhhbXB0b24taW4tQXJkZW5cIixcImxhdGl0dWRlXCI6NTIuNDI5MDQ5MDgsXCJsb25naXR1ZGVcIjotMS42OTk5MzY2MTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJISUFcIn0se1wibmFtZVwiOlwiSGFtc3RlYWQgKEJpcm1pbmdoYW0pXCIsXCJsYXRpdHVkZVwiOjUyLjUzMTA3ODczLFwibG9uZ2l0dWRlXCI6LTEuOTI4OTAxMjk3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiSFNEXCJ9LHtcIm5hbWVcIjpcIkhhcnRmb3JkIChDaGVzaGlyZSlcIixcImxhdGl0dWRlXCI6NTMuMjQxNzcyMzIsXCJsb25naXR1ZGVcIjotMi41NTM2MjUyNDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJIVEZcIn0se1wibmFtZVwiOlwiSGFydGxlYnVyeVwiLFwibGF0aXR1ZGVcIjo1Mi4zMzQ0NTYyNSxcImxvbmdpdHVkZVwiOi0yLjIyMDY4NTE1MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkhCWVwifSx7XCJuYW1lXCI6XCJIZWRuZXNmb3JkXCIsXCJsYXRpdHVkZVwiOjUyLjcwOTczMTMzLFwibG9uZ2l0dWRlXCI6LTIuMDAyMzIzODcyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiSE5GXCJ9LHtcIm5hbWVcIjpcIkhlbWVsIEhlbXBzdGVhZFwiLFwibGF0aXR1ZGVcIjo1MS43NDIzMzU3NCxcImxvbmdpdHVkZVwiOi0wLjQ5MDc2NDEwMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkhNTFwifSx7XCJuYW1lXCI6XCJIZW5sZXktaW4tQXJkZW5cIixcImxhdGl0dWRlXCI6NTIuMjkxMDUwNjYsXCJsb25naXR1ZGVcIjotMS43ODQ0NDIzMTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJITkxcIn0se1wibmFtZVwiOlwiSG93IFdvb2QgKEhlcnRzKVwiLFwibGF0aXR1ZGVcIjo1MS43MTc3NDQwNCxcImxvbmdpdHVkZVwiOi0wLjM0NDY3MTI0NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkhXV1wifSx7XCJuYW1lXCI6XCJKZXdlbGxlcnkgUXVhcnRlclwiLFwibGF0aXR1ZGVcIjo1Mi40ODk0NDM3NyxcImxvbmdpdHVkZVwiOi0xLjkxMzIwOTg0NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkpFUVwifSx7XCJuYW1lXCI6XCJLZW1wc3RvbiBIYXJkd2lja1wiLFwibGF0aXR1ZGVcIjo1Mi4wOTIyMzEyNCxcImxvbmdpdHVkZVwiOi0wLjUwMzkxNjg1MixcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIktNSFwifSx7XCJuYW1lXCI6XCJLaWRkZXJtaW5zdGVyXCIsXCJsYXRpdHVkZVwiOjUyLjM4NDQ5NjM0LFwibG9uZ2l0dWRlXCI6LTIuMjM5NDQ3NDQ1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiS0lEXCJ9LHtcIm5hbWVcIjpcIktpbmdzIExhbmdsZXlcIixcImxhdGl0dWRlXCI6NTEuNzA2MzU3NDksXCJsb25naXR1ZGVcIjotMC40Mzg0MTA5ODIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJLR0xcIn0se1wibmFtZVwiOlwiS2luZ3MgTm9ydG9uXCIsXCJsYXRpdHVkZVwiOjUyLjQxMzQ4OTQsXCJsb25naXR1ZGVcIjotMS45MzM3OTUyOTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJLTk5cIn0se1wibmFtZVwiOlwiTGFuZHl3b29kXCIsXCJsYXRpdHVkZVwiOjUyLjY1NzEzODYyLFwibG9uZ2l0dWRlXCI6LTIuMDIwNjUzMTkzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiTEFXXCJ9LHtcIm5hbWVcIjpcIkxhbmdsZXkgR3JlZW5cIixcImxhdGl0dWRlXCI6NTIuNDkzODgwNyxcImxvbmdpdHVkZVwiOi0yLjAwNDk2MzcyNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkxHR1wifSx7XCJuYW1lXCI6XCJMZWEgSGFsbFwiLFwibGF0aXR1ZGVcIjo1Mi40ODA2NTE1MSxcImxvbmdpdHVkZVwiOi0xLjc4NjAyMDA3MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkxFSFwifSx7XCJuYW1lXCI6XCJMZWRidXJ5XCIsXCJsYXRpdHVkZVwiOjUyLjA0NDk0NTMyLFwibG9uZ2l0dWRlXCI6LTIuNDI0OTgyMTM4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiTEVEXCJ9LHtcIm5hbWVcIjpcIkxlaWdodG9uIEJ1enphcmRcIixcImxhdGl0dWRlXCI6NTEuOTE2MzEzOTEsXCJsb25naXR1ZGVcIjotMC42NzcwMDE4MTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJMQlpcIn0se1wibmFtZVwiOlwiTGljaGZpZWxkIENpdHlcIixcImxhdGl0dWRlXCI6NTIuNjgwMzg1NjgsXCJsb25naXR1ZGVcIjotMS44MjU0MjcwMDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJMSUNcIn0se1wibmFtZVwiOlwiTGljaGZpZWxkIFRyZW50IFZhbGxleVwiLFwibGF0aXR1ZGVcIjo1Mi42ODY5MDg1NSxcImxvbmdpdHVkZVwiOi0xLjgwMDIzNjM0OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkxUVlwifSx7XCJuYW1lXCI6XCJMaWRsaW5ndG9uXCIsXCJsYXRpdHVkZVwiOjUyLjA0MTU0Nzg3LFwibG9uZ2l0dWRlXCI6LTAuNTU4OTE4NzExLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiTElEXCJ9LHtcIm5hbWVcIjpcIkxvbmcgQnVja2J5XCIsXCJsYXRpdHVkZVwiOjUyLjI5NDcyNzA0LFwibG9uZ2l0dWRlXCI6LTEuMDg2NDcwODIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJMQktcIn0se1wibmFtZVwiOlwiTG9uZ2JyaWRnZVwiLFwibGF0aXR1ZGVcIjo1Mi4zOTY0MjQ4MyxcImxvbmdpdHVkZVwiOi0xLjk4MTI5MTEyNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIkxPQlwifSx7XCJuYW1lXCI6XCJMeWUgKFdlc3QgTWlkbGFuZHMpXCIsXCJsYXRpdHVkZVwiOjUyLjQ1OTkzMDg3LFwibG9uZ2l0dWRlXCI6LTIuMTE1OTMyMjc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiTFlFXCJ9LHtcIm5hbWVcIjpcIk1hbHZlcm4gTGlua1wiLFwibGF0aXR1ZGVcIjo1Mi4xMjUzODYwMyxcImxvbmdpdHVkZVwiOi0yLjMxOTg1NzY1NixcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIk1WTFwifSx7XCJuYW1lXCI6XCJNYXJzdG9uIEdyZWVuXCIsXCJsYXRpdHVkZVwiOjUyLjQ2NzE5NzE1LFwibG9uZ2l0dWRlXCI6LTEuNzU1NjE0MzU3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiTUdOXCJ9LHtcIm5hbWVcIjpcIk1pbGxicm9vayAoQmVkcylcIixcImxhdGl0dWRlXCI6NTIuMDUzODQ4MzYsXCJsb25naXR1ZGVcIjotMC41MzI2OTI2MDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJNTEJcIn0se1wibmFtZVwiOlwiTWlsdG9uIEtleW5lcyBDZW50cmFsXCIsXCJsYXRpdHVkZVwiOjUyLjAzNDI5OTk4LFwibG9uZ2l0dWRlXCI6LTAuNzc0MTQyNTY2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiTUtDXCJ9LHtcIm5hbWVcIjpcIk5vcnRoYW1wdG9uXCIsXCJsYXRpdHVkZVwiOjUyLjIzNzUwOTI1LFwibG9uZ2l0dWRlXCI6LTAuOTA2NjUyMzE5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiTk1QXCJ9LHtcIm5hbWVcIjpcIk5vcnRoZmllbGRcIixcImxhdGl0dWRlXCI6NTIuNDA4MTk4NzEsXCJsb25naXR1ZGVcIjotMS45NjU4NTA1MTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJORkRcIn0se1wibmFtZVwiOlwiTm9ydG9uIEJyaWRnZVwiLFwibGF0aXR1ZGVcIjo1Mi44NjY3MTkxOSxcImxvbmdpdHVkZVwiOi0yLjE5MDU0NjQ5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIk5UQlwifSx7XCJuYW1lXCI6XCJOdW5lYXRvblwiLFwibGF0aXR1ZGVcIjo1Mi41MjYzODg3NixcImxvbmdpdHVkZVwiOi0xLjQ2Mzg3MzkwMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIk5VTlwifSx7XCJuYW1lXCI6XCJPYWtlbmdhdGVzXCIsXCJsYXRpdHVkZVwiOjUyLjY5MzQxNDAzLFwibG9uZ2l0dWRlXCI6LTIuNDUwMTkwNzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJPS05cIn0se1wibmFtZVwiOlwiT2xkIEhpbGxcIixcImxhdGl0dWRlXCI6NTIuNDcwOTQyNDIsXCJsb25naXR1ZGVcIjotMi4wNTYxOTE5MzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJPSExcIn0se1wibmFtZVwiOlwiT2x0b25cIixcImxhdGl0dWRlXCI6NTIuNDM4NTE4ODgsXCJsb25naXR1ZGVcIjotMS44MDQzMTgzOTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJPTFRcIn0se1wibmFtZVwiOlwiUGFyayBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTEuNzI1NDYwMzQsXCJsb25naXR1ZGVcIjotMC4zNDAyNzcxOTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJQS1RcIn0se1wibmFtZVwiOlwiUGVua3JpZGdlXCIsXCJsYXRpdHVkZVwiOjUyLjcyMzUxNTcyLFwibG9uZ2l0dWRlXCI6LTIuMTE5Mjk1MTYxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiUEtHXCJ9LHtcIm5hbWVcIjpcIlBlcnJ5IEJhcnJcIixcImxhdGl0dWRlXCI6NTIuNTE2NDk1NDMsXCJsb25naXR1ZGVcIjotMS45MDE5NTY2NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIlBSWVwifSx7XCJuYW1lXCI6XCJQb2xlc3dvcnRoXCIsXCJsYXRpdHVkZVwiOjUyLjYyNTkzMjUsXCJsb25naXR1ZGVcIjotMS42MDk5NTA3NzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJQU1dcIn0se1wibmFtZVwiOlwiUmVkZGl0Y2hcIixcImxhdGl0dWRlXCI6NTIuMzA2MzM4NyxcImxvbmdpdHVkZVwiOi0xLjk0NTI0ODcwNixcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIlJEQ1wifSx7XCJuYW1lXCI6XCJSaWRnbW9udFwiLFwibGF0aXR1ZGVcIjo1Mi4wMjY0MTM5MSxcImxvbmdpdHVkZVwiOi0wLjU5NDU0ODQ0OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIlJJRFwifSx7XCJuYW1lXCI6XCJSb3dsZXkgUmVnaXNcIixcImxhdGl0dWRlXCI6NTIuNDc3MzM0NzksXCJsb25naXR1ZGVcIjotMi4wMzA4NzU0NDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJST1dcIn0se1wibmFtZVwiOlwiUnVnZWxleSBUb3duXCIsXCJsYXRpdHVkZVwiOjUyLjc1NDM5Mzk4LFwibG9uZ2l0dWRlXCI6LTEuOTM2ODM1NzA2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiUkdUXCJ9LHtcIm5hbWVcIjpcIlJ1Z2VsZXkgVHJlbnQgVmFsbGV5XCIsXCJsYXRpdHVkZVwiOjUyLjc3MDAzMjExLFwibG9uZ2l0dWRlXCI6LTEuOTI5NTUwMjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJSR0xcIn0se1wibmFtZVwiOlwiU2FuZHdlbGwgJiBEdWRsZXlcIixcImxhdGl0dWRlXCI6NTIuNTA4NjI0MTEsXCJsb25naXR1ZGVcIjotMi4wMTE3NDMwNixcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIlNBRFwifSx7XCJuYW1lXCI6XCJTZWxseSBPYWtcIixcImxhdGl0dWRlXCI6NTIuNDQxOTg5NzUsXCJsb25naXR1ZGVcIjotMS45MzU4MTIyNDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJTTFlcIn0se1wibmFtZVwiOlwiU2hlbnN0b25lXCIsXCJsYXRpdHVkZVwiOjUyLjYzOTA1ODg2LFwibG9uZ2l0dWRlXCI6LTEuODQ0Nzg4MDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJTRU5cIn0se1wibmFtZVwiOlwiU2hpZm5hbFwiLFwibGF0aXR1ZGVcIjo1Mi42NjYwODY0NixcImxvbmdpdHVkZVwiOi0yLjM3MTg0ODg2NixcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIlNGTlwifSx7XCJuYW1lXCI6XCJTaGlybGV5XCIsXCJsYXRpdHVkZVwiOjUyLjQwMzQzNjI5LFwibG9uZ2l0dWRlXCI6LTEuODQ1MTc1MjYzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiU1JMXCJ9LHtcIm5hbWVcIjpcIlNtYWxsIEhlYXRoXCIsXCJsYXRpdHVkZVwiOjUyLjQ2Mzc2OTkxLFwibG9uZ2l0dWRlXCI6LTEuODU5Mzg4NDE2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiU01BXCJ9LHtcIm5hbWVcIjpcIlNtZXRod2ljayBHYWx0b24gQnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUyLjUwMTc5MDU2LFwibG9uZ2l0dWRlXCI6LTEuOTgwNDk1MTA1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiU0dCXCJ9LHtcIm5hbWVcIjpcIlNtZXRod2ljayBSb2xmZSBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTIuNDk2Mzk0NDEsXCJsb25naXR1ZGVcIjotMS45NzA2NDMxMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIlNNUlwifSx7XCJuYW1lXCI6XCJTcHJpbmcgUm9hZFwiLFwibGF0aXR1ZGVcIjo1Mi40NDM0MjM3MixcImxvbmdpdHVkZVwiOi0xLjgzNzM4NDcwOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIlNSSVwifSx7XCJuYW1lXCI6XCJTdCBBbGJhbnMgQWJiZXlcIixcImxhdGl0dWRlXCI6NTEuNzQ0NzM2MDcsXCJsb25naXR1ZGVcIjotMC4zNDI1NjkyOTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJTQUFcIn0se1wibmFtZVwiOlwiU3RlY2hmb3JkXCIsXCJsYXRpdHVkZVwiOjUyLjQ4NDgyOTYxLFwibG9uZ2l0dWRlXCI6LTEuODExMDM0MjU0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiU0NGXCJ9LHtcIm5hbWVcIjpcIlN0ZXdhcnRieVwiLFwibGF0aXR1ZGVcIjo1Mi4wNjkwOTE3NyxcImxvbmdpdHVkZVwiOi0wLjUyMDY4MTI5MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIlNXUlwifSx7XCJuYW1lXCI6XCJTdG9uZSAoU3RhZmZzKVwiLFwibGF0aXR1ZGVcIjo1Mi45MDgzOTI3LFwibG9uZ2l0dWRlXCI6LTIuMTU1MDQyODExLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiU05FXCJ9LHtcIm5hbWVcIjpcIlN0b3VyYnJpZGdlIEp1bmN0aW9uXCIsXCJsYXRpdHVkZVwiOjUyLjQ0NzU5NTMsXCJsb25naXR1ZGVcIjotMi4xMzM4NTA2MTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJTQkpcIn0se1wibmFtZVwiOlwiU3RvdXJicmlkZ2UgVG93blwiLFwibGF0aXR1ZGVcIjo1Mi40NTU1ODczNCxcImxvbmdpdHVkZVwiOi0yLjE0MTgyMTY5NixcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIlNCVFwifSx7XCJuYW1lXCI6XCJTdHJhdGZvcmQtdXBvbi1Bdm9uXCIsXCJsYXRpdHVkZVwiOjUyLjE5NDI1NzY0LFwibG9uZ2l0dWRlXCI6LTEuNzE2Mjk2MzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJTQVZcIn0se1wibmFtZVwiOlwiU3RyYXRmb3JkLXVwb24tQXZvbiBQYXJrd2F5XCIsXCJsYXRpdHVkZVwiOjUyLjIwNzc3MSxcImxvbmdpdHVkZVwiOi0xLjczMjg4NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIlNUWVwifSx7XCJuYW1lXCI6XCJTdXR0b24gQ29sZGZpZWxkXCIsXCJsYXRpdHVkZVwiOjUyLjU2NDk1MzE2LFwibG9uZ2l0dWRlXCI6LTEuODI0ODUyOTUyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiU1VUXCJ9LHtcIm5hbWVcIjpcIlRhbWUgQnJpZGdlIFBhcmt3YXlcIixcImxhdGl0dWRlXCI6NTIuNTUyOTQzNjgsXCJsb25naXR1ZGVcIjotMS45NzYyMDk5OTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJUQUJcIn0se1wibmFtZVwiOlwiVGFtd29ydGhcIixcImxhdGl0dWRlXCI6NTIuNjM3MTI5NjMsXCJsb25naXR1ZGVcIjotMS42ODcyNjk0MDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJUQU1cIn0se1wibmFtZVwiOlwiVGVsZm9yZCBDZW50cmFsXCIsXCJsYXRpdHVkZVwiOjUyLjY4MTEyMzM5LFwibG9uZ2l0dWRlXCI6LTIuNDQwOTgxOTYzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiVEZDXCJ9LHtcIm5hbWVcIjpcIlRoZSBIYXd0aG9ybnNcIixcImxhdGl0dWRlXCI6NTIuNTA1MzgyNzYsXCJsb25naXR1ZGVcIjotMS45NjQwMDcyOTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJUSFdcIn0se1wibmFtZVwiOlwiVGhlIExha2VzIChXYXJrcylcIixcImxhdGl0dWRlXCI6NTIuMzU5NDc0MTUsXCJsb25naXR1ZGVcIjotMS44NDU3Njk0ODgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJUTEtcIn0se1wibmFtZVwiOlwiVGlsZSBIaWxsXCIsXCJsYXRpdHVkZVwiOjUyLjM5NTExODU5LFwibG9uZ2l0dWRlXCI6LTEuNTk2ODUxNjc5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiVEhMXCJ9LHtcIm5hbWVcIjpcIlRpcHRvblwiLFwibGF0aXR1ZGVcIjo1Mi41MzA0NTI1MyxcImxvbmdpdHVkZVwiOi0yLjA2NTcwMjM0NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIlRJUFwifSx7XCJuYW1lXCI6XCJUcmluZ1wiLFwibGF0aXR1ZGVcIjo1MS44MDA3NDU5LFwibG9uZ2l0dWRlXCI6LTAuNjIyNDMzMDI4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiVFJJXCJ9LHtcIm5hbWVcIjpcIlR5c2VsZXlcIixcImxhdGl0dWRlXCI6NTIuNDU0MTI0NSxcImxvbmdpdHVkZVwiOi0xLjgzOTExMTIwMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIlRZU1wifSx7XCJuYW1lXCI6XCJVbml2ZXJzaXR5IChCaXJtaW5naGFtKVwiLFwibGF0aXR1ZGVcIjo1Mi40NTEyNTAxOSxcImxvbmdpdHVkZVwiOi0xLjkzNjY4MTY3NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIlVOSVwifSx7XCJuYW1lXCI6XCJXYWxzYWxsXCIsXCJsYXRpdHVkZVwiOjUyLjU4NDQxMDM2LFwibG9uZ2l0dWRlXCI6LTEuOTg0NzUzNDU5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiV1NMXCJ9LHtcIm5hbWVcIjpcIldhdGVyIE9ydG9uXCIsXCJsYXRpdHVkZVwiOjUyLjUxODU5NDY3LFwibG9uZ2l0dWRlXCI6LTEuNzQzMDk3MTg4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiV1RPXCJ9LHtcIm5hbWVcIjpcIldhdGZvcmQgSnVuY3Rpb25cIixcImxhdGl0dWRlXCI6NTEuNjYzNTI5NTksXCJsb25naXR1ZGVcIjotMC4zOTY1MTk2MzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJXRkpcIn0se1wibmFtZVwiOlwiV2F0Zm9yZCBOb3J0aFwiLFwibGF0aXR1ZGVcIjo1MS42NzU3MDQ4NixcImxvbmdpdHVkZVwiOi0wLjM4OTkyODEyOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIldGTlwifSx7XCJuYW1lXCI6XCJXZWRnd29vZFwiLFwibGF0aXR1ZGVcIjo1Mi45NTEwNjIzNyxcImxvbmdpdHVkZVwiOi0yLjE3MDgyMzU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiV0VEXCJ9LHtcIm5hbWVcIjpcIldlbGxpbmd0b24gKFNocm9wc2hpcmUpXCIsXCJsYXRpdHVkZVwiOjUyLjcwMTMyMTY3LFwibG9uZ2l0dWRlXCI6LTIuNTE3MTYzNjkzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiV0xOXCJ9LHtcIm5hbWVcIjpcIldoaXRsb2NrcyBFbmRcIixcImxhdGl0dWRlXCI6NTIuMzkxODQ2OSxcImxvbmdpdHVkZVwiOi0xLjg1MTUzNDc0MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIldURVwifSx7XCJuYW1lXCI6XCJXaWRuZXkgTWFub3JcIixcImxhdGl0dWRlXCI6NTIuMzk1OTUwMyxcImxvbmdpdHVkZVwiOi0xLjc3NDM3ODgxMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIldNUlwifSx7XCJuYW1lXCI6XCJXaWxtY290ZVwiLFwibGF0aXR1ZGVcIjo1Mi4yMjI0ODcwMSxcImxvbmdpdHVkZVwiOi0xLjc1NTkzNTE4MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIldNQ1wifSx7XCJuYW1lXCI6XCJXaWxuZWNvdGUgKFN0YWZmcylcIixcImxhdGl0dWRlXCI6NTIuNjEwODU3OTcsXCJsb25naXR1ZGVcIjotMS42Nzk0OTY0MixcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIldORVwifSx7XCJuYW1lXCI6XCJXaW5zZm9yZFwiLFwibGF0aXR1ZGVcIjo1My4xOTA1MzI4LFwibG9uZ2l0dWRlXCI6LTIuNDk0NTkzODg1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiV1NGXCJ9LHtcIm5hbWVcIjpcIldpdHRvbiAoV2VzdCBNaWRsYW5kcylcIixcImxhdGl0dWRlXCI6NTIuNTEyMjUzODEsXCJsb25naXR1ZGVcIjotMS44ODM5ODkwMjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJXVFRcIn0se1wibmFtZVwiOlwiV29idXJuIFNhbmRzXCIsXCJsYXRpdHVkZVwiOjUyLjAxODE2MjUyLFwibG9uZ2l0dWRlXCI6LTAuNjU0MDc3MTk4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiV09CXCJ9LHtcIm5hbWVcIjpcIldvbHZlcnRvblwiLFwibGF0aXR1ZGVcIjo1Mi4wNjU4OTA0NCxcImxvbmdpdHVkZVwiOi0wLjgwNDI2NDEzOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIldPTFwifSx7XCJuYW1lXCI6XCJXb29kIEVuZFwiLFwibGF0aXR1ZGVcIjo1Mi4zNDQzNjg1OSxcImxvbmdpdHVkZVwiOi0xLjg0NDUwMDkwNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIldERVwifSx7XCJuYW1lXCI6XCJXb290dG9uIFdhd2VuXCIsXCJsYXRpdHVkZVwiOjUyLjI2NTg3NzM4LFwibG9uZ2l0dWRlXCI6LTEuNzg0NTY0NDE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMTVwiLFwiY3JzQ29kZVwiOlwiV1dXXCJ9LHtcIm5hbWVcIjpcIldvcmNlc3RlciBGb3JlZ2F0ZSBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTIuMTk0OTI5NzYsXCJsb25naXR1ZGVcIjotMi4yMjE3NDkxNTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJXT0ZcIn0se1wibmFtZVwiOlwiV29yY2VzdGVyIFNocnViIEhpbGxcIixcImxhdGl0dWRlXCI6NTIuMTk0NzM2NTIsXCJsb25naXR1ZGVcIjotMi4yMDk0MTUwMjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJXT1NcIn0se1wibmFtZVwiOlwiV3lsZGUgR3JlZW5cIixcImxhdGl0dWRlXCI6NTIuNTQ2NDQzNjcsXCJsb25naXR1ZGVcIjotMS44MzE4NDI4NjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJXWUxcIn0se1wibmFtZVwiOlwiV3l0aGFsbFwiLFwibGF0aXR1ZGVcIjo1Mi4zODAxNzcwMSxcImxvbmdpdHVkZVwiOi0xLjg2NjI2NTE4NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTE1cIixcImNyc0NvZGVcIjpcIldZVFwifSx7XCJuYW1lXCI6XCJZYXJkbGV5IFdvb2RcIixcImxhdGl0dWRlXCI6NTIuNDIxNTA5NTUsXCJsb25naXR1ZGVcIjotMS44NTQzNzYxMzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxNXCIsXCJjcnNDb2RlXCI6XCJZUkRcIn0se1wibmFtZVwiOlwiQWN0b24gQ2VudHJhbFwiLFwibGF0aXR1ZGVcIjo1MS41MDg3NzU2MDE0LFwibG9uZ2l0dWRlXCI6LTAuMjYzNjE2NTQwMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIkFDQ1wifSx7XCJuYW1lXCI6XCJBbmVybGV5XCIsXCJsYXRpdHVkZVwiOjUxLjQxMzA1NDQyNCxcImxvbmdpdHVkZVwiOi0wLjA2NTkxNDMyODEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJBTlpcIn0se1wibmFtZVwiOlwiQmV0aG5hbCBHcmVlblwiLFwibGF0aXR1ZGVcIjo1MS41MjQ0NjQ3NjEsXCJsb25naXR1ZGVcIjotMC4wNTk3NTQ4MTczLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiQkVUXCJ9LHtcIm5hbWVcIjpcIkJyb2NrbGV5XCIsXCJsYXRpdHVkZVwiOjUxLjQ2NDc0NjUyMyxcImxvbmdpdHVkZVwiOi0wLjAzNzgxMzkzNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIkJDWVwifSx7XCJuYW1lXCI6XCJCcm9uZGVzYnVyeVwiLFwibGF0aXR1ZGVcIjo1MS41NDU2MzI4NzMxLFwibG9uZ2l0dWRlXCI6LTAuMjAzMDgxMjgzNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIkJTWVwifSx7XCJuYW1lXCI6XCJCcm9uZGVzYnVyeSBQYXJrXCIsXCJsYXRpdHVkZVwiOjUxLjU0MDM1MDY5MzYsXCJsb25naXR1ZGVcIjotMC4yMTA0OTk4MjY2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiQlNQXCJ9LHtcIm5hbWVcIjpcIkJydWNlIEdyb3ZlXCIsXCJsYXRpdHVkZVwiOjUxLjU5Mjk3NjE1OCxcImxvbmdpdHVkZVwiOi0wLjA2OTgzMDI5OTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJCQ1ZcIn0se1wibmFtZVwiOlwiQnVzaCBIaWxsIFBhcmtcIixcImxhdGl0dWRlXCI6NTEuNjQxNTI2NjE3NCxcImxvbmdpdHVkZVwiOi0wLjA2OTIxNDI1MzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJCSEtcIn0se1wibmFtZVwiOlwiQnVzaGV5XCIsXCJsYXRpdHVkZVwiOjUxLjY0NTc1MTI2NzgsXCJsb25naXR1ZGVcIjotMC4zODUzMjM2NDI1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiQlNIXCJ9LHtcIm5hbWVcIjpcIkNhbGVkb25pYW4gUmQgJiBCYXJuc2J1cnlcIixcImxhdGl0dWRlXCI6NTEuNTQzMzU0NDA2NCxcImxvbmdpdHVkZVwiOi0wLjExNTE5NzMxMTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJDSVJcIn0se1wibmFtZVwiOlwiQ2FtYnJpZGdlIEhlYXRoXCIsXCJsYXRpdHVkZVwiOjUxLjUzMTk3NzY1MjcsXCJsb25naXR1ZGVcIjotMC4wNTcyNzI1NTgyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiQ0JIXCJ9LHtcIm5hbWVcIjpcIkNhbWRlbiBSb2FkXCIsXCJsYXRpdHVkZVwiOjUxLjU0MTk0ODE2MjEsXCJsb25naXR1ZGVcIjotMC4xMzk3NzIwNDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJDTURcIn0se1wibmFtZVwiOlwiQ2Fub25idXJ5XCIsXCJsYXRpdHVkZVwiOjUxLjU0ODM3MzYwMDIsXCJsb25naXR1ZGVcIjotMC4wOTE5MTIwNjQ2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiQ05OXCJ9LHtcIm5hbWVcIjpcIkNhcnBlbmRlcnMgUGFya1wiLFwibGF0aXR1ZGVcIjo1MS42MjgzNTA2MjcsXCJsb25naXR1ZGVcIjotMC4zODU5NDE2MDU3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiQ1BLXCJ9LHtcIm5hbWVcIjpcIkNoaW5nZm9yZFwiLFwibGF0aXR1ZGVcIjo1MS42MzMwOTQzMTY4LFwibG9uZ2l0dWRlXCI6MC4wMDk5MDYwODU4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiQ0hJXCJ9LHtcIm5hbWVcIjpcIkNsYXBoYW0gSGlnaCBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTEuNDY1NDg0MTU2LFwibG9uZ2l0dWRlXCI6LTAuMTMyNTE3NzEzNixcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIkNMUFwifSx7XCJuYW1lXCI6XCJDbGFwdG9uXCIsXCJsYXRpdHVkZVwiOjUxLjU2MTY0OTcxOTksXCJsb25naXR1ZGVcIjotMC4wNTcwMTc5NTUyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiQ1BUXCJ9LHtcIm5hbWVcIjpcIkNyb3VjaCBIaWxsXCIsXCJsYXRpdHVkZVwiOjUxLjU3MTI1OTY4MDgsXCJsb25naXR1ZGVcIjotMC4xMTY5MjkyOTIyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiQ1JIXCJ9LHtcIm5hbWVcIjpcIkNyeXN0YWwgUGFsYWNlXCIsXCJsYXRpdHVkZVwiOjUxLjQxODExMDc5OTYsXCJsb25naXR1ZGVcIjotMC4wNzI2MDQ1MTU5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiQ1lQXCJ9LHtcIm5hbWVcIjpcIkRhbHN0b24gSnVuY3Rpb25cIixcImxhdGl0dWRlXCI6NTEuNTQ0NTEzLFwibG9uZ2l0dWRlXCI6LTAuMDc2MjE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiRExKXCJ9LHtcIm5hbWVcIjpcIkRhbHN0b24gS2luZ3NsYW5kXCIsXCJsYXRpdHVkZVwiOjUxLjU0ODI4OTYyNTMsXCJsb25naXR1ZGVcIjotMC4wNzU3NjExMTY0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiRExLXCJ9LHtcIm5hbWVcIjpcIkVkbW9udG9uIEdyZWVuXCIsXCJsYXRpdHVkZVwiOjUxLjYyNDkzNjM0NTksXCJsb25naXR1ZGVcIjotMC4wNjExMDU1MDk2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiRURSXCJ9LHtcIm5hbWVcIjpcIkVtZXJzb24gUGFya1wiLFwibGF0aXR1ZGVcIjo1MS41Njg5NTI2Mzk0LFwibG9uZ2l0dWRlXCI6MC4yMjA2NDc3NDA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiRU1QXCJ9LHtcIm5hbWVcIjpcIkVuZmllbGQgVG93blwiLFwibGF0aXR1ZGVcIjo1MS42NTE4MjM0OSxcImxvbmdpdHVkZVwiOi0wLjA3NzQ1MDU1NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIkVORlwifSx7XCJuYW1lXCI6XCJGaW5jaGxleSBSb2FkICYgRnJvZ25hbFwiLFwibGF0aXR1ZGVcIjo1MS41NTAyNzE2MzYxLFwibG9uZ2l0dWRlXCI6LTAuMTgzMTM3NTI4NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIkZOWVwifSx7XCJuYW1lXCI6XCJGb3Jlc3QgSGlsbFwiLFwibGF0aXR1ZGVcIjo1MS40Mzg5MjUzNDY5LFwibG9uZ2l0dWRlXCI6LTAuMDUzMzEwMTQxMixcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIkZPSFwifSx7XCJuYW1lXCI6XCJHb3NwZWwgT2FrXCIsXCJsYXRpdHVkZVwiOjUxLjU1NTM0MTI3MTcsXCJsb25naXR1ZGVcIjotMC4xNTA3NjYxNzAyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiR1BPXCJ9LHtcIm5hbWVcIjpcIkhhY2tuZXkgQ2VudHJhbFwiLFwibGF0aXR1ZGVcIjo1MS41NDY4ODMyNzExLFwibG9uZ2l0dWRlXCI6LTAuMDU1OTE2NDI0MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIkhLQ1wifSx7XCJuYW1lXCI6XCJIYWNrbmV5IERvd25zXCIsXCJsYXRpdHVkZVwiOjUxLjU0ODc1MjE1MixcImxvbmdpdHVkZVwiOi0wLjA2MDE2Mzg4OTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJIQUNcIn0se1wibmFtZVwiOlwiSGFja25leSBXaWNrXCIsXCJsYXRpdHVkZVwiOjUxLjU0MzY4MTgzNSxcImxvbmdpdHVkZVwiOi0wLjAyNTc2NjE3MjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJIS1dcIn0se1wibmFtZVwiOlwiSGFnZ2Vyc3RvblwiLFwibGF0aXR1ZGVcIjo1MS41MzkxMjEsXCJsb25naXR1ZGVcIjotMC4wNzY0NDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJIR0dcIn0se1wibmFtZVwiOlwiSGFtcHN0ZWFkIEhlYXRoXCIsXCJsYXRpdHVkZVwiOjUxLjU1NTgzNzI1MDQsXCJsb25naXR1ZGVcIjotMC4xNjUxNzE5Mjg0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiSERIXCJ9LHtcIm5hbWVcIjpcIkhhcnJpbmdheSBHcmVlbiBMYW5lc1wiLFwibGF0aXR1ZGVcIjo1MS41NzcyNDc5MzcxLFwibG9uZ2l0dWRlXCI6LTAuMDk3OTE5MTY3NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIkhSWVwifSx7XCJuYW1lXCI6XCJIYXRjaCBFbmRcIixcImxhdGl0dWRlXCI6NTEuNjEwMTAyOTYxMixcImxvbmdpdHVkZVwiOi0wLjM2OTUxNzcwNjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJIVEVcIn0se1wibmFtZVwiOlwiSGVhZHN0b25lIExhbmVcIixcImxhdGl0dWRlXCI6NTEuNjAyNzMxNDg1MSxcImxvbmdpdHVkZVwiOi0wLjM1Njc4NTQ1MDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJIRExcIn0se1wibmFtZVwiOlwiSGlnaGFtcyBQYXJrXCIsXCJsYXRpdHVkZVwiOjUxLjYwODg5MDE2ODQsXCJsb25naXR1ZGVcIjowLjAwMDE3MDgzNTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJISVBcIn0se1wibmFtZVwiOlwiSG9tZXJ0b25cIixcImxhdGl0dWRlXCI6NTEuNTQ2NTk1MzQ0MSxcImxvbmdpdHVkZVwiOi0wLjAzODYyMDkwNjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJITU5cIn0se1wibmFtZVwiOlwiSG9ub3IgT2FrIFBhcmtcIixcImxhdGl0dWRlXCI6NTEuNDUwNDg4MjQ0MSxcImxvbmdpdHVkZVwiOi0wLjA0NTYyMTg0MzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJIUEFcIn0se1wibmFtZVwiOlwiSG94dG9uXCIsXCJsYXRpdHVkZVwiOjUxLjUzMTkzMixcImxvbmdpdHVkZVwiOi0wLjA3Njc0NixcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIkhPWFwifSx7XCJuYW1lXCI6XCJJbXBlcmlhbCBXaGFyZlwiLFwibGF0aXR1ZGVcIjo1MS40NzQyNTEsXCJsb25naXR1ZGVcIjotMC4xODE0MTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJJTVdcIn0se1wibmFtZVwiOlwiS2Vuc2FsIFJpc2VcIixcImxhdGl0dWRlXCI6NTEuNTM0MjEzMDQ0NixcImxvbmdpdHVkZVwiOi0wLjIyMDgzMzgyOTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJLTlJcIn0se1wibmFtZVwiOlwiS2Vuc2luZ3RvbiBPbHltcGlhXCIsXCJsYXRpdHVkZVwiOjUxLjQ5NzE2NzY5NTIsXCJsb25naXR1ZGVcIjotMC4yMDkzMTA0Mjc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiS1BBXCJ9LHtcIm5hbWVcIjpcIktlbnRpc2ggVG93biBXZXN0XCIsXCJsYXRpdHVkZVwiOjUxLjU0NjU1NTY5MzEsXCJsb25naXR1ZGVcIjotMC4xNDY3OTU1NzU2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiS1RXXCJ9LHtcIm5hbWVcIjpcIktpbGJ1cm4gSGlnaCBSb2FkXCIsXCJsYXRpdHVkZVwiOjUxLjUzNzM2NzIxNDUsXCJsb25naXR1ZGVcIjotMC4xOTE4NzA5MjM0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiS0JOXCJ9LHtcIm5hbWVcIjpcIkxleXRvbiBNaWRsYW5kIFJvYWRcIixcImxhdGl0dWRlXCI6NTEuNTY5MzU0NjcxMixcImxvbmdpdHVkZVwiOi0wLjAwNzA0ODgzMjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJMRU1cIn0se1wibmFtZVwiOlwiTGV5dG9uc3RvbmUgSGlnaCBSb2FkXCIsXCJsYXRpdHVkZVwiOjUxLjU2Mzc4NzI5NjIsXCJsb25naXR1ZGVcIjowLjAwODI5MDY3NTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJMRVJcIn0se1wibmFtZVwiOlwiTG9uZG9uIEZpZWxkc1wiLFwibGF0aXR1ZGVcIjo1MS41NDExNTgxOTA3LFwibG9uZ2l0dWRlXCI6LTAuMDU3NzQ2ODIxNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIkxPRlwifSx7XCJuYW1lXCI6XCJOZXcgQ3Jvc3MgR2F0ZVwiLFwibGF0aXR1ZGVcIjo1MS40NzUzMTEyNjUsXCJsb25naXR1ZGVcIjotMC4wNDAzODQ2NjQ0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiTlhHXCJ9LHtcIm5hbWVcIjpcIk5vcndvb2QgSnVuY3Rpb25cIixcImxhdGl0dWRlXCI6NTEuMzk3MDIwMjI0LFwibG9uZ2l0dWRlXCI6LTAuMDc1MjE2NDIzNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIk5XRFwifSx7XCJuYW1lXCI6XCJQZW5nZSBXZXN0XCIsXCJsYXRpdHVkZVwiOjUxLjQxNzU1Njg4MzgsXCJsb25naXR1ZGVcIjotMC4wNjA4MzQyMTg3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiUE5XXCJ9LHtcIm5hbWVcIjpcIlJlY3RvcnkgUm9hZFwiLFwibGF0aXR1ZGVcIjo1MS41NTg3ODAwMjQzLFwibG9uZ2l0dWRlXCI6LTAuMDY4MzkzMzM3MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIlJFQ1wifSx7XCJuYW1lXCI6XCJSb3RoZXJoaXRoZVwiLFwibGF0aXR1ZGVcIjo1MS41MDA5NzUsXCJsb25naXR1ZGVcIjotMC4wNTM1NTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJST0VcIn0se1wibmFtZVwiOlwiU2V2ZW4gU2lzdGVyc1wiLFwibGF0aXR1ZGVcIjo1MS41ODI1MTA4NDI4LFwibG9uZ2l0dWRlXCI6LTAuMDc0ODkyOTE2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIlNWU1wifSx7XCJuYW1lXCI6XCJTaGFkd2VsbFwiLFwibGF0aXR1ZGVcIjo1MS41MTA5MzEsXCJsb25naXR1ZGVcIjotMC4wNTc0NTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJTREVcIn0se1wibmFtZVwiOlwiU2hlcGhlcmQncyBCdXNoXCIsXCJsYXRpdHVkZVwiOjUxLjUwNTI4OTI5MjMsXCJsb25naXR1ZGVcIjotMC4yMTc2NTIyOTYyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiU1BCXCJ9LHtcIm5hbWVcIjpcIlNob3JlZGl0Y2ggSGlnaCBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTEuNTIyOTIyLFwibG9uZ2l0dWRlXCI6LTAuMDc1Njg0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiU0RDXCJ9LHtcIm5hbWVcIjpcIlNpbHZlciBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTEuNjE1MjM0Mzc2OCxcImxvbmdpdHVkZVwiOi0wLjA3MjY0MTY0MjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJTTFZcIn0se1wibmFtZVwiOlwiU291dGggQWN0b25cIixcImxhdGl0dWRlXCI6NTEuNDk5Njk5Nzc2MixcImxvbmdpdHVkZVwiOi0wLjI3MDE1Njk2MTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJTQVRcIn0se1wibmFtZVwiOlwiU291dGggSGFtcHN0ZWFkXCIsXCJsYXRpdHVkZVwiOjUxLjU0MTQ3NTkwMTIsXCJsb25naXR1ZGVcIjotMC4xNzg0NDA0Njg2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiU09IXCJ9LHtcIm5hbWVcIjpcIlNvdXRoIFRvdHRlbmhhbVwiLFwibGF0aXR1ZGVcIjo1MS41ODA0MTg3OTk4LFwibG9uZ2l0dWRlXCI6LTAuMDcxODA1OTAzMixcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIlNUT1wifSx7XCJuYW1lXCI6XCJTb3V0aGJ1cnlcIixcImxhdGl0dWRlXCI6NTEuNjQ4NDUzMjc2NixcImxvbmdpdHVkZVwiOi0wLjA1MzAxODg5NjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJTQlVcIn0se1wibmFtZVwiOlwiU3QgSmFtZXMgU3RyZWV0IChXYWx0aGFtc3RvdylcIixcImxhdGl0dWRlXCI6NTEuNTgwNjcwOTc3OSxcImxvbmdpdHVkZVwiOi0wLjAzMjgyMzU3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIlNKU1wifSx7XCJuYW1lXCI6XCJTdGFtZm9yZCBIaWxsXCIsXCJsYXRpdHVkZVwiOjUxLjU3NDQ3MzU4NjksXCJsb25naXR1ZGVcIjotMC4wNzY2NzU3NzY4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiU01IXCJ9LHtcIm5hbWVcIjpcIlN0b2tlIE5ld2luZ3RvblwiLFwibGF0aXR1ZGVcIjo1MS41NjUyMzg3MDI1LFwibG9uZ2l0dWRlXCI6LTAuMDcyODgxMTU2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIlNLV1wifSx7XCJuYW1lXCI6XCJTdXJyZXkgUXVheXNcIixcImxhdGl0dWRlXCI6NTEuNDkyNzkxLFwibG9uZ2l0dWRlXCI6LTAuMDQ4MTQyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiU1FFXCJ9LHtcIm5hbWVcIjpcIlN5ZGVuaGFtIChMb25kb24pXCIsXCJsYXRpdHVkZVwiOjUxLjQyNzI0OTg5MjQsXCJsb25naXR1ZGVcIjotMC4wNTQyMzgwNDUyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiU1lEXCJ9LHtcIm5hbWVcIjpcIlRoZW9iYWxkcyBHcm92ZVwiLFwibGF0aXR1ZGVcIjo1MS42OTI0NTcwMDM3LFwibG9uZ2l0dWRlXCI6LTAuMDM0ODIzNjE1MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIlRFT1wifSx7XCJuYW1lXCI6XCJUdXJrZXkgU3RyZWV0XCIsXCJsYXRpdHVkZVwiOjUxLjY3MjYzNjk4ODQsXCJsb25naXR1ZGVcIjotMC4wNDcyMDg5NTc4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiVFVSXCJ9LHtcIm5hbWVcIjpcIlVwcGVyIEhvbGxvd2F5XCIsXCJsYXRpdHVkZVwiOjUxLjU2MzYzMDM1NCxcImxvbmdpdHVkZVwiOi0wLjEyOTA3NTg0NTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJVSExcIn0se1wibmFtZVwiOlwiV2FsdGhhbXN0b3cgQ2VudHJhbFwiLFwibGF0aXR1ZGVcIjo1MS41ODI5NzExOTI0LFwibG9uZ2l0dWRlXCI6LTAuMDE5ODc3MzA4MixcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIldIQ1wifSx7XCJuYW1lXCI6XCJXYWx0aGFtc3RvdyBRdWVlbidzIFJvYWRcIixcImxhdGl0dWRlXCI6NTEuNTgxNTA5MTkxOSxcImxvbmdpdHVkZVwiOi0wLjAyMzgzODEyOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIldNV1wifSx7XCJuYW1lXCI6XCJXYW5kc3dvcnRoIFJvYWRcIixcImxhdGl0dWRlXCI6NTEuNDY5ODgyNjEwNSxcImxvbmdpdHVkZVwiOi0wLjEzNzY2NTYzNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIldXUlwifSx7XCJuYW1lXCI6XCJXYW5zdGVhZCBQYXJrXCIsXCJsYXRpdHVkZVwiOjUxLjU1MTY5ODI1NTIsXCJsb25naXR1ZGVcIjowLjAyNjIyMTk3NzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJXTlBcIn0se1wibmFtZVwiOlwiV2FwcGluZ1wiLFwibGF0aXR1ZGVcIjo1MS41MDM3MTgsXCJsb25naXR1ZGVcIjotMC4wNTYzMixcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIldQRVwifSx7XCJuYW1lXCI6XCJXYXRmb3JkIEhpZ2ggU3RyZWV0XCIsXCJsYXRpdHVkZVwiOjUxLjY1MjY1NTEzNjQsXCJsb25naXR1ZGVcIjotMC4zOTE3MTM2ODg4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiV0ZIXCJ9LHtcIm5hbWVcIjpcIldlc3QgQ3JveWRvblwiLFwibGF0aXR1ZGVcIjo1MS4zNzg0Mjg0Njk5LFwibG9uZ2l0dWRlXCI6LTAuMTAyNTgxMjc4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiV0NZXCJ9LHtcIm5hbWVcIjpcIldlc3QgSGFtcHN0ZWFkXCIsXCJsYXRpdHVkZVwiOjUxLjU0NzQ3MzMzNTgsXCJsb25naXR1ZGVcIjotMC4xOTExODE3NzAxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiV0hEXCJ9LHtcIm5hbWVcIjpcIldoaXRlIEhhcnQgTGFuZVwiLFwibGF0aXR1ZGVcIjo1MS42MDUwNDQxMTYyLFwibG9uZ2l0dWRlXCI6LTAuMDcwOTA3MDM3MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIldITFwifSx7XCJuYW1lXCI6XCJXaWxsZXNkZW4gSnVuY3Rpb25cIixcImxhdGl0dWRlXCI6NTEuNTMyMDMzMjM5NyxcImxvbmdpdHVkZVwiOi0wLjI0MzI2NzA2MTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxPXCIsXCJjcnNDb2RlXCI6XCJXSUpcIn0se1wibmFtZVwiOlwiV29vZCBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTEuNTg2NzE0MTkyNixcImxvbmdpdHVkZVwiOi0wLjAwMTk1ODMzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMT1wiLFwiY3JzQ29kZVwiOlwiV1NUXCJ9LHtcIm5hbWVcIjpcIldvb2RncmFuZ2UgUGFya1wiLFwibGF0aXR1ZGVcIjo1MS41NDg3NjIxNDM2LFwibG9uZ2l0dWRlXCI6MC4wNDUxMzExOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTE9cIixcImNyc0NvZGVcIjpcIldHUlwifSx7XCJuYW1lXCI6XCJBbWVyc2hhbVwiLFwibGF0aXR1ZGVcIjo1MS42NzQyMDY5MTMzLFwibG9uZ2l0dWRlXCI6LTAuNjA3NTkwMTI3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiQU1SXCJ9LHtcIm5hbWVcIjpcIkJhcmJpY2FuXCIsXCJsYXRpdHVkZVwiOjUxLjUxOTY4NjQxNzMsXCJsb25naXR1ZGVcIjotMC4wOTc0MzU4ODA1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiWkJCXCJ9LHtcIm5hbWVcIjpcIkJsYWNraG9yc2UgUm9hZFwiLFwibGF0aXR1ZGVcIjo1MS41ODYyMDc1NTI4LFwibG9uZ2l0dWRlXCI6LTAuMDQxMjQ1ODMzMixcInN0YXRpb25PcGVyYXRvclwiOlwiTFRcIixcImNyc0NvZGVcIjpcIkJIT1wifSx7XCJuYW1lXCI6XCJDYW5hZGEgV2F0ZXJcIixcImxhdGl0dWRlXCI6NTEuNDk4MjMxLFwibG9uZ2l0dWRlXCI6LTAuMDUwNzkxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiWkNXXCJ9LHtcIm5hbWVcIjpcIkNoYWxmb250ICYgTGF0aW1lclwiLFwibGF0aXR1ZGVcIjo1MS42NjgxMDkyNjU2LFwibG9uZ2l0dWRlXCI6LTAuNTYwNTE5MTAyMixcInN0YXRpb25PcGVyYXRvclwiOlwiTFRcIixcImNyc0NvZGVcIjpcIkNGT1wifSx7XCJuYW1lXCI6XCJDaG9ybGV5d29vZFwiLFwibGF0aXR1ZGVcIjo1MS42NTQyNDg5NTA2LFwibG9uZ2l0dWRlXCI6LTAuNTE4MzExNjY4MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTFRcIixcImNyc0NvZGVcIjpcIkNMV1wifSx7XCJuYW1lXCI6XCJFbGVwaGFudCAmIENhc3RsZSAoVW5kZXJncm91bmQpXCIsXCJsYXRpdHVkZVwiOjUxLjI5NDUwNixcImxvbmdpdHVkZVwiOjAuMDYwMjY2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiWkVMXCJ9LHtcIm5hbWVcIjpcIkdyZWVuZm9yZFwiLFwibGF0aXR1ZGVcIjo1MS41NDIzMTg5NTMsXCJsb25naXR1ZGVcIjotMC4zNDQ1NDE1MTgzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiR0ZEXCJ9LHtcIm5hbWVcIjpcIkd1bm5lcnNidXJ5XCIsXCJsYXRpdHVkZVwiOjUxLjQ5MTg2OTEyMTYsXCJsb25naXR1ZGVcIjotMC4yNzU3ODM0NDcyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiR1VOXCJ9LHtcIm5hbWVcIjpcIkhhcmxlc2RlblwiLFwibGF0aXR1ZGVcIjo1MS41MzY1NzI4Nzk0LFwibG9uZ2l0dWRlXCI6LTAuMjU4MjMyODUxNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTFRcIixcImNyc0NvZGVcIjpcIkhETlwifSx7XCJuYW1lXCI6XCJIYXJyb3cgJiBXZWFsZHN0b25lXCIsXCJsYXRpdHVkZVwiOjUxLjU5MTYyMDM3NTgsXCJsb25naXR1ZGVcIjotMC4zMzQwNzMwMTg1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiSFJXXCJ9LHtcIm5hbWVcIjpcIkhhcnJvdy1vbi10aGUtSGlsbFwiLFwibGF0aXR1ZGVcIjo1MS41NzkwNjcxMzcyLFwibG9uZ2l0dWRlXCI6LTAuMzM1OTg5ODg1NixcInN0YXRpb25PcGVyYXRvclwiOlwiTFRcIixcImNyc0NvZGVcIjpcIkhPSFwifSx7XCJuYW1lXCI6XCJIaWdoYnVyeSAmIElzbGluZ3RvblwiLFwibGF0aXR1ZGVcIjo1MS41NDY3Mzk5NDgsXCJsb25naXR1ZGVcIjotMC4xMDIwNzY2MDEyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiSEhZXCJ9LHtcIm5hbWVcIjpcIktlbnNhbCBHcmVlblwiLFwibGF0aXR1ZGVcIjo1MS41MzA2NjE3ODg0LFwibG9uZ2l0dWRlXCI6LTAuMjIzODU1ODYyOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTFRcIixcImNyc0NvZGVcIjpcIktOTFwifSx7XCJuYW1lXCI6XCJLZW50aXNoIFRvd25cIixcImxhdGl0dWRlXCI6NTEuNTUwMDM2Mzc0NixcImxvbmdpdHVkZVwiOi0wLjEzOTQ0MjA3NjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxUXCIsXCJjcnNDb2RlXCI6XCJLVE5cIn0se1wibmFtZVwiOlwiS2VudG9uXCIsXCJsYXRpdHVkZVwiOjUxLjU4MTQ5NjAxOTksXCJsb25naXR1ZGVcIjotMC4zMTcxMzczMjc0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiS05UXCJ9LHtcIm5hbWVcIjpcIktldyBHYXJkZW5zXCIsXCJsYXRpdHVkZVwiOjUxLjQ3NzYxNTQ5NjksXCJsb25naXR1ZGVcIjotMC4yODQ5NjE2NDgzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiS1dHXCJ9LHtcIm5hbWVcIjpcIk1vb3JnYXRlXCIsXCJsYXRpdHVkZVwiOjUxLjUxOTU2MyxcImxvbmdpdHVkZVwiOi0wLjA5MDI0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiTU9HXCJ9LHtcIm5hbWVcIjpcIk5vcnRoIFdlbWJsZXlcIixcImxhdGl0dWRlXCI6NTEuNTYyNjAyMjUyOCxcImxvbmdpdHVkZVwiOi0wLjMwMzk4NDM4MzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxUXCIsXCJjcnNDb2RlXCI6XCJOV0JcIn0se1wibmFtZVwiOlwiUXVlZW5zIFBhcmsgKExvbmRvbilcIixcImxhdGl0dWRlXCI6NTEuNTMzOTcxNTMzNyxcImxvbmdpdHVkZVwiOi0wLjIwNDk4MjUwMTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxUXCIsXCJjcnNDb2RlXCI6XCJRUFdcIn0se1wibmFtZVwiOlwiUmlja21hbnN3b3J0aFwiLFwibGF0aXR1ZGVcIjo1MS42NDAyNDY2MDI3LFwibG9uZ2l0dWRlXCI6LTAuNDczMjcyOTU2MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTFRcIixcImNyc0NvZGVcIjpcIlJJQ1wifSx7XCJuYW1lXCI6XCJTb3V0aCBLZW50b25cIixcImxhdGl0dWRlXCI6NTEuNTcwMjIwNjA4LFwibG9uZ2l0dWRlXCI6LTAuMzA4NDYyNzg5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTFRcIixcImNyc0NvZGVcIjpcIlNPS1wifSx7XCJuYW1lXCI6XCJTb3V0aCBSdWlzbGlwXCIsXCJsYXRpdHVkZVwiOjUxLjU1NjkyNjU1NjksXCJsb25naXR1ZGVcIjotMC4zOTkyNDc3MTM3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiU1JVXCJ9LHtcIm5hbWVcIjpcIlN0b25lYnJpZGdlIFBhcmtcIixcImxhdGl0dWRlXCI6NTEuNTQ0MTE2ODE0NyxcImxvbmdpdHVkZVwiOi0wLjI3NTgyODAxMTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxUXCIsXCJjcnNDb2RlXCI6XCJTQlBcIn0se1wibmFtZVwiOlwiV2VtYmxleSBDZW50cmFsXCIsXCJsYXRpdHVkZVwiOjUxLjU1MjMzMTA4MjcsXCJsb25naXR1ZGVcIjotMC4yOTY0MTg1NjM3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiV01CXCJ9LHtcIm5hbWVcIjpcIldlc3QgQnJvbXB0b25cIixcImxhdGl0dWRlXCI6NTEuNDg3MzMyNzY4NixcImxvbmdpdHVkZVwiOi0wLjE5NTQzNTcxMDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxUXCIsXCJjcnNDb2RlXCI6XCJXQlBcIn0se1wibmFtZVwiOlwiV2VzdCBIYW1cIixcImxhdGl0dWRlXCI6NTEuNTI4NTc2NDgzNSxcImxvbmdpdHVkZVwiOjAuMDA1ODc1NDcxOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTFRcIixcImNyc0NvZGVcIjpcIldFSFwifSx7XCJuYW1lXCI6XCJXZXN0IFJ1aXNsaXBcIixcImxhdGl0dWRlXCI6NTEuNTY5NzU2MjIxMyxcImxvbmdpdHVkZVwiOi0wLjQzNzc1NzYzMzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkxUXCIsXCJjcnNDb2RlXCI6XCJXUlVcIn0se1wibmFtZVwiOlwiV2hpdGVjaGFwZWxcIixcImxhdGl0dWRlXCI6NTEuNTE5NDY3LFwibG9uZ2l0dWRlXCI6LTAuMDU5NzU3MTIyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiWkxXXCJ9LHtcIm5hbWVcIjpcIkFpZ2J1cnRoXCIsXCJsYXRpdHVkZVwiOjUzLjM2NDU4MzMsXCJsb25naXR1ZGVcIjotMi45MjcxNjA3MzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJBSUdcIn0se1wibmFtZVwiOlwiQWluc2RhbGVcIixcImxhdGl0dWRlXCI6NTMuNjAxODMyODcsXCJsb25naXR1ZGVcIjotMy4wNDI2NjkzMjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJBTlNcIn0se1wibmFtZVwiOlwiQWludHJlZVwiLFwibGF0aXR1ZGVcIjo1My40NzQwMDkwNyxcImxvbmdpdHVkZVwiOi0yLjk1NjY2NDc0MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkFJTlwifSx7XCJuYW1lXCI6XCJBdWdodG9uIFBhcmtcIixcImxhdGl0dWRlXCI6NTMuNTU0NDg3OTgsXCJsb25naXR1ZGVcIjotMi44OTUwNzgxOTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJBVUdcIn0se1wibmFtZVwiOlwiQmFjaGVcIixcImxhdGl0dWRlXCI6NTMuMjA5MzMzNzYsXCJsb25naXR1ZGVcIjotMi44OTIzNjA2NzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJCQUNcIn0se1wibmFtZVwiOlwiQmFuayBIYWxsXCIsXCJsYXRpdHVkZVwiOjUzLjQzNzgwMjA2LFwibG9uZ2l0dWRlXCI6LTIuOTg3NDY0OTg0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiQkFIXCJ9LHtcIm5hbWVcIjpcIkJlYmluZ3RvblwiLFwibGF0aXR1ZGVcIjo1My4zNTc2NzIyMSxcImxvbmdpdHVkZVwiOi0zLjAwMzY0MjcyNixcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkJFQlwifSx7XCJuYW1lXCI6XCJCaWRzdG9uXCIsXCJsYXRpdHVkZVwiOjUzLjQwOTE0NzUyLFwibG9uZ2l0dWRlXCI6LTMuMDc4NTcwMjYzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiQklEXCJ9LHtcIm5hbWVcIjpcIkJpcmtkYWxlXCIsXCJsYXRpdHVkZVwiOjUzLjYzMzUzNDMzLFwibG9uZ2l0dWRlXCI6LTMuMDE0NzE1NTc5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiQkRMXCJ9LHtcIm5hbWVcIjpcIkJpcmtlbmhlYWQgQ2VudHJhbFwiLFwibGF0aXR1ZGVcIjo1My4zODkwMDA5NCxcImxvbmdpdHVkZVwiOi0zLjAxOTQxNjQ5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkJLQ1wifSx7XCJuYW1lXCI6XCJCaXJrZW5oZWFkIEhhbWlsdG9uIFNxdWFyZVwiLFwibGF0aXR1ZGVcIjo1My4zOTQ3MTI5MyxcImxvbmdpdHVkZVwiOi0zLjAxMzY4Nzc4OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkJLUVwifSx7XCJuYW1lXCI6XCJCaXJrZW5oZWFkIE5vcnRoXCIsXCJsYXRpdHVkZVwiOjUzLjQwNDg0MjIyLFwibG9uZ2l0dWRlXCI6LTMuMDU3NDAxNjY2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiQktOXCJ9LHtcIm5hbWVcIjpcIkJpcmtlbmhlYWQgUGFya1wiLFwibGF0aXR1ZGVcIjo1My4zOTc4MTk4LFwibG9uZ2l0dWRlXCI6LTMuMDM5MTc5NDAyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiQktQXCJ9LHtcIm5hbWVcIjpcIkJsdW5kZWxsc2FuZHMgJiBDcm9zYnlcIixcImxhdGl0dWRlXCI6NTMuNDg3Njk2NTksXCJsb25naXR1ZGVcIjotMy4wMzk4Njc4OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkJMTlwifSx7XCJuYW1lXCI6XCJCb290bGUgTmV3IFN0cmFuZFwiLFwibGF0aXR1ZGVcIjo1My40NTMwMTgxNyxcImxvbmdpdHVkZVwiOi0yLjk5NTM0NzcxMixcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkJOV1wifSx7XCJuYW1lXCI6XCJCb290bGUgT3JpZWwgUm9hZFwiLFwibGF0aXR1ZGVcIjo1My40NDc2MjU3NCxcImxvbmdpdHVkZVwiOi0yLjk5NTIyMTYzOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkJPVFwifSx7XCJuYW1lXCI6XCJCcm9tYm9yb3VnaFwiLFwibGF0aXR1ZGVcIjo1My4zMjE4NDczMyxcImxvbmdpdHVkZVwiOi0yLjk4Nzc4ODU1MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkJPTVwifSx7XCJuYW1lXCI6XCJCcm9tYm9yb3VnaCBSYWtlXCIsXCJsYXRpdHVkZVwiOjUzLjMyOTkyMzcyLFwibG9uZ2l0dWRlXCI6LTIuOTg5NDc2NzM1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiQk1SXCJ9LHtcIm5hbWVcIjpcIkJydW5zd2lja1wiLFwibGF0aXR1ZGVcIjo1My4zODIxNzUyMyxcImxvbmdpdHVkZVwiOi0yLjk3NTY1MzI0OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkJSV1wifSx7XCJuYW1lXCI6XCJDYXBlbmh1cnN0XCIsXCJsYXRpdHVkZVwiOjUzLjI2MDE4OTAxLFwibG9uZ2l0dWRlXCI6LTIuOTQyMjkxNjQ0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiQ1BVXCJ9LHtcIm5hbWVcIjpcIkNvbndheSBQYXJrXCIsXCJsYXRpdHVkZVwiOjUzLjM5MzM3Nzc2LFwibG9uZ2l0dWRlXCI6LTMuMDIyNjc5MTc4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiQ05QXCJ9LHtcIm5hbWVcIjpcIkNyZXNzaW5ndG9uXCIsXCJsYXRpdHVkZVwiOjUzLjM1ODc2NzE3LFwibG9uZ2l0dWRlXCI6LTIuOTEyMDA4Mjc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiQ1NHXCJ9LHtcIm5hbWVcIjpcIkVhc3RoYW0gUmFrZVwiLFwibGF0aXR1ZGVcIjo1My4zMDc1OTk5MyxcImxvbmdpdHVkZVwiOi0yLjk4MTE3MTE2OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkVSQVwifSx7XCJuYW1lXCI6XCJFbGxlc21lcmUgUG9ydFwiLFwibGF0aXR1ZGVcIjo1My4yODIyMDY5MyxcImxvbmdpdHVkZVwiOi0yLjg5NjQyNzk4OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkVMUFwifSx7XCJuYW1lXCI6XCJGYXpha2VybGV5XCIsXCJsYXRpdHVkZVwiOjUzLjQ2ODc4MzU0LFwibG9uZ2l0dWRlXCI6LTIuOTM1NDU2MTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJGQVpcIn0se1wibmFtZVwiOlwiRm9ybWJ5XCIsXCJsYXRpdHVkZVwiOjUzLjU1MzQ5MjIyLFwibG9uZ2l0dWRlXCI6LTMuMDcwOTE2MzEzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiRkJZXCJ9LHtcIm5hbWVcIjpcIkZyZXNoZmllbGRcIixcImxhdGl0dWRlXCI6NTMuNTY2MDY4NjEsXCJsb25naXR1ZGVcIjotMy4wNzE4MzgwMDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJGUkVcIn0se1wibmFtZVwiOlwiR3JlZW4gTGFuZVwiLFwibGF0aXR1ZGVcIjo1My4zODMyNzMzNCxcImxvbmdpdHVkZVwiOi0zLjAxNjQyMzAzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiR05MXCJ9LHtcIm5hbWVcIjpcIkhhbGwgUm9hZFwiLFwibGF0aXR1ZGVcIjo1My40OTgzODg5NCxcImxvbmdpdHVkZVwiOi0zLjA1MDY4MjUwOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkhMUlwifSx7XCJuYW1lXCI6XCJIaWdodG93blwiLFwibGF0aXR1ZGVcIjo1My41MjUxMjAwNSxcImxvbmdpdHVkZVwiOi0zLjA1NzA3NjMzNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkhUT1wifSx7XCJuYW1lXCI6XCJIaWxsc2lkZVwiLFwibGF0aXR1ZGVcIjo1My42MjIxMjMwNyxcImxvbmdpdHVkZVwiOi0zLjAyNDcyMzI2MixcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkhJTFwifSx7XCJuYW1lXCI6XCJIb290b25cIixcImxhdGl0dWRlXCI6NTMuMjk3MjE1MzksXCJsb25naXR1ZGVcIjotMi45NzcwMTY5MjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJIT09cIn0se1wibmFtZVwiOlwiSG95bGFrZVwiLFwibGF0aXR1ZGVcIjo1My4zOTAyMjk5NixcImxvbmdpdHVkZVwiOi0zLjE3ODg0MzY5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkhZS1wifSx7XCJuYW1lXCI6XCJIdW50cyBDcm9zc1wiLFwibGF0aXR1ZGVcIjo1My4zNjA2Mjc4MyxcImxvbmdpdHVkZVwiOi0yLjg1NDk0NjA3NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkhOWFwifSx7XCJuYW1lXCI6XCJLaXJrYnkgKE1lcnNleXNpZGUpXCIsXCJsYXRpdHVkZVwiOjUzLjQ4NjIwMzUxLFwibG9uZ2l0dWRlXCI6LTIuOTAyODMzMzk2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiS0lSXCJ9LHtcIm5hbWVcIjpcIktpcmtkYWxlXCIsXCJsYXRpdHVkZVwiOjUzLjQ0MDU0NzksXCJsb25naXR1ZGVcIjotMi45ODE1MDY1OTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJLS0RcIn0se1wibmFtZVwiOlwiTGVhc293ZVwiLFwibGF0aXR1ZGVcIjo1My40MDgwNTY3NixcImxvbmdpdHVkZVwiOi0zLjA5OTYwMzk5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIkxTV1wifSx7XCJuYW1lXCI6XCJMaXR0bGUgU3V0dG9uXCIsXCJsYXRpdHVkZVwiOjUzLjI4NTUzMTAyLFwibG9uZ2l0dWRlXCI6LTIuOTQzMjk5MTI5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiTFRUXCJ9LHtcIm5hbWVcIjpcIkxpdmVycG9vbCBDZW50cmFsXCIsXCJsYXRpdHVkZVwiOjUzLjQwNDYxMDUzLFwibG9uZ2l0dWRlXCI6LTIuOTc5MTU5OTM2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiTFZDXCJ9LHtcIm5hbWVcIjpcIkxpdmVycG9vbCBKYW1lcyBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTMuNDA0Nzc0NTIsXCJsb25naXR1ZGVcIjotMi45OTE5NjQ4NzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJMVkpcIn0se1wibmFtZVwiOlwiTGl2ZXJwb29sIFNvdXRoIFBhcmt3YXlcIixcImxhdGl0dWRlXCI6NTMuMzU3NTgxMjEsXCJsb25naXR1ZGVcIjotMi44ODkyOTQwMzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJMUFlcIn0se1wibmFtZVwiOlwiTWFnaHVsbFwiLFwibGF0aXR1ZGVcIjo1My41MDY0ODM0NyxcImxvbmdpdHVkZVwiOi0yLjkzMDg1Nzc5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIk1BR1wifSx7XCJuYW1lXCI6XCJNYW5vciBSb2FkXCIsXCJsYXRpdHVkZVwiOjUzLjM5NDc5NzQyLFwibG9uZ2l0dWRlXCI6LTMuMTcxNDUwMjk1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiTU5SXCJ9LHtcIm5hbWVcIjpcIk1lb2xzXCIsXCJsYXRpdHVkZVwiOjUzLjM5OTQ1MDMzLFwibG9uZ2l0dWRlXCI6LTMuMTU0MjgxMDg3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiTUVPXCJ9LHtcIm5hbWVcIjpcIk1vb3JmaWVsZHNcIixcImxhdGl0dWRlXCI6NTMuNDA4NTczMDgsXCJsb25naXR1ZGVcIjotMi45ODkxNzk4NzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJNUkZcIn0se1wibmFtZVwiOlwiTW9yZXRvbiAoTWVyc2V5c2lkZSlcIixcImxhdGl0dWRlXCI6NTMuNDA3OTMxMzQsXCJsb25naXR1ZGVcIjotMy4xMTMxNDAxNjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJNUlRcIn0se1wibmFtZVwiOlwiTmV3IEJyaWdodG9uXCIsXCJsYXRpdHVkZVwiOjUzLjQzNzI3NTk4LFwibG9uZ2l0dWRlXCI6LTMuMDQ5MTc0Mjg4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiTkJOXCJ9LHtcIm5hbWVcIjpcIk9sZCBSb2FuXCIsXCJsYXRpdHVkZVwiOjUzLjQ4NjkwODAxLFwibG9uZ2l0dWRlXCI6LTIuOTUxMDc3MDgzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiT1JOXCJ9LHtcIm5hbWVcIjpcIk9ybXNraXJrXCIsXCJsYXRpdHVkZVwiOjUzLjU2ODk2ODg4LFwibG9uZ2l0dWRlXCI6LTIuODgxNzkzNDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJPTVNcIn0se1wibmFtZVwiOlwiT3JyZWxsIFBhcmtcIixcImxhdGl0dWRlXCI6NTMuNDYxOTEwMjIsXCJsb25naXR1ZGVcIjotMi45NjMzMjE1NDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJPUEtcIn0se1wibmFtZVwiOlwiT3ZlcnBvb2xcIixcImxhdGl0dWRlXCI6NTMuMjg0MTQ3NTgsXCJsb25naXR1ZGVcIjotMi45MjQ4MTg2MTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJPVkVcIn0se1wibmFtZVwiOlwiUG9ydCBTdW5saWdodFwiLFwibGF0aXR1ZGVcIjo1My4zNDkyNjkzLFwibG9uZ2l0dWRlXCI6LTIuOTk4MDM3MDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJQU0xcIn0se1wibmFtZVwiOlwiUmljZSBMYW5lXCIsXCJsYXRpdHVkZVwiOjUzLjQ1Nzc4MzI4LFwibG9uZ2l0dWRlXCI6LTIuOTYyMzI0NDU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiUklMXCJ9LHtcIm5hbWVcIjpcIlJvY2sgRmVycnlcIixcImxhdGl0dWRlXCI6NTMuMzcyODkyNTksXCJsb25naXR1ZGVcIjotMy4wMTA5MTQ5MDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJSRllcIn0se1wibmFtZVwiOlwiU2FuZGhpbGxzXCIsXCJsYXRpdHVkZVwiOjUzLjQyOTk0ODA5LFwibG9uZ2l0dWRlXCI6LTIuOTkxNDk3MzIyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiU0RMXCJ9LHtcIm5hbWVcIjpcIlNlYWZvcnRoICYgTGl0aGVybGFuZFwiLFwibGF0aXR1ZGVcIjo1My40NjYxMTI5MyxcImxvbmdpdHVkZVwiOi0zLjAwNTI5NTEyMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIlNGTFwifSx7XCJuYW1lXCI6XCJTb3V0aHBvcnRcIixcImxhdGl0dWRlXCI6NTMuNjQ2NTI3NzcsXCJsb25naXR1ZGVcIjotMy4wMDI0NDA2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIlNPUFwifSx7XCJuYW1lXCI6XCJTcGl0YWxcIixcImxhdGl0dWRlXCI6NTMuMzM5OTU0ODUsXCJsb25naXR1ZGVcIjotMi45OTM5MTQ0NDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJTUElcIn0se1wibmFtZVwiOlwiU3QgTWljaGFlbHNcIixcImxhdGl0dWRlXCI6NTMuMzc1NjE3ODcsXCJsb25naXR1ZGVcIjotMi45NTI4MDQ3NDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJTVE1cIn0se1wibmFtZVwiOlwiVG93biBHcmVlblwiLFwibGF0aXR1ZGVcIjo1My41NDI4MjE0NyxcImxvbmdpdHVkZVwiOi0yLjkwNDQ5MDQ4NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTUVcIixcImNyc0NvZGVcIjpcIlRXTlwifSx7XCJuYW1lXCI6XCJXYWxsYXNleSBHcm92ZSBSb2FkXCIsXCJsYXRpdHVkZVwiOjUzLjQyODAxNDY3LFwibG9uZ2l0dWRlXCI6LTMuMDY5NzE2MzI1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiV0xHXCJ9LHtcIm5hbWVcIjpcIldhbGxhc2V5IFZpbGxhZ2VcIixcImxhdGl0dWRlXCI6NTMuNDIyODk2LFwibG9uZ2l0dWRlXCI6LTMuMDY5MTM2MzU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiV0xWXCJ9LHtcIm5hbWVcIjpcIldhbHRvbiAoTWVyc2V5c2lkZSlcIixcImxhdGl0dWRlXCI6NTMuNDU2MjI3NDYsXCJsb25naXR1ZGVcIjotMi45NjU3NTMyMjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJXQU9cIn0se1wibmFtZVwiOlwiV2F0ZXJsb28gKE1lcnNleXNpZGUpXCIsXCJsYXRpdHVkZVwiOjUzLjQ3NDk2NTkzLFwibG9uZ2l0dWRlXCI6LTMuMDI1NTQzOTQ2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJNRVwiLFwiY3JzQ29kZVwiOlwiV0xPXCJ9LHtcIm5hbWVcIjpcIldlc3QgS2lyYnlcIixcImxhdGl0dWRlXCI6NTMuMzczMTkxMjcsXCJsb25naXR1ZGVcIjotMy4xODM3Njk0OTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk1FXCIsXCJjcnNDb2RlXCI6XCJXS0lcIn0se1wibmFtZVwiOlwiQmlybWluZ2hhbSBOZXcgU3RyZWV0XCIsXCJsYXRpdHVkZVwiOjUyLjQ3ODE5NDE5LFwibG9uZ2l0dWRlXCI6LTEuODk4MzYwODI2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOUlwiLFwiY3JzQ29kZVwiOlwiQkhNXCJ9LHtcIm5hbWVcIjpcIkJyaXN0b2wgVGVtcGxlIE1lYWRzXCIsXCJsYXRpdHVkZVwiOjUxLjQ0OTE0Mjk5LFwibG9uZ2l0dWRlXCI6LTIuNTgxMzIyNzk1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOUlwiLFwiY3JzQ29kZVwiOlwiQlJJXCJ9LHtcIm5hbWVcIjpcIkVkaW5idXJnaFwiLFwibGF0aXR1ZGVcIjo1NS45NTIzODcxNixcImxvbmdpdHVkZVwiOi0zLjE4ODIyMTkyMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlJcIixcImNyc0NvZGVcIjpcIkVEQlwifSx7XCJuYW1lXCI6XCJHbGFzZ293IENlbnRyYWxcIixcImxhdGl0dWRlXCI6NTUuODU5NzQxNDMsXCJsb25naXR1ZGVcIjotNC4yNTc2MzYwMDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5SXCIsXCJjcnNDb2RlXCI6XCJHTENcIn0se1wibmFtZVwiOlwiTGVlZHNcIixcImxhdGl0dWRlXCI6NTMuNzk0ODk2OTcsXCJsb25naXR1ZGVcIjotMS41NDc0MzUwNzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5SXCIsXCJjcnNDb2RlXCI6XCJMRFNcIn0se1wibmFtZVwiOlwiTGl2ZXJwb29sIExpbWUgU3RyZWV0XCIsXCJsYXRpdHVkZVwiOjUzLjQwNzMxODk4LFwibG9uZ2l0dWRlXCI6LTIuOTc3NzMyODM3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOUlwiLFwiY3JzQ29kZVwiOlwiTElWXCJ9LHtcIm5hbWVcIjpcIkxvbmRvbiBCcmlkZ2VcIixcImxhdGl0dWRlXCI6NTEuNTA1MDk2NDcsXCJsb25naXR1ZGVcIjotMC4wODUwNjAzODUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5SXCIsXCJjcnNDb2RlXCI6XCJMQkdcIn0se1wibmFtZVwiOlwiTG9uZG9uIENhbm5vbiBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTEuNTEwNTgyNjUsXCJsb25naXR1ZGVcIjotMC4wOTA2MDkzOTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5SXCIsXCJjcnNDb2RlXCI6XCJDU1RcIn0se1wibmFtZVwiOlwiTG9uZG9uIENoYXJpbmcgQ3Jvc3NcIixcImxhdGl0dWRlXCI6NTEuNTA3Njg4MDMsXCJsb25naXR1ZGVcIjotMC4xMjQxMDU3MjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5SXCIsXCJjcnNDb2RlXCI6XCJDSFhcIn0se1wibmFtZVwiOlwiTG9uZG9uIEV1c3RvblwiLFwibGF0aXR1ZGVcIjo1MS41MjgzNzYyNixcImxvbmdpdHVkZVwiOi0wLjEzNDU1ODQ3OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlJcIixcImNyc0NvZGVcIjpcIkVVU1wifSx7XCJuYW1lXCI6XCJMb25kb24gS2luZ3MgQ3Jvc3NcIixcImxhdGl0dWRlXCI6NTEuNTMwODg4NDIsXCJsb25naXR1ZGVcIjotMC4xMjI5MjEzNDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5SXCIsXCJjcnNDb2RlXCI6XCJLR1hcIn0se1wibmFtZVwiOlwiTG9uZG9uIExpdmVycG9vbCBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTEuNTE4MDIzMDQsXCJsb25naXR1ZGVcIjotMC4wODE5OTU2OTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5SXCIsXCJjcnNDb2RlXCI6XCJMU1RcIn0se1wibmFtZVwiOlwiTG9uZG9uIFBhZGRpbmd0b25cIixcImxhdGl0dWRlXCI6NTEuNTE2NDUxNDEsXCJsb25naXR1ZGVcIjotMC4xNzY4NDQ3NDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5SXCIsXCJjcnNDb2RlXCI6XCJQQURcIn0se1wibmFtZVwiOlwiTG9uZG9uIFN0IFBhbmNyYXMgSW50ZXJuYXRpb25hbFwiLFwibGF0aXR1ZGVcIjo1MS41MzA2MjQzNCxcImxvbmdpdHVkZVwiOi0wLjEyNTUyNzQzOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlJcIixcImNyc0NvZGVcIjpcIlNUUFwifSx7XCJuYW1lXCI6XCJMb25kb24gVmljdG9yaWFcIixcImxhdGl0dWRlXCI6NTEuNDk1MjYxMzksXCJsb25naXR1ZGVcIjotMC4xNDQ1NDA1OTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5SXCIsXCJjcnNDb2RlXCI6XCJWSUNcIn0se1wibmFtZVwiOlwiTG9uZG9uIFdhdGVybG9vXCIsXCJsYXRpdHVkZVwiOjUxLjUwMzUwNyxcImxvbmdpdHVkZVwiOi0wLjExMzg5NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlJcIixcImNyc0NvZGVcIjpcIldBVFwifSx7XCJuYW1lXCI6XCJNYW5jaGVzdGVyIFBpY2NhZGlsbHlcIixcImxhdGl0dWRlXCI6NTMuNDc2NzE5OTgsXCJsb25naXR1ZGVcIjotMi4yMjg5Nzc4MTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5SXCIsXCJjcnNDb2RlXCI6XCJNQU5cIn0se1wibmFtZVwiOlwiUmVhZGluZ1wiLFwibGF0aXR1ZGVcIjo1MS40NTg3ODE4OSxcImxvbmdpdHVkZVwiOi0wLjk3MTg1NDM3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlJcIixcImNyc0NvZGVcIjpcIlJER1wifSx7XCJuYW1lXCI6XCJTdHJhdGZvcmQgSW50ZXJuYXRpb25hbFwiLFwibGF0aXR1ZGVcIjo1MS41NDUwMzcsXCJsb25naXR1ZGVcIjotMC4wMDg2MTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5SXCIsXCJjcnNDb2RlXCI6XCJTRkFcIn0se1wibmFtZVwiOlwiQWNjcmluZ3RvblwiLFwibGF0aXR1ZGVcIjo1My43NTMyLFwibG9uZ2l0dWRlXCI6LTIuMzcwMDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJBQ1JcIn0se1wibmFtZVwiOlwiQWNrbGluZ3RvblwiLFwibGF0aXR1ZGVcIjo1NS4zMDcxLFwibG9uZ2l0dWRlXCI6LTEuNjUxODQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJBQ0tcIn0se1wibmFtZVwiOlwiQWRsaW5ndG9uIChDaGVzaGlyZSlcIixcImxhdGl0dWRlXCI6NTMuMzE5NTcsXCJsb25naXR1ZGVcIjotMi4xMzM1NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkFEQ1wifSx7XCJuYW1lXCI6XCJBZGxpbmd0b24gKExhbmNzKVwiLFwibGF0aXR1ZGVcIjo1My42MTI5NDU1LFwibG9uZ2l0dWRlXCI6LTIuNjAzMDYxMTQzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQURMXCJ9LHtcIm5hbWVcIjpcIkFkd2lja1wiLFwibGF0aXR1ZGVcIjo1My41NzMwMjMwNCxcImxvbmdpdHVkZVwiOi0xLjE4MTQ3NTA5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkFXS1wifSx7XCJuYW1lXCI6XCJBbGRlcmxleSBFZGdlXCIsXCJsYXRpdHVkZVwiOjUzLjMwMzc5NTIxLFwibG9uZ2l0dWRlXCI6LTIuMjM2ODAwNDI4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQUxEXCJ9LHtcIm5hbWVcIjpcIkFsbGVucyBXZXN0XCIsXCJsYXRpdHVkZVwiOjU0LjUyNDExNjg5LFwibG9uZ2l0dWRlXCI6LTEuMzYzNDI2MTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJBTFdcIn0se1wibmFtZVwiOlwiQWxubW91dGhcIixcImxhdGl0dWRlXCI6NTUuMzkyNDExNjEsXCJsb25naXR1ZGVcIjotMS42MzY4Nzk3MDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJBTE1cIn0se1wibmFtZVwiOlwiQWx0aG9ycGVcIixcImxhdGl0dWRlXCI6NTMuNTg1Mjg5NzQsXCJsb25naXR1ZGVcIjotMC43MzI1ODYzOTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJBTFBcIn0se1wibmFtZVwiOlwiQWx0cmluY2hhbVwiLFwibGF0aXR1ZGVcIjo1My4zODc0NTQ1LFwibG9uZ2l0dWRlXCI6LTIuMzQ3MjgxNDU0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQUxUXCJ9LHtcIm5hbWVcIjpcIkFuc2RlbGwgJiBGYWlyaGF2ZW5cIixcImxhdGl0dWRlXCI6NTMuNzQxNTcyMzUsXCJsb25naXR1ZGVcIjotMi45OTMwNTY0ODcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJBRlZcIn0se1wibmFtZVwiOlwiQXBwZXJsZXkgQnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUzLjg0MTM4LFwibG9uZ2l0dWRlXCI6MS43MDMwNjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJBUFlcIn0se1wibmFtZVwiOlwiQXBwbGVieVwiLFwibGF0aXR1ZGVcIjo1NC41ODAzNTM2NixcImxvbmdpdHVkZVwiOi0yLjQ4NjY5MjQwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkFQUFwifSx7XCJuYW1lXCI6XCJBcHBsZXkgQnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUzLjU3ODY5NixcImxvbmdpdHVkZVwiOi0yLjcxOTIzOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkFQQlwifSx7XCJuYW1lXCI6XCJBcmR3aWNrXCIsXCJsYXRpdHVkZVwiOjUzLjQ3MTM2MzcsXCJsb25naXR1ZGVcIjotMi4yMTM4ODM1NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkFES1wifSx7XCJuYW1lXCI6XCJBcm1hdGh3YWl0ZVwiLFwibGF0aXR1ZGVcIjo1NC44MDkxMTM2LFwibG9uZ2l0dWRlXCI6LTIuNzcxNjgyMDA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQVdUXCJ9LHtcIm5hbWVcIjpcIkFycmFtXCIsXCJsYXRpdHVkZVwiOjUzLjg4NDU4MjE3LFwibG9uZ2l0dWRlXCI6LTAuNDI2ODU3MjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJBUlJcIn0se1wibmFtZVwiOlwiQXNoYnVyeXNcIixcImxhdGl0dWRlXCI6NTMuNDcxMzk3MTUsXCJsb25naXR1ZGVcIjotMi4xOTQyOTg2NjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJBQllcIn0se1wibmFtZVwiOlwiQXNobGV5XCIsXCJsYXRpdHVkZVwiOjUzLjM1NjAxMTQxLFwibG9uZ2l0dWRlXCI6LTIuMzQxMDE1ODk3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQVNZXCJ9LHtcIm5hbWVcIjpcIkFzaHRvbi11bmRlci1MeW5lXCIsXCJsYXRpdHVkZVwiOjUzLjQ5MTI4NDc0LFwibG9uZ2l0dWRlXCI6LTIuMDkzNDA0MDA5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQUhOXCJ9LHtcIm5hbWVcIjpcIkFza2FtXCIsXCJsYXRpdHVkZVwiOjU0LjE4OTA0NDA5LFwibG9uZ2l0dWRlXCI6LTMuMjA0NTIyMjUzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQVNLXCJ9LHtcIm5hbWVcIjpcIkFzcGF0cmlhXCIsXCJsYXRpdHVkZVwiOjU0Ljc1OTMyMjU0LFwibG9uZ2l0dWRlXCI6LTMuMzMxNzM3NTc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQVNQXCJ9LHtcIm5hbWVcIjpcIkF0aGVydG9uXCIsXCJsYXRpdHVkZVwiOjUzLjUyOTAxNjMzLFwibG9uZ2l0dWRlXCI6LTIuNDc4MTc3NzE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQVROXCJ9LHtcIm5hbWVcIjpcIkJhaWxkb25cIixcImxhdGl0dWRlXCI6NTMuODQ5Njk2ODMsXCJsb25naXR1ZGVcIjotMS43NTM3MTQ1ODgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCTERcIn0se1wibmFtZVwiOlwiQmFtYmVyIEJyaWRnZVwiLFwibGF0aXR1ZGVcIjo1My43MjY3ODY4MyxcImxvbmdpdHVkZVwiOi0yLjY2MDc2OTE4OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJNQlwifSx7XCJuYW1lXCI6XCJCYW1mb3JkXCIsXCJsYXRpdHVkZVwiOjUzLjMzOTAxNDY0LFwibG9uZ2l0dWRlXCI6LTEuNjg5MDgyMTc3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQkFNXCJ9LHtcIm5hbWVcIjpcIkJhcmRvbiBNaWxsXCIsXCJsYXRpdHVkZVwiOjU0Ljk3NDQ5Mzg3LFwibG9uZ2l0dWRlXCI6LTIuMzQ2NDk3ODY0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQkxMXCJ9LHtcIm5hbWVcIjpcIkJhcmUgTGFuZVwiLFwibGF0aXR1ZGVcIjo1NC4wNzUzMzA2NixcImxvbmdpdHVkZVwiOi0yLjgzNTk0MDM3OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJBUlwifSx7XCJuYW1lXCI6XCJCYXJuc2xleVwiLFwibGF0aXR1ZGVcIjo1My41NTQ2MjY2MixcImxvbmdpdHVkZVwiOi0xLjQ3NzA3ODQ0NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJOWVwifSx7XCJuYW1lXCI6XCJCYXJyb3cgSGF2ZW5cIixcImxhdGl0dWRlXCI6NTMuNjk3MTQ0NSxcImxvbmdpdHVkZVwiOi0wLjM5MTQ0MjgwNixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJBVlwifSx7XCJuYW1lXCI6XCJCYXJ0b24tb24tSHVtYmVyXCIsXCJsYXRpdHVkZVwiOjUzLjY4ODgzOTc0LFwibG9uZ2l0dWRlXCI6LTAuNDQzMjUxMTk1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQkFVXCJ9LHtcIm5hbWVcIjpcIkJhdGxleVwiLFwibGF0aXR1ZGVcIjo1My43MDkxNDgwNSxcImxvbmdpdHVkZVwiOi0xLjYyMjcyODczOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJUTFwifSx7XCJuYW1lXCI6XCJCYXR0ZXJzYnlcIixcImxhdGl0dWRlXCI6NTQuNDU3Njg5NzksXCJsb25naXR1ZGVcIjotMS4wOTI5NzkxMDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCVFRcIn0se1wibmFtZVwiOlwiQmVsbGUgVnVlXCIsXCJsYXRpdHVkZVwiOjUzLjQ2MjE2MDU1LFwibG9uZ2l0dWRlXCI6LTIuMTgwMzk5MzAxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQkxWXCJ9LHtcIm5hbWVcIjpcIkJlbXB0b25cIixcImxhdGl0dWRlXCI6NTQuMTI4Mjk1NjksXCJsb25naXR1ZGVcIjotMC4xODA0Mjc2MjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCRU1cIn0se1wibmFtZVwiOlwiQmVuIFJoeWRkaW5nXCIsXCJsYXRpdHVkZVwiOjUzLjkyNjE3NzM3LFwibG9uZ2l0dWRlXCI6LTEuNzk3NDI3ODksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCRVlcIn0se1wibmFtZVwiOlwiQmVudGhhbVwiLFwibGF0aXR1ZGVcIjo1NC4xMTU3OTc4NixcImxvbmdpdHVkZVwiOi0yLjUxMDkxMjkyOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJFTlwifSx7XCJuYW1lXCI6XCJCZW50bGV5IChTb3V0aCBZb3JrcylcIixcImxhdGl0dWRlXCI6NTMuNTQzNjkwNjcsXCJsb25naXR1ZGVcIjotMS4xNTE1NTYyMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJZS1wifSx7XCJuYW1lXCI6XCJCZXJyeSBCcm93XCIsXCJsYXRpdHVkZVwiOjUzLjYyMTA1NDg5LFwibG9uZ2l0dWRlXCI6LTEuNzkzNDMzODMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCQldcIn0se1wibmFtZVwiOlwiQmVzY2FyIExhbmVcIixcImxhdGl0dWRlXCI6NTMuNjIzNTUzOTIsXCJsb25naXR1ZGVcIjotMi45MTQ2ODMwMjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCRVNcIn0se1wibmFtZVwiOlwiQmV2ZXJsZXlcIixcImxhdGl0dWRlXCI6NTMuODQyMzAzMTUsXCJsb25naXR1ZGVcIjotMC40MjM4ODI4NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJFVlwifSx7XCJuYW1lXCI6XCJCaWxsaW5naGFtIChDbGV2ZWxhbmQpXCIsXCJsYXRpdHVkZVwiOjU0LjYwNjMyMzQ0LFwibG9uZ2l0dWRlXCI6LTEuMjc4NTQyMzE4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQklMXCJ9LHtcIm5hbWVcIjpcIkJpbmdsZXlcIixcImxhdGl0dWRlXCI6NTMuODQ4NDA5NjcsXCJsb25naXR1ZGVcIjotMS44MzY5NDQ3NDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCSVlcIn0se1wibmFtZVwiOlwiQmlzaG9wIEF1Y2tsYW5kXCIsXCJsYXRpdHVkZVwiOjU0LjY1NzQ3MjE1LFwibG9uZ2l0dWRlXCI6LTEuNjc3NTY1Mjg5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQklBXCJ9LHtcIm5hbWVcIjpcIkJsYWNrYnVyblwiLFwibGF0aXR1ZGVcIjo1My43NDY1MjYzNyxcImxvbmdpdHVkZVwiOi0yLjQ3OTEyNzUxMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJCTlwifSx7XCJuYW1lXCI6XCJCbGFja3Bvb2wgTm9ydGhcIixcImxhdGl0dWRlXCI6NTMuODIxOTI4NTcsXCJsb25naXR1ZGVcIjotMy4wNDkyODA4MjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCUE5cIn0se1wibmFtZVwiOlwiQmxhY2twb29sIFBsZWFzdXJlIEJlYWNoXCIsXCJsYXRpdHVkZVwiOjUzLjc4ODI0NDI4LFwibG9uZ2l0dWRlXCI6LTMuMDUzODEzNTY4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQlBCXCJ9LHtcIm5hbWVcIjpcIkJsYWNrcG9vbCBTb3V0aFwiLFwibGF0aXR1ZGVcIjo1My43OTg2MjI5LFwibG9uZ2l0dWRlXCI6LTMuMDQ5MDYzMzE0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQlBTXCJ9LHtcIm5hbWVcIjpcIkJsYWNrcm9kXCIsXCJsYXRpdHVkZVwiOjUzLjU5MTUzNzAyLFwibG9uZ2l0dWRlXCI6LTIuNTY5NTMzMDM2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQkxLXCJ9LHtcIm5hbWVcIjpcIkJsYXlkb25cIixcImxhdGl0dWRlXCI6NTQuOTY1Nzg3MTUsXCJsb25naXR1ZGVcIjotMS43MTI1ODczOTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCTE9cIn0se1wibmFtZVwiOlwiQm9sdG9uXCIsXCJsYXRpdHVkZVwiOjUzLjU3NDE1NzQ5LFwibG9uZ2l0dWRlXCI6LTIuNDI1ODI5NzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCT05cIn0se1wibmFtZVwiOlwiQm9sdG9uLVVwb24tRGVhcm5lXCIsXCJsYXRpdHVkZVwiOjUzLjUxOTAxNDY0LFwibG9uZ2l0dWRlXCI6LTEuMzEyMjI3NDkxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQlREXCJ9LHtcIm5hbWVcIjpcIkJvb3RsZSAoQ3VtYnJpYSlcIixcImxhdGl0dWRlXCI6NTQuMjkwMzU2MjksXCJsb25naXR1ZGVcIjotMy4zOTQ5MDIyMzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCT0NcIn0se1wibmFtZVwiOlwiQnJhZGZvcmQgRm9yc3RlciBTcXVhcmVcIixcImxhdGl0dWRlXCI6NTMuNzk2OTM0NTYsXCJsb25naXR1ZGVcIjotMS43NTI5NjEwODQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCRFFcIn0se1wibmFtZVwiOlwiQnJhZGZvcmQgSW50ZXJjaGFuZ2VcIixcImxhdGl0dWRlXCI6NTMuNzkxMDg1MjIsXCJsb25naXR1ZGVcIjotMS43NDk1OTUxODYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCRElcIn0se1wibmFtZVwiOlwiQnJhbWhhbGxcIixcImxhdGl0dWRlXCI6NTMuMzU5OTgzODYsXCJsb25naXR1ZGVcIjotMi4xNjIyMzY2OTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCTUxcIn0se1wibmFtZVwiOlwiQnJhbWxleSAoVyBZb3JrcylcIixcImxhdGl0dWRlXCI6NTMuODA1OTkwNzcsXCJsb25naXR1ZGVcIjotMS42MzgxMDgwMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJMRVwifSx7XCJuYW1lXCI6XCJCcmFtcHRvbiAoQ3VtYnJpYSlcIixcImxhdGl0dWRlXCI6NTQuOTMyNjM2NzMsXCJsb25naXR1ZGVcIjotMi43MDM4MTM3MTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCTVBcIn0se1wibmFtZVwiOlwiQnJheXN0b25lcyAoQ3VtYnJpYSlcIixcImxhdGl0dWRlXCI6NTQuNDM5NTQzNjcsXCJsb25naXR1ZGVcIjotMy41NDMzNzQ4MzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCWVNcIn0se1wibmFtZVwiOlwiQnJlZGJ1cnlcIixcImxhdGl0dWRlXCI6NTMuNDIyOTY1NDIsXCJsb25naXR1ZGVcIjotMi4xMDk4MDczMjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCRFlcIn0se1wibmFtZVwiOlwiQnJpZGxpbmd0b25cIixcImxhdGl0dWRlXCI6NTQuMDg0MTQ2NTYsXCJsb25naXR1ZGVcIjotMC4xOTg3MTkxNDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCRFRcIn0se1wibmFtZVwiOlwiQnJpZXJmaWVsZFwiLFwibGF0aXR1ZGVcIjo1My44MjQ1NDg3NCxcImxvbmdpdHVkZVwiOi0yLjIzNjk0NjgzNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJSRlwifSx7XCJuYW1lXCI6XCJCcmlnZ1wiLFwibGF0aXR1ZGVcIjo1My41NDkxNjM1MSxcImxvbmdpdHVkZVwiOi0wLjQ4NjExOTM2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQkdHXCJ9LHtcIm5hbWVcIjpcIkJyaWdob3VzZVwiLFwibGF0aXR1ZGVcIjo1My42OTgyMTM2NixcImxvbmdpdHVkZVwiOi0xLjc3OTQzOTcwOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJHSFwifSx7XCJuYW1lXCI6XCJCcmlubmluZ3RvblwiLFwibGF0aXR1ZGVcIjo1My40MzEwMzQwNyxcImxvbmdpdHVkZVwiOi0yLjEzMDg5OTcxNixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJOVFwifSx7XCJuYW1lXCI6XCJCcm9hZCBHcmVlblwiLFwibGF0aXR1ZGVcIjo1My40MDYxODEzOCxcImxvbmdpdHVkZVwiOi0yLjg5MzQ2NjMwOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJHRVwifSx7XCJuYW1lXCI6XCJCcm9hZGJvdHRvbVwiLFwibGF0aXR1ZGVcIjo1My40NDA5OTIyOCxcImxvbmdpdHVkZVwiOi0yLjAxNjUxNDk1MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJEQlwifSx7XCJuYW1lXCI6XCJCcm9ja2hvbGVzXCIsXCJsYXRpdHVkZVwiOjUzLjU5NzE2NjE5LFwibG9uZ2l0dWRlXCI6LTEuNzcwMjk1ODYxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQkhTXCJ9LHtcIm5hbWVcIjpcIkJyb21sZXkgQ3Jvc3MgKExhbmNzKVwiLFwibGF0aXR1ZGVcIjo1My42MTM3NjM5NCxcImxvbmdpdHVkZVwiOi0yLjQwOTYwMDM1NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJNQ1wifSx7XCJuYW1lXCI6XCJCcm9vbWZsZWV0XCIsXCJsYXRpdHVkZVwiOjUzLjc0MDE1MDQ2LFwibG9uZ2l0dWRlXCI6LTAuNjczMzQ1OTY4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQk1GXCJ9LHtcIm5hbWVcIjpcIkJyeW5cIixcImxhdGl0dWRlXCI6NTMuNDk5NDUxNDQsXCJsb25naXR1ZGVcIjotMi42NDgxODM3ODgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCWU5cIn0se1wibmFtZVwiOlwiQnVja3NoYXcgUGFya3dheVwiLFwibGF0aXR1ZGVcIjo1My42NzI4MjUsXCJsb25naXR1ZGVcIjotMi42NjQ0NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJTVlwifSx7XCJuYW1lXCI6XCJCdXJsZXkgUGFya1wiLFwibGF0aXR1ZGVcIjo1My44MTIxNzU3MixcImxvbmdpdHVkZVwiOi0xLjU3NzkxMjQ2OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJVWVwifSx7XCJuYW1lXCI6XCJCdXJsZXktaW4tV2hhcmZlZGFsZVwiLFwibGF0aXR1ZGVcIjo1My45MDgzODg4MixcImxvbmdpdHVkZVwiOi0xLjc1MzUyMTY2OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJVV1wifSx7XCJuYW1lXCI6XCJCdXJuYWdlXCIsXCJsYXRpdHVkZVwiOjUzLjQyMTkyMzI2LFwibG9uZ2l0dWRlXCI6LTIuMjE1MTQwMTU3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQk5BXCJ9LHtcIm5hbWVcIjpcIkJ1cm5sZXkgQmFycmFja3NcIixcImxhdGl0dWRlXCI6NTMuNzkxMjQ4ODYsXCJsb25naXR1ZGVcIjotMi4yNTgwMTA4NzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCVUJcIn0se1wibmFtZVwiOlwiQnVybmxleSBDZW50cmFsXCIsXCJsYXRpdHVkZVwiOjUzLjc5MzUyMzI3LFwibG9uZ2l0dWRlXCI6LTIuMjQ0OTY5NDg2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQk5DXCJ9LHtcIm5hbWVcIjpcIkJ1cm5sZXkgTWFuY2hlc3RlciBSb2FkXCIsXCJsYXRpdHVkZVwiOjUzLjc4NDk3NjQxLFwibG9uZ2l0dWRlXCI6LTIuMjQ4ODY1ODYyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQllNXCJ9LHtcIm5hbWVcIjpcIkJ1cnNjb3VnaCBCcmlkZ2VcIixcImxhdGl0dWRlXCI6NTMuNjA1MjEyNjcsXCJsb25naXR1ZGVcIjotMi44NDE3NDE4MDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJCQ0JcIn0se1wibmFtZVwiOlwiQnVyc2NvdWdoIEp1bmN0aW9uXCIsXCJsYXRpdHVkZVwiOjUzLjU5ODAzMzI2LFwibG9uZ2l0dWRlXCI6LTIuODQwMDg3OTg5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQkNKXCJ9LHtcIm5hbWVcIjpcIkJ1eHRvblwiLFwibGF0aXR1ZGVcIjo1My4yNjA3NDMzOCxcImxvbmdpdHVkZVwiOi0xLjkxMjg3MDY4MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJVWFwifSx7XCJuYW1lXCI6XCJDYXJrICYgQ2FydG1lbFwiLFwibGF0aXR1ZGVcIjo1NC4xNzc1NjYxMixcImxvbmdpdHVkZVwiOi0yLjk3MjgzMDAyMixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNBS1wifSx7XCJuYW1lXCI6XCJDYXN0bGVmb3JkXCIsXCJsYXRpdHVkZVwiOjUzLjcyNDA5MzQ1LFwibG9uZ2l0dWRlXCI6LTEuMzU0NjU2MjQ3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQ0ZEXCJ9LHtcIm5hbWVcIjpcIkNhc3RsZXRvbiAoTWFuY2hlc3RlcilcIixcImxhdGl0dWRlXCI6NTMuNTkxODYwOCxcImxvbmdpdHVkZVwiOi0yLjE3ODIzMTc3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNBU1wifSx7XCJuYW1lXCI6XCJDYXN0bGV0b24gTW9vclwiLFwibGF0aXR1ZGVcIjo1NC40NjcyODgxMyxcImxvbmdpdHVkZVwiOi0wLjk0NjY0Nzk0MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNTTVwifSx7XCJuYW1lXCI6XCJDYXR0YWxcIixcImxhdGl0dWRlXCI6NTMuOTk3NDk1NjYsXCJsb25naXR1ZGVcIjotMS4zMTk3NzI2ODYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJDVExcIn0se1wibmFtZVwiOlwiQ2hhcGVsLWVuLWxlLUZyaXRoXCIsXCJsYXRpdHVkZVwiOjUzLjMxMjI0NTQ2LFwibG9uZ2l0dWRlXCI6LTEuOTE4NzY5NTc3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQ0VGXCJ9LHtcIm5hbWVcIjpcIkNoYXBlbHRvd24gKFNvdXRoIFlvcmtzKVwiLFwibGF0aXR1ZGVcIjo1My40NjIzNTQxNyxcImxvbmdpdHVkZVwiOi0xLjQ2NjI2ODUwNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNMTlwifSx7XCJuYW1lXCI6XCJDaGFzc2VuIFJvYWRcIixcImxhdGl0dWRlXCI6NTMuNDQ2MTc4NzQsXCJsb25naXR1ZGVcIjotMi4zNjgyMzcxNDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJDU1JcIn0se1wibmFtZVwiOlwiQ2hhdGhpbGxcIixcImxhdGl0dWRlXCI6NTUuNTM2NzI5ODgsXCJsb25naXR1ZGVcIjotMS43MDYzNzgxMDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJDSFRcIn0se1wibmFtZVwiOlwiQ2hlYWRsZSBIdWxtZVwiLFwibGF0aXR1ZGVcIjo1My4zNzU5NDU3OCxcImxvbmdpdHVkZVwiOi0yLjE4ODMwMjIyNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNIVVwifSx7XCJuYW1lXCI6XCJDaGVsZm9yZCAoQ2hlc2hpcmUpXCIsXCJsYXRpdHVkZVwiOjUzLjI3MDg2NTY5LFwibG9uZ2l0dWRlXCI6LTIuMjc5NjA4NzAzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQ0VMXCJ9LHtcIm5hbWVcIjpcIkNoZXJyeSBUcmVlXCIsXCJsYXRpdHVkZVwiOjUzLjczMjg4MDQsXCJsb25naXR1ZGVcIjotMi41MTgzODU0OTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJDWVRcIn0se1wibmFtZVwiOlwiQ2hlc3Rlci1sZS1TdHJlZXRcIixcImxhdGl0dWRlXCI6NTQuODU0NTk4NTYsXCJsb25naXR1ZGVcIjotMS41NzgwMTg3NTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJDTFNcIn0se1wibmFtZVwiOlwiQ2hpbmxleVwiLFwibGF0aXR1ZGVcIjo1My4zNDAzMDU2MSxcImxvbmdpdHVkZVwiOi0xLjk0NDM5OTA0NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNMWVwifSx7XCJuYW1lXCI6XCJDaG9ybGV5XCIsXCJsYXRpdHVkZVwiOjUzLjY1MjU1MzM3LFwibG9uZ2l0dWRlXCI6LTIuNjI2Nzc1MzgxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQ1JMXCJ9LHtcIm5hbWVcIjpcIkNodXJjaCAmIE9zd2FsZHR3aXN0bGVcIixcImxhdGl0dWRlXCI6NTMuNzUwMzUxOTksXCJsb25naXR1ZGVcIjotMi4zOTA5MDk4MTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJDVFdcIn0se1wibmFtZVwiOlwiQ2h1cmNoIEZlbnRvblwiLFwibGF0aXR1ZGVcIjo1My44MjYzMzk5MyxcImxvbmdpdHVkZVwiOi0xLjIyNzQ0MTMzOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNIRlwifSx7XCJuYW1lXCI6XCJDbGFwaGFtIChOb3J0aCBZb3Jrc2hpcmUpXCIsXCJsYXRpdHVkZVwiOjU0LjEwNTM5OTA2LFwibG9uZ2l0dWRlXCI6LTIuNDA5ODQxODM5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQ1BZXCJ9LHtcIm5hbWVcIjpcIkNsaWZ0b24gKE1hbmNoZXN0ZXIpXCIsXCJsYXRpdHVkZVwiOjUzLjUyMjIzNDAxLFwibG9uZ2l0dWRlXCI6LTIuMzE0MTQzMjA5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQ0xJXCJ9LHtcIm5hbWVcIjpcIkNsaXRoZXJvZVwiLFwibGF0aXR1ZGVcIjo1My44NzM0Nzk4NSxcImxvbmdpdHVkZVwiOi0yLjM5NDMzODU2OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNMSFwifSx7XCJuYW1lXCI6XCJDb2xuZVwiLFwibGF0aXR1ZGVcIjo1My44NTQ4NDYxNixcImxvbmdpdHVkZVwiOi0yLjE4MTE3MTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJDTkVcIn0se1wibmFtZVwiOlwiQ29tbW9uZGFsZVwiLFwibGF0aXR1ZGVcIjo1NC40ODE4MjIxNixcImxvbmdpdHVkZVwiOi0wLjk3NDk4Mzk0NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNPTVwifSx7XCJuYW1lXCI6XCJDb25nbGV0b25cIixcImxhdGl0dWRlXCI6NTMuMTU3ODc0MDksXCJsb25naXR1ZGVcIjotMi4xOTI1ODEwMDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJDTkdcIn0se1wibmFtZVwiOlwiQ29uaXNicm91Z2hcIixcImxhdGl0dWRlXCI6NTMuNDg5MzI3MjksXCJsb25naXR1ZGVcIjotMS4yMzQzMzI4ODQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJDTlNcIn0se1wibmFtZVwiOlwiQ29ub25sZXlcIixcImxhdGl0dWRlXCI6NTMuOTE3MjY5NzcsXCJsb25naXR1ZGVcIjotMi4wMTEyMzYzNzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJDRVlcIn0se1wibmFtZVwiOlwiQ29yYnJpZGdlXCIsXCJsYXRpdHVkZVwiOjU0Ljk2NjMwNTA3LFwibG9uZ2l0dWRlXCI6LTIuMDE4NTU2MDYxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQ1JCXCJ9LHtcIm5hbWVcIjpcIkNvcmtpY2tsZVwiLFwibGF0aXR1ZGVcIjo1NC41NDE2NzkwNyxcImxvbmdpdHVkZVwiOi0zLjU4MjE2NDU3OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNLTFwifSx7XCJuYW1lXCI6XCJDb3R0aW5naGFtXCIsXCJsYXRpdHVkZVwiOjUzLjc4MTY2NDgxLFwibG9uZ2l0dWRlXCI6LTAuNDA2NDI1MTA0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQ0dNXCJ9LHtcIm5hbWVcIjpcIkNvdHRpbmdsZXlcIixcImxhdGl0dWRlXCI6NTMuNzY3ODM0NTYsXCJsb25naXR1ZGVcIjotMS41ODc3MDI5NTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJDT1RcIn0se1wibmFtZVwiOlwiQ3JhbWxpbmd0b25cIixcImxhdGl0dWRlXCI6NTUuMDg3NzY5OSxcImxvbmdpdHVkZVwiOi0xLjU5ODU5NzYyMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNSTVwifSx7XCJuYW1lXCI6XCJDcm9zcyBHYXRlc1wiLFwibGF0aXR1ZGVcIjo1My44MDQ5MTc1MixcImxvbmdpdHVkZVwiOi0xLjQ1MDI5NTc0OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNSR1wifSx7XCJuYW1lXCI6XCJDcm9zc2ZsYXR0c1wiLFwibGF0aXR1ZGVcIjo1My44NTg0Nzc5MixcImxvbmdpdHVkZVwiOi0xLjg0NDg4Nzc2OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNGTFwifSx7XCJuYW1lXCI6XCJDcm9zdG9uXCIsXCJsYXRpdHVkZVwiOjUzLjY2NzU2ODgzLFwibG9uZ2l0dWRlXCI6LTIuNzc3NzQ5MDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJDU09cIn0se1wibmFtZVwiOlwiQ3Jvd2xlXCIsXCJsYXRpdHVkZVwiOjUzLjU4OTc1MzQ1LFwibG9uZ2l0dWRlXCI6LTAuODE3MzYyNTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJDV0VcIn0se1wibmFtZVwiOlwiQ3VkZGluZ3RvblwiLFwibGF0aXR1ZGVcIjo1My4yMzk5MzMzOCxcImxvbmdpdHVkZVwiOi0yLjU5OTMwMzM5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQ1VEXCJ9LHtcIm5hbWVcIjpcIkRhaXN5IEhpbGxcIixcImxhdGl0dWRlXCI6NTMuNTM5NDY2MzUsXCJsb25naXR1ZGVcIjotMi41MTU4Njg4ODUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJEU1lcIn0se1wibmFtZVwiOlwiRGFsc3RvbiAoQ3VtYnJpYSlcIixcImxhdGl0dWRlXCI6NTQuODQ2MTc0MTgsXCJsb25naXR1ZGVcIjotMi45ODg4NDg4NzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJETFNcIn0se1wibmFtZVwiOlwiRGFsdG9uIChDdW1icmlhKVwiLFwibGF0aXR1ZGVcIjo1NC4xNTQyNDIzNCxcImxvbmdpdHVkZVwiOi0zLjE3OTAxMDE4MixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkRMVFwifSx7XCJuYW1lXCI6XCJEYW5ieVwiLFwibGF0aXR1ZGVcIjo1NC40NjY0MzAzOSxcImxvbmdpdHVkZVwiOi0wLjkxMDcxOTI5MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkROWVwifSx7XCJuYW1lXCI6XCJEYXJuYWxsXCIsXCJsYXRpdHVkZVwiOjUzLjM4MTExMTY0LFwibG9uZ2l0dWRlXCI6LTEuNDEwNjUyOTI0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiREFOXCJ9LHtcIm5hbWVcIjpcIkRhcnRvblwiLFwibGF0aXR1ZGVcIjo1My41ODgzODAzOSxcImxvbmdpdHVkZVwiOi0xLjUzMTY1MTg2NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkRSVFwifSx7XCJuYW1lXCI6XCJEYXJ3ZW5cIixcImxhdGl0dWRlXCI6NTMuNjk4MDQ0NzgsXCJsb25naXR1ZGVcIjotMi40NjQ5NDUwMTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJEV05cIn0se1wibmFtZVwiOlwiRGF2ZW5wb3J0XCIsXCJsYXRpdHVkZVwiOjUzLjM5MDgyODM4LFwibG9uZ2l0dWRlXCI6LTIuMTUyNTc5OTI2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRFZOXCJ9LHtcIm5hbWVcIjpcIkRlYW5zZ2F0ZVwiLFwibGF0aXR1ZGVcIjo1My40NzQwOTU4NSxcImxvbmdpdHVkZVwiOi0yLjI1MTA2NjEwMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkRHVFwifSx7XCJuYW1lXCI6XCJEZWlnaHRvblwiLFwibGF0aXR1ZGVcIjo1My42Njg4NTgxOSxcImxvbmdpdHVkZVwiOi0xLjc1MjE5NzI2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiREhOXCJ9LHtcIm5hbWVcIjpcIkRlbGFtZXJlXCIsXCJsYXRpdHVkZVwiOjUzLjIyODc4OTIsXCJsb25naXR1ZGVcIjotMi42NjY1NTk0NDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJETE1cIn0se1wibmFtZVwiOlwiRGVuYnkgRGFsZVwiLFwibGF0aXR1ZGVcIjo1My41NzI2NDM1NSxcImxvbmdpdHVkZVwiOi0xLjY2MzIwODY2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkRCRFwifSx7XCJuYW1lXCI6XCJEZW50XCIsXCJsYXRpdHVkZVwiOjU0LjI4MjQxNjA2LFwibG9uZ2l0dWRlXCI6LTIuMzYzNTk3MjE2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRE5UXCJ9LHtcIm5hbWVcIjpcIkRlbnRvblwiLFwibGF0aXR1ZGVcIjo1My40NTY5MjI0MixcImxvbmdpdHVkZVwiOi0yLjEzMDIyNjMwMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkRUTlwifSx7XCJuYW1lXCI6XCJEaW5zZGFsZVwiLFwibGF0aXR1ZGVcIjo1NC41MTQ3MzE5OCxcImxvbmdpdHVkZVwiOi0xLjQ2NzA2NzM4NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkRORFwifSx7XCJuYW1lXCI6XCJEaW50aW5nXCIsXCJsYXRpdHVkZVwiOjUzLjQ0OTM0OTI3LFwibG9uZ2l0dWRlXCI6LTEuOTcwMzA2NDA0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRFRHXCJ9LHtcIm5hbWVcIjpcIkRpc2xleVwiLFwibGF0aXR1ZGVcIjo1My4zNTgxOTg4OSxcImxvbmdpdHVkZVwiOi0yLjA0MjQ3Njk2NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkRTTFwifSx7XCJuYW1lXCI6XCJEb2R3b3J0aFwiLFwibGF0aXR1ZGVcIjo1My41NDQxNjI0MSxcImxvbmdpdHVkZVwiOi0xLjUzMDkzMjgwMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkRPRFwifSx7XCJuYW1lXCI6XCJEb3JlICYgVG90bGV5XCIsXCJsYXRpdHVkZVwiOjUzLjMyNzQ2OTMzLFwibG9uZ2l0dWRlXCI6LTEuNTE1NDQ1MzE0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRE9SXCJ9LHtcIm5hbWVcIjpcIkRvdmUgSG9sZXNcIixcImxhdGl0dWRlXCI6NTMuMjk5ODE4MDQsXCJsb25naXR1ZGVcIjotMS44OTA0MzM3NzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJEVkhcIn0se1wibmFtZVwiOlwiRHJpZmZpZWxkXCIsXCJsYXRpdHVkZVwiOjU0LjAwMTU0MTYxLFwibG9uZ2l0dWRlXCI6LTAuNDM0NjcxMDcyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRFJGXCJ9LHtcIm5hbWVcIjpcIkRyaWdnXCIsXCJsYXRpdHVkZVwiOjU0LjM3Njk2MzEyLFwibG9uZ2l0dWRlXCI6LTMuNDQzNDEwOTIxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRFJJXCJ9LHtcIm5hbWVcIjpcIkRyb25maWVsZFwiLFwibGF0aXR1ZGVcIjo1My4zMDEzOTExOCxcImxvbmdpdHVkZVwiOi0xLjQ2ODc3Mjc5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRFJPXCJ9LHtcIm5hbWVcIjpcIkR1bnN0b25cIixcImxhdGl0dWRlXCI6NTQuOTUwMDUwMzEsXCJsb25naXR1ZGVcIjotMS42NDEwMzQzNjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJET1RcIn0se1wibmFtZVwiOlwiRWFnbGVzY2xpZmZlXCIsXCJsYXRpdHVkZVwiOjU0LjUyOTQzNDgzLFwibG9uZ2l0dWRlXCI6LTEuMzQ5NDM1OTcyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRUFHXCJ9LHtcIm5hbWVcIjpcIkVhcmxlc3Rvd25cIixcImxhdGl0dWRlXCI6NTMuNDUxMTQ3OTcsXCJsb25naXR1ZGVcIjotMi42Mzc2NjAwNzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJFUkxcIn0se1wibmFtZVwiOlwiRWFzdCBEaWRzYnVyeVwiLFwibGF0aXR1ZGVcIjo1My40MDkzMjYzOCxcImxvbmdpdHVkZVwiOi0yLjIyMTk5NjYwMixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkVEWVwifSx7XCJuYW1lXCI6XCJFYXN0IEdhcmZvcnRoXCIsXCJsYXRpdHVkZVwiOjUzLjc5MjEyOTMsXCJsb25naXR1ZGVcIjotMS4zNzAzMTA3OTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJFR0ZcIn0se1wibmFtZVwiOlwiRWFzdHJpbmd0b25cIixcImxhdGl0dWRlXCI6NTMuNzU1MTc3MDgsXCJsb25naXR1ZGVcIjotMC43ODc2MzI2NDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJFR05cIn0se1wibmFtZVwiOlwiRWNjbGVzIChNYW5jaGVzdGVyKVwiLFwibGF0aXR1ZGVcIjo1My40ODUzNzAwMixcImxvbmdpdHVkZVwiOi0yLjMzNDUxNzI3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkVDQ1wifSx7XCJuYW1lXCI6XCJFY2NsZXN0b24gUGFya1wiLFwibGF0aXR1ZGVcIjo1My40MzA3OTcwOCxcImxvbmdpdHVkZVwiOi0yLjc4MDA0MjUyNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkVDTFwifSx7XCJuYW1lXCI6XCJFZGFsZVwiLFwibGF0aXR1ZGVcIjo1My4zNjQ4MDY4LFwibG9uZ2l0dWRlXCI6LTEuODE2MzMwMzcxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRURMXCJ9LHtcIm5hbWVcIjpcIkVkZ2UgSGlsbFwiLFwibGF0aXR1ZGVcIjo1My40MDI2MjY2NyxcImxvbmdpdHVkZVwiOi0yLjk0NjQ4ODkwMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkVER1wifSx7XCJuYW1lXCI6XCJFZ3RvblwiLFwibGF0aXR1ZGVcIjo1NC40Mzc2NzQzNyxcImxvbmdpdHVkZVwiOi0wLjc2MTkxOTg3MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkVHVFwifSx7XCJuYW1lXCI6XCJFbHNlY2FyXCIsXCJsYXRpdHVkZVwiOjUzLjQ5ODY3NzkxLFwibG9uZ2l0dWRlXCI6LTEuNDI3NDE1NjkyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRUxSXCJ9LHtcIm5hbWVcIjpcIkVudHdpc3RsZVwiLFwibGF0aXR1ZGVcIjo1My42NTU5OTI5OCxcImxvbmdpdHVkZVwiOi0yLjQxNDU0ODk3MixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkVOVFwifSx7XCJuYW1lXCI6XCJFdXh0b24gQmFsc2hhdyBMYW5lXCIsXCJsYXRpdHVkZVwiOjUzLjY3MDA3OTU2LFwibG9uZ2l0dWRlXCI6LTIuNjc1MDE4MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkVCQVwifSx7XCJuYW1lXCI6XCJGYWlyZmllbGRcIixcImxhdGl0dWRlXCI6NTMuNDcxNDY3NjQsXCJsb25naXR1ZGVcIjotMi4xNDQ1ODI5OTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJGUkZcIn0se1wibmFtZVwiOlwiRmFybndvcnRoXCIsXCJsYXRpdHVkZVwiOjUzLjU1MDAxNzMzLFwibG9uZ2l0dWRlXCI6LTIuMzg3ODUzNzcyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRk5XXCJ9LHtcIm5hbWVcIjpcIkZlYXRoZXJzdG9uZVwiLFwibGF0aXR1ZGVcIjo1My42Nzg3MjcwNSxcImxvbmdpdHVkZVwiOi0xLjM1OTQzNzU5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkZFQVwifSx7XCJuYW1lXCI6XCJGZXJyaWJ5XCIsXCJsYXRpdHVkZVwiOjUzLjcxNzE2ODg2LFwibG9uZ2l0dWRlXCI6LTAuNTA3ODI0OTI3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRlJZXCJ9LHtcIm5hbWVcIjpcIkZpbGV5XCIsXCJsYXRpdHVkZVwiOjU0LjIwOTg2ODQ0LFwibG9uZ2l0dWRlXCI6LTAuMjkzODUwNDUyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRklMXCJ9LHtcIm5hbWVcIjpcIkZpdHp3aWxsaWFtXCIsXCJsYXRpdHVkZVwiOjUzLjYzMjUxMDczLFwibG9uZ2l0dWRlXCI6LTEuMzczNTk3MzIyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRlpXXCJ9LHtcIm5hbWVcIjpcIkZsaW1ieVwiLFwibGF0aXR1ZGVcIjo1NC42ODk2ODY5NCxcImxvbmdpdHVkZVwiOi0zLjUyMTA0ODAyMixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkZMTVwifSx7XCJuYW1lXCI6XCJGbGl4dG9uXCIsXCJsYXRpdHVkZVwiOjUzLjQ0Mzk3MjIsXCJsb25naXR1ZGVcIjotMi4zODM4NzYwOTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJGTElcIn0se1wibmFtZVwiOlwiRmxvd2VyeSBGaWVsZFwiLFwibGF0aXR1ZGVcIjo1My40NjE2NDAxNyxcImxvbmdpdHVkZVwiOi0yLjA4MDgzNzUwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkZMRlwifSx7XCJuYW1lXCI6XCJGb3hmaWVsZFwiLFwibGF0aXR1ZGVcIjo1NC4yNTg3NjY0MyxcImxvbmdpdHVkZVwiOi0zLjIxNjA3MTk5MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkZPWFwifSx7XCJuYW1lXCI6XCJGcml6aW5naGFsbFwiLFwibGF0aXR1ZGVcIjo1My44MTk1MjYyMyxcImxvbmdpdHVkZVwiOi0xLjc2ODYyNTg2MixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkZaSFwifSx7XCJuYW1lXCI6XCJGdXJuZXNzIFZhbGVcIixcImxhdGl0dWRlXCI6NTMuMzQ4NzY3NixcImxvbmdpdHVkZVwiOi0xLjk4ODgzODU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiRk5WXCJ9LHtcIm5hbWVcIjpcIkdhaW5zYm9yb3VnaCBDZW50cmFsXCIsXCJsYXRpdHVkZVwiOjUzLjM5OTYwODEsXCJsb25naXR1ZGVcIjotMC43Njk2OTc1MzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHTkJcIn0se1wibmFtZVwiOlwiR2FyZm9ydGhcIixcImxhdGl0dWRlXCI6NTMuNzk2MjI2MzYsXCJsb25naXR1ZGVcIjotMS4zODIwOTEyNjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHUkZcIn0se1wibmFtZVwiOlwiR2FyZ3JhdmVcIixcImxhdGl0dWRlXCI6NTMuOTc4NDIzNDgsXCJsb25naXR1ZGVcIjotMi4xMDUxNjM2MzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHR1ZcIn0se1wibmFtZVwiOlwiR2Fyc2RhbGVcIixcImxhdGl0dWRlXCI6NTQuMzIxMzQ5ODUsXCJsb25naXR1ZGVcIjotMi4zMjU4ODg5MjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHU0RcIn0se1wibmFtZVwiOlwiR2Fyc3dvb2RcIixcImxhdGl0dWRlXCI6NTMuNDg4NTMyNTYsXCJsb25naXR1ZGVcIjotMi42NzIxMzIxMzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHU1dcIn0se1wibmFtZVwiOlwiR2F0aHVyc3RcIixcImxhdGl0dWRlXCI6NTMuNTU5NDE2OTgsXCJsb25naXR1ZGVcIjotMi42OTQzOTA5NjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHU1RcIn0se1wibmFtZVwiOlwiR2F0bGV5XCIsXCJsYXRpdHVkZVwiOjUzLjM5MzMyNzg3LFwibG9uZ2l0dWRlXCI6LTIuMjMwNjM1MzA1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiR1RZXCJ9LHtcIm5hbWVcIjpcIkdpZ2dsZXN3aWNrXCIsXCJsYXRpdHVkZVwiOjU0LjA2MTY3MjY0LFwibG9uZ2l0dWRlXCI6LTIuMzAzOTkwOTU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiR0lHXCJ9LHtcIm5hbWVcIjpcIkdpbGJlcmR5a2VcIixcImxhdGl0dWRlXCI6NTMuNzQ3OTc5MTgsXCJsb25naXR1ZGVcIjotMC43MzIyNDQxMzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHQkRcIn0se1wibmFtZVwiOlwiR2xhaXNkYWxlXCIsXCJsYXRpdHVkZVwiOjU0LjQzOTQzNjMzLFwibG9uZ2l0dWRlXCI6LTAuNzkzOTM5NDc3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiR0xTXCJ9LHtcIm5hbWVcIjpcIkdsYXNzaG91Z2h0b25cIixcImxhdGl0dWRlXCI6NTMuNzA5MTkyNzgsXCJsb25naXR1ZGVcIjotMS4zNDE4NTQ4NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkdMSFwifSx7XCJuYW1lXCI6XCJHbGF6ZWJyb29rXCIsXCJsYXRpdHVkZVwiOjUzLjQyODQyMDQxLFwibG9uZ2l0dWRlXCI6LTIuNDYwNDkyNjI5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiR0xaXCJ9LHtcIm5hbWVcIjpcIkdsb3Nzb3BcIixcImxhdGl0dWRlXCI6NTMuNDQ0NDg4MTksXCJsb25naXR1ZGVcIjotMS45NDkwODA5OTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHTE9cIn0se1wibmFtZVwiOlwiR29kbGV5XCIsXCJsYXRpdHVkZVwiOjUzLjQ1MTcyMjQyLFwibG9uZ2l0dWRlXCI6LTIuMDU0NzY3NTYyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiR0RMXCJ9LHtcIm5hbWVcIjpcIkdvbGR0aG9ycGVcIixcImxhdGl0dWRlXCI6NTMuNTMzNDA0MDcsXCJsb25naXR1ZGVcIjotMS4zMTM1MDMxMTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHT0VcIn0se1wibmFtZVwiOlwiR29vbGVcIixcImxhdGl0dWRlXCI6NTMuNzA0OTI5MDgsXCJsb25naXR1ZGVcIjotMC44NzQyMTg1MzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHT09cIn0se1wibmFtZVwiOlwiR29vc3RyZXlcIixcImxhdGl0dWRlXCI6NTMuMjIyNTc0MDcsXCJsb25naXR1ZGVcIjotMi4zMjY0NzQ3OTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHVFJcIn0se1wibmFtZVwiOlwiR29ydG9uXCIsXCJsYXRpdHVkZVwiOjUzLjQ2ODc0MTU2LFwibG9uZ2l0dWRlXCI6LTIuMTY3MTcwNDU2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiR1RPXCJ9LHtcIm5hbWVcIjpcIkdveGhpbGxcIixcImxhdGl0dWRlXCI6NTMuNjc2NzE1NjMsXCJsb25naXR1ZGVcIjotMC4zMzcxMjU0NTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHT1hcIn0se1wibmFtZVwiOlwiR3JlYXQgQXl0b25cIixcImxhdGl0dWRlXCI6NTQuNDg5MzE5NDMsXCJsb25naXR1ZGVcIjotMS4xMTYzNjIwOTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHVEFcIn0se1wibmFtZVwiOlwiR3JlYXQgQ29hdGVzXCIsXCJsYXRpdHVkZVwiOjUzLjU3NTc3MjU1LFwibG9uZ2l0dWRlXCI6LTAuMTMwMjI5NzQ3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiR0NUXCJ9LHtcIm5hbWVcIjpcIkdyZWVuIFJvYWRcIixcImxhdGl0dWRlXCI6NTQuMjQ0NTMzNDUsXCJsb25naXR1ZGVcIjotMy4yNDU1Nzk1OTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHTlJcIn0se1wibmFtZVwiOlwiR3JlZW5iYW5rXCIsXCJsYXRpdHVkZVwiOjUzLjI1MTU3NDMsXCJsb25naXR1ZGVcIjotMi41MzMwNjc5NzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJHQktcIn0se1wibmFtZVwiOlwiR3JlZW5maWVsZFwiLFwibGF0aXR1ZGVcIjo1My41MzkxMzk5MixcImxvbmdpdHVkZVwiOi0yLjAxNDQ0MDU5OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkdORlwifSx7XCJuYW1lXCI6XCJHcmltc2J5IERvY2tzXCIsXCJsYXRpdHVkZVwiOjUzLjU3NDMzOTg2LFwibG9uZ2l0dWRlXCI6LTAuMDc1NjE1MDA2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiR01EXCJ9LHtcIm5hbWVcIjpcIkdyaW5kbGVmb3JkXCIsXCJsYXRpdHVkZVwiOjUzLjMwNTU4NDI4LFwibG9uZ2l0dWRlXCI6LTEuNjI2Mjk1NDQ1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiR1JOXCJ9LHtcIm5hbWVcIjpcIkdyb3Ntb250XCIsXCJsYXRpdHVkZVwiOjU0LjQzNjEyMTUzLFwibG9uZ2l0dWRlXCI6LTAuNzI0OTYyNTIyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiR01UXCJ9LHtcIm5hbWVcIjpcIkd1aWRlIEJyaWRnZVwiLFwibGF0aXR1ZGVcIjo1My40NzQ2NDcwNSxcImxvbmdpdHVkZVwiOi0yLjExMzcwNzMzNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkdVSVwifSx7XCJuYW1lXCI6XCJHdWlzZWxleVwiLFwibGF0aXR1ZGVcIjo1My44NzU5NDY1OSxcImxvbmdpdHVkZVwiOi0xLjcxNTA3Nzg2MixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkdTWVwifSx7XCJuYW1lXCI6XCJHeXBzeSBMYW5lXCIsXCJsYXRpdHVkZVwiOjU0LjUzMjg5NDM4LFwibG9uZ2l0dWRlXCI6LTEuMTc5Mzg2MTI1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiR1lQXCJ9LHtcIm5hbWVcIjpcIkhhYnJvdWdoXCIsXCJsYXRpdHVkZVwiOjUzLjYwNTUzNTAzLFwibG9uZ2l0dWRlXCI6LTAuMjY3OTc1ODQ2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSEFCXCJ9LHtcIm5hbWVcIjpcIkhhZGZpZWxkXCIsXCJsYXRpdHVkZVwiOjUzLjQ2MDc2MzYxLFwibG9uZ2l0dWRlXCI6LTEuOTY1MzI4MDk4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSERGXCJ9LHtcIm5hbWVcIjpcIkhhZyBGb2xkXCIsXCJsYXRpdHVkZVwiOjUzLjUzMzg2NTQxLFwibG9uZ2l0dWRlXCI6LTIuNDk0ODI4ODQ2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSEdGXCJ9LHtcIm5hbWVcIjpcIkhhbGUgKE1hbmNoZXN0ZXIpXCIsXCJsYXRpdHVkZVwiOjUzLjM3ODczNTA1LFwibG9uZ2l0dWRlXCI6LTIuMzQ3MzYwODM5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSEFMXCJ9LHtcIm5hbWVcIjpcIkhhbGV3b29kXCIsXCJsYXRpdHVkZVwiOjUzLjM2NTMzMzI2LFwibG9uZ2l0dWRlXCI6LTIuODI0OTgzNDE2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSEVEXCJ9LHtcIm5hbWVcIjpcIkhhbGlmYXhcIixcImxhdGl0dWRlXCI6NTMuNzIwNDM5NjcsXCJsb25naXR1ZGVcIjotMS44NTQ0ODg3MDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJIRlhcIn0se1wibmFtZVwiOlwiSGFsbC1pJy10aCctV29vZFwiLFwibGF0aXR1ZGVcIjo1My41OTc1Njk0NSxcImxvbmdpdHVkZVwiOi0yLjQxMzk3NjgwNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhJRFwifSx7XCJuYW1lXCI6XCJIYWx0d2hpc3RsZVwiLFwibGF0aXR1ZGVcIjo1NC45Njc4NDk0MixcImxvbmdpdHVkZVwiOi0yLjQ2MzU2MTc3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhXSFwifSx7XCJuYW1lXCI6XCJIYW1tZXJ0b25cIixcImxhdGl0dWRlXCI6NTMuOTk2MTEzNjYsXCJsb25naXR1ZGVcIjotMS4yODMwMzE3NTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJITU1cIn0se1wibmFtZVwiOlwiSGFuZGZvcnRoXCIsXCJsYXRpdHVkZVwiOjUzLjM0NjQyMDI1LFwibG9uZ2l0dWRlXCI6LTIuMjEzMjU3NzQ4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSFRIXCJ9LHtcIm5hbWVcIjpcIkhhcHRvblwiLFwibGF0aXR1ZGVcIjo1My43ODE3NjA0NyxcImxvbmdpdHVkZVwiOi0yLjMxNjY4NTM2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhQTlwifSx7XCJuYW1lXCI6XCJIYXJyaW5ndG9uXCIsXCJsYXRpdHVkZVwiOjU0LjYxMzM0ODUxLFwibG9uZ2l0dWRlXCI6LTMuNTY1NzQxMjYyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSFJSXCJ9LHtcIm5hbWVcIjpcIkhhcnJvZ2F0ZVwiLFwibGF0aXR1ZGVcIjo1My45OTMxOTIxNixcImxvbmdpdHVkZVwiOi0xLjUzNzYxNTEyMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhHVFwifSx7XCJuYW1lXCI6XCJIYXJ0bGVwb29sXCIsXCJsYXRpdHVkZVwiOjU0LjY4Njc2MzAxLFwibG9uZ2l0dWRlXCI6LTEuMjA3MzEwMDU5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSFBMXCJ9LHtcIm5hbWVcIjpcIkhhdGZpZWxkICYgU3RhaW5mb3J0aFwiLFwibGF0aXR1ZGVcIjo1My41ODg5MjEyNCxcImxvbmdpdHVkZVwiOi0xLjAyNDA0NzYxMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhGU1wifSx7XCJuYW1lXCI6XCJIYXRoZXJzYWdlXCIsXCJsYXRpdHVkZVwiOjUzLjMyNTc4NjAyLFwibG9uZ2l0dWRlXCI6LTEuNjUxMTkyNTg0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSFNHXCJ9LHtcIm5hbWVcIjpcIkhhdHRlcnNsZXlcIixcImxhdGl0dWRlXCI6NTMuNDQ1MzAxMjMsXCJsb25naXR1ZGVcIjotMi4wNDAzMDUzNzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJIVFlcIn0se1wibmFtZVwiOlwiSGF5ZG9uIEJyaWRnZVwiLFwibGF0aXR1ZGVcIjo1NC45NzQ4NjA1OCxcImxvbmdpdHVkZVwiOi0yLjI0NzkwNDQ0MixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhEQlwifSx7XCJuYW1lXCI6XCJIYXplbCBHcm92ZVwiLFwibGF0aXR1ZGVcIjo1My4zNzc1NjAwNCxcImxvbmdpdHVkZVwiOi0yLjEyMjAxNjk2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhBWlwifSx7XCJuYW1lXCI6XCJIZWFkaW5nbGV5XCIsXCJsYXRpdHVkZVwiOjUzLjgxODE2MjMxLFwibG9uZ2l0dWRlXCI6LTEuNTkzNjQ5NTE3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSERZXCJ9LHtcIm5hbWVcIjpcIkhlYWxkIEdyZWVuXCIsXCJsYXRpdHVkZVwiOjUzLjM2OTc0NTc3LFwibG9uZ2l0dWRlXCI6LTIuMjM3NDIxNTA4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSERHXCJ9LHtcIm5hbWVcIjpcIkhlYWxpbmdcIixcImxhdGl0dWRlXCI6NTMuNTgxODE3NyxcImxvbmdpdHVkZVwiOi0wLjE2MDYzMDA0OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhMSVwifSx7XCJuYW1lXCI6XCJIZWF0b24gQ2hhcGVsXCIsXCJsYXRpdHVkZVwiOjUzLjQyNTU3ODM1LFwibG9uZ2l0dWRlXCI6LTIuMTc5MDQwNDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJIVENcIn0se1wibmFtZVwiOlwiSGViZGVuIEJyaWRnZVwiLFwibGF0aXR1ZGVcIjo1My43Mzc1OTY0OSxcImxvbmdpdHVkZVwiOi0yLjAwOTA2NTk0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSEJEXCJ9LHtcIm5hbWVcIjpcIkhlaWdoaW5ndG9uXCIsXCJsYXRpdHVkZVwiOjU0LjU5Njk2NzE4LFwibG9uZ2l0dWRlXCI6LTEuNTgyMDc5NzY4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSEVJXCJ9LHtcIm5hbWVcIjpcIkhlbGxpZmllbGRcIixcImxhdGl0dWRlXCI6NTQuMDEwODcwNzQsXCJsb25naXR1ZGVcIjotMi4yMjc4NDExNjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJITERcIn0se1wibmFtZVwiOlwiSGVuc2FsbFwiLFwibGF0aXR1ZGVcIjo1My42OTg1NTk3OCxcImxvbmdpdHVkZVwiOi0xLjExNDUxNTU0OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhFTFwifSx7XCJuYW1lXCI6XCJIZXNzbGVcIixcImxhdGl0dWRlXCI6NTMuNzE3NTkxODQsXCJsb25naXR1ZGVcIjotMC40NDIxODk0NjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJIRVNcIn0se1wibmFtZVwiOlwiSGV3b3J0aFwiLFwibGF0aXR1ZGVcIjo1NC45NTE1NjYwMSxcImxvbmdpdHVkZVwiOi0xLjU1NTc2ODQ0NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhFV1wifSx7XCJuYW1lXCI6XCJIZXhoYW1cIixcImxhdGl0dWRlXCI6NTQuOTc0MTc3MjUsXCJsb25naXR1ZGVcIjotMi4wOTUyNjY4NDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJIRVhcIn0se1wibmFtZVwiOlwiSGV5c2hhbSBQb3J0XCIsXCJsYXRpdHVkZVwiOjU0LjAzMzE1NDM4LFwibG9uZ2l0dWRlXCI6LTIuOTEzMTE1MDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJISEJcIn0se1wibmFtZVwiOlwiSGluZGxleVwiLFwibGF0aXR1ZGVcIjo1My41NDIyNTA0NCxcImxvbmdpdHVkZVwiOi0yLjU3NTQ5NjExNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhJTlwifSx7XCJuYW1lXCI6XCJIb2xtZXMgQ2hhcGVsXCIsXCJsYXRpdHVkZVwiOjUzLjE5ODk1MjM4LFwibG9uZ2l0dWRlXCI6LTIuMzUxMTQ1MTI4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSENIXCJ9LHtcIm5hbWVcIjpcIkhvbmxleVwiLFwibGF0aXR1ZGVcIjo1My42MDgyNDIwOCxcImxvbmdpdHVkZVwiOi0xLjc4MDk2Njc3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhPWVwifSx7XCJuYW1lXCI6XCJIb3BlIChEZXJieXNoaXJlKVwiLFwibGF0aXR1ZGVcIjo1My4zNDU5NDI1LFwibG9uZ2l0dWRlXCI6LTEuNzI4NTM3NTQxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSE9QXCJ9LHtcIm5hbWVcIjpcIkhvcm5iZWFtIFBhcmtcIixcImxhdGl0dWRlXCI6NTMuOTc5ODgzODcsXCJsb25naXR1ZGVcIjotMS41MjY4MjkzODgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJIQlBcIn0se1wibmFtZVwiOlwiSG9yc2ZvcnRoXCIsXCJsYXRpdHVkZVwiOjUzLjg0NzU4MzM4LFwibG9uZ2l0dWRlXCI6LTEuNjMwNjA1MjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJIUlNcIn0se1wibmFtZVwiOlwiSG9ydG9uLWluLVJpYmJsZXNkYWxlXCIsXCJsYXRpdHVkZVwiOjU0LjE0OTM5ODM5LFwibG9uZ2l0dWRlXCI6LTIuMzAyMDMwNDcxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSElSXCJ9LHtcIm5hbWVcIjpcIkhvcndpY2ggUGFya3dheVwiLFwibGF0aXR1ZGVcIjo1My41NzgxMjA1MixcImxvbmdpdHVkZVwiOi0yLjUzOTY3NDI2MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhXSVwifSx7XCJuYW1lXCI6XCJIb3NjYXJcIixcImxhdGl0dWRlXCI6NTMuNTk3MzgzNTgsXCJsb25naXR1ZGVcIjotMi44MDM4MDk1MzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJIU0NcIn0se1wibmFtZVwiOlwiSG91Z2ggR3JlZW5cIixcImxhdGl0dWRlXCI6NTMuMzcyNDA5NjQsXCJsb25naXR1ZGVcIjotMi43NzUwNjczMjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJIR05cIn0se1wibmFtZVwiOlwiSG93ZGVuXCIsXCJsYXRpdHVkZVwiOjUzLjc2NDU1MDA5LFwibG9uZ2l0dWRlXCI6LTAuODYwNjk5NzM0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSE9XXCJ9LHtcIm5hbWVcIjpcIkh1bXBocmV5IFBhcmtcIixcImxhdGl0dWRlXCI6NTMuNDUyMjQ3ODEsXCJsb25naXR1ZGVcIjotMi4zMjc1NDA3NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhVUFwifSx7XCJuYW1lXCI6XCJIdW5jb2F0XCIsXCJsYXRpdHVkZVwiOjUzLjc3MjE1MjE3LFwibG9uZ2l0dWRlXCI6LTIuMzQ1ODk2ODU0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSENUXCJ9LHtcIm5hbWVcIjpcIkh1bm1hbmJ5XCIsXCJsYXRpdHVkZVwiOjU0LjE3NDI5NzQ3LFwibG9uZ2l0dWRlXCI6LTAuMzE0NzczNzgyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSFVCXCJ9LHtcIm5hbWVcIjpcIkh1dHRvbiBDcmFuc3dpY2tcIixcImxhdGl0dWRlXCI6NTMuOTU1NjgwMzIsXCJsb25naXR1ZGVcIjotMC40MzMzMjYyMzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJIVVRcIn0se1wibmFtZVwiOlwiSHV5dG9uXCIsXCJsYXRpdHVkZVwiOjUzLjQwOTY5NDU1LFwibG9uZ2l0dWRlXCI6LTIuODQyOTkxNzY5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSFVZXCJ9LHtcIm5hbWVcIjpcIkh5ZGUgQ2VudHJhbFwiLFwibGF0aXR1ZGVcIjo1My40NTE3NDkxMixcImxvbmdpdHVkZVwiOi0yLjA4NTc4ODAxNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkhZQ1wifSx7XCJuYW1lXCI6XCJIeWRlIE5vcnRoXCIsXCJsYXRpdHVkZVwiOjUzLjQ2NDMzMzMyLFwibG9uZ2l0dWRlXCI6LTIuMDg1ODEzMzg1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSFlUXCJ9LHtcIm5hbWVcIjpcIklsa2xleVwiLFwibGF0aXR1ZGVcIjo1My45MjQ5NTgxMyxcImxvbmdpdHVkZVwiOi0xLjgyMjEwMzU4NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIklMS1wifSx7XCJuYW1lXCI6XCJJbmNlICYgRWx0b25cIixcImxhdGl0dWRlXCI6NTMuMjc2NzYsXCJsb25naXR1ZGVcIjotMi44MTYyMjgxMjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJJTkVcIn0se1wibmFtZVwiOlwiSW5jZSAoTWFuY2hlc3RlcilcIixcImxhdGl0dWRlXCI6NTMuNTM5MTg5ODYsXCJsb25naXR1ZGVcIjotMi42MTI1NzUyNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIklOQ1wifSx7XCJuYW1lXCI6XCJJcmxhbVwiLFwibGF0aXR1ZGVcIjo1My40MzQ4MTM3MyxcImxvbmdpdHVkZVwiOi0yLjQzMzQ2NzA2MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIklSTFwifSx7XCJuYW1lXCI6XCJKYW1lcyBDb29rXCIsXCJsYXRpdHVkZVwiOjU0LjU1MTUsXCJsb25naXR1ZGVcIjotMS4yMDc2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiSkNIXCJ9LHtcIm5hbWVcIjpcIktlYXJzbGV5IChNYW5jaGVzdGVyKVwiLFwibGF0aXR1ZGVcIjo1My41NDQ2NjI4NCxcImxvbmdpdHVkZVwiOi0yLjM3NTczMTYxNixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIktTTFwifSx7XCJuYW1lXCI6XCJLZWlnaGxleVwiLFwibGF0aXR1ZGVcIjo1My44Njc4ODUwNyxcImxvbmdpdHVkZVwiOi0xLjkwMTEyMDc4MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIktFSVwifSx7XCJuYW1lXCI6XCJLZW50cyBCYW5rXCIsXCJsYXRpdHVkZVwiOjU0LjE3MjkwNzksXCJsb25naXR1ZGVcIjotMi45MjUyMjkyMzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJLQktcIn0se1wibmFtZVwiOlwiS2lsZGFsZVwiLFwibGF0aXR1ZGVcIjo1NC40NzcyNzEyOSxcImxvbmdpdHVkZVwiOi0xLjA2Nzg1MjU2MixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIktMRFwifSx7XCJuYW1lXCI6XCJLaXJrIFNhbmRhbGxcIixcImxhdGl0dWRlXCI6NTMuNTYzNDM3MzMsXCJsb25naXR1ZGVcIjotMS4wNzQ5MTMwMzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJLS1NcIn0se1wibmFtZVwiOlwiS2lya2J5IFN0ZXBoZW5cIixcImxhdGl0dWRlXCI6NTQuNDU1MTI5OTgsXCJsb25naXR1ZGVcIjotMi4zNjg1OTY2MjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJLU1dcIn0se1wibmFtZVwiOlwiS2lya2J5LWluLUZ1cm5lc3NcIixcImxhdGl0dWRlXCI6NTQuMjMyMzQyNTksXCJsb25naXR1ZGVcIjotMy4xODg5MDYzNDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJLQkZcIn0se1wibmFtZVwiOlwiS2lya2hhbSAmIFdlc2hhbVwiLFwibGF0aXR1ZGVcIjo1My43ODczODUzNyxcImxvbmdpdHVkZVwiOi0yLjg4MTgxMzU5NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIktLTVwifSx7XCJuYW1lXCI6XCJLaXJ0b24gTGluZHNleVwiLFwibGF0aXR1ZGVcIjo1My40ODQ4NTY3NSxcImxvbmdpdHVkZVwiOi0wLjU5MzkxMTU1MixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIktUTFwifSx7XCJuYW1lXCI6XCJLaXZldG9uIEJyaWRnZVwiLFwibGF0aXR1ZGVcIjo1My4zNDA5ODA5NixcImxvbmdpdHVkZVwiOi0xLjI2NzE4MjU3MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIktJVlwifSx7XCJuYW1lXCI6XCJLaXZldG9uIFBhcmtcIixcImxhdGl0dWRlXCI6NTMuMzM2NzgwNjIsXCJsb25naXR1ZGVcIjotMS4yMzk1MDA3NzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJLVlBcIn0se1wibmFtZVwiOlwiS25hcmVzYm9yb3VnaFwiLFwibGF0aXR1ZGVcIjo1NC4wMDg3NzAxMixcImxvbmdpdHVkZVwiOi0xLjQ3MDUwMTIwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIktOQVwifSx7XCJuYW1lXCI6XCJLbm90dGluZ2xleVwiLFwibGF0aXR1ZGVcIjo1My43MDY1NTI4NCxcImxvbmdpdHVkZVwiOi0xLjI1OTE3OTE2NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIktOT1wifSx7XCJuYW1lXCI6XCJLbnV0c2ZvcmRcIixcImxhdGl0dWRlXCI6NTMuMzAxOTg0NzEsXCJsb25naXR1ZGVcIjotMi4zNzIwOTc1MixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIktORlwifSx7XCJuYW1lXCI6XCJMYW5naG9cIixcImxhdGl0dWRlXCI6NTMuODA0OTgxMzUsXCJsb25naXR1ZGVcIjotMi40NDc5MDU0NjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJMSE9cIn0se1wibmFtZVwiOlwiTGFuZ3dhdGhieVwiLFwibGF0aXR1ZGVcIjo1NC42OTQzNTkzMixcImxvbmdpdHVkZVwiOi0yLjY2MzY4ODA3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkxHV1wifSx7XCJuYW1lXCI6XCJMYXl0b24gKExhbmNzKVwiLFwibGF0aXR1ZGVcIjo1My44MzU2Mzk1LFwibG9uZ2l0dWRlXCI6LTMuMDMwMjMyNzIyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTEFZXCJ9LHtcIm5hbWVcIjpcIkxhem9uYnkgJiBLaXJrb3N3YWxkXCIsXCJsYXRpdHVkZVwiOjU0Ljc1MDIyMTUsXCJsb25naXR1ZGVcIjotMi43MDIyMDAwOTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJMWkJcIn0se1wibmFtZVwiOlwiTGVhIEdyZWVuXCIsXCJsYXRpdHVkZVwiOjUzLjQyNzEwNTg1LFwibG9uZ2l0dWRlXCI6LTIuNzIzODM4MDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJMRUdcIn0se1wibmFtZVwiOlwiTGVhbGhvbG1cIixcImxhdGl0dWRlXCI6NTQuNDYwNjAxMTUsXCJsb25naXR1ZGVcIjotMC44MjU3MTQ5MzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJMSE1cIn0se1wibmFtZVwiOlwiTGV2ZW5zaHVsbWVcIixcImxhdGl0dWRlXCI6NTMuNDQ0NDMzNTcsXCJsb25naXR1ZGVcIjotMi4xOTI2NzAwMjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJMVk1cIn0se1wibmFtZVwiOlwiTGV5bGFuZFwiLFwibGF0aXR1ZGVcIjo1My42OTg4NjM5NCxcImxvbmdpdHVkZVwiOi0yLjY4NzE0MTY0MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkxFWVwifSx7XCJuYW1lXCI6XCJMaXR0bGVib3JvdWdoXCIsXCJsYXRpdHVkZVwiOjUzLjY0MzAxMDcyLFwibG9uZ2l0dWRlXCI6LTIuMDk0NjQ2NDkzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTFRMXCJ9LHtcIm5hbWVcIjpcIkxvY2t3b29kXCIsXCJsYXRpdHVkZVwiOjUzLjYzNDYxMjc2LFwibG9uZ2l0dWRlXCI6LTEuODAwNjQyMDIzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTENLXCJ9LHtcIm5hbWVcIjpcIkxvbmcgUHJlc3RvblwiLFwibGF0aXR1ZGVcIjo1NC4wMTY4NDU4NCxcImxvbmdpdHVkZVwiOi0yLjI1NTU4OTI4MSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkxQUlwifSx7XCJuYW1lXCI6XCJMb25nYmVja1wiLFwibGF0aXR1ZGVcIjo1NC41ODkyMjYyNCxcImxvbmdpdHVkZVwiOi0xLjAzMDk0MTk4NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkxHS1wifSx7XCJuYW1lXCI6XCJMb3N0b2NrXCIsXCJsYXRpdHVkZVwiOjUzLjU3Mjk5NzQ4LFwibG9uZ2l0dWRlXCI6LTIuNDkzNzc1NDM1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTE9UXCJ9LHtcIm5hbWVcIjpcIkxvc3RvY2sgR3JhbGFtXCIsXCJsYXRpdHVkZVwiOjUzLjI2NzY3OTIyLFwibG9uZ2l0dWRlXCI6LTIuNDY1MjExMTA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTFRHXCJ9LHtcIm5hbWVcIjpcIkxvc3RvY2sgSGFsbFwiLFwibGF0aXR1ZGVcIjo1My43MjM4NTIzNCxcImxvbmdpdHVkZVwiOi0yLjY4NzA5NDI4NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkxPSFwifSx7XCJuYW1lXCI6XCJMeXRoYW1cIixcImxhdGl0dWRlXCI6NTMuNzM5MjkyNCxcImxvbmdpdHVkZVwiOi0yLjk2NDA0Mzg3MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkxUTVwifSx7XCJuYW1lXCI6XCJNYW5jaGVzdGVyIE94Zm9yZCBSb2FkXCIsXCJsYXRpdHVkZVwiOjUzLjQ3Mzk5NjY0LFwibG9uZ2l0dWRlXCI6LTIuMjQyNTIyODg3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTUNPXCJ9LHtcIm5hbWVcIjpcIk1hbmNoZXN0ZXIgVW5pdGVkIEZvb3RiYWxsIEdyb3VuZFwiLFwibGF0aXR1ZGVcIjo1My40NjIyMTI5LFwibG9uZ2l0dWRlXCI6LTIuMjkwNjU0Nzc3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTVVGXCJ9LHtcIm5hbWVcIjpcIk1hbmNoZXN0ZXIgVmljdG9yaWFcIixcImxhdGl0dWRlXCI6NTMuNDg3NDc5NTYsXCJsb25naXR1ZGVcIjotMi4yNDI1OTk3ODgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJNQ1ZcIn0se1wibmFtZVwiOlwiTWFub3JzXCIsXCJsYXRpdHVkZVwiOjU0Ljk3Mjc2MzU4LFwibG9uZ2l0dWRlXCI6LTEuNjA0NzQ0NTMyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTUFTXCJ9LHtcIm5hbWVcIjpcIk1hcnBsZVwiLFwibGF0aXR1ZGVcIjo1My40MDA3MDk5NixcImxvbmdpdHVkZVwiOi0yLjA1NzI1ODkxMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk1QTFwifSx7XCJuYW1lXCI6XCJNYXJzZGVuIChZb3JrcylcIixcImxhdGl0dWRlXCI6NTMuNjAzMjAwMTYsXCJsb25naXR1ZGVcIjotMS45MzA3NTU1ODQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJNU05cIn0se1wibmFtZVwiOlwiTWFyc2tlXCIsXCJsYXRpdHVkZVwiOjU0LjU4NzQyMTczLFwibG9uZ2l0dWRlXCI6LTEuMDE4OTE0MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk1TS1wifSx7XCJuYW1lXCI6XCJNYXJ0b25cIixcImxhdGl0dWRlXCI6NTQuNTQzODAyMjIsXCJsb25naXR1ZGVcIjotMS4xOTc3MTcxODksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJNVE9cIn0se1wibmFtZVwiOlwiTWFyeXBvcnRcIixcImxhdGl0dWRlXCI6NTQuNzExNTg1NjksXCJsb25naXR1ZGVcIjotMy40OTQ3MDE4ODUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJNUllcIn0se1wibmFtZVwiOlwiTWF1bGRldGggUm9hZFwiLFwibGF0aXR1ZGVcIjo1My40MzM2MTkyOCxcImxvbmdpdHVkZVwiOi0yLjIwOTE3ODM5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTUFVXCJ9LHtcIm5hbWVcIjpcIk1lYWRvd2hhbGxcIixcImxhdGl0dWRlXCI6NTMuNDE2OTAyMjcsXCJsb25naXR1ZGVcIjotMS40MTM2MTg4NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk1IU1wifSx7XCJuYW1lXCI6XCJNZW5zdG9uXCIsXCJsYXRpdHVkZVwiOjUzLjg5MjM1MTcxLFwibG9uZ2l0dWRlXCI6LTEuNzM1NTA4NDg1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTU5OXCJ9LHtcIm5hbWVcIjpcIk1lb2xzIENvcFwiLFwibGF0aXR1ZGVcIjo1My42NDYxNjcsXCJsb25naXR1ZGVcIjotMi45NzUzODI2ODYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJNRUNcIn0se1wibmFtZVwiOlwiTWV0cm9DZW50cmVcIixcImxhdGl0dWRlXCI6NTQuOTU4NzQ3NSxcImxvbmdpdHVkZVwiOi0xLjY2NTYzMTI5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk1DRVwifSx7XCJuYW1lXCI6XCJNZXhib3JvdWdoXCIsXCJsYXRpdHVkZVwiOjUzLjQ5MTAxMDcyLFwibG9uZ2l0dWRlXCI6LTEuMjg4NTY0MzYxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTUVYXCJ9LHtcIm5hbWVcIjpcIk1pY2tsZWZpZWxkXCIsXCJsYXRpdHVkZVwiOjUzLjc4OTA5MjgyLFwibG9uZ2l0dWRlXCI6LTEuMzI0MzYzMDE4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTUlLXCJ9LHtcIm5hbWVcIjpcIk1pZGRsZXdvb2RcIixcImxhdGl0dWRlXCI6NTMuMzU5OTc1MTIsXCJsb25naXR1ZGVcIjotMi4wODMzNDk2OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk1ETFwifSx7XCJuYW1lXCI6XCJNaWxsIEhpbGwgKExhbmNzKVwiLFwibGF0aXR1ZGVcIjo1My43MzU0Njc5OSxcImxvbmdpdHVkZVwiOi0yLjUwMTc0MTQ5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk1MSFwifSx7XCJuYW1lXCI6XCJNaWxsb21cIixcImxhdGl0dWRlXCI6NTQuMjEwODMwNzQsXCJsb25naXR1ZGVcIjotMy4yNzEwOTM3MTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJNTE1cIn0se1wibmFtZVwiOlwiTWlsbHMgSGlsbCAoTWFuY2hlc3RlcilcIixcImxhdGl0dWRlXCI6NTMuNTUwNTIyNDksXCJsb25naXR1ZGVcIjotMi4xNzIwMjA2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk1JSFwifSx7XCJuYW1lXCI6XCJNaXJmaWVsZFwiLFwibGF0aXR1ZGVcIjo1My42NzE1OTQyNixcImxvbmdpdHVkZVwiOi0xLjY5MTc4NTQzNixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk1JUlwifSx7XCJuYW1lXCI6XCJNb2JiZXJsZXlcIixcImxhdGl0dWRlXCI6NTMuMzI5OTY1MjcsXCJsb25naXR1ZGVcIjotMi4zMzMzMDAzNDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJNT0JcIn0se1wibmFtZVwiOlwiTW9vcnNpZGVcIixcImxhdGl0dWRlXCI6NTMuNTE1OTY4NzksXCJsb25naXR1ZGVcIjotMi4zNTI4NTU3NzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJNU0RcIn0se1wibmFtZVwiOlwiTW9vcnRob3JwZVwiLFwibGF0aXR1ZGVcIjo1My41OTQ0NjkyOSxcImxvbmdpdHVkZVwiOi0xLjMwNDk1ODg3MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk1SUFwifSx7XCJuYW1lXCI6XCJNb3JlY2FtYmVcIixcImxhdGl0dWRlXCI6NTQuMDcwMzUyNjksXCJsb25naXR1ZGVcIjotMi44Njk5NjQ5MDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJNQ01cIn0se1wibmFtZVwiOlwiTW9ybGV5XCIsXCJsYXRpdHVkZVwiOjUzLjc0OTk0MDk5LFwibG9uZ2l0dWRlXCI6LTEuNTkwOTcxODM3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTUxZXCJ9LHtcIm5hbWVcIjpcIk1vcnBldGhcIixcImxhdGl0dWRlXCI6NTUuMTYyNTA1OCxcImxvbmdpdHVkZVwiOi0xLjY4MjkyMTEzNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk1QVFwifSx7XCJuYW1lXCI6XCJNb3NlcyBHYXRlXCIsXCJsYXRpdHVkZVwiOjUzLjU1NTk5NTczLFwibG9uZ2l0dWRlXCI6LTIuNDAxMTkyNTI2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTVNTXCJ9LHtcIm5hbWVcIjpcIk1vc3MgU2lkZVwiLFwibGF0aXR1ZGVcIjo1My43NjQ0NDQwOCxcImxvbmdpdHVkZVwiOi0yLjk0MzUzMjYyNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk1PU1wifSx7XCJuYW1lXCI6XCJNb3NzbGV5IChNYW5jaGVzdGVyKVwiLFwibGF0aXR1ZGVcIjo1My41MTQ2ODQzLFwibG9uZ2l0dWRlXCI6LTIuMDQyMTgwODc2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTVNMXCJ9LHtcIm5hbWVcIjpcIk1vc3NsZXkgSGlsbFwiLFwibGF0aXR1ZGVcIjo1My4zNzkwNTY0MSxcImxvbmdpdHVkZVwiOi0yLjkxNTQ0ODQxMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk1TSFwifSx7XCJuYW1lXCI6XCJNb3N0b25cIixcImxhdGl0dWRlXCI6NTMuNTIyNjU3OTMsXCJsb25naXR1ZGVcIjotMi4xNzE5MDc3MjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJNU09cIn0se1wibmFtZVwiOlwiTW91bGRzd29ydGhcIixcImxhdGl0dWRlXCI6NTMuMjMxODE5ODIsXCJsb25naXR1ZGVcIjotMi43MzIyMjU0NDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJNTERcIn0se1wibmFtZVwiOlwiTXl0aG9sbXJveWRcIixcImxhdGl0dWRlXCI6NTMuNzI5MDIwNTUsXCJsb25naXR1ZGVcIjotMS45ODE0MzIyNDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJNWVRcIn0se1wibmFtZVwiOlwiTmFmZmVydG9uXCIsXCJsYXRpdHVkZVwiOjU0LjAxMTY5Nzc1LFwibG9uZ2l0dWRlXCI6LTAuMzg2OTc4NTI3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTkZOXCJ9LHtcIm5hbWVcIjpcIk5hdmlnYXRpb24gUm9hZFwiLFwibGF0aXR1ZGVcIjo1My4zOTU0NjUyOSxcImxvbmdpdHVkZVwiOi0yLjM0MzU4NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk5WUlwifSx7XCJuYW1lXCI6XCJOZWxzb25cIixcImxhdGl0dWRlXCI6NTMuODM1MDE4NTksXCJsb25naXR1ZGVcIjotMi4yMTM3NTY2MDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJORUxcIn0se1wibmFtZVwiOlwiTmV0aGVydG93blwiLFwibGF0aXR1ZGVcIjo1NC40NTY5NTQzMSxcImxvbmdpdHVkZVwiOi0zLjU2NjM5ODg2MixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk5SVFwifSx7XCJuYW1lXCI6XCJOZXcgQ2xlZVwiLFwibGF0aXR1ZGVcIjo1My41NzQ0NjAyOSxcImxvbmdpdHVkZVwiOi0wLjA1OTE0NTU4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTkNFXCJ9LHtcIm5hbWVcIjpcIk5ldyBIb2xsYW5kXCIsXCJsYXRpdHVkZVwiOjUzLjcwMTkzNDc1LFwibG9uZ2l0dWRlXCI6LTAuMzYwMjAzNzY2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTkhMXCJ9LHtcIm5hbWVcIjpcIk5ldyBMYW5lXCIsXCJsYXRpdHVkZVwiOjUzLjYxMTMyMDQ1LFwibG9uZ2l0dWRlXCI6LTIuODY3NTU5OTExLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTkxOXCJ9LHtcIm5hbWVcIjpcIk5ldyBNaWxscyBDZW50cmFsXCIsXCJsYXRpdHVkZVwiOjUzLjM2NDg1ODA4LFwibG9uZ2l0dWRlXCI6LTIuMDA1NjY1NDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJOTUNcIn0se1wibmFtZVwiOlwiTmV3IE1pbGxzIE5ld3Rvd25cIixcImxhdGl0dWRlXCI6NTMuMzU5NjQ0MzcsXCJsb25naXR1ZGVcIjotMi4wMDg1MTk3MjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJOTU5cIn0se1wibmFtZVwiOlwiTmV3IFB1ZHNleVwiLFwibGF0aXR1ZGVcIjo1My44MDQ0OTQwNyxcImxvbmdpdHVkZVwiOi0xLjY4MDc4OTczMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk5QRFwifSx7XCJuYW1lXCI6XCJOZXd0b24gQXljbGlmZmVcIixcImxhdGl0dWRlXCI6NTQuNjEzNzA5MDQsXCJsb25naXR1ZGVcIjotMS41ODk2NTA0NDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJOQVlcIn0se1wibmFtZVwiOlwiTmV3dG9uIGZvciBIeWRlXCIsXCJsYXRpdHVkZVwiOjUzLjQ1NjcwNDk1LFwibG9uZ2l0dWRlXCI6LTIuMDY2OTcyNzQyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTldOXCJ9LHtcIm5hbWVcIjpcIk5ld3Rvbi1sZS1XaWxsb3dzXCIsXCJsYXRpdHVkZVwiOjUzLjQ1MzA3MTc2LFwibG9uZ2l0dWRlXCI6LTIuNjEzNTk0MTk4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTkxXXCJ9LHtcIm5hbWVcIjpcIk5vcm1hbnRvblwiLFwibGF0aXR1ZGVcIjo1My42OTk5MDU4NCxcImxvbmdpdHVkZVwiOi0xLjQyMzQ5MTQxMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk5PUlwifSx7XCJuYW1lXCI6XCJOb3J0aCBSb2FkIChEYXJsaW5ndG9uKVwiLFwibGF0aXR1ZGVcIjo1NC41MzYyMDM1OCxcImxvbmdpdHVkZVwiOi0xLjU1Mzk1NDQwOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIk5SRFwifSx7XCJuYW1lXCI6XCJOb3J0aHdpY2hcIixcImxhdGl0dWRlXCI6NTMuMjYxNDY1NjQsXCJsb25naXR1ZGVcIjotMi40OTY5MjYwMzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJOV0lcIn0se1wibmFtZVwiOlwiTnVudGhvcnBlXCIsXCJsYXRpdHVkZVwiOjU0LjUyNzg4MzQzLFwibG9uZ2l0dWRlXCI6LTEuMTY5NDQyNjM5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiTk5UXCJ9LHtcIm5hbWVcIjpcIk9ycmVsbFwiLFwibGF0aXR1ZGVcIjo1My41Mjk5MzYxNSxcImxvbmdpdHVkZVwiOi0yLjcwOTI5Njg1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiT1JSXCJ9LHtcIm5hbWVcIjpcIk91dHdvb2RcIixcImxhdGl0dWRlXCI6NTMuNzE1MDMxNzIsXCJsb25naXR1ZGVcIjotMS41MDk5NDE4NTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJPVVRcIn0se1wibmFtZVwiOlwiUGFkZ2F0ZVwiLFwibGF0aXR1ZGVcIjo1My40MDU4MDc2NyxcImxvbmdpdHVkZVwiOi0yLjU1NjgwNTU1MixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlBER1wifSx7XCJuYW1lXCI6XCJQYW5uYWxcIixcImxhdGl0dWRlXCI6NTMuOTU4MzM4NDgsXCJsb25naXR1ZGVcIjotMS41MzM0NTkxNzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJQTkxcIn0se1wibmFtZVwiOlwiUGFyYm9sZFwiLFwibGF0aXR1ZGVcIjo1My41OTA5NTAzNyxcImxvbmdpdHVkZVwiOi0yLjc3MDYwMDIyNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlBCTFwifSx7XCJuYW1lXCI6XCJQYXJ0b25cIixcImxhdGl0dWRlXCI6NTQuNTY5OTAzODksXCJsb25naXR1ZGVcIjotMy41ODIwMjAxMjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJQUk5cIn0se1wibmFtZVwiOlwiUGF0cmljcm9mdFwiLFwibGF0aXR1ZGVcIjo1My40ODUxMjUyOSxcImxvbmdpdHVkZVwiOi0yLjM1Njk3MDE3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUEFUXCJ9LHtcIm5hbWVcIjpcIlBlZ3N3b29kXCIsXCJsYXRpdHVkZVwiOjU1LjE3NzY3NjM3LFwibG9uZ2l0dWRlXCI6LTEuNjQ0NDg3MjkxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUEVHXCJ9LHtcIm5hbWVcIjpcIlBlbWJlcnRvblwiLFwibGF0aXR1ZGVcIjo1My41MzAzNDYzNixcImxvbmdpdHVkZVwiOi0yLjY2OTMyNDExLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUEVNXCJ9LHtcIm5hbWVcIjpcIlBlbmlzdG9uZVwiLFwibGF0aXR1ZGVcIjo1My41MjU1MjA1NyxcImxvbmdpdHVkZVwiOi0xLjYyMjU1MjIxOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlBOU1wifSx7XCJuYW1lXCI6XCJQbGVhc2luZ3RvblwiLFwibGF0aXR1ZGVcIjo1My43MzA5Njg1OCxcImxvbmdpdHVkZVwiOi0yLjU0NDEzMDk5MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlBMU1wifSx7XCJuYW1lXCI6XCJQbHVtbGV5XCIsXCJsYXRpdHVkZVwiOjUzLjI3NDY4ODg5LFwibG9uZ2l0dWRlXCI6LTIuNDE5NjY4NTEzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUExNXCJ9LHtcIm5hbWVcIjpcIlBvbnRlZnJhY3QgQmFnaGlsbFwiLFwibGF0aXR1ZGVcIjo1My42OTE4OTY4NSxcImxvbmdpdHVkZVwiOi0xLjMwMzM1NTE1OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlBGUlwifSx7XCJuYW1lXCI6XCJQb250ZWZyYWN0IE1vbmtoaWxsXCIsXCJsYXRpdHVkZVwiOjUzLjY5OTA4MzQ4LFwibG9uZ2l0dWRlXCI6LTEuMzAyNjMwNjExLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUEZNXCJ9LHtcIm5hbWVcIjpcIlBvbnRlZnJhY3QgVGFuc2hlbGZcIixcImxhdGl0dWRlXCI6NTMuNjk0MTQzNixcImxvbmdpdHVkZVwiOi0xLjMxODkxNzU2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlBPVFwifSx7XCJuYW1lXCI6XCJQb3BwbGV0b25cIixcImxhdGl0dWRlXCI6NTMuOTc2MDkxNTgsXCJsb25naXR1ZGVcIjotMS4xNDg1ODkyMzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJQT1BcIn0se1wibmFtZVwiOlwiUG91bHRvbi1sZS1GeWxkZVwiLFwibGF0aXR1ZGVcIjo1My44NDgxNDYzNyxcImxvbmdpdHVkZVwiOi0yLjk5MDI4NzM5MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlBGWVwifSx7XCJuYW1lXCI6XCJQb3ludG9uXCIsXCJsYXRpdHVkZVwiOjUzLjM1MDQwMDMzLFwibG9uZ2l0dWRlXCI6LTIuMTM0NDA4MjU3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUFlUXCJ9LHtcIm5hbWVcIjpcIlByZXNjb3RcIixcImxhdGl0dWRlXCI6NTMuNDIzNTY5MjgsXCJsb25naXR1ZGVcIjotMi43OTkxNzI4MTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJQU0NcIn0se1wibmFtZVwiOlwiUHJlc3RidXJ5XCIsXCJsYXRpdHVkZVwiOjUzLjI5MzM5NzQ3LFwibG9uZ2l0dWRlXCI6LTIuMTQ1NDgxMzA0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUFJCXCJ9LHtcIm5hbWVcIjpcIlBydWRob2VcIixcImxhdGl0dWRlXCI6NTQuOTY2MTQxNTQsXCJsb25naXR1ZGVcIjotMS44NjQ4NTk5MDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJQUlVcIn0se1wibmFtZVwiOlwiUmFpbmZvcmRcIixcImxhdGl0dWRlXCI6NTMuNTE3MTE4OTQsXCJsb25naXR1ZGVcIjotMi43ODk0Njk4MTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJSTkZcIn0se1wibmFtZVwiOlwiUmFpbmhpbGxcIixcImxhdGl0dWRlXCI6NTMuNDE3MTMyMixcImxvbmdpdHVkZVwiOi0yLjc2NjQwMDk0MixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlJOSFwifSx7XCJuYW1lXCI6XCJSYW1zZ3JlYXZlICYgV2lscHNoaXJlXCIsXCJsYXRpdHVkZVwiOjUzLjc4MDA1NDQ1LFwibG9uZ2l0dWRlXCI6LTIuNDc4NzUwNTQ2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUkdXXCJ9LHtcIm5hbWVcIjpcIlJhdmVuZ2xhc3MgZm9yIEVza2RhbGVcIixcImxhdGl0dWRlXCI6NTQuMzU1NjE4NjEsXCJsb25naXR1ZGVcIjotMy40MDg5NjE1MjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJSQVZcIn0se1wibmFtZVwiOlwiUmF2ZW5zdGhvcnBlXCIsXCJsYXRpdHVkZVwiOjUzLjY3NTU0MDQsXCJsb25naXR1ZGVcIjotMS42NTU1NzYyODksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJSVk5cIn0se1wibmFtZVwiOlwiUmF3Y2xpZmZlXCIsXCJsYXRpdHVkZVwiOjUzLjY4OTA1NTY3LFwibG9uZ2l0dWRlXCI6LTAuOTYwODU1Njk0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUldDXCJ9LHtcIm5hbWVcIjpcIlJlZGNhciBCcml0aXNoIFN0ZWVsXCIsXCJsYXRpdHVkZVwiOjU0LjYwOTg5NDc3LFwibG9uZ2l0dWRlXCI6LTEuMTEyNjY4MzIzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUkJTXCJ9LHtcIm5hbWVcIjpcIlJlZGNhciBDZW50cmFsXCIsXCJsYXRpdHVkZVwiOjU0LjYxNjIzMTksXCJsb25naXR1ZGVcIjotMS4wNzA4NzM0ODcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJSQ0NcIn0se1wibmFtZVwiOlwiUmVkY2FyIEVhc3RcIixcImxhdGl0dWRlXCI6NTQuNjA5MjU3NTEsXCJsb25naXR1ZGVcIjotMS4wNTIyOTc2MTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJSQ0VcIn0se1wibmFtZVwiOlwiUmVkZGlzaCBOb3J0aFwiLFwibGF0aXR1ZGVcIjo1My40NDk0MzA1NixcImxvbmdpdHVkZVwiOi0yLjE1NjI1MzExNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlJETlwifSx7XCJuYW1lXCI6XCJSZWRkaXNoIFNvdXRoXCIsXCJsYXRpdHVkZVwiOjUzLjQzNjkzNDA3LFwibG9uZ2l0dWRlXCI6LTIuMTU3ODYzMTI3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUkRTXCJ9LHtcIm5hbWVcIjpcIlJpYmJsZWhlYWRcIixcImxhdGl0dWRlXCI6NTQuMjA1ODQ5OTgsXCJsb25naXR1ZGVcIjotMi4zNjA4NTQ4NDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJSSERcIn0se1wibmFtZVwiOlwiUmlkaW5nIE1pbGxcIixcImxhdGl0dWRlXCI6NTQuOTQ5MDQ4OTQsXCJsb25naXR1ZGVcIjotMS45NzA3NzI2NzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJSRE1cIn0se1wibmFtZVwiOlwiUmlzaHRvblwiLFwibGF0aXR1ZGVcIjo1My43NjM1NTU3OSxcImxvbmdpdHVkZVwiOi0yLjQyMDE1ODY0NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlJJU1wifSx7XCJuYW1lXCI6XCJSb2J5XCIsXCJsYXRpdHVkZVwiOjUzLjQxMDA1MTkyLFwibG9uZ2l0dWRlXCI6LTIuODU1OTM2ODQ3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUk9CXCJ9LHtcIm5hbWVcIjpcIlJvY2hkYWxlXCIsXCJsYXRpdHVkZVwiOjUzLjYxMDMyMTUyLFwibG9uZ2l0dWRlXCI6LTIuMTUzNTIxMTgyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUkNEXCJ9LHtcIm5hbWVcIjpcIlJvbWlsZXlcIixcImxhdGl0dWRlXCI6NTMuNDE0MTczNixcImxvbmdpdHVkZVwiOi0yLjA4OTE3Mjc3NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlJNTFwifSx7XCJuYW1lXCI6XCJSb29zZVwiLFwibGF0aXR1ZGVcIjo1NC4xMTUxNjk0OSxcImxvbmdpdHVkZVwiOi0zLjE5NDU3Njc3NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlJPT1wifSx7XCJuYW1lXCI6XCJSb3NlIEdyb3ZlXCIsXCJsYXRpdHVkZVwiOjUzLjc4NjcwMDA5LFwibG9uZ2l0dWRlXCI6LTIuMjgyMjY4MDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJSU0dcIn0se1wibmFtZVwiOlwiUm9zZSBIaWxsIE1hcnBsZVwiLFwibGF0aXR1ZGVcIjo1My4zOTYxMTUyNixcImxvbmdpdHVkZVwiOi0yLjA3NTkwMDg2OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlJTSFwifSx7XCJuYW1lXCI6XCJSb3RoZXJoYW0gQ2VudHJhbFwiLFwibGF0aXR1ZGVcIjo1My40MzIyNzAwOSxcImxvbmdpdHVkZVwiOi0xLjM2MDQ0MDAxMixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlJNQ1wifSx7XCJuYW1lXCI6XCJSdWZmb3JkXCIsXCJsYXRpdHVkZVwiOjUzLjYzNTAyNTMzLFwibG9uZ2l0dWRlXCI6LTIuODA2OTQ0NzU3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiUlVGXCJ9LHtcIm5hbWVcIjpcIlJ1c3dhcnBcIixcImxhdGl0dWRlXCI6NTQuNDcwMTk5ODcsXCJsb25naXR1ZGVcIjotMC42Mjc3NjU2MDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJSVVNcIn0se1wibmFtZVwiOlwiUnlkZXIgQnJvd1wiLFwibGF0aXR1ZGVcIjo1My40NTcxMzcxNSxcImxvbmdpdHVkZVwiOi0yLjE3MzQ1MDIzNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlJSQlwifSx7XCJuYW1lXCI6XCJTYWxmb3JkIENlbnRyYWxcIixcImxhdGl0dWRlXCI6NTMuNDgyNzc4NDgsXCJsb25naXR1ZGVcIjotMi4yNTU1MzI3MjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTRkRcIn0se1wibmFtZVwiOlwiU2FsZm9yZCBDcmVzY2VudFwiLFwibGF0aXR1ZGVcIjo1My40ODY1OTg2OSxcImxvbmdpdHVkZVwiOi0yLjI3NTc1MDYwNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNMRFwifSx7XCJuYW1lXCI6XCJTYWx0YWlyZVwiLFwibGF0aXR1ZGVcIjo1My44Mzg4OTI5NixcImxvbmdpdHVkZVwiOi0xLjc5MTYxODYwNixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNBRVwifSx7XCJuYW1lXCI6XCJTYWx0YnVyblwiLFwibGF0aXR1ZGVcIjo1NC41ODM0NTU0OSxcImxvbmdpdHVkZVwiOi0wLjk3NDEzNjI2NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNMQlwifSx7XCJuYW1lXCI6XCJTYWx0bWFyc2hlXCIsXCJsYXRpdHVkZVwiOjUzLjcyMjM0OTIsXCJsb25naXR1ZGVcIjotMC44MTAwMDc2NjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTQU1cIn0se1wibmFtZVwiOlwiU2Fsd2lja1wiLFwibGF0aXR1ZGVcIjo1My43ODE3MTMzOCxcImxvbmdpdHVkZVwiOi0yLjgxOTc3MzE3OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNMV1wifSx7XCJuYW1lXCI6XCJTYW5kYWwgJiBBZ2JyaWdnXCIsXCJsYXRpdHVkZVwiOjUzLjY2MzEzODI5LFwibG9uZ2l0dWRlXCI6LTEuNDgxNDg3MDI2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU05BXCJ9LHtcIm5hbWVcIjpcIlNhbmRiYWNoXCIsXCJsYXRpdHVkZVwiOjUzLjE1MDE4ODM1LFwibG9uZ2l0dWRlXCI6LTIuMzkzNTEyMyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNEQlwifSx7XCJuYW1lXCI6XCJTYW5rZXkgZm9yIFBlbmtldGhcIixcImxhdGl0dWRlXCI6NTMuMzkyNDc5OTgsXCJsb25naXR1ZGVcIjotMi42NTA0NjcyNjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTTktcIn0se1wibmFtZVwiOlwiU2VhaGFtXCIsXCJsYXRpdHVkZVwiOjU0LjgzNjY0ODA0LFwibG9uZ2l0dWRlXCI6LTEuMzQwOTIzNTk1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU0VBXCJ9LHtcIm5hbWVcIjpcIlNlYXNjYWxlXCIsXCJsYXRpdHVkZVwiOjU0LjM5NTY0MTA5LFwibG9uZ2l0dWRlXCI6LTMuNDg0ODg2Mjk0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU1NDXCJ9LHtcIm5hbWVcIjpcIlNlYXRvbiBDYXJld1wiLFwibGF0aXR1ZGVcIjo1NC42NTgzMTgyNSxcImxvbmdpdHVkZVwiOi0xLjIwMDQyMzA3NSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNFQ1wifSx7XCJuYW1lXCI6XCJTZWxsYWZpZWxkXCIsXCJsYXRpdHVkZVwiOjU0LjQxNjU5MDI0LFwibG9uZ2l0dWRlXCI6LTMuNTEwNDU2MDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTRUxcIn0se1wibmFtZVwiOlwiU2V0dGxlXCIsXCJsYXRpdHVkZVwiOjU0LjA2NjkyNDE5LFwibG9uZ2l0dWRlXCI6LTIuMjgwNzExNzI3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU0VUXCJ9LHtcIm5hbWVcIjpcIlNoZXBsZXlcIixcImxhdGl0dWRlXCI6NTMuNTg5MjAwNTcsXCJsb25naXR1ZGVcIjotMS43MDQwMTc5MjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTUFlcIn0se1wibmFtZVwiOlwiU2hlcmJ1cm4taW4tRWxtZXRcIixcImxhdGl0dWRlXCI6NTMuNzk3MTcwMTYsXCJsb25naXR1ZGVcIjotMS4yMzI2ODQwNzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTSUVcIn0se1wibmFtZVwiOlwiU2hpbGRvblwiLFwibGF0aXR1ZGVcIjo1NC42MjY4MDMxOCxcImxvbmdpdHVkZVwiOi0xLjYzNzUzNTY0NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNIRFwifSx7XCJuYW1lXCI6XCJTaGlwbGV5IChZb3JrcylcIixcImxhdGl0dWRlXCI6NTMuODMyNzQ3NzIsXCJsb25naXR1ZGVcIjotMS43NzMyNjMzOTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTSFlcIn0se1wibmFtZVwiOlwiU2hpcmVvYWtzXCIsXCJsYXRpdHVkZVwiOjUzLjMyNDg0Mzc5LFwibG9uZ2l0dWRlXCI6LTEuMTY4MjE1NjYyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU1JPXCJ9LHtcIm5hbWVcIjpcIlNpbGVjcm9mdFwiLFwibGF0aXR1ZGVcIjo1NC4yMjYyMjQ2NixcImxvbmdpdHVkZVwiOi0zLjMzNTM2NjM0NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNJQ1wifSx7XCJuYW1lXCI6XCJTaWxrc3RvbmUgQ29tbW9uXCIsXCJsYXRpdHVkZVwiOjUzLjUzNDkzNzM5LFwibG9uZ2l0dWRlXCI6LTEuNTYzNDc0MTUzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU0xLXCJ9LHtcIm5hbWVcIjpcIlNpbHZlcmRhbGVcIixcImxhdGl0dWRlXCI6NTQuMTY5OTE0NDQsXCJsb25naXR1ZGVcIjotMi44MDM4MzkwMTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTVlJcIn0se1wibmFtZVwiOlwiU2tpcHRvblwiLFwibGF0aXR1ZGVcIjo1My45NTg3MDIxOSxcImxvbmdpdHVkZVwiOi0yLjAyNTg3ODQzMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNLSVwifSx7XCJuYW1lXCI6XCJTbGFpdGh3YWl0ZVwiLFwibGF0aXR1ZGVcIjo1My42MjM4NDQxMyxcImxvbmdpdHVkZVwiOi0xLjg4MTU4Mjk0NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNXVFwifSx7XCJuYW1lXCI6XCJTbGVpZ2h0c1wiLFwibGF0aXR1ZGVcIjo1NC40NjEwNjE3MyxcImxvbmdpdHVkZVwiOi0wLjY2MjQ3NTc2OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNMSFwifSx7XCJuYW1lXCI6XCJTbWl0aHkgQnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUzLjYzMzAxNzI2LFwibG9uZ2l0dWRlXCI6LTIuMTEzMzc2NTU3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU01CXCJ9LHtcIm5hbWVcIjpcIlNuYWl0aFwiLFwibGF0aXR1ZGVcIjo1My42OTMxMjg2NyxcImxvbmdpdHVkZVwiOi0xLjAyODQ1NDIwNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNOSVwifSx7XCJuYW1lXCI6XCJTb3V0aCBCYW5rXCIsXCJsYXRpdHVkZVwiOjU0LjU4MzgzNDI2LFwibG9uZ2l0dWRlXCI6LTEuMTc2NjYwNjEyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU0JLXCJ9LHtcIm5hbWVcIjpcIlNvdXRoIEVsbXNhbGxcIixcImxhdGl0dWRlXCI6NTMuNTk0NjIwNTIsXCJsb25naXR1ZGVcIjotMS4yODQ4NjA2OTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTRVNcIn0se1wibmFtZVwiOlwiU291dGggTWlsZm9yZFwiLFwibGF0aXR1ZGVcIjo1My43ODIzNDQyLFwibG9uZ2l0dWRlXCI6LTEuMjUwNTI5NTEzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU09NXCJ9LHtcIm5hbWVcIjpcIlNvd2VyYnkgQnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUzLjcwNzkwODIyLFwibG9uZ2l0dWRlXCI6LTEuOTA2OTUwMTU0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU09XXCJ9LHtcIm5hbWVcIjpcIlNxdWlyZXMgR2F0ZVwiLFwibGF0aXR1ZGVcIjo1My43NzY3NzcyMSxcImxvbmdpdHVkZVwiOi0zLjA0OTQyODkzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU1FVXCJ9LHtcIm5hbWVcIjpcIlN0IEFubmVzLW9uLVNlYVwiLFwibGF0aXR1ZGVcIjo1My43NTM0MDI3OSxcImxvbmdpdHVkZVwiOi0zLjAyOTEyOTI1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU0FTXCJ9LHtcIm5hbWVcIjpcIlN0IEJlZXNcIixcImxhdGl0dWRlXCI6NTQuNDkyNTgxMDgsXCJsb25naXR1ZGVcIjotMy41OTEzODQ2NTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTQlNcIn0se1wibmFtZVwiOlwiU3QgSGVsZW5zIENlbnRyYWxcIixcImxhdGl0dWRlXCI6NTMuNDUzMTM0NDksXCJsb25naXR1ZGVcIjotMi43MzAzMDQyNDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTTkhcIn0se1wibmFtZVwiOlwiU3QgSGVsZW5zIEp1bmN0aW9uXCIsXCJsYXRpdHVkZVwiOjUzLjQzMzU0MTAxLFwibG9uZ2l0dWRlXCI6LTIuNjk5ODYzNTg3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU0hKXCJ9LHtcIm5hbWVcIjpcIlN0YWxsaW5nYm9yb3VnaFwiLFwibGF0aXR1ZGVcIjo1My41ODcxMTQxOCxcImxvbmdpdHVkZVwiOi0wLjE4MzY2NzU0OCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNMTFwifSx7XCJuYW1lXCI6XCJTdGFubG93ICYgVGhvcm50b25cIixcImxhdGl0dWRlXCI6NTMuMjc4Mjk0NzUsXCJsb25naXR1ZGVcIjotMi44NDExNTM4MTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTTlRcIn0se1wibmFtZVwiOlwiU3RhcmJlY2tcIixcImxhdGl0dWRlXCI6NTMuOTk5MDE0MzQsXCJsb25naXR1ZGVcIjotMS41MDExMzU5MTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTQkVcIn0se1wibmFtZVwiOlwiU3RlZXRvbiAmIFNpbHNkZW5cIixcImxhdGl0dWRlXCI6NTMuOTAwMjY5ODksXCJsb25naXR1ZGVcIjotMS45NDQxMTQ4NjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTT05cIn0se1wibmFtZVwiOlwiU3RvY2tzZmllbGRcIixcImxhdGl0dWRlXCI6NTQuOTQ3MDQ2OTMsXCJsb25naXR1ZGVcIjotMS45MTY3NTYyMDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTS1NcIn0se1wibmFtZVwiOlwiU3RvY2tzbW9vclwiLFwibGF0aXR1ZGVcIjo1My41OTQzNzA1OCxcImxvbmdpdHVkZVwiOi0xLjcyMzQ3MjYyNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNTTVwifSx7XCJuYW1lXCI6XCJTdG9ja3RvblwiLFwibGF0aXR1ZGVcIjo1NC41NzAyNDg5NyxcImxvbmdpdHVkZVwiOi0xLjMxODkzMjcxNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNUS1wifSx7XCJuYW1lXCI6XCJTdHJlZXRob3VzZVwiLFwibGF0aXR1ZGVcIjo1My42NzYzMjk5MSxcImxvbmdpdHVkZVwiOi0xLjM5OTg5NDI3NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNIQ1wifSx7XCJuYW1lXCI6XCJTdHJpbmVzXCIsXCJsYXRpdHVkZVwiOjUzLjM3NTEwMTA3LFwibG9uZ2l0dWRlXCI6LTIuMDMyNTczMDU0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU1JOXCJ9LHtcIm5hbWVcIjpcIlN0eWFsXCIsXCJsYXRpdHVkZVwiOjUzLjM0ODM0NjExLFwibG9uZ2l0dWRlXCI6LTIuMjQwNDU3MjI1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU1lBXCJ9LHtcIm5hbWVcIjpcIlN1bmRlcmxhbmRcIixcImxhdGl0dWRlXCI6NTQuOTA1NTA3LFwibG9uZ2l0dWRlXCI6LTEuMzgyMzc3MzQ3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU1VOXCJ9LHtcIm5hbWVcIjpcIlN3aW50b24gKE1hbmNoZXN0ZXIpXCIsXCJsYXRpdHVkZVwiOjUzLjUxNDg0NDY5LFwibG9uZ2l0dWRlXCI6LTIuMzM3NDYzOTI1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiU05OXCJ9LHtcIm5hbWVcIjpcIlN3aW50b24gKFNvdXRoIFlvcmtzKVwiLFwibGF0aXR1ZGVcIjo1My40ODYyNTgyMyxcImxvbmdpdHVkZVwiOi0xLjMwNTgyNDgyOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlNXTlwifSx7XCJuYW1lXCI6XCJUZWVzLXNpZGUgQWlycG9ydFwiLFwibGF0aXR1ZGVcIjo1NC41MTgxMzU2OCxcImxvbmdpdHVkZVwiOi0xLjQyNTMxMjYwMixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlRFQVwifSx7XCJuYW1lXCI6XCJUaGF0dG8gSGVhdGhcIixcImxhdGl0dWRlXCI6NTMuNDM2NTkzMzIsXCJsb25naXR1ZGVcIjotMi43NTkzNzQ4NTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJUSEhcIn0se1wibmFtZVwiOlwiVGhvcm5lIE5vcnRoXCIsXCJsYXRpdHVkZVwiOjUzLjYxNjA3NTE4LFwibG9uZ2l0dWRlXCI6LTAuOTcyMzI0MTA2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiVE5OXCJ9LHtcIm5hbWVcIjpcIlRob3JuZSBTb3V0aFwiLFwibGF0aXR1ZGVcIjo1My42MDM3OTU5MyxcImxvbmdpdHVkZVwiOi0wLjk1NDYzNzUwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlROU1wifSx7XCJuYW1lXCI6XCJUaG9ybnRvbiBBYmJleVwiLFwibGF0aXR1ZGVcIjo1My42NTM5NzA3NSxcImxvbmdpdHVkZVwiOi0wLjMyMzQ5MzgxNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlROQVwifSx7XCJuYW1lXCI6XCJUaHVybnNjb2VcIixcImxhdGl0dWRlXCI6NTMuNTQ1MDYyMzQsXCJsb25naXR1ZGVcIjotMS4zMDg3ODY5MjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJUSENcIn0se1wibmFtZVwiOlwiVG9kbW9yZGVuXCIsXCJsYXRpdHVkZVwiOjUzLjcxMzgzNTIxLFwibG9uZ2l0dWRlXCI6LTIuMDk5NjU0MDAxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiVE9EXCJ9LHtcIm5hbWVcIjpcIlRyYWZmb3JkIFBhcmtcIixcImxhdGl0dWRlXCI6NTMuNDU0OTY4ODcsXCJsb25naXR1ZGVcIjotMi4zMTE2ODg4MjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJUUkFcIn0se1wibmFtZVwiOlwiVWxjZWJ5XCIsXCJsYXRpdHVkZVwiOjUzLjYxOTA1ODQxLFwibG9uZ2l0dWRlXCI6LTAuMzAyMDQ2ODEyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiVUxDXCJ9LHtcIm5hbWVcIjpcIlVsbGVza2VsZlwiLFwibGF0aXR1ZGVcIjo1My44NTM2MjIxMixcImxvbmdpdHVkZVwiOi0xLjIxMzk3MTAwOCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlVMTFwifSx7XCJuYW1lXCI6XCJVcGhvbGxhbmRcIixcImxhdGl0dWRlXCI6NTMuNTI4MzkzMDYsXCJsb25naXR1ZGVcIjotMi43NDE0MDQyMDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJVUExcIn0se1wibmFtZVwiOlwiVXJtc3RvblwiLFwibGF0aXR1ZGVcIjo1My40NDgyODk3OCxcImxvbmdpdHVkZVwiOi0yLjM1MzgwMDM3OSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlVSTVwifSx7XCJuYW1lXCI6XCJXYWtlZmllbGQgS2lya2dhdGVcIixcImxhdGl0dWRlXCI6NTMuNjc4OTg3MTgsXCJsb25naXR1ZGVcIjotMS40ODgyNTY1OTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJXS0tcIn0se1wibmFtZVwiOlwiV2Fsa2RlblwiLFwibGF0aXR1ZGVcIjo1My41MTk3ODc2MixcImxvbmdpdHVkZVwiOi0yLjM5NjMyNTU3MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIldLRFwifSx7XCJuYW1lXCI6XCJXYWxzZGVuXCIsXCJsYXRpdHVkZVwiOjUzLjY5NjIxMzk0LFwibG9uZ2l0dWRlXCI6LTIuMTA0NDU4OTU5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiV0ROXCJ9LHtcIm5hbWVcIjpcIldhdmVydHJlZSBUZWNobm9sb2d5IFBhcmtcIixcImxhdGl0dWRlXCI6NTMuNDA1OTUyNTIsXCJsb25naXR1ZGVcIjotMi45MjM1NDcxNTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJXQVZcIn0se1wibmFtZVwiOlwiV2VldG9uXCIsXCJsYXRpdHVkZVwiOjUzLjkyMzE5MTI5LFwibG9uZ2l0dWRlXCI6LTEuNTgxMjA5NDI3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiV0VUXCJ9LHtcIm5hbWVcIjpcIldlbm5pbmd0b25cIixcImxhdGl0dWRlXCI6NTQuMTIzNTQwNDEsXCJsb25naXR1ZGVcIjotMi41ODY5MDE5OTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJXTk5cIn0se1wibmFtZVwiOlwiV2VzdCBBbGxlcnRvblwiLFwibGF0aXR1ZGVcIjo1My4zNjkxNDMxNCxcImxvbmdpdHVkZVwiOi0yLjkwNjk2OTQzNyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIldTQVwifSx7XCJuYW1lXCI6XCJXZXN0aG91Z2h0b25cIixcImxhdGl0dWRlXCI6NTMuNTU1OTcwNTYsXCJsb25naXR1ZGVcIjotMi41MjM5MTkzNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIldIR1wifSx7XCJuYW1lXCI6XCJXZXRoZXJhbFwiLFwibGF0aXR1ZGVcIjo1NC44ODM4MzkxMyxcImxvbmdpdHVkZVwiOi0yLjgzMTcwNTM3MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIldSTFwifSx7XCJuYW1lXCI6XCJXaGFsZXkgQnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUzLjMzMDI0OTk5LFwibG9uZ2l0dWRlXCI6LTEuOTg0NjM5MDA2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiV0JSXCJ9LHtcIm5hbWVcIjpcIldoYWxsZXkgKExhbmNzKVwiLFwibGF0aXR1ZGVcIjo1My44MjQyNTQxNixcImxvbmdpdHVkZVwiOi0yLjQxMjI1ODI3NyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIldIRVwifSx7XCJuYW1lXCI6XCJXaGlzdG9uXCIsXCJsYXRpdHVkZVwiOjUzLjQxMzg3OTQyLFwibG9uZ2l0dWRlXCI6LTIuNzk2NDMzNDE2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiV0hOXCJ9LHtcIm5hbWVcIjpcIldoaXRieVwiLFwibGF0aXR1ZGVcIjo1NC40ODQ2MTk0MixcImxvbmdpdHVkZVwiOi0wLjYxNTM5NjM1NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIldUQlwifSx7XCJuYW1lXCI6XCJXaGl0ZWhhdmVuXCIsXCJsYXRpdHVkZVwiOjU0LjU1MzAzMTYyLFwibG9uZ2l0dWRlXCI6LTMuNTg2OTMzNzE4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiV1RIXCJ9LHtcIm5hbWVcIjpcIldoaXRsZXkgQnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUzLjY5OTE0NDkzLFwibG9uZ2l0dWRlXCI6LTEuMTU4Mjc4NDY2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiV0JEXCJ9LHtcIm5hbWVcIjpcIldpZGRyaW5ndG9uXCIsXCJsYXRpdHVkZVwiOjU1LjI0MTM5MjU2LFwibG9uZ2l0dWRlXCI6LTEuNjE2MjM4OTE2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiV0REXCJ9LHtcIm5hbWVcIjpcIldpZG5lc1wiLFwibGF0aXR1ZGVcIjo1My4zNzg1MTQ5NixcImxvbmdpdHVkZVwiOi0yLjczMzUzNjgyNCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIldJRFwifSx7XCJuYW1lXCI6XCJXaWdhbiBXYWxsZ2F0ZVwiLFwibGF0aXR1ZGVcIjo1My41NDQ4MzUzNCxcImxvbmdpdHVkZVwiOi0yLjYzMzE4MTUzNixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIldHV1wifSx7XCJuYW1lXCI6XCJXaWd0b25cIixcImxhdGl0dWRlXCI6NTQuODI5MzM5NzEsXCJsb25naXR1ZGVcIjotMy4xNjQzNTExNTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJXR1RcIn0se1wibmFtZVwiOlwiV2lsbXNsb3dcIixcImxhdGl0dWRlXCI6NTMuMzI2ODYzMjQsXCJsb25naXR1ZGVcIjotMi4yMjYzMjc5MTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJXTUxcIn0se1wibmFtZVwiOlwiV29tYndlbGxcIixcImxhdGl0dWRlXCI6NTMuNTE3NTkwNTcsXCJsb25naXR1ZGVcIjotMS40MTYzMTY3NjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJXT01cIn0se1wibmFtZVwiOlwiV29vZGhvdXNlXCIsXCJsYXRpdHVkZVwiOjUzLjM2Mzc1ODYxLFwibG9uZ2l0dWRlXCI6LTEuMzU3NTU5MjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJXREhcIn0se1wibmFtZVwiOlwiV29vZGxlc2ZvcmRcIixcImxhdGl0dWRlXCI6NTMuNzU2ODA0NTcsXCJsb25naXR1ZGVcIjotMS40NDI4ODUzNzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJXRFNcIn0se1wibmFtZVwiOlwiV29vZGxleVwiLFwibGF0aXR1ZGVcIjo1My40MjkyNzE2MyxcImxvbmdpdHVkZVwiOi0yLjA5MzI2ODAxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiV0xZXCJ9LHtcIm5hbWVcIjpcIldvb2RzbW9vclwiLFwibGF0aXR1ZGVcIjo1My4zODYwNzgyLFwibG9uZ2l0dWRlXCI6LTIuMTQxMjg2NDc4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiV1NSXCJ9LHtcIm5hbWVcIjpcIldvcmtpbmd0b25cIixcImxhdGl0dWRlXCI6NTQuNjQ1MDk3OSxcImxvbmdpdHVkZVwiOi0zLjU1ODQ5OTUyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiV0tHXCJ9LHtcIm5hbWVcIjpcIldvcmtzb3BcIixcImxhdGl0dWRlXCI6NTMuMzExNjYyMDIsXCJsb25naXR1ZGVcIjotMS4xMjI1NDI1OTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJXUktcIn0se1wibmFtZVwiOlwiV3Jlc3NsZVwiLFwibGF0aXR1ZGVcIjo1My43NzI3NzcyNyxcImxvbmdpdHVkZVwiOi0wLjkyNDIwNzU4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiV1JTXCJ9LHtcIm5hbWVcIjpcIld5bGFtXCIsXCJsYXRpdHVkZVwiOjU0Ljk3NDk3MTA4LFwibG9uZ2l0dWRlXCI6LTEuODE0MDU1NjIxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiV1lNXCJ9LHtcIm5hbWVcIjpcIkFiYmV5IFdvb2RcIixcImxhdGl0dWRlXCI6NTEuNDkwNzcwNTksXCJsb25naXR1ZGVcIjowLjEyMDMyNTU3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiQUJXXCJ9LHtcIm5hbWVcIjpcIkFkaXNoYW1cIixcImxhdGl0dWRlXCI6NTEuMjQxMjA0NjYsXCJsb25naXR1ZGVcIjoxLjE5OTEwMDk2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiQURNXCJ9LHtcIm5hbWVcIjpcIkFsYmFueSBQYXJrXCIsXCJsYXRpdHVkZVwiOjUxLjQzNTgwMjExLFwibG9uZ2l0dWRlXCI6MC4xMjY0MTE3NDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJBWVBcIn0se1wibmFtZVwiOlwiQXNoZm9yZCBJbnRlcm5hdGlvbmFsXCIsXCJsYXRpdHVkZVwiOjUxLjE0MzcwNjcyLFwibG9uZ2l0dWRlXCI6MC44NzYyMTM2NTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJBRktcIn0se1wibmFtZVwiOlwiQXlsZXNmb3JkXCIsXCJsYXRpdHVkZVwiOjUxLjMwMTMxNTI0LFwibG9uZ2l0dWRlXCI6MC40NjYxNzU5ODIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJBWUxcIn0se1wibmFtZVwiOlwiQXlsZXNoYW1cIixcImxhdGl0dWRlXCI6NTEuMjI3MjU3LFwibG9uZ2l0dWRlXCI6MS4yMDk0NjQ3OTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJBWUhcIn0se1wibmFtZVwiOlwiQmFybWluZ1wiLFwibGF0aXR1ZGVcIjo1MS4yODQ4OTIxLFwibG9uZ2l0dWRlXCI6MC40Nzg5NjM3NTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJCTUdcIn0se1wibmFtZVwiOlwiQmFybmVodXJzdFwiLFwibGF0aXR1ZGVcIjo1MS40NjQ4NDkyNSxcImxvbmdpdHVkZVwiOjAuMTYwODc2OTE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiQk5IXCJ9LHtcIm5hbWVcIjpcIkJhdCAmIEJhbGxcIixcImxhdGl0dWRlXCI6NTEuMjg5NzU4MjUsXCJsb25naXR1ZGVcIjowLjE5NDIzOTUyMixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkJCTFwifSx7XCJuYW1lXCI6XCJCYXR0bGVcIixcImxhdGl0dWRlXCI6NTAuOTEyOTEwOTIsXCJsb25naXR1ZGVcIjowLjQ5NDcwNzAyNixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkJBVFwifSx7XCJuYW1lXCI6XCJCZWFyc3RlZFwiLFwibGF0aXR1ZGVcIjo1MS4yNzU4MTc4NixcImxvbmdpdHVkZVwiOjAuNTc3NTg4NzM0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiQlNEXCJ9LHtcIm5hbWVcIjpcIkJlY2tlbmhhbSBIaWxsXCIsXCJsYXRpdHVkZVwiOjUxLjQyNDgxODc1LFwibG9uZ2l0dWRlXCI6LTAuMDE2NTA5MzU2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiQkVDXCJ9LHtcIm5hbWVcIjpcIkJlY2tlbmhhbSBKdW5jdGlvblwiLFwibGF0aXR1ZGVcIjo1MS40MTE1MDg4OCxcImxvbmdpdHVkZVwiOi0wLjAyNzE1MixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkJLSlwifSx7XCJuYW1lXCI6XCJCZWtlc2JvdXJuZVwiLFwibGF0aXR1ZGVcIjo1MS4yNjEzNjE0MixcImxvbmdpdHVkZVwiOjEuMTM2NzE3OTEyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiQktTXCJ9LHtcIm5hbWVcIjpcIkJlbGxpbmdoYW1cIixcImxhdGl0dWRlXCI6NTEuNDMzODc4MTIsXCJsb25naXR1ZGVcIjotMC4wMjA0MzMyMDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRMXCIsXCJjcnNDb2RlXCI6XCJCR01cIn0se1wibmFtZVwiOlwiQmVsdHJpbmdcIixcImxhdGl0dWRlXCI6NTEuMjA0NzAzNTUsXCJsb25naXR1ZGVcIjowLjQwMzQ5ODUzNixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkJFR1wifSx7XCJuYW1lXCI6XCJCZWx2ZWRlcmVcIixcImxhdGl0dWRlXCI6NTEuNDkxOTkwNjgsXCJsb25naXR1ZGVcIjowLjE1MjA3NjAwNixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkJWRFwifSx7XCJuYW1lXCI6XCJCZXhsZXlcIixcImxhdGl0dWRlXCI6NTEuNDQwODAwMTEsXCJsb25naXR1ZGVcIjowLjE0ODIyOTE2NixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkJYWVwifSx7XCJuYW1lXCI6XCJCZXhsZXloZWF0aFwiLFwibGF0aXR1ZGVcIjo1MS40NjM1NTI4NSxcImxvbmdpdHVkZVwiOjAuMTMzNDYwNzIzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiQlhIXCJ9LHtcIm5hbWVcIjpcIkJpY2tsZXlcIixcImxhdGl0dWRlXCI6NTEuNDAwMzkyMzIsXCJsb25naXR1ZGVcIjowLjA0NDI1NTUwNyxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkJLTFwifSx7XCJuYW1lXCI6XCJCaXJjaGluZ3Rvbi1vbi1zZWFcIixcImxhdGl0dWRlXCI6NTEuMzc3NDk5MjksXCJsb25naXR1ZGVcIjoxLjMwMTQyNDA3NSxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkJDSFwifSx7XCJuYW1lXCI6XCJCbGFja2hlYXRoXCIsXCJsYXRpdHVkZVwiOjUxLjQ2NTc2NDA4LFwibG9uZ2l0dWRlXCI6MC4wMDgzMDIzNzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJCS0hcIn0se1wibmFtZVwiOlwiQm9yb3VnaCBHcmVlbiAmIFdyb3RoYW1cIixcImxhdGl0dWRlXCI6NTEuMjkzMjE2NTMsXCJsb25naXR1ZGVcIjowLjMwNjI2MDE2NSxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkJSR1wifSx7XCJuYW1lXCI6XCJCcml4dG9uXCIsXCJsYXRpdHVkZVwiOjUxLjQ2MzMwMjA3LFwibG9uZ2l0dWRlXCI6LTAuMTE0MTc5MDA0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiQlJYXCJ9LHtcIm5hbWVcIjpcIkJyb2Fkc3RhaXJzXCIsXCJsYXRpdHVkZVwiOjUxLjM2MDY4MDYxLFwibG9uZ2l0dWRlXCI6MS40MzM1Nzk3ODgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJCU1JcIn0se1wibmFtZVwiOlwiQnJvbWxleSBOb3J0aFwiLFwibGF0aXR1ZGVcIjo1MS40MDg5NTMwOCxcImxvbmdpdHVkZVwiOjAuMDE3MzE1NTI0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiQk1OXCJ9LHtcIm5hbWVcIjpcIkJyb21sZXkgU291dGhcIixcImxhdGl0dWRlXCI6NTEuMzk5OTQyMDUsXCJsb25naXR1ZGVcIjowLjAxODM1NjY0OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkJNU1wifSx7XCJuYW1lXCI6XCJDYW50ZXJidXJ5IEVhc3RcIixcImxhdGl0dWRlXCI6NTEuMjc0MjcyMjEsXCJsb25naXR1ZGVcIjoxLjA3NTk3NzAxNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkNCRVwifSx7XCJuYW1lXCI6XCJDYW50ZXJidXJ5IFdlc3RcIixcImxhdGl0dWRlXCI6NTEuMjg0Mjc0MDEsXCJsb25naXR1ZGVcIjoxLjA3NTMxMTc2MixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkNCV1wifSx7XCJuYW1lXCI6XCJDYXRmb3JkXCIsXCJsYXRpdHVkZVwiOjUxLjQ0NDQwOTEyLFwibG9uZ2l0dWRlXCI6LTAuMDI2MzA5NzY4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiQ1RGXCJ9LHtcIm5hbWVcIjpcIkNhdGZvcmQgQnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUxLjQ0NDc0NDM1LFwibG9uZ2l0dWRlXCI6LTAuMDI0ODU2MjA1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiQ0ZCXCJ9LHtcIm5hbWVcIjpcIkNoYXJpbmcgKEtlbnQpXCIsXCJsYXRpdHVkZVwiOjUxLjIwODEwMjIyLFwibG9uZ2l0dWRlXCI6MC43OTAzNDU1NzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJDSEdcIn0se1wibmFtZVwiOlwiQ2hhcmx0b25cIixcImxhdGl0dWRlXCI6NTEuNDg2ODY2NjYsXCJsb25naXR1ZGVcIjowLjAzMDk4MDM0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiQ1ROXCJ9LHtcIm5hbWVcIjpcIkNoYXJ0aGFtXCIsXCJsYXRpdHVkZVwiOjUxLjI1NzI2OTU2LFwibG9uZ2l0dWRlXCI6MS4wMTgwNjA0MixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkNSVFwifSx7XCJuYW1lXCI6XCJDaGF0aGFtXCIsXCJsYXRpdHVkZVwiOjUxLjM4MDM3ODA4LFwibG9uZ2l0dWRlXCI6MC41MjExNTgxNjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJDVE1cIn0se1wibmFtZVwiOlwiQ2hlbHNmaWVsZFwiLFwibGF0aXR1ZGVcIjo1MS4zNTYyNTU1LFwibG9uZ2l0dWRlXCI6MC4xMDkwNzk4OTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJDTERcIn0se1wibmFtZVwiOlwiQ2hlc3RmaWVsZCAmIFN3YWxlY2xpZmZlXCIsXCJsYXRpdHVkZVwiOjUxLjM2MDMyNjk0LFwibG9uZ2l0dWRlXCI6MS4wNjc3MDYyMDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJDU1dcIn0se1wibmFtZVwiOlwiQ2hpbGhhbVwiLFwibGF0aXR1ZGVcIjo1MS4yNDQ2MTQ0OSxcImxvbmdpdHVkZVwiOjAuOTc1OTE1NDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJDSUxcIn0se1wibmFtZVwiOlwiQ2hpc2xlaHVyc3RcIixcImxhdGl0dWRlXCI6NTEuNDA1NTU3NjMsXCJsb25naXR1ZGVcIjowLjA1NzQyNjkwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkNJVFwifSx7XCJuYW1lXCI6XCJDbG9jayBIb3VzZVwiLFwibGF0aXR1ZGVcIjo1MS40MDg1ODc4MyxcImxvbmdpdHVkZVwiOi0wLjA0MDY1MDg2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkNMS1wifSx7XCJuYW1lXCI6XCJDcmF5Zm9yZFwiLFwibGF0aXR1ZGVcIjo1MS40NDgzMjk1LFwibG9uZ2l0dWRlXCI6MC4xNzg4MDcwNDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJDUllcIn0se1wibmFtZVwiOlwiQ3JvZnRvbiBQYXJrXCIsXCJsYXRpdHVkZVwiOjUxLjQ1NTE5MTkzLFwibG9uZ2l0dWRlXCI6LTAuMDM2NDk2NDM0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiQ0ZUXCJ9LHtcIm5hbWVcIjpcIkNyb3dodXJzdFwiLFwibGF0aXR1ZGVcIjo1MC44ODg1NzM2OSxcImxvbmdpdHVkZVwiOjAuNTAxMzU0OTk1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiQ1dVXCJ9LHtcIm5hbWVcIjpcIkN1eHRvblwiLFwibGF0aXR1ZGVcIjo1MS4zNzM5MjYwNixcImxvbmdpdHVkZVwiOjAuNDYxNzE0MzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJDVVhcIn0se1wibmFtZVwiOlwiRGFydGZvcmRcIixcImxhdGl0dWRlXCI6NTEuNDQ3MzcyNTQsXCJsb25naXR1ZGVcIjowLjIxOTI2MTU1NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkRGRFwifSx7XCJuYW1lXCI6XCJEZWFsXCIsXCJsYXRpdHVkZVwiOjUxLjIyMzA0NjU5LFwibG9uZ2l0dWRlXCI6MS4zOTg4NjQxOTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJERUFcIn0se1wibmFtZVwiOlwiRGVubWFyayBIaWxsXCIsXCJsYXRpdHVkZVwiOjUxLjQ2ODIwNTg5LFwibG9uZ2l0dWRlXCI6LTAuMDg5MzU1NjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRMXCIsXCJjcnNDb2RlXCI6XCJETUtcIn0se1wibmFtZVwiOlwiRGVwdGZvcmRcIixcImxhdGl0dWRlXCI6NTEuNDc4ODUxNCxcImxvbmdpdHVkZVwiOi0wLjAyNjI2MzE2NixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkRFUFwifSx7XCJuYW1lXCI6XCJEb3ZlciBQcmlvcnlcIixcImxhdGl0dWRlXCI6NTEuMTI1NzAwMDksXCJsb25naXR1ZGVcIjoxLjMwNTMwNzYxOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkRWUFwifSx7XCJuYW1lXCI6XCJEdW1wdG9uIFBhcmtcIixcImxhdGl0dWRlXCI6NTEuMzQ1NzA1MTUsXCJsb25naXR1ZGVcIjoxLjQyNTgzNzU0NixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkRNUFwifSx7XCJuYW1lXCI6XCJEdW50b24gR3JlZW5cIixcImxhdGl0dWRlXCI6NTEuMjk2NDg3OTgsXCJsb25naXR1ZGVcIjowLjE3MDk0ODU0OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkROR1wifSx7XCJuYW1lXCI6XCJFYXN0IEZhcmxlaWdoXCIsXCJsYXRpdHVkZVwiOjUxLjI1NTIzMzczLFwibG9uZ2l0dWRlXCI6MC40ODQ3MzQ1NzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJFRkxcIn0se1wibmFtZVwiOlwiRWFzdCBNYWxsaW5nXCIsXCJsYXRpdHVkZVwiOjUxLjI4NTgwNjg1LFwibG9uZ2l0dWRlXCI6MC40MzkyODQ4MjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJFTUxcIn0se1wibmFtZVwiOlwiRWJic2ZsZWV0IEludGVybmF0aW9uYWxcIixcImxhdGl0dWRlXCI6NTEuNDQyODk4LFwibG9uZ2l0dWRlXCI6MC4zMjEwMDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJFQkRcIn0se1wibmFtZVwiOlwiRWRlbiBQYXJrXCIsXCJsYXRpdHVkZVwiOjUxLjM5MDgxNTY1LFwibG9uZ2l0dWRlXCI6LTAuMDI2NjA1MDA0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiRUROXCJ9LHtcIm5hbWVcIjpcIkVsbWVycyBFbmRcIixcImxhdGl0dWRlXCI6NTEuMzk4MzAyMzksXCJsb25naXR1ZGVcIjotMC4wNDk0Mjg4MjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJFTEVcIn0se1wibmFtZVwiOlwiRWxtc3RlYWQgV29vZHNcIixcImxhdGl0dWRlXCI6NTEuNDE3MTE5MDUsXCJsb25naXR1ZGVcIjowLjA0NDI4MjcwMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkVTRFwifSx7XCJuYW1lXCI6XCJFbHRoYW1cIixcImxhdGl0dWRlXCI6NTEuNDU1NjQ4NTYsXCJsb25naXR1ZGVcIjowLjA1MjMzNzYxNixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkVMV1wifSx7XCJuYW1lXCI6XCJFcml0aFwiLFwibGF0aXR1ZGVcIjo1MS40ODE2ODE4OCxcImxvbmdpdHVkZVwiOjAuMTc0NjM1NDc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiRVJIXCJ9LHtcIm5hbWVcIjpcIkV0Y2hpbmdoYW1cIixcImxhdGl0dWRlXCI6NTEuMDEwNTQ0MSxcImxvbmdpdHVkZVwiOjAuNDQyMzczOTAyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiRVRDXCJ9LHtcIm5hbWVcIjpcIkV5bnNmb3JkXCIsXCJsYXRpdHVkZVwiOjUxLjM2MjcxOTg2LFwibG9uZ2l0dWRlXCI6MC4yMDQ0MDU5MTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJFWU5cIn0se1wibmFtZVwiOlwiRmFsY29ud29vZFwiLFwibGF0aXR1ZGVcIjo1MS40NTkxNDM1OSxcImxvbmdpdHVkZVwiOjAuMDc4NTUwNzg1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiRkNOXCJ9LHtcIm5hbWVcIjpcIkZhcm5pbmdoYW0gUm9hZFwiLFwibGF0aXR1ZGVcIjo1MS40MDEzOTUxOSxcImxvbmdpdHVkZVwiOjAuMjM1NTI0NjUzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiRk5SXCJ9LHtcIm5hbWVcIjpcIkZhdmVyc2hhbVwiLFwibGF0aXR1ZGVcIjo1MS4zMTE3MTAzNCxcImxvbmdpdHVkZVwiOjAuODkxMDYyMjY1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiRkFWXCJ9LHtcIm5hbWVcIjpcIkZvbGtlc3RvbmUgQ2VudHJhbFwiLFwibGF0aXR1ZGVcIjo1MS4wODI4ODYzMSxcImxvbmdpdHVkZVwiOjEuMTY5NDkyMzAzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiRktDXCJ9LHtcIm5hbWVcIjpcIkZvbGtlc3RvbmUgV2VzdFwiLFwibGF0aXR1ZGVcIjo1MS4wODQ1ODUzOCxcImxvbmdpdHVkZVwiOjEuMTUzOTEyOTE4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiRktXXCJ9LHtcIm5hbWVcIjpcIkZyYW50XCIsXCJsYXRpdHVkZVwiOjUxLjEwNDAyMDY4LFwibG9uZ2l0dWRlXCI6MC4yOTQ1NTY3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiRlJUXCJ9LHtcIm5hbWVcIjpcIkdpbGxpbmdoYW0gKEtlbnQpXCIsXCJsYXRpdHVkZVwiOjUxLjM4NjcyMTY2LFwibG9uZ2l0dWRlXCI6MC41NTA1MTM4MjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJHTE1cIn0se1wibmFtZVwiOlwiR3JhdmVzZW5kXCIsXCJsYXRpdHVkZVwiOjUxLjQ0MTM0OTkzLFwibG9uZ2l0dWRlXCI6MC4zNjY2NDY0ODEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJHUlZcIn0se1wibmFtZVwiOlwiR3JlZW5oaXRoZVwiLFwibGF0aXR1ZGVcIjo1MS40NTA3NjE0NixcImxvbmdpdHVkZVwiOjAuMjc4ODU2ODA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiR05IXCJ9LHtcIm5hbWVcIjpcIkdyZWVud2ljaFwiLFwibGF0aXR1ZGVcIjo1MS40Nzc4Mzg0OCxcImxvbmdpdHVkZVwiOi0wLjAxNDIwOTY0NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkdOV1wifSx7XCJuYW1lXCI6XCJHcm92ZSBQYXJrXCIsXCJsYXRpdHVkZVwiOjUxLjQzMDQ0NTc1LFwibG9uZ2l0dWRlXCI6MC4wMjI1NzgyNjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJHUlBcIn0se1wibmFtZVwiOlwiSGFsbGluZ1wiLFwibGF0aXR1ZGVcIjo1MS4zNTI0NzY3NCxcImxvbmdpdHVkZVwiOjAuNDQ0OTM2OTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJIQUlcIn0se1wibmFtZVwiOlwiSGFycmlldHNoYW1cIixcImxhdGl0dWRlXCI6NTEuMjQ0ODI4MTQsXCJsb25naXR1ZGVcIjowLjY3MjQxMDE0NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkhSTVwifSx7XCJuYW1lXCI6XCJIYXN0aW5nc1wiLFwibGF0aXR1ZGVcIjo1MC44NTc1OTAwMyxcImxvbmdpdHVkZVwiOjAuNTc2NDYxNDU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiSEdTXCJ9LHtcIm5hbWVcIjpcIkhheWVzIChLZW50KVwiLFwibGF0aXR1ZGVcIjo1MS4zNzU4MDI0NCxcImxvbmdpdHVkZVwiOjAuMDEwMTA5NzU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiSFlTXCJ9LHtcIm5hbWVcIjpcIkhlYWRjb3JuXCIsXCJsYXRpdHVkZVwiOjUxLjE2NTcxNjM5LFwibG9uZ2l0dWRlXCI6MC42Mjc0OTEyOTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJIQ05cIn0se1wibmFtZVwiOlwiSGVybmUgQmF5XCIsXCJsYXRpdHVkZVwiOjUxLjM2NDU5MDg4LFwibG9uZ2l0dWRlXCI6MS4xMTc3MzU1NzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJITkJcIn0se1wibmFtZVwiOlwiSGVybmUgSGlsbFwiLFwibGF0aXR1ZGVcIjo1MS40NTMyMDc1MixcImxvbmdpdHVkZVwiOi0wLjEwMTY0MDg3NixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkhOSFwifSx7XCJuYW1lXCI6XCJIaWdoIEJyb29tc1wiLFwibGF0aXR1ZGVcIjo1MS4xNDkzOTgyNixcImxvbmdpdHVkZVwiOjAuMjc3MzQ1NjYxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiSElCXCJ9LHtcIm5hbWVcIjpcIkhpZ2hhbSAoS2VudClcIixcImxhdGl0dWRlXCI6NTEuNDI2NTYwMDYsXCJsb25naXR1ZGVcIjowLjQ2NjI4MzkwMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkhHTVwifSx7XCJuYW1lXCI6XCJIaWxkZW5ib3JvdWdoXCIsXCJsYXRpdHVkZVwiOjUxLjIxNDQ4MTQyLFwibG9uZ2l0dWRlXCI6MC4yMjc2MDIzODUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJITEJcIn0se1wibmFtZVwiOlwiSGl0aGVyIEdyZWVuXCIsXCJsYXRpdHVkZVwiOjUxLjQ1MjQzMjIxLFwibG9uZ2l0dWRlXCI6LTAuMDAwOTE4OTkyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiSEdSXCJ9LHtcIm5hbWVcIjpcIkhvbGxpbmdib3VybmVcIixcImxhdGl0dWRlXCI6NTEuMjY1MTc0ODksXCJsb25naXR1ZGVcIjowLjYyNzg1Nzg4MixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkhCTlwifSx7XCJuYW1lXCI6XCJLZWFyc25leSAoS2VudClcIixcImxhdGl0dWRlXCI6NTEuMTQ5Mzc1OTksXCJsb25naXR1ZGVcIjoxLjI3MjA3NDU4MSxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIktTTlwifSx7XCJuYW1lXCI6XCJLZW1zaW5nXCIsXCJsYXRpdHVkZVwiOjUxLjI5NzE4NDY5LFwibG9uZ2l0dWRlXCI6MC4yNDc0NDE5MDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJLTVNcIn0se1wibmFtZVwiOlwiS2Vtc2xleVwiLFwibGF0aXR1ZGVcIjo1MS4zNjI0Mzg3LFwibG9uZ2l0dWRlXCI6MC43MzUzNzEwMzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJLTUxcIn0se1wibmFtZVwiOlwiS2VudCBIb3VzZVwiLFwibGF0aXR1ZGVcIjo1MS40MTI3MjA2LFwibG9uZ2l0dWRlXCI6LTAuMDQ1Nzk1MSxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIktUSFwifSx7XCJuYW1lXCI6XCJLaWRicm9va2VcIixcImxhdGl0dWRlXCI6NTEuNDYyNzIxNDMsXCJsb25naXR1ZGVcIjowLjAyODMyNDMwMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIktEQlwifSx7XCJuYW1lXCI6XCJLbm9ja2hvbHRcIixcImxhdGl0dWRlXCI6NTEuMzQ1Nzg4NzYsXCJsb25naXR1ZGVcIjowLjEzMDg1NzY3NixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIktDS1wifSx7XCJuYW1lXCI6XCJMYWR5d2VsbFwiLFwibGF0aXR1ZGVcIjo1MS40NTYyNDcwNCxcImxvbmdpdHVkZVwiOi0wLjAxOTAzMzU4NSxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkxBRFwifSx7XCJuYW1lXCI6XCJMZWUgKExvbmRvbilcIixcImxhdGl0dWRlXCI6NTEuNDQ5NDkwMTQsXCJsb25naXR1ZGVcIjowLjAxMzM0NTA5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkxFRVwifSx7XCJuYW1lXCI6XCJMZW5oYW1cIixcImxhdGl0dWRlXCI6NTEuMjM0NDgxLFwibG9uZ2l0dWRlXCI6MC43MDc3NzA3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkxFTlwifSx7XCJuYW1lXCI6XCJMZXdpc2hhbVwiLFwibGF0aXR1ZGVcIjo1MS40NjU2OTQ3MSxcImxvbmdpdHVkZVwiOi0wLjAxNDAxNzExNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkxFV1wifSx7XCJuYW1lXCI6XCJMb25kb24gV2F0ZXJsb28gRWFzdFwiLFwibGF0aXR1ZGVcIjo1MS41MDQwODAzOCxcImxvbmdpdHVkZVwiOi0wLjEwODg5MzI4NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIldBRVwifSx7XCJuYW1lXCI6XCJMb25nZmllbGRcIixcImxhdGl0dWRlXCI6NTEuMzk2MTU1NDUsXCJsb25naXR1ZGVcIjowLjMwMDM3OTg1MixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkxHRlwifSx7XCJuYW1lXCI6XCJMb3dlciBTeWRlbmhhbVwiLFwibGF0aXR1ZGVcIjo1MS40MjQ4MzI2MixcImxvbmdpdHVkZVwiOi0wLjAzMzMzODk3OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIkxTWVwifSx7XCJuYW1lXCI6XCJNYWlkc3RvbmUgQmFycmFja3NcIixcImxhdGl0dWRlXCI6NTEuMjc3MTY2MDgsXCJsb25naXR1ZGVcIjowLjUxMzk2NjczNixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIk1EQlwifSx7XCJuYW1lXCI6XCJNYWlkc3RvbmUgRWFzdFwiLFwibGF0aXR1ZGVcIjo1MS4yNzc4MjY3MSxcImxvbmdpdHVkZVwiOjAuNTIxMzAxODU3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiTURFXCJ9LHtcIm5hbWVcIjpcIk1haWRzdG9uZSBXZXN0XCIsXCJsYXRpdHVkZVwiOjUxLjI3MDQ2MjYsXCJsb25naXR1ZGVcIjowLjUxNTc4MDAyNyxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIk1EV1wifSx7XCJuYW1lXCI6XCJNYXJkZW4gKEtlbnQpXCIsXCJsYXRpdHVkZVwiOjUxLjE3NTE2OTU5LFwibG9uZ2l0dWRlXCI6MC40OTMxNzQ2MDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJNUk5cIn0se1wibmFtZVwiOlwiTWFyZ2F0ZVwiLFwibGF0aXR1ZGVcIjo1MS4zODU0MzU2NCxcImxvbmdpdHVkZVwiOjEuMzcyMDIwOTU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiTUFSXCJ9LHtcIm5hbWVcIjpcIk1hcnRpbiBNaWxsXCIsXCJsYXRpdHVkZVwiOjUxLjE3MDY3ODcyLFwibG9uZ2l0dWRlXCI6MS4zNDgyMzI2MDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJNVE1cIn0se1wibmFtZVwiOlwiTWF6ZSBIaWxsXCIsXCJsYXRpdHVkZVwiOjUxLjQ4MjkzNjQzLFwibG9uZ2l0dWRlXCI6MC4wMDMyOTU2MTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJNWkhcIn0se1wibmFtZVwiOlwiTWVvcGhhbVwiLFwibGF0aXR1ZGVcIjo1MS4zODY0MjM5LFwibG9uZ2l0dWRlXCI6MC4zNTY5NTQzNjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJNRVBcIn0se1wibmFtZVwiOlwiTWluc3RlclwiLFwibGF0aXR1ZGVcIjo1MS4zMjkxNzk1OSxcImxvbmdpdHVkZVwiOjEuMzE3MjMyMzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJNU1JcIn0se1wibmFtZVwiOlwiTW90dGluZ2hhbVwiLFwibGF0aXR1ZGVcIjo1MS40Mzk4NTU4LFwibG9uZ2l0dWRlXCI6MC4wNTAzMzQzNjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJNVEdcIn0se1wibmFtZVwiOlwiTmV3IEJlY2tlbmhhbVwiLFwibGF0aXR1ZGVcIjo1MS40MTY3NzEyNixcImxvbmdpdHVkZVwiOi0wLjAzNTI2NzEwNSxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIk5CQ1wifSx7XCJuYW1lXCI6XCJOZXcgQ3Jvc3NcIixcImxhdGl0dWRlXCI6NTEuNDc2MzU2NTksXCJsb25naXR1ZGVcIjotMC4wMzI5OTUzNDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJOV1hcIn0se1wibmFtZVwiOlwiTmV3IEVsdGhhbVwiLFwibGF0aXR1ZGVcIjo1MS40Mzc3MDQ3MSxcImxvbmdpdHVkZVwiOjAuMDcwMzgyNjQ4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiTkVIXCJ9LHtcIm5hbWVcIjpcIk5ldyBIeXRoZVwiLFwibGF0aXR1ZGVcIjo1MS4zMTMwMDA3LFwibG9uZ2l0dWRlXCI6MC40NTQ5MzQ2NjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJOSEVcIn0se1wibmFtZVwiOlwiTmV3aW5ndG9uXCIsXCJsYXRpdHVkZVwiOjUxLjM1MzM0MDA0LFwibG9uZ2l0dWRlXCI6MC42Njg1ODE5MTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJOR1RcIn0se1wibmFtZVwiOlwiTm9ydGhmbGVldFwiLFwibGF0aXR1ZGVcIjo1MS40NDU4NDgxOCxcImxvbmdpdHVkZVwiOjAuMzI0MzM1OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIk5GTFwifSx7XCJuYW1lXCI6XCJOdW5oZWFkXCIsXCJsYXRpdHVkZVwiOjUxLjQ2Njk3MzA4LFwibG9uZ2l0dWRlXCI6LTAuMDUyNjkyMzQ3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiTkhEXCJ9LHtcIm5hbWVcIjpcIk9ycGluZ3RvblwiLFwibGF0aXR1ZGVcIjo1MS4zNzM1MjIwMSxcImxvbmdpdHVkZVwiOjAuMDg5MDM4NTI2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiT1JQXCJ9LHtcIm5hbWVcIjpcIk90Zm9yZFwiLFwibGF0aXR1ZGVcIjo1MS4zMTMxNTYzNSxcImxvbmdpdHVkZVwiOjAuMTk2NzkwOTc4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiT1RGXCJ9LHtcIm5hbWVcIjpcIlBhZGRvY2sgV29vZFwiLFwibGF0aXR1ZGVcIjo1MS4xODIyNjA3NCxcImxvbmdpdHVkZVwiOjAuMzg5MTY1Mzk2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiUERXXCJ9LHtcIm5hbWVcIjpcIlBlbmdlIEVhc3RcIixcImxhdGl0dWRlXCI6NTEuNDE5MzM0NDgsXCJsb25naXR1ZGVcIjotMC4wNTQxNDI3ODQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJQTkVcIn0se1wibmFtZVwiOlwiUGV0dHMgV29vZFwiLFwibGF0aXR1ZGVcIjo1MS4zODg2MTkzNixcImxvbmdpdHVkZVwiOjAuMDc0NDkwMTU1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiUEVUXCJ9LHtcIm5hbWVcIjpcIlBsdWNrbGV5XCIsXCJsYXRpdHVkZVwiOjUxLjE1NjQ3NDU5LFwibG9uZ2l0dWRlXCI6MC43NDc0MDg3MjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJQTENcIn0se1wibmFtZVwiOlwiUGx1bXN0ZWFkXCIsXCJsYXRpdHVkZVwiOjUxLjQ4OTc5ODQ0LFwibG9uZ2l0dWRlXCI6MC4wODQyNjY2NjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJQTFVcIn0se1wibmFtZVwiOlwiUXVlZW5ib3JvdWdoXCIsXCJsYXRpdHVkZVwiOjUxLjQxNTYzNjg1LFwibG9uZ2l0dWRlXCI6MC43NDk2ODAxNzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJRQlJcIn0se1wibmFtZVwiOlwiUmFpbmhhbSAoS2VudClcIixcImxhdGl0dWRlXCI6NTEuMzY2MzA0ODEsXCJsb25naXR1ZGVcIjowLjYxMTM0Njk3MixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIlJBSVwifSx7XCJuYW1lXCI6XCJSYW1zZ2F0ZVwiLFwibGF0aXR1ZGVcIjo1MS4zNDEwMjkyNyxcImxvbmdpdHVkZVwiOjEuNDA2MDU2Mzk4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiUkFNXCJ9LHtcIm5hbWVcIjpcIlJhdmVuc2JvdXJuZVwiLFwibGF0aXR1ZGVcIjo1MS40MTM4NjQzMyxcImxvbmdpdHVkZVwiOi0wLjAwNjkxNjY1MyxcInN0YXRpb25PcGVyYXRvclwiOlwiVExcIixcImNyc0NvZGVcIjpcIlJWQlwifSx7XCJuYW1lXCI6XCJSb2JlcnRzYnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUwLjk4NDkzMDc5LFwibG9uZ2l0dWRlXCI6MC40Njg3ODY0MTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJSQlJcIn0se1wibmFtZVwiOlwiUm9jaGVzdGVyXCIsXCJsYXRpdHVkZVwiOjUxLjM4NTU0OTE4LFwibG9uZ2l0dWRlXCI6MC41MTAyODg1MzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJSVFJcIn0se1wibmFtZVwiOlwiU2FuZGxpbmdcIixcImxhdGl0dWRlXCI6NTEuMDkwMzY5NixcImxvbmdpdHVkZVwiOjEuMDY2MDY0MTI4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiU0RHXCJ9LHtcIm5hbWVcIjpcIlNhbmR3aWNoXCIsXCJsYXRpdHVkZVwiOjUxLjI2OTkwNzI3LFwibG9uZ2l0dWRlXCI6MS4zNDI1ODQxMTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJTRFdcIn0se1wibmFtZVwiOlwiU2VsbGluZ1wiLFwibGF0aXR1ZGVcIjo1MS4yNzczNTk1NCxcImxvbmdpdHVkZVwiOjAuOTQwODg5MzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJTRUdcIn0se1wibmFtZVwiOlwiU2V2ZW5vYWtzXCIsXCJsYXRpdHVkZVwiOjUxLjI3Njg2MjU2LFwibG9uZ2l0dWRlXCI6MC4xODE2ODA1MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIlNFVlwifSx7XCJuYW1lXCI6XCJTaGVlcm5lc3Mtb24tU2VhXCIsXCJsYXRpdHVkZVwiOjUxLjQ0MTA2MTY2LFwibG9uZ2l0dWRlXCI6MC43NTg1NDc1NzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJTU1NcIn0se1wibmFtZVwiOlwiU2hlcGhlcmRzIFdlbGxcIixcImxhdGl0dWRlXCI6NTEuMTg4NDAwOTEsXCJsb25naXR1ZGVcIjoxLjIyOTkyMjUwMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIlNQSFwifSx7XCJuYW1lXCI6XCJTaG9yZWhhbSAoS2VudClcIixcImxhdGl0dWRlXCI6NTEuMzMyMjE3MyxcImxvbmdpdHVkZVwiOjAuMTg4OTAxODEyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiU0VIXCJ9LHtcIm5hbWVcIjpcIlNob3J0bGFuZHNcIixcImxhdGl0dWRlXCI6NTEuNDA1NjA1MDYsXCJsb25naXR1ZGVcIjowLjAwMjc4OTMxNixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIlNSVFwifSx7XCJuYW1lXCI6XCJTaWRjdXBcIixcImxhdGl0dWRlXCI6NTEuNDM0NDIwMSxcImxvbmdpdHVkZVwiOjAuMTAzMzI2NTk5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiU0lEXCJ9LHtcIm5hbWVcIjpcIlNpdHRpbmdib3VybmVcIixcImxhdGl0dWRlXCI6NTEuMzQxOTc0NjYsXCJsb25naXR1ZGVcIjowLjczNDY5NzUyOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIlNJVFwifSx7XCJuYW1lXCI6XCJTbGFkZSBHcmVlblwiLFwibGF0aXR1ZGVcIjo1MS40Njc3ODg2NyxcImxvbmdpdHVkZVwiOjAuMTkwNTA0NDIyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiU0dSXCJ9LHtcIm5hbWVcIjpcIlNub2RsYW5kXCIsXCJsYXRpdHVkZVwiOjUxLjMzMDIyODk3LFwibG9uZ2l0dWRlXCI6MC40NDgyNDYzMTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJTREFcIn0se1wibmFtZVwiOlwiU25vd2Rvd25cIixcImxhdGl0dWRlXCI6NTEuMjE1MzAyNTIsXCJsb25naXR1ZGVcIjoxLjIxMzcxNzE3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIlNXT1wifSx7XCJuYW1lXCI6XCJTb2xlIFN0cmVldFwiLFwibGF0aXR1ZGVcIjo1MS4zODMxNDU0OSxcImxvbmdpdHVkZVwiOjAuMzc4MTAwMzU5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiU09SXCJ9LHtcIm5hbWVcIjpcIlN0IEpvaG5zIChMb25kb24pXCIsXCJsYXRpdHVkZVwiOjUxLjQ2ODk5ODAyLFwibG9uZ2l0dWRlXCI6LTAuMDIzMjMyODE0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiU0FKXCJ9LHtcIm5hbWVcIjpcIlN0IExlb25hcmRzIFdhcnJpb3IgU3F1YXJlXCIsXCJsYXRpdHVkZVwiOjUwLjg1NTg2MzMsXCJsb25naXR1ZGVcIjowLjU2MDUyMjAwNSxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIlNMUVwifSx7XCJuYW1lXCI6XCJTdCBNYXJ5IENyYXlcIixcImxhdGl0dWRlXCI6NTEuMzk0Nzc5NDEsXCJsb25naXR1ZGVcIjowLjEwNzI1NzcyNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIlNNWVwifSx7XCJuYW1lXCI6XCJTdGFwbGVodXJzdFwiLFwibGF0aXR1ZGVcIjo1MS4xNzE0Njk5NCxcImxvbmdpdHVkZVwiOjAuNTUwNDQ1ODM1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiU1BVXCJ9LHtcIm5hbWVcIjpcIlN0b25lIENyb3NzaW5nXCIsXCJsYXRpdHVkZVwiOjUxLjQ1MTMzMjM1LFwibG9uZ2l0dWRlXCI6MC4yNjM3ODYxOTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJTQ0dcIn0se1wibmFtZVwiOlwiU3RvbmVnYXRlXCIsXCJsYXRpdHVkZVwiOjUxLjAxOTk2NjEyLFwibG9uZ2l0dWRlXCI6MC4zNjM4ODM2MTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJTT0dcIn0se1wibmFtZVwiOlwiU3Ryb29kIChLZW50KVwiLFwibGF0aXR1ZGVcIjo1MS4zOTY1NDg2NCxcImxvbmdpdHVkZVwiOjAuNTAwMTk0MzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJTT09cIn0se1wibmFtZVwiOlwiU3R1cnJ5XCIsXCJsYXRpdHVkZVwiOjUxLjMwMTA3NDA4LFwibG9uZ2l0dWRlXCI6MS4xMjIyNjUzMzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJTVFVcIn0se1wibmFtZVwiOlwiU3VuZHJpZGdlIFBhcmtcIixcImxhdGl0dWRlXCI6NTEuNDEzMzk2NyxcImxvbmdpdHVkZVwiOjAuMDIwMzg3NDI3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiU1VQXCJ9LHtcIm5hbWVcIjpcIlN3YWxlXCIsXCJsYXRpdHVkZVwiOjUxLjM4OTIzNTQ4LFwibG9uZ2l0dWRlXCI6MC43NDcxNDc0NzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJTV0xcIn0se1wibmFtZVwiOlwiU3dhbmxleVwiLFwibGF0aXR1ZGVcIjo1MS4zOTMzODcyOCxcImxvbmdpdHVkZVwiOjAuMTY5MjM3MzU0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiU0FZXCJ9LHtcIm5hbWVcIjpcIlN3YW5zY29tYmVcIixcImxhdGl0dWRlXCI6NTEuNDQ5MDcyNDgsXCJsb25naXR1ZGVcIjowLjMwOTU0NTExOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIlNXTVwifSx7XCJuYW1lXCI6XCJTeWRlbmhhbSBIaWxsXCIsXCJsYXRpdHVkZVwiOjUxLjQzMjcxNjM0LFwibG9uZ2l0dWRlXCI6LTAuMDgwMzM0MzM1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiU1lIXCJ9LHtcIm5hbWVcIjpcIlRleW5oYW1cIixcImxhdGl0dWRlXCI6NTEuMzMzMzg5OTUsXCJsb25naXR1ZGVcIjowLjgwNzQ0MDY5MixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIlRFWVwifSx7XCJuYW1lXCI6XCJUb25icmlkZ2VcIixcImxhdGl0dWRlXCI6NTEuMTkxNDM2ODksXCJsb25naXR1ZGVcIjowLjI3MDc3MzQ0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiVE9OXCJ9LHtcIm5hbWVcIjpcIlR1bmJyaWRnZSBXZWxsc1wiLFwibGF0aXR1ZGVcIjo1MS4xMzAyMjY3NCxcImxvbmdpdHVkZVwiOjAuMjYyODIzMjM3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiVEJXXCJ9LHtcIm5hbWVcIjpcIldhZGh1cnN0XCIsXCJsYXRpdHVkZVwiOjUxLjA3MzQ2MDg5LFwibG9uZ2l0dWRlXCI6MC4zMTMxODc5MjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJXQURcIn0se1wibmFtZVwiOlwiV2FsbWVyXCIsXCJsYXRpdHVkZVwiOjUxLjIwMzMyMzkzLFwibG9uZ2l0dWRlXCI6MS4zODI4OTExMjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJXQU1cIn0se1wibmFtZVwiOlwiV2F0ZXJpbmdidXJ5XCIsXCJsYXRpdHVkZVwiOjUxLjI0OTczMTE2LFwibG9uZ2l0dWRlXCI6MC40MjI0NzAzNDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJXVFJcIn0se1wibmFtZVwiOlwiV2VsbGluZ1wiLFwibGF0aXR1ZGVcIjo1MS40NjQ4NDM0OCxcImxvbmdpdHVkZVwiOjAuMTAxODQ2MDM4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiV0xJXCJ9LHtcIm5hbWVcIjpcIldlc3QgRHVsd2ljaFwiLFwibGF0aXR1ZGVcIjo1MS40NDA2MjM0OCxcImxvbmdpdHVkZVwiOi0wLjA5MDkzODg4NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIldEVVwifSx7XCJuYW1lXCI6XCJXZXN0IE1hbGxpbmdcIixcImxhdGl0dWRlXCI6NTEuMjkyMDE3OTgsXCJsb25naXR1ZGVcIjowLjQxODY1NzI2OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIldNQVwifSx7XCJuYW1lXCI6XCJXZXN0IFN0IExlb25hcmRzXCIsXCJsYXRpdHVkZVwiOjUwLjg1MzE0NzI0LFwibG9uZ2l0dWRlXCI6MC41Mzk5NDAzMzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJXTERcIn0se1wibmFtZVwiOlwiV2VzdCBXaWNraGFtXCIsXCJsYXRpdHVkZVwiOjUxLjM4MTMwMjAxLFwibG9uZ2l0dWRlXCI6LTAuMDE0NDI1MTgzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiV1dJXCJ9LHtcIm5hbWVcIjpcIldlc3Rjb21iZSBQYXJrXCIsXCJsYXRpdHVkZVwiOjUxLjQ4NDQ4Njg1LFwibG9uZ2l0dWRlXCI6MC4wMTc3NjcyMjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJXQ0JcIn0se1wibmFtZVwiOlwiV2VzdGVuaGFuZ2VyXCIsXCJsYXRpdHVkZVwiOjUxLjA5NDg3OTM3LFwibG9uZ2l0dWRlXCI6MS4wMzc3MDc3NjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJXSEFcIn0se1wibmFtZVwiOlwiV2VzdGdhdGUtb24tU2VhXCIsXCJsYXRpdHVkZVwiOjUxLjM4MTQ1MjU0LFwibG9uZ2l0dWRlXCI6MS4zMzgzNzg0OTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJXR0FcIn0se1wibmFtZVwiOlwiV2hpdHN0YWJsZVwiLFwibGF0aXR1ZGVcIjo1MS4zNTc1ODA2NixcImxvbmdpdHVkZVwiOjEuMDMzMzAyMDI4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiV0hJXCJ9LHtcIm5hbWVcIjpcIldvb2x3aWNoIEFyc2VuYWxcIixcImxhdGl0dWRlXCI6NTEuNDg5ODczNzQsXCJsb25naXR1ZGVcIjowLjA2OTg2NDYxNixcInN0YXRpb25PcGVyYXRvclwiOlwiU0VcIixcImNyc0NvZGVcIjpcIldXQVwifSx7XCJuYW1lXCI6XCJXb29sd2ljaCBEb2NreWFyZFwiLFwibGF0aXR1ZGVcIjo1MS40OTExMzA1NyxcImxvbmdpdHVkZVwiOjAuMDU0NjUxMzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJXV0RcIn0se1wibmFtZVwiOlwiV3llXCIsXCJsYXRpdHVkZVwiOjUxLjE4NTAxMzY5LFwibG9uZ2l0dWRlXCI6MC45MjkzMjE4NTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNFXCIsXCJjcnNDb2RlXCI6XCJXWUVcIn0se1wibmFtZVwiOlwiWWFsZGluZ1wiLFwibGF0aXR1ZGVcIjo1MS4yMjY0NzkxMSxcImxvbmdpdHVkZVwiOjAuNDEyMTY3NTAyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTRVwiLFwiY3JzQ29kZVwiOlwiWUFMXCJ9LHtcIm5hbWVcIjpcIkFsZHJpbmd0b25cIixcImxhdGl0dWRlXCI6NTAuODM2MzY0NzIsXCJsb25naXR1ZGVcIjotMC4xODEyMDk2OTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJBR1RcIn0se1wibmFtZVwiOlwiQW1iZXJsZXlcIixcImxhdGl0dWRlXCI6NTAuODk2NjY4LFwibG9uZ2l0dWRlXCI6LTAuNTQxOTg5MDQ3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiQU1ZXCJ9LHtcIm5hbWVcIjpcIkFuZ21lcmluZ1wiLFwibGF0aXR1ZGVcIjo1MC44MTY1Njk5LFwibG9uZ2l0dWRlXCI6LTAuNDg5Mzg5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkFOR1wifSx7XCJuYW1lXCI6XCJBcHBsZWRvcmUgKEtlbnQpXCIsXCJsYXRpdHVkZVwiOjUxLjAzMzIzNTIsXCJsb25naXR1ZGVcIjowLjgxNjM1NTUzNixcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkFQRFwifSx7XCJuYW1lXCI6XCJBcnVuZGVsXCIsXCJsYXRpdHVkZVwiOjUwLjg0ODIwMTQ1LFwibG9uZ2l0dWRlXCI6LTAuNTQ2MTcxMzQ2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiQVJVXCJ9LHtcIm5hbWVcIjpcIkFzaHRlYWRcIixcImxhdGl0dWRlXCI6NTEuMzE3ODgxNTgsXCJsb25naXR1ZGVcIjotMC4zMDgxNDczMzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJBSERcIn0se1wibmFtZVwiOlwiQXNodXJzdCAoS2VudClcIixcImxhdGl0dWRlXCI6NTEuMTI4NjU1ODIsXCJsb25naXR1ZGVcIjowLjE1MjY2MTk2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkFIU1wifSx7XCJuYW1lXCI6XCJCYWxjb21iZVwiLFwibGF0aXR1ZGVcIjo1MS4wNTU1MTMzNCxcImxvbmdpdHVkZVwiOi0wLjEzNjkzMjQzMSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkJBQlwifSx7XCJuYW1lXCI6XCJCYWxoYW1cIixcImxhdGl0dWRlXCI6NTEuNDQzMjI3NTQsXCJsb25naXR1ZGVcIjotMC4xNTI0MjEyMjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJCQUxcIn0se1wibmFtZVwiOlwiQmFuc3RlYWRcIixcImxhdGl0dWRlXCI6NTEuMzI5MzQ4NDQsXCJsb25naXR1ZGVcIjotMC4yMTMxNTgwNjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJCQURcIn0se1wibmFtZVwiOlwiQmFybmhhbVwiLFwibGF0aXR1ZGVcIjo1MC44MzA4OTI4OSxcImxvbmdpdHVkZVwiOi0wLjYzOTY3OTY4OSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkJBQVwifSx7XCJuYW1lXCI6XCJCYXR0ZXJzZWEgUGFya1wiLFwibGF0aXR1ZGVcIjo1MS40NzczMzMwOCxcImxvbmdpdHVkZVwiOi0wLjE0ODE2Mjk2NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkJBS1wifSx7XCJuYW1lXCI6XCJCZWxtb250XCIsXCJsYXRpdHVkZVwiOjUxLjM0NDEzOTI2LFwibG9uZ2l0dWRlXCI6LTAuMTk5NDg3MjA2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiQkxNXCJ9LHtcIm5hbWVcIjpcIkJlcndpY2sgKFN1c3NleClcIixcImxhdGl0dWRlXCI6NTAuODQwMzcyMTQsXCJsb25naXR1ZGVcIjowLjE2NjAyNjQyOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkJSS1wifSx7XCJuYW1lXCI6XCJCZXhoaWxsXCIsXCJsYXRpdHVkZVwiOjUwLjg0MTAzNTQ5LFwibG9uZ2l0dWRlXCI6MC40NzcwMzQwODcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJCRVhcIn0se1wibmFtZVwiOlwiQmlsbGluZ3NodXJzdFwiLFwibGF0aXR1ZGVcIjo1MS4wMTUxOTU1NyxcImxvbmdpdHVkZVwiOi0wLjQ1MDI5NTYwOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkJJR1wifSx7XCJuYW1lXCI6XCJCaXJrYmVja1wiLFwibGF0aXR1ZGVcIjo1MS40MDM5MDEyNixcImxvbmdpdHVkZVwiOi0wLjA1NjIzNTg3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkJJS1wifSx7XCJuYW1lXCI6XCJCaXNob3BzdG9uZSAoU3Vzc2V4KVwiLFwibGF0aXR1ZGVcIjo1MC43ODAxMzU4OSxcImxvbmdpdHVkZVwiOjAuMDgyNzYzMDQ2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiQklQXCJ9LHtcIm5hbWVcIjpcIkJvZ25vciBSZWdpc1wiLFwibGF0aXR1ZGVcIjo1MC43ODY1NTMyNCxcImxvbmdpdHVkZVwiOi0wLjY3NjE3OTAzNixcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkJPR1wifSx7XCJuYW1lXCI6XCJCb3NoYW1cIixcImxhdGl0dWRlXCI6NTAuODQyNzM0OCxcImxvbmdpdHVkZVwiOi0wLjg0NzQzNjYzNyxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkJPSFwifSx7XCJuYW1lXCI6XCJCb3ggSGlsbCAmIFdlc3RodW1ibGVcIixcImxhdGl0dWRlXCI6NTEuMjU0MDA5MzksXCJsb25naXR1ZGVcIjotMC4zMjg0Nzg0NDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJCWFdcIn0se1wibmFtZVwiOlwiQnJpZ2h0b24gKEVhc3QgU3Vzc2V4KVwiLFwibGF0aXR1ZGVcIjo1MC44Mjg5NTMyMixcImxvbmdpdHVkZVwiOi0wLjE0MTIyNTE5MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkJUTlwifSx7XCJuYW1lXCI6XCJCdXJnZXNzIEhpbGxcIixcImxhdGl0dWRlXCI6NTAuOTUzNjE0NjUsXCJsb25naXR1ZGVcIjotMC4xMjc3NjkwNjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJCVUdcIn0se1wibmFtZVwiOlwiQnV4dGVkXCIsXCJsYXRpdHVkZVwiOjUwLjk5MDAxMDk0LFwibG9uZ2l0dWRlXCI6MC4xMzE0NDc3MTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJCWERcIn0se1wibmFtZVwiOlwiQ2Fyc2hhbHRvblwiLFwibGF0aXR1ZGVcIjo1MS4zNjg0NTQ5LFwibG9uZ2l0dWRlXCI6LTAuMTY2MzY2MTE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiQ1NIXCJ9LHtcIm5hbWVcIjpcIkNhcnNoYWx0b24gQmVlY2hlc1wiLFwibGF0aXR1ZGVcIjo1MS4zNTc0MTEyNCxcImxvbmdpdHVkZVwiOi0wLjE2OTc5NDc4OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkNTQlwifSx7XCJuYW1lXCI6XCJDYXRlcmhhbVwiLFwibGF0aXR1ZGVcIjo1MS4yODIxMzk0MyxcImxvbmdpdHVkZVwiOi0wLjA3ODMwMjc2NSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkNBVFwifSx7XCJuYW1lXCI6XCJDaGVhbVwiLFwibGF0aXR1ZGVcIjo1MS4zNTU0NzkyNixcImxvbmdpdHVkZVwiOi0wLjIxNDE2NjUyMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkNIRVwifSx7XCJuYW1lXCI6XCJDaGljaGVzdGVyXCIsXCJsYXRpdHVkZVwiOjUwLjgzMjA0MDE2LFwibG9uZ2l0dWRlXCI6LTAuNzgxNzUyNjAzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiQ0NIXCJ9LHtcIm5hbWVcIjpcIkNoaXBzdGVhZFwiLFwibGF0aXR1ZGVcIjo1MS4zMDkzMjAwNSxcImxvbmdpdHVkZVwiOi0wLjE2OTQyNzc3MSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkNIUFwifSx7XCJuYW1lXCI6XCJDaHJpc3RzIEhvc3BpdGFsXCIsXCJsYXRpdHVkZVwiOjUxLjA1MDY3NzksXCJsb25naXR1ZGVcIjotMC4zNjM1NDcwODYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJDSEhcIn0se1wibmFtZVwiOlwiQ29sbGluZ3RvblwiLFwibGF0aXR1ZGVcIjo1MC44MzkyODIxLFwibG9uZ2l0dWRlXCI6MC40NTc4NzgzMzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJDTExcIn0se1wibmFtZVwiOlwiQ29vZGVuIEJlYWNoXCIsXCJsYXRpdHVkZVwiOjUwLjgzMzM2NTQ2LFwibG9uZ2l0dWRlXCI6MC40MjY4NzQ3ODQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJDT0JcIn0se1wibmFtZVwiOlwiQ29va3NicmlkZ2VcIixcImxhdGl0dWRlXCI6NTAuOTAzNzUyNTYsXCJsb25naXR1ZGVcIjotMC4wMDkxOTg0MjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJDQlJcIn0se1wibmFtZVwiOlwiQ291bHNkb24gU291dGhcIixcImxhdGl0dWRlXCI6NTEuMzE1ODM3MTgsXCJsb25naXR1ZGVcIjotMC4xMzc4ODQzOTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJDRFNcIn0se1wibmFtZVwiOlwiQ291bHNkb24gVG93blwiLFwibGF0aXR1ZGVcIjo1MS4zMjI0MzQsXCJsb25naXR1ZGVcIjotMC4xMzQzMixcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkNETlwifSx7XCJuYW1lXCI6XCJDb3dkZW4gKEtlbnQpXCIsXCJsYXRpdHVkZVwiOjUxLjE1NTYzMTE0LFwibG9uZ2l0dWRlXCI6MC4xMTAwNDE1NTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJDV05cIn0se1wibmFtZVwiOlwiQ3Jhd2xleVwiLFwibGF0aXR1ZGVcIjo1MS4xMTIyMDcyLFwibG9uZ2l0dWRlXCI6LTAuMTg2NjcyNjQ5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiQ1JXXCJ9LHtcIm5hbWVcIjpcIkNyb3dib3JvdWdoXCIsXCJsYXRpdHVkZVwiOjUxLjA0NjM4MTE3LFwibG9uZ2l0dWRlXCI6MC4xODgwMjMxNDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJDT0hcIn0se1wibmFtZVwiOlwiRG9sZWhhbVwiLFwibGF0aXR1ZGVcIjo1MC45MTg3NDcyLFwibG9uZ2l0dWRlXCI6MC42MTA3MDI4NzUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJETEhcIn0se1wibmFtZVwiOlwiRG9ya2luZyAoTWFpbilcIixcImxhdGl0dWRlXCI6NTEuMjQwOTI3LFwibG9uZ2l0dWRlXCI6LTAuMzI0MjM5MjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJES0dcIn0se1wibmFtZVwiOlwiRG9ybWFuc1wiLFwibGF0aXR1ZGVcIjo1MS4xNTU3ODU5OCxcImxvbmdpdHVkZVwiOi0wLjAwNDMwMjYyNSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkRNU1wifSx7XCJuYW1lXCI6XCJEdXJyaW5ndG9uLW9uLVNlYVwiLFwibGF0aXR1ZGVcIjo1MC44MTc1MjIyOCxcImxvbmdpdHVkZVwiOi0wLjQxMTQ2MTkxNixcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkRVUlwifSx7XCJuYW1lXCI6XCJFYXJsc3dvb2QgKFN1cnJleSlcIixcImxhdGl0dWRlXCI6NTEuMjI3MzI1MDcsXCJsb25naXR1ZGVcIjotMC4xNzA4MjE2MzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJFTERcIn0se1wibmFtZVwiOlwiRWFzdCBDcm95ZG9uXCIsXCJsYXRpdHVkZVwiOjUxLjM3NTAwNTY0LFwibG9uZ2l0dWRlXCI6LTAuMDkyMjc2NTM5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiRUNSXCJ9LHtcIm5hbWVcIjpcIkVhc3QgRHVsd2ljaFwiLFwibGF0aXR1ZGVcIjo1MS40NjEzMjAxMSxcImxvbmdpdHVkZVwiOi0wLjA4MDcxNzY5NixcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkVEV1wifSx7XCJuYW1lXCI6XCJFYXN0IEdyaW5zdGVhZFwiLFwibGF0aXR1ZGVcIjo1MS4xMjYyNjY5NyxcImxvbmdpdHVkZVwiOi0wLjAxNzg5NTAxOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkVHUlwifSx7XCJuYW1lXCI6XCJFYXN0IFdvcnRoaW5nXCIsXCJsYXRpdHVkZVwiOjUwLjgyMTYzOTU3LFwibG9uZ2l0dWRlXCI6LTAuMzU0ODg1MzYxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiRVdSXCJ9LHtcIm5hbWVcIjpcIkVhc3Rib3VybmVcIixcImxhdGl0dWRlXCI6NTAuNzY5MzY5NTUsXCJsb25naXR1ZGVcIjowLjI4MTI1ODUwNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkVCTlwifSx7XCJuYW1lXCI6XCJFZGVuYnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUxLjIwODQzMTEzLFwibG9uZ2l0dWRlXCI6MC4wNjA2NTQwNDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJFQlJcIn0se1wibmFtZVwiOlwiRWRlbmJyaWRnZSBUb3duXCIsXCJsYXRpdHVkZVwiOjUxLjIwMDA3Nzk5LFwibG9uZ2l0dWRlXCI6MC4wNjcxODA5MzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJFQlRcIn0se1wibmFtZVwiOlwiRW1zd29ydGhcIixcImxhdGl0dWRlXCI6NTAuODUxMzgwMjgsXCJsb25naXR1ZGVcIjotMC45Mzg3ODM2MSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkVNU1wifSx7XCJuYW1lXCI6XCJFcHNvbSAoU3VycmV5KVwiLFwibGF0aXR1ZGVcIjo1MS4zMzQzOTI2LFwibG9uZ2l0dWRlXCI6LTAuMjY4Nzc4MzQxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiRVBTXCJ9LHtcIm5hbWVcIjpcIkVwc29tIERvd25zXCIsXCJsYXRpdHVkZVwiOjUxLjMyMzY4NyxcImxvbmdpdHVkZVwiOi0wLjIzODk1NDczOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkVQRFwifSx7XCJuYW1lXCI6XCJFcmlkZ2VcIixcImxhdGl0dWRlXCI6NTEuMDg4OTU3NDIsXCJsb25naXR1ZGVcIjowLjIwMTQ0MjY3MixcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkVSSVwifSx7XCJuYW1lXCI6XCJFd2VsbCBFYXN0XCIsXCJsYXRpdHVkZVwiOjUxLjM0NTI5OTY2LFwibG9uZ2l0dWRlXCI6LTAuMjQxNTI5NDY5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiRVdFXCJ9LHtcIm5hbWVcIjpcIkZhbG1lclwiLFwibGF0aXR1ZGVcIjo1MC44NjIxMjQxNSxcImxvbmdpdHVkZVwiOi0wLjA4NzM4MzYxNixcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkZNUlwifSx7XCJuYW1lXCI6XCJGYXlnYXRlXCIsXCJsYXRpdHVkZVwiOjUxLjA5NTg4Mzc2LFwibG9uZ2l0dWRlXCI6LTAuMjYzMDIwNjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJGR1RcIn0se1wibmFtZVwiOlwiRmlzaGJvdXJuZSAoU3Vzc2V4KVwiLFwibGF0aXR1ZGVcIjo1MC44MzkwMzgzOCxcImxvbmdpdHVkZVwiOi0wLjgxNTA4ODc4MSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkZTQlwifSx7XCJuYW1lXCI6XCJGaXNoZXJzZ2F0ZVwiLFwibGF0aXR1ZGVcIjo1MC44MzQyMjg5OCxcImxvbmdpdHVkZVwiOi0wLjIxOTQxMSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkZTR1wifSx7XCJuYW1lXCI6XCJGb3JkXCIsXCJsYXRpdHVkZVwiOjUwLjgyOTU2MjM3LFwibG9uZ2l0dWRlXCI6LTAuNTc4NjE1NTQyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiRk9EXCJ9LHtcIm5hbWVcIjpcIkdhdHdpY2sgQWlycG9ydFwiLFwibGF0aXR1ZGVcIjo1MS4xNTY0ODUzMixcImxvbmdpdHVkZVwiOi0wLjE2MTA0MDI2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkdUV1wifSx7XCJuYW1lXCI6XCJHaXBzeSBIaWxsXCIsXCJsYXRpdHVkZVwiOjUxLjQyNDQ1NTA5LFwibG9uZ2l0dWRlXCI6LTAuMDgzODMwODMyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiR0lQXCJ9LHtcIm5hbWVcIjpcIkdseW5kZVwiLFwibGF0aXR1ZGVcIjo1MC44NTkxNjY2OCxcImxvbmdpdHVkZVwiOjAuMDcwMDgzNTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJHTFlcIn0se1wibmFtZVwiOlwiR29kc3RvbmVcIixcImxhdGl0dWRlXCI6NTEuMjE4MTUzNTEsXCJsb25naXR1ZGVcIjotMC4wNTAwODAyNTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJHRE5cIn0se1wibmFtZVwiOlwiR29yaW5nLWJ5LVNlYVwiLFwibGF0aXR1ZGVcIjo1MC44MTc3MTU3LFwibG9uZ2l0dWRlXCI6LTAuNDMzMDc2OTI0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiR0JTXCJ9LHtcIm5hbWVcIjpcIkhhY2ticmlkZ2VcIixcImxhdGl0dWRlXCI6NTEuMzc3ODcyNjIsXCJsb25naXR1ZGVcIjotMC4xNTM5MDQ3MjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJIQ0JcIn0se1wibmFtZVwiOlwiSGFtIFN0cmVldFwiLFwibGF0aXR1ZGVcIjo1MS4wNjgzNzc0LFwibG9uZ2l0dWRlXCI6MC44NTQ1MjE2MTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJITVRcIn0se1wibmFtZVwiOlwiSGFtcGRlbiBQYXJrIChTdXNzZXgpXCIsXCJsYXRpdHVkZVwiOjUwLjc5NjM5ODI4LFwibG9uZ2l0dWRlXCI6MC4yNzkzNjc0OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkhNRFwifSx7XCJuYW1lXCI6XCJIYXNzb2Nrc1wiLFwibGF0aXR1ZGVcIjo1MC45MjQ2MTI4MixcImxvbmdpdHVkZVwiOi0wLjE0NTk1MjQyMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkhTS1wifSx7XCJuYW1lXCI6XCJIYXl3YXJkcyBIZWF0aFwiLFwibGF0aXR1ZGVcIjo1MS4wMDUyNTI5NCxcImxvbmdpdHVkZVwiOi0wLjEwNTMwNjc2NSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkhIRVwifSx7XCJuYW1lXCI6XCJIZXZlclwiLFwibGF0aXR1ZGVcIjo1MS4xODE0MDU4MSxcImxvbmdpdHVkZVwiOjAuMDk1MDc3OSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkhFVlwifSx7XCJuYW1lXCI6XCJIb2xtd29vZFwiLFwibGF0aXR1ZGVcIjo1MS4xODA5OTc1NCxcImxvbmdpdHVkZVwiOi0wLjMyMTA5MDkyOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkhMTVwifSx7XCJuYW1lXCI6XCJIb3JsZXlcIixcImxhdGl0dWRlXCI6NTEuMTY4NzcwMjUsXCJsb25naXR1ZGVcIjotMC4xNjEwNTIyMzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJIT1JcIn0se1wibmFtZVwiOlwiSG9yc2hhbVwiLFwibGF0aXR1ZGVcIjo1MS4wNjYwNTcxOCxcImxvbmdpdHVkZVwiOi0wLjMxOTI1ODkxNyxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkhSSFwifSx7XCJuYW1lXCI6XCJIb3ZlXCIsXCJsYXRpdHVkZVwiOjUwLjgzNTIxMDksXCJsb25naXR1ZGVcIjotMC4xNzA2ODc5OTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJIT1ZcIn0se1wibmFtZVwiOlwiSHVyc3QgR3JlZW5cIixcImxhdGl0dWRlXCI6NTEuMjQ0NDI3MzUsXCJsb25naXR1ZGVcIjowLjAwMzk0NTc0OSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkhVUlwifSx7XCJuYW1lXCI6XCJJZmllbGRcIixcImxhdGl0dWRlXCI6NTEuMTE1NjE2NDYsXCJsb25naXR1ZGVcIjotMC4yMTQ3NzI2MzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJJRklcIn0se1wibmFtZVwiOlwiS2VubGV5XCIsXCJsYXRpdHVkZVwiOjUxLjMyNDYwMTA1LFwibG9uZ2l0dWRlXCI6LTAuMTAxMjE1NzM1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiS0xZXCJ9LHtcIm5hbWVcIjpcIktpbmdzd29vZFwiLFwibGF0aXR1ZGVcIjo1MS4yOTQ4NjE0NCxcImxvbmdpdHVkZVwiOi0wLjIxMTQ1NjYzOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIktORFwifSx7XCJuYW1lXCI6XCJMYW5jaW5nXCIsXCJsYXRpdHVkZVwiOjUwLjgyNzA3Nzc1LFwibG9uZ2l0dWRlXCI6LTAuMzIzMDk5OTU2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiTEFDXCJ9LHtcIm5hbWVcIjpcIkxlYXRoZXJoZWFkXCIsXCJsYXRpdHVkZVwiOjUxLjI5ODc1MTQ3LFwibG9uZ2l0dWRlXCI6LTAuMzMzMDY0ODg4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiTEhEXCJ9LHtcIm5hbWVcIjpcIkxlaWdoIChLZW50KVwiLFwibGF0aXR1ZGVcIjo1MS4xOTM4OTU1OSxcImxvbmdpdHVkZVwiOjAuMjEwNTA2Nzk5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiTElIXCJ9LHtcIm5hbWVcIjpcIkxld2VzXCIsXCJsYXRpdHVkZVwiOjUwLjg3MDYyNzExLFwibG9uZ2l0dWRlXCI6MC4wMTEzMzUyMTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJMV1NcIn0se1wibmFtZVwiOlwiTGluZ2ZpZWxkXCIsXCJsYXRpdHVkZVwiOjUxLjE3NjQ0NzU1LFwibG9uZ2l0dWRlXCI6LTAuMDA3MTU4OTQxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiTEZEXCJ9LHtcIm5hbWVcIjpcIkxpdHRsZWhhbXB0b25cIixcImxhdGl0dWRlXCI6NTAuODEwMTAzNDQsXCJsb25naXR1ZGVcIjotMC41NDU5OTE4MTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJMSVRcIn0se1wibmFtZVwiOlwiTGl0dGxlaGF2ZW5cIixcImxhdGl0dWRlXCI6NTEuMDc5NzQzOCxcImxvbmdpdHVkZVwiOi0wLjMwNzk2OTU1NSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIkxWTlwifSx7XCJuYW1lXCI6XCJMb25kb24gUm9hZCAoQnJpZ2h0b24pXCIsXCJsYXRpdHVkZVwiOjUwLjgzNjY1NzQyLFwibG9uZ2l0dWRlXCI6LTAuMTM2NTAxOTc3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiTFJCXCJ9LHtcIm5hbWVcIjpcIk1lcnN0aGFtXCIsXCJsYXRpdHVkZVwiOjUxLjI2NDE1MTgxLFwibG9uZ2l0dWRlXCI6LTAuMTUwMjIzNDUxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiTUhNXCJ9LHtcIm5hbWVcIjpcIk1pdGNoYW0gRWFzdGZpZWxkc1wiLFwibGF0aXR1ZGVcIjo1MS40MDg0MDQ1NyxcImxvbmdpdHVkZVwiOi0wLjE1Mzk2OTI0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiTVRDXCJ9LHtcIm5hbWVcIjpcIk1pdGNoYW0gSnVuY3Rpb25cIixcImxhdGl0dWRlXCI6NTEuMzkyOTQ0NjEsXCJsb25naXR1ZGVcIjotMC4xNTczMjI4NjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJNSUpcIn0se1wibmFtZVwiOlwiTW91bHNlY29vbWJcIixcImxhdGl0dWRlXCI6NTAuODQ2NzE2NzMsXCJsb25naXR1ZGVcIjotMC4xMTg4NDA4OTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJNQ0JcIn0se1wibmFtZVwiOlwiTmV3aGF2ZW4gSGFyYm91clwiLFwibGF0aXR1ZGVcIjo1MC43ODk3ODQ0MSxcImxvbmdpdHVkZVwiOjAuMDU0OTk4Mzc5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiTlZIXCJ9LHtcIm5hbWVcIjpcIk5ld2hhdmVuIFRvd25cIixcImxhdGl0dWRlXCI6NTAuNzk0ODQ4ODUsXCJsb25naXR1ZGVcIjowLjA1NDk1MDkyNSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIk5WTlwifSx7XCJuYW1lXCI6XCJOb3JidXJ5XCIsXCJsYXRpdHVkZVwiOjUxLjQxMTQ0NzQ5LFwibG9uZ2l0dWRlXCI6LTAuMTIxOTIyMTg5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiTlJCXCJ9LHtcIm5hbWVcIjpcIk5vcm1hbnMgQmF5XCIsXCJsYXRpdHVkZVwiOjUwLjgyNjA5Njc1LFwibG9uZ2l0dWRlXCI6MC4zODk0NzY1MTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJOU0JcIn0se1wibmFtZVwiOlwiTm9ydGggRHVsd2ljaFwiLFwibGF0aXR1ZGVcIjo1MS40NTQ1MTMxNixcImxvbmdpdHVkZVwiOi0wLjA4NzkxMjM5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIk5ETFwifSx7XCJuYW1lXCI6XCJOdXRib3VybmVcIixcImxhdGl0dWRlXCI6NTAuODQ2MDU2OSxcImxvbmdpdHVkZVwiOi0wLjg4Mjk1MTk0OSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIk5VVFwifSx7XCJuYW1lXCI6XCJOdXRmaWVsZFwiLFwibGF0aXR1ZGVcIjo1MS4yMjY4NjU2NyxcImxvbmdpdHVkZVwiOi0wLjEzMzc1ODMzMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIk5VRlwifSx7XCJuYW1lXCI6XCJPY2tsZXlcIixcImxhdGl0dWRlXCI6NTEuMTUxNTA2NjIsXCJsb25naXR1ZGVcIjotMC4zMzYwMDMwNTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJPTFlcIn0se1wibmFtZVwiOlwiT3JlXCIsXCJsYXRpdHVkZVwiOjUwLjg2Njk0MjM2LFwibG9uZ2l0dWRlXCI6MC41OTE1NzQ1MjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJPUkVcIn0se1wibmFtZVwiOlwiT3h0ZWRcIixcImxhdGl0dWRlXCI6NTEuMjU3OTA1MDYsXCJsb25naXR1ZGVcIjotMC4wMDQ4MTI5OTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJPWFRcIn0se1wibmFtZVwiOlwiUGVja2hhbSBSeWVcIixcImxhdGl0dWRlXCI6NTEuNDcwMDM3MTQsXCJsb25naXR1ZGVcIjotMC4wNjkzOTQyNDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJQTVJcIn0se1wibmFtZVwiOlwiUGVuc2h1cnN0XCIsXCJsYXRpdHVkZVwiOjUxLjE5NzMzMjUzLFwibG9uZ2l0dWRlXCI6MC4xNzM0ODMwNDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJQSFJcIn0se1wibmFtZVwiOlwiUGV2ZW5zZXkgJiBXZXN0aGFtXCIsXCJsYXRpdHVkZVwiOjUwLjgxNTc5MTk3LFwibG9uZ2l0dWRlXCI6MC4zMjQ4MjA0ODUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJQRVZcIn0se1wibmFtZVwiOlwiUGV2ZW5zZXkgQmF5XCIsXCJsYXRpdHVkZVwiOjUwLjgxNzQ1MzQ1LFwibG9uZ2l0dWRlXCI6MC4zNDI5MjAxNjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJQRUJcIn0se1wibmFtZVwiOlwiUGx1bXB0b25cIixcImxhdGl0dWRlXCI6NTAuOTI4NjYwMSxcImxvbmdpdHVkZVwiOi0wLjA2MDE3ODA1NSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIlBNUFwifSx7XCJuYW1lXCI6XCJQb2xlZ2F0ZVwiLFwibGF0aXR1ZGVcIjo1MC44MjEyMTgyOCxcImxvbmdpdHVkZVwiOjAuMjQ1NzMyMTI0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiUExHXCJ9LHtcIm5hbWVcIjpcIlBvcnRzbGFkZVwiLFwibGF0aXR1ZGVcIjo1MC44MzU2NzY5MyxcImxvbmdpdHVkZVwiOi0wLjIwNTMyMzg1OSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIlBMRFwifSx7XCJuYW1lXCI6XCJQcmVzdG9uIFBhcmtcIixcImxhdGl0dWRlXCI6NTAuODQ1OTM4NzgsXCJsb25naXR1ZGVcIjotMC4xNTUxNjc3NDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJQUlBcIn0se1wibmFtZVwiOlwiUHVsYm9yb3VnaFwiLFwibGF0aXR1ZGVcIjo1MC45NTczNDg1MixcImxvbmdpdHVkZVwiOi0wLjUxNjU1MzM3NixcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIlBVTFwifSx7XCJuYW1lXCI6XCJQdXJsZXlcIixcImxhdGl0dWRlXCI6NTEuMzM3MzkxNjIsXCJsb25naXR1ZGVcIjotMC4xMTM2MDg3MDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJQVVJcIn0se1wibmFtZVwiOlwiUHVybGV5IE9ha3NcIixcImxhdGl0dWRlXCI6NTEuMzQ3MDQ1MzMsXCJsb25naXR1ZGVcIjotMC4wOTg4NTE5NjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJQVU9cIn0se1wibmFtZVwiOlwiUXVlZW5zIFJvYWQgKFBlY2toYW0pXCIsXCJsYXRpdHVkZVwiOjUxLjQ3NDA2ODU1LFwibG9uZ2l0dWRlXCI6LTAuMDU3NTc0MjMzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiUVJQXCJ9LHtcIm5hbWVcIjpcIlJlZGhpbGxcIixcImxhdGl0dWRlXCI6NTEuMjQwMTk4MDksXCJsb25naXR1ZGVcIjotMC4xNjU4OTgzMTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJSREhcIn0se1wibmFtZVwiOlwiUmVlZGhhbSAoU3VycmV5KVwiLFwibGF0aXR1ZGVcIjo1MS4zMzIxNjA2OSxcImxvbmdpdHVkZVwiOi0wLjEyMzg3MjM1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiUkhNXCJ9LHtcIm5hbWVcIjpcIlJlaWdhdGVcIixcImxhdGl0dWRlXCI6NTEuMjQxOTU1NDksXCJsb25naXR1ZGVcIjotMC4yMDM4MjQ1NDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJSRUlcIn0se1wibmFtZVwiOlwiUmlkZGxlc2Rvd25cIixcImxhdGl0dWRlXCI6NTEuMzMyNjY2MTEsXCJsb25naXR1ZGVcIjotMC4wOTk0NDY5MjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJSRERcIn0se1wibmFtZVwiOlwiUnllIChTdXNzZXgpXCIsXCJsYXRpdHVkZVwiOjUwLjk1MjM2NjAyLFwibG9uZ2l0dWRlXCI6MC43MzA3MDYxNTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJSWUVcIn0se1wibmFtZVwiOlwiU2FsZm9yZHMgKFN1cnJleSlcIixcImxhdGl0dWRlXCI6NTEuMjAxNzQzODcsXCJsb25naXR1ZGVcIjotMC4xNjI0ODc2NzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJTQUZcIn0se1wibmFtZVwiOlwiU2FuZGVyc3RlYWRcIixcImxhdGl0dWRlXCI6NTEuMzQ4MjgzMTMsXCJsb25naXR1ZGVcIjotMC4wOTM2NzM5NzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJTTlJcIn0se1wibmFtZVwiOlwiU2VhZm9yZCAoU3Vzc2V4KVwiLFwibGF0aXR1ZGVcIjo1MC43NzI4MzU4MixcImxvbmdpdHVkZVwiOjAuMTAwMTQwMjI3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiU0VGXCJ9LHtcIm5hbWVcIjpcIlNlbGh1cnN0XCIsXCJsYXRpdHVkZVwiOjUxLjM5MTY5Nzk3LFwibG9uZ2l0dWRlXCI6LTAuMDg3OTQ1NDc0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiU1JTXCJ9LHtcIm5hbWVcIjpcIlNob3JlaGFtLWJ5LVNlYVwiLFwibGF0aXR1ZGVcIjo1MC44MzQ0MjE5MixcImxvbmdpdHVkZVwiOi0wLjI3MTcwOTcxOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIlNTRVwifSx7XCJuYW1lXCI6XCJTb3V0aCBCZXJtb25kc2V5XCIsXCJsYXRpdHVkZVwiOjUxLjQ4ODEzOTI4LFwibG9uZ2l0dWRlXCI6LTAuMDU0NjcxNDMyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiU0JNXCJ9LHtcIm5hbWVcIjpcIlNvdXRoIENyb3lkb25cIixcImxhdGl0dWRlXCI6NTEuMzYyOTY1MTQsXCJsb25naXR1ZGVcIjotMC4wOTM0NTIxNTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJTQ1lcIn0se1wibmFtZVwiOlwiU291dGhib3VybmVcIixcImxhdGl0dWRlXCI6NTAuODQ4MjY0NTMsXCJsb25naXR1ZGVcIjotMC45MDgxMTM4NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIlNPQlwifSx7XCJuYW1lXCI6XCJTb3V0aGVhc2VcIixcImxhdGl0dWRlXCI6NTAuODMxMzQ5MTMsXCJsb25naXR1ZGVcIjowLjAzMDY1MDEzNyxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIlNFRVwifSx7XCJuYW1lXCI6XCJTb3V0aHdpY2tcIixcImxhdGl0dWRlXCI6NTAuODMyNDgyNjUsXCJsb25naXR1ZGVcIjotMC4yMzcwNzMwNzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJTV0tcIn0se1wibmFtZVwiOlwiU3RyZWF0aGFtIChHcmVhdGVyIExvbmRvbilcIixcImxhdGl0dWRlXCI6NTEuNDI1ODEwMTUsXCJsb25naXR1ZGVcIjotMC4xMzE1NDY1ODMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJTVEVcIn0se1wibmFtZVwiOlwiU3RyZWF0aGFtIENvbW1vblwiLFwibGF0aXR1ZGVcIjo1MS40MTg2ODkxNyxcImxvbmdpdHVkZVwiOi0wLjEzNjE1MTgzMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIlNSQ1wifSx7XCJuYW1lXCI6XCJTdHJlYXRoYW0gSGlsbFwiLFwibGF0aXR1ZGVcIjo1MS40MzgzNDYxLFwibG9uZ2l0dWRlXCI6LTAuMTI4MTU3MjA5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiU1JIXCJ9LHtcIm5hbWVcIjpcIlN1dHRvbiAoU3VycmV5KVwiLFwibGF0aXR1ZGVcIjo1MS4zNTk1MzM1NixcImxvbmdpdHVkZVwiOi0wLjE5MTIxMzE1MSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIlNVT1wifSx7XCJuYW1lXCI6XCJUYWR3b3J0aFwiLFwibGF0aXR1ZGVcIjo1MS4yOTE2MzYxMSxcImxvbmdpdHVkZVwiOi0wLjIzNTk2NDY3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiVEFEXCJ9LHtcIm5hbWVcIjpcIlRhdHRlbmhhbSBDb3JuZXJcIixcImxhdGl0dWRlXCI6NTEuMzA5MTgyMzcsXCJsb25naXR1ZGVcIjotMC4yNDI2MDkzNzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJUQVRcIn0se1wibmFtZVwiOlwiVGhvcm50b24gSGVhdGhcIixcImxhdGl0dWRlXCI6NTEuMzk5MjM5NixcImxvbmdpdHVkZVwiOi0wLjEwMTAwMTIxMixcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIlRUSFwifSx7XCJuYW1lXCI6XCJUaHJlZSBCcmlkZ2VzXCIsXCJsYXRpdHVkZVwiOjUxLjExNjkxNzIyLFwibG9uZ2l0dWRlXCI6LTAuMTYxMTgzMDU4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiVEJEXCJ9LHtcIm5hbWVcIjpcIlRocmVlIE9ha3NcIixcImxhdGl0dWRlXCI6NTAuOTAwODg3MjMsXCJsb25naXR1ZGVcIjowLjYxMzM3MzA5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiVE9LXCJ9LHtcIm5hbWVcIjpcIlR1bHNlIEhpbGxcIixcImxhdGl0dWRlXCI6NTEuNDM5NzczNzYsXCJsb25naXR1ZGVcIjotMC4xMDUwNzU5MDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJUVUhcIn0se1wibmFtZVwiOlwiVWNrZmllbGRcIixcImxhdGl0dWRlXCI6NTAuOTY4NjcyNTgsXCJsb25naXR1ZGVcIjowLjA5NjQ1Njg5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIlVDS1wifSx7XCJuYW1lXCI6XCJVcHBlciBXYXJsaW5naGFtXCIsXCJsYXRpdHVkZVwiOjUxLjMwODUxMDQ1LFwibG9uZ2l0dWRlXCI6LTAuMDc3OTQ3MjE3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiVVdMXCJ9LHtcIm5hbWVcIjpcIldhZGRvblwiLFwibGF0aXR1ZGVcIjo1MS4zNjczOTgyNixcImxvbmdpdHVkZVwiOi0wLjExNzMzMjEyMSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIldET1wifSx7XCJuYW1lXCI6XCJXYWxsaW5ndG9uXCIsXCJsYXRpdHVkZVwiOjUxLjM2MDM4NjgsXCJsb25naXR1ZGVcIjotMC4xNTA4MzAxNDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJXTFRcIn0se1wibmFtZVwiOlwiV2FuZHN3b3J0aCBDb21tb25cIixcImxhdGl0dWRlXCI6NTEuNDQ2MTg3NixcImxvbmdpdHVkZVwiOi0wLjE2MzM4MzAwOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIldTV1wifSx7XCJuYW1lXCI6XCJXYXJibGluZ3RvblwiLFwibGF0aXR1ZGVcIjo1MC44NTM0MzM0LFwibG9uZ2l0dWRlXCI6LTAuOTY3MTUwODg4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiV0JMXCJ9LHtcIm5hbWVcIjpcIldhcm5oYW1cIixcImxhdGl0dWRlXCI6NTEuMDkyODk1MDgsXCJsb25naXR1ZGVcIjotMC4zMjk0NTM3MDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJXTkhcIn0se1wibmFtZVwiOlwiV2VzdCBOb3J3b29kXCIsXCJsYXRpdHVkZVwiOjUxLjQzMTgwMzUzLFwibG9uZ2l0dWRlXCI6LTAuMTAzODA4ODE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiV05XXCJ9LHtcIm5hbWVcIjpcIldlc3QgV29ydGhpbmdcIixcImxhdGl0dWRlXCI6NTAuODE4MzQ4MzIsXCJsb25naXR1ZGVcIjotMC4zOTI5Nzc4OTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJXV09cIn0se1wibmFtZVwiOlwiV2h5dGVsZWFmZVwiLFwibGF0aXR1ZGVcIjo1MS4zMDk5NTY4MixcImxvbmdpdHVkZVwiOi0wLjA4MTE0MzkyOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU05cIixcImNyc0NvZGVcIjpcIldIWVwifSx7XCJuYW1lXCI6XCJXaHl0ZWxlYWZlIFNvdXRoXCIsXCJsYXRpdHVkZVwiOjUxLjMwMzU1MjYsXCJsb25naXR1ZGVcIjotMC4wNzY2OTEwMTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJXSFNcIn0se1wibmFtZVwiOlwiV2luY2hlbHNlYVwiLFwibGF0aXR1ZGVcIjo1MC45MzM3NjEzMyxcImxvbmdpdHVkZVwiOjAuNzAyMjcxODE0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiV1NFXCJ9LHtcIm5hbWVcIjpcIldpdmVsc2ZpZWxkXCIsXCJsYXRpdHVkZVwiOjUwLjk2Mzc4MjkzLFwibG9uZ2l0dWRlXCI6LTAuMTIwODM3NTc3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiV1ZGXCJ9LHtcIm5hbWVcIjpcIldvbGRpbmdoYW1cIixcImxhdGl0dWRlXCI6NTEuMjkwMTU1OTcsXCJsb25naXR1ZGVcIjotMC4wNTE4NjQ1NjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJXT0hcIn0se1wibmFtZVwiOlwiV29vZG1hbnN0ZXJuZVwiLFwibGF0aXR1ZGVcIjo1MS4zMTkwMTkyLFwibG9uZ2l0dWRlXCI6LTAuMTU0MjU5NjcyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTTlwiLFwiY3JzQ29kZVwiOlwiV01FXCJ9LHtcIm5hbWVcIjpcIldvcnRoaW5nXCIsXCJsYXRpdHVkZVwiOjUwLjgxODQ5MzIsXCJsb25naXR1ZGVcIjotMC4zNzYxNjM2ODYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNOXCIsXCJjcnNDb2RlXCI6XCJXUkhcIn0se1wibmFtZVwiOlwiQWJlcmRlZW5cIixcImxhdGl0dWRlXCI6NTcuMTQzMDQ4MjUsXCJsb25naXR1ZGVcIjotMi4wOTc0ODA0OTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJBQkRcIn0se1wibmFtZVwiOlwiQWJlcmRvdXJcIixcImxhdGl0dWRlXCI6NTYuMDU0NTgwNDQsXCJsb25naXR1ZGVcIjotMy4zMDA1NTY0NDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJBVVJcIn0se1wibmFtZVwiOlwiQWNoYW5hbHRcIixcImxhdGl0dWRlXCI6NTcuNjA5ODEzMzEsXCJsb25naXR1ZGVcIjotNC45MTQyMTY2NzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJBQVRcIn0se1wibmFtZVwiOlwiQWNobmFzaGVlblwiLFwibGF0aXR1ZGVcIjo1Ny41NzkxMDA4MixcImxvbmdpdHVkZVwiOi01LjA3MjM2NzU0NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkFDTlwifSx7XCJuYW1lXCI6XCJBY2huYXNoZWxsYWNoXCIsXCJsYXRpdHVkZVwiOjU3LjQ4MjA1NDgsXCJsb25naXR1ZGVcIjotNS4zMzMwNjI5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkFDSFwifSx7XCJuYW1lXCI6XCJBZGRpZXdlbGxcIixcImxhdGl0dWRlXCI6NTUuODQzNDAxMjMsXCJsb25naXR1ZGVcIjotMy42MDY1MTcyNjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJBRFdcIn0se1wibmFtZVwiOlwiQWlyYmxlc1wiLFwibGF0aXR1ZGVcIjo1NS43ODI4MjQ3NCxcImxvbmdpdHVkZVwiOi0zLjk5NDE3ODczOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkFJUlwifSx7XCJuYW1lXCI6XCJBaXJkcmllXCIsXCJsYXRpdHVkZVwiOjU1Ljg2Mzk3Mjc0LFwibG9uZ2l0dWRlXCI6LTMuOTgyODk3NDczLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQURSXCJ9LHtcIm5hbWVcIjpcIkFsZXhhbmRyYSBQYXJhZGVcIixcImxhdGl0dWRlXCI6NTUuODYzNjYzNjIsXCJsb25naXR1ZGVcIjotNC4yMTE0MTkzNTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJBWFBcIn0se1wibmFtZVwiOlwiQWxleGFuZHJpYVwiLFwibGF0aXR1ZGVcIjo1NS45ODUwNzMyMSxcImxvbmdpdHVkZVwiOi00LjU3NzQ2OTExOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkFMWFwifSx7XCJuYW1lXCI6XCJBbGxvYVwiLFwibGF0aXR1ZGVcIjo1Ni4xMTc3ODA3OSxcImxvbmdpdHVkZVwiOi0zLjc5MDA0OTM4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQUxPXCJ9LHtcIm5hbWVcIjpcIkFsbmVzc1wiLFwibGF0aXR1ZGVcIjo1Ny42OTQzNzc4NyxcImxvbmdpdHVkZVwiOi00LjI0OTcyNTU0MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkFTU1wifSx7XCJuYW1lXCI6XCJBbHRuYWJyZWFjXCIsXCJsYXRpdHVkZVwiOjU4LjM4ODMyNTg1LFwibG9uZ2l0dWRlXCI6LTMuNzA1MjY4MTU4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQUJDXCJ9LHtcIm5hbWVcIjpcIkFuZGVyc3RvblwiLFwibGF0aXR1ZGVcIjo1NS44NTk4NjQ3NixcImxvbmdpdHVkZVwiOi00LjI3MTkyOTk0NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkFORFwifSx7XCJuYW1lXCI6XCJBbm5hblwiLFwibGF0aXR1ZGVcIjo1NC45ODM4Mzc4NixcImxvbmdpdHVkZVwiOi0zLjI2MjU4NDMwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkFOTlwifSx7XCJuYW1lXCI6XCJBbm5pZXNsYW5kXCIsXCJsYXRpdHVkZVwiOjU1Ljg4OTQ5NTM2LFwibG9uZ2l0dWRlXCI6LTQuMzIxNjQwNzY5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQU5MXCJ9LHtcIm5hbWVcIjpcIkFyYnJvYXRoXCIsXCJsYXRpdHVkZVwiOjU2LjU1OTU2NjA2LFwibG9uZ2l0dWRlXCI6LTIuNTg4OTM2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkFSQlwifSx7XCJuYW1lXCI6XCJBcmRnYXlcIixcImxhdGl0dWRlXCI6NTcuODgxMDEwNTQsXCJsb25naXR1ZGVcIjotNC4zNjI1NzgwNzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJBUkRcIn0se1wibmFtZVwiOlwiQXJkbHVpXCIsXCJsYXRpdHVkZVwiOjU2LjMwMTk0ODEsXCJsb25naXR1ZGVcIjotNC43MjE2NDI4MjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJBVUlcIn0se1wibmFtZVwiOlwiQXJkcm9zc2FuIEhhcmJvdXJcIixcImxhdGl0dWRlXCI6NTUuNjM5ODYxODUsXCJsb25naXR1ZGVcIjotNC44MjExMDUxNTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJBRFNcIn0se1wibmFtZVwiOlwiQXJkcm9zc2FuIFNvdXRoIEJlYWNoXCIsXCJsYXRpdHVkZVwiOjU1LjY0MTQwNTgsXCJsb25naXR1ZGVcIjotNC44MDEyMDU2MDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJBU0JcIn0se1wibmFtZVwiOlwiQXJkcm9zc2FuIFRvd25cIixcImxhdGl0dWRlXCI6NTUuNjM5Njk2MDcsXCJsb25naXR1ZGVcIjotNC44MTI2Njk3NDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJBRE5cIn0se1wibmFtZVwiOlwiQXJneWxlIFN0cmVldFwiLFwibGF0aXR1ZGVcIjo1NS44NTczMDc1NCxcImxvbmdpdHVkZVwiOi00LjI1MDY3MTQ5NSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkFHU1wifSx7XCJuYW1lXCI6XCJBcmlzYWlnXCIsXCJsYXRpdHVkZVwiOjU2LjkxMjUyMTQsXCJsb25naXR1ZGVcIjotNS44MzkwNzEzOTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJBUkdcIn0se1wibmFtZVwiOlwiQXJtYWRhbGUgKFdlc3QgTG90aGlhbilcIixcImxhdGl0dWRlXCI6NTUuODg2MzksXCJsb25naXR1ZGVcIjotMy42ODUwNDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJBUk1cIn0se1wibmFtZVwiOlwiQXJyb2NoYXIgJiBUYXJiZXRcIixcImxhdGl0dWRlXCI6NTYuMjAzOTU4NSxcImxvbmdpdHVkZVwiOi00LjcyMjc1Njg1NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkFSVFwifSx7XCJuYW1lXCI6XCJBc2hmaWVsZFwiLFwibGF0aXR1ZGVcIjo1NS44ODg5MDgwOCxcImxvbmdpdHVkZVwiOi00LjI0OTIwNjM5MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkFTRlwifSx7XCJuYW1lXCI6XCJBdHRhZGFsZVwiLFwibGF0aXR1ZGVcIjo1Ny4zOTQ3NjU1NixcImxvbmdpdHVkZVwiOi01LjQ1NjQ4MTA3NSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkFUVFwifSx7XCJuYW1lXCI6XCJBdWNoaW5sZWNrXCIsXCJsYXRpdHVkZVwiOjU1LjQ3MDI2NTU0LFwibG9uZ2l0dWRlXCI6LTQuMjk1MzQ2NjMxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQVVLXCJ9LHtcIm5hbWVcIjpcIkF2aWVtb3JlXCIsXCJsYXRpdHVkZVwiOjU3LjE4OTA1NDAxLFwibG9uZ2l0dWRlXCI6LTMuODI4MzMzOTc0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQVZNXCJ9LHtcIm5hbWVcIjpcIkF5clwiLFwibGF0aXR1ZGVcIjo1NS40NTgyMDQzOSxcImxvbmdpdHVkZVwiOi00LjYyNjgyMDQ4MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkFZUlwifSx7XCJuYW1lXCI6XCJCYWlsbGllc3RvblwiLFwibGF0aXR1ZGVcIjo1NS44NDQ3MDU0MyxcImxvbmdpdHVkZVwiOi00LjExNDQ5Nzc5MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJJT1wifSx7XCJuYW1lXCI6XCJCYWxsb2NoXCIsXCJsYXRpdHVkZVwiOjU2LjAwMjkxNTI5LFwibG9uZ2l0dWRlXCI6LTQuNTgzNDY5NzMyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQkhDXCJ9LHtcIm5hbWVcIjpcIkJhbG1vc3NpZVwiLFwibGF0aXR1ZGVcIjo1Ni40NzQ1NTYxMSxcImxvbmdpdHVkZVwiOi0yLjgzODk1MjE3NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJTSVwifSx7XCJuYW1lXCI6XCJCYW5hdmllXCIsXCJsYXRpdHVkZVwiOjU2Ljg0MzI4ODI4LFwibG9uZ2l0dWRlXCI6LTUuMDk1NDE2MjI4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQk5WXCJ9LHtcIm5hbWVcIjpcIkJhcmFzc2llXCIsXCJsYXRpdHVkZVwiOjU1LjU2MTA0NTcsXCJsb25naXR1ZGVcIjotNC42NTExMjkwMDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCU1NcIn0se1wibmFtZVwiOlwiQmFyZ2VkZGllXCIsXCJsYXRpdHVkZVwiOjU1Ljg1MTcyNDEsXCJsb25naXR1ZGVcIjotNC4wNzE3NDE4NTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCR0lcIn0se1wibmFtZVwiOlwiQmFybmhpbGxcIixcImxhdGl0dWRlXCI6NTUuODc3ODI3NjEsXCJsb25naXR1ZGVcIjotNC4yMjM0MTYzMTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCTkxcIn0se1wibmFtZVwiOlwiQmFycmhlYWRcIixcImxhdGl0dWRlXCI6NTUuODAzNzM3MTIsXCJsb25naXR1ZGVcIjotNC4zOTcyODAyOTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCUlJcIn0se1wibmFtZVwiOlwiQmFycmhpbGxcIixcImxhdGl0dWRlXCI6NTUuMDk2OTk2NSxcImxvbmdpdHVkZVwiOi00Ljc4MTc3OTU2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJSTFwifSx7XCJuYW1lXCI6XCJCYXJyeSBMaW5rc1wiLFwibGF0aXR1ZGVcIjo1Ni40OTMxMzk3MSxcImxvbmdpdHVkZVwiOi0yLjc0NTQzNTM1NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJZTFwifSx7XCJuYW1lXCI6XCJCYXRoZ2F0ZVwiLFwibGF0aXR1ZGVcIjo1NS44OTkxMTIwOCxcImxvbmdpdHVkZVwiOi0zLjY0MDk2ODU1MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJIR1wifSx7XCJuYW1lXCI6XCJCZWFyc2RlblwiLFwibGF0aXR1ZGVcIjo1NS45MTcxNDQ4MixcImxvbmdpdHVkZVwiOi00LjMzMjg5NjQ5NixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJSTlwifSx7XCJuYW1lXCI6XCJCZWFzZGFsZVwiLFwibGF0aXR1ZGVcIjo1Ni44OTk1MjgzLFwibG9uZ2l0dWRlXCI6LTUuNzYzNzkzMTg4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQlNMXCJ9LHtcIm5hbWVcIjpcIkJlYXVseVwiLFwibGF0aXR1ZGVcIjo1Ny40NzgyMDUzNyxcImxvbmdpdHVkZVwiOi00LjQ2OTk0NTY4MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJFTFwifSx7XCJuYW1lXCI6XCJCZWxsZ3JvdmVcIixcImxhdGl0dWRlXCI6NTUuODU3MTE5NjYsXCJsb25naXR1ZGVcIjotNC4yMjU0Mjg5ODIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCTEdcIn0se1wibmFtZVwiOlwiQmVsbHNoaWxsXCIsXCJsYXRpdHVkZVwiOjU1LjgxNjU1MDQ1LFwibG9uZ2l0dWRlXCI6LTQuMDI1MTc4MDI5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQkxIXCJ9LHtcIm5hbWVcIjpcIkJpc2hvcGJyaWdnc1wiLFwibGF0aXR1ZGVcIjo1NS45MDM4NjQ3NCxcImxvbmdpdHVkZVwiOi00LjIyNDkwNjIzOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJCR1wifSx7XCJuYW1lXCI6XCJCaXNob3B0b24gKFN0cmF0aGNseWRlKVwiLFwibGF0aXR1ZGVcIjo1NS45MDIxNDgzLFwibG9uZ2l0dWRlXCI6LTQuNTAxNTY3MDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCUFRcIn0se1wibmFtZVwiOlwiQmxhY2tyaWRnZVwiLFwibGF0aXR1ZGVcIjo1NS44ODM2NzksXCJsb25naXR1ZGVcIjotMy43NTA0ODMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCS1JcIn0se1wibmFtZVwiOlwiQmxhaXIgQXRob2xsXCIsXCJsYXRpdHVkZVwiOjU2Ljc2NTUyOTQsXCJsb25naXR1ZGVcIjotMy44NTAyMTc1NTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCTEFcIn0se1wibmFtZVwiOlwiQmxhaXJoaWxsXCIsXCJsYXRpdHVkZVwiOjU1Ljg2NjU4OTIzLFwibG9uZ2l0dWRlXCI6LTQuMDQyMTY2MjA4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQkFJXCJ9LHtcIm5hbWVcIjpcIkJsYW50eXJlXCIsXCJsYXRpdHVkZVwiOjU1Ljc5NzU1MTgxLFwibG9uZ2l0dWRlXCI6LTQuMDg2NDEzNjc4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQkxUXCJ9LHtcIm5hbWVcIjpcIkJvZ3N0b25cIixcImxhdGl0dWRlXCI6NTUuOTM3MDMwNTQsXCJsb25naXR1ZGVcIjotNC43MTEzODk5ODMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCR1NcIn0se1wibmFtZVwiOlwiQm93bGluZ1wiLFwibGF0aXR1ZGVcIjo1NS45MzEwNjc3MyxcImxvbmdpdHVkZVwiOi00LjQ5MzgyNDQyNyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJXR1wifSx7XCJuYW1lXCI6XCJCcmFuY2h0b25cIixcImxhdGl0dWRlXCI6NTUuOTQwNTg0OTEsXCJsb25naXR1ZGVcIjotNC44MDM1Mzk2OTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCQ05cIn0se1wibmFtZVwiOlwiQnJlaWNoXCIsXCJsYXRpdHVkZVwiOjU1LjgyNzMwNDIxLFwibG9uZ2l0dWRlXCI6LTMuNjY4MTE3ODQxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQlJDXCJ9LHtcIm5hbWVcIjpcIkJyaWRnZSBvZiBBbGxhblwiLFwibGF0aXR1ZGVcIjo1Ni4xNTY2MTkyMyxcImxvbmdpdHVkZVwiOi0zLjk1NzIyNjI4MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJFQVwifSx7XCJuYW1lXCI6XCJCcmlkZ2Ugb2YgT3JjaHlcIixcImxhdGl0dWRlXCI6NTYuNTE1ODQ1ODIsXCJsb25naXR1ZGVcIjotNC43NjI5NzcxOTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCUk9cIn0se1wibmFtZVwiOlwiQnJpZGdldG9uXCIsXCJsYXRpdHVkZVwiOjU1Ljg0ODkyOTEzLFwibG9uZ2l0dWRlXCI6LTQuMjI2MDc5MDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCREdcIn0se1wibmFtZVwiOlwiQnJvcmFcIixcImxhdGl0dWRlXCI6NTguMDEyOTMzMDksXCJsb25naXR1ZGVcIjotMy44NTIyOTUwOTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCUkFcIn0se1wibmFtZVwiOlwiQnJvdWdodHkgRmVycnlcIixcImxhdGl0dWRlXCI6NTYuNDY3MTUwNixcImxvbmdpdHVkZVwiOi0yLjg3MzE0OTcxNSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJZRlwifSx7XCJuYW1lXCI6XCJCcnVuc3RhbmVcIixcImxhdGl0dWRlXCI6NTUuOTQyNTA0NTksXCJsb25naXR1ZGVcIjotMy4xMDA5Nzc4NDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJCU1VcIn0se1wibmFtZVwiOlwiQnVybnNpZGUgKFN0cmF0aGNseWRlKVwiLFwibGF0aXR1ZGVcIjo1NS44MTcwNzAzNSxcImxvbmdpdHVkZVwiOi00LjIwMzk4NjE2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJVSVwifSx7XCJuYW1lXCI6XCJCdXJudGlzbGFuZFwiLFwibGF0aXR1ZGVcIjo1Ni4wNTcwNjkxMSxcImxvbmdpdHVkZVwiOi0zLjIzMzE5MjI1NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJUU1wifSx7XCJuYW1lXCI6XCJCdXNieVwiLFwibGF0aXR1ZGVcIjo1NS43ODAzMzE1NCxcImxvbmdpdHVkZVwiOi00LjI2MjE5NDY1NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkJVU1wifSx7XCJuYW1lXCI6XCJDYWxkZXJjcnVpeFwiLFwibGF0aXR1ZGVcIjo1NS44ODc5MSxcImxvbmdpdHVkZVwiOi0zLjg4OTc4OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNBQ1wifSx7XCJuYW1lXCI6XCJDYW1idXNsYW5nXCIsXCJsYXRpdHVkZVwiOjU1LjgxOTU5OTE1LFwibG9uZ2l0dWRlXCI6LTQuMTcyOTk5NTI3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ0JMXCJ9LHtcIm5hbWVcIjpcIkNhbWVsb25cIixcImxhdGl0dWRlXCI6NTYuMDA2MDgwMDEsXCJsb25naXR1ZGVcIjotMy44MTc2MDA0NjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJDTU9cIn0se1wibmFtZVwiOlwiQ2FyZGVuZGVuXCIsXCJsYXRpdHVkZVwiOjU2LjE0MTI0NjM1LFwibG9uZ2l0dWRlXCI6LTMuMjYxNjM2NjA5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ0REXCJ9LHtcIm5hbWVcIjpcIkNhcmRvbmFsZFwiLFwibGF0aXR1ZGVcIjo1NS44NTI1NTM4MixcImxvbmdpdHVkZVwiOi00LjM0MDY4NzU2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNET1wifSx7XCJuYW1lXCI6XCJDYXJkcm9zc1wiLFwibGF0aXR1ZGVcIjo1NS45NjAzNjgxNyxcImxvbmdpdHVkZVwiOi00LjY1MzA2MDM5NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNEUlwifSx7XCJuYW1lXCI6XCJDYXJmaW5cIixcImxhdGl0dWRlXCI6NTUuODA3MzMxMDcsXCJsb25naXR1ZGVcIjotMy45NTYyNTQ2NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNSRlwifSx7XCJuYW1lXCI6XCJDYXJsdWtlXCIsXCJsYXRpdHVkZVwiOjU1LjczMTI1NDQ4LFwibG9uZ2l0dWRlXCI6LTMuODQ4OTIzMzA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ0xVXCJ9LHtcIm5hbWVcIjpcIkNhcm15bGVcIixcImxhdGl0dWRlXCI6NTUuODM0MzMwMjYsXCJsb25naXR1ZGVcIjotNC4xNTgxNzA3OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNNTFwifSx7XCJuYW1lXCI6XCJDYXJub3VzdGllXCIsXCJsYXRpdHVkZVwiOjU2LjUwMDU1NDMyLFwibG9uZ2l0dWRlXCI6LTIuNzA2NTkyODQ4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ0FOXCJ9LHtcIm5hbWVcIjpcIkNhcm50eW5lXCIsXCJsYXRpdHVkZVwiOjU1Ljg1NTAzNTk4LFwibG9uZ2l0dWRlXCI6LTQuMTc4NjUyNTg3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ0FZXCJ9LHtcIm5hbWVcIjpcIkNhcnJicmlkZ2VcIixcImxhdGl0dWRlXCI6NTcuMjc5NTM4MDUsXCJsb25naXR1ZGVcIjotMy44MjgwMDc0MzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJDQUdcIn0se1wibmFtZVwiOlwiQ2Fyc3RhaXJzXCIsXCJsYXRpdHVkZVwiOjU1LjY5MTAzNDM4LFwibG9uZ2l0dWRlXCI6LTMuNjY4NDY2ODk0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ1JTXCJ9LHtcIm5hbWVcIjpcIkNhcnRzZHlrZVwiLFwibGF0aXR1ZGVcIjo1NS45NDIyMDIyOSxcImxvbmdpdHVkZVwiOi00LjczMTU4MDI1OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNEWVwifSx7XCJuYW1lXCI6XCJDYXRoY2FydFwiLFwibGF0aXR1ZGVcIjo1NS44MTc2NjE1NixcImxvbmdpdHVkZVwiOi00LjI2MDUyOTY3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNDVFwifSx7XCJuYW1lXCI6XCJDaGFyaW5nIENyb3NzIChHbGFzZ293KVwiLFwibGF0aXR1ZGVcIjo1NS44NjQ2NjczNCxcImxvbmdpdHVkZVwiOi00LjI2OTgxMjk3NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNIQ1wifSx7XCJuYW1lXCI6XCJDaGF0ZWxoZXJhdWx0XCIsXCJsYXRpdHVkZVwiOjU1Ljc2NTIwOTg5LFwibG9uZ2l0dWRlXCI6LTQuMDA0NjYxMDk1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ1RFXCJ9LHtcIm5hbWVcIjpcIkNsYXJrc3RvblwiLFwibGF0aXR1ZGVcIjo1NS43ODkzNDA4MixcImxvbmdpdHVkZVwiOi00LjI3NTYzNzk5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ0tTXCJ9LHtcIm5hbWVcIjpcIkNsZWxhbmRcIixcImxhdGl0dWRlXCI6NTUuODA0NjM5NDUsXCJsb25naXR1ZGVcIjotMy45MTAyNDM3MDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJDRUFcIn0se1wibmFtZVwiOlwiQ2x5ZGViYW5rXCIsXCJsYXRpdHVkZVwiOjU1LjkwMDY3Mjg0LFwibG9uZ2l0dWRlXCI6LTQuNDA0MjE4MTQzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ1lLXCJ9LHtcIm5hbWVcIjpcIkNvYXRicmlkZ2UgQ2VudHJhbFwiLFwibGF0aXR1ZGVcIjo1NS44NjMxNTYwOSxcImxvbmdpdHVkZVwiOi00LjAzMjM5NzI5NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNCQ1wifSx7XCJuYW1lXCI6XCJDb2F0YnJpZGdlIFN1bm55c2lkZVwiLFwibGF0aXR1ZGVcIjo1NS44NjY5MDg4MixcImxvbmdpdHVkZVwiOi00LjAyODI3Nzk4OSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNCU1wifSx7XCJuYW1lXCI6XCJDb2F0ZHlrZVwiLFwibGF0aXR1ZGVcIjo1NS44NjQzMzQwMixcImxvbmdpdHVkZVwiOi00LjAwNDk3MDQxNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNPQVwifSx7XCJuYW1lXCI6XCJDb25uZWwgRmVycnlcIixcImxhdGl0dWRlXCI6NTYuNDUyMzMxNDQsXCJsb25naXR1ZGVcIjotNS4zODU0MjcwMDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJDT05cIn0se1wibmFtZVwiOlwiQ29ub24gQnJpZGdlXCIsXCJsYXRpdHVkZVwiOjU3LjU2MTcsXCJsb25naXR1ZGVcIjotNC40NDA0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ0JEXCJ9LHtcIm5hbWVcIjpcIkNvcmtlcmhpbGxcIixcImxhdGl0dWRlXCI6NTUuODM3NDg1ODYsXCJsb25naXR1ZGVcIjotNC4zMzQyODc1MjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJDS0hcIn0se1wibmFtZVwiOlwiQ29ycGFjaFwiLFwibGF0aXR1ZGVcIjo1Ni44NDI4MDY5NSxcImxvbmdpdHVkZVwiOi01LjEyMTk0Nzg4MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNQQVwifSx7XCJuYW1lXCI6XCJDb3Jyb3VyXCIsXCJsYXRpdHVkZVwiOjU2Ljc2MDE5ODk2LFwibG9uZ2l0dWRlXCI6LTQuNjkwNTk3MTA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ1JSXCJ9LHtcIm5hbWVcIjpcIkNvd2RlbmJlYXRoXCIsXCJsYXRpdHVkZVwiOjU2LjExMjA4MTg4LFwibG9uZ2l0dWRlXCI6LTMuMzQzMTgyOTc3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ09XXCJ9LHtcIm5hbWVcIjpcIkNyYWlnZW5kb3JhblwiLFwibGF0aXR1ZGVcIjo1NS45OTQ3Nzc3LFwibG9uZ2l0dWRlXCI6LTQuNzExMjMxNjk3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ0dEXCJ9LHtcIm5hbWVcIjpcIkNyaWFubGFyaWNoXCIsXCJsYXRpdHVkZVwiOjU2LjM5MDQ2MDAxLFwibG9uZ2l0dWRlXCI6LTQuNjE4NDE1NDM2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ05SXCJ9LHtcIm5hbWVcIjpcIkNyb2Z0Zm9vdFwiLFwibGF0aXR1ZGVcIjo1NS44MTgyNDk1OCxcImxvbmdpdHVkZVwiOi00LjIyODMxNzMzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ0ZGXCJ9LHtcIm5hbWVcIjpcIkNyb29rc3RvblwiLFwibGF0aXR1ZGVcIjo1NS44NDIxODM4NyxcImxvbmdpdHVkZVwiOi00LjM2NTk0MTc4NixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNLVFwifSx7XCJuYW1lXCI6XCJDcm9zc2hpbGxcIixcImxhdGl0dWRlXCI6NTUuODMzMjY5ODQsXCJsb25naXR1ZGVcIjotNC4yNTY4MDQxNTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJDT0lcIn0se1wibmFtZVwiOlwiQ3Jvc3NteWxvb2ZcIixcImxhdGl0dWRlXCI6NTUuODMzOTMwMzgsXCJsb25naXR1ZGVcIjotNC4yODQzMTEwMzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJDTVlcIn0se1wibmFtZVwiOlwiQ3JveVwiLFwibGF0aXR1ZGVcIjo1NS45NTU2NjUwNSxcImxvbmdpdHVkZVwiOi00LjAzNTk2MTc1OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkNST1wifSx7XCJuYW1lXCI6XCJDdWxyYWluXCIsXCJsYXRpdHVkZVwiOjU3LjkxOTQ5NDU5LFwibG9uZ2l0dWRlXCI6LTQuNDA0MjgyMDUzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ1VBXCJ9LHtcIm5hbWVcIjpcIkN1bWJlcm5hdWxkXCIsXCJsYXRpdHVkZVwiOjU1Ljk0MjAxMzA0LFwibG9uZ2l0dWRlXCI6LTMuOTgwMzE4NjU4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ1VCXCJ9LHtcIm5hbWVcIjpcIkN1cGFyXCIsXCJsYXRpdHVkZVwiOjU2LjMxNjk3MzUzLFwibG9uZ2l0dWRlXCI6LTMuMDA4NzU4NDMxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiQ1VQXCJ9LHtcIm5hbWVcIjpcIkN1cnJpZWhpbGxcIixcImxhdGl0dWRlXCI6NTUuOTAwNTU4NDksXCJsb25naXR1ZGVcIjotMy4zMTg3NDk2NTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJDVUhcIn0se1wibmFtZVwiOlwiRGFsZ2V0eSBCYXlcIixcImxhdGl0dWRlXCI6NTYuMDQyMDgyOSxcImxvbmdpdHVkZVwiOi0zLjM2NzcxODk4OSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkRBR1wifSx7XCJuYW1lXCI6XCJEYWxtYWxseVwiLFwibGF0aXR1ZGVcIjo1Ni40MDExNzQxNyxcImxvbmdpdHVkZVwiOi00Ljk4MzU0NDE3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkRBTFwifSx7XCJuYW1lXCI6XCJEYWxtYXJub2NrXCIsXCJsYXRpdHVkZVwiOjU1Ljg0MjA3MDExLFwibG9uZ2l0dWRlXCI6LTQuMjE3NzAwMzA5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiREFLXCJ9LHtcIm5hbWVcIjpcIkRhbG1lbnlcIixcImxhdGl0dWRlXCI6NTUuOTg2MzA1MzYsXCJsb25naXR1ZGVcIjotMy4zODE2MTg3NzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJEQU1cIn0se1wibmFtZVwiOlwiRGFsbXVpclwiLFwibGF0aXR1ZGVcIjo1NS45MTE5MTY1NyxcImxvbmdpdHVkZVwiOi00LjQyNjY3ODAxOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkRNUlwifSx7XCJuYW1lXCI6XCJEYWxyZW9jaFwiLFwibGF0aXR1ZGVcIjo1NS45NDc0MDM5NyxcImxvbmdpdHVkZVwiOi00LjU3Nzg0ODEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJETFJcIn0se1wibmFtZVwiOlwiRGFscnlcIixcImxhdGl0dWRlXCI6NTUuNzA2MjExNDMsXCJsb25naXR1ZGVcIjotNC43MTEwNzA4NDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJETFlcIn0se1wibmFtZVwiOlwiRGFsd2hpbm5pZVwiLFwibGF0aXR1ZGVcIjo1Ni45MzUxNTg4MixcImxvbmdpdHVkZVwiOi00LjI0NjE5Nzk2OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkRMV1wifSx7XCJuYW1lXCI6XCJEaW5nd2FsbFwiLFwibGF0aXR1ZGVcIjo1Ny41OTQwNTc1OSxcImxvbmdpdHVkZVwiOi00LjQyMjA2OTEzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiRElOXCJ9LHtcIm5hbWVcIjpcIkRyZW1cIixcImxhdGl0dWRlXCI6NTYuMDA1MTE3NDcsXCJsb25naXR1ZGVcIjotMi43ODYwNDYzMjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJEUk1cIn0se1wibmFtZVwiOlwiRHJ1bWNoYXBlbFwiLFwibGF0aXR1ZGVcIjo1NS45MDQ3OTg5OCxcImxvbmdpdHVkZVwiOi00LjM2Mjg3NDIwNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkRNQ1wifSx7XCJuYW1lXCI6XCJEcnVtZnJvY2hhclwiLFwibGF0aXR1ZGVcIjo1NS45NDEyMzY5LFwibG9uZ2l0dWRlXCI6LTQuNzc0NzU2ODA4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiREZSXCJ9LHtcIm5hbWVcIjpcIkRydW1nZWxsb2NoXCIsXCJsYXRpdHVkZVwiOjU1Ljg2NTgyNjc1LFwibG9uZ2l0dWRlXCI6LTMuOTU0MDgwMzk5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiRFJVXCJ9LHtcIm5hbWVcIjpcIkRydW1yeVwiLFwibGF0aXR1ZGVcIjo1NS45MDQ1Nzg5MSxcImxvbmdpdHVkZVwiOi00LjM4NTQ2ODI1OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkRNWVwifSx7XCJuYW1lXCI6XCJEdWlyaW5pc2hcIixcImxhdGl0dWRlXCI6NTcuMzE5Mzg0NDQsXCJsb25naXR1ZGVcIjotNS42OTIwMDkwNTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJEUk5cIn0se1wibmFtZVwiOlwiRHVrZSBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTUuODU4NDIxNjgsXCJsb25naXR1ZGVcIjotNC4yMTMwMzkwNjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJEU1RcIn0se1wibmFtZVwiOlwiRHVtYmFydG9uIENlbnRyYWxcIixcImxhdGl0dWRlXCI6NTUuOTQ2NjQzODEsXCJsb25naXR1ZGVcIjotNC41NjY5MDU0MjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJEQkNcIn0se1wibmFtZVwiOlwiRHVtYmFydG9uIEVhc3RcIixcImxhdGl0dWRlXCI6NTUuOTQyMjM1NjYsXCJsb25naXR1ZGVcIjotNC41NTQxMjEyMjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJEQkVcIn0se1wibmFtZVwiOlwiRHVtYnJlY2tcIixcImxhdGl0dWRlXCI6NTUuODQ1MDE3MDMsXCJsb25naXR1ZGVcIjotNC4zMDA5MzYyMjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJEVU1cIn0se1wibmFtZVwiOlwiRHVtZnJpZXNcIixcImxhdGl0dWRlXCI6NTUuMDcyNTUzMjEsXCJsb25naXR1ZGVcIjotMy42MDQzMDAzMjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJETUZcIn0se1wibmFtZVwiOlwiRHVuYmFyXCIsXCJsYXRpdHVkZVwiOjU1Ljk5ODI4NzY4LFwibG9uZ2l0dWRlXCI6LTIuNTEzMzUyOTg4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiRFVOXCJ9LHtcIm5hbWVcIjpcIkR1bmJsYW5lXCIsXCJsYXRpdHVkZVwiOjU2LjE4NTg3NDYzLFwibG9uZ2l0dWRlXCI6LTMuOTY1NDgzNzkyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiREJMXCJ9LHtcIm5hbWVcIjpcIkR1bmNyYWlnXCIsXCJsYXRpdHVkZVwiOjU3LjMzNzA4Mzk5LFwibG9uZ2l0dWRlXCI6LTUuNjM2OTI1NDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJEQ0dcIn0se1wibmFtZVwiOlwiRHVuZGVlXCIsXCJsYXRpdHVkZVwiOjU2LjQ1NjQ3NjE4LFwibG9uZ2l0dWRlXCI6LTIuOTcxMjA0ODA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiREVFXCJ9LHtcIm5hbWVcIjpcIkR1bmZlcm1saW5lIFF1ZWVuIE1hcmdhcmV0XCIsXCJsYXRpdHVkZVwiOjU2LjA4MDU2Mzk3LFwibG9uZ2l0dWRlXCI6LTMuNDIxNDY3NDMxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiREZMXCJ9LHtcIm5hbWVcIjpcIkR1bmZlcm1saW5lIFRvd25cIixcImxhdGl0dWRlXCI6NTYuMDY4MTc5MjQsXCJsb25naXR1ZGVcIjotMy40NTI1MjkyODgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJERkVcIn0se1wibmFtZVwiOlwiRHVua2VsZCAmIEJpcm5hbVwiLFwibGF0aXR1ZGVcIjo1Ni41NTcwNDIxLFwibG9uZ2l0dWRlXCI6LTMuNTc4Mzk5MDY1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiREtEXCJ9LHtcIm5hbWVcIjpcIkR1bmxvcFwiLFwibGF0aXR1ZGVcIjo1NS43MTE4NzA5NixcImxvbmdpdHVkZVwiOi00LjUzMjM3NDkxNSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkROTFwifSx7XCJuYW1lXCI6XCJEdW5yb2JpbiBDYXN0bGVcIixcImxhdGl0dWRlXCI6NTcuOTg1NTk3NzksXCJsb25naXR1ZGVcIjotMy45NDk0NDc4OTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJETk9cIn0se1wibmFtZVwiOlwiRHljZVwiLFwibGF0aXR1ZGVcIjo1Ny4yMDU2NDE3OCxcImxvbmdpdHVkZVwiOi0yLjE5MjMyNzkzMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkRZQ1wifSx7XCJuYW1lXCI6XCJFYXN0IEtpbGJyaWRlXCIsXCJsYXRpdHVkZVwiOjU1Ljc2NTk5NDk2LFwibG9uZ2l0dWRlXCI6LTQuMTgwMjE4NjkyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiRUtMXCJ9LHtcIm5hbWVcIjpcIkVhc3RlcmhvdXNlXCIsXCJsYXRpdHVkZVwiOjU1Ljg1OTc0MTM1LFwibG9uZ2l0dWRlXCI6LTQuMTA3MTY0ODU2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiRVNUXCJ9LHtcIm5hbWVcIjpcIkVkaW5idXJnaCBQYXJrXCIsXCJsYXRpdHVkZVwiOjU1LjkyNzU0NDY2LFwibG9uZ2l0dWRlXCI6LTMuMzA3NjYxOTM3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiRURQXCJ9LHtcIm5hbWVcIjpcIkVsZ2luXCIsXCJsYXRpdHVkZVwiOjU3LjY0Mjg5ODUsXCJsb25naXR1ZGVcIjotMy4zMTEyNDYzNTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJFTEdcIn0se1wibmFtZVwiOlwiRXNrYmFua1wiLFwibGF0aXR1ZGVcIjo1NS44ODM4MDEsXCJsb25naXR1ZGVcIjotMy4wMzE0MzY3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiRUtCXCJ9LHtcIm5hbWVcIjpcIkV4aGliaXRpb24gQ2VudHJlIChHbGFzZ293KVwiLFwibGF0aXR1ZGVcIjo1NS44NjE1MzY0NSxcImxvbmdpdHVkZVwiOi00LjI4MzU4MjE2OSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkVYR1wifSx7XCJuYW1lXCI6XCJGYWlybGllXCIsXCJsYXRpdHVkZVwiOjU1Ljc1MTkyNjMzLFwibG9uZ2l0dWRlXCI6LTQuODUzMjYxNjk0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiRlJMXCJ9LHtcIm5hbWVcIjpcIkZhbGtpcmsgR3JhaGFtc3RvblwiLFwibGF0aXR1ZGVcIjo1Ni4wMDI2MDE2LFwibG9uZ2l0dWRlXCI6LTMuNzg1MDQwNTE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiRktHXCJ9LHtcIm5hbWVcIjpcIkZhbGtpcmsgSGlnaFwiLFwibGF0aXR1ZGVcIjo1NS45OTE4MDMxNCxcImxvbmdpdHVkZVwiOi0zLjc5MjIzODc5NixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkZLS1wifSx7XCJuYW1lXCI6XCJGYWxscyBvZiBDcnVhY2hhblwiLFwibGF0aXR1ZGVcIjo1Ni4zOTM4Njg0NSxcImxvbmdpdHVkZVwiOi01LjExMjQ1NzMyMSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkZPQ1wifSx7XCJuYW1lXCI6XCJGYXVsZGhvdXNlXCIsXCJsYXRpdHVkZVwiOjU1LjgyMjQ2NTM1LFwibG9uZ2l0dWRlXCI6LTMuNzE5MzEyNzk5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiRkxEXCJ9LHtcIm5hbWVcIjpcIkZlYXJuXCIsXCJsYXRpdHVkZVwiOjU3Ljc3ODA5NTI1LFwibG9uZ2l0dWRlXCI6LTMuOTkzNzMzNTQ0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiRlJOXCJ9LHtcIm5hbWVcIjpcIkZvcnJlc1wiLFwibGF0aXR1ZGVcIjo1Ny42MDk3ODQ2OSxcImxvbmdpdHVkZVwiOi0zLjYyNTk1OTIxNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkZPUlwifSx7XCJuYW1lXCI6XCJGb3JzaW5hcmRcIixcImxhdGl0dWRlXCI6NTguMzU2ODgzMTIsXCJsb25naXR1ZGVcIjotMy44OTY4OTA4MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkZSU1wifSx7XCJuYW1lXCI6XCJGb3J0IE1hdGlsZGFcIixcImxhdGl0dWRlXCI6NTUuOTU5MDIwODUsXCJsb25naXR1ZGVcIjotNC43OTUyNTg2OTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJGVE1cIn0se1wibmFtZVwiOlwiRm9ydCBXaWxsaWFtXCIsXCJsYXRpdHVkZVwiOjU2LjgyMDQyMzQ4LFwibG9uZ2l0dWRlXCI6LTUuMTA2MTM0NDIxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiRlRXXCJ9LHtcIm5hbWVcIjpcIkdhbGFzaGllbHNcIixcImxhdGl0dWRlXCI6LTIuODA2Mzk5MSxcImxvbmdpdHVkZVwiOjU1LjYxNzc4NixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkdBTFwifSx7XCJuYW1lXCI6XCJHYXJlbG9jaGhlYWRcIixcImxhdGl0dWRlXCI6NTYuMDc5ODQ4NDIsXCJsb25naXR1ZGVcIjotNC44MjU3MDcwNTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJHQ0hcIn0se1wibmFtZVwiOlwiR2Fycm93aGlsbFwiLFwibGF0aXR1ZGVcIjo1NS44NTUyMjM0NCxcImxvbmdpdHVkZVwiOi00LjEyOTQ0OTYxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiR0FSXCJ9LHtcIm5hbWVcIjpcIkdhcnNjYWRkZW5cIixcImxhdGl0dWRlXCI6NTUuODg3NjgxMDksXCJsb25naXR1ZGVcIjotNC4zNjUwMDAwNTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJHUlNcIn0se1wibmFtZVwiOlwiR2FydGNvc2hcIixcImxhdGl0dWRlXCI6NTUuODg1NjQ2NDYsXCJsb25naXR1ZGVcIjotNC4wNzk0ODE2NDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJHUkhcIn0se1wibmFtZVwiOlwiR2FydmVcIixcImxhdGl0dWRlXCI6NTcuNjEzMDIzNTMsXCJsb25naXR1ZGVcIjotNC42ODg0MDA1MjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJHVkVcIn0se1wibmFtZVwiOlwiR2VvcmdlbWFzIEp1bmN0aW9uXCIsXCJsYXRpdHVkZVwiOjU4LjUxMzYxMDU4LFwibG9uZ2l0dWRlXCI6LTMuNDUyMTM0MzI2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiR0dKXCJ9LHtcIm5hbWVcIjpcIkdpZmZub2NrXCIsXCJsYXRpdHVkZVwiOjU1LjgwNDAxNzI1LFwibG9uZ2l0dWRlXCI6LTQuMjkzNTY5Mzc3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiR0ZOXCJ9LHtcIm5hbWVcIjpcIkdpbHNob2NoaWxsXCIsXCJsYXRpdHVkZVwiOjU1Ljg5NzI4MzA3LFwibG9uZ2l0dWRlXCI6LTQuMjgyMDAzMzQyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiR1NDXCJ9LHtcIm5hbWVcIjpcIkdpcnZhblwiLFwibGF0aXR1ZGVcIjo1NS4yNDYzMDg4LFwibG9uZ2l0dWRlXCI6LTQuODQ4MzgwNzQ4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiR0lSXCJ9LHtcIm5hbWVcIjpcIkdsYXNnb3cgUXVlZW4gU3RyZWV0XCIsXCJsYXRpdHVkZVwiOjU1Ljg2MjMyMjkzLFwibG9uZ2l0dWRlXCI6LTQuMjUwNjU3OTQzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiR0xRXCJ9LHtcIm5hbWVcIjpcIkdsZW5lYWdsZXNcIixcImxhdGl0dWRlXCI6NTYuMjc0ODM2NTYsXCJsb25naXR1ZGVcIjotMy43MzExNTg1MjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJHTEVcIn0se1wibmFtZVwiOlwiR2xlbmZpbm5hblwiLFwibGF0aXR1ZGVcIjo1Ni44NzIzODM4OSxcImxvbmdpdHVkZVwiOi01LjQ0OTYyMDIxNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkdMRlwifSx7XCJuYW1lXCI6XCJHbGVuZ2Fybm9ja1wiLFwibGF0aXR1ZGVcIjo1NS43Mzg4Nzk2OSxcImxvbmdpdHVkZVwiOi00LjY3NDQ5MTYyNyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkdMR1wifSx7XCJuYW1lXCI6XCJHbGVucm90aGVzIHdpdGggVGhvcm50b25cIixcImxhdGl0dWRlXCI6NTYuMTYyMzQ4MjMsXCJsb25naXR1ZGVcIjotMy4xNDMwMDY1NDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJHTFRcIn0se1wibmFtZVwiOlwiR29sZiBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTYuNDk3Nzg0NjgsXCJsb25naXR1ZGVcIjotMi43MTk1MzYzNzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJHT0ZcIn0se1wibmFtZVwiOlwiR29sc3BpZVwiLFwibGF0aXR1ZGVcIjo1Ny45NzE0NTIwMyxcImxvbmdpdHVkZVwiOi0zLjk4Njg3NjQxNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkdPTFwifSx7XCJuYW1lXCI6XCJHb3JlYnJpZGdlXCIsXCJsYXRpdHVkZVwiOjU1LjgzOTc3OSxcImxvbmdpdHVkZVwiOi0zLjA0NzQ2MjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJHQkdcIn0se1wibmFtZVwiOlwiR291cm9ja1wiLFwibGF0aXR1ZGVcIjo1NS45NjIyOTk5MyxcImxvbmdpdHVkZVwiOi00LjgxNjY0ODg0MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkdSS1wifSx7XCJuYW1lXCI6XCJHcmVlbmZhdWxkc1wiLFwibGF0aXR1ZGVcIjo1NS45NDUzMjkyMixcImxvbmdpdHVkZVwiOi00Ljc1MjYyNDA5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiR1JMXCJ9LHtcIm5hbWVcIjpcIkdyZWVub2NrIENlbnRyYWxcIixcImxhdGl0dWRlXCI6NTUuOTQ1MzI5MjIsXCJsb25naXR1ZGVcIjotNC43NTI2MjQwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkdLQ1wifSx7XCJuYW1lXCI6XCJHcmVlbm9jayBXZXN0XCIsXCJsYXRpdHVkZVwiOjU1Ljk0NzMyNTYzLFwibG9uZ2l0dWRlXCI6LTQuNzY3ODIzNzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJHS1dcIn0se1wibmFtZVwiOlwiR3JldG5hIEdyZWVuXCIsXCJsYXRpdHVkZVwiOjU1LjAwMTkwODM5LFwibG9uZ2l0dWRlXCI6LTMuMDY0NTkzNTA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiR0VBXCJ9LHtcIm5hbWVcIjpcIkhhaXJteXJlc1wiLFwibGF0aXR1ZGVcIjo1NS43NjE5NTcwNyxcImxvbmdpdHVkZVwiOi00LjIyMDAwMzY2MSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkhNWVwifSx7XCJuYW1lXCI6XCJIYW1pbHRvbiBDZW50cmFsXCIsXCJsYXRpdHVkZVwiOjU1Ljc3MzE4NDk3LFwibG9uZ2l0dWRlXCI6LTQuMDM4ODcyNDU5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiSE5DXCJ9LHtcIm5hbWVcIjpcIkhhbWlsdG9uIFdlc3RcIixcImxhdGl0dWRlXCI6NTUuNzc4OTUxODYsXCJsb25naXR1ZGVcIjotNC4wNTQxNjM2MDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJITldcIn0se1wibmFtZVwiOlwiSGFydHdvb2RcIixcImxhdGl0dWRlXCI6NTUuODExNDcyNTYsXCJsb25naXR1ZGVcIjotMy44MzkzMTk1MzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJIVFdcIn0se1wibmFtZVwiOlwiSGF3a2hlYWRcIixcImxhdGl0dWRlXCI6NTUuODQyMTc1NixcImxvbmdpdHVkZVwiOi00LjM5ODg0NzY3MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkhLSFwifSx7XCJuYW1lXCI6XCJIYXltYXJrZXRcIixcImxhdGl0dWRlXCI6NTUuOTQ1ODAyLFwibG9uZ2l0dWRlXCI6LTMuMjE4NDQ0NTg2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiSFlNXCJ9LHtcIm5hbWVcIjpcIkhlbGVuc2J1cmdoIENlbnRyYWxcIixcImxhdGl0dWRlXCI6NTYuMDA0MTkwMTEsXCJsb25naXR1ZGVcIjotNC43MzI3NDYzMjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJITENcIn0se1wibmFtZVwiOlwiSGVsZW5zYnVyZ2ggVXBwZXJcIixcImxhdGl0dWRlXCI6NTYuMDEyMzQ1NDQsXCJsb25naXR1ZGVcIjotNC43Mjk3OTIzODEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJITFVcIn0se1wibmFtZVwiOlwiSGVsbXNkYWxlXCIsXCJsYXRpdHVkZVwiOjU4LjExNzczNDA4LFwibG9uZ2l0dWRlXCI6LTMuNjU5MDQ3NTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJITVNcIn0se1wibmFtZVwiOlwiSGlnaCBTdHJlZXQgKEdsYXNnb3cpXCIsXCJsYXRpdHVkZVwiOjU1Ljg1OTU0OTUsXCJsb25naXR1ZGVcIjotNC4yNDAxMTAxODMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJIU1RcIn0se1wibmFtZVwiOlwiSGlsbGZvb3RcIixcImxhdGl0dWRlXCI6NTUuOTIwMDc5OCxcImxvbmdpdHVkZVwiOi00LjMyMDI2ODIyMSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkhMRlwifSx7XCJuYW1lXCI6XCJIaWxsaW5ndG9uIEVhc3RcIixcImxhdGl0dWRlXCI6NTUuODU0NzEyNzYsXCJsb25naXR1ZGVcIjotNC4zNTQ3MTkxMTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJITEVcIn0se1wibmFtZVwiOlwiSGlsbGluZ3RvbiBXZXN0XCIsXCJsYXRpdHVkZVwiOjU1Ljg1NjAwNjc2LFwibG9uZ2l0dWRlXCI6LTQuMzcxNTc1OTU5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiSExXXCJ9LHtcIm5hbWVcIjpcIkhvbHl0b3duXCIsXCJsYXRpdHVkZVwiOjU1LjgxMjg5MDQ4LFwibG9uZ2l0dWRlXCI6LTMuOTczOTE0NDI2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiSExZXCJ9LHtcIm5hbWVcIjpcIkhvd3dvb2QgKFJlbmZyZXdzaGlyZSlcIixcImxhdGl0dWRlXCI6NTUuODEwNTQ5MyxcImxvbmdpdHVkZVwiOi00LjU2MzA0MzcwNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkhPWlwifSx7XCJuYW1lXCI6XCJIdW50bHlcIixcImxhdGl0dWRlXCI6NTcuNDQ0MzE0LFwibG9uZ2l0dWRlXCI6LTIuNzc2MzU2Njg0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiSE5UXCJ9LHtcIm5hbWVcIjpcIkh5bmRsYW5kXCIsXCJsYXRpdHVkZVwiOjU1Ljg3OTc0MDE5LFwibG9uZ2l0dWRlXCI6LTQuMzE0NjYyNjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJIWU5cIn0se1wibmFtZVwiOlwiSUJNIEhhbHRcIixcImxhdGl0dWRlXCI6NTUuOTI5NDM2MDIsXCJsb25naXR1ZGVcIjotNC44MjcyMzIzMzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJJQk1cIn0se1wibmFtZVwiOlwiSW5zY2hcIixcImxhdGl0dWRlXCI6NTcuMzM3NDg2MyxcImxvbmdpdHVkZVwiOi0yLjYxNzExMjE5NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIklOU1wifSx7XCJuYW1lXCI6XCJJbnZlcmdvcmRvblwiLFwibGF0aXR1ZGVcIjo1Ny42ODg0ODY5MixcImxvbmdpdHVkZVwiOi00LjE3NTUzODEzOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIklHRFwifSx7XCJuYW1lXCI6XCJJbnZlcmdvd3JpZVwiLFwibGF0aXR1ZGVcIjo1Ni40NTY0NjM3NCxcImxvbmdpdHVkZVwiOi0zLjA1NzQwMDQwOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIklOR1wifSx7XCJuYW1lXCI6XCJJbnZlcmtlaXRoaW5nXCIsXCJsYXRpdHVkZVwiOjU2LjAzNDY2NTIxLFwibG9uZ2l0dWRlXCI6LTMuMzk2MTg2MTM4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiSU5LXCJ9LHtcIm5hbWVcIjpcIkludmVya2lwXCIsXCJsYXRpdHVkZVwiOjU1LjkwNjA5Mjg2LFwibG9uZ2l0dWRlXCI6LTQuODcyNTc5OTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJJTlBcIn0se1wibmFtZVwiOlwiSW52ZXJuZXNzXCIsXCJsYXRpdHVkZVwiOjU3LjQ4MDEwMjI1LFwibG9uZ2l0dWRlXCI6LTQuMjIzMTg2MzM4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiSU5WXCJ9LHtcIm5hbWVcIjpcIkludmVyc2hpblwiLFwibGF0aXR1ZGVcIjo1Ny45MjQ4ODUwOSxcImxvbmdpdHVkZVwiOi00LjM5OTU3NTgyNyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIklOSFwifSx7XCJuYW1lXCI6XCJJbnZlcnVyaWVcIixcImxhdGl0dWRlXCI6NTcuMjg2MjYxOTksXCJsb25naXR1ZGVcIjotMi4zNzM1NTMxNDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJJTlJcIn0se1wibmFtZVwiOlwiSXJ2aW5lXCIsXCJsYXRpdHVkZVwiOjU1LjYxMDg2MjYsXCJsb25naXR1ZGVcIjotNC42NzUxMzYyODMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJJUlZcIn0se1wibmFtZVwiOlwiSm9obnN0b25lIChTdHJhdGhjbHlkZSlcIixcImxhdGl0dWRlXCI6NTUuODM0Njk0MjUsXCJsb25naXR1ZGVcIjotNC41MDM2MjExMTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJKSE5cIn0se1wibmFtZVwiOlwiSm9yZGFuaGlsbFwiLFwibGF0aXR1ZGVcIjo1NS44ODIyMjI3LFwibG9uZ2l0dWRlXCI6LTQuMzI2MDAzNTIyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiSk9SXCJ9LHtcIm5hbWVcIjpcIktlaXRoXCIsXCJsYXRpdHVkZVwiOjU3LjU1MDg5Mzc0LFwibG9uZ2l0dWRlXCI6LTIuOTU0MDc2ODE2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiS0VIXCJ9LHtcIm5hbWVcIjpcIktlbHZpbmRhbGVcIixcImxhdGl0dWRlXCI6NTUuODkzNTgyNzQsXCJsb25naXR1ZGVcIjotNC4zMDk4MDg4NDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJLVkRcIn0se1wibmFtZVwiOlwiS2VubmlzaGVhZFwiLFwibGF0aXR1ZGVcIjo1NS44MTMwNDI2MyxcImxvbmdpdHVkZVwiOi00LjMyNTA2NjEyMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIktOU1wifSx7XCJuYW1lXCI6XCJLaWxkb25hblwiLFwibGF0aXR1ZGVcIjo1OC4xNzEzMjMwNyxcImxvbmdpdHVkZVwiOi0zLjg2OTk5NTQ0MSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIktJTFwifSx7XCJuYW1lXCI6XCJLaWxtYXJub2NrXCIsXCJsYXRpdHVkZVwiOjU1LjYxMjEwNTc0LFwibG9uZ2l0dWRlXCI6LTQuNDk4NjcwNjEzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiS01LXCJ9LHtcIm5hbWVcIjpcIktpbG1hdXJzXCIsXCJsYXRpdHVkZVwiOjU1LjYzNzE5Njg0LFwibG9uZ2l0dWRlXCI6LTQuNTMwNDc2OTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJLTE1cIn0se1wibmFtZVwiOlwiS2lscGF0cmlja1wiLFwibGF0aXR1ZGVcIjo1NS45MjQ2ODk0NCxcImxvbmdpdHVkZVwiOi00LjQ1MzM5Mzc2MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIktQVFwifSx7XCJuYW1lXCI6XCJLaWx3aW5uaW5nXCIsXCJsYXRpdHVkZVwiOjU1LjY1NTk0MTAzLFwibG9uZ2l0dWRlXCI6LTQuNzEwMDEwMTQxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiS1dOXCJ9LHtcIm5hbWVcIjpcIktpbmJyYWNlXCIsXCJsYXRpdHVkZVwiOjU4LjI1ODMwNTM1LFwibG9uZ2l0dWRlXCI6LTMuOTQxMDUwNjE4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiS0JDXCJ9LHtcIm5hbWVcIjpcIktpbmdob3JuXCIsXCJsYXRpdHVkZVwiOjU2LjA2OTMyNjIxLFwibG9uZ2l0dWRlXCI6LTMuMTc0MTQ2ODQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJLR0hcIn0se1wibmFtZVwiOlwiS2luZ3MgUGFya1wiLFwibGF0aXR1ZGVcIjo1NS44MTk4ODIzMyxcImxvbmdpdHVkZVwiOi00LjI0NzI0ODQ3OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIktHUFwifSx7XCJuYW1lXCI6XCJLaW5nc2tub3dlXCIsXCJsYXRpdHVkZVwiOjU1LjkxOTI2NzUyLFwibG9uZ2l0dWRlXCI6LTMuMjY1NjE3ODkzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiS0dFXCJ9LHtcIm5hbWVcIjpcIktpbmd1c3NpZVwiLFwibGF0aXR1ZGVcIjo1Ny4wNzc3NjU1OSxcImxvbmdpdHVkZVwiOi00LjA1MjE4NDczNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIktJTlwifSx7XCJuYW1lXCI6XCJLaXJrY2FsZHlcIixcImxhdGl0dWRlXCI6NTYuMTEyMDQ3OTgsXCJsb25naXR1ZGVcIjotMy4xNjcwMjA2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiS0RZXCJ9LHtcIm5hbWVcIjpcIktpcmtjb25uZWxcIixcImxhdGl0dWRlXCI6NTUuMzg4MzAxNTgsXCJsb25naXR1ZGVcIjotMy45OTg0OTAzMjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJLUktcIn0se1wibmFtZVwiOlwiS2lya2hpbGxcIixcImxhdGl0dWRlXCI6NTUuODE0MTAyNzIsXCJsb25naXR1ZGVcIjotNC4xNjg3MDI3MjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJLS0hcIn0se1wibmFtZVwiOlwiS2lya25ld3RvblwiLFwibGF0aXR1ZGVcIjo1NS44ODg2ODM5LFwibG9uZ2l0dWRlXCI6LTMuNDMyNTEzMTc3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiS0tOXCJ9LHtcIm5hbWVcIjpcIktpcmt3b29kXCIsXCJsYXRpdHVkZVwiOjU1Ljg1NDE4MjI5LFwibG9uZ2l0dWRlXCI6LTQuMDQ4Mzg1NTkxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiS1dEXCJ9LHtcIm5hbWVcIjpcIkt5bGUgb2YgTG9jaGFsc2hcIixcImxhdGl0dWRlXCI6NTcuMjc5NzQ4MTcsXCJsb25naXR1ZGVcIjotNS43MTM4MTU4MDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJLWUxcIn0se1wibmFtZVwiOlwiTGFkeWJhbmtcIixcImxhdGl0dWRlXCI6NTYuMjczNzc1OTcsXCJsb25naXR1ZGVcIjotMy4xMjIyNjUwMTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJMRFlcIn0se1wibmFtZVwiOlwiTGFpcmdcIixcImxhdGl0dWRlXCI6NTguMDAxNTk1MDIsXCJsb25naXR1ZGVcIjotNC40MDA5ODUwNjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJMUkdcIn0se1wibmFtZVwiOlwiTGFuYXJrXCIsXCJsYXRpdHVkZVwiOjU1LjY3MzA3MTAxLFwibG9uZ2l0dWRlXCI6LTMuNzcyODY1NjU3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTE5LXCJ9LHtcIm5hbWVcIjpcIkxhbmdiYW5rXCIsXCJsYXRpdHVkZVwiOjU1LjkyNDUwNzg2LFwibG9uZ2l0dWRlXCI6LTQuNTg1MjYwMDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJMR0JcIn0se1wibmFtZVwiOlwiTGFuZ3NpZGVcIixcImxhdGl0dWRlXCI6NTUuODIxMTI2MzMsXCJsb25naXR1ZGVcIjotNC4yNzczMzQxMTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJMR1NcIn0se1wibmFtZVwiOlwiTGFyYmVydFwiLFwibGF0aXR1ZGVcIjo1Ni4wMjI2OTMwNSxcImxvbmdpdHVkZVwiOi0zLjgzMDU3NjIzNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkxCVFwifSx7XCJuYW1lXCI6XCJMYXJnc1wiLFwibGF0aXR1ZGVcIjo1NS43OTI3MjgzOCxcImxvbmdpdHVkZVwiOi00Ljg2NzE5MTg5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkxBUlwifSx7XCJuYW1lXCI6XCJMYXJraGFsbFwiLFwibGF0aXR1ZGVcIjo1NS43Mzg1ODU2NCxcImxvbmdpdHVkZVwiOi0zLjk3NTQ5NzcyMixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkxSSFwifSx7XCJuYW1lXCI6XCJMYXVyZW5jZWtpcmtcIixcImxhdGl0dWRlXCI6NTYuODI4NjYyLFwibG9uZ2l0dWRlXCI6LTIuNDc4NDQ3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTEFVXCJ9LHtcIm5hbWVcIjpcIkxlbnppZVwiLFwibGF0aXR1ZGVcIjo1NS45MjEzMDUyOSxcImxvbmdpdHVkZVwiOi00LjE1Mzg3OTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJMTlpcIn0se1wibmFtZVwiOlwiTGV1Y2hhcnMgKGZvciBTdC4gQW5kcmV3cylcIixcImxhdGl0dWRlXCI6NTYuMzc1MDkwMzgsXCJsb25naXR1ZGVcIjotMi44OTM3MTE2OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkxFVVwifSx7XCJuYW1lXCI6XCJMaW5saXRoZ293XCIsXCJsYXRpdHVkZVwiOjU1Ljk3NjQzOTQ3LFwibG9uZ2l0dWRlXCI6LTMuNTk1ODQxMzgxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTElOXCJ9LHtcIm5hbWVcIjpcIkxpdmluZ3N0b24gTm9ydGhcIixcImxhdGl0dWRlXCI6NTUuOTAxMzc3NDYsXCJsb25naXR1ZGVcIjotMy41NDQzMzk1MzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJMU05cIn0se1wibmFtZVwiOlwiTGl2aW5nc3RvbiBTb3V0aFwiLFwibGF0aXR1ZGVcIjo1NS44NzE2ODU4OCxcImxvbmdpdHVkZVwiOi0zLjUwMTU1NjgyOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkxWR1wifSx7XCJuYW1lXCI6XCJMb2NoIEF3ZVwiLFwibGF0aXR1ZGVcIjo1Ni40MDIwMDEyMixcImxvbmdpdHVkZVwiOi01LjA0MTk2OTExNixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkxIQVwifSx7XCJuYW1lXCI6XCJMb2NoIEVpbCBPdXR3YXJkIEJvdW5kXCIsXCJsYXRpdHVkZVwiOjU2Ljg1NTI0ODMyLFwibG9uZ2l0dWRlXCI6LTUuMTkxNTY5Nzc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTEhFXCJ9LHtcIm5hbWVcIjpcIkxvY2hhaWxvcnRcIixcImxhdGl0dWRlXCI6NTYuODgwOTQ2MTIsXCJsb25naXR1ZGVcIjotNS42NjMzODQ4NzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJMQ0xcIn0se1wibmFtZVwiOlwiTG9jaGVpbHNpZGVcIixcImxhdGl0dWRlXCI6NTYuODU1Mzg3NyxcImxvbmdpdHVkZVwiOi01LjI5MDAzMjQ2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkxDU1wifSx7XCJuYW1lXCI6XCJMb2NoZ2VsbHlcIixcImxhdGl0dWRlXCI6NTYuMTM1MzIwNTIsXCJsb25naXR1ZGVcIjotMy4zMTI5MzU5NTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJMQ0dcIn0se1wibmFtZVwiOlwiTG9jaGx1aWNoYXJ0XCIsXCJsYXRpdHVkZVwiOjU3LjYyMTE3MDc2LFwibG9uZ2l0dWRlXCI6LTQuODA5NTk5NzkzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTENDXCJ9LHtcIm5hbWVcIjpcIkxvY2h3aW5ub2NoXCIsXCJsYXRpdHVkZVwiOjU1Ljc4NzE0MDQxLFwibG9uZ2l0dWRlXCI6LTQuNjE2MDYyNjM0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTEhXXCJ9LHtcIm5hbWVcIjpcIkxvY2tlcmJpZVwiLFwibGF0aXR1ZGVcIjo1NS4xMjMwNTA5MyxcImxvbmdpdHVkZVwiOi0zLjM1MzUzODA4MSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIkxPQ1wifSx7XCJuYW1lXCI6XCJMb25nbmlkZHJ5XCIsXCJsYXRpdHVkZVwiOjU1Ljk3NjQ3ODYsXCJsb25naXR1ZGVcIjotMi44ODgzNDQ2MzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJMTkRcIn0se1wibmFtZVwiOlwiTWFsbGFpZ1wiLFwibGF0aXR1ZGVcIjo1Ny4wMDU5NjY1NixcImxvbmdpdHVkZVwiOi01LjgyOTU4OTMyMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIk1MR1wifSx7XCJuYW1lXCI6XCJNYXJraW5jaFwiLFwibGF0aXR1ZGVcIjo1Ni4yMDEwMDc4LFwibG9uZ2l0dWRlXCI6LTMuMTMwNzc3NDgzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTU5DXCJ9LHtcIm5hbWVcIjpcIk1hcnloaWxsXCIsXCJsYXRpdHVkZVwiOjU1Ljg5NzE0NTQ3LFwibG9uZ2l0dWRlXCI6LTQuMzAxOTQyNTE2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTVlIXCJ9LHtcIm5hbWVcIjpcIk1heHdlbGwgUGFya1wiLFwibGF0aXR1ZGVcIjo1NS44Mzc3MTM4MSxcImxvbmdpdHVkZVwiOi00LjI4ODY4NTYwMSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIk1BWFwifSx7XCJuYW1lXCI6XCJNYXlib2xlXCIsXCJsYXRpdHVkZVwiOjU1LjM1NDcyNjQ0LFwibG9uZ2l0dWRlXCI6LTQuNjg1MjgyMjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJNQVlcIn0se1wibmFtZVwiOlwiTWVycnl0b25cIixcImxhdGl0dWRlXCI6NTUuNzQ4Njk3MTMsXCJsb25naXR1ZGVcIjotMy45NzgyMzk1OTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJNRVlcIn0se1wibmFtZVwiOlwiTWlsbGlrZW4gUGFya1wiLFwibGF0aXR1ZGVcIjo1NS44MjUwOTcwOSxcImxvbmdpdHVkZVwiOi00LjUzMzM0MjcyMixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIk1JTlwifSx7XCJuYW1lXCI6XCJNaWxuZ2F2aWVcIixcImxhdGl0dWRlXCI6NTUuOTQwODQ4ODYsXCJsb25naXR1ZGVcIjotNC4zMTUxMDQ1NTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJNTE5cIn0se1wibmFtZVwiOlwiTW9uaWZpZXRoXCIsXCJsYXRpdHVkZVwiOjU2LjQ4MDEwMzAyLFwibG9uZ2l0dWRlXCI6LTIuODE4MjQzMjQ5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTU9OXCJ9LHtcIm5hbWVcIjpcIk1vbnRyb3NlXCIsXCJsYXRpdHVkZVwiOjU2LjcxMjc4NTgxLFwibG9uZ2l0dWRlXCI6LTIuNDcyMDc0NzA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTVRTXCJ9LHtcIm5hbWVcIjpcIk1vcmFyXCIsXCJsYXRpdHVkZVwiOjU2Ljk2OTY5NTUyLFwibG9uZ2l0dWRlXCI6LTUuODIxOTEwNTI0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTVJSXCJ9LHtcIm5hbWVcIjpcIk1vc3NwYXJrXCIsXCJsYXRpdHVkZVwiOjU1Ljg0MDgyMzY0LFwibG9uZ2l0dWRlXCI6LTQuMzQ3ODA5Mjk2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTVBLXCJ9LHtcIm5hbWVcIjpcIk1vdGhlcndlbGxcIixcImxhdGl0dWRlXCI6NTUuNzkxNjY2MDMsXCJsb25naXR1ZGVcIjotMy45OTQzMTE1NTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJNVEhcIn0se1wibmFtZVwiOlwiTW91bnQgRmxvcmlkYVwiLFwibGF0aXR1ZGVcIjo1NS44MjY3OTI3NCxcImxvbmdpdHVkZVwiOi00LjI2MjAxNzQ2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIk1GTFwifSx7XCJuYW1lXCI6XCJNb3VudCBWZXJub25cIixcImxhdGl0dWRlXCI6NTUuODM5ODI5ODYsXCJsb25naXR1ZGVcIjotNC4xMzY1OTM4MjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJNVFZcIn0se1wibmFtZVwiOlwiTXVpciBvZiBPcmRcIixcImxhdGl0dWRlXCI6NTcuNTE3OTEyMDYsXCJsb25naXR1ZGVcIjotNC40NjA5Mzk4MDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJNT09cIn0se1wibmFtZVwiOlwiTXVpcmVuZFwiLFwibGF0aXR1ZGVcIjo1NS44MTA0MDU3MixcImxvbmdpdHVkZVwiOi00LjI3MzgzNDkzNSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIk1VSVwifSx7XCJuYW1lXCI6XCJNdXNzZWxidXJnaFwiLFwibGF0aXR1ZGVcIjo1NS45MzM1ODQ0MSxcImxvbmdpdHVkZVwiOi0zLjA3MzE5MTkwNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIk1VQlwifSx7XCJuYW1lXCI6XCJOYWlyblwiLFwibGF0aXR1ZGVcIjo1Ny41ODAxMjk2MyxcImxvbmdpdHVkZVwiOi0zLjg3Mjk5ODIxMixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIk5STlwifSx7XCJuYW1lXCI6XCJOZWlsc3RvblwiLFwibGF0aXR1ZGVcIjo1NS43ODMwMzAyOCxcImxvbmdpdHVkZVwiOi00LjQyNjk1MDgxMSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIk5FSVwifSx7XCJuYW1lXCI6XCJOZXcgQ3Vtbm9ja1wiLFwibGF0aXR1ZGVcIjo1NS40MDI3Mjk2NyxcImxvbmdpdHVkZVwiOi00LjE4NDMzNTU1MSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIk5DS1wifSx7XCJuYW1lXCI6XCJOZXdjcmFpZ2hhbGxcIixcImxhdGl0dWRlXCI6NTUuOTM0ODUwMTQsXCJsb25naXR1ZGVcIjotMy4wOTI3NTY3MDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJORVdcIn0se1wibmFtZVwiOlwiTmV3dG9uIChMYW5hcmspXCIsXCJsYXRpdHVkZVwiOjU1LjgxODc3MDg4LFwibG9uZ2l0dWRlXCI6LTQuMTMzMDQ0NzQyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTlROXCJ9LHtcIm5hbWVcIjpcIk5ld3RvbmdyYW5nZVwiLFwibGF0aXR1ZGVcIjo1NS44NjQ5MjUsXCJsb25naXR1ZGVcIjotMy4wNjg1NDQ2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiTkVHXCJ9LHtcIm5hbWVcIjpcIk5ld3Rvbm1vcmVcIixcImxhdGl0dWRlXCI6NTcuMDU5MTI5MDYsXCJsb25naXR1ZGVcIjotNC4xMTkxMDMzODksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJOV1JcIn0se1wibmFtZVwiOlwiTmV3dG9uLW9uLUF5clwiLFwibGF0aXR1ZGVcIjo1NS40NzQwNDY3MyxcImxvbmdpdHVkZVwiOi00LjYyNTgxNzI3OSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIk5PQVwifSx7XCJuYW1lXCI6XCJOaXRzaGlsbFwiLFwibGF0aXR1ZGVcIjo1NS44MTE5MTk0NixcImxvbmdpdHVkZVwiOi00LjM1OTk1NDU5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIk5JVFwifSx7XCJuYW1lXCI6XCJOb3J0aCBCZXJ3aWNrXCIsXCJsYXRpdHVkZVwiOjU2LjA1NzAzMjQsXCJsb25naXR1ZGVcIjotMi43MzA3MzgxODcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJOQldcIn0se1wibmFtZVwiOlwiTm9ydGggUXVlZW5zZmVycnlcIixcImxhdGl0dWRlXCI6NTYuMDEyNDg4MTYsXCJsb25naXR1ZGVcIjotMy4zOTQ1ODM5NDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJOUVVcIn0se1wibmFtZVwiOlwiT2JhblwiLFwibGF0aXR1ZGVcIjo1Ni40MTI0NjQyOSxcImxvbmdpdHVkZVwiOi01LjQ3MzkyMDQwNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIk9CTlwifSx7XCJuYW1lXCI6XCJQYWlzbGV5IENhbmFsXCIsXCJsYXRpdHVkZVwiOjU1Ljg0MDA2ODU4LFwibG9uZ2l0dWRlXCI6LTQuNDIzNzk1ODQ2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiUENOXCJ9LHtcIm5hbWVcIjpcIlBhaXNsZXkgR2lsbW91ciBTdHJlZXRcIixcImxhdGl0dWRlXCI6NTUuODQ3MzM1MDIsXCJsb25naXR1ZGVcIjotNC40MjQ1MDM4NzcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJQWUdcIn0se1wibmFtZVwiOlwiUGFpc2xleSBTdCBKYW1lc1wiLFwibGF0aXR1ZGVcIjo1NS44NTIxMDMzOCxcImxvbmdpdHVkZVwiOi00LjQ0MjQ0MDkxNixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlBZSlwifSx7XCJuYW1lXCI6XCJQYXJ0aWNrXCIsXCJsYXRpdHVkZVwiOjU1Ljg2OTg3Mzg0LFwibG9uZ2l0dWRlXCI6LTQuMzA4ODAwMzksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJQVEtcIn0se1wibmFtZVwiOlwiUGF0dGVydG9uXCIsXCJsYXRpdHVkZVwiOjU1Ljc5MDM4NjY2LFwibG9uZ2l0dWRlXCI6LTQuMzM0ODgyNTAyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiUFRUXCJ9LHtcIm5hbWVcIjpcIlBlcnRoXCIsXCJsYXRpdHVkZVwiOjU2LjM5MjY4MTY2LFwibG9uZ2l0dWRlXCI6LTMuNDQwMDQyMixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlBUSFwifSx7XCJuYW1lXCI6XCJQaXRsb2NocnlcIixcImxhdGl0dWRlXCI6NTYuNzAyNDkxMTcsXCJsb25naXR1ZGVcIjotMy43MzU1NzM4MzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJQSVRcIn0se1wibmFtZVwiOlwiUGxvY2t0b25cIixcImxhdGl0dWRlXCI6NTcuMzMzNTQyMSxcImxvbmdpdHVkZVwiOi01LjY2NjAwMDI5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlBMS1wifSx7XCJuYW1lXCI6XCJQb2xsb2tzaGF3cyBFYXN0XCIsXCJsYXRpdHVkZVwiOjU1LjgyNDcwNDU5LFwibG9uZ2l0dWRlXCI6LTQuMjg3NDQyNDA5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiUFdFXCJ9LHtcIm5hbWVcIjpcIlBvbGxva3NoYXdzIFdlc3RcIixcImxhdGl0dWRlXCI6NTUuODIzODExMjYsXCJsb25naXR1ZGVcIjotNC4zMDE1OTk3NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlBXV1wifSx7XCJuYW1lXCI6XCJQb2xsb2tzaGllbGRzIEVhc3RcIixcImxhdGl0dWRlXCI6NTUuODQxMDUxOTksXCJsb25naXR1ZGVcIjotNC4yNjg1OTU5ODgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJQTEVcIn0se1wibmFtZVwiOlwiUG9sbG9rc2hpZWxkcyBXZXN0XCIsXCJsYXRpdHVkZVwiOjU1LjgzNzY4NDI4LFwibG9uZ2l0dWRlXCI6LTQuMjc1NzQ2NzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJQTFdcIn0se1wibmFtZVwiOlwiUG9sbW9udFwiLFwibGF0aXR1ZGVcIjo1NS45ODQ3MjQ2NSxcImxvbmdpdHVkZVwiOi0zLjcxNDk2NTQ4NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlBNVFwifSx7XCJuYW1lXCI6XCJQb3J0IEdsYXNnb3dcIixcImxhdGl0dWRlXCI6NTUuOTMzNTAzNzgsXCJsb25naXR1ZGVcIjotNC42ODk4MTQxMjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJQVEdcIn0se1wibmFtZVwiOlwiUG9ydGxldGhlblwiLFwibGF0aXR1ZGVcIjo1Ny4wNjEzNjM2NyxcImxvbmdpdHVkZVwiOi0yLjEyNjYxNjA2MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlBMTlwifSx7XCJuYW1lXCI6XCJQb3NzaWxwYXJrICYgUGFya2hvdXNlXCIsXCJsYXRpdHVkZVwiOjU1Ljg5MDIyOTQ1LFwibG9uZ2l0dWRlXCI6LTQuMjU4MDMxMTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJQUEtcIn0se1wibmFtZVwiOlwiUHJlc3RvbnBhbnNcIixcImxhdGl0dWRlXCI6NTUuOTUzMDkyMjYsXCJsb25naXR1ZGVcIjotMi45NzQ3NzIwNDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJQU1RcIn0se1wibmFtZVwiOlwiUHJlc3R3aWNrIFRvd25cIixcImxhdGl0dWRlXCI6NTUuNTAxNjkxODMsXCJsb25naXR1ZGVcIjotNC42MTUxNDY4MDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJQVFdcIn0se1wibmFtZVwiOlwiUHJpZXN0aGlsbCAmIERhcm5sZXlcIixcImxhdGl0dWRlXCI6NTUuODEyMTY0OTYsXCJsb25naXR1ZGVcIjotNC4zNDI4OTA2MTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJQVExcIn0se1wibmFtZVwiOlwiUXVlZW5zIFBhcmsgKEdsYXNnb3cpXCIsXCJsYXRpdHVkZVwiOjU1LjgzNTY4Mjc3LFwibG9uZ2l0dWRlXCI6LTQuMjY3MzI0OTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJRUEtcIn0se1wibmFtZVwiOlwiUmFubm9jaFwiLFwibGF0aXR1ZGVcIjo1Ni42ODYwMjg4NCxcImxvbmdpdHVkZVwiOi00LjU3Njg2Mzg0OSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlJBTlwifSx7XCJuYW1lXCI6XCJSZW50b25cIixcImxhdGl0dWRlXCI6NTUuOTcwNDIwODQsXCJsb25naXR1ZGVcIjotNC41ODYxMTA5MzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJSVE5cIn0se1wibmFtZVwiOlwiUm9nYXJ0XCIsXCJsYXRpdHVkZVwiOjU3Ljk4ODY5NTUzLFwibG9uZ2l0dWRlXCI6LTQuMTU4MTg4OTk5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiUk9HXCJ9LHtcIm5hbWVcIjpcIlJvc3l0aFwiLFwibGF0aXR1ZGVcIjo1Ni4wNDU1MDU1NCxcImxvbmdpdHVkZVwiOi0zLjQyNzMwNjE1MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlJPU1wifSx7XCJuYW1lXCI6XCJSb3kgQnJpZGdlXCIsXCJsYXRpdHVkZVwiOjU2Ljg4ODM0NDQ1LFwibG9uZ2l0dWRlXCI6LTQuODM3MjQxNTYyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiUllCXCJ9LHtcIm5hbWVcIjpcIlJ1dGhlcmdsZW5cIixcImxhdGl0dWRlXCI6NTUuODMwNTg1OTUsXCJsb25naXR1ZGVcIjotNC4yMTIwOTYyNTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJSVVRcIn0se1wibmFtZVwiOlwiU2FsdGNvYXRzXCIsXCJsYXRpdHVkZVwiOjU1LjYzMzg3MTYxLFwibG9uZ2l0dWRlXCI6LTQuNzg0Mjg0MTQzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiU0xUXCJ9LHtcIm5hbWVcIjpcIlNhbnF1aGFyXCIsXCJsYXRpdHVkZVwiOjU1LjM3MDE2NDk2LFwibG9uZ2l0dWRlXCI6LTMuOTI0NTIzMTUxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiU1FIXCJ9LHtcIm5hbWVcIjpcIlNjb3RzY2FsZGVyXCIsXCJsYXRpdHVkZVwiOjU4LjQ4Mjk3NzU2LFwibG9uZ2l0dWRlXCI6LTMuNTUyMDY2OTM2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiU0NUXCJ9LHtcIm5hbWVcIjpcIlNjb3RzdG91bmhpbGxcIixcImxhdGl0dWRlXCI6NTUuODg1MTI3MSxcImxvbmdpdHVkZVwiOi00LjM1Mjg4MzAxNCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlNDSFwifSx7XCJuYW1lXCI6XCJTaGF3ZmFpclwiLFwibGF0aXR1ZGVcIjo1NS45MTUzNTksXCJsb25naXR1ZGVcIjotMy4wODg0NDMzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiU0ZJXCJ9LHtcIm5hbWVcIjpcIlNoYXdsYW5kc1wiLFwibGF0aXR1ZGVcIjo1NS44MjkxOTcyNCxcImxvbmdpdHVkZVwiOi00LjI5MjMzNjk5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiU0hMXCJ9LHtcIm5hbWVcIjpcIlNoZXR0bGVzdG9uXCIsXCJsYXRpdHVkZVwiOjU1Ljg1MzUyMTg2LFwibG9uZ2l0dWRlXCI6LTQuMTYwMDMzNjM2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiU0xTXCJ9LHtcIm5hbWVcIjpcIlNoaWVsZG11aXJcIixcImxhdGl0dWRlXCI6NTUuNzc3NDgxOTYsXCJsb25naXR1ZGVcIjotMy45NTY5OTEwNjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJTRE1cIn0se1wibmFtZVwiOlwiU2hvdHRzXCIsXCJsYXRpdHVkZVwiOjU1LjgxODYzOTQ3LFwibG9uZ2l0dWRlXCI6LTMuNzk4MzE1NjAxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiU0hTXCJ9LHtcIm5hbWVcIjpcIlNpbmdlclwiLFwibGF0aXR1ZGVcIjo1NS45MDc2NTg3OSxcImxvbmdpdHVkZVwiOi00LjQwNTQ4MjYwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlNJTlwifSx7XCJuYW1lXCI6XCJTbGF0ZWZvcmRcIixcImxhdGl0dWRlXCI6NTUuOTI2NjgxOTUsXCJsb25naXR1ZGVcIjotMy4yNDM0NTI1MDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJTTEFcIn0se1wibmFtZVwiOlwiU291dGggR3lsZVwiLFwibGF0aXR1ZGVcIjo1NS45MzYzNDc2MyxcImxvbmdpdHVkZVwiOi0zLjI5OTQ3MzY1NSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlNHTFwifSx7XCJuYW1lXCI6XCJTcGVhbiBCcmlkZ2VcIixcImxhdGl0dWRlXCI6NTYuODg5OTk0MixcImxvbmdpdHVkZVwiOi00LjkyMTYwODU5MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlNCUlwifSx7XCJuYW1lXCI6XCJTcHJpbmdidXJuXCIsXCJsYXRpdHVkZVwiOjU1Ljg4MTY5NzE4LFwibG9uZ2l0dWRlXCI6LTQuMjI4MTE0NjYzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiU1BSXCJ9LHtcIm5hbWVcIjpcIlNwcmluZ2ZpZWxkXCIsXCJsYXRpdHVkZVwiOjU2LjI5NDk1NjAyLFwibG9uZ2l0dWRlXCI6LTMuMDUyNDUxNzMxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiU1BGXCJ9LHtcIm5hbWVcIjpcIlN0ZXBwc1wiLFwibGF0aXR1ZGVcIjo1NS44ODk4OTgsXCJsb25naXR1ZGVcIjotNC4xNDA3ODQzOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlNQU1wifSx7XCJuYW1lXCI6XCJTdGV2ZW5zdG9uXCIsXCJsYXRpdHVkZVwiOjU1LjYzNDI2ODI1LFwibG9uZ2l0dWRlXCI6LTQuNzUwNzgyNDEzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiU1RWXCJ9LHtcIm5hbWVcIjpcIlN0ZXdhcnRvblwiLFwibGF0aXR1ZGVcIjo1NS42ODIxNDQwNCxcImxvbmdpdHVkZVwiOi00LjUxODA0MzQ0NSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlNUVFwifSx7XCJuYW1lXCI6XCJTdGlybGluZ1wiLFwibGF0aXR1ZGVcIjo1Ni4xMTk3OTk3NCxcImxvbmdpdHVkZVwiOi0zLjkzNTYxNjk0NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlNUR1wifSx7XCJuYW1lXCI6XCJTdG9uZWhhdmVuXCIsXCJsYXRpdHVkZVwiOjU2Ljk2NjgxNzYyLFwibG9uZ2l0dWRlXCI6LTIuMjI1MzA1Mjg2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiU1ROXCJ9LHtcIm5hbWVcIjpcIlN0b3dcIixcImxhdGl0dWRlXCI6NTUuNjkxNjI0LFwibG9uZ2l0dWRlXCI6LTIuODY1NDcyNixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlNPSVwifSx7XCJuYW1lXCI6XCJTdHJhbnJhZXJcIixcImxhdGl0dWRlXCI6NTQuOTA5NTk4NTgsXCJsb25naXR1ZGVcIjotNS4wMjQ3MjkxMzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJTVFJcIn0se1wibmFtZVwiOlwiU3RyYXRoY2Fycm9uXCIsXCJsYXRpdHVkZVwiOjU3LjQyMjc2MTI3LFwibG9uZ2l0dWRlXCI6LTUuNDI4ODExMTkxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiU1RDXCJ9LHtcIm5hbWVcIjpcIlN0cm9tZWZlcnJ5XCIsXCJsYXRpdHVkZVwiOjU3LjM1MjM1MDU5LFwibG9uZ2l0dWRlXCI6LTUuNTQ5NDUyOTE4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiU1RGXCJ9LHtcIm5hbWVcIjpcIlN1bW1lcnN0b25cIixcImxhdGl0dWRlXCI6NTUuODk5MDUzNDYsXCJsb25naXR1ZGVcIjotNC4yOTE2ODk0OTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJTVU1cIn0se1wibmFtZVwiOlwiVGFpblwiLFwibGF0aXR1ZGVcIjo1Ny44MTQyNzAzOCxcImxvbmdpdHVkZVwiOi00LjA1MjEyODQyMixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlRBSVwifSx7XCJuYW1lXCI6XCJUYXludWlsdFwiLFwibGF0aXR1ZGVcIjo1Ni40MzA3ODU1OSxcImxvbmdpdHVkZVwiOi01LjIzOTU5MjEzMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlRBWVwifSx7XCJuYW1lXCI6XCJUaG9ybmxpZWJhbmtcIixcImxhdGl0dWRlXCI6NTUuODEwODY4MTYsXCJsb25naXR1ZGVcIjotNC4zMTE2ODg5MTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJUSEJcIn0se1wibmFtZVwiOlwiVGhvcm50b25oYWxsXCIsXCJsYXRpdHVkZVwiOjU1Ljc2ODY3MDM0LFwibG9uZ2l0dWRlXCI6LTQuMjUxMTU1ODMxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiVEhUXCJ9LHtcIm5hbWVcIjpcIlRodXJzb1wiLFwibGF0aXR1ZGVcIjo1OC41ODk5ODY2NSxcImxvbmdpdHVkZVwiOi0zLjUyNzU1NjA0MSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlRIU1wifSx7XCJuYW1lXCI6XCJUcm9vblwiLFwibGF0aXR1ZGVcIjo1NS41NDI3OTc2NCxcImxvbmdpdHVkZVwiOi00LjY1NTI5MDI5NyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlRSTlwifSx7XCJuYW1lXCI6XCJUdWxsb2NoXCIsXCJsYXRpdHVkZVwiOjU2Ljg4NDI1ODU1LFwibG9uZ2l0dWRlXCI6LTQuNzAxMzE2NzY0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiVFVMXCJ9LHtcIm5hbWVcIjpcIlR3ZWVkYmFua1wiLFwibGF0aXR1ZGVcIjo1NS42MDQ4MDEsXCJsb25naXR1ZGVcIjotMi43NTk4NDg4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiVFdCXCJ9LHtcIm5hbWVcIjpcIlR5bmRydW0gTG93ZXJcIixcImxhdGl0dWRlXCI6NTYuNDMzMzI3MzcsXCJsb25naXR1ZGVcIjotNC43MTQ4MDUzNDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJUWUxcIn0se1wibmFtZVwiOlwiVWRkaW5nc3RvblwiLFwibGF0aXR1ZGVcIjo1NS44MjM1MjA3OSxcImxvbmdpdHVkZVwiOi00LjA4NjY4NjI4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiVUREXCJ9LHtcIm5hbWVcIjpcIlVwaGFsbFwiLFwibGF0aXR1ZGVcIjo1NS45MTkwMzY2MixcImxvbmdpdHVkZVwiOi0zLjUwMjEwNjgwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIlVIQVwifSx7XCJuYW1lXCI6XCJVcHBlciBUeW5kcnVtXCIsXCJsYXRpdHVkZVwiOjU2LjQzNDY0ODQ0LFwibG9uZ2l0dWRlXCI6LTQuNzAzNzA1NDEyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiVVRZXCJ9LHtcIm5hbWVcIjpcIldhbGx5Zm9yZFwiLFwibGF0aXR1ZGVcIjo1NS45NDAyNzgxLFwibG9uZ2l0dWRlXCI6LTMuMDE0OTM5NzU0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiV0FGXCJ9LHtcIm5hbWVcIjpcIldlbXlzcyBCYXlcIixcImxhdGl0dWRlXCI6NTUuODc2MTMxODIsXCJsb25naXR1ZGVcIjotNC44ODkwNzQzNTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJXTVNcIn0se1wibmFtZVwiOlwiV2VzdCBDYWxkZXJcIixcImxhdGl0dWRlXCI6NTUuODUzNzk1ODcsXCJsb25naXR1ZGVcIjotMy41NjcwMDY0MDgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNSXCIsXCJjcnNDb2RlXCI6XCJXQ0xcIn0se1wibmFtZVwiOlwiV2VzdCBLaWxicmlkZVwiLFwibGF0aXR1ZGVcIjo1NS42OTYxNDY0MSxcImxvbmdpdHVkZVwiOi00Ljg1MTc0MDgyMSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIldLQlwifSx7XCJuYW1lXCI6XCJXZXN0ZXIgSGFpbGVzXCIsXCJsYXRpdHVkZVwiOjU1LjkxNDMxMTI0LFwibG9uZ2l0dWRlXCI6LTMuMjg0MzM2MzkzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiV1RBXCJ9LHtcIm5hbWVcIjpcIldlc3RlcnRvblwiLFwibGF0aXR1ZGVcIjo1NS45MDQ3OTM5OCxcImxvbmdpdHVkZVwiOi00LjMzNDg3NDYyNixcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIldFU1wifSx7XCJuYW1lXCI6XCJXaGlmZmxldFwiLFwibGF0aXR1ZGVcIjo1NS44NTM2ODUzNCxcImxvbmdpdHVkZVwiOi00LjAxODY0MTYzNyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIldGRlwifSx7XCJuYW1lXCI6XCJXaGluaGlsbFwiLFwibGF0aXR1ZGVcIjo1NS45MzgzNjA2NCxcImxvbmdpdHVkZVwiOi00Ljc0NjY4NDM0MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIldOTFwifSx7XCJuYW1lXCI6XCJXaGl0ZWNyYWlnc1wiLFwibGF0aXR1ZGVcIjo1NS43OTAzMTQ3MyxcImxvbmdpdHVkZVwiOi00LjMxMDE1MTg2OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIldDUlwifSx7XCJuYW1lXCI6XCJXaWNrXCIsXCJsYXRpdHVkZVwiOjU4LjQ0MTY4NzA0LFwibG9uZ2l0dWRlXCI6LTMuMDk3OTgxMDU3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiV0NLXCJ9LHtcIm5hbWVcIjpcIldpbGxpYW13b29kXCIsXCJsYXRpdHVkZVwiOjU1Ljc5NDEwNTEyLFwibG9uZ2l0dWRlXCI6LTQuMjkwMTE0ODQ2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiV0xNXCJ9LHtcIm5hbWVcIjpcIldpc2hhd1wiLFwibGF0aXR1ZGVcIjo1NS43NzIwMzMzNyxcImxvbmdpdHVkZVwiOi0zLjkyNjQyNTI0MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1JcIixcImNyc0NvZGVcIjpcIldTSFwifSx7XCJuYW1lXCI6XCJXb29kaGFsbFwiLFwibGF0aXR1ZGVcIjo1NS45MzExOTQ5LFwibG9uZ2l0dWRlXCI6LTQuNjU1Mzg4NDg5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiV0RMXCJ9LHtcIm5hbWVcIjpcIllva2VyXCIsXCJsYXRpdHVkZVwiOjU1Ljg5MjczMTAyLFwibG9uZ2l0dWRlXCI6LTQuMzg3NDEyMDg0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTUlwiLFwiY3JzQ29kZVwiOlwiWU9LXCJ9LHtcIm5hbWVcIjpcIkFkZGxlc3RvbmVcIixcImxhdGl0dWRlXCI6NTEuMzczMDQ2OTUsXCJsb25naXR1ZGVcIjotMC40ODQ0NDg5MTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJBU05cIn0se1wibmFtZVwiOlwiQWxkZXJzaG90XCIsXCJsYXRpdHVkZVwiOjUxLjI0NjQxNjc0LFwibG9uZ2l0dWRlXCI6LTAuNzU5ODYwNDg0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiQUhUXCJ9LHtcIm5hbWVcIjpcIkFsdG9uXCIsXCJsYXRpdHVkZVwiOjUxLjE1MTk2NDk3LFwibG9uZ2l0dWRlXCI6LTAuOTY2OTIwMjI4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiQU9OXCJ9LHtcIm5hbWVcIjpcIkFuZG92ZXJcIixcImxhdGl0dWRlXCI6NTEuMjExNTQ1ODQsXCJsb25naXR1ZGVcIjotMS40OTIyMzk5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkFEVlwifSx7XCJuYW1lXCI6XCJBc2NvdCAoQmVya3MpXCIsXCJsYXRpdHVkZVwiOjUxLjQwNjI0NjM0LFwibG9uZ2l0dWRlXCI6LTAuNjc1ODMwNTM2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiQUNUXCJ9LHtcIm5hbWVcIjpcIkFzaFwiLFwibGF0aXR1ZGVcIjo1MS4yNDk1OTU2NixcImxvbmdpdHVkZVwiOi0wLjcxMjgwNDczNyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkFTSFwifSx7XCJuYW1lXCI6XCJBc2ggVmFsZVwiLFwibGF0aXR1ZGVcIjo1MS4yNzIyNDU5NSxcImxvbmdpdHVkZVwiOi0wLjcyMTY0Nzk3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiQUhWXCJ9LHtcIm5hbWVcIjpcIkFzaGZvcmQgKFN1cnJleSlcIixcImxhdGl0dWRlXCI6NTEuNDM2NTEwMjQsXCJsb25naXR1ZGVcIjotMC40NjgwNjIyNTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJBRlNcIn0se1wibmFtZVwiOlwiQXNodXJzdCBOZXcgRm9yZXN0XCIsXCJsYXRpdHVkZVwiOjUwLjg4OTg0MDMzLFwibG9uZ2l0dWRlXCI6LTEuNTI2NjQwNTMxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiQU5GXCJ9LHtcIm5hbWVcIjpcIkF4bWluc3RlclwiLFwibGF0aXR1ZGVcIjo1MC43Nzg1ODI2LFwibG9uZ2l0dWRlXCI6LTMuMDA1MjI4MDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJBWE1cIn0se1wibmFtZVwiOlwiQmFnc2hvdFwiLFwibGF0aXR1ZGVcIjo1MS4zNjQzNjkwNSxcImxvbmdpdHVkZVwiOi0wLjY4ODY1OTg5MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkJBR1wifSx7XCJuYW1lXCI6XCJCYXJuZXNcIixcImxhdGl0dWRlXCI6NTEuNDY3MDY4MDYsXCJsb25naXR1ZGVcIjotMC4yNDA3MjQ0NTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJCTlNcIn0se1wibmFtZVwiOlwiQmFybmVzIEJyaWRnZVwiLFwibGF0aXR1ZGVcIjo1MS40NzE3MzQwNCxcImxvbmdpdHVkZVwiOi0wLjI1MjA2NDI2OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkJOSVwifSx7XCJuYW1lXCI6XCJCYXNpbmdzdG9rZVwiLFwibGF0aXR1ZGVcIjo1MS4yNjgzNTY1NCxcImxvbmdpdHVkZVwiOi0xLjA4NzI1OTExMixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkJTS1wifSx7XCJuYW1lXCI6XCJCZWF1bGlldSBSb2FkXCIsXCJsYXRpdHVkZVwiOjUwLjg1NTAzNzUyLFwibG9uZ2l0dWRlXCI6LTEuNTA0NzU4ODkxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiQkVVXCJ9LHtcIm5hbWVcIjpcIkJlZGhhbXB0b25cIixcImxhdGl0dWRlXCI6NTAuODUzOTQ0NDQsXCJsb25naXR1ZGVcIjotMC45OTU4MjM2NjQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJCREhcIn0se1wibmFtZVwiOlwiQmVudGxleSAoSGFudHMpXCIsXCJsYXRpdHVkZVwiOjUxLjE4MTIyOTg2LFwibG9uZ2l0dWRlXCI6LTAuODY4MTMwOTAzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiQlRZXCJ9LHtcIm5hbWVcIjpcIkJlcnJ5bGFuZHNcIixcImxhdGl0dWRlXCI6NTEuMzk5MDQ2OTEsXCJsb25naXR1ZGVcIjotMC4yODA3MTQyNyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkJSU1wifSx7XCJuYW1lXCI6XCJCaXR0ZXJuZVwiLFwibGF0aXR1ZGVcIjo1MC45MTg0NDQ5NixcImxvbmdpdHVkZVwiOi0xLjM3Njk4NzY0OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkJURVwifSx7XCJuYW1lXCI6XCJCb29raGFtXCIsXCJsYXRpdHVkZVwiOjUxLjI4ODczNzMxLFwibG9uZ2l0dWRlXCI6LTAuMzg0MDEwNTE0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiQktBXCJ9LHtcIm5hbWVcIjpcIkJvdGxleVwiLFwibGF0aXR1ZGVcIjo1MC45MTY4MDEzMyxcImxvbmdpdHVkZVwiOi0xLjI1ODgwNjE5NixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkJPRVwifSx7XCJuYW1lXCI6XCJCb3VybmVtb3V0aFwiLFwibGF0aXR1ZGVcIjo1MC43Mjc1Mjg1NCxcImxvbmdpdHVkZVwiOi0xLjg2Mzk0MTM0MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkJNSFwifSx7XCJuYW1lXCI6XCJCcmFja25lbGxcIixcImxhdGl0dWRlXCI6NTEuNDEzMDk0OTQsXCJsb25naXR1ZGVcIjotMC43NTE3MDMwMTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJCQ0VcIn0se1wibmFtZVwiOlwiQnJhbmtzb21lXCIsXCJsYXRpdHVkZVwiOjUwLjcyNzU3OTkyLFwibG9uZ2l0dWRlXCI6LTEuOTE5MTk3ODI2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiQlNNXCJ9LHtcIm5hbWVcIjpcIkJyZW50Zm9yZFwiLFwibGF0aXR1ZGVcIjo1MS40ODc4NTc0OCxcImxvbmdpdHVkZVwiOi0wLjMwOTA2NDM4MSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkJGRFwifSx7XCJuYW1lXCI6XCJCcm9ja2VuaHVyc3RcIixcImxhdGl0dWRlXCI6NTAuODE2ODI4OTUsXCJsb25naXR1ZGVcIjotMS41NzM1NDI1NDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJCQ1VcIn0se1wibmFtZVwiOlwiQnJvb2t3b29kXCIsXCJsYXRpdHVkZVwiOjUxLjMwMzc1NzYyLFwibG9uZ2l0dWRlXCI6LTAuNjM1NzQ0NjgxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiQktPXCJ9LHtcIm5hbWVcIjpcIkJ1cnNsZWRvblwiLFwibGF0aXR1ZGVcIjo1MC44ODQzODAzNyxcImxvbmdpdHVkZVwiOi0xLjMwNTI4MTM4NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkJVT1wifSx7XCJuYW1lXCI6XCJCeWZsZWV0ICYgTmV3IEhhd1wiLFwibGF0aXR1ZGVcIjo1MS4zNDk3OTcyNyxcImxvbmdpdHVkZVwiOi0wLjQ4MTM4MTk0MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkJGTlwifSx7XCJuYW1lXCI6XCJDYW1iZXJsZXlcIixcImxhdGl0dWRlXCI6NTEuMzM2NDU4NjUsXCJsb25naXR1ZGVcIjotMC43NDQ2Njk3NTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJDQU1cIn0se1wibmFtZVwiOlwiQ2hhbmRsZXJzIEZvcmRcIixcImxhdGl0dWRlXCI6NTAuOTgyOTk3NzIsXCJsb25naXR1ZGVcIjotMS4zODQ0MDEwNDksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJDRlJcIn0se1wibmFtZVwiOlwiQ2hlcnRzZXlcIixcImxhdGl0dWRlXCI6NTEuMzg3MTY1MDYsXCJsb25naXR1ZGVcIjotMC41MDk2NjU1ODcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJDSFlcIn0se1wibmFtZVwiOlwiQ2hlc3Npbmd0b24gTm9ydGhcIixcImxhdGl0dWRlXCI6NTEuMzY0MjYyMzgsXCJsb25naXR1ZGVcIjotMC4zMDA0MDUwNDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJDU05cIn0se1wibmFtZVwiOlwiQ2hlc3Npbmd0b24gU291dGhcIixcImxhdGl0dWRlXCI6NTEuMzU2NTUwOTEsXCJsb25naXR1ZGVcIjotMC4zMDgxNTkyMDUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJDU1NcIn0se1wibmFtZVwiOlwiQ2hpc3dpY2tcIixcImxhdGl0dWRlXCI6NTEuNDgxMTQwNjMsXCJsb25naXR1ZGVcIjotMC4yNjc4MzQ5NDcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJDSEtcIn0se1wibmFtZVwiOlwiQ2hyaXN0Y2h1cmNoXCIsXCJsYXRpdHVkZVwiOjUwLjczODIwMDM4LFwibG9uZ2l0dWRlXCI6LTEuNzg0NTQ5NTc4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiQ0hSXCJ9LHtcIm5hbWVcIjpcIkNsYW5kb25cIixcImxhdGl0dWRlXCI6NTEuMjY0MDAzNTEsXCJsb25naXR1ZGVcIjotMC41MDI3NTk0MTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJDTEFcIn0se1wibmFtZVwiOlwiQ2xhcGhhbSBKdW5jdGlvblwiLFwibGF0aXR1ZGVcIjo1MS40NjQxOTA2NSxcImxvbmdpdHVkZVwiOi0wLjE3MDI0NzM1MSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkNMSlwifSx7XCJuYW1lXCI6XCJDbGF5Z2F0ZVwiLFwibGF0aXR1ZGVcIjo1MS4zNjEyMTQ2MyxcImxvbmdpdHVkZVwiOi0wLjM0ODIzNjE2NSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkNMR1wifSx7XCJuYW1lXCI6XCJDb2JoYW0gJiBTdG9rZSBkJ0FiZXJub25cIixcImxhdGl0dWRlXCI6NTEuMzE4MTAwMjQsXCJsb25naXR1ZGVcIjotMC4zODkzMzYxNjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJDU0RcIn0se1wibmFtZVwiOlwiQ29zaGFtXCIsXCJsYXRpdHVkZVwiOjUwLjg0MjA4NDMyLFwibG9uZ2l0dWRlXCI6LTEuMDY3NTQ5ODgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJDU0FcIn0se1wibmFtZVwiOlwiQ3JhbmJyb29rIChEZXZvbilcIixcImxhdGl0dWRlXCI6NTAuNzQ5Njg5LFwibG9uZ2l0dWRlXCI6LTMuNDIyMjc0NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkNCS1wifSx7XCJuYW1lXCI6XCJDcmV3a2VybmVcIixcImxhdGl0dWRlXCI6NTAuODcyMDM1MTcsXCJsb25naXR1ZGVcIjotMi43Nzg0ODc0MjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJDS05cIn0se1wibmFtZVwiOlwiRGF0Y2hldFwiLFwibGF0aXR1ZGVcIjo1MS40ODMwODE0OSxcImxvbmdpdHVkZVwiOi0wLjU3OTQxNjAxMixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkRBVFwifSx7XCJuYW1lXCI6XCJEb3JjaGVzdGVyIFNvdXRoXCIsXCJsYXRpdHVkZVwiOjUwLjcwOTI3ODc3LFwibG9uZ2l0dWRlXCI6LTIuNDM3MjUwMzU3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiRENIXCJ9LHtcIm5hbWVcIjpcIkVhcmxleVwiLFwibGF0aXR1ZGVcIjo1MS40NDEwOTUyMSxcImxvbmdpdHVkZVwiOi0wLjkxNzk5MjMyNSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkVBUlwifSx7XCJuYW1lXCI6XCJFYXJsc2ZpZWxkXCIsXCJsYXRpdHVkZVwiOjUxLjQ0MTk5MTMyLFwibG9uZ2l0dWRlXCI6LTAuMTg4NDQ1OTQ2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiRUFEXCJ9LHtcIm5hbWVcIjpcIkVhc3RsZWlnaFwiLFwibGF0aXR1ZGVcIjo1MC45NjkyNDE5NixcImxvbmdpdHVkZVwiOi0xLjM1MDA4ODkzOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkVTTFwifSx7XCJuYW1lXCI6XCJFZmZpbmdoYW0gSnVuY3Rpb25cIixcImxhdGl0dWRlXCI6NTEuMjkxNDk0MTYsXCJsb25naXR1ZGVcIjotMC40MTk5NTYyMzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJFRkZcIn0se1wibmFtZVwiOlwiRWdoYW1cIixcImxhdGl0dWRlXCI6NTEuNDI5NjQ5ODEsXCJsb25naXR1ZGVcIjotMC41NDY1MDU3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkVHSFwifSx7XCJuYW1lXCI6XCJFc2hlclwiLFwibGF0aXR1ZGVcIjo1MS4zNzk4OTIyNixcImxvbmdpdHVkZVwiOi0wLjM1MzMyNjIzMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkVTSFwifSx7XCJuYW1lXCI6XCJFd2VsbCBXZXN0XCIsXCJsYXRpdHVkZVwiOjUxLjM1MDA0NTE1LFwibG9uZ2l0dWRlXCI6LTAuMjU2OTg2ODU0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiRVdXXCJ9LHtcIm5hbWVcIjpcIkZhcmVoYW1cIixcImxhdGl0dWRlXCI6NTAuODUzMDIxNzUsXCJsb25naXR1ZGVcIjotMS4xOTIwMzc4OTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJGUk1cIn0se1wibmFtZVwiOlwiRmFybmJvcm91Z2ggKE1haW4pXCIsXCJsYXRpdHVkZVwiOjUxLjI5NjYwNTEzLFwibG9uZ2l0dWRlXCI6LTAuNzU1NzI1OTA2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiRk5CXCJ9LHtcIm5hbWVcIjpcIkZhcm5jb21iZVwiLFwibGF0aXR1ZGVcIjo1MS4xOTcxNTA0NSxcImxvbmdpdHVkZVwiOi0wLjYwNDU0NTQzNixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkZOQ1wifSx7XCJuYW1lXCI6XCJGYXJuaGFtXCIsXCJsYXRpdHVkZVwiOjUxLjIxMTkwMjExLFwibG9uZ2l0dWRlXCI6LTAuNzkyNDI4OTA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiRk5IXCJ9LHtcIm5hbWVcIjpcIkZlbHRoYW1cIixcImxhdGl0dWRlXCI6NTEuNDQ3OTAxNixcImxvbmdpdHVkZVwiOi0wLjQwOTgyNzc5MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkZFTFwifSx7XCJuYW1lXCI6XCJGZW5pdG9uXCIsXCJsYXRpdHVkZVwiOjUwLjc4NjQ0Mzg3LFwibG9uZ2l0dWRlXCI6LTMuMjg1MzU3MjQzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiRk5UXCJ9LHtcIm5hbWVcIjpcIkZsZWV0XCIsXCJsYXRpdHVkZVwiOjUxLjI5MDYzNDU5LFwibG9uZ2l0dWRlXCI6LTAuODMwODA4MDEzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiRkxFXCJ9LHtcIm5hbWVcIjpcIkZyYXR0b25cIixcImxhdGl0dWRlXCI6NTAuNzk2MzI1MTUsXCJsb25naXR1ZGVcIjotMS4wNzM5ODA1MDEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJGVE5cIn0se1wibmFtZVwiOlwiRnJpbWxleVwiLFwibGF0aXR1ZGVcIjo1MS4zMTE4NjIxNixcImxvbmdpdHVkZVwiOi0wLjc0Njk5MTIwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkZNTFwifSx7XCJuYW1lXCI6XCJGdWx3ZWxsXCIsXCJsYXRpdHVkZVwiOjUxLjQzMzkzNzk5LFwibG9uZ2l0dWRlXCI6LTAuMzQ5NDY5OTMxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiRkxXXCJ9LHtcIm5hbWVcIjpcIkdpbGxpbmdoYW0gKERvcnNldClcIixcImxhdGl0dWRlXCI6NTEuMDM0MDIxMDUsXCJsb25naXR1ZGVcIjotMi4yNzI2MzkyMjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJHSUxcIn0se1wibmFtZVwiOlwiR29kYWxtaW5nXCIsXCJsYXRpdHVkZVwiOjUxLjE4NjU4Mjk2LFwibG9uZ2l0dWRlXCI6LTAuNjE4ODU5MzUyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiR09EXCJ9LHtcIm5hbWVcIjpcIkdyYXRlbGV5XCIsXCJsYXRpdHVkZVwiOjUxLjE3MDA1NzIxLFwibG9uZ2l0dWRlXCI6LTEuNjIwNzg0NTQ5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiR1JUXCJ9LHtcIm5hbWVcIjpcIkd1aWxkZm9yZFwiLFwibGF0aXR1ZGVcIjo1MS4yMzY5Njc4NixcImxvbmdpdHVkZVwiOi0wLjU4MDQyMDY4MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkdMRFwifSx7XCJuYW1lXCI6XCJIYW1ibGVcIixcImxhdGl0dWRlXCI6NTAuODcxMzYzNixcImxvbmdpdHVkZVwiOi0xLjMyOTE2NjQ5MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkhNRVwifSx7XCJuYW1lXCI6XCJIYW1wdG9uIChMb25kb24pXCIsXCJsYXRpdHVkZVwiOjUxLjQxNTkwOTYzLFwibG9uZ2l0dWRlXCI6LTAuMzcyMTA4NjE2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiSE1QXCJ9LHtcIm5hbWVcIjpcIkhhbXB0b24gQ291cnRcIixcImxhdGl0dWRlXCI6NTEuNDAyNTU3NjQsXCJsb25naXR1ZGVcIjotMC4zNDI3NTAwNTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJITUNcIn0se1wibmFtZVwiOlwiSGFtcHRvbiBXaWNrXCIsXCJsYXRpdHVkZVwiOjUxLjQxNDUyNjczLFwibG9uZ2l0dWRlXCI6LTAuMzEyNDkwOTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJITVdcIn0se1wibmFtZVwiOlwiSGFtd29ydGh5XCIsXCJsYXRpdHVkZVwiOjUwLjcyNTE3ODIyLFwibG9uZ2l0dWRlXCI6LTIuMDE5MzY3MTYxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiSEFNXCJ9LHtcIm5hbWVcIjpcIkhhc2xlbWVyZVwiLFwibGF0aXR1ZGVcIjo1MS4wODg4NDIxMyxcImxvbmdpdHVkZVwiOi0wLjcxOTM3MTcxOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkhTTFwifSx7XCJuYW1lXCI6XCJIYXZhbnRcIixcImxhdGl0dWRlXCI6NTAuODU0NDE0NzgsXCJsb25naXR1ZGVcIjotMC45ODE2MDYzNjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJIQVZcIn0se1wibmFtZVwiOlwiSGVkZ2UgRW5kXCIsXCJsYXRpdHVkZVwiOjUwLjkzMjMxMDE3LFwibG9uZ2l0dWRlXCI6LTEuMjk0NTA2NDcyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiSERFXCJ9LHtcIm5hbWVcIjpcIkhlcnNoYW1cIixcImxhdGl0dWRlXCI6NTEuMzc2OTgyMDEsXCJsb25naXR1ZGVcIjotMC4zODk3OTkwOTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJIRVJcIn0se1wibmFtZVwiOlwiSGlsc2VhXCIsXCJsYXRpdHVkZVwiOjUwLjgyODEyNzE2LFwibG9uZ2l0dWRlXCI6LTEuMDU4NTg0MzE5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiSExTXCJ9LHtcIm5hbWVcIjpcIkhpbmNobGV5IFdvb2RcIixcImxhdGl0dWRlXCI6NTEuMzc0OTk5NDYsXCJsb25naXR1ZGVcIjotMC4zNDA1MjY5NjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJIWVdcIn0se1wibmFtZVwiOlwiSGludG9uIEFkbWlyYWxcIixcImxhdGl0dWRlXCI6NTAuNzUyNjI2NTEsXCJsb25naXR1ZGVcIjotMS43MTQxMjgxMjksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJITkFcIn0se1wibmFtZVwiOlwiSG9sdG9uIEhlYXRoXCIsXCJsYXRpdHVkZVwiOjUwLjcxMTM5NDY2LFwibG9uZ2l0dWRlXCI6LTIuMDc3ODU2NjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJIT0xcIn0se1wibmFtZVwiOlwiSG9uaXRvblwiLFwibGF0aXR1ZGVcIjo1MC43OTY1NzIwMixcImxvbmdpdHVkZVwiOi0zLjE4Njc0NTg1NixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkhPTlwifSx7XCJuYW1lXCI6XCJIb29rXCIsXCJsYXRpdHVkZVwiOjUxLjI3OTk5ODAyLFwibG9uZ2l0dWRlXCI6LTAuOTYxNjQxODQ1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiSE9LXCJ9LHtcIm5hbWVcIjpcIkhvcnNsZXlcIixcImxhdGl0dWRlXCI6NTEuMjc5MzQ1NSxcImxvbmdpdHVkZVwiOi0wLjQzNTQwMDAwMSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkhTWVwifSx7XCJuYW1lXCI6XCJIb3Vuc2xvd1wiLFwibGF0aXR1ZGVcIjo1MS40NjI1MjgwMixcImxvbmdpdHVkZVwiOi0wLjM2MTgyNjg4OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkhPVVwifSx7XCJuYW1lXCI6XCJJc2xld29ydGhcIixcImxhdGl0dWRlXCI6NTEuNDc0NzY2ODIsXCJsb25naXR1ZGVcIjotMC4zMzY5MDg1MjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJJU0xcIn0se1wibmFtZVwiOlwiS2VtcHRvbiBQYXJrIFJhY2Vjb3Vyc2VcIixcImxhdGl0dWRlXCI6NTEuNDIwOTg1NixcImxvbmdpdHVkZVwiOi0wLjQwOTc0MTA1MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIktNUFwifSx7XCJuYW1lXCI6XCJLZXcgQnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUxLjQ4OTM2MjYzLFwibG9uZ2l0dWRlXCI6LTAuMjg4ODQyMjEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJLV0JcIn0se1wibmFtZVwiOlwiS2luZ3N0b25cIixcImxhdGl0dWRlXCI6NTEuNDEyNzUzNDEsXCJsb25naXR1ZGVcIjotMC4zMDExNjY4ODEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJLTkdcIn0se1wibmFtZVwiOlwiTGlwaG9va1wiLFwibGF0aXR1ZGVcIjo1MS4wNzEzMDk3NCxcImxvbmdpdHVkZVwiOi0wLjgwMDIzMTI1MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkxJUFwifSx7XCJuYW1lXCI6XCJMaXNzXCIsXCJsYXRpdHVkZVwiOjUxLjA0MzU2NDAzLFwibG9uZ2l0dWRlXCI6LTAuODkyODcyNjg3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiTElTXCJ9LHtcIm5hbWVcIjpcIkxvbmRvbiBSb2FkIChHdWlsZGZvcmQpXCIsXCJsYXRpdHVkZVwiOjUxLjI0MDY0NzQ1LFwibG9uZ2l0dWRlXCI6LTAuNTY1MDY0MTY2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiTFJEXCJ9LHtcIm5hbWVcIjpcIkxvbmdjcm9zc1wiLFwibGF0aXR1ZGVcIjo1MS4zODUxNzQ3MyxcImxvbmdpdHVkZVwiOi0wLjU5NDU2NTEzOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkxOR1wifSx7XCJuYW1lXCI6XCJMeW1pbmd0b24gUGllclwiLFwibGF0aXR1ZGVcIjo1MC43NTgyODY3MSxcImxvbmdpdHVkZVwiOi0xLjUyOTQ1NzUzNyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkxZUFwifSx7XCJuYW1lXCI6XCJMeW1pbmd0b24gVG93blwiLFwibGF0aXR1ZGVcIjo1MC43NjA4OTg1NSxcImxvbmdpdHVkZVwiOi0xLjUzNzE3MjgxMyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIkxZVFwifSx7XCJuYW1lXCI6XCJNYWxkZW4gTWFub3JcIixcImxhdGl0dWRlXCI6NTEuMzg0NjM5MjcsXCJsb25naXR1ZGVcIjotMC4yNjExMzM4OTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJNQUxcIn0se1wibmFtZVwiOlwiTWFydGlucyBIZXJvblwiLFwibGF0aXR1ZGVcIjo1MS40MDc1OTc0MSxcImxvbmdpdHVkZVwiOi0wLjcyNDY3Nzc5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIk1BT1wifSx7XCJuYW1lXCI6XCJNaWNoZWxkZXZlclwiLFwibGF0aXR1ZGVcIjo1MS4xODIzOTA3NyxcImxvbmdpdHVkZVwiOi0xLjI2MDY3ODQzMSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIk1JQ1wifSx7XCJuYW1lXCI6XCJNaWxmb3JkIChTdXJyZXkpXCIsXCJsYXRpdHVkZVwiOjUxLjE2MzMxNSxcImxvbmdpdHVkZVwiOi0wLjYzNjk0NjA0OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIk1MRlwifSx7XCJuYW1lXCI6XCJNaWxsYnJvb2sgKEhhbnRzKVwiLFwibGF0aXR1ZGVcIjo1MC45MTE0ODYzOCxcImxvbmdpdHVkZVwiOi0xLjQzMzg0OTY0MyxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIk1CS1wifSx7XCJuYW1lXCI6XCJNb3JldG9uIChEb3JzZXQpXCIsXCJsYXRpdHVkZVwiOjUwLjcwMTEwODUxLFwibG9uZ2l0dWRlXCI6LTIuMzEyOTAyMzE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiTVROXCJ9LHtcIm5hbWVcIjpcIk1vcnRsYWtlXCIsXCJsYXRpdHVkZVwiOjUxLjQ2ODM1MjY2LFwibG9uZ2l0dWRlXCI6LTAuMjY2NTkxNTg0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiTVRMXCJ9LHtcIm5hbWVcIjpcIk1vdHNwdXIgUGFya1wiLFwibGF0aXR1ZGVcIjo1MS4zOTUxMDI2NixcImxvbmdpdHVkZVwiOi0wLjIzOTE3NDUyNSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIk1PVFwifSx7XCJuYW1lXCI6XCJOZXRsZXlcIixcImxhdGl0dWRlXCI6NTAuODc0ODUyNixcImxvbmdpdHVkZVwiOi0xLjM0MTc2NjExOCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIk5UTFwifSx7XCJuYW1lXCI6XCJOZXcgTWFsZGVuXCIsXCJsYXRpdHVkZVwiOjUxLjQwNDA3NjQzLFwibG9uZ2l0dWRlXCI6LTAuMjU1OTM5NTA3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiTkVNXCJ9LHtcIm5hbWVcIjpcIk5ldyBNaWx0b25cIixcImxhdGl0dWRlXCI6NTAuNzU1NzM5MjksXCJsb25naXR1ZGVcIjotMS42NTc4MTI2OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIk5XTVwifSx7XCJuYW1lXCI6XCJOb3JiaXRvblwiLFwibGF0aXR1ZGVcIjo1MS40MTI0OTU2NCxcImxvbmdpdHVkZVwiOi0wLjI4NDA5MjQ2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiTkJUXCJ9LHtcIm5hbWVcIjpcIk5vcnRoIFNoZWVuXCIsXCJsYXRpdHVkZVwiOjUxLjQ2NTQwNjkxLFwibG9uZ2l0dWRlXCI6LTAuMjg2NDI3Mjc3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiTlNIXCJ9LHtcIm5hbWVcIjpcIk92ZXJ0b25cIixcImxhdGl0dWRlXCI6NTEuMjU0MDU1MzIsXCJsb25naXR1ZGVcIjotMS4yNjAwMTY4NDIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJPVlJcIn0se1wibmFtZVwiOlwiT3hzaG90dFwiLFwibGF0aXR1ZGVcIjo1MS4zMzYzOTU3NyxcImxvbmdpdHVkZVwiOi0wLjM2MjQwODI0NixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIk9YU1wifSx7XCJuYW1lXCI6XCJQYXJrc3RvbmUgKERvcnNldClcIixcImxhdGl0dWRlXCI6NTAuNzIzMTAwMjksXCJsb25naXR1ZGVcIjotMS45NDg5NTYyNTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJQS1NcIn0se1wibmFtZVwiOlwiUGV0ZXJzZmllbGRcIixcImxhdGl0dWRlXCI6NTEuMDA2NzE4MzQsXCJsb25naXR1ZGVcIjotMC45NDExNDM4MzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJQVFJcIn0se1wibmFtZVwiOlwiUGluaG9lXCIsXCJsYXRpdHVkZVwiOjUwLjczNzU2NzY5LFwibG9uZ2l0dWRlXCI6LTMuNDcxNTE2NzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJQSU5cIn0se1wibmFtZVwiOlwiUG9rZXNkb3duXCIsXCJsYXRpdHVkZVwiOjUwLjczMTA3MzkzLFwibG9uZ2l0dWRlXCI6LTEuODI1MTA2ODQ1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiUE9LXCJ9LHtcIm5hbWVcIjpcIlBvb2xlXCIsXCJsYXRpdHVkZVwiOjUwLjcxOTQxNDE4LFwibG9uZ2l0dWRlXCI6LTEuOTgzMzI2NzM2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiUE9PXCJ9LHtcIm5hbWVcIjpcIlBvcnRjaGVzdGVyXCIsXCJsYXRpdHVkZVwiOjUwLjg0ODczNzY1LFwibG9uZ2l0dWRlXCI6LTEuMTI0MjM4Nzg4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiUFRDXCJ9LHtcIm5hbWVcIjpcIlBvcnRzbW91dGggJiBTb3V0aHNlYVwiLFwibGF0aXR1ZGVcIjo1MC43OTg0ODE3NCxcImxvbmdpdHVkZVwiOi0xLjA5MDkwOTMwMixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIlBNU1wifSx7XCJuYW1lXCI6XCJQb3J0c21vdXRoIEhhcmJvdXJcIixcImxhdGl0dWRlXCI6NTAuNzk2OTQ4NzMsXCJsb25naXR1ZGVcIjotMS4xMDc4Mzg5NSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIlBNSFwifSx7XCJuYW1lXCI6XCJQdXRuZXlcIixcImxhdGl0dWRlXCI6NTEuNDYxMzA1OTYsXCJsb25naXR1ZGVcIjotMC4yMTY0NzMwMzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJQVVRcIn0se1wibmFtZVwiOlwiUXVlZW5zdG93biBSb2FkIChCYXR0ZXJzZWEpXCIsXCJsYXRpdHVkZVwiOjUxLjQ3NDYxNDIyLFwibG9uZ2l0dWRlXCI6LTAuMTQ2ODMzMDY5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiUVJCXCJ9LHtcIm5hbWVcIjpcIlJheW5lcyBQYXJrXCIsXCJsYXRpdHVkZVwiOjUxLjQwOTM1MjkxLFwibG9uZ2l0dWRlXCI6LTAuMjI5OTk5MzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJSQVlcIn0se1wibmFtZVwiOlwiUmVkYnJpZGdlXCIsXCJsYXRpdHVkZVwiOjUwLjkxOTkzMDEyLFwibG9uZ2l0dWRlXCI6LTEuNDcwMTY3ODYzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiUkRCXCJ9LHtcIm5hbWVcIjpcIlJpY2htb25kIChMb25kb24pXCIsXCJsYXRpdHVkZVwiOjUxLjQ2MzEwMTY0LFwibG9uZ2l0dWRlXCI6LTAuMzAxMDM5NTY4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiUk1EXCJ9LHtcIm5hbWVcIjpcIlJvd2xhbmRzIENhc3RsZVwiLFwibGF0aXR1ZGVcIjo1MC44OTIxNjEwMSxcImxvbmdpdHVkZVwiOi0wLjk1NzQ2NDcwNSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIlJMTlwifSx7XCJuYW1lXCI6XCJTYWxpc2J1cnlcIixcImxhdGl0dWRlXCI6NTEuMDcwNTQ0MDQsXCJsb25naXR1ZGVcIjotMS44MDYzODkwOTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJTQUxcIn0se1wibmFtZVwiOlwiU2hhd2ZvcmRcIixcImxhdGl0dWRlXCI6NTEuMDIxODE0ODgsXCJsb25naXR1ZGVcIjotMS4zMjgxOTUyMDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJTSFdcIn0se1wibmFtZVwiOlwiU2hlcHBlcnRvblwiLFwibGF0aXR1ZGVcIjo1MS4zOTY4MDY2NCxcImxvbmdpdHVkZVwiOi0wLjQ0Njc3NjgxOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIlNIUFwifSx7XCJuYW1lXCI6XCJTaGVyYm9ybmVcIixcImxhdGl0dWRlXCI6NTAuOTQ0MDA2MzYsXCJsb25naXR1ZGVcIjotMi41MTMwODE2OTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJTSEVcIn0se1wibmFtZVwiOlwiU2hvbGluZ1wiLFwibGF0aXR1ZGVcIjo1MC44OTY3NDAzMSxcImxvbmdpdHVkZVwiOi0xLjM2NDM1MTUwMixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIlNIT1wifSx7XCJuYW1lXCI6XCJTb3V0aGFtcHRvbiBBaXJwb3J0IFBhcmt3YXlcIixcImxhdGl0dWRlXCI6NTAuOTUwODA2NzMsXCJsb25naXR1ZGVcIjotMS4zNjMxMDE4MDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJTT0FcIn0se1wibmFtZVwiOlwiU291dGhhbXB0b24gQ2VudHJhbFwiLFwibGF0aXR1ZGVcIjo1MC45MDc0Mzg2NCxcImxvbmdpdHVkZVwiOi0xLjQxMzYwMjQ3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIlNPVVwifSx7XCJuYW1lXCI6XCJTdCBEZW55c1wiLFwibGF0aXR1ZGVcIjo1MC45MjIwNDczNCxcImxvbmdpdHVkZVwiOi0xLjM4ODE5MzQ5OSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIlNETlwifSx7XCJuYW1lXCI6XCJTdCBNYXJnYXJldHMgKExvbmRvbilcIixcImxhdGl0dWRlXCI6NTEuNDU1MTA2NjksXCJsb25naXR1ZGVcIjotMC4zMjAzNTA2ODUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJTTUdcIn0se1wibmFtZVwiOlwiU3RhaW5lc1wiLFwibGF0aXR1ZGVcIjo1MS40MzI0NTg0MixcImxvbmdpdHVkZVwiOi0wLjUwMzE1NjgwNSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIlNOU1wifSx7XCJuYW1lXCI6XCJTdG9uZWxlaWdoXCIsXCJsYXRpdHVkZVwiOjUxLjM2MzQwMTMsXCJsb25naXR1ZGVcIjotMC4yNDg2NjUxMzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJTTkxcIn0se1wibmFtZVwiOlwiU3RyYXdiZXJyeSBIaWxsXCIsXCJsYXRpdHVkZVwiOjUxLjQzOTczNDAyLFwibG9uZ2l0dWRlXCI6LTAuMzM5NjIwMzk0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiU1RXXCJ9LHtcIm5hbWVcIjpcIlN1bmJ1cnlcIixcImxhdGl0dWRlXCI6NTEuNDE4MzE1NixcImxvbmdpdHVkZVwiOi0wLjQxNzc3MjY0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiU1VVXCJ9LHtcIm5hbWVcIjpcIlN1bm5pbmdkYWxlXCIsXCJsYXRpdHVkZVwiOjUxLjM5MTk0MjU5LFwibG9uZ2l0dWRlXCI6LTAuNjMzMDM2OTAzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiU05HXCJ9LHtcIm5hbWVcIjpcIlN1bm55bWVhZHNcIixcImxhdGl0dWRlXCI6NTEuNDY5OTAxMzksXCJsb25naXR1ZGVcIjotMC41NTkwMDU4MjUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJTTllcIn0se1wibmFtZVwiOlwiU3VyYml0b25cIixcImxhdGl0dWRlXCI6NTEuMzkyNDYxMjksXCJsb25naXR1ZGVcIjotMC4zMDM5NTk4NTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJTVVJcIn0se1wibmFtZVwiOlwiU3dhbndpY2tcIixcImxhdGl0dWRlXCI6NTAuODc1NjU4ODQsXCJsb25naXR1ZGVcIjotMS4yNjU4NTUwNjgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJTTldcIn0se1wibmFtZVwiOlwiU3dheVwiLFwibGF0aXR1ZGVcIjo1MC43ODQ2OTAyMixcImxvbmdpdHVkZVwiOi0xLjYxMDAwODQ3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIlNXWVwifSx7XCJuYW1lXCI6XCJTd2F5dGhsaW5nXCIsXCJsYXRpdHVkZVwiOjUwLjk0MTEzOTQ5LFwibG9uZ2l0dWRlXCI6LTEuMzc2NDEzOTY2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiU1dHXCJ9LHtcIm5hbWVcIjpcIlN5b24gTGFuZVwiLFwibGF0aXR1ZGVcIjo1MS40ODE3OTMyNixcImxvbmdpdHVkZVwiOi0wLjMyNTEzMTE1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiU1lMXCJ9LHtcIm5hbWVcIjpcIlRlZGRpbmd0b25cIixcImxhdGl0dWRlXCI6NTEuNDI0NTI3OTksXCJsb25naXR1ZGVcIjotMC4zMzI2OTE4ODgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJURURcIn0se1wibmFtZVwiOlwiVGVtcGxlY29tYmVcIixcImxhdGl0dWRlXCI6NTEuMDAxMTMwMzEsXCJsb25naXR1ZGVcIjotMi40MTc1MTMxMjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJUTUNcIn0se1wibmFtZVwiOlwiVGhhbWVzIERpdHRvblwiLFwibGF0aXR1ZGVcIjo1MS4zODkwMDY2OCxcImxvbmdpdHVkZVwiOi0wLjMzOTAxNDA5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiVEhEXCJ9LHtcIm5hbWVcIjpcIlRpc2J1cnlcIixcImxhdGl0dWRlXCI6NTEuMDYwODM5OTksXCJsb25naXR1ZGVcIjotMi4wNzkwMTIwOTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJUSVNcIn0se1wibmFtZVwiOlwiVG9sd29ydGhcIixcImxhdGl0dWRlXCI6NTEuMzc2ODE5NTQsXCJsb25naXR1ZGVcIjotMC4yNzk2NzkyNzgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJUT0xcIn0se1wibmFtZVwiOlwiVG90dG9uXCIsXCJsYXRpdHVkZVwiOjUwLjkxODAwNTQ0LFwibG9uZ2l0dWRlXCI6LTEuNDgyMTM5NzUzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiVFROXCJ9LHtcIm5hbWVcIjpcIlR3aWNrZW5oYW1cIixcImxhdGl0dWRlXCI6NTEuNDUwMzc2NTUsXCJsb25naXR1ZGVcIjotMC4zMjkxNTk2ODYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJUV0lcIn0se1wibmFtZVwiOlwiVXBwZXIgSGFsbGlmb3JkXCIsXCJsYXRpdHVkZVwiOjUxLjQxMzA2OTUxLFwibG9uZ2l0dWRlXCI6LTAuNDMwODk2MTYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJVUEhcIn0se1wibmFtZVwiOlwiVXB3ZXlcIixcImxhdGl0dWRlXCI6NTAuNjQ4MjU2OTEsXCJsb25naXR1ZGVcIjotMi40NjYxNDY4NzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJVUFdcIn0se1wibmFtZVwiOlwiVmF1eGhhbGxcIixcImxhdGl0dWRlXCI6NTEuNDg2MTkzNDUsXCJsb25naXR1ZGVcIjotMC4xMjI4NzA3ODMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJWWEhcIn0se1wibmFtZVwiOlwiVmlyZ2luaWEgV2F0ZXJcIixcImxhdGl0dWRlXCI6NTEuNDAxOTU3OTgsXCJsb25naXR1ZGVcIjotMC41NjIyMjA2NTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJWSVJcIn0se1wibmFtZVwiOlwiV2FsdG9uLW9uLVRoYW1lc1wiLFwibGF0aXR1ZGVcIjo1MS4zNzI5MzIxOCxcImxvbmdpdHVkZVwiOi0wLjQxNDYyNTE5NixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIldBTFwifSx7XCJuYW1lXCI6XCJXYW5ib3JvdWdoXCIsXCJsYXRpdHVkZVwiOjUxLjI0NDUyMTM3LFwibG9uZ2l0dWRlXCI6LTAuNjY3NTg1ODI4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiV0FOXCJ9LHtcIm5hbWVcIjpcIldhbmRzd29ydGggVG93blwiLFwibGF0aXR1ZGVcIjo1MS40NjEwNTEwNSxcImxvbmdpdHVkZVwiOi0wLjE4ODEyMzEwMixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIldOVFwifSx7XCJuYW1lXCI6XCJXYXJlaGFtIChEb3JzZXQpXCIsXCJsYXRpdHVkZVwiOjUwLjY5Mjg3NDE3LFwibG9uZ2l0dWRlXCI6LTIuMTE1MjU5NTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJXUk1cIn0se1wibmFtZVwiOlwiV2VzdCBCeWZsZWV0XCIsXCJsYXRpdHVkZVwiOjUxLjMzOTIyNjEyLFwibG9uZ2l0dWRlXCI6LTAuNTA1NDc4MTQ0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiV0JZXCJ9LHtcIm5hbWVcIjpcIldleWJyaWRnZVwiLFwibGF0aXR1ZGVcIjo1MS4zNjE3NzIsXCJsb25naXR1ZGVcIjotMC40NTc3MTU3NTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJXWUJcIn0se1wibmFtZVwiOlwiV2V5bW91dGhcIixcImxhdGl0dWRlXCI6NTAuNjE2MDE2MTIsXCJsb25naXR1ZGVcIjotMi40NTQ4ODc3MjIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJXRVlcIn0se1wibmFtZVwiOlwiV2hpbXBsZVwiLFwibGF0aXR1ZGVcIjo1MC43NjgwMTgzMixcImxvbmdpdHVkZVwiOi0zLjM1NDM0MDY4MixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIldITVwifSx7XCJuYW1lXCI6XCJXaGl0Y2h1cmNoIChIYW50cylcIixcImxhdGl0dWRlXCI6NTEuMjM3NDExMDksXCJsb25naXR1ZGVcIjotMS4zMzgxODEyMDYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJXQ0hcIn0se1wibmFtZVwiOlwiV2hpdHRvbiAoTG9uZG9uKVwiLFwibGF0aXR1ZGVcIjo1MS40NDk2MTA2MyxcImxvbmdpdHVkZVwiOi0wLjM1NzY4Mzg3NixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIldUTlwifSx7XCJuYW1lXCI6XCJXaW1ibGVkb25cIixcImxhdGl0dWRlXCI6NTEuNDIxNTg1NTIsXCJsb25naXR1ZGVcIjotMC4yMDY0OTg4MjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJXSU1cIn0se1wibmFtZVwiOlwiV2luY2hlc3RlclwiLFwibGF0aXR1ZGVcIjo1MS4wNjcyMDUxMixcImxvbmdpdHVkZVwiOi0xLjMxOTcwMzAwMixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIldJTlwifSx7XCJuYW1lXCI6XCJXaW5jaGZpZWxkXCIsXCJsYXRpdHVkZVwiOjUxLjI4NDk0OTg5LFwibG9uZ2l0dWRlXCI6LTAuOTA2OTgxOTAyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiV05GXCJ9LHtcIm5hbWVcIjpcIldpbmRzb3IgJiBFdG9uIFJpdmVyc2lkZVwiLFwibGF0aXR1ZGVcIjo1MS40ODU2NTQ5MSxcImxvbmdpdHVkZVwiOi0wLjYwNjUyODkxNSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIldOUlwifSx7XCJuYW1lXCI6XCJXaW5uZXJzaFwiLFwibGF0aXR1ZGVcIjo1MS40MzAyNzc0MSxcImxvbmdpdHVkZVwiOi0wLjg3Njg2MTY0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiV05TXCJ9LHtcIm5hbWVcIjpcIldpbm5lcnNoIFRyaWFuZ2xlXCIsXCJsYXRpdHVkZVwiOjUxLjQzNjczNjcsXCJsb25naXR1ZGVcIjotMC44OTEzMzUwNixcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIldUSVwifSx7XCJuYW1lXCI6XCJXaXRsZXlcIixcImxhdGl0dWRlXCI6NTEuMTMzMTU2ODcsXCJsb25naXR1ZGVcIjotMC42NDU3ODExNDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJXVFlcIn0se1wibmFtZVwiOlwiV29raW5nXCIsXCJsYXRpdHVkZVwiOjUxLjMxODQ2OTI3LFwibG9uZ2l0dWRlXCI6LTAuNTU2OTU0MTg4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiV09LXCJ9LHtcIm5hbWVcIjpcIldva2luZ2hhbVwiLFwibGF0aXR1ZGVcIjo1MS40MTEyMjE3MixcImxvbmdpdHVkZVwiOi0wLjg0MjU0NTE5OCxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIldLTVwifSx7XCJuYW1lXCI6XCJXb29sXCIsXCJsYXRpdHVkZVwiOjUwLjY4MTYyMzQxLFwibG9uZ2l0dWRlXCI6LTIuMjIxNDc1ODc1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiV09PXCJ9LHtcIm5hbWVcIjpcIldvb2xzdG9uXCIsXCJsYXRpdHVkZVwiOjUwLjg5ODkxMzEzLFwibG9uZ2l0dWRlXCI6LTEuMzc3MDYzNDU2LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiV0xTXCJ9LHtcIm5hbWVcIjpcIldvcmNlc3RlciBQYXJrXCIsXCJsYXRpdHVkZVwiOjUxLjM4MTI1MzcsXCJsb25naXR1ZGVcIjotMC4yNDUxNjcwMjMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJXQ1BcIn0se1wibmFtZVwiOlwiV29ycGxlc2RvblwiLFwibGF0aXR1ZGVcIjo1MS4yODkwMTY2LFwibG9uZ2l0dWRlXCI6LTAuNTgyNTczNTk3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJTV1wiLFwiY3JzQ29kZVwiOlwiV1BMXCJ9LHtcIm5hbWVcIjpcIldyYXlzYnVyeVwiLFwibGF0aXR1ZGVcIjo1MS40NTc3MTIxOSxcImxvbmdpdHVkZVwiOi0wLjU0MTkxNTEwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiU1dcIixcImNyc0NvZGVcIjpcIldSWVwifSx7XCJuYW1lXCI6XCJZZW92aWwgSnVuY3Rpb25cIixcImxhdGl0dWRlXCI6NTAuOTI0NzI4OTYsXCJsb25naXR1ZGVcIjotMi42MTMxNzkxMzYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlNXXCIsXCJjcnNDb2RlXCI6XCJZVkpcIn0se1wibmFtZVwiOlwiQmVkZm9yZFwiLFwibGF0aXR1ZGVcIjo1Mi4xMzYyLFwibG9uZ2l0dWRlXCI6LTAuNDc5NDQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRMXCIsXCJjcnNDb2RlXCI6XCJCRE1cIn0se1wibmFtZVwiOlwiQ2l0eSBUaGFtZXNsaW5rXCIsXCJsYXRpdHVkZVwiOjUxLjUxMzk0LFwibG9uZ2l0dWRlXCI6LTAuMTAzNTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRMXCIsXCJjcnNDb2RlXCI6XCJDVEtcIn0se1wibmFtZVwiOlwiQ3JpY2tsZXdvb2RcIixcImxhdGl0dWRlXCI6NTEuNTU4NzIsXCJsb25naXR1ZGVcIjotMC4yMTIyMyxcInN0YXRpb25PcGVyYXRvclwiOlwiVExcIixcImNyc0NvZGVcIjpcIkNSSVwifSx7XCJuYW1lXCI6XCJFbGVwaGFudCAmIENhc3RsZVwiLFwibGF0aXR1ZGVcIjo1MS40OTQwOSxcImxvbmdpdHVkZVwiOi0wLjA5OTUxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiRVBIXCJ9LHtcIm5hbWVcIjpcIkVsc3RyZWUgJiBCb3JlaGFtd29vZFwiLFwibGF0aXR1ZGVcIjo1MS42NTI4OSxcImxvbmdpdHVkZVwiOi0wLjI3OTgsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRMXCIsXCJjcnNDb2RlXCI6XCJFTFNcIn0se1wibmFtZVwiOlwiRmxpdHdpY2tcIixcImxhdGl0dWRlXCI6NTIuMDAzNjUsXCJsb25naXR1ZGVcIjotMC40OTUyNixcInN0YXRpb25PcGVyYXRvclwiOlwiVExcIixcImNyc0NvZGVcIjpcIkZMVFwifSx7XCJuYW1lXCI6XCJIYXJsaW5ndG9uIChCZWRzKVwiLFwibGF0aXR1ZGVcIjo1MS45NjIwNyxcImxvbmdpdHVkZVwiOi0wLjQ5NTY4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiSExOXCJ9LHtcIm5hbWVcIjpcIkhhcnBlbmRlblwiLFwibGF0aXR1ZGVcIjo1MS44MTQ4OCxcImxvbmdpdHVkZVwiOi0wLjM1MTk4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiSFBEXCJ9LHtcIm5hbWVcIjpcIkhheWRvbnMgUm9hZFwiLFwibGF0aXR1ZGVcIjo1MS40MjU0NSxcImxvbmdpdHVkZVwiOi0wLjE4ODgxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiSFlSXCJ9LHtcIm5hbWVcIjpcIkhlbmRvblwiLFwibGF0aXR1ZGVcIjo1MS41ODAwOCxcImxvbmdpdHVkZVwiOi0wLjIzODY3LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiSEVOXCJ9LHtcIm5hbWVcIjpcIkxlYWdyYXZlXCIsXCJsYXRpdHVkZVwiOjUxLjkwNTE3LFwibG9uZ2l0dWRlXCI6LTAuNDU4NTEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRMXCIsXCJjcnNDb2RlXCI6XCJMRUFcIn0se1wibmFtZVwiOlwiTG9uZG9uIEJsYWNrZnJpYXJzXCIsXCJsYXRpdHVkZVwiOjUxLjUxMTgxLFwibG9uZ2l0dWRlXCI6LTAuMTAzMzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRMXCIsXCJjcnNDb2RlXCI6XCJCRlJcIn0se1wibmFtZVwiOlwiTG91Z2hib3JvdWdoIEp1bmN0aW9uXCIsXCJsYXRpdHVkZVwiOjUxLjQ2NjcxLFwibG9uZ2l0dWRlXCI6LTAuMTAyNTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRMXCIsXCJjcnNDb2RlXCI6XCJMR0pcIn0se1wibmFtZVwiOlwiTHV0b25cIixcImxhdGl0dWRlXCI6NTEuODgyMzEsXCJsb25naXR1ZGVcIjotMC40MTQwNCxcInN0YXRpb25PcGVyYXRvclwiOlwiVExcIixcImNyc0NvZGVcIjpcIkxVVFwifSx7XCJuYW1lXCI6XCJMdXRvbiBBaXJwb3J0IFBhcmt3YXlcIixcImxhdGl0dWRlXCI6NTEuODcyODYsXCJsb25naXR1ZGVcIjotMC4zOTYyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiTFROXCJ9LHtcIm5hbWVcIjpcIk1pbGwgSGlsbCBCcm9hZHdheVwiLFwibGF0aXR1ZGVcIjo1MS42MTI4OCxcImxvbmdpdHVkZVwiOi0wLjI0OTU0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiTUlMXCJ9LHtcIm5hbWVcIjpcIk1vcmRlbiBTb3V0aFwiLFwibGF0aXR1ZGVcIjo1MS4zOTYzMSxcImxvbmdpdHVkZVwiOi0wLjIwMDMxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiTURTXCJ9LHtcIm5hbWVcIjpcIlJhZGxldHRcIixcImxhdGl0dWRlXCI6NTEuNjg1MTksXCJsb25naXR1ZGVcIjotMC4zMTcyNCxcInN0YXRpb25PcGVyYXRvclwiOlwiVExcIixcImNyc0NvZGVcIjpcIlJEVFwifSx7XCJuYW1lXCI6XCJTb3V0aCBNZXJ0b25cIixcImxhdGl0dWRlXCI6NTEuNDAzMjMsXCJsb25naXR1ZGVcIjotMC4yMDU1MSxcInN0YXRpb25PcGVyYXRvclwiOlwiVExcIixcImNyc0NvZGVcIjpcIlNNT1wifSx7XCJuYW1lXCI6XCJTdCBBbGJhbnMgQ2l0eVwiLFwibGF0aXR1ZGVcIjo1MS43NTA0OCxcImxvbmdpdHVkZVwiOi0wLjMyNzU0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiU0FDXCJ9LHtcIm5hbWVcIjpcIlN0IEhlbGllciAoU3VycmV5KVwiLFwibGF0aXR1ZGVcIjo1MS4zOSxcImxvbmdpdHVkZVwiOi0wLjE5OTEyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiU0lIXCJ9LHtcIm5hbWVcIjpcIlN1dHRvbiBDb21tb25cIixcImxhdGl0dWRlXCI6NTEuMzc1NTcsXCJsb25naXR1ZGVcIjotMC4xOTY4MixcInN0YXRpb25PcGVyYXRvclwiOlwiVExcIixcImNyc0NvZGVcIjpcIlNVQ1wifSx7XCJuYW1lXCI6XCJUb290aW5nXCIsXCJsYXRpdHVkZVwiOjUxLjQxOTg5LFwibG9uZ2l0dWRlXCI6LTAuMTYwOTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRMXCIsXCJjcnNDb2RlXCI6XCJUT09cIn0se1wibmFtZVwiOlwiV2VzdCBIYW1wc3RlYWQgVGhhbWVzbGlua1wiLFwibGF0aXR1ZGVcIjo1MS41NDg2MixcImxvbmdpdHVkZVwiOi0wLjE5MjQzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUTFwiLFwiY3JzQ29kZVwiOlwiV0hQXCJ9LHtcIm5hbWVcIjpcIldlc3QgU3V0dG9uXCIsXCJsYXRpdHVkZVwiOjUxLjM2NjE2LFwibG9uZ2l0dWRlXCI6LTAuMjA0NjYsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRMXCIsXCJjcnNDb2RlXCI6XCJXU1VcIn0se1wibmFtZVwiOlwiV2ltYmxlZG9uIENoYXNlXCIsXCJsYXRpdHVkZVwiOjUxLjQwOTU2LFwibG9uZ2l0dWRlXCI6LTAuMjE0MDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRMXCIsXCJjcnNDb2RlXCI6XCJXQk9cIn0se1wibmFtZVwiOlwiQXJuc2lkZVwiLFwibGF0aXR1ZGVcIjo1NC4yMDIxMDg4OCxcImxvbmdpdHVkZVwiOi0yLjgyNzc2NjEwMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkFSTlwifSx7XCJuYW1lXCI6XCJCYXJuZXRieVwiLFwibGF0aXR1ZGVcIjo1My41NzQyNDE0NixcImxvbmdpdHVkZVwiOi0wLjQwOTcwNTY2NSxcInN0YXRpb25PcGVyYXRvclwiOlwiVFBcIixcImNyc0NvZGVcIjpcIkJUQlwifSx7XCJuYW1lXCI6XCJCYXJyb3ctaW4tRnVybmVzc1wiLFwibGF0aXR1ZGVcIjo1NC4xMTkwMDQ4LFwibG9uZ2l0dWRlXCI6LTMuMjI2MTI5MzAxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQklGXCJ9LHtcIm5hbWVcIjpcIkJpcmNod29vZFwiLFwibGF0aXR1ZGVcIjo1My40MTE5NjEwMSxcImxvbmdpdHVkZVwiOi0yLjUyODAxNTM0MyxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkJXRFwifSx7XCJuYW1lXCI6XCJCcm91Z2hcIixcImxhdGl0dWRlXCI6NTMuNzI3MjQ0MzMsXCJsb25naXR1ZGVcIjotMC41Nzk0MzkxNjcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRQXCIsXCJjcnNDb2RlXCI6XCJCVUhcIn0se1wibmFtZVwiOlwiQnVybmVzaWRlIChDdW1icmlhKVwiLFwibGF0aXR1ZGVcIjo1NC4zNTUzMDc2OCxcImxvbmdpdHVkZVwiOi0yLjc2NjIxNTUyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiQlVEXCJ9LHtcIm5hbWVcIjpcIkNhcm5mb3J0aFwiLFwibGF0aXR1ZGVcIjo1NC4xMjk2OTA5NSxcImxvbmdpdHVkZVwiOi0yLjc3MTIyODQ5NixcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIkNORlwifSx7XCJuYW1lXCI6XCJDbGVldGhvcnBlc1wiLFwibGF0aXR1ZGVcIjo1My41NjE5MjQwNyxcImxvbmdpdHVkZVwiOi0wLjAyOTIxNzM5MyxcInN0YXRpb25PcGVyYXRvclwiOlwiVFBcIixcImNyc0NvZGVcIjpcIkNMRVwifSx7XCJuYW1lXCI6XCJEZXdzYnVyeVwiLFwibGF0aXR1ZGVcIjo1My42OTIxMDM0NCxcImxvbmdpdHVkZVwiOi0xLjYzMzQ4MjA2NixcInN0YXRpb25PcGVyYXRvclwiOlwiVFBcIixcImNyc0NvZGVcIjpcIkRFV1wifSx7XCJuYW1lXCI6XCJHcmFuZ2Utb3Zlci1TYW5kc1wiLFwibGF0aXR1ZGVcIjo1NC4xOTUyNzg5LFwibG9uZ2l0dWRlXCI6LTIuOTAyNzM2NzcxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJOVFwiLFwiY3JzQ29kZVwiOlwiR09TXCJ9LHtcIm5hbWVcIjpcIkdyaW1zYnkgVG93blwiLFwibGF0aXR1ZGVcIjo1My41NjQxMjAyOCxcImxvbmdpdHVkZVwiOi0wLjA4Njk1MTY1NixcInN0YXRpb25PcGVyYXRvclwiOlwiVFBcIixcImNyc0NvZGVcIjpcIkdNQlwifSx7XCJuYW1lXCI6XCJIdWRkZXJzZmllbGRcIixcImxhdGl0dWRlXCI6NTMuNjQ4NDI4MTksXCJsb25naXR1ZGVcIjotMS43ODUxNDU4MzQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRQXCIsXCJjcnNDb2RlXCI6XCJIVURcIn0se1wibmFtZVwiOlwiSHVsbFwiLFwibGF0aXR1ZGVcIjo1My43NDQxNzcsXCJsb25naXR1ZGVcIjotMC4zNDYxNTUsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlRQXCIsXCJjcnNDb2RlXCI6XCJIVUxcIn0se1wibmFtZVwiOlwiS2VuZGFsXCIsXCJsYXRpdHVkZVwiOjU0LjMzMjEwNTYxLFwibG9uZ2l0dWRlXCI6LTIuNzM5NjQwMzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJLRU5cIn0se1wibmFtZVwiOlwiTWFsdG9uXCIsXCJsYXRpdHVkZVwiOjU0LjEzMjA4NDc3LFwibG9uZ2l0dWRlXCI6LTAuNzk3MjIyNzYzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUUFwiLFwiY3JzQ29kZVwiOlwiTUxUXCJ9LHtcIm5hbWVcIjpcIk1hbmNoZXN0ZXIgQWlycG9ydFwiLFwibGF0aXR1ZGVcIjo1My4zNjUwNTg0NSxcImxvbmdpdHVkZVwiOi0yLjI3Mjk4MTU0NixcInN0YXRpb25PcGVyYXRvclwiOlwiVFBcIixcImNyc0NvZGVcIjpcIk1JQVwifSx7XCJuYW1lXCI6XCJNaWRkbGVzYnJvdWdoXCIsXCJsYXRpdHVkZVwiOjU0LjU3OTExMDQ1LFwibG9uZ2l0dWRlXCI6LTEuMjM0NzEyNTY4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUUFwiLFwiY3JzQ29kZVwiOlwiTUJSXCJ9LHtcIm5hbWVcIjpcIk5vcnRoYWxsZXJ0b25cIixcImxhdGl0dWRlXCI6NTQuMzMzMDc4OSxcImxvbmdpdHVkZVwiOi0xLjQ0MTI3NTY5MSxcInN0YXRpb25PcGVyYXRvclwiOlwiVFBcIixcImNyc0NvZGVcIjpcIk5UUlwifSx7XCJuYW1lXCI6XCJTY2FyYm9yb3VnaFwiLFwibGF0aXR1ZGVcIjo1NC4yNzk4MDQyMyxcImxvbmdpdHVkZVwiOi0wLjQwNTcwNjg3NSxcInN0YXRpb25PcGVyYXRvclwiOlwiVFBcIixcImNyc0NvZGVcIjpcIlNDQVwifSx7XCJuYW1lXCI6XCJTY3VudGhvcnBlXCIsXCJsYXRpdHVkZVwiOjUzLjU4NjE5NTE5LFwibG9uZ2l0dWRlXCI6LTAuNjUwOTc5NTUzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUUFwiLFwiY3JzQ29kZVwiOlwiU0NVXCJ9LHtcIm5hbWVcIjpcIlNlYW1lclwiLFwibGF0aXR1ZGVcIjo1NC4yNDA3NjMxNyxcImxvbmdpdHVkZVwiOi0wLjQxNzAzNDIyOSxcInN0YXRpb25PcGVyYXRvclwiOlwiVFBcIixcImNyc0NvZGVcIjpcIlNFTVwifSx7XCJuYW1lXCI6XCJTZWxieVwiLFwibGF0aXR1ZGVcIjo1My43ODMzODQ3MixcImxvbmdpdHVkZVwiOi0xLjA2MzU1NTM2NSxcInN0YXRpb25PcGVyYXRvclwiOlwiVFBcIixcImNyc0NvZGVcIjpcIlNCWVwifSx7XCJuYW1lXCI6XCJTdGFseWJyaWRnZVwiLFwibGF0aXR1ZGVcIjo1My40ODQzOTI5MSxcImxvbmdpdHVkZVwiOi0yLjA2MTg5MjUzOSxcInN0YXRpb25PcGVyYXRvclwiOlwiVFBcIixcImNyc0NvZGVcIjpcIlNZQlwifSx7XCJuYW1lXCI6XCJTdGF2ZWxleSAoQ3VtYnJpYSlcIixcImxhdGl0dWRlXCI6NTQuMzc1NDQxMjQsXCJsb25naXR1ZGVcIjotMi44MTkzOTUwMzEsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJTVkxcIn0se1wibmFtZVwiOlwiVGhpcnNrXCIsXCJsYXRpdHVkZVwiOjU0LjIyODIyMzg2LFwibG9uZ2l0dWRlXCI6LTEuMzcyNTg5MjcxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUUFwiLFwiY3JzQ29kZVwiOlwiVEhJXCJ9LHtcIm5hbWVcIjpcIlRob3JuYWJ5XCIsXCJsYXRpdHVkZVwiOjU0LjU1OTQ1MDE4LFwibG9uZ2l0dWRlXCI6LTEuMzAwNzEwNDQ1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUUFwiLFwiY3JzQ29kZVwiOlwiVEJZXCJ9LHtcIm5hbWVcIjpcIlVsdmVyc3RvblwiLFwibGF0aXR1ZGVcIjo1NC4xOTE1OTA4OCxcImxvbmdpdHVkZVwiOi0zLjA5NzkyMDAyNSxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIlVMVlwifSx7XCJuYW1lXCI6XCJXYXJyaW5ndG9uIENlbnRyYWxcIixcImxhdGl0dWRlXCI6NTMuMzkxODgzMjMsXCJsb25naXR1ZGVcIjotMi41OTI0MTMxNDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIk5UXCIsXCJjcnNDb2RlXCI6XCJXQUNcIn0se1wibmFtZVwiOlwiV2luZGVybWVyZVwiLFwibGF0aXR1ZGVcIjo1NC4zNzk2MDU0MyxcImxvbmdpdHVkZVwiOi0yLjkwMzM4OTM2NCxcInN0YXRpb25PcGVyYXRvclwiOlwiTlRcIixcImNyc0NvZGVcIjpcIldETVwifSx7XCJuYW1lXCI6XCJZYXJtXCIsXCJsYXRpdHVkZVwiOjU0LjQ5Mzc3NDc1LFwibG9uZ2l0dWRlXCI6LTEuMzUzMDkwMjAxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJUUFwiLFwiY3JzQ29kZVwiOlwiWVJNXCJ9LHtcIm5hbWVcIjpcIkJpcm1pbmdoYW0gSW50ZXJuYXRpb25hbFwiLFwibGF0aXR1ZGVcIjo1Mi40NTA4MTQ2MSxcImxvbmdpdHVkZVwiOi0xLjcyNTg2MzM5NCxcInN0YXRpb25PcGVyYXRvclwiOlwiVlRcIixcImNyc0NvZGVcIjpcIkJISVwifSx7XCJuYW1lXCI6XCJDYXJsaXNsZVwiLFwibGF0aXR1ZGVcIjo1NC44OTA2NDYyNixcImxvbmdpdHVkZVwiOi0yLjkzMzgxMDIyOCxcInN0YXRpb25PcGVyYXRvclwiOlwiVlRcIixcImNyc0NvZGVcIjpcIkNBUlwifSx7XCJuYW1lXCI6XCJDb3ZlbnRyeVwiLFwibGF0aXR1ZGVcIjo1Mi40MDA4MjgzOCxcImxvbmdpdHVkZVwiOi0xLjUxMzQ2MDUxNyxcInN0YXRpb25PcGVyYXRvclwiOlwiVlRcIixcImNyc0NvZGVcIjpcIkNPVlwifSx7XCJuYW1lXCI6XCJDcmV3ZVwiLFwibGF0aXR1ZGVcIjo1My4wODk2NDMyNSxcImxvbmdpdHVkZVwiOi0yLjQzMjk3NzE3NCxcInN0YXRpb25PcGVyYXRvclwiOlwiVlRcIixcImNyc0NvZGVcIjpcIkNSRVwifSx7XCJuYW1lXCI6XCJMYW5jYXN0ZXJcIixcImxhdGl0dWRlXCI6NTQuMDQ4NTU3ODksXCJsb25naXR1ZGVcIjotMi44MDc5MDk5MTQsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlZUXCIsXCJjcnNDb2RlXCI6XCJMQU5cIn0se1wibmFtZVwiOlwiTWFjY2xlc2ZpZWxkXCIsXCJsYXRpdHVkZVwiOjUzLjI1OTM1NjA5LFwibG9uZ2l0dWRlXCI6LTIuMTIxMzgwNDc4LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJWVFwiLFwiY3JzQ29kZVwiOlwiTUFDXCJ9LHtcIm5hbWVcIjpcIk94ZW5ob2xtZSBMYWtlIERpc3RyaWN0XCIsXCJsYXRpdHVkZVwiOjU0LjMwNTI0Nzk3LFwibG9uZ2l0dWRlXCI6LTIuNzIyMjUzMTgzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJWVFwiLFwiY3JzQ29kZVwiOlwiT1hOXCJ9LHtcIm5hbWVcIjpcIlBlbnJpdGggKE5vcnRoIExha2VzKVwiLFwibGF0aXR1ZGVcIjo1NC42NjE4MTE3LFwibG9uZ2l0dWRlXCI6LTIuNzU4MDM1NDIxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJWVFwiLFwiY3JzQ29kZVwiOlwiUE5SXCJ9LHtcIm5hbWVcIjpcIlByZXN0b24gKExhbmNzKVwiLFwibGF0aXR1ZGVcIjo1My43NTY4NzA1MixcImxvbmdpdHVkZVwiOi0yLjcwODEyNDY1NyxcInN0YXRpb25PcGVyYXRvclwiOlwiVlRcIixcImNyc0NvZGVcIjpcIlBSRVwifSx7XCJuYW1lXCI6XCJSdWdieVwiLFwibGF0aXR1ZGVcIjo1Mi4zNzkxMDc5OCxcImxvbmdpdHVkZVwiOi0xLjI1MDQ3NzkwNyxcInN0YXRpb25PcGVyYXRvclwiOlwiVlRcIixcImNyc0NvZGVcIjpcIlJVR1wifSx7XCJuYW1lXCI6XCJSdW5jb3JuXCIsXCJsYXRpdHVkZVwiOjUzLjMzODcxMTk3LFwibG9uZ2l0dWRlXCI6LTIuNzM5MjUxNzAzLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJWVFwiLFwiY3JzQ29kZVwiOlwiUlVOXCJ9LHtcIm5hbWVcIjpcIlN0YWZmb3JkXCIsXCJsYXRpdHVkZVwiOjUyLjgwMzkwODU5LFwibG9uZ2l0dWRlXCI6LTIuMTIyMDM2NzgyLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJWVFwiLFwiY3JzQ29kZVwiOlwiU1RBXCJ9LHtcIm5hbWVcIjpcIlN0b2NrcG9ydFwiLFwibGF0aXR1ZGVcIjo1My40MDU1NTYyNyxcImxvbmdpdHVkZVwiOi0yLjE2MzAxMTcwMixcInN0YXRpb25PcGVyYXRvclwiOlwiVlRcIixcImNyc0NvZGVcIjpcIlNQVFwifSx7XCJuYW1lXCI6XCJTdG9rZS1vbi1UcmVudFwiLFwibGF0aXR1ZGVcIjo1My4wMDc5OTU1OCxcImxvbmdpdHVkZVwiOi0yLjE4MDk4ODkyNixcInN0YXRpb25PcGVyYXRvclwiOlwiVlRcIixcImNyc0NvZGVcIjpcIlNPVFwifSx7XCJuYW1lXCI6XCJXYXJyaW5ndG9uIEJhbmsgUXVheVwiLFwibGF0aXR1ZGVcIjo1My4zODU1Mzg3MSxcImxvbmdpdHVkZVwiOi0yLjYwMjg0OTc4NSxcInN0YXRpb25PcGVyYXRvclwiOlwiVlRcIixcImNyc0NvZGVcIjpcIldCUVwifSx7XCJuYW1lXCI6XCJXaWdhbiBOb3J0aCBXZXN0ZXJuXCIsXCJsYXRpdHVkZVwiOjUzLjU0MzQ1MTM0LFwibG9uZ2l0dWRlXCI6LTIuNjMzMTMwNjk5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJWVFwiLFwiY3JzQ29kZVwiOlwiV0dOXCJ9LHtcIm5hbWVcIjpcIldvbHZlcmhhbXB0b25cIixcImxhdGl0dWRlXCI6NTIuNTg3ODU3MTUsXCJsb25naXR1ZGVcIjotMi4xMTk1MTY4OTMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlZUXCIsXCJjcnNDb2RlXCI6XCJXVkhcIn0se1wibmFtZVwiOlwiUHJlc3R3aWNrIEludGVybmF0aW9uYWwgQWlycG9ydFwiLFwibGF0aXR1ZGVcIjo1NS41MDkwMjk5NTkxLFwibG9uZ2l0dWRlXCI6LTQuNjE0MTYwNDc0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJYR1wiLFwiY3JzQ29kZVwiOlwiUFJBXCJ9LHtcIm5hbWVcIjpcIkJyZW50d29vZFwiLFwibGF0aXR1ZGVcIjo1MS42MTM2NDU3ODA5LFwibG9uZ2l0dWRlXCI6MC4zMDAxNTM1Mzk1LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJYUlwiLFwiY3JzQ29kZVwiOlwiQlJFXCJ9LHtcIm5hbWVcIjpcIkNoYWR3ZWxsIEhlYXRoXCIsXCJsYXRpdHVkZVwiOjUxLjU2ODA0NDI2OCxcImxvbmdpdHVkZVwiOjAuMTI4OTcwMzU3NyxcInN0YXRpb25PcGVyYXRvclwiOlwiWFJcIixcImNyc0NvZGVcIjpcIkNUSFwifSx7XCJuYW1lXCI6XCJGb3Jlc3QgR2F0ZVwiLFwibGF0aXR1ZGVcIjo1MS41NDk0MzcxODIyLFwibG9uZ2l0dWRlXCI6MC4wMjQzNjE3Mzk0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJYUlwiLFwiY3JzQ29kZVwiOlwiRk9HXCJ9LHtcIm5hbWVcIjpcIkdpZGVhIFBhcmtcIixcImxhdGl0dWRlXCI6NTEuNTgxOTA5NzAyNixcImxvbmdpdHVkZVwiOjAuMjA1OTc4NTYwOSxcInN0YXRpb25PcGVyYXRvclwiOlwiWFJcIixcImNyc0NvZGVcIjpcIkdEUFwifSx7XCJuYW1lXCI6XCJHb29kbWF5ZXNcIixcImxhdGl0dWRlXCI6NTEuNTY2MTk3ODcwOSxcImxvbmdpdHVkZVwiOjAuMTExNzEyNzMxOSxcInN0YXRpb25PcGVyYXRvclwiOlwiWFJcIixcImNyc0NvZGVcIjpcIkdNWVwifSx7XCJuYW1lXCI6XCJIYXJvbGQgV29vZFwiLFwibGF0aXR1ZGVcIjo1MS41OTMyNDU2NSxcImxvbmdpdHVkZVwiOjAuMjM0MjQ5ODIxLFwic3RhdGlvbk9wZXJhdG9yXCI6XCJYUlwiLFwiY3JzQ29kZVwiOlwiSFJPXCJ9LHtcIm5hbWVcIjpcIklsZm9yZFwiLFwibGF0aXR1ZGVcIjo1MS41NTkxNDA3MzE2LFwibG9uZ2l0dWRlXCI6MC4wNjg2ODA2MDMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlhSXCIsXCJjcnNDb2RlXCI6XCJJRkRcIn0se1wibmFtZVwiOlwiTWFub3IgUGFya1wiLFwibGF0aXR1ZGVcIjo1MS41NTIzNTY1MDYyLFwibG9uZ2l0dWRlXCI6MC4wNDUyOTI0MzA0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJYUlwiLFwiY3JzQ29kZVwiOlwiTU5QXCJ9LHtcIm5hbWVcIjpcIk1hcnlsYW5kXCIsXCJsYXRpdHVkZVwiOjUxLjU0NTgzOTczOTQsXCJsb25naXR1ZGVcIjowLjAwNjA1NzgzOTksXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlhSXCIsXCJjcnNDb2RlXCI6XCJNWUxcIn0se1wibmFtZVwiOlwiUm9tZm9yZFwiLFwibGF0aXR1ZGVcIjo1MS41NzQ4MzQ2MixcImxvbmdpdHVkZVwiOjAuMTgzMjUwOTE5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJYUlwiLFwiY3JzQ29kZVwiOlwiUk1GXCJ9LHtcIm5hbWVcIjpcIlNldmVuIEtpbmdzXCIsXCJsYXRpdHVkZVwiOjUxLjU2NDA0NTg3MjYsXCJsb25naXR1ZGVcIjowLjA5NjMxODI3MTcsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlhSXCIsXCJjcnNDb2RlXCI6XCJTVktcIn0se1wibmFtZVwiOlwiU3RyYXRmb3JkIChMb25kb24pXCIsXCJsYXRpdHVkZVwiOjUxLjU0MTM3NDE0ODQsXCJsb25naXR1ZGVcIjotMC4wMDM2NTY4NDQ5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJYUlwiLFwiY3JzQ29kZVwiOlwiU1JBXCJ9LHtcIm5hbWVcIjpcIlNvdXRoZW5kIEFpcnBvcnRcIixcImxhdGl0dWRlXCI6NTEuNTY4NjkxLFwibG9uZ2l0dWRlXCI6MC43MDQwNTIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlhTXCIsXCJjcnNDb2RlXCI6XCJTSUFcIn0se1wibmFtZVwiOlwiSGVhdGhyb3cgQWlycG9ydCBUZXJtaW5hbCA0XCIsXCJsYXRpdHVkZVwiOjUxLjQ1ODI3MTI1NDIsXCJsb25naXR1ZGVcIjotMC40NDU0NTM5NjM5LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJIWFwiLFwiY3JzQ29kZVwiOlwiSEFGXCJ9LHtcIm5hbWVcIjpcIkhlYXRocm93IEFpcnBvcnQgVGVybWluYWwgNVwiLFwibGF0aXR1ZGVcIjo1MS40NzAwNTY1OTI5LFwibG9uZ2l0dWRlXCI6LTAuNDkwNTgwNzMwMSxcInN0YXRpb25PcGVyYXRvclwiOlwiSFhcIixcImNyc0NvZGVcIjpcIkhXVlwifSx7XCJuYW1lXCI6XCJIZWF0aHJvdyBBaXJwb3J0IFRlcm1pbmFscyAxLCAyIGFuZCAzXCIsXCJsYXRpdHVkZVwiOjUxLjQ3MjczLFwibG9uZ2l0dWRlXCI6LTAuNDUwNzIsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIkhYXCIsXCJjcnNDb2RlXCI6XCJIWFhcIn0se1wibmFtZVwiOlwiRmFycmluZ2RvblwiLFwibGF0aXR1ZGVcIjo1MS41MjA1MyxcImxvbmdpdHVkZVwiOi0wLjEwNTA0LFwic3RhdGlvbk9wZXJhdG9yXCI6XCJMVFwiLFwiY3JzQ29kZVwiOlwiWkZEXCJ9LHtcIm5hbWVcIjpcIkhpZ2ggU3RyZWV0IEtlbnNpbmd0b24gVW5kZXJncm91bmRcIixcImxhdGl0dWRlXCI6NTEuMzAwMixcImxvbmdpdHVkZVwiOi0wLjExMzMsXCJzdGF0aW9uT3BlcmF0b3JcIjpcIlpaXCIsXCJjcnNDb2RlXCI6XCJaSFNcIn0se1wibmFtZVwiOlwiT2xkIFN0cmVldFwiLFwibGF0aXR1ZGVcIjo1MS41MjU4MzY1NTc0LFwibG9uZ2l0dWRlXCI6LTAuMDg4NTI5NTgxMSxcInN0YXRpb25PcGVyYXRvclwiOlwiTFRcIixcImNyc0NvZGVcIjpcIk9MRFwifVxuXTsiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuaW1wb3J0IFJvdXRlcyBmcm9tICcuL1JvdXRlcyc7XG5cbmlmICggcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyApIHtcbiAgLy8gRW5hYmxlIFJlYWN0IGRldnRvb2xzXG4gIHdpbmRvdy5SZWFjdCA9IFJlYWN0O1xufVxuXG5SZWFjdERPTS5yZW5kZXIoUm91dGVzLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJykpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzLCBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBOZWFyZXN0U3RhdGlvbiBmcm9tICcuLi9jb21wb25lbnRzL05lYXJlc3RTdGF0aW9uJztcblxuY29uc3QgcHJvcFR5cGVzID0ge1xuICBjdXJyZW50VXNlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuY2xhc3MgSG9tZVBhZ2UgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJob21lLXBhZ2VcIj5cbiAgICAgICAgV2VsY29tZSB0byBSQUlMIEZZSSFcbiAgICAgICAgPE5lYXJlc3RTdGF0aW9uIC8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKTtcbiAgfVxuXG59XG5cbkhvbWVQYWdlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblxuZXhwb3J0IGRlZmF1bHQgSG9tZVBhZ2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMsIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgcHJvcFR5cGVzID0ge1xuICBjdXJyZW50VXNlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuY2xhc3MgTm90Rm91bmRQYWdlIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibm90LWZvdW5kLXBhZ2VcIj5cbiAgICAgICAgUGFnZSBOb3QgRm91bmRcbiAgICAgIDwvc2VjdGlvbj5cbiAgICApO1xuICB9XG5cbn1cblxuTm90Rm91bmRQYWdlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblxuZXhwb3J0IGRlZmF1bHQgTm90Rm91bmRQYWdlO1xuIiwidmFyIHBTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi9saWIva2V5cy5qcycpO1xudmFyIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9saWIvaXNfYXJndW1lbnRzLmpzJyk7XG5cbnZhciBkZWVwRXF1YWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKSB7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xuICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9IGVsc2UgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIERhdGUgJiYgZXhwZWN0ZWQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICAvLyA3LjMuIE90aGVyIHBhaXJzIHRoYXQgZG8gbm90IGJvdGggcGFzcyB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcsXG4gIC8vIGVxdWl2YWxlbmNlIGlzIGRldGVybWluZWQgYnkgPT0uXG4gIH0gZWxzZSBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQgfHwgdHlwZW9mIGFjdHVhbCAhPSAnb2JqZWN0JyAmJiB0eXBlb2YgZXhwZWN0ZWQgIT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb3B0cy5zdHJpY3QgPyBhY3R1YWwgPT09IGV4cGVjdGVkIDogYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIDcuNC4gRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG4gIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBvYmpFcXVpdihhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZE9yTnVsbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKHgpIHtcbiAgaWYgKCF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgeC5sZW5ndGggIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgeC5jb3B5ICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4LnNsaWNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh4Lmxlbmd0aCA+IDAgJiYgdHlwZW9mIHhbMF0gIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiLCBvcHRzKSB7XG4gIHZhciBpLCBrZXk7XG4gIGlmIChpc1VuZGVmaW5lZE9yTnVsbChhKSB8fCBpc1VuZGVmaW5lZE9yTnVsbChiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS5cbiAgaWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgcmV0dXJuIGZhbHNlO1xuICAvL35+fkkndmUgbWFuYWdlZCB0byBicmVhayBPYmplY3Qua2V5cyB0aHJvdWdoIHNjcmV3eSBhcmd1bWVudHMgcGFzc2luZy5cbiAgLy8gICBDb252ZXJ0aW5nIHRvIGFycmF5IHNvbHZlcyB0aGUgcHJvYmxlbS5cbiAgaWYgKGlzQXJndW1lbnRzKGEpKSB7XG4gICAgaWYgKCFpc0FyZ3VtZW50cyhiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBkZWVwRXF1YWwoYSwgYiwgb3B0cyk7XG4gIH1cbiAgaWYgKGlzQnVmZmVyKGEpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHRyeSB7XG4gICAgdmFyIGthID0gb2JqZWN0S2V5cyhhKSxcbiAgICAgICAga2IgPSBvYmplY3RLZXlzKGIpO1xuICB9IGNhdGNoIChlKSB7Ly9oYXBwZW5zIHdoZW4gb25lIGlzIGEgc3RyaW5nIGxpdGVyYWwgYW5kIHRoZSBvdGhlciBpc24ndFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGtleXMgaW5jb3Jwb3JhdGVzXG4gIC8vIGhhc093blByb3BlcnR5KVxuICBpZiAoa2EubGVuZ3RoICE9IGtiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG4gIGthLnNvcnQoKTtcbiAga2Iuc29ydCgpO1xuICAvL35+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFkZWVwRXF1YWwoYVtrZXldLCBiW2tleV0sIG9wdHMpKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHR5cGVvZiBhID09PSB0eXBlb2YgYjtcbn1cbiIsInZhciBzdXBwb3J0c0FyZ3VtZW50c0NsYXNzID0gKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnRzKVxufSkoKSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA/IHN1cHBvcnRlZCA6IHVuc3VwcG9ydGVkO1xuXG5leHBvcnRzLnN1cHBvcnRlZCA9IHN1cHBvcnRlZDtcbmZ1bmN0aW9uIHN1cHBvcnRlZChvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxuZXhwb3J0cy51bnN1cHBvcnRlZCA9IHVuc3VwcG9ydGVkO1xuZnVuY3Rpb24gdW5zdXBwb3J0ZWQob2JqZWN0KXtcbiAgcmV0dXJuIG9iamVjdCAmJlxuICAgIHR5cGVvZiBvYmplY3QgPT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2Ygb2JqZWN0Lmxlbmd0aCA9PSAnbnVtYmVyJyAmJlxuICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdjYWxsZWUnKSAmJlxuICAgICFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCAnY2FsbGVlJykgfHxcbiAgICBmYWxzZTtcbn07XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbidcbiAgPyBPYmplY3Qua2V5cyA6IHNoaW07XG5cbmV4cG9ydHMuc2hpbSA9IHNoaW07XG5mdW5jdGlvbiBzaGltIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gIHJldHVybiBrZXlzO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudExpc3RlbmVyXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCcuL2VtcHR5RnVuY3Rpb24nKTtcblxuLyoqXG4gKiBVcHN0cmVhbSB2ZXJzaW9uIG9mIGV2ZW50IGxpc3RlbmVyLiBEb2VzIG5vdCB0YWtlIGludG8gYWNjb3VudCBzcGVjaWZpY1xuICogbmF0dXJlIG9mIHBsYXRmb3JtLlxuICovXG52YXIgRXZlbnRMaXN0ZW5lciA9IHtcbiAgLyoqXG4gICAqIExpc3RlbiB0byBET00gZXZlbnRzIGR1cmluZyB0aGUgYnViYmxlIHBoYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0YXJnZXQgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgbGlzdGVuZXIgb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snIG9yICdtb3VzZW92ZXInLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCBhIGByZW1vdmVgIG1ldGhvZC5cbiAgICovXG4gIGxpc3RlbjogZnVuY3Rpb24gKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0LmF0dGFjaEV2ZW50KSB7XG4gICAgICB0YXJnZXQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGFyZ2V0LmRldGFjaEV2ZW50KCdvbicgKyBldmVudFR5cGUsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byBET00gZXZlbnRzIGR1cmluZyB0aGUgY2FwdHVyZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBjYXB0dXJlOiBmdW5jdGlvbiAodGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdBdHRlbXB0ZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2Ugb24gYSAnICsgJ2Jyb3dzZXIgdGhhdCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjYXB0dXJlIHBoYXNlLiBZb3VyIGFwcGxpY2F0aW9uICcgKyAnd2lsbCBub3QgcmVjZWl2ZSBzb21lIGV2ZW50cy4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZW1wdHlGdW5jdGlvblxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgcmVnaXN0ZXJEZWZhdWx0OiBmdW5jdGlvbiAoKSB7fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudExpc3RlbmVyOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFeGVjdXRpb25FbnZpcm9ubWVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY2FtZWxpemVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG5cbi8qKlxuICogQ2FtZWxjYXNlcyBhIGh5cGhlbmF0ZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gY2FtZWxpemUoJ2JhY2tncm91bmQtY29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZENvbG9yXCJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX2h5cGhlblBhdHRlcm4sIGZ1bmN0aW9uIChfLCBjaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4gY2hhcmFjdGVyLnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbWVsaXplOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjYW1lbGl6ZVN0eWxlTmFtZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW1lbGl6ZSA9IHJlcXVpcmUoJy4vY2FtZWxpemUnKTtcblxudmFyIG1zUGF0dGVybiA9IC9eLW1zLS87XG5cbi8qKlxuICogQ2FtZWxjYXNlcyBhIGh5cGhlbmF0ZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnYmFja2dyb3VuZC1jb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kQ29sb3JcIlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCctbW96LXRyYW5zaXRpb24nKVxuICogICA8IFwiTW96VHJhbnNpdGlvblwiXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJy1tcy10cmFuc2l0aW9uJylcbiAqICAgPCBcIm1zVHJhbnNpdGlvblwiXG4gKlxuICogQXMgQW5kaSBTbWl0aCBzdWdnZXN0c1xuICogKGh0dHA6Ly93d3cuYW5kaXNtaXRoLmNvbS9ibG9nLzIwMTIvMDIvbW9kZXJuaXpyLXByZWZpeGVkLyksIGFuIGAtbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGxvd2VyY2FzZSBgbXNgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxpemVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBjYW1lbGl6ZShzdHJpbmcucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxpemVTdHlsZU5hbWU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNvbnRhaW5zTm9kZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKlxuICogQHBhcmFtIHs/RE9NTm9kZX0gb3V0ZXJOb2RlIE91dGVyIERPTSBub2RlLlxuICogQHBhcmFtIHs/RE9NTm9kZX0gaW5uZXJOb2RlIElubmVyIERPTSBub2RlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb3V0ZXJOb2RlYCBjb250YWlucyBvciBpcyBgaW5uZXJOb2RlYC5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKF94LCBfeDIpIHtcbiAgdmFyIF9hZ2FpbiA9IHRydWU7XG5cbiAgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7XG4gICAgdmFyIG91dGVyTm9kZSA9IF94LFxuICAgICAgICBpbm5lck5vZGUgPSBfeDI7XG4gICAgX2FnYWluID0gZmFsc2U7XG5cbiAgICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgICAgX3ggPSBvdXRlck5vZGU7XG4gICAgICBfeDIgPSBpbm5lck5vZGUucGFyZW50Tm9kZTtcbiAgICAgIF9hZ2FpbiA9IHRydWU7XG4gICAgICBjb250aW51ZSBfZnVuY3Rpb247XG4gICAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29udGFpbnMpIHtcbiAgICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjcmVhdGVBcnJheUZyb21NaXhlZFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB0b0FycmF5ID0gcmVxdWlyZSgnLi90b0FycmF5Jyk7XG5cbi8qKlxuICogUGVyZm9ybSBhIGhldXJpc3RpYyB0ZXN0IHRvIGRldGVybWluZSBpZiBhbiBvYmplY3QgaXMgXCJhcnJheS1saWtlXCIuXG4gKlxuICogICBBIG1vbmsgYXNrZWQgSm9zaHUsIGEgWmVuIG1hc3RlciwgXCJIYXMgYSBkb2cgQnVkZGhhIG5hdHVyZT9cIlxuICogICBKb3NodSByZXBsaWVkOiBcIk11LlwiXG4gKlxuICogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGl0cyBhcmd1bWVudCBoYXMgXCJhcnJheSBuYXR1cmVcIjogaXQgcmV0dXJuc1xuICogdHJ1ZSBpZiB0aGUgYXJndW1lbnQgaXMgYW4gYWN0dWFsIGFycmF5LCBhbiBgYXJndW1lbnRzJyBvYmplY3QsIG9yIGFuXG4gKiBIVE1MQ29sbGVjdGlvbiAoZS5nLiBub2RlLmNoaWxkTm9kZXMgb3Igbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgpKS5cbiAqXG4gKiBJdCB3aWxsIHJldHVybiBmYWxzZSBmb3Igb3RoZXIgYXJyYXktbGlrZSBvYmplY3RzIGxpa2UgRmlsZWxpc3QuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc0FycmF5TmF0dXJlKG9iaikge1xuICByZXR1cm4oXG4gICAgLy8gbm90IG51bGwvZmFsc2VcbiAgICAhIW9iaiAmJiAoXG4gICAgLy8gYXJyYXlzIGFyZSBvYmplY3RzLCBOb2RlTGlzdHMgYXJlIGZ1bmN0aW9ucyBpbiBTYWZhcmlcbiAgICB0eXBlb2Ygb2JqID09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT0gJ2Z1bmN0aW9uJykgJiZcbiAgICAvLyBxdWFja3MgbGlrZSBhbiBhcnJheVxuICAgICdsZW5ndGgnIGluIG9iaiAmJlxuICAgIC8vIG5vdCB3aW5kb3dcbiAgICAhKCdzZXRJbnRlcnZhbCcgaW4gb2JqKSAmJlxuICAgIC8vIG5vIERPTSBub2RlIHNob3VsZCBiZSBjb25zaWRlcmVkIGFuIGFycmF5LWxpa2VcbiAgICAvLyBhICdzZWxlY3QnIGVsZW1lbnQgaGFzICdsZW5ndGgnIGFuZCAnaXRlbScgcHJvcGVydGllcyBvbiBJRThcbiAgICB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9ICdudW1iZXInICYmIChcbiAgICAvLyBhIHJlYWwgYXJyYXlcbiAgICBBcnJheS5pc0FycmF5KG9iaikgfHxcbiAgICAvLyBhcmd1bWVudHNcbiAgICAnY2FsbGVlJyBpbiBvYmogfHxcbiAgICAvLyBIVE1MQ29sbGVjdGlvbi9Ob2RlTGlzdFxuICAgICdpdGVtJyBpbiBvYmopXG4gICk7XG59XG5cbi8qKlxuICogRW5zdXJlIHRoYXQgdGhlIGFyZ3VtZW50IGlzIGFuIGFycmF5IGJ5IHdyYXBwaW5nIGl0IGluIGFuIGFycmF5IGlmIGl0IGlzIG5vdC5cbiAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoZSBhcmd1bWVudCBpZiBpdCBpcyBhbHJlYWR5IGFuIGFycmF5LlxuICpcbiAqIFRoaXMgaXMgbW9zdGx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5OlxuICpcbiAqICAgdmFyIGNyZWF0ZUFycmF5RnJvbU1peGVkID0gcmVxdWlyZSgnY3JlYXRlQXJyYXlGcm9tTWl4ZWQnKTtcbiAqXG4gKiAgIGZ1bmN0aW9uIHRha2VzT25lT3JNb3JlVGhpbmdzKHRoaW5ncykge1xuICogICAgIHRoaW5ncyA9IGNyZWF0ZUFycmF5RnJvbU1peGVkKHRoaW5ncyk7XG4gKiAgICAgLi4uXG4gKiAgIH1cbiAqXG4gKiBUaGlzIGFsbG93cyB5b3UgdG8gdHJlYXQgYHRoaW5ncycgYXMgYW4gYXJyYXksIGJ1dCBhY2NlcHQgc2NhbGFycyBpbiB0aGUgQVBJLlxuICpcbiAqIElmIHlvdSBuZWVkIHRvIGNvbnZlcnQgYW4gYXJyYXktbGlrZSBvYmplY3QsIGxpa2UgYGFyZ3VtZW50c2AsIGludG8gYW4gYXJyYXlcbiAqIHVzZSB0b0FycmF5IGluc3RlYWQuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiBjcmVhdGVBcnJheUZyb21NaXhlZChvYmopIHtcbiAgaWYgKCFoYXNBcnJheU5hdHVyZShvYmopKSB7XG4gICAgcmV0dXJuIFtvYmpdO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIHJldHVybiBvYmouc2xpY2UoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdG9BcnJheShvYmopO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQXJyYXlGcm9tTWl4ZWQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIGZiLXd3dy91bnNhZmUtaHRtbCovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKCcuL2NyZWF0ZUFycmF5RnJvbU1peGVkJyk7XG52YXIgZ2V0TWFya3VwV3JhcCA9IHJlcXVpcmUoJy4vZ2V0TWFya3VwV3JhcCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG5cbi8qKlxuICogRHVtbXkgY29udGFpbmVyIHVzZWQgdG8gcmVuZGVyIGFsbCBtYXJrdXAuXG4gKi9cbnZhciBkdW1teU5vZGUgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA6IG51bGw7XG5cbi8qKlxuICogUGF0dGVybiB1c2VkIGJ5IGBnZXROb2RlTmFtZWAuXG4gKi9cbnZhciBub2RlTmFtZVBhdHRlcm4gPSAvXlxccyo8KFxcdyspLztcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgYG5vZGVOYW1lYCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiBhIHN0cmluZyBvZiBtYXJrdXAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBTdHJpbmcgb2YgbWFya3VwLlxuICogQHJldHVybiB7P3N0cmluZ30gTm9kZSBuYW1lIG9mIHRoZSBzdXBwbGllZCBtYXJrdXAuXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVOYW1lKG1hcmt1cCkge1xuICB2YXIgbm9kZU5hbWVNYXRjaCA9IG1hcmt1cC5tYXRjaChub2RlTmFtZVBhdHRlcm4pO1xuICByZXR1cm4gbm9kZU5hbWVNYXRjaCAmJiBub2RlTmFtZU1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBub2RlcyByZW5kZXJlZCBmcm9tIHRoZSBzdXBwbGllZCBtYXJrdXAuIFRoZVxuICogb3B0aW9uYWxseSBzdXBwbGllZCBgaGFuZGxlU2NyaXB0YCBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgb25jZSBmb3IgZWFjaFxuICogPHNjcmlwdD4gZWxlbWVudCB0aGF0IGlzIHJlbmRlcmVkLiBJZiBubyBgaGFuZGxlU2NyaXB0YCBmdW5jdGlvbiBpcyBzdXBwbGllZCxcbiAqIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gaWYgYW55IDxzY3JpcHQ+IGVsZW1lbnRzIGFyZSByZW5kZXJlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIEEgc3RyaW5nIG9mIHZhbGlkIEhUTUwgbWFya3VwLlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGhhbmRsZVNjcmlwdCBJbnZva2VkIG9uY2UgZm9yIGVhY2ggcmVuZGVyZWQgPHNjcmlwdD4uXG4gKiBAcmV0dXJuIHthcnJheTxET01FbGVtZW50fERPTVRleHROb2RlPn0gQW4gYXJyYXkgb2YgcmVuZGVyZWQgbm9kZXMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXAsIGhhbmRsZVNjcmlwdCkge1xuICB2YXIgbm9kZSA9IGR1bW15Tm9kZTtcbiAgISEhZHVtbXlOb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCBkdW1teSBub3QgaW5pdGlhbGl6ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIHZhciBub2RlTmFtZSA9IGdldE5vZGVOYW1lKG1hcmt1cCk7XG5cbiAgdmFyIHdyYXAgPSBub2RlTmFtZSAmJiBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKTtcbiAgaWYgKHdyYXApIHtcbiAgICBub2RlLmlubmVySFRNTCA9IHdyYXBbMV0gKyBtYXJrdXAgKyB3cmFwWzJdO1xuXG4gICAgdmFyIHdyYXBEZXB0aCA9IHdyYXBbMF07XG4gICAgd2hpbGUgKHdyYXBEZXB0aC0tKSB7XG4gICAgICBub2RlID0gbm9kZS5sYXN0Q2hpbGQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gbWFya3VwO1xuICB9XG5cbiAgdmFyIHNjcmlwdHMgPSBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcbiAgaWYgKHNjcmlwdHMubGVuZ3RoKSB7XG4gICAgIWhhbmRsZVNjcmlwdCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAoLi4uKTogVW5leHBlY3RlZCA8c2NyaXB0PiBlbGVtZW50IHJlbmRlcmVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBjcmVhdGVBcnJheUZyb21NaXhlZChzY3JpcHRzKS5mb3JFYWNoKGhhbmRsZVNjcmlwdCk7XG4gIH1cblxuICB2YXIgbm9kZXMgPSBjcmVhdGVBcnJheUZyb21NaXhlZChub2RlLmNoaWxkTm9kZXMpO1xuICB3aGlsZSAobm9kZS5sYXN0Q2hpbGQpIHtcbiAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlbXB0eUZ1bmN0aW9uXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlbXB0eU9iamVjdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5T2JqZWN0ID0ge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIE9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5T2JqZWN0OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmb2N1c05vZGVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlIGlucHV0L3RleHRhcmVhIHRvIGZvY3VzXG4gKi9cbmZ1bmN0aW9uIGZvY3VzTm9kZShub2RlKSB7XG4gIC8vIElFOCBjYW4gdGhyb3cgXCJDYW4ndCBtb3ZlIGZvY3VzIHRvIHRoZSBjb250cm9sIGJlY2F1c2UgaXQgaXMgaW52aXNpYmxlLFxuICAvLyBub3QgZW5hYmxlZCwgb3Igb2YgYSB0eXBlIHRoYXQgZG9lcyBub3QgYWNjZXB0IHRoZSBmb2N1cy5cIiBmb3IgYWxsIGtpbmRzIG9mXG4gIC8vIHJlYXNvbnMgdGhhdCBhcmUgdG9vIGV4cGVuc2l2ZSBhbmQgZnJhZ2lsZSB0byB0ZXN0LlxuICB0cnkge1xuICAgIG5vZGUuZm9jdXMoKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb2N1c05vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEFjdGl2ZUVsZW1lbnRcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoKSAvKj9ET01FbGVtZW50Ki97XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCB8fCBkb2N1bWVudC5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRNYXJrdXBXcmFwXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBmYi13d3cvdW5zYWZlLWh0bWwgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIGRldGVjdCB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5LlxuICovXG52YXIgZHVtbXlOb2RlID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFNvbWUgYnJvd3NlcnMgY2Fubm90IHVzZSBgaW5uZXJIVE1MYCB0byByZW5kZXIgY2VydGFpbiBlbGVtZW50cyBzdGFuZGFsb25lLFxuICogc28gd2Ugd3JhcCB0aGVtLCByZW5kZXIgdGhlIHdyYXBwZWQgbm9kZXMsIHRoZW4gZXh0cmFjdCB0aGUgZGVzaXJlZCBub2RlLlxuICpcbiAqIEluIElFOCwgY2VydGFpbiBlbGVtZW50cyBjYW5ub3QgcmVuZGVyIGFsb25lLCBzbyB3cmFwIGFsbCBlbGVtZW50cyAoJyonKS5cbiAqL1xuXG52YXIgc2hvdWxkV3JhcCA9IHt9O1xuXG52YXIgc2VsZWN0V3JhcCA9IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cInRydWVcIj4nLCAnPC9zZWxlY3Q+J107XG52YXIgdGFibGVXcmFwID0gWzEsICc8dGFibGU+JywgJzwvdGFibGU+J107XG52YXIgdHJXcmFwID0gWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J107XG5cbnZhciBzdmdXcmFwID0gWzEsICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4nLCAnPC9zdmc+J107XG5cbnZhciBtYXJrdXBXcmFwID0ge1xuICAnKic6IFsxLCAnPzxkaXY+JywgJzwvZGl2PiddLFxuXG4gICdhcmVhJzogWzEsICc8bWFwPicsICc8L21hcD4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAnbGVnZW5kJzogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gICdwYXJhbSc6IFsxLCAnPG9iamVjdD4nLCAnPC9vYmplY3Q+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuXG4gICdvcHRncm91cCc6IHNlbGVjdFdyYXAsXG4gICdvcHRpb24nOiBzZWxlY3RXcmFwLFxuXG4gICdjYXB0aW9uJzogdGFibGVXcmFwLFxuICAnY29sZ3JvdXAnOiB0YWJsZVdyYXAsXG4gICd0Ym9keSc6IHRhYmxlV3JhcCxcbiAgJ3Rmb290JzogdGFibGVXcmFwLFxuICAndGhlYWQnOiB0YWJsZVdyYXAsXG5cbiAgJ3RkJzogdHJXcmFwLFxuICAndGgnOiB0cldyYXBcbn07XG5cbi8vIEluaXRpYWxpemUgdGhlIFNWRyBlbGVtZW50cyBzaW5jZSB3ZSBrbm93IHRoZXknbGwgYWx3YXlzIG5lZWQgdG8gYmUgd3JhcHBlZFxuLy8gY29uc2lzdGVudGx5LiBJZiB0aGV5IGFyZSBjcmVhdGVkIGluc2lkZSBhIDxkaXY+IHRoZXkgd2lsbCBiZSBpbml0aWFsaXplZCBpblxuLy8gdGhlIHdyb25nIG5hbWVzcGFjZSAoYW5kIHdpbGwgbm90IGRpc3BsYXkpLlxudmFyIHN2Z0VsZW1lbnRzID0gWydjaXJjbGUnLCAnY2xpcFBhdGgnLCAnZGVmcycsICdlbGxpcHNlJywgJ2cnLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXNrJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc3RvcCcsICd0ZXh0JywgJ3RzcGFuJ107XG5zdmdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlTmFtZSkge1xuICBtYXJrdXBXcmFwW25vZGVOYW1lXSA9IHN2Z1dyYXA7XG4gIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gdHJ1ZTtcbn0pO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcmt1cCB3cmFwIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBzdXBwbGllZCBgbm9kZU5hbWVgLlxuICpcbiAqIE5PVEU6IFRoaXMgbGF6aWx5IGRldGVjdHMgd2hpY2ggd3JhcHMgYXJlIG5lY2Vzc2FyeSBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbm9kZU5hbWUgTG93ZXJjYXNlIGBub2RlTmFtZWAuXG4gKiBAcmV0dXJuIHs/YXJyYXl9IE1hcmt1cCB3cmFwIGNvbmZpZ3VyYXRpb24sIGlmIGFwcGxpY2FibGUuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcmt1cFdyYXAobm9kZU5hbWUpIHtcbiAgISEhZHVtbXlOb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01hcmt1cCB3cmFwcGluZyBub2RlIG5vdCBpbml0aWFsaXplZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgaWYgKCFtYXJrdXBXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgIG5vZGVOYW1lID0gJyonO1xuICB9XG4gIGlmICghc2hvdWxkV3JhcC5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICBpZiAobm9kZU5hbWUgPT09ICcqJykge1xuICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8bGluayAvPic7XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1bW15Tm9kZS5pbm5lckhUTUwgPSAnPCcgKyBub2RlTmFtZSArICc+PC8nICsgbm9kZU5hbWUgKyAnPic7XG4gICAgfVxuICAgIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gIWR1bW15Tm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBzaG91bGRXcmFwW25vZGVOYW1lXSA/IG1hcmt1cFdyYXBbbm9kZU5hbWVdIDogbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXJrdXBXcmFwOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvblxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBzdXBwbGllZCBlbGVtZW50IG9yIHdpbmRvdy5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlcyBhcmUgdW5ib3VuZGVkLCB1bmxpa2UgYGdldFNjcm9sbFBvc2l0aW9uYC4gVGhpcyBtZWFucyB0aGV5XG4gKiBtYXkgYmUgbmVnYXRpdmUgb3IgZXhjZWVkIHRoZSBlbGVtZW50IGJvdW5kYXJpZXMgKHdoaWNoIGlzIHBvc3NpYmxlIHVzaW5nXG4gKiBpbmVydGlhbCBzY3JvbGxpbmcpLlxuICpcbiAqIEBwYXJhbSB7RE9NV2luZG93fERPTUVsZW1lbnR9IHNjcm9sbGFibGVcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwIHdpdGggYHhgIGFuZCBgeWAga2V5cy5cbiAqL1xuZnVuY3Rpb24gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24oc2Nyb2xsYWJsZSkge1xuICBpZiAoc2Nyb2xsYWJsZSA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHg6IHNjcm9sbGFibGUuc2Nyb2xsTGVmdCxcbiAgICB5OiBzY3JvbGxhYmxlLnNjcm9sbFRvcFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBoeXBoZW5hdGVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3VwcGVyY2FzZVBhdHRlcm4gPSAvKFtBLVpdKS9nO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIHN0cmluZywgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICpcbiAqIEZvciBDU1Mgc3R5bGUgbmFtZXMsIHVzZSBgaHlwaGVuYXRlU3R5bGVOYW1lYCBpbnN0ZWFkIHdoaWNoIHdvcmtzIHByb3Blcmx5XG4gKiB3aXRoIGFsbCB2ZW5kb3IgcHJlZml4ZXMsIGluY2x1ZGluZyBgbXNgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaHlwaGVuYXRlKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX3VwcGVyY2FzZVBhdHRlcm4sICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaHlwaGVuYXRlU3R5bGVOYW1lXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGh5cGhlbmF0ZSA9IHJlcXVpcmUoJy4vaHlwaGVuYXRlJyk7XG5cbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ01velRyYW5zaXRpb24nKVxuICogICA8IFwiLW1vei10cmFuc2l0aW9uXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ21zVHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbXMtdHJhbnNpdGlvblwiXG4gKlxuICogQXMgTW9kZXJuaXpyIHN1Z2dlc3RzIChodHRwOi8vbW9kZXJuaXpyLmNvbS9kb2NzLyNwcmVmaXhlZCksIGFuIGBtc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gYC1tcy1gLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gaHlwaGVuYXRlKHN0cmluZykucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlU3R5bGVOYW1lOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpbnZhcmlhbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNOb2RlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBOb2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpc1RleHROb2RlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5TWlycm9yXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhbiBlbnVtZXJhdGlvbiB3aXRoIGtleXMgZXF1YWwgdG8gdGhlaXIgdmFsdWUuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKlxuICogICB2YXIgQ09MT1JTID0ga2V5TWlycm9yKHtibHVlOiBudWxsLCByZWQ6IG51bGx9KTtcbiAqICAgdmFyIG15Q29sb3IgPSBDT0xPUlMuYmx1ZTtcbiAqICAgdmFyIGlzQ29sb3JWYWxpZCA9ICEhQ09MT1JTW215Q29sb3JdO1xuICpcbiAqIFRoZSBsYXN0IGxpbmUgY291bGQgbm90IGJlIHBlcmZvcm1lZCBpZiB0aGUgdmFsdWVzIG9mIHRoZSBnZW5lcmF0ZWQgZW51bSB3ZXJlXG4gKiBub3QgZXF1YWwgdG8gdGhlaXIga2V5cy5cbiAqXG4gKiAgIElucHV0OiAge2tleTE6IHZhbDEsIGtleTI6IHZhbDJ9XG4gKiAgIE91dHB1dDoge2tleTE6IGtleTEsIGtleTI6IGtleTJ9XG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9ialxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG52YXIga2V5TWlycm9yID0gZnVuY3Rpb24gKG9iaikge1xuICB2YXIgcmV0ID0ge307XG4gIHZhciBrZXk7XG4gICEob2JqIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KG9iaikpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2tleU1pcnJvciguLi4pOiBBcmd1bWVudCBtdXN0IGJlIGFuIG9iamVjdC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIGZvciAoa2V5IGluIG9iaikge1xuICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXRba2V5XSA9IGtleTtcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBrZXlNaXJyb3I7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGtleU9mXG4gKi9cblxuLyoqXG4gKiBBbGxvd3MgZXh0cmFjdGlvbiBvZiBhIG1pbmlmaWVkIGtleS4gTGV0J3MgdGhlIGJ1aWxkIHN5c3RlbSBtaW5pZnkga2V5c1xuICogd2l0aG91dCBsb3NpbmcgdGhlIGFiaWxpdHkgdG8gZHluYW1pY2FsbHkgdXNlIGtleSBzdHJpbmdzIGFzIHZhbHVlc1xuICogdGhlbXNlbHZlcy4gUGFzcyBpbiBhbiBvYmplY3Qgd2l0aCBhIHNpbmdsZSBrZXkvdmFsIHBhaXIgYW5kIGl0IHdpbGwgcmV0dXJuXG4gKiB5b3UgdGhlIHN0cmluZyBrZXkgb2YgdGhhdCBzaW5nbGUgcmVjb3JkLiBTdXBwb3NlIHlvdSB3YW50IHRvIGdyYWIgdGhlXG4gKiB2YWx1ZSBmb3IgYSBrZXkgJ2NsYXNzTmFtZScgaW5zaWRlIG9mIGFuIG9iamVjdC4gS2V5L3ZhbCBtaW5pZmljYXRpb24gbWF5XG4gKiBoYXZlIGFsaWFzZWQgdGhhdCBrZXkgdG8gYmUgJ3hhMTInLiBrZXlPZih7Y2xhc3NOYW1lOiBudWxsfSkgd2lsbCByZXR1cm5cbiAqICd4YTEyJyBpbiB0aGF0IGNhc2UuIFJlc29sdmUga2V5cyB5b3Ugd2FudCB0byB1c2Ugb25jZSBhdCBzdGFydHVwIHRpbWUsIHRoZW5cbiAqIHJldXNlIHRob3NlIHJlc29sdXRpb25zLlxuICovXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGtleU9mID0gZnVuY3Rpb24gKG9uZUtleU9iaikge1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBvbmVLZXlPYmopIHtcbiAgICBpZiAoIW9uZUtleU9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5T2Y7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG1hcE9iamVjdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBFeGVjdXRlcyB0aGUgcHJvdmlkZWQgYGNhbGxiYWNrYCBvbmNlIGZvciBlYWNoIGVudW1lcmFibGUgb3duIHByb3BlcnR5IGluIHRoZVxuICogb2JqZWN0IGFuZCBjb25zdHJ1Y3RzIGEgbmV3IG9iamVjdCBmcm9tIHRoZSByZXN1bHRzLiBUaGUgYGNhbGxiYWNrYCBpc1xuICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqXG4gKiAgLSB0aGUgcHJvcGVydHkgdmFsdWVcbiAqICAtIHRoZSBwcm9wZXJ0eSBuYW1lXG4gKiAgLSB0aGUgb2JqZWN0IGJlaW5nIHRyYXZlcnNlZFxuICpcbiAqIFByb3BlcnRpZXMgdGhhdCBhcmUgYWRkZWQgYWZ0ZXIgdGhlIGNhbGwgdG8gYG1hcE9iamVjdGAgd2lsbCBub3QgYmUgdmlzaXRlZFxuICogYnkgYGNhbGxiYWNrYC4gSWYgdGhlIHZhbHVlcyBvZiBleGlzdGluZyBwcm9wZXJ0aWVzIGFyZSBjaGFuZ2VkLCB0aGUgdmFsdWVcbiAqIHBhc3NlZCB0byBgY2FsbGJhY2tgIHdpbGwgYmUgdGhlIHZhbHVlIGF0IHRoZSB0aW1lIGBtYXBPYmplY3RgIHZpc2l0cyB0aGVtLlxuICogUHJvcGVydGllcyB0aGF0IGFyZSBkZWxldGVkIGJlZm9yZSBiZWluZyB2aXNpdGVkIGFyZSBub3QgdmlzaXRlZC5cbiAqXG4gKiBAZ3JlcCBmdW5jdGlvbiBvYmplY3RNYXAoKVxuICogQGdyZXAgZnVuY3Rpb24gb2JqTWFwKClcbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gY29udGV4dFxuICogQHJldHVybiB7P29iamVjdH1cbiAqL1xuZnVuY3Rpb24gbWFwT2JqZWN0KG9iamVjdCwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgaWYgKCFvYmplY3QpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgcmVzdWx0ID0ge307XG4gIGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBuYW1lKSkge1xuICAgICAgcmVzdWx0W25hbWVdID0gY2FsbGJhY2suY2FsbChjb250ZXh0LCBvYmplY3RbbmFtZV0sIG5hbWUsIG9iamVjdCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwT2JqZWN0OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBtZW1vaXplU3RyaW5nT25seVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTWVtb2l6ZXMgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBvbmUgc3RyaW5nIGFyZ3VtZW50LlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZVN0cmluZ09ubHkoY2FsbGJhY2spIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgaWYgKCFjYWNoZS5oYXNPd25Qcm9wZXJ0eShzdHJpbmcpKSB7XG4gICAgICBjYWNoZVtzdHJpbmddID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbc3RyaW5nXTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplU3RyaW5nT25seTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgcGVyZm9ybWFuY2VcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBwZXJmb3JtYW5jZTtcblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZSB8fCB3aW5kb3cubXNQZXJmb3JtYW5jZSB8fCB3aW5kb3cud2Via2l0UGVyZm9ybWFuY2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGVyZm9ybWFuY2UgfHwge307IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHBlcmZvcm1hbmNlTm93XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHBlcmZvcm1hbmNlID0gcmVxdWlyZSgnLi9wZXJmb3JtYW5jZScpO1xuXG52YXIgcGVyZm9ybWFuY2VOb3c7XG5cbi8qKlxuICogRGV0ZWN0IGlmIHdlIGNhbiB1c2UgYHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKWAgYW5kIGdyYWNlZnVsbHkgZmFsbGJhY2sgdG9cbiAqIGBEYXRlLm5vdygpYCBpZiBpdCBkb2Vzbid0IGV4aXN0LiBXZSBuZWVkIHRvIHN1cHBvcnQgRmlyZWZveCA8IDE1IGZvciBub3dcbiAqIGJlY2F1c2Ugb2YgRmFjZWJvb2sncyB0ZXN0aW5nIGluZnJhc3RydWN0dXJlLlxuICovXG5pZiAocGVyZm9ybWFuY2Uubm93KSB7XG4gIHBlcmZvcm1hbmNlTm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgfTtcbn0gZWxzZSB7XG4gIHBlcmZvcm1hbmNlTm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlTm93OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzaGFsbG93RXF1YWxcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICB2YXIgYkhhc093blByb3BlcnR5ID0gaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghYkhhc093blByb3BlcnR5KGtleXNBW2ldKSB8fCBvYmpBW2tleXNBW2ldXSAhPT0gb2JqQltrZXlzQVtpXV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHRvQXJyYXlcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBDb252ZXJ0IGFycmF5LWxpa2Ugb2JqZWN0cyB0byBhcnJheXMuXG4gKlxuICogVGhpcyBBUEkgYXNzdW1lcyB0aGUgY2FsbGVyIGtub3dzIHRoZSBjb250ZW50cyBvZiB0aGUgZGF0YSB0eXBlLiBGb3IgbGVzc1xuICogd2VsbCBkZWZpbmVkIGlucHV0cyB1c2UgY3JlYXRlQXJyYXlGcm9tTWl4ZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb258ZmlsZWxpc3R9IG9ialxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gIHZhciBsZW5ndGggPSBvYmoubGVuZ3RoO1xuXG4gIC8vIFNvbWUgYnJvd3NlIGJ1aWx0aW4gb2JqZWN0cyBjYW4gcmVwb3J0IHR5cGVvZiAnZnVuY3Rpb24nIChlLmcuIE5vZGVMaXN0IGluXG4gIC8vIG9sZCB2ZXJzaW9ucyBvZiBTYWZhcmkpLlxuICAhKCFBcnJheS5pc0FycmF5KG9iaikgJiYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBBcnJheS1saWtlIG9iamVjdCBleHBlY3RlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAhKHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBPYmplY3QgbmVlZHMgYSBsZW5ndGggcHJvcGVydHknKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgIShsZW5ndGggPT09IDAgfHwgbGVuZ3RoIC0gMSBpbiBvYmopID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RvQXJyYXk6IE9iamVjdCBzaG91bGQgaGF2ZSBrZXlzIGZvciBpbmRpY2VzJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gIC8vIE9sZCBJRSBkb2Vzbid0IGdpdmUgY29sbGVjdGlvbnMgYWNjZXNzIHRvIGhhc093blByb3BlcnR5LiBBc3N1bWUgaW5wdXRzXG4gIC8vIHdpdGhvdXQgbWV0aG9kIHdpbGwgdGhyb3cgZHVyaW5nIHRoZSBzbGljZSBjYWxsIGFuZCBza2lwIHN0cmFpZ2h0IHRvIHRoZVxuICAvLyBmYWxsYmFjay5cbiAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJRSA8IDkgZG9lcyBub3Qgc3VwcG9ydCBBcnJheSNzbGljZSBvbiBjb2xsZWN0aW9ucyBvYmplY3RzXG4gICAgfVxuICB9XG5cbiAgLy8gRmFsbCBiYWNrIHRvIGNvcHlpbmcga2V5IGJ5IGtleS4gVGhpcyBhc3N1bWVzIGFsbCBrZXlzIGhhdmUgYSB2YWx1ZSxcbiAgLy8gc28gd2lsbCBub3QgcHJlc2VydmUgc3BhcnNlbHkgcG9wdWxhdGVkIGlucHV0cy5cbiAgdmFyIHJldCA9IEFycmF5KGxlbmd0aCk7XG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBsZW5ndGg7IGlpKyspIHtcbiAgICByZXRbaWldID0gb2JqW2lpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvQXJyYXk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHdhcm5pbmdcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9lbXB0eUZ1bmN0aW9uJyk7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZW1wdHlGdW5jdGlvbjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uIChjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgKyAnbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQuaW5kZXhPZignRmFpbGVkIENvbXBvc2l0ZSBwcm9wVHlwZTogJykgPT09IDApIHtcbiAgICAgIHJldHVybjsgLy8gSWdub3JlIENvbXBvc2l0ZUNvbXBvbmVudCBwcm9wdHlwZSBjaGVjay5cbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7IiwiLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCBuYXZpZ2F0aW9uIHdhcyBjYXVzZWQgYnkgYSBjYWxsIHRvIGhpc3RvcnkucHVzaC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIFBVU0ggPSAnUFVTSCc7XG5cbmV4cG9ydHMuUFVTSCA9IFBVU0g7XG4vKipcbiAqIEluZGljYXRlcyB0aGF0IG5hdmlnYXRpb24gd2FzIGNhdXNlZCBieSBhIGNhbGwgdG8gaGlzdG9yeS5yZXBsYWNlLlxuICovXG52YXIgUkVQTEFDRSA9ICdSRVBMQUNFJztcblxuZXhwb3J0cy5SRVBMQUNFID0gUkVQTEFDRTtcbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgbmF2aWdhdGlvbiB3YXMgY2F1c2VkIGJ5IHNvbWUgb3RoZXIgYWN0aW9uIHN1Y2hcbiAqIGFzIHVzaW5nIGEgYnJvd3NlcidzIGJhY2svZm9yd2FyZCBidXR0b25zIGFuZC9vciBtYW51YWxseSBtYW5pcHVsYXRpbmdcbiAqIHRoZSBVUkwgaW4gYSBicm93c2VyJ3MgbG9jYXRpb24gYmFyLiBUaGlzIGlzIHRoZSBkZWZhdWx0LlxuICpcbiAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93RXZlbnRIYW5kbGVycy9vbnBvcHN0YXRlXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqL1xudmFyIFBPUCA9ICdQT1AnO1xuXG5leHBvcnRzLlBPUCA9IFBPUDtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgUFVTSDogUFVTSCxcbiAgUkVQTEFDRTogUkVQTEFDRSxcbiAgUE9QOiBQT1Bcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmxvb3BBc3luYyA9IGxvb3BBc3luYztcblxuZnVuY3Rpb24gbG9vcEFzeW5jKHR1cm5zLCB3b3JrLCBjYWxsYmFjaykge1xuICB2YXIgY3VycmVudFR1cm4gPSAwO1xuICB2YXIgaXNEb25lID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICBpc0RvbmUgPSB0cnVlO1xuICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBuZXh0KCkge1xuICAgIGlmIChpc0RvbmUpIHJldHVybjtcblxuICAgIGlmIChjdXJyZW50VHVybiA8IHR1cm5zKSB7XG4gICAgICB3b3JrLmNhbGwodGhpcywgY3VycmVudFR1cm4rKywgbmV4dCwgZG9uZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBuZXh0KCk7XG59IiwiLyplc2xpbnQtZGlzYWJsZSBuby1lbXB0eSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5zYXZlU3RhdGUgPSBzYXZlU3RhdGU7XG5leHBvcnRzLnJlYWRTdGF0ZSA9IHJlYWRTdGF0ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIEtleVByZWZpeCA9ICdAQEhpc3RvcnkvJztcbnZhciBRdW90YUV4Y2VlZGVkRXJyb3IgPSAnUXVvdGFFeGNlZWRlZEVycm9yJztcbnZhciBTZWN1cml0eUVycm9yID0gJ1NlY3VyaXR5RXJyb3InO1xuXG5mdW5jdGlvbiBjcmVhdGVLZXkoa2V5KSB7XG4gIHJldHVybiBLZXlQcmVmaXggKyBrZXk7XG59XG5cbmZ1bmN0aW9uIHNhdmVTdGF0ZShrZXksIHN0YXRlKSB7XG4gIHRyeSB7XG4gICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oY3JlYXRlS2V5KGtleSksIEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLm5hbWUgPT09IFNlY3VyaXR5RXJyb3IpIHtcbiAgICAgIC8vIEJsb2NraW5nIGNvb2tpZXMgaW4gQ2hyb21lL0ZpcmVmb3gvU2FmYXJpIHRocm93cyBTZWN1cml0eUVycm9yIG9uIGFueVxuICAgICAgLy8gYXR0ZW1wdCB0byBhY2Nlc3Mgd2luZG93LnNlc3Npb25TdG9yYWdlLlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnW2hpc3RvcnldIFVuYWJsZSB0byBzYXZlIHN0YXRlOyBzZXNzaW9uU3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlIGR1ZSB0byBzZWN1cml0eSBzZXR0aW5ncycpIDogdW5kZWZpbmVkO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVycm9yLm5hbWUgPT09IFF1b3RhRXhjZWVkZWRFcnJvciAmJiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBTYWZhcmkgXCJwcml2YXRlIG1vZGVcIiB0aHJvd3MgUXVvdGFFeGNlZWRlZEVycm9yLlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnW2hpc3RvcnldIFVuYWJsZSB0byBzYXZlIHN0YXRlOyBzZXNzaW9uU3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlIGluIFNhZmFyaSBwcml2YXRlIG1vZGUnKSA6IHVuZGVmaW5lZDtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlYWRTdGF0ZShrZXkpIHtcbiAgdmFyIGpzb24gPSB1bmRlZmluZWQ7XG4gIHRyeSB7XG4gICAganNvbiA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGNyZWF0ZUtleShrZXkpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IubmFtZSA9PT0gU2VjdXJpdHlFcnJvcikge1xuICAgICAgLy8gQmxvY2tpbmcgY29va2llcyBpbiBDaHJvbWUvRmlyZWZveC9TYWZhcmkgdGhyb3dzIFNlY3VyaXR5RXJyb3Igb24gYW55XG4gICAgICAvLyBhdHRlbXB0IHRvIGFjY2VzcyB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdbaGlzdG9yeV0gVW5hYmxlIHRvIHJlYWQgc3RhdGU7IHNlc3Npb25TdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUgZHVlIHRvIHNlY3VyaXR5IHNldHRpbmdzJykgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGlmIChqc29uKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKGpzb24pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZ25vcmUgaW52YWxpZCBKU09OLlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuYWRkRXZlbnRMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXI7XG5leHBvcnRzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSByZW1vdmVFdmVudExpc3RlbmVyO1xuZXhwb3J0cy5nZXRIYXNoUGF0aCA9IGdldEhhc2hQYXRoO1xuZXhwb3J0cy5yZXBsYWNlSGFzaFBhdGggPSByZXBsYWNlSGFzaFBhdGg7XG5leHBvcnRzLmdldFdpbmRvd1BhdGggPSBnZXRXaW5kb3dQYXRoO1xuZXhwb3J0cy5nbyA9IGdvO1xuZXhwb3J0cy5nZXRVc2VyQ29uZmlybWF0aW9uID0gZ2V0VXNlckNvbmZpcm1hdGlvbjtcbmV4cG9ydHMuc3VwcG9ydHNIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5O1xuZXhwb3J0cy5zdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoO1xuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICBpZiAobm9kZS5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgaWYgKG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnIycpWzFdIHx8ICcnO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1BhdGgoKSB7XG4gIHJldHVybiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgd2luZG93LmxvY2F0aW9uLmhhc2g7XG59XG5cbmZ1bmN0aW9uIGdvKG4pIHtcbiAgaWYgKG4pIHdpbmRvdy5oaXN0b3J5LmdvKG4pO1xufVxuXG5mdW5jdGlvbiBnZXRVc2VyQ29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JhY2t0L3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gRklYTUU6IFdvcmsgYXJvdW5kIG91ciBicm93c2VyIGhpc3Rvcnkgbm90IHdvcmtpbmcgY29ycmVjdGx5IG9uIENocm9tZVxuICAvLyBpT1M6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYWNrdC9yZWFjdC1yb3V0ZXIvaXNzdWVzLzI1NjVcbiAgaWYgKHVhLmluZGV4T2YoJ0NyaU9TJykgIT09IC0xKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIHJldHVybiB1YS5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZXhwb3J0cy5jYW5Vc2VET00gPSBjYW5Vc2VET007IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfQWN0aW9ucyA9IHJlcXVpcmUoJy4vQWN0aW9ucycpO1xuXG52YXIgX0V4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG52YXIgX0RPTVN0YXRlU3RvcmFnZSA9IHJlcXVpcmUoJy4vRE9NU3RhdGVTdG9yYWdlJyk7XG5cbnZhciBfY3JlYXRlRE9NSGlzdG9yeSA9IHJlcXVpcmUoJy4vY3JlYXRlRE9NSGlzdG9yeScpO1xuXG52YXIgX2NyZWF0ZURPTUhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlRE9NSGlzdG9yeSk7XG5cbnZhciBfcGFyc2VQYXRoID0gcmVxdWlyZSgnLi9wYXJzZVBhdGgnKTtcblxudmFyIF9wYXJzZVBhdGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyc2VQYXRoKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIEhUTUw1J3MgaGlzdG9yeSBBUElcbiAqIChwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudCkgdG8gbWFuYWdlIGhpc3RvcnkuXG4gKiBUaGlzIGlzIHRoZSByZWNvbW1lbmRlZCBtZXRob2Qgb2YgbWFuYWdpbmcgaGlzdG9yeSBpbiBicm93c2VycyBiZWNhdXNlXG4gKiBpdCBwcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqXG4gKiBOb3RlOiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBmdWxsXG4gKiBwYWdlIHJlbG9hZHMgd2lsbCBiZSB1c2VkIHRvIHByZXNlcnZlIFVSTHMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG4gICFfRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gIHZhciBmb3JjZVJlZnJlc2ggPSBvcHRpb25zLmZvcmNlUmVmcmVzaDtcblxuICB2YXIgaXNTdXBwb3J0ZWQgPSBfRE9NVXRpbHMuc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciB1c2VSZWZyZXNoID0gIWlzU3VwcG9ydGVkIHx8IGZvcmNlUmVmcmVzaDtcblxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgaGlzdG9yeVN0YXRlID0gaGlzdG9yeVN0YXRlIHx8IHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuXG4gICAgdmFyIHBhdGggPSBfRE9NVXRpbHMuZ2V0V2luZG93UGF0aCgpO1xuICAgIHZhciBfaGlzdG9yeVN0YXRlID0gaGlzdG9yeVN0YXRlO1xuICAgIHZhciBrZXkgPSBfaGlzdG9yeVN0YXRlLmtleTtcblxuICAgIHZhciBzdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICBpZiAoa2V5KSB7XG4gICAgICBzdGF0ZSA9IF9ET01TdGF0ZVN0b3JhZ2UucmVhZFN0YXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlID0gbnVsbDtcbiAgICAgIGtleSA9IGhpc3RvcnkuY3JlYXRlS2V5KCk7XG5cbiAgICAgIGlmIChpc1N1cHBvcnRlZCkgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKF9leHRlbmRzKHt9LCBoaXN0b3J5U3RhdGUsIHsga2V5OiBrZXkgfSksIG51bGwsIHBhdGgpO1xuICAgIH1cblxuICAgIHZhciBsb2NhdGlvbiA9IF9wYXJzZVBhdGgyWydkZWZhdWx0J10ocGF0aCk7XG5cbiAgICByZXR1cm4gaGlzdG9yeS5jcmVhdGVMb2NhdGlvbihfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHsgc3RhdGU6IHN0YXRlIH0pLCB1bmRlZmluZWQsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydFBvcFN0YXRlTGlzdGVuZXIoX3JlZikge1xuICAgIHZhciB0cmFuc2l0aW9uVG8gPSBfcmVmLnRyYW5zaXRpb25UbztcblxuICAgIGZ1bmN0aW9uIHBvcFN0YXRlTGlzdGVuZXIoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47IC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG5cbiAgICAgIHRyYW5zaXRpb25UbyhnZXRDdXJyZW50TG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgICB9XG5cbiAgICBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csICdwb3BzdGF0ZScsIHBvcFN0YXRlTGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgJ3BvcHN0YXRlJywgcG9wU3RhdGVMaXN0ZW5lcik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmlzaFRyYW5zaXRpb24obG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZW5hbWUgPSBsb2NhdGlvbi5iYXNlbmFtZTtcbiAgICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgICB2YXIgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcbiAgICB2YXIgYWN0aW9uID0gbG9jYXRpb24uYWN0aW9uO1xuICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXk7XG5cbiAgICBpZiAoYWN0aW9uID09PSBfQWN0aW9ucy5QT1ApIHJldHVybjsgLy8gTm90aGluZyB0byBkby5cblxuICAgIF9ET01TdGF0ZVN0b3JhZ2Uuc2F2ZVN0YXRlKGtleSwgc3RhdGUpO1xuXG4gICAgdmFyIHBhdGggPSAoYmFzZW5hbWUgfHwgJycpICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHZhciBoaXN0b3J5U3RhdGUgPSB7XG4gICAgICBrZXk6IGtleVxuICAgIH07XG5cbiAgICBpZiAoYWN0aW9uID09PSBfQWN0aW9ucy5QVVNIKSB7XG4gICAgICBpZiAodXNlUmVmcmVzaCkge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHBhdGg7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gUHJldmVudCBsb2NhdGlvbiB1cGRhdGUuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShoaXN0b3J5U3RhdGUsIG51bGwsIHBhdGgpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJFUExBQ0VcbiAgICAgIGlmICh1c2VSZWZyZXNoKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHBhdGgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFByZXZlbnQgbG9jYXRpb24gdXBkYXRlLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoaGlzdG9yeVN0YXRlLCBudWxsLCBwYXRoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0gX2NyZWF0ZURPTUhpc3RvcnkyWydkZWZhdWx0J10oX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICBnZXRDdXJyZW50TG9jYXRpb246IGdldEN1cnJlbnRMb2NhdGlvbixcbiAgICBmaW5pc2hUcmFuc2l0aW9uOiBmaW5pc2hUcmFuc2l0aW9uLFxuICAgIHNhdmVTdGF0ZTogX0RPTVN0YXRlU3RvcmFnZS5zYXZlU3RhdGVcbiAgfSkpO1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMCxcbiAgICAgIHN0b3BQb3BTdGF0ZUxpc3RlbmVyID0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIGxpc3RlbkJlZm9yZShsaXN0ZW5lcikge1xuICAgIGlmICgrK2xpc3RlbmVyQ291bnQgPT09IDEpIHN0b3BQb3BTdGF0ZUxpc3RlbmVyID0gc3RhcnRQb3BTdGF0ZUxpc3RlbmVyKGhpc3RvcnkpO1xuXG4gICAgdmFyIHVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW5CZWZvcmUobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHVubGlzdGVuKCk7XG5cbiAgICAgIGlmICgtLWxpc3RlbmVyQ291bnQgPT09IDApIHN0b3BQb3BTdGF0ZUxpc3RlbmVyKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIGlmICgrK2xpc3RlbmVyQ291bnQgPT09IDEpIHN0b3BQb3BTdGF0ZUxpc3RlbmVyID0gc3RhcnRQb3BTdGF0ZUxpc3RlbmVyKGhpc3RvcnkpO1xuXG4gICAgdmFyIHVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4obGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHVubGlzdGVuKCk7XG5cbiAgICAgIGlmICgtLWxpc3RlbmVyQ291bnQgPT09IDApIHN0b3BQb3BTdGF0ZUxpc3RlbmVyKCk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIGRlcHJlY2F0ZWRcbiAgZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XG4gICAgaWYgKCsrbGlzdGVuZXJDb3VudCA9PT0gMSkgc3RvcFBvcFN0YXRlTGlzdGVuZXIgPSBzdGFydFBvcFN0YXRlTGlzdGVuZXIoaGlzdG9yeSk7XG5cbiAgICBoaXN0b3J5LnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vayk7XG4gIH1cblxuICAvLyBkZXByZWNhdGVkXG4gIGZ1bmN0aW9uIHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XG4gICAgaGlzdG9yeS51bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vayk7XG5cbiAgICBpZiAoLS1saXN0ZW5lckNvdW50ID09PSAwKSBzdG9wUG9wU3RhdGVMaXN0ZW5lcigpO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBoaXN0b3J5LCB7XG4gICAgbGlzdGVuQmVmb3JlOiBsaXN0ZW5CZWZvcmUsXG4gICAgbGlzdGVuOiBsaXN0ZW4sXG4gICAgcmVnaXN0ZXJUcmFuc2l0aW9uSG9vazogcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayxcbiAgICB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9va1xuICB9KTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9FeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIF9ET01VdGlscyA9IHJlcXVpcmUoJy4vRE9NVXRpbHMnKTtcblxudmFyIF9jcmVhdGVIaXN0b3J5ID0gcmVxdWlyZSgnLi9jcmVhdGVIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlSGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVIaXN0b3J5KTtcblxuZnVuY3Rpb24gY3JlYXRlRE9NSGlzdG9yeShvcHRpb25zKSB7XG4gIHZhciBoaXN0b3J5ID0gX2NyZWF0ZUhpc3RvcnkyWydkZWZhdWx0J10oX2V4dGVuZHMoe1xuICAgIGdldFVzZXJDb25maXJtYXRpb246IF9ET01VdGlscy5nZXRVc2VyQ29uZmlybWF0aW9uXG4gIH0sIG9wdGlvbnMsIHtcbiAgICBnbzogX0RPTVV0aWxzLmdvXG4gIH0pKTtcblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICAhX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnRE9NIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgcmV0dXJuIGhpc3RvcnkubGlzdGVuKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgaGlzdG9yeSwge1xuICAgIGxpc3RlbjogbGlzdGVuXG4gIH0pO1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVET01IaXN0b3J5O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX0FjdGlvbnMgPSByZXF1aXJlKCcuL0FjdGlvbnMnKTtcblxudmFyIF9FeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIF9ET01VdGlscyA9IHJlcXVpcmUoJy4vRE9NVXRpbHMnKTtcblxudmFyIF9ET01TdGF0ZVN0b3JhZ2UgPSByZXF1aXJlKCcuL0RPTVN0YXRlU3RvcmFnZScpO1xuXG52YXIgX2NyZWF0ZURPTUhpc3RvcnkgPSByZXF1aXJlKCcuL2NyZWF0ZURPTUhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVET01IaXN0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZURPTUhpc3RvcnkpO1xuXG52YXIgX3BhcnNlUGF0aCA9IHJlcXVpcmUoJy4vcGFyc2VQYXRoJyk7XG5cbnZhciBfcGFyc2VQYXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcnNlUGF0aCk7XG5cbmZ1bmN0aW9uIGlzQWJzb2x1dGVQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJyAmJiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVTbGFzaCgpIHtcbiAgdmFyIHBhdGggPSBfRE9NVXRpbHMuZ2V0SGFzaFBhdGgoKTtcblxuICBpZiAoaXNBYnNvbHV0ZVBhdGgocGF0aCkpIHJldHVybiB0cnVlO1xuXG4gIF9ET01VdGlscy5yZXBsYWNlSGFzaFBhdGgoJy8nICsgcGF0aCk7XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhZGRRdWVyeVN0cmluZ1ZhbHVlVG9QYXRoKHBhdGgsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHBhdGggKyAocGF0aC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIChrZXkgKyAnPScgKyB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwUXVlcnlTdHJpbmdWYWx1ZUZyb21QYXRoKHBhdGgsIGtleSkge1xuICByZXR1cm4gcGF0aC5yZXBsYWNlKG5ldyBSZWdFeHAoJ1s/Jl0/JyArIGtleSArICc9W2EtekEtWjAtOV0rJyksICcnKTtcbn1cblxuZnVuY3Rpb24gZ2V0UXVlcnlTdHJpbmdWYWx1ZUZyb21QYXRoKHBhdGgsIGtleSkge1xuICB2YXIgbWF0Y2ggPSBwYXRoLm1hdGNoKG5ldyBSZWdFeHAoJ1xcXFw/Lio/XFxcXGInICsga2V5ICsgJz0oLis/KVxcXFxiJykpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV07XG59XG5cbnZhciBEZWZhdWx0UXVlcnlLZXkgPSAnX2snO1xuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblxuICAhX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICB2YXIgcXVlcnlLZXkgPSBvcHRpb25zLnF1ZXJ5S2V5O1xuXG4gIGlmIChxdWVyeUtleSA9PT0gdW5kZWZpbmVkIHx8ICEhcXVlcnlLZXkpIHF1ZXJ5S2V5ID0gdHlwZW9mIHF1ZXJ5S2V5ID09PSAnc3RyaW5nJyA/IHF1ZXJ5S2V5IDogRGVmYXVsdFF1ZXJ5S2V5O1xuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IF9ET01VdGlscy5nZXRIYXNoUGF0aCgpO1xuXG4gICAgdmFyIGtleSA9IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHF1ZXJ5S2V5KSB7XG4gICAgICBrZXkgPSBnZXRRdWVyeVN0cmluZ1ZhbHVlRnJvbVBhdGgocGF0aCwgcXVlcnlLZXkpO1xuICAgICAgcGF0aCA9IHN0cmlwUXVlcnlTdHJpbmdWYWx1ZUZyb21QYXRoKHBhdGgsIHF1ZXJ5S2V5KTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzdGF0ZSA9IF9ET01TdGF0ZVN0b3JhZ2UucmVhZFN0YXRlKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZSA9IG51bGw7XG4gICAgICAgIGtleSA9IGhpc3RvcnkuY3JlYXRlS2V5KCk7XG4gICAgICAgIF9ET01VdGlscy5yZXBsYWNlSGFzaFBhdGgoYWRkUXVlcnlTdHJpbmdWYWx1ZVRvUGF0aChwYXRoLCBxdWVyeUtleSwga2V5KSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleSA9IHN0YXRlID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbG9jYXRpb24gPSBfcGFyc2VQYXRoMlsnZGVmYXVsdCddKHBhdGgpO1xuXG4gICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlTG9jYXRpb24oX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7IHN0YXRlOiBzdGF0ZSB9KSwgdW5kZWZpbmVkLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnRIYXNoQ2hhbmdlTGlzdGVuZXIoX3JlZikge1xuICAgIHZhciB0cmFuc2l0aW9uVG8gPSBfcmVmLnRyYW5zaXRpb25UbztcblxuICAgIGZ1bmN0aW9uIGhhc2hDaGFuZ2VMaXN0ZW5lcigpIHtcbiAgICAgIGlmICghZW5zdXJlU2xhc2goKSkgcmV0dXJuOyAvLyBBbHdheXMgbWFrZSBzdXJlIGhhc2hlcyBhcmUgcHJlY2VlZGVkIHdpdGggYSAvLlxuXG4gICAgICB0cmFuc2l0aW9uVG8oZ2V0Q3VycmVudExvY2F0aW9uKCkpO1xuICAgIH1cblxuICAgIGVuc3VyZVNsYXNoKCk7XG4gICAgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIod2luZG93LCAnaGFzaGNoYW5nZScsIGhhc2hDaGFuZ2VMaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCAnaGFzaGNoYW5nZScsIGhhc2hDaGFuZ2VMaXN0ZW5lcik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmlzaFRyYW5zaXRpb24obG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZW5hbWUgPSBsb2NhdGlvbi5iYXNlbmFtZTtcbiAgICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgICB2YXIgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIHZhciBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuICAgIHZhciBhY3Rpb24gPSBsb2NhdGlvbi5hY3Rpb247XG4gICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleTtcblxuICAgIGlmIChhY3Rpb24gPT09IF9BY3Rpb25zLlBPUCkgcmV0dXJuOyAvLyBOb3RoaW5nIHRvIGRvLlxuXG4gICAgdmFyIHBhdGggPSAoYmFzZW5hbWUgfHwgJycpICsgcGF0aG5hbWUgKyBzZWFyY2g7XG5cbiAgICBpZiAocXVlcnlLZXkpIHtcbiAgICAgIHBhdGggPSBhZGRRdWVyeVN0cmluZ1ZhbHVlVG9QYXRoKHBhdGgsIHF1ZXJ5S2V5LCBrZXkpO1xuICAgICAgX0RPTVN0YXRlU3RvcmFnZS5zYXZlU3RhdGUoa2V5LCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERyb3Aga2V5IGFuZCBzdGF0ZS5cbiAgICAgIGxvY2F0aW9uLmtleSA9IGxvY2F0aW9uLnN0YXRlID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudEhhc2ggPSBfRE9NVXRpbHMuZ2V0SGFzaFBhdGgoKTtcblxuICAgIGlmIChhY3Rpb24gPT09IF9BY3Rpb25zLlBVU0gpIHtcbiAgICAgIGlmIChjdXJyZW50SGFzaCAhPT0gcGF0aCkge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdZb3UgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aCB1c2luZyBoYXNoIGhpc3RvcnknKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRIYXNoICE9PSBwYXRoKSB7XG4gICAgICAvLyBSRVBMQUNFXG4gICAgICBfRE9NVXRpbHMucmVwbGFjZUhhc2hQYXRoKHBhdGgpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0gX2NyZWF0ZURPTUhpc3RvcnkyWydkZWZhdWx0J10oX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICBnZXRDdXJyZW50TG9jYXRpb246IGdldEN1cnJlbnRMb2NhdGlvbixcbiAgICBmaW5pc2hUcmFuc2l0aW9uOiBmaW5pc2hUcmFuc2l0aW9uLFxuICAgIHNhdmVTdGF0ZTogX0RPTVN0YXRlU3RvcmFnZS5zYXZlU3RhdGVcbiAgfSkpO1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMCxcbiAgICAgIHN0b3BIYXNoQ2hhbmdlTGlzdGVuZXIgPSB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCsrbGlzdGVuZXJDb3VudCA9PT0gMSkgc3RvcEhhc2hDaGFuZ2VMaXN0ZW5lciA9IHN0YXJ0SGFzaENoYW5nZUxpc3RlbmVyKGhpc3RvcnkpO1xuXG4gICAgdmFyIHVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW5CZWZvcmUobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHVubGlzdGVuKCk7XG5cbiAgICAgIGlmICgtLWxpc3RlbmVyQ291bnQgPT09IDApIHN0b3BIYXNoQ2hhbmdlTGlzdGVuZXIoKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgaWYgKCsrbGlzdGVuZXJDb3VudCA9PT0gMSkgc3RvcEhhc2hDaGFuZ2VMaXN0ZW5lciA9IHN0YXJ0SGFzaENoYW5nZUxpc3RlbmVyKGhpc3RvcnkpO1xuXG4gICAgdmFyIHVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4obGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHVubGlzdGVuKCk7XG5cbiAgICAgIGlmICgtLWxpc3RlbmVyQ291bnQgPT09IDApIHN0b3BIYXNoQ2hhbmdlTGlzdGVuZXIoKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChsb2NhdGlvbikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShxdWVyeUtleSB8fCBsb2NhdGlvbi5zdGF0ZSA9PSBudWxsLCAnWW91IGNhbm5vdCB1c2Ugc3RhdGUgd2l0aG91dCBhIHF1ZXJ5S2V5IGl0IHdpbGwgYmUgZHJvcHBlZCcpIDogdW5kZWZpbmVkO1xuXG4gICAgaGlzdG9yeS5wdXNoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UobG9jYXRpb24pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10ocXVlcnlLZXkgfHwgbG9jYXRpb24uc3RhdGUgPT0gbnVsbCwgJ1lvdSBjYW5ub3QgdXNlIHN0YXRlIHdpdGhvdXQgYSBxdWVyeUtleSBpdCB3aWxsIGJlIGRyb3BwZWQnKSA6IHVuZGVmaW5lZDtcblxuICAgIGhpc3RvcnkucmVwbGFjZShsb2NhdGlvbik7XG4gIH1cblxuICB2YXIgZ29Jc1N1cHBvcnRlZFdpdGhvdXRSZWxvYWQgPSBfRE9NVXRpbHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKGdvSXNTdXBwb3J0ZWRXaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB1bmRlZmluZWQ7XG5cbiAgICBoaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgcmV0dXJuICcjJyArIGhpc3RvcnkuY3JlYXRlSHJlZihwYXRoKTtcbiAgfVxuXG4gIC8vIGRlcHJlY2F0ZWRcbiAgZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XG4gICAgaWYgKCsrbGlzdGVuZXJDb3VudCA9PT0gMSkgc3RvcEhhc2hDaGFuZ2VMaXN0ZW5lciA9IHN0YXJ0SGFzaENoYW5nZUxpc3RlbmVyKGhpc3RvcnkpO1xuXG4gICAgaGlzdG9yeS5yZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spO1xuICB9XG5cbiAgLy8gZGVwcmVjYXRlZFxuICBmdW5jdGlvbiB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vaykge1xuICAgIGhpc3RvcnkudW5yZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spO1xuXG4gICAgaWYgKC0tbGlzdGVuZXJDb3VudCA9PT0gMCkgc3RvcEhhc2hDaGFuZ2VMaXN0ZW5lcigpO1xuICB9XG5cbiAgLy8gZGVwcmVjYXRlZFxuICBmdW5jdGlvbiBwdXNoU3RhdGUoc3RhdGUsIHBhdGgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10ocXVlcnlLZXkgfHwgc3RhdGUgPT0gbnVsbCwgJ1lvdSBjYW5ub3QgdXNlIHN0YXRlIHdpdGhvdXQgYSBxdWVyeUtleSBpdCB3aWxsIGJlIGRyb3BwZWQnKSA6IHVuZGVmaW5lZDtcblxuICAgIGhpc3RvcnkucHVzaFN0YXRlKHN0YXRlLCBwYXRoKTtcbiAgfVxuXG4gIC8vIGRlcHJlY2F0ZWRcbiAgZnVuY3Rpb24gcmVwbGFjZVN0YXRlKHN0YXRlLCBwYXRoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKHF1ZXJ5S2V5IHx8IHN0YXRlID09IG51bGwsICdZb3UgY2Fubm90IHVzZSBzdGF0ZSB3aXRob3V0IGEgcXVlcnlLZXkgaXQgd2lsbCBiZSBkcm9wcGVkJykgOiB1bmRlZmluZWQ7XG5cbiAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZSwgcGF0aCk7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcbiAgICBsaXN0ZW5CZWZvcmU6IGxpc3RlbkJlZm9yZSxcbiAgICBsaXN0ZW46IGxpc3RlbixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG5cbiAgICByZWdpc3RlclRyYW5zaXRpb25Ib29rOiByZWdpc3RlclRyYW5zaXRpb25Ib29rLCAvLyBkZXByZWNhdGVkIC0gd2FybmluZyBpcyBpbiBjcmVhdGVIaXN0b3J5XG4gICAgdW5yZWdpc3RlclRyYW5zaXRpb25Ib29rOiB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2ssIC8vIGRlcHJlY2F0ZWQgLSB3YXJuaW5nIGlzIGluIGNyZWF0ZUhpc3RvcnlcbiAgICBwdXNoU3RhdGU6IHB1c2hTdGF0ZSwgLy8gZGVwcmVjYXRlZCAtIHdhcm5pbmcgaXMgaW4gY3JlYXRlSGlzdG9yeVxuICAgIHJlcGxhY2VTdGF0ZTogcmVwbGFjZVN0YXRlIC8vIGRlcHJlY2F0ZWQgLSB3YXJuaW5nIGlzIGluIGNyZWF0ZUhpc3RvcnlcbiAgfSk7XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNyZWF0ZUhhc2hIaXN0b3J5O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiLy9pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJ1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfZGVlcEVxdWFsID0gcmVxdWlyZSgnZGVlcC1lcXVhbCcpO1xuXG52YXIgX2RlZXBFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWVwRXF1YWwpO1xuXG52YXIgX0FzeW5jVXRpbHMgPSByZXF1aXJlKCcuL0FzeW5jVXRpbHMnKTtcblxudmFyIF9BY3Rpb25zID0gcmVxdWlyZSgnLi9BY3Rpb25zJyk7XG5cbnZhciBfY3JlYXRlTG9jYXRpb24yID0gcmVxdWlyZSgnLi9jcmVhdGVMb2NhdGlvbicpO1xuXG52YXIgX2NyZWF0ZUxvY2F0aW9uMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUxvY2F0aW9uMik7XG5cbnZhciBfcnVuVHJhbnNpdGlvbkhvb2sgPSByZXF1aXJlKCcuL3J1blRyYW5zaXRpb25Ib29rJyk7XG5cbnZhciBfcnVuVHJhbnNpdGlvbkhvb2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcnVuVHJhbnNpdGlvbkhvb2spO1xuXG52YXIgX3BhcnNlUGF0aCA9IHJlcXVpcmUoJy4vcGFyc2VQYXRoJyk7XG5cbnZhciBfcGFyc2VQYXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcnNlUGF0aCk7XG5cbnZhciBfZGVwcmVjYXRlID0gcmVxdWlyZSgnLi9kZXByZWNhdGUnKTtcblxudmFyIF9kZXByZWNhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVwcmVjYXRlKTtcblxuZnVuY3Rpb24gY3JlYXRlUmFuZG9tS2V5KGxlbmd0aCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmXG4gIC8vYS5hY3Rpb24gPT09IGIuYWN0aW9uICYmIC8vIERpZmZlcmVudCBhY3Rpb24gIT09IGxvY2F0aW9uIGNoYW5nZS5cbiAgYS5rZXkgPT09IGIua2V5ICYmIF9kZWVwRXF1YWwyWydkZWZhdWx0J10oYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbnZhciBEZWZhdWx0S2V5TGVuZ3RoID0gNjtcblxuZnVuY3Rpb24gY3JlYXRlSGlzdG9yeSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcbiAgdmFyIGdldEN1cnJlbnRMb2NhdGlvbiA9IG9wdGlvbnMuZ2V0Q3VycmVudExvY2F0aW9uO1xuICB2YXIgZmluaXNoVHJhbnNpdGlvbiA9IG9wdGlvbnMuZmluaXNoVHJhbnNpdGlvbjtcbiAgdmFyIHNhdmVTdGF0ZSA9IG9wdGlvbnMuc2F2ZVN0YXRlO1xuICB2YXIgZ28gPSBvcHRpb25zLmdvO1xuICB2YXIga2V5TGVuZ3RoID0gb3B0aW9ucy5rZXlMZW5ndGg7XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gb3B0aW9ucy5nZXRVc2VyQ29uZmlybWF0aW9uO1xuXG4gIGlmICh0eXBlb2Yga2V5TGVuZ3RoICE9PSAnbnVtYmVyJykga2V5TGVuZ3RoID0gRGVmYXVsdEtleUxlbmd0aDtcblxuICB2YXIgdHJhbnNpdGlvbkhvb2tzID0gW107XG5cbiAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlKGhvb2spIHtcbiAgICB0cmFuc2l0aW9uSG9va3MucHVzaChob29rKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cmFuc2l0aW9uSG9va3MgPSB0cmFuc2l0aW9uSG9va3MuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBob29rO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBhbGxLZXlzID0gW107XG4gIHZhciBjaGFuZ2VMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIGxvY2F0aW9uID0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnQoKSB7XG4gICAgaWYgKHBlbmRpbmdMb2NhdGlvbiAmJiBwZW5kaW5nTG9jYXRpb24uYWN0aW9uID09PSBfQWN0aW9ucy5QT1ApIHtcbiAgICAgIHJldHVybiBhbGxLZXlzLmluZGV4T2YocGVuZGluZ0xvY2F0aW9uLmtleSk7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIGFsbEtleXMuaW5kZXhPZihsb2NhdGlvbi5rZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTG9jYXRpb24obmV3TG9jYXRpb24pIHtcbiAgICB2YXIgY3VycmVudCA9IGdldEN1cnJlbnQoKTtcblxuICAgIGxvY2F0aW9uID0gbmV3TG9jYXRpb247XG5cbiAgICBpZiAobG9jYXRpb24uYWN0aW9uID09PSBfQWN0aW9ucy5QVVNIKSB7XG4gICAgICBhbGxLZXlzID0gW10uY29uY2F0KGFsbEtleXMuc2xpY2UoMCwgY3VycmVudCArIDEpLCBbbG9jYXRpb24ua2V5XSk7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5hY3Rpb24gPT09IF9BY3Rpb25zLlJFUExBQ0UpIHtcbiAgICAgIGFsbEtleXNbY3VycmVudF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgfVxuXG4gICAgY2hhbmdlTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcihsb2NhdGlvbik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICBjaGFuZ2VMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgIGxpc3RlbmVyKGxvY2F0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9sb2NhdGlvbiA9IGdldEN1cnJlbnRMb2NhdGlvbigpO1xuICAgICAgYWxsS2V5cyA9IFtfbG9jYXRpb24ua2V5XTtcbiAgICAgIHVwZGF0ZUxvY2F0aW9uKF9sb2NhdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoYW5nZUxpc3RlbmVycyA9IGNoYW5nZUxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgX0FzeW5jVXRpbHMubG9vcEFzeW5jKHRyYW5zaXRpb25Ib29rcy5sZW5ndGgsIGZ1bmN0aW9uIChpbmRleCwgbmV4dCwgZG9uZSkge1xuICAgICAgX3J1blRyYW5zaXRpb25Ib29rMlsnZGVmYXVsdCddKHRyYW5zaXRpb25Ib29rc1tpbmRleF0sIGxvY2F0aW9uLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICAgIGRvbmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICBpZiAoZ2V0VXNlckNvbmZpcm1hdGlvbiAmJiB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihtZXNzYWdlLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgICBjYWxsYmFjayhvayAhPT0gZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG1lc3NhZ2UgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBwZW5kaW5nTG9jYXRpb24gPSB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvblRvKG5leHRMb2NhdGlvbikge1xuICAgIGlmIChsb2NhdGlvbiAmJiBsb2NhdGlvbnNBcmVFcXVhbChsb2NhdGlvbiwgbmV4dExvY2F0aW9uKSkgcmV0dXJuOyAvLyBOb3RoaW5nIHRvIGRvLlxuXG4gICAgcGVuZGluZ0xvY2F0aW9uID0gbmV4dExvY2F0aW9uO1xuXG4gICAgY29uZmlybVRyYW5zaXRpb25UbyhuZXh0TG9jYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKHBlbmRpbmdMb2NhdGlvbiAhPT0gbmV4dExvY2F0aW9uKSByZXR1cm47IC8vIFRyYW5zaXRpb24gd2FzIGludGVycnVwdGVkLlxuXG4gICAgICBpZiAob2spIHtcbiAgICAgICAgLy8gdHJlYXQgUFVTSCB0byBjdXJyZW50IHBhdGggbGlrZSBSRVBMQUNFIHRvIGJlIGNvbnNpc3RlbnQgd2l0aCBicm93c2Vyc1xuICAgICAgICBpZiAobmV4dExvY2F0aW9uLmFjdGlvbiA9PT0gX0FjdGlvbnMuUFVTSCkge1xuICAgICAgICAgIHZhciBwcmV2UGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgICAgIHZhciBuZXh0UGF0aCA9IGNyZWF0ZVBhdGgobmV4dExvY2F0aW9uKTtcblxuICAgICAgICAgIGlmIChuZXh0UGF0aCA9PT0gcHJldlBhdGgpIG5leHRMb2NhdGlvbi5hY3Rpb24gPSBfQWN0aW9ucy5SRVBMQUNFO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpbmlzaFRyYW5zaXRpb24obmV4dExvY2F0aW9uKSAhPT0gZmFsc2UpIHVwZGF0ZUxvY2F0aW9uKG5leHRMb2NhdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKGxvY2F0aW9uICYmIG5leHRMb2NhdGlvbi5hY3Rpb24gPT09IF9BY3Rpb25zLlBPUCkge1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGxvY2F0aW9uLmtleSk7XG4gICAgICAgIHZhciBuZXh0SW5kZXggPSBhbGxLZXlzLmluZGV4T2YobmV4dExvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEgJiYgbmV4dEluZGV4ICE9PSAtMSkgZ28ocHJldkluZGV4IC0gbmV4dEluZGV4KTsgLy8gUmVzdG9yZSB0aGUgVVJMLlxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChsb2NhdGlvbikge1xuICAgIHRyYW5zaXRpb25UbyhjcmVhdGVMb2NhdGlvbihsb2NhdGlvbiwgX0FjdGlvbnMuUFVTSCwgY3JlYXRlS2V5KCkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UobG9jYXRpb24pIHtcbiAgICB0cmFuc2l0aW9uVG8oY3JlYXRlTG9jYXRpb24obG9jYXRpb24sIF9BY3Rpb25zLlJFUExBQ0UsIGNyZWF0ZUtleSgpKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBjcmVhdGVSYW5kb21LZXkoa2V5TGVuZ3RoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgICBpZiAobG9jYXRpb24gPT0gbnVsbCB8fCB0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnKSByZXR1cm4gbG9jYXRpb247XG5cbiAgICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgICB2YXIgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuICAgIHZhciByZXN1bHQgPSBwYXRobmFtZTtcblxuICAgIGlmIChzZWFyY2gpIHJlc3VsdCArPSBzZWFyY2g7XG5cbiAgICBpZiAoaGFzaCkgcmVzdWx0ICs9IGhhc2g7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIga2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAyIHx8IGFyZ3VtZW50c1syXSA9PT0gdW5kZWZpbmVkID8gY3JlYXRlS2V5KCkgOiBhcmd1bWVudHNbMl07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgIC8vd2FybmluZyhcbiAgICAgIC8vICBmYWxzZSxcbiAgICAgIC8vICAnVGhlIHN0YXRlICgybmQpIGFyZ3VtZW50IHRvIGhpc3RvcnkuY3JlYXRlTG9jYXRpb24gaXMgZGVwcmVjYXRlZDsgdXNlIGEgJyArXG4gICAgICAvLyAgJ2xvY2F0aW9uIGRlc2NyaXB0b3IgaW5zdGVhZCdcbiAgICAgIC8vKVxuXG4gICAgICBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJykgbG9jYXRpb24gPSBfcGFyc2VQYXRoMlsnZGVmYXVsdCddKGxvY2F0aW9uKTtcblxuICAgICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHsgc3RhdGU6IGFjdGlvbiB9KTtcblxuICAgICAgYWN0aW9uID0ga2V5O1xuICAgICAga2V5ID0gYXJndW1lbnRzWzNdIHx8IGNyZWF0ZUtleSgpO1xuICAgIH1cblxuICAgIHJldHVybiBfY3JlYXRlTG9jYXRpb24zWydkZWZhdWx0J10obG9jYXRpb24sIGFjdGlvbiwga2V5KTtcbiAgfVxuXG4gIC8vIGRlcHJlY2F0ZWRcbiAgZnVuY3Rpb24gc2V0U3RhdGUoc3RhdGUpIHtcbiAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgIHVwZGF0ZUxvY2F0aW9uU3RhdGUobG9jYXRpb24sIHN0YXRlKTtcbiAgICAgIHVwZGF0ZUxvY2F0aW9uKGxvY2F0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXBkYXRlTG9jYXRpb25TdGF0ZShnZXRDdXJyZW50TG9jYXRpb24oKSwgc3RhdGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUxvY2F0aW9uU3RhdGUobG9jYXRpb24sIHN0YXRlKSB7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBfZXh0ZW5kcyh7fSwgbG9jYXRpb24uc3RhdGUsIHN0YXRlKTtcbiAgICBzYXZlU3RhdGUobG9jYXRpb24ua2V5LCBsb2NhdGlvbi5zdGF0ZSk7XG4gIH1cblxuICAvLyBkZXByZWNhdGVkXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vaykge1xuICAgIGlmICh0cmFuc2l0aW9uSG9va3MuaW5kZXhPZihob29rKSA9PT0gLTEpIHRyYW5zaXRpb25Ib29rcy5wdXNoKGhvb2spO1xuICB9XG5cbiAgLy8gZGVwcmVjYXRlZFxuICBmdW5jdGlvbiB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vaykge1xuICAgIHRyYW5zaXRpb25Ib29rcyA9IHRyYW5zaXRpb25Ib29rcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtICE9PSBob29rO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gZGVwcmVjYXRlZFxuICBmdW5jdGlvbiBwdXNoU3RhdGUoc3RhdGUsIHBhdGgpIHtcbiAgICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSBwYXRoID0gX3BhcnNlUGF0aDJbJ2RlZmF1bHQnXShwYXRoKTtcblxuICAgIHB1c2goX2V4dGVuZHMoeyBzdGF0ZTogc3RhdGUgfSwgcGF0aCkpO1xuICB9XG5cbiAgLy8gZGVwcmVjYXRlZFxuICBmdW5jdGlvbiByZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGgpIHtcbiAgICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSBwYXRoID0gX3BhcnNlUGF0aDJbJ2RlZmF1bHQnXShwYXRoKTtcblxuICAgIHJlcGxhY2UoX2V4dGVuZHMoeyBzdGF0ZTogc3RhdGUgfSwgcGF0aCkpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsaXN0ZW5CZWZvcmU6IGxpc3RlbkJlZm9yZSxcbiAgICBsaXN0ZW46IGxpc3RlbixcbiAgICB0cmFuc2l0aW9uVG86IHRyYW5zaXRpb25UbyxcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNyZWF0ZUtleTogY3JlYXRlS2V5LFxuICAgIGNyZWF0ZVBhdGg6IGNyZWF0ZVBhdGgsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBjcmVhdGVMb2NhdGlvbjogY3JlYXRlTG9jYXRpb24sXG5cbiAgICBzZXRTdGF0ZTogX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShzZXRTdGF0ZSwgJ3NldFN0YXRlIGlzIGRlcHJlY2F0ZWQ7IHVzZSBsb2NhdGlvbi5rZXkgdG8gc2F2ZSBzdGF0ZSBpbnN0ZWFkJyksXG4gICAgcmVnaXN0ZXJUcmFuc2l0aW9uSG9vazogX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShyZWdpc3RlclRyYW5zaXRpb25Ib29rLCAncmVnaXN0ZXJUcmFuc2l0aW9uSG9vayBpcyBkZXByZWNhdGVkOyB1c2UgbGlzdGVuQmVmb3JlIGluc3RlYWQnKSxcbiAgICB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IF9kZXByZWNhdGUyWydkZWZhdWx0J10odW5yZWdpc3RlclRyYW5zaXRpb25Ib29rLCAndW5yZWdpc3RlclRyYW5zaXRpb25Ib29rIGlzIGRlcHJlY2F0ZWQ7IHVzZSB0aGUgY2FsbGJhY2sgcmV0dXJuZWQgZnJvbSBsaXN0ZW5CZWZvcmUgaW5zdGVhZCcpLFxuICAgIHB1c2hTdGF0ZTogX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShwdXNoU3RhdGUsICdwdXNoU3RhdGUgaXMgZGVwcmVjYXRlZDsgdXNlIHB1c2ggaW5zdGVhZCcpLFxuICAgIHJlcGxhY2VTdGF0ZTogX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShyZXBsYWNlU3RhdGUsICdyZXBsYWNlU3RhdGUgaXMgZGVwcmVjYXRlZDsgdXNlIHJlcGxhY2UgaW5zdGVhZCcpXG4gIH07XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNyZWF0ZUhpc3Rvcnk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvL2ltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9BY3Rpb25zID0gcmVxdWlyZSgnLi9BY3Rpb25zJyk7XG5cbnZhciBfcGFyc2VQYXRoID0gcmVxdWlyZSgnLi9wYXJzZVBhdGgnKTtcblxudmFyIF9wYXJzZVBhdGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyc2VQYXRoKTtcblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24oKSB7XG4gIHZhciBsb2NhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/ICcvJyA6IGFyZ3VtZW50c1swXTtcbiAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IF9BY3Rpb25zLlBPUCA6IGFyZ3VtZW50c1sxXTtcbiAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBhcmd1bWVudHNbMl07XG5cbiAgdmFyIF9mb3VydGhBcmcgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDMgfHwgYXJndW1lbnRzWzNdID09PSB1bmRlZmluZWQgPyBudWxsIDogYXJndW1lbnRzWzNdO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnKSBsb2NhdGlvbiA9IF9wYXJzZVBhdGgyWydkZWZhdWx0J10obG9jYXRpb24pO1xuXG4gIGlmICh0eXBlb2YgYWN0aW9uID09PSAnb2JqZWN0Jykge1xuICAgIC8vd2FybmluZyhcbiAgICAvLyAgZmFsc2UsXG4gICAgLy8gICdUaGUgc3RhdGUgKDJuZCkgYXJndW1lbnQgdG8gY3JlYXRlTG9jYXRpb24gaXMgZGVwcmVjYXRlZDsgdXNlIGEgJyArXG4gICAgLy8gICdsb2NhdGlvbiBkZXNjcmlwdG9yIGluc3RlYWQnXG4gICAgLy8pXG5cbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBsb2NhdGlvbiwgeyBzdGF0ZTogYWN0aW9uIH0pO1xuXG4gICAgYWN0aW9uID0ga2V5IHx8IF9BY3Rpb25zLlBPUDtcbiAgICBrZXkgPSBfZm91cnRoQXJnO1xuICB9XG5cbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoIHx8ICcnO1xuICB2YXIgaGFzaCA9IGxvY2F0aW9uLmhhc2ggfHwgJyc7XG4gIHZhciBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlIHx8IG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCxcbiAgICBzdGF0ZTogc3RhdGUsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAga2V5OiBrZXlcbiAgfTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gY3JlYXRlTG9jYXRpb247XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfQWN0aW9ucyA9IHJlcXVpcmUoJy4vQWN0aW9ucycpO1xuXG52YXIgX2NyZWF0ZUhpc3RvcnkgPSByZXF1aXJlKCcuL2NyZWF0ZUhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVIaXN0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUhpc3RvcnkpO1xuXG52YXIgX3BhcnNlUGF0aCA9IHJlcXVpcmUoJy4vcGFyc2VQYXRoJyk7XG5cbnZhciBfcGFyc2VQYXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcnNlUGF0aCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0YXRlU3RvcmFnZShlbnRyaWVzKSB7XG4gIHJldHVybiBlbnRyaWVzLmZpbHRlcihmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gZW50cnkuc3RhdGU7XG4gIH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgZW50cnkpIHtcbiAgICBtZW1vW2VudHJ5LmtleV0gPSBlbnRyeS5zdGF0ZTtcbiAgICByZXR1cm4gbWVtbztcbiAgfSwge30pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHsgZW50cmllczogb3B0aW9ucyB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgIG9wdGlvbnMgPSB7IGVudHJpZXM6IFtvcHRpb25zXSB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSBfY3JlYXRlSGlzdG9yeTJbJ2RlZmF1bHQnXShfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgIGdldEN1cnJlbnRMb2NhdGlvbjogZ2V0Q3VycmVudExvY2F0aW9uLFxuICAgIGZpbmlzaFRyYW5zaXRpb246IGZpbmlzaFRyYW5zaXRpb24sXG4gICAgc2F2ZVN0YXRlOiBzYXZlU3RhdGUsXG4gICAgZ286IGdvXG4gIH0pKTtcblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zO1xuICB2YXIgZW50cmllcyA9IF9vcHRpb25zLmVudHJpZXM7XG4gIHZhciBjdXJyZW50ID0gX29wdGlvbnMuY3VycmVudDtcblxuICBpZiAodHlwZW9mIGVudHJpZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgZW50cmllcyA9IFtlbnRyaWVzXTtcbiAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShlbnRyaWVzKSkge1xuICAgIGVudHJpZXMgPSBbJy8nXTtcbiAgfVxuXG4gIGVudHJpZXMgPSBlbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICB2YXIga2V5ID0gaGlzdG9yeS5jcmVhdGVLZXkoKTtcblxuICAgIGlmICh0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnKSByZXR1cm4geyBwYXRobmFtZTogZW50cnksIGtleToga2V5IH07XG5cbiAgICBpZiAodHlwZW9mIGVudHJ5ID09PSAnb2JqZWN0JyAmJiBlbnRyeSkgcmV0dXJuIF9leHRlbmRzKHt9LCBlbnRyeSwgeyBrZXk6IGtleSB9KTtcblxuICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnVW5hYmxlIHRvIGNyZWF0ZSBoaXN0b3J5IGVudHJ5IGZyb20gJXMnLCBlbnRyeSkgOiBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgfSk7XG5cbiAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGN1cnJlbnQgPSBlbnRyaWVzLmxlbmd0aCAtIDE7XG4gIH0gZWxzZSB7XG4gICAgIShjdXJyZW50ID49IDAgJiYgY3VycmVudCA8IGVudHJpZXMubGVuZ3RoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnQ3VycmVudCBpbmRleCBtdXN0IGJlID49IDAgYW5kIDwgJXMsIHdhcyAlcycsIGVudHJpZXMubGVuZ3RoLCBjdXJyZW50KSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIHN0b3JhZ2UgPSBjcmVhdGVTdGF0ZVN0b3JhZ2UoZW50cmllcyk7XG5cbiAgZnVuY3Rpb24gc2F2ZVN0YXRlKGtleSwgc3RhdGUpIHtcbiAgICBzdG9yYWdlW2tleV0gPSBzdGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRTdGF0ZShrZXkpIHtcbiAgICByZXR1cm4gc3RvcmFnZVtrZXldO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uKCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbY3VycmVudF07XG4gICAgdmFyIGtleSA9IGVudHJ5LmtleTtcbiAgICB2YXIgYmFzZW5hbWUgPSBlbnRyeS5iYXNlbmFtZTtcbiAgICB2YXIgcGF0aG5hbWUgPSBlbnRyeS5wYXRobmFtZTtcbiAgICB2YXIgc2VhcmNoID0gZW50cnkuc2VhcmNoO1xuXG4gICAgdmFyIHBhdGggPSAoYmFzZW5hbWUgfHwgJycpICsgcGF0aG5hbWUgKyAoc2VhcmNoIHx8ICcnKTtcblxuICAgIHZhciBzdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICBpZiAoa2V5KSB7XG4gICAgICBzdGF0ZSA9IHJlYWRTdGF0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgICBrZXkgPSBoaXN0b3J5LmNyZWF0ZUtleSgpO1xuICAgICAgZW50cnkua2V5ID0ga2V5O1xuICAgIH1cblxuICAgIHZhciBsb2NhdGlvbiA9IF9wYXJzZVBhdGgyWydkZWZhdWx0J10ocGF0aCk7XG5cbiAgICByZXR1cm4gaGlzdG9yeS5jcmVhdGVMb2NhdGlvbihfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHsgc3RhdGU6IHN0YXRlIH0pLCB1bmRlZmluZWQsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIGluZGV4ID0gY3VycmVudCArIG47XG4gICAgcmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBpZiAobikge1xuICAgICAgaWYgKCFjYW5HbyhuKSkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdDYW5ub3QgZ28oJXMpIHRoZXJlIGlzIG5vdCBlbm91Z2ggaGlzdG9yeScsIG4pIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnQgKz0gbjtcblxuICAgICAgdmFyIGN1cnJlbnRMb2NhdGlvbiA9IGdldEN1cnJlbnRMb2NhdGlvbigpO1xuXG4gICAgICAvLyBjaGFuZ2UgYWN0aW9uIHRvIFBPUFxuICAgICAgaGlzdG9yeS50cmFuc2l0aW9uVG8oX2V4dGVuZHMoe30sIGN1cnJlbnRMb2NhdGlvbiwgeyBhY3Rpb246IF9BY3Rpb25zLlBPUCB9KSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluaXNoVHJhbnNpdGlvbihsb2NhdGlvbikge1xuICAgIHN3aXRjaCAobG9jYXRpb24uYWN0aW9uKSB7XG4gICAgICBjYXNlIF9BY3Rpb25zLlBVU0g6XG4gICAgICAgIGN1cnJlbnQgKz0gMTtcblxuICAgICAgICAvLyBpZiB3ZSBhcmUgbm90IG9uIHRoZSB0b3Agb2Ygc3RhY2tcbiAgICAgICAgLy8gcmVtb3ZlIHJlc3QgYW5kIHB1c2ggbmV3XG4gICAgICAgIGlmIChjdXJyZW50IDwgZW50cmllcy5sZW5ndGgpIGVudHJpZXMuc3BsaWNlKGN1cnJlbnQpO1xuXG4gICAgICAgIGVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICAgIHNhdmVTdGF0ZShsb2NhdGlvbi5rZXksIGxvY2F0aW9uLnN0YXRlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIF9BY3Rpb25zLlJFUExBQ0U6XG4gICAgICAgIGVudHJpZXNbY3VycmVudF0gPSBsb2NhdGlvbjtcbiAgICAgICAgc2F2ZVN0YXRlKGxvY2F0aW9uLmtleSwgbG9jYXRpb24uc3RhdGUpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gY3JlYXRlTWVtb3J5SGlzdG9yeTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8vaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZydcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5mdW5jdGlvbiBkZXByZWNhdGUoZm4pIHtcbiAgcmV0dXJuIGZuO1xuICAvL3JldHVybiBmdW5jdGlvbiAoKSB7XG4gIC8vICB3YXJuaW5nKGZhbHNlLCAnW2hpc3RvcnldICcgKyBtZXNzYWdlKVxuICAvLyAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgLy99XG59XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZGVwcmVjYXRlO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmZ1bmN0aW9uIGV4dHJhY3RQYXRoKHN0cmluZykge1xuICB2YXIgbWF0Y2ggPSBzdHJpbmcubWF0Y2goL15odHRwcz86XFwvXFwvW15cXC9dKi8pO1xuXG4gIGlmIChtYXRjaCA9PSBudWxsKSByZXR1cm4gc3RyaW5nO1xuXG4gIHJldHVybiBzdHJpbmcuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XG59XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZXh0cmFjdFBhdGg7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9leHRyYWN0UGF0aCA9IHJlcXVpcmUoJy4vZXh0cmFjdFBhdGgnKTtcblxudmFyIF9leHRyYWN0UGF0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRyYWN0UGF0aCk7XG5cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IF9leHRyYWN0UGF0aDJbJ2RlZmF1bHQnXShwYXRoKTtcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShwYXRoID09PSBwYXRobmFtZSwgJ0EgcGF0aCBtdXN0IGJlIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaCBvbmx5LCBub3QgYSBmdWxseSBxdWFsaWZpZWQgVVJMIGxpa2UgXCIlc1wiJywgcGF0aCkgOiB1bmRlZmluZWQ7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyaW5nKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHJpbmcoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cmluZyhzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHJpbmcoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgaWYgKHBhdGhuYW1lID09PSAnJykgcGF0aG5hbWUgPSAnLyc7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaFxuICB9O1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBwYXJzZVBhdGg7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIHJ1blRyYW5zaXRpb25Ib29rKGhvb2ssIGxvY2F0aW9uLCBjYWxsYmFjaykge1xuICB2YXIgcmVzdWx0ID0gaG9vayhsb2NhdGlvbiwgY2FsbGJhY2spO1xuXG4gIGlmIChob29rLmxlbmd0aCA8IDIpIHtcbiAgICAvLyBBc3N1bWUgdGhlIGhvb2sgcnVucyBzeW5jaHJvbm91c2x5IGFuZCBhdXRvbWF0aWNhbGx5XG4gICAgLy8gY2FsbCB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgcmV0dXJuIHZhbHVlLlxuICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gIH0gZWxzZSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKHJlc3VsdCA9PT0gdW5kZWZpbmVkLCAnWW91IHNob3VsZCBub3QgXCJyZXR1cm5cIiBpbiBhIHRyYW5zaXRpb24gaG9vayB3aXRoIGEgY2FsbGJhY2sgYXJndW1lbnQ7IGNhbGwgdGhlIGNhbGxiYWNrIGluc3RlYWQnKSA6IHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBydW5UcmFuc2l0aW9uSG9vaztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBfRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBfcnVuVHJhbnNpdGlvbkhvb2sgPSByZXF1aXJlKCcuL3J1blRyYW5zaXRpb25Ib29rJyk7XG5cbnZhciBfcnVuVHJhbnNpdGlvbkhvb2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcnVuVHJhbnNpdGlvbkhvb2spO1xuXG52YXIgX2V4dHJhY3RQYXRoID0gcmVxdWlyZSgnLi9leHRyYWN0UGF0aCcpO1xuXG52YXIgX2V4dHJhY3RQYXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dHJhY3RQYXRoKTtcblxudmFyIF9wYXJzZVBhdGggPSByZXF1aXJlKCcuL3BhcnNlUGF0aCcpO1xuXG52YXIgX3BhcnNlUGF0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJzZVBhdGgpO1xuXG52YXIgX2RlcHJlY2F0ZSA9IHJlcXVpcmUoJy4vZGVwcmVjYXRlJyk7XG5cbnZhciBfZGVwcmVjYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlcHJlY2F0ZSk7XG5cbmZ1bmN0aW9uIHVzZUJhc2VuYW1lKGNyZWF0ZUhpc3RvcnkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuICAgIHZhciBiYXNlbmFtZSA9IG9wdGlvbnMuYmFzZW5hbWU7XG5cbiAgICB2YXIgaGlzdG9yeU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgWydiYXNlbmFtZSddKTtcblxuICAgIHZhciBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShoaXN0b3J5T3B0aW9ucyk7XG5cbiAgICAvLyBBdXRvbWF0aWNhbGx5IHVzZSB0aGUgdmFsdWUgb2YgPGJhc2UgaHJlZj4gaW4gSFRNTFxuICAgIC8vIGRvY3VtZW50cyBhcyBiYXNlbmFtZSBpZiBpdCdzIG5vdCBleHBsaWNpdGx5IGdpdmVuLlxuICAgIGlmIChiYXNlbmFtZSA9PSBudWxsICYmIF9FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICAgIHZhciBiYXNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2Jhc2UnKVswXTtcblxuICAgICAgaWYgKGJhc2UpIGJhc2VuYW1lID0gX2V4dHJhY3RQYXRoMlsnZGVmYXVsdCddKGJhc2UuaHJlZik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkQmFzZW5hbWUobG9jYXRpb24pIHtcbiAgICAgIGlmIChiYXNlbmFtZSAmJiBsb2NhdGlvbi5iYXNlbmFtZSA9PSBudWxsKSB7XG4gICAgICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2VuYW1lKSA9PT0gMCkge1xuICAgICAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyaW5nKGJhc2VuYW1lLmxlbmd0aCk7XG4gICAgICAgICAgbG9jYXRpb24uYmFzZW5hbWUgPSBiYXNlbmFtZTtcblxuICAgICAgICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gJycpIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvY2F0aW9uLmJhc2VuYW1lID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBlbmRCYXNlbmFtZShsb2NhdGlvbikge1xuICAgICAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gICAgICBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJykgbG9jYXRpb24gPSBfcGFyc2VQYXRoMlsnZGVmYXVsdCddKGxvY2F0aW9uKTtcblxuICAgICAgdmFyIHBuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICB2YXIgbm9ybWFsaXplZEJhc2VuYW1lID0gYmFzZW5hbWUuc2xpY2UoLTEpID09PSAnLycgPyBiYXNlbmFtZSA6IGJhc2VuYW1lICsgJy8nO1xuICAgICAgdmFyIG5vcm1hbGl6ZWRQYXRobmFtZSA9IHBuYW1lLmNoYXJBdCgwKSA9PT0gJy8nID8gcG5hbWUuc2xpY2UoMSkgOiBwbmFtZTtcbiAgICAgIHZhciBwYXRobmFtZSA9IG5vcm1hbGl6ZWRCYXNlbmFtZSArIG5vcm1hbGl6ZWRQYXRobmFtZTtcblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogcGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE92ZXJyaWRlIGFsbCByZWFkIG1ldGhvZHMgd2l0aCBiYXNlbmFtZS1hd2FyZSB2ZXJzaW9ucy5cbiAgICBmdW5jdGlvbiBsaXN0ZW5CZWZvcmUoaG9vaykge1xuICAgICAgcmV0dXJuIGhpc3RvcnkubGlzdGVuQmVmb3JlKGZ1bmN0aW9uIChsb2NhdGlvbiwgY2FsbGJhY2spIHtcbiAgICAgICAgX3J1blRyYW5zaXRpb25Ib29rMlsnZGVmYXVsdCddKGhvb2ssIGFkZEJhc2VuYW1lKGxvY2F0aW9uKSwgY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGxpc3RlbmVyKGFkZEJhc2VuYW1lKGxvY2F0aW9uKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBPdmVycmlkZSBhbGwgd3JpdGUgbWV0aG9kcyB3aXRoIGJhc2VuYW1lLWF3YXJlIHZlcnNpb25zLlxuICAgIGZ1bmN0aW9uIHB1c2gobG9jYXRpb24pIHtcbiAgICAgIGhpc3RvcnkucHVzaChwcmVwZW5kQmFzZW5hbWUobG9jYXRpb24pKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXBsYWNlKGxvY2F0aW9uKSB7XG4gICAgICBoaXN0b3J5LnJlcGxhY2UocHJlcGVuZEJhc2VuYW1lKGxvY2F0aW9uKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlUGF0aChwcmVwZW5kQmFzZW5hbWUobG9jYXRpb24pKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gaGlzdG9yeS5jcmVhdGVIcmVmKHByZXBlbmRCYXNlbmFtZShsb2NhdGlvbikpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGFkZEJhc2VuYW1lKGhpc3RvcnkuY3JlYXRlTG9jYXRpb24uYXBwbHkoaGlzdG9yeSwgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGZ1bmN0aW9uIHB1c2hTdGF0ZShzdGF0ZSwgcGF0aCkge1xuICAgICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgcGF0aCA9IF9wYXJzZVBhdGgyWydkZWZhdWx0J10ocGF0aCk7XG5cbiAgICAgIHB1c2goX2V4dGVuZHMoeyBzdGF0ZTogc3RhdGUgfSwgcGF0aCkpO1xuICAgIH1cblxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICBmdW5jdGlvbiByZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGgpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHBhdGggPSBfcGFyc2VQYXRoMlsnZGVmYXVsdCddKHBhdGgpO1xuXG4gICAgICByZXBsYWNlKF9leHRlbmRzKHsgc3RhdGU6IHN0YXRlIH0sIHBhdGgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcbiAgICAgIGxpc3RlbkJlZm9yZTogbGlzdGVuQmVmb3JlLFxuICAgICAgbGlzdGVuOiBsaXN0ZW4sXG4gICAgICBwdXNoOiBwdXNoLFxuICAgICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICAgIGNyZWF0ZVBhdGg6IGNyZWF0ZVBhdGgsXG4gICAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgICAgY3JlYXRlTG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uLFxuXG4gICAgICBwdXNoU3RhdGU6IF9kZXByZWNhdGUyWydkZWZhdWx0J10ocHVzaFN0YXRlLCAncHVzaFN0YXRlIGlzIGRlcHJlY2F0ZWQ7IHVzZSBwdXNoIGluc3RlYWQnKSxcbiAgICAgIHJlcGxhY2VTdGF0ZTogX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShyZXBsYWNlU3RhdGUsICdyZXBsYWNlU3RhdGUgaXMgZGVwcmVjYXRlZDsgdXNlIHJlcGxhY2UgaW5zdGVhZCcpXG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHVzZUJhc2VuYW1lO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfcXVlcnlTdHJpbmcgPSByZXF1aXJlKCdxdWVyeS1zdHJpbmcnKTtcblxudmFyIF9ydW5UcmFuc2l0aW9uSG9vayA9IHJlcXVpcmUoJy4vcnVuVHJhbnNpdGlvbkhvb2snKTtcblxudmFyIF9ydW5UcmFuc2l0aW9uSG9vazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ydW5UcmFuc2l0aW9uSG9vayk7XG5cbnZhciBfcGFyc2VQYXRoID0gcmVxdWlyZSgnLi9wYXJzZVBhdGgnKTtcblxudmFyIF9wYXJzZVBhdGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyc2VQYXRoKTtcblxudmFyIF9kZXByZWNhdGUgPSByZXF1aXJlKCcuL2RlcHJlY2F0ZScpO1xuXG52YXIgX2RlcHJlY2F0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZXByZWNhdGUpO1xuXG52YXIgU0VBUkNIX0JBU0VfS0VZID0gJyRzZWFyY2hCYXNlJztcblxuZnVuY3Rpb24gZGVmYXVsdFN0cmluZ2lmeVF1ZXJ5KHF1ZXJ5KSB7XG4gIHJldHVybiBfcXVlcnlTdHJpbmcuc3RyaW5naWZ5KHF1ZXJ5KS5yZXBsYWNlKC8lMjAvZywgJysnKTtcbn1cblxudmFyIGRlZmF1bHRQYXJzZVF1ZXJ5U3RyaW5nID0gX3F1ZXJ5U3RyaW5nLnBhcnNlO1xuXG5mdW5jdGlvbiBpc05lc3RlZE9iamVjdChvYmplY3QpIHtcbiAgZm9yICh2YXIgcCBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KHApICYmIHR5cGVvZiBvYmplY3RbcF0gPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KG9iamVjdFtwXSkgJiYgb2JqZWN0W3BdICE9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgfXJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGNyZWF0ZUhpc3RvcnkgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBjcmVhdGVcbiAqIGhpc3Rvcnkgb2JqZWN0cyB0aGF0IGtub3cgaG93IHRvIGhhbmRsZSBVUkwgcXVlcmllcy5cbiAqL1xuZnVuY3Rpb24gdXNlUXVlcmllcyhjcmVhdGVIaXN0b3J5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcbiAgICB2YXIgc3RyaW5naWZ5UXVlcnkgPSBvcHRpb25zLnN0cmluZ2lmeVF1ZXJ5O1xuICAgIHZhciBwYXJzZVF1ZXJ5U3RyaW5nID0gb3B0aW9ucy5wYXJzZVF1ZXJ5U3RyaW5nO1xuXG4gICAgdmFyIGhpc3RvcnlPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFsnc3RyaW5naWZ5UXVlcnknLCAncGFyc2VRdWVyeVN0cmluZyddKTtcblxuICAgIHZhciBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShoaXN0b3J5T3B0aW9ucyk7XG5cbiAgICBpZiAodHlwZW9mIHN0cmluZ2lmeVF1ZXJ5ICE9PSAnZnVuY3Rpb24nKSBzdHJpbmdpZnlRdWVyeSA9IGRlZmF1bHRTdHJpbmdpZnlRdWVyeTtcblxuICAgIGlmICh0eXBlb2YgcGFyc2VRdWVyeVN0cmluZyAhPT0gJ2Z1bmN0aW9uJykgcGFyc2VRdWVyeVN0cmluZyA9IGRlZmF1bHRQYXJzZVF1ZXJ5U3RyaW5nO1xuXG4gICAgZnVuY3Rpb24gYWRkUXVlcnkobG9jYXRpb24pIHtcbiAgICAgIGlmIChsb2NhdGlvbi5xdWVyeSA9PSBudWxsKSB7XG4gICAgICAgIHZhciBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG5cbiAgICAgICAgbG9jYXRpb24ucXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKHNlYXJjaC5zdWJzdHJpbmcoMSkpO1xuICAgICAgICBsb2NhdGlvbltTRUFSQ0hfQkFTRV9LRVldID0geyBzZWFyY2g6IHNlYXJjaCwgc2VhcmNoQmFzZTogJycgfTtcbiAgICAgIH1cblxuICAgICAgLy8gVE9ETzogSW5zdGVhZCBvZiBhbGwgdGhlIGJvb2sta2VlcGluZyBoZXJlLCB0aGlzIHNob3VsZCBqdXN0IHN0cmlwIHRoZVxuICAgICAgLy8gc3RyaW5naWZpZWQgcXVlcnkgZnJvbSB0aGUgc2VhcmNoLlxuXG4gICAgICByZXR1cm4gbG9jYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwZW5kUXVlcnkobG9jYXRpb24sIHF1ZXJ5KSB7XG4gICAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgICB2YXIgcXVlcnlTdHJpbmcgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAoIXF1ZXJ5IHx8IChxdWVyeVN0cmluZyA9IHN0cmluZ2lmeVF1ZXJ5KHF1ZXJ5KSkgPT09ICcnKSByZXR1cm4gbG9jYXRpb247XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShzdHJpbmdpZnlRdWVyeSAhPT0gZGVmYXVsdFN0cmluZ2lmeVF1ZXJ5IHx8ICFpc05lc3RlZE9iamVjdChxdWVyeSksICd1c2VRdWVyaWVzIGRvZXMgbm90IHN0cmluZ2lmeSBuZXN0ZWQgcXVlcnkgb2JqZWN0cyBieSBkZWZhdWx0OyAnICsgJ3VzZSBhIGN1c3RvbSBzdHJpbmdpZnlRdWVyeSBmdW5jdGlvbicpIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJykgbG9jYXRpb24gPSBfcGFyc2VQYXRoMlsnZGVmYXVsdCddKGxvY2F0aW9uKTtcblxuICAgICAgdmFyIHNlYXJjaEJhc2VTcGVjID0gbG9jYXRpb25bU0VBUkNIX0JBU0VfS0VZXTtcbiAgICAgIHZhciBzZWFyY2hCYXNlID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKHNlYXJjaEJhc2VTcGVjICYmIGxvY2F0aW9uLnNlYXJjaCA9PT0gc2VhcmNoQmFzZVNwZWMuc2VhcmNoKSB7XG4gICAgICAgIHNlYXJjaEJhc2UgPSBzZWFyY2hCYXNlU3BlYy5zZWFyY2hCYXNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VhcmNoQmFzZSA9IGxvY2F0aW9uLnNlYXJjaCB8fCAnJztcbiAgICAgIH1cblxuICAgICAgdmFyIHNlYXJjaCA9IHNlYXJjaEJhc2UgKyAoc2VhcmNoQmFzZSA/ICcmJyA6ICc/JykgKyBxdWVyeVN0cmluZztcblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwgKF9leHRlbmRzMiA9IHtcbiAgICAgICAgc2VhcmNoOiBzZWFyY2hcbiAgICAgIH0sIF9leHRlbmRzMltTRUFSQ0hfQkFTRV9LRVldID0geyBzZWFyY2g6IHNlYXJjaCwgc2VhcmNoQmFzZTogc2VhcmNoQmFzZSB9LCBfZXh0ZW5kczIpKTtcbiAgICB9XG5cbiAgICAvLyBPdmVycmlkZSBhbGwgcmVhZCBtZXRob2RzIHdpdGggcXVlcnktYXdhcmUgdmVyc2lvbnMuXG4gICAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlKGhvb2spIHtcbiAgICAgIHJldHVybiBoaXN0b3J5Lmxpc3RlbkJlZm9yZShmdW5jdGlvbiAobG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgICAgIF9ydW5UcmFuc2l0aW9uSG9vazJbJ2RlZmF1bHQnXShob29rLCBhZGRRdWVyeShsb2NhdGlvbiksIGNhbGxiYWNrKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBsaXN0ZW5lcihhZGRRdWVyeShsb2NhdGlvbikpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcnJpZGUgYWxsIHdyaXRlIG1ldGhvZHMgd2l0aCBxdWVyeS1hd2FyZSB2ZXJzaW9ucy5cbiAgICBmdW5jdGlvbiBwdXNoKGxvY2F0aW9uKSB7XG4gICAgICBoaXN0b3J5LnB1c2goYXBwZW5kUXVlcnkobG9jYXRpb24sIGxvY2F0aW9uLnF1ZXJ5KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVwbGFjZShsb2NhdGlvbikge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlKGFwcGVuZFF1ZXJ5KGxvY2F0aW9uLCBsb2NhdGlvbi5xdWVyeSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24sIHF1ZXJ5KSB7XG4gICAgICAvL3dhcm5pbmcoXG4gICAgICAvLyAgIXF1ZXJ5LFxuICAgICAgLy8gICd0aGUgcXVlcnkgYXJndW1lbnQgdG8gY3JlYXRlUGF0aCBpcyBkZXByZWNhdGVkOyB1c2UgYSBsb2NhdGlvbiBkZXNjcmlwdG9yIGluc3RlYWQnXG4gICAgICAvLylcbiAgICAgIHJldHVybiBoaXN0b3J5LmNyZWF0ZVBhdGgoYXBwZW5kUXVlcnkobG9jYXRpb24sIHF1ZXJ5IHx8IGxvY2F0aW9uLnF1ZXJ5KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbiwgcXVlcnkpIHtcbiAgICAgIC8vd2FybmluZyhcbiAgICAgIC8vICAhcXVlcnksXG4gICAgICAvLyAgJ3RoZSBxdWVyeSBhcmd1bWVudCB0byBjcmVhdGVIcmVmIGlzIGRlcHJlY2F0ZWQ7IHVzZSBhIGxvY2F0aW9uIGRlc2NyaXB0b3IgaW5zdGVhZCdcbiAgICAgIC8vKVxuICAgICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlSHJlZihhcHBlbmRRdWVyeShsb2NhdGlvbiwgcXVlcnkgfHwgbG9jYXRpb24ucXVlcnkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBhZGRRdWVyeShoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uLmFwcGx5KGhpc3RvcnksIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICBmdW5jdGlvbiBwdXNoU3RhdGUoc3RhdGUsIHBhdGgsIHF1ZXJ5KSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSBwYXRoID0gX3BhcnNlUGF0aDJbJ2RlZmF1bHQnXShwYXRoKTtcblxuICAgICAgcHVzaChfZXh0ZW5kcyh7IHN0YXRlOiBzdGF0ZSB9LCBwYXRoLCB7IHF1ZXJ5OiBxdWVyeSB9KSk7XG4gICAgfVxuXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZShzdGF0ZSwgcGF0aCwgcXVlcnkpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHBhdGggPSBfcGFyc2VQYXRoMlsnZGVmYXVsdCddKHBhdGgpO1xuXG4gICAgICByZXBsYWNlKF9leHRlbmRzKHsgc3RhdGU6IHN0YXRlIH0sIHBhdGgsIHsgcXVlcnk6IHF1ZXJ5IH0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcbiAgICAgIGxpc3RlbkJlZm9yZTogbGlzdGVuQmVmb3JlLFxuICAgICAgbGlzdGVuOiBsaXN0ZW4sXG4gICAgICBwdXNoOiBwdXNoLFxuICAgICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICAgIGNyZWF0ZVBhdGg6IGNyZWF0ZVBhdGgsXG4gICAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgICAgY3JlYXRlTG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uLFxuXG4gICAgICBwdXNoU3RhdGU6IF9kZXByZWNhdGUyWydkZWZhdWx0J10ocHVzaFN0YXRlLCAncHVzaFN0YXRlIGlzIGRlcHJlY2F0ZWQ7IHVzZSBwdXNoIGluc3RlYWQnKSxcbiAgICAgIHJlcGxhY2VTdGF0ZTogX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShyZXBsYWNlU3RhdGUsICdyZXBsYWNlU3RhdGUgaXMgZGVwcmVjYXRlZDsgdXNlIHJlcGxhY2UgaW5zdGVhZCcpXG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHVzZVF1ZXJpZXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3RyaWN0VXJpRW5jb2RlID0gcmVxdWlyZSgnc3RyaWN0LXVyaS1lbmNvZGUnKTtcblxuZXhwb3J0cy5leHRyYWN0ID0gZnVuY3Rpb24gKHN0cikge1xuXHRyZXR1cm4gc3RyLnNwbGl0KCc/JylbMV0gfHwgJyc7XG59O1xuXG5leHBvcnRzLnBhcnNlID0gZnVuY3Rpb24gKHN0cikge1xuXHRpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4ge307XG5cdH1cblxuXHRzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoL14oXFw/fCN8JikvLCAnJyk7XG5cblx0aWYgKCFzdHIpIHtcblx0XHRyZXR1cm4ge307XG5cdH1cblxuXHRyZXR1cm4gc3RyLnNwbGl0KCcmJykucmVkdWNlKGZ1bmN0aW9uIChyZXQsIHBhcmFtKSB7XG5cdFx0dmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcblx0XHQvLyBGaXJlZm94IChwcmUgNDApIGRlY29kZXMgYCUzRGAgdG8gYD1gXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9xdWVyeS1zdHJpbmcvcHVsbC8zN1xuXHRcdHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpO1xuXHRcdHZhciB2YWwgPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHMuam9pbignPScpIDogdW5kZWZpbmVkO1xuXG5cdFx0a2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KGtleSk7XG5cblx0XHQvLyBtaXNzaW5nIGA9YCBzaG91bGQgYmUgYG51bGxgOlxuXHRcdC8vIGh0dHA6Ly93My5vcmcvVFIvMjAxMi9XRC11cmwtMjAxMjA1MjQvI2NvbGxlY3QtdXJsLXBhcmFtZXRlcnNcblx0XHR2YWwgPSB2YWwgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBkZWNvZGVVUklDb21wb25lbnQodmFsKTtcblxuXHRcdGlmICghcmV0Lmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdHJldFtrZXldID0gdmFsO1xuXHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXRba2V5XSkpIHtcblx0XHRcdHJldFtrZXldLnB1c2godmFsKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0W2tleV0gPSBbcmV0W2tleV0sIHZhbF07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSwge30pO1xufTtcblxuZXhwb3J0cy5zdHJpbmdpZnkgPSBmdW5jdGlvbiAob2JqKSB7XG5cdHJldHVybiBvYmogPyBPYmplY3Qua2V5cyhvYmopLnNvcnQoKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHRcdHZhciB2YWwgPSBvYmpba2V5XTtcblxuXHRcdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblxuXHRcdGlmICh2YWwgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBrZXk7XG5cdFx0fVxuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuXHRcdFx0cmV0dXJuIHZhbC5zbGljZSgpLnNvcnQoKS5tYXAoZnVuY3Rpb24gKHZhbDIpIHtcblx0XHRcdFx0cmV0dXJuIHN0cmljdFVyaUVuY29kZShrZXkpICsgJz0nICsgc3RyaWN0VXJpRW5jb2RlKHZhbDIpO1xuXHRcdFx0fSkuam9pbignJicpO1xuXHRcdH1cblxuXHRcdHJldHVybiBzdHJpY3RVcmlFbmNvZGUoa2V5KSArICc9JyArIHN0cmljdFVyaUVuY29kZSh2YWwpO1xuXHR9KS5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcblx0XHRyZXR1cm4geC5sZW5ndGggPiAwO1xuXHR9KS5qb2luKCcmJykgOiAnJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0RE9NJyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMubG9vcEFzeW5jID0gbG9vcEFzeW5jO1xuZXhwb3J0cy5tYXBBc3luYyA9IG1hcEFzeW5jO1xuXG5mdW5jdGlvbiBsb29wQXN5bmModHVybnMsIHdvcmssIGNhbGxiYWNrKSB7XG4gIHZhciBjdXJyZW50VHVybiA9IDAsXG4gICAgICBpc0RvbmUgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBkb25lKCkge1xuICAgIGlzRG9uZSA9IHRydWU7XG4gICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgaWYgKGlzRG9uZSkgcmV0dXJuO1xuXG4gICAgaWYgKGN1cnJlbnRUdXJuIDwgdHVybnMpIHtcbiAgICAgIHdvcmsuY2FsbCh0aGlzLCBjdXJyZW50VHVybisrLCBuZXh0LCBkb25lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIG5leHQoKTtcbn1cblxuZnVuY3Rpb24gbWFwQXN5bmMoYXJyYXksIHdvcmssIGNhbGxiYWNrKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciB2YWx1ZXMgPSBbXTtcblxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbGJhY2sobnVsbCwgdmFsdWVzKTtcblxuICB2YXIgaXNEb25lID0gZmFsc2UsXG4gICAgICBkb25lQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGRvbmUoaW5kZXgsIGVycm9yLCB2YWx1ZSkge1xuICAgIGlmIChpc0RvbmUpIHJldHVybjtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgaXNEb25lID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuXG4gICAgICBpc0RvbmUgPSArK2RvbmVDb3VudCA9PT0gbGVuZ3RoO1xuXG4gICAgICBpZiAoaXNEb25lKSBjYWxsYmFjayhudWxsLCB2YWx1ZXMpO1xuICAgIH1cbiAgfVxuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgd29yayhpdGVtLCBpbmRleCwgZnVuY3Rpb24gKGVycm9yLCB2YWx1ZSkge1xuICAgICAgZG9uZShpbmRleCwgZXJyb3IsIHZhbHVlKTtcbiAgICB9KTtcbiAgfSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX1Byb3BUeXBlcyA9IHJlcXVpcmUoJy4vUHJvcFR5cGVzJyk7XG5cbi8qKlxuICogQSBtaXhpbiB0aGF0IGFkZHMgdGhlIFwiaGlzdG9yeVwiIGluc3RhbmNlIHZhcmlhYmxlIHRvIGNvbXBvbmVudHMuXG4gKi9cbnZhciBIaXN0b3J5ID0ge1xuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIGhpc3Rvcnk6IF9Qcm9wVHlwZXMuaGlzdG9yeVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMuaGlzdG9yeSA9IHRoaXMuY29udGV4dC5oaXN0b3J5O1xuICB9XG5cbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEhpc3Rvcnk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9MaW5rID0gcmVxdWlyZSgnLi9MaW5rJyk7XG5cbnZhciBfTGluazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaW5rKTtcblxuLyoqXG4gKiBBbiA8SW5kZXhMaW5rPiBpcyB1c2VkIHRvIGxpbmsgdG8gYW4gPEluZGV4Um91dGU+LlxuICovXG5cbnZhciBJbmRleExpbmsgPSAoZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEluZGV4TGluaywgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5kZXhMaW5rKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmRleExpbmspO1xuXG4gICAgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgSW5kZXhMaW5rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9MaW5rMlsnZGVmYXVsdCddLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgeyBvbmx5QWN0aXZlT25JbmRleDogdHJ1ZSB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEluZGV4TGluaztcbn0pKF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBJbmRleExpbms7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfUmVkaXJlY3QgPSByZXF1aXJlKCcuL1JlZGlyZWN0Jyk7XG5cbnZhciBfUmVkaXJlY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVkaXJlY3QpO1xuXG52YXIgX1Byb3BUeXBlcyA9IHJlcXVpcmUoJy4vUHJvcFR5cGVzJyk7XG5cbnZhciBfUmVhY3QkUHJvcFR5cGVzID0gX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcztcbnZhciBzdHJpbmcgPSBfUmVhY3QkUHJvcFR5cGVzLnN0cmluZztcbnZhciBvYmplY3QgPSBfUmVhY3QkUHJvcFR5cGVzLm9iamVjdDtcblxuLyoqXG4gKiBBbiA8SW5kZXhSZWRpcmVjdD4gaXMgdXNlZCB0byByZWRpcmVjdCBmcm9tIGFuIGluZGV4Um91dGUuXG4gKi9cblxudmFyIEluZGV4UmVkaXJlY3QgPSAoZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEluZGV4UmVkaXJlY3QsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEluZGV4UmVkaXJlY3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluZGV4UmVkaXJlY3QpO1xuXG4gICAgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHNhbml0eSBjaGVjayAqL1xuXG4gIEluZGV4UmVkaXJlY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2ludmFyaWFudDJbJ2RlZmF1bHQnXShmYWxzZSwgJzxJbmRleFJlZGlyZWN0PiBlbGVtZW50cyBhcmUgZm9yIHJvdXRlciBjb25maWd1cmF0aW9uIG9ubHkgYW5kIHNob3VsZCBub3QgYmUgcmVuZGVyZWQnKSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xuICB9O1xuXG4gIHJldHVybiBJbmRleFJlZGlyZWN0O1xufSkoX3JlYWN0LkNvbXBvbmVudCk7XG5cbkluZGV4UmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICB0bzogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHF1ZXJ5OiBvYmplY3QsXG4gIHN0YXRlOiBvYmplY3QsXG4gIG9uRW50ZXI6IF9Qcm9wVHlwZXMuZmFsc3ksXG4gIGNoaWxkcmVuOiBfUHJvcFR5cGVzLmZhbHN5XG59O1xuXG5JbmRleFJlZGlyZWN0LmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50LCBwYXJlbnRSb3V0ZSkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZTogc2FuaXR5IGNoZWNrICovXG4gIGlmIChwYXJlbnRSb3V0ZSkge1xuICAgIHBhcmVudFJvdXRlLmluZGV4Um91dGUgPSBfUmVkaXJlY3QyWydkZWZhdWx0J10uY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50KGVsZW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShmYWxzZSwgJ0FuIDxJbmRleFJlZGlyZWN0PiBkb2VzIG5vdCBtYWtlIHNlbnNlIGF0IHRoZSByb290IG9mIHlvdXIgcm91dGUgY29uZmlnJykgOiB1bmRlZmluZWQ7XG4gIH1cbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEluZGV4UmVkaXJlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfUm91dGVVdGlscyA9IHJlcXVpcmUoJy4vUm91dGVVdGlscycpO1xuXG52YXIgX1Byb3BUeXBlcyA9IHJlcXVpcmUoJy4vUHJvcFR5cGVzJyk7XG5cbnZhciBmdW5jID0gX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5mdW5jO1xuXG4vKipcbiAqIEFuIDxJbmRleFJvdXRlPiBpcyB1c2VkIHRvIHNwZWNpZnkgaXRzIHBhcmVudCdzIDxSb3V0ZSBpbmRleFJvdXRlPiBpblxuICogYSBKU1ggcm91dGUgY29uZmlnLlxuICovXG5cbnZhciBJbmRleFJvdXRlID0gKGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhJbmRleFJvdXRlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBJbmRleFJvdXRlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmRleFJvdXRlKTtcblxuICAgIF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBzYW5pdHkgY2hlY2sgKi9cblxuICBJbmRleFJvdXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UsICc8SW5kZXhSb3V0ZT4gZWxlbWVudHMgYXJlIGZvciByb3V0ZXIgY29uZmlndXJhdGlvbiBvbmx5IGFuZCBzaG91bGQgbm90IGJlIHJlbmRlcmVkJykgOiBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgfTtcblxuICByZXR1cm4gSW5kZXhSb3V0ZTtcbn0pKF9yZWFjdC5Db21wb25lbnQpO1xuXG5JbmRleFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgcGF0aDogX1Byb3BUeXBlcy5mYWxzeSxcbiAgY29tcG9uZW50OiBfUHJvcFR5cGVzLmNvbXBvbmVudCxcbiAgY29tcG9uZW50czogX1Byb3BUeXBlcy5jb21wb25lbnRzLFxuICBnZXRDb21wb25lbnQ6IGZ1bmMsXG4gIGdldENvbXBvbmVudHM6IGZ1bmNcbn07XG5cbkluZGV4Um91dGUuY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIHBhcmVudFJvdXRlKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlOiBzYW5pdHkgY2hlY2sgKi9cbiAgaWYgKHBhcmVudFJvdXRlKSB7XG4gICAgcGFyZW50Um91dGUuaW5kZXhSb3V0ZSA9IF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudChlbGVtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdBbiA8SW5kZXhSb3V0ZT4gZG9lcyBub3QgbWFrZSBzZW5zZSBhdCB0aGUgcm9vdCBvZiB5b3VyIHJvdXRlIGNvbmZpZycpIDogdW5kZWZpbmVkO1xuICB9XG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBJbmRleFJvdXRlO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIG9iamVjdCA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMub2JqZWN0O1xuXG4vKipcbiAqIFRoZSBMaWZlY3ljbGUgbWl4aW4gYWRkcyB0aGUgcm91dGVyV2lsbExlYXZlIGxpZmVjeWNsZSBtZXRob2QgdG8gYVxuICogY29tcG9uZW50IHRoYXQgbWF5IGJlIHVzZWQgdG8gY2FuY2VsIGEgdHJhbnNpdGlvbiBvciBwcm9tcHQgdGhlIHVzZXJcbiAqIGZvciBjb25maXJtYXRpb24uXG4gKlxuICogT24gc3RhbmRhcmQgdHJhbnNpdGlvbnMsIHJvdXRlcldpbGxMZWF2ZSByZWNlaXZlcyBhIHNpbmdsZSBhcmd1bWVudDogdGhlXG4gKiBsb2NhdGlvbiB3ZSdyZSB0cmFuc2l0aW9uaW5nIHRvLiBUbyBjYW5jZWwgdGhlIHRyYW5zaXRpb24sIHJldHVybiBmYWxzZS5cbiAqIFRvIHByb21wdCB0aGUgdXNlciBmb3IgY29uZmlybWF0aW9uLCByZXR1cm4gYSBwcm9tcHQgbWVzc2FnZSAoc3RyaW5nKS5cbiAqXG4gKiBEdXJpbmcgdGhlIGJlZm9yZXVubG9hZCBldmVudCAoYXNzdW1pbmcgeW91J3JlIHVzaW5nIHRoZSB1c2VCZWZvcmVVbmxvYWRcbiAqIGhpc3RvcnkgZW5oYW5jZXIpLCByb3V0ZXJXaWxsTGVhdmUgZG9lcyBub3QgcmVjZWl2ZSBhIGxvY2F0aW9uIG9iamVjdFxuICogYmVjYXVzZSBpdCBpc24ndCBwb3NzaWJsZSBmb3IgdXMgdG8ga25vdyB0aGUgbG9jYXRpb24gd2UncmUgdHJhbnNpdGlvbmluZ1xuICogdG8uIEluIHRoaXMgY2FzZSByb3V0ZXJXaWxsTGVhdmUgbXVzdCByZXR1cm4gYSBwcm9tcHQgbWVzc2FnZSB0byBwcmV2ZW50XG4gKiB0aGUgdXNlciBmcm9tIGNsb3NpbmcgdGhlIHdpbmRvdy90YWIuXG4gKi9cbnZhciBMaWZlY3ljbGUgPSB7XG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgaGlzdG9yeTogb2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgLy8gTmVzdGVkIGNoaWxkcmVuIHJlY2VpdmUgdGhlIHJvdXRlIGFzIGNvbnRleHQsIGVpdGhlclxuICAgIC8vIHNldCBieSB0aGUgcm91dGUgY29tcG9uZW50IHVzaW5nIHRoZSBSb3V0ZUNvbnRleHQgbWl4aW5cbiAgICAvLyBvciBieSBzb21lIG90aGVyIGFuY2VzdG9yLlxuICAgIHJvdXRlOiBvYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICAvLyBSb3V0ZSBjb21wb25lbnRzIHJlY2VpdmUgdGhlIHJvdXRlIG9iamVjdCBhcyBhIHByb3AuXG4gICAgcm91dGU6IG9iamVjdFxuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAhdGhpcy5yb3V0ZXJXaWxsTGVhdmUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2ludmFyaWFudDJbJ2RlZmF1bHQnXShmYWxzZSwgJ1RoZSBMaWZlY3ljbGUgbWl4aW4gcmVxdWlyZXMgeW91IHRvIGRlZmluZSBhIHJvdXRlcldpbGxMZWF2ZSBtZXRob2QnKSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIHJvdXRlID0gdGhpcy5wcm9wcy5yb3V0ZSB8fCB0aGlzLmNvbnRleHQucm91dGU7XG5cbiAgICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2ludmFyaWFudDJbJ2RlZmF1bHQnXShmYWxzZSwgJ1RoZSBMaWZlY3ljbGUgbWl4aW4gbXVzdCBiZSB1c2VkIG9uIGVpdGhlciBhKSBhIDxSb3V0ZSBjb21wb25lbnQ+IG9yICcgKyAnYikgYSBkZXNjZW5kYW50IG9mIGEgPFJvdXRlIGNvbXBvbmVudD4gdGhhdCB1c2VzIHRoZSBSb3V0ZUNvbnRleHQgbWl4aW4nKSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5fdW5saXN0ZW5CZWZvcmVMZWF2aW5nUm91dGUgPSB0aGlzLmNvbnRleHQuaGlzdG9yeS5saXN0ZW5CZWZvcmVMZWF2aW5nUm91dGUocm91dGUsIHRoaXMucm91dGVyV2lsbExlYXZlKTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuX3VubGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlKSB0aGlzLl91bmxpc3RlbkJlZm9yZUxlYXZpbmdSb3V0ZSgpO1xuICB9XG5cbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IExpZmVjeWNsZTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfUmVhY3QkUHJvcFR5cGVzID0gX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcztcbnZhciBib29sID0gX1JlYWN0JFByb3BUeXBlcy5ib29sO1xudmFyIG9iamVjdCA9IF9SZWFjdCRQcm9wVHlwZXMub2JqZWN0O1xudmFyIHN0cmluZyA9IF9SZWFjdCRQcm9wVHlwZXMuc3RyaW5nO1xudmFyIGZ1bmMgPSBfUmVhY3QkUHJvcFR5cGVzLmZ1bmM7XG5cbmZ1bmN0aW9uIGlzTGVmdENsaWNrRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LmJ1dHRvbiA9PT0gMDtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eU9iamVjdChvYmplY3QpIHtcbiAgZm9yICh2YXIgcCBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KHApKSByZXR1cm4gZmFsc2U7XG4gIH1yZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBBIDxMaW5rPiBpcyB1c2VkIHRvIGNyZWF0ZSBhbiA8YT4gZWxlbWVudCB0aGF0IGxpbmtzIHRvIGEgcm91dGUuXG4gKiBXaGVuIHRoYXQgcm91dGUgaXMgYWN0aXZlLCB0aGUgbGluayBnZXRzIHRoZSB2YWx1ZSBvZiBpdHNcbiAqIGBhY3RpdmVDbGFzc05hbWVgIHByb3BcbiAqXG4gKiBGb3IgZXhhbXBsZSwgYXNzdW1pbmcgeW91IGhhdmUgdGhlIGZvbGxvd2luZyByb3V0ZTpcbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL3Bvc3RzLzpwb3N0SURcIiBjb21wb25lbnQ9e1Bvc3R9IC8+XG4gKlxuICogWW91IGNvdWxkIHVzZSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudCB0byBsaW5rIHRvIHRoYXQgcm91dGU6XG4gKlxuICogICA8TGluayB0bz17YC9wb3N0cy8ke3Bvc3QuaWR9YH0gLz5cbiAqXG4gKiBMaW5rcyBtYXkgcGFzcyBhbG9uZyBsb2NhdGlvbiBzdGF0ZSBhbmQvb3IgcXVlcnkgc3RyaW5nIHBhcmFtZXRlcnNcbiAqIGluIHRoZSBzdGF0ZS9xdWVyeSBwcm9wcywgcmVzcGVjdGl2ZWx5LlxuICpcbiAqICAgPExpbmsgLi4uIHF1ZXJ5PXt7IHNob3c6IHRydWUgfX0gc3RhdGU9e3sgdGhlOiAnc3RhdGUnIH19IC8+XG4gKi9cblxudmFyIExpbmsgPSAoZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmspO1xuXG4gICAgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgTGluay5wcm90b3R5cGUuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIHZhciBhbGxvd1RyYW5zaXRpb24gPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMucHJvcHMub25DbGljaykgdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcblxuICAgIGlmIChpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHx8ICFpc0xlZnRDbGlja0V2ZW50KGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPT09IHRydWUpIGFsbG93VHJhbnNpdGlvbiA9IGZhbHNlO1xuXG4gICAgLy8gSWYgdGFyZ2V0IHByb3AgaXMgc2V0IChlLmcuIHRvIFwiX2JsYW5rXCIpIGxldCBicm93c2VyIGhhbmRsZSBsaW5rLlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZjogdW50ZXN0YWJsZSB3aXRoIEthcm1hICovXG4gICAgaWYgKHRoaXMucHJvcHMudGFyZ2V0KSB7XG4gICAgICBpZiAoIWFsbG93VHJhbnNpdGlvbikgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoYWxsb3dUcmFuc2l0aW9uKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICAgIHZhciBzdGF0ZSA9IF9wcm9wcy5zdGF0ZTtcbiAgICAgIHZhciB0byA9IF9wcm9wcy50bztcbiAgICAgIHZhciBxdWVyeSA9IF9wcm9wcy5xdWVyeTtcbiAgICAgIHZhciBoYXNoID0gX3Byb3BzLmhhc2g7XG5cbiAgICAgIGlmIChoYXNoKSB0byArPSBoYXNoO1xuXG4gICAgICB0aGlzLmNvbnRleHQuaGlzdG9yeS5wdXNoU3RhdGUoc3RhdGUsIHRvLCBxdWVyeSk7XG4gICAgfVxuICB9O1xuXG4gIExpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzO1xuICAgIHZhciB0byA9IF9wcm9wczIudG87XG4gICAgdmFyIHF1ZXJ5ID0gX3Byb3BzMi5xdWVyeTtcbiAgICB2YXIgaGFzaCA9IF9wcm9wczIuaGFzaDtcbiAgICB2YXIgc3RhdGUgPSBfcHJvcHMyLnN0YXRlO1xuICAgIHZhciBhY3RpdmVDbGFzc05hbWUgPSBfcHJvcHMyLmFjdGl2ZUNsYXNzTmFtZTtcbiAgICB2YXIgYWN0aXZlU3R5bGUgPSBfcHJvcHMyLmFjdGl2ZVN0eWxlO1xuICAgIHZhciBvbmx5QWN0aXZlT25JbmRleCA9IF9wcm9wczIub25seUFjdGl2ZU9uSW5kZXg7XG5cbiAgICB2YXIgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzMiwgWyd0bycsICdxdWVyeScsICdoYXNoJywgJ3N0YXRlJywgJ2FjdGl2ZUNsYXNzTmFtZScsICdhY3RpdmVTdHlsZScsICdvbmx5QWN0aXZlT25JbmRleCddKTtcblxuICAgIC8vIE1hbnVhbGx5IG92ZXJyaWRlIG9uQ2xpY2suXG4gICAgcHJvcHMub25DbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gX3RoaXMuaGFuZGxlQ2xpY2soZSk7XG4gICAgfTtcblxuICAgIC8vIElnbm9yZSBpZiByZW5kZXJlZCBvdXRzaWRlIHRoZSBjb250ZXh0IG9mIGhpc3RvcnksIHNpbXBsaWZpZXMgdW5pdCB0ZXN0aW5nLlxuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0Lmhpc3Rvcnk7XG5cbiAgICBpZiAoaGlzdG9yeSkge1xuICAgICAgcHJvcHMuaHJlZiA9IGhpc3RvcnkuY3JlYXRlSHJlZih0bywgcXVlcnkpO1xuXG4gICAgICBpZiAoaGFzaCkgcHJvcHMuaHJlZiArPSBoYXNoO1xuXG4gICAgICBpZiAoYWN0aXZlQ2xhc3NOYW1lIHx8IGFjdGl2ZVN0eWxlICE9IG51bGwgJiYgIWlzRW1wdHlPYmplY3QoYWN0aXZlU3R5bGUpKSB7XG4gICAgICAgIGlmIChoaXN0b3J5LmlzQWN0aXZlKHRvLCBxdWVyeSwgb25seUFjdGl2ZU9uSW5kZXgpKSB7XG4gICAgICAgICAgaWYgKGFjdGl2ZUNsYXNzTmFtZSkgcHJvcHMuY2xhc3NOYW1lICs9IHByb3BzLmNsYXNzTmFtZSA9PT0gJycgPyBhY3RpdmVDbGFzc05hbWUgOiAnICcgKyBhY3RpdmVDbGFzc05hbWU7XG5cbiAgICAgICAgICBpZiAoYWN0aXZlU3R5bGUpIHByb3BzLnN0eWxlID0gX2V4dGVuZHMoe30sIHByb3BzLnN0eWxlLCBhY3RpdmVTdHlsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2EnLCBwcm9wcyk7XG4gIH07XG5cbiAgcmV0dXJuIExpbms7XG59KShfcmVhY3QuQ29tcG9uZW50KTtcblxuTGluay5jb250ZXh0VHlwZXMgPSB7XG4gIGhpc3Rvcnk6IG9iamVjdFxufTtcblxuTGluay5wcm9wVHlwZXMgPSB7XG4gIHRvOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgcXVlcnk6IG9iamVjdCxcbiAgaGFzaDogc3RyaW5nLFxuICBzdGF0ZTogb2JqZWN0LFxuICBhY3RpdmVTdHlsZTogb2JqZWN0LFxuICBhY3RpdmVDbGFzc05hbWU6IHN0cmluZyxcbiAgb25seUFjdGl2ZU9uSW5kZXg6IGJvb2wuaXNSZXF1aXJlZCxcbiAgb25DbGljazogZnVuY1xufTtcblxuTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIG9ubHlBY3RpdmVPbkluZGV4OiBmYWxzZSxcbiAgY2xhc3NOYW1lOiAnJyxcbiAgc3R5bGU6IHt9XG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBMaW5rO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jb21waWxlUGF0dGVybiA9IGNvbXBpbGVQYXR0ZXJuO1xuZXhwb3J0cy5tYXRjaFBhdHRlcm4gPSBtYXRjaFBhdHRlcm47XG5leHBvcnRzLmdldFBhcmFtTmFtZXMgPSBnZXRQYXJhbU5hbWVzO1xuZXhwb3J0cy5nZXRQYXJhbXMgPSBnZXRQYXJhbXM7XG5leHBvcnRzLmZvcm1hdFBhdHRlcm4gPSBmb3JtYXRQYXR0ZXJuO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbmZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xufVxuXG5mdW5jdGlvbiBlc2NhcGVTb3VyY2Uoc3RyaW5nKSB7XG4gIHJldHVybiBlc2NhcGVSZWdFeHAoc3RyaW5nKS5yZXBsYWNlKC9cXC8rL2csICcvKycpO1xufVxuXG5mdW5jdGlvbiBfY29tcGlsZVBhdHRlcm4ocGF0dGVybikge1xuICB2YXIgcmVnZXhwU291cmNlID0gJyc7XG4gIHZhciBwYXJhbU5hbWVzID0gW107XG4gIHZhciB0b2tlbnMgPSBbXTtcblxuICB2YXIgbWF0Y2ggPSB1bmRlZmluZWQsXG4gICAgICBsYXN0SW5kZXggPSAwLFxuICAgICAgbWF0Y2hlciA9IC86KFthLXpBLVpfJF1bYS16QS1aMC05XyRdKil8XFwqXFwqfFxcKnxcXCh8XFwpL2c7XG4gIHdoaWxlIChtYXRjaCA9IG1hdGNoZXIuZXhlYyhwYXR0ZXJuKSkge1xuICAgIGlmIChtYXRjaC5pbmRleCAhPT0gbGFzdEluZGV4KSB7XG4gICAgICB0b2tlbnMucHVzaChwYXR0ZXJuLnNsaWNlKGxhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgIHJlZ2V4cFNvdXJjZSArPSBlc2NhcGVTb3VyY2UocGF0dGVybi5zbGljZShsYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICByZWdleHBTb3VyY2UgKz0gJyhbXi8/I10rKSc7XG4gICAgICBwYXJhbU5hbWVzLnB1c2gobWF0Y2hbMV0pO1xuICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0gPT09ICcqKicpIHtcbiAgICAgIHJlZ2V4cFNvdXJjZSArPSAnKFtcXFxcc1xcXFxTXSopJztcbiAgICAgIHBhcmFtTmFtZXMucHVzaCgnc3BsYXQnKTtcbiAgICB9IGVsc2UgaWYgKG1hdGNoWzBdID09PSAnKicpIHtcbiAgICAgIHJlZ2V4cFNvdXJjZSArPSAnKFtcXFxcc1xcXFxTXSo/KSc7XG4gICAgICBwYXJhbU5hbWVzLnB1c2goJ3NwbGF0Jyk7XG4gICAgfSBlbHNlIGlmIChtYXRjaFswXSA9PT0gJygnKSB7XG4gICAgICByZWdleHBTb3VyY2UgKz0gJyg/Oic7XG4gICAgfSBlbHNlIGlmIChtYXRjaFswXSA9PT0gJyknKSB7XG4gICAgICByZWdleHBTb3VyY2UgKz0gJyk/JztcbiAgICB9XG5cbiAgICB0b2tlbnMucHVzaChtYXRjaFswXSk7XG5cbiAgICBsYXN0SW5kZXggPSBtYXRjaGVyLmxhc3RJbmRleDtcbiAgfVxuXG4gIGlmIChsYXN0SW5kZXggIT09IHBhdHRlcm4ubGVuZ3RoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0dGVybi5zbGljZShsYXN0SW5kZXgsIHBhdHRlcm4ubGVuZ3RoKSk7XG4gICAgcmVnZXhwU291cmNlICs9IGVzY2FwZVNvdXJjZShwYXR0ZXJuLnNsaWNlKGxhc3RJbmRleCwgcGF0dGVybi5sZW5ndGgpKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0dGVybjogcGF0dGVybixcbiAgICByZWdleHBTb3VyY2U6IHJlZ2V4cFNvdXJjZSxcbiAgICBwYXJhbU5hbWVzOiBwYXJhbU5hbWVzLFxuICAgIHRva2VuczogdG9rZW5zXG4gIH07XG59XG5cbnZhciBDb21waWxlZFBhdHRlcm5zQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gY29tcGlsZVBhdHRlcm4ocGF0dGVybikge1xuICBpZiAoIShwYXR0ZXJuIGluIENvbXBpbGVkUGF0dGVybnNDYWNoZSkpIENvbXBpbGVkUGF0dGVybnNDYWNoZVtwYXR0ZXJuXSA9IF9jb21waWxlUGF0dGVybihwYXR0ZXJuKTtcblxuICByZXR1cm4gQ29tcGlsZWRQYXR0ZXJuc0NhY2hlW3BhdHRlcm5dO1xufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIG1hdGNoIGEgcGF0dGVybiBvbiB0aGUgZ2l2ZW4gcGF0aG5hbWUuIFBhdHRlcm5zIG1heSB1c2VcbiAqIHRoZSBmb2xsb3dpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzOlxuICpcbiAqIC0gOnBhcmFtTmFtZSAgICAgTWF0Y2hlcyBhIFVSTCBzZWdtZW50IHVwIHRvIHRoZSBuZXh0IC8sID8sIG9yICMuIFRoZVxuICogICAgICAgICAgICAgICAgICBjYXB0dXJlZCBzdHJpbmcgaXMgY29uc2lkZXJlZCBhIFwicGFyYW1cIlxuICogLSAoKSAgICAgICAgICAgICBXcmFwcyBhIHNlZ21lbnQgb2YgdGhlIFVSTCB0aGF0IGlzIG9wdGlvbmFsXG4gKiAtICogICAgICAgICAgICAgIENvbnN1bWVzIChub24tZ3JlZWR5KSBhbGwgY2hhcmFjdGVycyB1cCB0byB0aGUgbmV4dFxuICogICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIgaW4gdGhlIHBhdHRlcm4sIG9yIHRvIHRoZSBlbmQgb2YgdGhlIFVSTCBpZlxuICogICAgICAgICAgICAgICAgICB0aGVyZSBpcyBub25lXG4gKiAtICoqICAgICAgICAgICAgIENvbnN1bWVzIChncmVlZHkpIGFsbCBjaGFyYWN0ZXJzIHVwIHRvIHRoZSBuZXh0IGNoYXJhY3RlclxuICogICAgICAgICAgICAgICAgICBpbiB0aGUgcGF0dGVybiwgb3IgdG8gdGhlIGVuZCBvZiB0aGUgVVJMIGlmIHRoZXJlIGlzIG5vbmVcbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAtIHJlbWFpbmluZ1BhdGhuYW1lXG4gKiAtIHBhcmFtTmFtZXNcbiAqIC0gcGFyYW1WYWx1ZXNcbiAqL1xuXG5mdW5jdGlvbiBtYXRjaFBhdHRlcm4ocGF0dGVybiwgcGF0aG5hbWUpIHtcbiAgLy8gTWFrZSBsZWFkaW5nIHNsYXNoZXMgY29uc2lzdGVudCBiZXR3ZWVuIHBhdHRlcm4gYW5kIHBhdGhuYW1lLlxuICBpZiAocGF0dGVybi5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgIHBhdHRlcm4gPSAnLycgKyBwYXR0ZXJuO1xuICB9XG4gIGlmIChwYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgIHBhdGhuYW1lID0gJy8nICsgcGF0aG5hbWU7XG4gIH1cblxuICB2YXIgX2NvbXBpbGVQYXR0ZXJuMiA9IGNvbXBpbGVQYXR0ZXJuKHBhdHRlcm4pO1xuXG4gIHZhciByZWdleHBTb3VyY2UgPSBfY29tcGlsZVBhdHRlcm4yLnJlZ2V4cFNvdXJjZTtcbiAgdmFyIHBhcmFtTmFtZXMgPSBfY29tcGlsZVBhdHRlcm4yLnBhcmFtTmFtZXM7XG4gIHZhciB0b2tlbnMgPSBfY29tcGlsZVBhdHRlcm4yLnRva2VucztcblxuICByZWdleHBTb3VyY2UgKz0gJy8qJzsgLy8gQ2FwdHVyZSBwYXRoIHNlcGFyYXRvcnNcblxuICAvLyBTcGVjaWFsLWNhc2UgcGF0dGVybnMgbGlrZSAnKicgZm9yIGNhdGNoLWFsbCByb3V0ZXMuXG4gIHZhciBjYXB0dXJlUmVtYWluaW5nID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXSAhPT0gJyonO1xuXG4gIGlmIChjYXB0dXJlUmVtYWluaW5nKSB7XG4gICAgLy8gVGhpcyB3aWxsIG1hdGNoIG5ld2xpbmVzIGluIHRoZSByZW1haW5pbmcgcGF0aC5cbiAgICByZWdleHBTb3VyY2UgKz0gJyhbXFxcXHNcXFxcU10qPyknO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gcGF0aG5hbWUubWF0Y2gobmV3IFJlZ0V4cCgnXicgKyByZWdleHBTb3VyY2UgKyAnJCcsICdpJykpO1xuXG4gIHZhciByZW1haW5pbmdQYXRobmFtZSA9IHVuZGVmaW5lZCxcbiAgICAgIHBhcmFtVmFsdWVzID0gdW5kZWZpbmVkO1xuICBpZiAobWF0Y2ggIT0gbnVsbCkge1xuICAgIGlmIChjYXB0dXJlUmVtYWluaW5nKSB7XG4gICAgICByZW1haW5pbmdQYXRobmFtZSA9IG1hdGNoLnBvcCgpO1xuICAgICAgdmFyIG1hdGNoZWRQYXRoID0gbWF0Y2hbMF0uc3Vic3RyKDAsIG1hdGNoWzBdLmxlbmd0aCAtIHJlbWFpbmluZ1BhdGhuYW1lLmxlbmd0aCk7XG5cbiAgICAgIC8vIElmIHdlIGRpZG4ndCBtYXRjaCB0aGUgZW50aXJlIHBhdGhuYW1lLCB0aGVuIG1ha2Ugc3VyZSB0aGF0IHRoZSBtYXRjaFxuICAgICAgLy8gd2UgZGlkIGdldCBlbmRzIGF0IGEgcGF0aCBzZXBhcmF0b3IgKHBvdGVudGlhbGx5IHRoZSBvbmUgd2UgYWRkZWRcbiAgICAgIC8vIGFib3ZlIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHBhdGgsIGlmIHRoZSBhY3R1YWwgbWF0Y2ggd2FzIGVtcHR5KS5cbiAgICAgIGlmIChyZW1haW5pbmdQYXRobmFtZSAmJiBtYXRjaGVkUGF0aC5jaGFyQXQobWF0Y2hlZFBhdGgubGVuZ3RoIC0gMSkgIT09ICcvJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlbWFpbmluZ1BhdGhuYW1lOiBudWxsLFxuICAgICAgICAgIHBhcmFtTmFtZXM6IHBhcmFtTmFtZXMsXG4gICAgICAgICAgcGFyYW1WYWx1ZXM6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdGhpcyBtYXRjaGVkIGF0IGFsbCwgdGhlbiB0aGUgbWF0Y2ggd2FzIHRoZSBlbnRpcmUgcGF0aG5hbWUuXG4gICAgICByZW1haW5pbmdQYXRobmFtZSA9ICcnO1xuICAgIH1cblxuICAgIHBhcmFtVmFsdWVzID0gbWF0Y2guc2xpY2UoMSkubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gdiAhPSBudWxsID8gZGVjb2RlVVJJQ29tcG9uZW50KHYpIDogdjtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZW1haW5pbmdQYXRobmFtZSA9IHBhcmFtVmFsdWVzID0gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVtYWluaW5nUGF0aG5hbWU6IHJlbWFpbmluZ1BhdGhuYW1lLFxuICAgIHBhcmFtTmFtZXM6IHBhcmFtTmFtZXMsXG4gICAgcGFyYW1WYWx1ZXM6IHBhcmFtVmFsdWVzXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFBhcmFtTmFtZXMocGF0dGVybikge1xuICByZXR1cm4gY29tcGlsZVBhdHRlcm4ocGF0dGVybikucGFyYW1OYW1lcztcbn1cblxuZnVuY3Rpb24gZ2V0UGFyYW1zKHBhdHRlcm4sIHBhdGhuYW1lKSB7XG4gIHZhciBfbWF0Y2hQYXR0ZXJuID0gbWF0Y2hQYXR0ZXJuKHBhdHRlcm4sIHBhdGhuYW1lKTtcblxuICB2YXIgcGFyYW1OYW1lcyA9IF9tYXRjaFBhdHRlcm4ucGFyYW1OYW1lcztcbiAgdmFyIHBhcmFtVmFsdWVzID0gX21hdGNoUGF0dGVybi5wYXJhbVZhbHVlcztcblxuICBpZiAocGFyYW1WYWx1ZXMgIT0gbnVsbCkge1xuICAgIHJldHVybiBwYXJhbU5hbWVzLnJlZHVjZShmdW5jdGlvbiAobWVtbywgcGFyYW1OYW1lLCBpbmRleCkge1xuICAgICAgbWVtb1twYXJhbU5hbWVdID0gcGFyYW1WYWx1ZXNbaW5kZXhdO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSwge30pO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHZlcnNpb24gb2YgdGhlIGdpdmVuIHBhdHRlcm4gd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLiBUaHJvd3NcbiAqIGlmIHRoZXJlIGlzIGEgZHluYW1pYyBzZWdtZW50IG9mIHRoZSBwYXR0ZXJuIGZvciB3aGljaCB0aGVyZSBpcyBubyBwYXJhbS5cbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRQYXR0ZXJuKHBhdHRlcm4sIHBhcmFtcykge1xuICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG5cbiAgdmFyIF9jb21waWxlUGF0dGVybjMgPSBjb21waWxlUGF0dGVybihwYXR0ZXJuKTtcblxuICB2YXIgdG9rZW5zID0gX2NvbXBpbGVQYXR0ZXJuMy50b2tlbnM7XG5cbiAgdmFyIHBhcmVuQ291bnQgPSAwLFxuICAgICAgcGF0aG5hbWUgPSAnJyxcbiAgICAgIHNwbGF0SW5kZXggPSAwO1xuXG4gIHZhciB0b2tlbiA9IHVuZGVmaW5lZCxcbiAgICAgIHBhcmFtTmFtZSA9IHVuZGVmaW5lZCxcbiAgICAgIHBhcmFtVmFsdWUgPSB1bmRlZmluZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0b2tlbnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgIGlmICh0b2tlbiA9PT0gJyonIHx8IHRva2VuID09PSAnKionKSB7XG4gICAgICBwYXJhbVZhbHVlID0gQXJyYXkuaXNBcnJheShwYXJhbXMuc3BsYXQpID8gcGFyYW1zLnNwbGF0W3NwbGF0SW5kZXgrK10gOiBwYXJhbXMuc3BsYXQ7XG5cbiAgICAgICEocGFyYW1WYWx1ZSAhPSBudWxsIHx8IHBhcmVuQ291bnQgPiAwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnTWlzc2luZyBzcGxhdCAjJXMgZm9yIHBhdGggXCIlc1wiJywgc3BsYXRJbmRleCwgcGF0dGVybikgOiBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHBhcmFtVmFsdWUgIT0gbnVsbCkgcGF0aG5hbWUgKz0gZW5jb2RlVVJJKHBhcmFtVmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodG9rZW4gPT09ICcoJykge1xuICAgICAgcGFyZW5Db3VudCArPSAxO1xuICAgIH0gZWxzZSBpZiAodG9rZW4gPT09ICcpJykge1xuICAgICAgcGFyZW5Db3VudCAtPSAxO1xuICAgIH0gZWxzZSBpZiAodG9rZW4uY2hhckF0KDApID09PSAnOicpIHtcbiAgICAgIHBhcmFtTmFtZSA9IHRva2VuLnN1YnN0cmluZygxKTtcbiAgICAgIHBhcmFtVmFsdWUgPSBwYXJhbXNbcGFyYW1OYW1lXTtcblxuICAgICAgIShwYXJhbVZhbHVlICE9IG51bGwgfHwgcGFyZW5Db3VudCA+IDApID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UsICdNaXNzaW5nIFwiJXNcIiBwYXJhbWV0ZXIgZm9yIHBhdGggXCIlc1wiJywgcGFyYW1OYW1lLCBwYXR0ZXJuKSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAocGFyYW1WYWx1ZSAhPSBudWxsKSBwYXRobmFtZSArPSBlbmNvZGVVUklDb21wb25lbnQocGFyYW1WYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGhuYW1lICs9IHRva2VuO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXRobmFtZS5yZXBsYWNlKC9cXC8rL2csICcvJyk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5mYWxzeSA9IGZhbHN5O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIGZ1bmMgPSBfcmVhY3QuUHJvcFR5cGVzLmZ1bmM7XG52YXIgb2JqZWN0ID0gX3JlYWN0LlByb3BUeXBlcy5vYmplY3Q7XG52YXIgYXJyYXlPZiA9IF9yZWFjdC5Qcm9wVHlwZXMuYXJyYXlPZjtcbnZhciBvbmVPZlR5cGUgPSBfcmVhY3QuUHJvcFR5cGVzLm9uZU9mVHlwZTtcbnZhciBlbGVtZW50ID0gX3JlYWN0LlByb3BUeXBlcy5lbGVtZW50O1xudmFyIHNoYXBlID0gX3JlYWN0LlByb3BUeXBlcy5zaGFwZTtcbnZhciBzdHJpbmcgPSBfcmVhY3QuUHJvcFR5cGVzLnN0cmluZztcblxuZnVuY3Rpb24gZmFsc3kocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0pIHJldHVybiBuZXcgRXJyb3IoJzwnICsgY29tcG9uZW50TmFtZSArICc+IHNob3VsZCBub3QgaGF2ZSBhIFwiJyArIHByb3BOYW1lICsgJ1wiIHByb3AnKTtcbn1cblxudmFyIGhpc3RvcnkgPSBzaGFwZSh7XG4gIGxpc3RlbjogZnVuYy5pc1JlcXVpcmVkLFxuICBwdXNoU3RhdGU6IGZ1bmMuaXNSZXF1aXJlZCxcbiAgcmVwbGFjZVN0YXRlOiBmdW5jLmlzUmVxdWlyZWQsXG4gIGdvOiBmdW5jLmlzUmVxdWlyZWRcbn0pO1xuXG5leHBvcnRzLmhpc3RvcnkgPSBoaXN0b3J5O1xudmFyIGxvY2F0aW9uID0gc2hhcGUoe1xuICBwYXRobmFtZTogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHNlYXJjaDogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHN0YXRlOiBvYmplY3QsXG4gIGFjdGlvbjogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGtleTogc3RyaW5nXG59KTtcblxuZXhwb3J0cy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xudmFyIGNvbXBvbmVudCA9IG9uZU9mVHlwZShbZnVuYywgc3RyaW5nXSk7XG5leHBvcnRzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbnZhciBjb21wb25lbnRzID0gb25lT2ZUeXBlKFtjb21wb25lbnQsIG9iamVjdF0pO1xuZXhwb3J0cy5jb21wb25lbnRzID0gY29tcG9uZW50cztcbnZhciByb3V0ZSA9IG9uZU9mVHlwZShbb2JqZWN0LCBlbGVtZW50XSk7XG5leHBvcnRzLnJvdXRlID0gcm91dGU7XG52YXIgcm91dGVzID0gb25lT2ZUeXBlKFtyb3V0ZSwgYXJyYXlPZihyb3V0ZSldKTtcblxuZXhwb3J0cy5yb3V0ZXMgPSByb3V0ZXM7XG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIGZhbHN5OiBmYWxzeSxcbiAgaGlzdG9yeTogaGlzdG9yeSxcbiAgbG9jYXRpb246IGxvY2F0aW9uLFxuICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgcm91dGU6IHJvdXRlXG59OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX1JvdXRlVXRpbHMgPSByZXF1aXJlKCcuL1JvdXRlVXRpbHMnKTtcblxudmFyIF9QYXR0ZXJuVXRpbHMgPSByZXF1aXJlKCcuL1BhdHRlcm5VdGlscycpO1xuXG52YXIgX1Byb3BUeXBlcyA9IHJlcXVpcmUoJy4vUHJvcFR5cGVzJyk7XG5cbnZhciBfUmVhY3QkUHJvcFR5cGVzID0gX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcztcbnZhciBzdHJpbmcgPSBfUmVhY3QkUHJvcFR5cGVzLnN0cmluZztcbnZhciBvYmplY3QgPSBfUmVhY3QkUHJvcFR5cGVzLm9iamVjdDtcblxuLyoqXG4gKiBBIDxSZWRpcmVjdD4gaXMgdXNlZCB0byBkZWNsYXJlIGFub3RoZXIgVVJMIHBhdGggYSBjbGllbnQgc2hvdWxkXG4gKiBiZSBzZW50IHRvIHdoZW4gdGhleSByZXF1ZXN0IGEgZ2l2ZW4gVVJMLlxuICpcbiAqIFJlZGlyZWN0cyBhcmUgcGxhY2VkIGFsb25nc2lkZSByb3V0ZXMgaW4gdGhlIHJvdXRlIGNvbmZpZ3VyYXRpb25cbiAqIGFuZCBhcmUgdHJhdmVyc2VkIGluIHRoZSBzYW1lIG1hbm5lci5cbiAqL1xuXG52YXIgUmVkaXJlY3QgPSAoZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlZGlyZWN0LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWRpcmVjdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVkaXJlY3QpO1xuXG4gICAgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHNhbml0eSBjaGVjayAqL1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UsICc8UmVkaXJlY3Q+IGVsZW1lbnRzIGFyZSBmb3Igcm91dGVyIGNvbmZpZ3VyYXRpb24gb25seSBhbmQgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCcpIDogX2ludmFyaWFudDJbJ2RlZmF1bHQnXShmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgcmV0dXJuIFJlZGlyZWN0O1xufSkoX3JlYWN0LkNvbXBvbmVudCk7XG5cblJlZGlyZWN0LmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gIHZhciByb3V0ZSA9IF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudChlbGVtZW50KTtcblxuICBpZiAocm91dGUuZnJvbSkgcm91dGUucGF0aCA9IHJvdXRlLmZyb207XG5cbiAgcm91dGUub25FbnRlciA9IGZ1bmN0aW9uIChuZXh0U3RhdGUsIHJlcGxhY2VTdGF0ZSkge1xuICAgIHZhciBsb2NhdGlvbiA9IG5leHRTdGF0ZS5sb2NhdGlvbjtcbiAgICB2YXIgcGFyYW1zID0gbmV4dFN0YXRlLnBhcmFtcztcblxuICAgIHZhciBwYXRobmFtZSA9IHVuZGVmaW5lZDtcbiAgICBpZiAocm91dGUudG8uY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgIHBhdGhuYW1lID0gX1BhdHRlcm5VdGlscy5mb3JtYXRQYXR0ZXJuKHJvdXRlLnRvLCBwYXJhbXMpO1xuICAgIH0gZWxzZSBpZiAoIXJvdXRlLnRvKSB7XG4gICAgICBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcm91dGVJbmRleCA9IG5leHRTdGF0ZS5yb3V0ZXMuaW5kZXhPZihyb3V0ZSk7XG4gICAgICB2YXIgcGFyZW50UGF0dGVybiA9IFJlZGlyZWN0LmdldFJvdXRlUGF0dGVybihuZXh0U3RhdGUucm91dGVzLCByb3V0ZUluZGV4IC0gMSk7XG4gICAgICB2YXIgcGF0dGVybiA9IHBhcmVudFBhdHRlcm4ucmVwbGFjZSgvXFwvKiQvLCAnLycpICsgcm91dGUudG87XG4gICAgICBwYXRobmFtZSA9IF9QYXR0ZXJuVXRpbHMuZm9ybWF0UGF0dGVybihwYXR0ZXJuLCBwYXJhbXMpO1xuICAgIH1cblxuICAgIHJlcGxhY2VTdGF0ZShyb3V0ZS5zdGF0ZSB8fCBsb2NhdGlvbi5zdGF0ZSwgcGF0aG5hbWUsIHJvdXRlLnF1ZXJ5IHx8IGxvY2F0aW9uLnF1ZXJ5KTtcbiAgfTtcblxuICByZXR1cm4gcm91dGU7XG59O1xuXG5SZWRpcmVjdC5nZXRSb3V0ZVBhdHRlcm4gPSBmdW5jdGlvbiAocm91dGVzLCByb3V0ZUluZGV4KSB7XG4gIHZhciBwYXJlbnRQYXR0ZXJuID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IHJvdXRlSW5kZXg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJvdXRlID0gcm91dGVzW2ldO1xuICAgIHZhciBwYXR0ZXJuID0gcm91dGUucGF0aCB8fCAnJztcbiAgICBwYXJlbnRQYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC9cXC8qJC8sICcvJykgKyBwYXJlbnRQYXR0ZXJuO1xuXG4gICAgaWYgKHBhdHRlcm4uaW5kZXhPZignLycpID09PSAwKSBicmVhaztcbiAgfVxuXG4gIHJldHVybiAnLycgKyBwYXJlbnRQYXR0ZXJuO1xufTtcblxuUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICBwYXRoOiBzdHJpbmcsXG4gIGZyb206IHN0cmluZywgLy8gQWxpYXMgZm9yIHBhdGhcbiAgdG86IHN0cmluZy5pc1JlcXVpcmVkLFxuICBxdWVyeTogb2JqZWN0LFxuICBzdGF0ZTogb2JqZWN0LFxuICBvbkVudGVyOiBfUHJvcFR5cGVzLmZhbHN5LFxuICBjaGlsZHJlbjogX1Byb3BUeXBlcy5mYWxzeVxufTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gUmVkaXJlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9Sb3V0ZVV0aWxzID0gcmVxdWlyZSgnLi9Sb3V0ZVV0aWxzJyk7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZSgnLi9Qcm9wVHlwZXMnKTtcblxudmFyIF9SZWFjdCRQcm9wVHlwZXMgPSBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzO1xudmFyIHN0cmluZyA9IF9SZWFjdCRQcm9wVHlwZXMuc3RyaW5nO1xudmFyIGZ1bmMgPSBfUmVhY3QkUHJvcFR5cGVzLmZ1bmM7XG5cbi8qKlxuICogQSA8Um91dGU+IGlzIHVzZWQgdG8gZGVjbGFyZSB3aGljaCBjb21wb25lbnRzIGFyZSByZW5kZXJlZCB0byB0aGVcbiAqIHBhZ2Ugd2hlbiB0aGUgVVJMIG1hdGNoZXMgYSBnaXZlbiBwYXR0ZXJuLlxuICpcbiAqIFJvdXRlcyBhcmUgYXJyYW5nZWQgaW4gYSBuZXN0ZWQgdHJlZSBzdHJ1Y3R1cmUuIFdoZW4gYSBuZXcgVVJMIGlzXG4gKiByZXF1ZXN0ZWQsIHRoZSB0cmVlIGlzIHNlYXJjaGVkIGRlcHRoLWZpcnN0IHRvIGZpbmQgYSByb3V0ZSB3aG9zZVxuICogcGF0aCBtYXRjaGVzIHRoZSBVUkwuICBXaGVuIG9uZSBpcyBmb3VuZCwgYWxsIHJvdXRlcyBpbiB0aGUgdHJlZVxuICogdGhhdCBsZWFkIHRvIGl0IGFyZSBjb25zaWRlcmVkIFwiYWN0aXZlXCIgYW5kIHRoZWlyIGNvbXBvbmVudHMgYXJlXG4gKiByZW5kZXJlZCBpbnRvIHRoZSBET00sIG5lc3RlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyBpbiB0aGUgdHJlZS5cbiAqL1xuXG52YXIgUm91dGUgPSAoZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGUpO1xuXG4gICAgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHNhbml0eSBjaGVjayAqL1xuXG4gIFJvdXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UsICc8Um91dGU+IGVsZW1lbnRzIGFyZSBmb3Igcm91dGVyIGNvbmZpZ3VyYXRpb24gb25seSBhbmQgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCcpIDogX2ludmFyaWFudDJbJ2RlZmF1bHQnXShmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufSkoX3JlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudCA9IF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudDtcblxuUm91dGUucHJvcFR5cGVzID0ge1xuICBwYXRoOiBzdHJpbmcsXG4gIGNvbXBvbmVudDogX1Byb3BUeXBlcy5jb21wb25lbnQsXG4gIGNvbXBvbmVudHM6IF9Qcm9wVHlwZXMuY29tcG9uZW50cyxcbiAgZ2V0Q29tcG9uZW50OiBmdW5jLFxuICBnZXRDb21wb25lbnRzOiBmdW5jXG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBSb3V0ZTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBvYmplY3QgPSBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm9iamVjdDtcblxuLyoqXG4gKiBUaGUgUm91dGVDb250ZXh0IG1peGluIHByb3ZpZGVzIGEgY29udmVuaWVudCB3YXkgZm9yIHJvdXRlXG4gKiBjb21wb25lbnRzIHRvIHNldCB0aGUgcm91dGUgaW4gY29udGV4dC4gVGhpcyBpcyBuZWVkZWQgZm9yXG4gKiByb3V0ZXMgdGhhdCByZW5kZXIgZWxlbWVudHMgdGhhdCB3YW50IHRvIHVzZSB0aGUgTGlmZWN5Y2xlXG4gKiBtaXhpbiB0byBwcmV2ZW50IHRyYW5zaXRpb25zLlxuICovXG52YXIgUm91dGVDb250ZXh0ID0ge1xuXG4gIHByb3BUeXBlczoge1xuICAgIHJvdXRlOiBvYmplY3QuaXNSZXF1aXJlZFxuICB9LFxuXG4gIGNoaWxkQ29udGV4dFR5cGVzOiB7XG4gICAgcm91dGU6IG9iamVjdC5pc1JlcXVpcmVkXG4gIH0sXG5cbiAgZ2V0Q2hpbGRDb250ZXh0OiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlOiB0aGlzLnByb3BzLnJvdXRlXG4gICAgfTtcbiAgfVxuXG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBSb3V0ZUNvbnRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuaXNSZWFjdENoaWxkcmVuID0gaXNSZWFjdENoaWxkcmVuO1xuZXhwb3J0cy5jcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQgPSBjcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQ7XG5leHBvcnRzLmNyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbVJlYWN0Q2hpbGRyZW47XG5leHBvcnRzLmNyZWF0ZVJvdXRlcyA9IGNyZWF0ZVJvdXRlcztcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBpc1ZhbGlkQ2hpbGQob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBfcmVhY3QyWydkZWZhdWx0J10uaXNWYWxpZEVsZW1lbnQob2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gaXNSZWFjdENoaWxkcmVuKG9iamVjdCkge1xuICByZXR1cm4gaXNWYWxpZENoaWxkKG9iamVjdCkgfHwgQXJyYXkuaXNBcnJheShvYmplY3QpICYmIG9iamVjdC5ldmVyeShpc1ZhbGlkQ2hpbGQpO1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyhjb21wb25lbnROYW1lLCBwcm9wVHlwZXMsIHByb3BzKSB7XG4gIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8ICdVbmtub3duQ29tcG9uZW50JztcblxuICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICBpZiAocHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgdmFyIGVycm9yID0gcHJvcFR5cGVzW3Byb3BOYW1lXShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWY6IGVycm9yIGxvZ2dpbmcgKi9cbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsIGVycm9yLm1lc3NhZ2UpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZShkZWZhdWx0UHJvcHMsIHByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZGVmYXVsdFByb3BzLCBwcm9wcyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudChlbGVtZW50KSB7XG4gIHZhciB0eXBlID0gZWxlbWVudC50eXBlO1xuICB2YXIgcm91dGUgPSBjcmVhdGVSb3V0ZSh0eXBlLmRlZmF1bHRQcm9wcywgZWxlbWVudC5wcm9wcyk7XG5cbiAgaWYgKHR5cGUucHJvcFR5cGVzKSBjaGVja1Byb3BUeXBlcyh0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSwgdHlwZS5wcm9wVHlwZXMsIHJvdXRlKTtcblxuICBpZiAocm91dGUuY2hpbGRyZW4pIHtcbiAgICB2YXIgY2hpbGRSb3V0ZXMgPSBjcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbihyb3V0ZS5jaGlsZHJlbiwgcm91dGUpO1xuXG4gICAgaWYgKGNoaWxkUm91dGVzLmxlbmd0aCkgcm91dGUuY2hpbGRSb3V0ZXMgPSBjaGlsZFJvdXRlcztcblxuICAgIGRlbGV0ZSByb3V0ZS5jaGlsZHJlbjtcbiAgfVxuXG4gIHJldHVybiByb3V0ZTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgcm91dGVzIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBSZWFjdENoaWxkcmVuLiBKU1hcbiAqIHByb3ZpZGVzIGEgY29udmVuaWVudCB3YXkgdG8gdmlzdWFsaXplIGhvdyByb3V0ZXMgaW4gdGhlIGhpZXJhcmNoeSBhcmVcbiAqIG5lc3RlZC5cbiAqXG4gKiAgIGltcG9ydCB7IFJvdXRlLCBjcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbiB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbiAqICAgXG4gKiAgIGNvbnN0IHJvdXRlcyA9IGNyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuKFxuICogICAgIDxSb3V0ZSBjb21wb25lbnQ9e0FwcH0+XG4gKiAgICAgICA8Um91dGUgcGF0aD1cImhvbWVcIiBjb21wb25lbnQ9e0Rhc2hib2FyZH0vPlxuICogICAgICAgPFJvdXRlIHBhdGg9XCJuZXdzXCIgY29tcG9uZW50PXtOZXdzRmVlZH0vPlxuICogICAgIDwvUm91dGU+XG4gKiAgIClcbiAqXG4gKiBOb3RlOiBUaGlzIG1ldGhvZCBpcyBhdXRvbWF0aWNhbGx5IHVzZWQgd2hlbiB5b3UgcHJvdmlkZSA8Um91dGU+IGNoaWxkcmVuXG4gKiB0byBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbihjaGlsZHJlbiwgcGFyZW50Um91dGUpIHtcbiAgdmFyIHJvdXRlcyA9IFtdO1xuXG4gIF9yZWFjdDJbJ2RlZmF1bHQnXS5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIGlmIChfcmVhY3QyWydkZWZhdWx0J10uaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIC8vIENvbXBvbmVudCBjbGFzc2VzIG1heSBoYXZlIGEgc3RhdGljIGNyZWF0ZSogbWV0aG9kLlxuICAgICAgaWYgKGVsZW1lbnQudHlwZS5jcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHJvdXRlID0gZWxlbWVudC50eXBlLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudChlbGVtZW50LCBwYXJlbnRSb3V0ZSk7XG5cbiAgICAgICAgaWYgKHJvdXRlKSByb3V0ZXMucHVzaChyb3V0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb3V0ZXMucHVzaChjcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQoZWxlbWVudCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJvdXRlcztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHJvdXRlcyBmcm9tIHRoZSBnaXZlbiBvYmplY3Qgd2hpY2hcbiAqIG1heSBiZSBhIEpTWCByb3V0ZSwgYSBwbGFpbiBvYmplY3Qgcm91dGUsIG9yIGFuIGFycmF5IG9mIGVpdGhlci5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXMocm91dGVzKSB7XG4gIGlmIChpc1JlYWN0Q2hpbGRyZW4ocm91dGVzKSkge1xuICAgIHJvdXRlcyA9IGNyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuKHJvdXRlcyk7XG4gIH0gZWxzZSBpZiAocm91dGVzICYmICFBcnJheS5pc0FycmF5KHJvdXRlcykpIHtcbiAgICByb3V0ZXMgPSBbcm91dGVzXTtcbiAgfVxuXG4gIHJldHVybiByb3V0ZXM7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfaGlzdG9yeUxpYkNyZWF0ZUhhc2hIaXN0b3J5ID0gcmVxdWlyZSgnaGlzdG9yeS9saWIvY3JlYXRlSGFzaEhpc3RvcnknKTtcblxudmFyIF9oaXN0b3J5TGliQ3JlYXRlSGFzaEhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGlzdG9yeUxpYkNyZWF0ZUhhc2hIaXN0b3J5KTtcblxudmFyIF9Sb3V0ZVV0aWxzID0gcmVxdWlyZSgnLi9Sb3V0ZVV0aWxzJyk7XG5cbnZhciBfUm91dGluZ0NvbnRleHQgPSByZXF1aXJlKCcuL1JvdXRpbmdDb250ZXh0Jyk7XG5cbnZhciBfUm91dGluZ0NvbnRleHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGluZ0NvbnRleHQpO1xuXG52YXIgX3VzZVJvdXRlcyA9IHJlcXVpcmUoJy4vdXNlUm91dGVzJyk7XG5cbnZhciBfdXNlUm91dGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VzZVJvdXRlcyk7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZSgnLi9Qcm9wVHlwZXMnKTtcblxudmFyIF9SZWFjdCRQcm9wVHlwZXMgPSBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzO1xudmFyIGZ1bmMgPSBfUmVhY3QkUHJvcFR5cGVzLmZ1bmM7XG52YXIgb2JqZWN0ID0gX1JlYWN0JFByb3BUeXBlcy5vYmplY3Q7XG5cbi8qKlxuICogQSA8Um91dGVyPiBpcyBhIGhpZ2gtbGV2ZWwgQVBJIGZvciBhdXRvbWF0aWNhbGx5IHNldHRpbmcgdXBcbiAqIGEgcm91dGVyIHRoYXQgcmVuZGVycyBhIDxSb3V0aW5nQ29udGV4dD4gd2l0aCBhbGwgdGhlIHByb3BzXG4gKiBpdCBuZWVkcyBlYWNoIHRpbWUgdGhlIFVSTCBjaGFuZ2VzLlxuICovXG5cbnZhciBSb3V0ZXIgPSAoZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlcik7XG5cbiAgICBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBudWxsLFxuICAgICAgcm91dGVzOiBudWxsLFxuICAgICAgcGFyYW1zOiBudWxsLFxuICAgICAgY29tcG9uZW50czogbnVsbFxuICAgIH07XG4gIH1cblxuICBSb3V0ZXIucHJvdG90eXBlLmhhbmRsZUVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkVycm9yKSB7XG4gICAgICB0aGlzLnByb3BzLm9uRXJyb3IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRocm93IGVycm9ycyBieSBkZWZhdWx0IHNvIHdlIGRvbid0IHNpbGVudGx5IHN3YWxsb3cgdGhlbSFcbiAgICAgIHRocm93IGVycm9yOyAvLyBUaGlzIGVycm9yIHByb2JhYmx5IG9jY3VycmVkIGluIGdldENoaWxkUm91dGVzIG9yIGdldENvbXBvbmVudHMuXG4gICAgfVxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgaGlzdG9yeSA9IF9wcm9wcy5oaXN0b3J5O1xuICAgIHZhciBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgcm91dGVzID0gX3Byb3BzLnJvdXRlcztcbiAgICB2YXIgcGFyc2VRdWVyeVN0cmluZyA9IF9wcm9wcy5wYXJzZVF1ZXJ5U3RyaW5nO1xuICAgIHZhciBzdHJpbmdpZnlRdWVyeSA9IF9wcm9wcy5zdHJpbmdpZnlRdWVyeTtcblxuICAgIHZhciBjcmVhdGVIaXN0b3J5ID0gaGlzdG9yeSA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBoaXN0b3J5O1xuICAgIH0gOiBfaGlzdG9yeUxpYkNyZWF0ZUhhc2hIaXN0b3J5MlsnZGVmYXVsdCddO1xuXG4gICAgdGhpcy5oaXN0b3J5ID0gX3VzZVJvdXRlczJbJ2RlZmF1bHQnXShjcmVhdGVIaXN0b3J5KSh7XG4gICAgICByb3V0ZXM6IF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlcyhyb3V0ZXMgfHwgY2hpbGRyZW4pLFxuICAgICAgcGFyc2VRdWVyeVN0cmluZzogcGFyc2VRdWVyeVN0cmluZyxcbiAgICAgIHN0cmluZ2lmeVF1ZXJ5OiBzdHJpbmdpZnlRdWVyeVxuICAgIH0pO1xuXG4gICAgdGhpcy5fdW5saXN0ZW4gPSB0aGlzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChlcnJvciwgc3RhdGUpIHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBfdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZShzdGF0ZSwgX3RoaXMucHJvcHMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBzYW5pdHkgY2hlY2sgKi9cblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShuZXh0UHJvcHMuaGlzdG9yeSA9PT0gdGhpcy5wcm9wcy5oaXN0b3J5LCAnWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PjsgaXQgd2lsbCBiZSBpZ25vcmVkJykgOiB1bmRlZmluZWQ7XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10oKG5leHRQcm9wcy5yb3V0ZXMgfHwgbmV4dFByb3BzLmNoaWxkcmVuKSA9PT0gKHRoaXMucHJvcHMucm91dGVzIHx8IHRoaXMucHJvcHMuY2hpbGRyZW4pLCAnWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciByb3V0ZXM+OyBpdCB3aWxsIGJlIGlnbm9yZWQnKSA6IHVuZGVmaW5lZDtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuX3VubGlzdGVuKSB0aGlzLl91bmxpc3RlbigpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHZhciBsb2NhdGlvbiA9IF9zdGF0ZS5sb2NhdGlvbjtcbiAgICB2YXIgcm91dGVzID0gX3N0YXRlLnJvdXRlcztcbiAgICB2YXIgcGFyYW1zID0gX3N0YXRlLnBhcmFtcztcbiAgICB2YXIgY29tcG9uZW50cyA9IF9zdGF0ZS5jb21wb25lbnRzO1xuICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcztcbiAgICB2YXIgUm91dGluZ0NvbnRleHQgPSBfcHJvcHMyLlJvdXRpbmdDb250ZXh0O1xuICAgIHZhciBjcmVhdGVFbGVtZW50ID0gX3Byb3BzMi5jcmVhdGVFbGVtZW50O1xuXG4gICAgdmFyIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczIsIFsnUm91dGluZ0NvbnRleHQnLCAnY3JlYXRlRWxlbWVudCddKTtcblxuICAgIGlmIChsb2NhdGlvbiA9PSBudWxsKSByZXR1cm4gbnVsbDsgLy8gQXN5bmMgbWF0Y2hcblxuICAgIC8vIE9ubHkgZm9yd2FyZCBub24tUm91dGVyLXNwZWNpZmljIHByb3BzIHRvIHJvdXRpbmcgY29udGV4dCwgYXMgdGhvc2UgYXJlXG4gICAgLy8gdGhlIG9ubHkgb25lcyB0aGF0IG1pZ2h0IGJlIGN1c3RvbSByb3V0aW5nIGNvbnRleHQgcHJvcHMuXG4gICAgT2JqZWN0LmtleXMoUm91dGVyLnByb3BUeXBlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcFR5cGUpIHtcbiAgICAgIHJldHVybiBkZWxldGUgcHJvcHNbcHJvcFR5cGVdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFJvdXRpbmdDb250ZXh0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQsXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICByb3V0ZXM6IHJvdXRlcyxcbiAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgY29tcG9uZW50czogY29tcG9uZW50c1xuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufSkoX3JlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGhpc3Rvcnk6IG9iamVjdCxcbiAgY2hpbGRyZW46IF9Qcm9wVHlwZXMucm91dGVzLFxuICByb3V0ZXM6IF9Qcm9wVHlwZXMucm91dGVzLCAvLyBhbGlhcyBmb3IgY2hpbGRyZW5cbiAgUm91dGluZ0NvbnRleHQ6IGZ1bmMuaXNSZXF1aXJlZCxcbiAgY3JlYXRlRWxlbWVudDogZnVuYyxcbiAgb25FcnJvcjogZnVuYyxcbiAgb25VcGRhdGU6IGZ1bmMsXG4gIHBhcnNlUXVlcnlTdHJpbmc6IGZ1bmMsXG4gIHN0cmluZ2lmeVF1ZXJ5OiBmdW5jXG59O1xuXG5Sb3V0ZXIuZGVmYXVsdFByb3BzID0ge1xuICBSb3V0aW5nQ29udGV4dDogX1JvdXRpbmdDb250ZXh0MlsnZGVmYXVsdCddXG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBSb3V0ZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9Sb3V0ZVV0aWxzID0gcmVxdWlyZSgnLi9Sb3V0ZVV0aWxzJyk7XG5cbnZhciBfZ2V0Um91dGVQYXJhbXMgPSByZXF1aXJlKCcuL2dldFJvdXRlUGFyYW1zJyk7XG5cbnZhciBfZ2V0Um91dGVQYXJhbXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Um91dGVQYXJhbXMpO1xuXG52YXIgX1JlYWN0JFByb3BUeXBlcyA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXM7XG52YXIgYXJyYXkgPSBfUmVhY3QkUHJvcFR5cGVzLmFycmF5O1xudmFyIGZ1bmMgPSBfUmVhY3QkUHJvcFR5cGVzLmZ1bmM7XG52YXIgb2JqZWN0ID0gX1JlYWN0JFByb3BUeXBlcy5vYmplY3Q7XG5cbi8qKlxuICogQSA8Um91dGluZ0NvbnRleHQ+IHJlbmRlcnMgdGhlIGNvbXBvbmVudCB0cmVlIGZvciBhIGdpdmVuIHJvdXRlciBzdGF0ZVxuICogYW5kIHNldHMgdGhlIGhpc3Rvcnkgb2JqZWN0IGFuZCB0aGUgY3VycmVudCBsb2NhdGlvbiBpbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0aW5nQ29udGV4dCA9IChmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGluZ0NvbnRleHQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRpbmdDb250ZXh0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0aW5nQ29udGV4dCk7XG5cbiAgICBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBSb3V0aW5nQ29udGV4dC5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBoaXN0b3J5ID0gX3Byb3BzLmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gX3Byb3BzLmxvY2F0aW9uO1xuXG4gICAgcmV0dXJuIHsgaGlzdG9yeTogaGlzdG9yeSwgbG9jYXRpb246IGxvY2F0aW9uIH07XG4gIH07XG5cbiAgUm91dGluZ0NvbnRleHQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIHtcbiAgICByZXR1cm4gY29tcG9uZW50ID09IG51bGwgPyBudWxsIDogdGhpcy5wcm9wcy5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9O1xuXG4gIFJvdXRpbmdDb250ZXh0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcztcbiAgICB2YXIgaGlzdG9yeSA9IF9wcm9wczIuaGlzdG9yeTtcbiAgICB2YXIgbG9jYXRpb24gPSBfcHJvcHMyLmxvY2F0aW9uO1xuICAgIHZhciByb3V0ZXMgPSBfcHJvcHMyLnJvdXRlcztcbiAgICB2YXIgcGFyYW1zID0gX3Byb3BzMi5wYXJhbXM7XG4gICAgdmFyIGNvbXBvbmVudHMgPSBfcHJvcHMyLmNvbXBvbmVudHM7XG5cbiAgICB2YXIgZWxlbWVudCA9IG51bGw7XG5cbiAgICBpZiAoY29tcG9uZW50cykge1xuICAgICAgZWxlbWVudCA9IGNvbXBvbmVudHMucmVkdWNlUmlnaHQoZnVuY3Rpb24gKGVsZW1lbnQsIGNvbXBvbmVudHMsIGluZGV4KSB7XG4gICAgICAgIGlmIChjb21wb25lbnRzID09IG51bGwpIHJldHVybiBlbGVtZW50OyAvLyBEb24ndCBjcmVhdGUgbmV3IGNoaWxkcmVuOyB1c2UgdGhlIGdyYW5kY2hpbGRyZW4uXG5cbiAgICAgICAgdmFyIHJvdXRlID0gcm91dGVzW2luZGV4XTtcbiAgICAgICAgdmFyIHJvdXRlUGFyYW1zID0gX2dldFJvdXRlUGFyYW1zMlsnZGVmYXVsdCddKHJvdXRlLCBwYXJhbXMpO1xuICAgICAgICB2YXIgcHJvcHMgPSB7XG4gICAgICAgICAgaGlzdG9yeTogaGlzdG9yeSxcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgcm91dGU6IHJvdXRlLFxuICAgICAgICAgIHJvdXRlUGFyYW1zOiByb3V0ZVBhcmFtcyxcbiAgICAgICAgICByb3V0ZXM6IHJvdXRlc1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChfUm91dGVVdGlscy5pc1JlYWN0Q2hpbGRyZW4oZWxlbWVudCkpIHtcbiAgICAgICAgICBwcm9wcy5jaGlsZHJlbiA9IGVsZW1lbnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudCkge1xuICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzT3duUHJvcGVydHkocHJvcCkpIHByb3BzW3Byb3BdID0gZWxlbWVudFtwcm9wXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdmFyIGVsZW1lbnRzID0ge307XG5cbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gY29tcG9uZW50cykge1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAvLyBQYXNzIHRocm91Z2ggdGhlIGtleSBhcyBhIHByb3AgdG8gY3JlYXRlRWxlbWVudCB0byBhbGxvd1xuICAgICAgICAgICAgICAvLyBjdXN0b20gY3JlYXRlRWxlbWVudCBmdW5jdGlvbnMgdG8ga25vdyB3aGljaCBuYW1lZCBjb21wb25lbnRcbiAgICAgICAgICAgICAgLy8gdGhleSdyZSByZW5kZXJpbmcsIGZvciBlLmcuIG1hdGNoaW5nIHVwIHRvIGZldGNoZWQgZGF0YS5cbiAgICAgICAgICAgICAgZWxlbWVudHNba2V5XSA9IF90aGlzLmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50c1trZXldLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgICAgICAga2V5OiBrZXkgfSwgcHJvcHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3RoaXMuY3JlYXRlRWxlbWVudChjb21wb25lbnRzLCBwcm9wcyk7XG4gICAgICB9LCBlbGVtZW50KTtcbiAgICB9XG5cbiAgICAhKGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gZmFsc2UgfHwgX3JlYWN0MlsnZGVmYXVsdCddLmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnVGhlIHJvb3Qgcm91dGUgbXVzdCByZW5kZXIgYSBzaW5nbGUgZWxlbWVudCcpIDogX2ludmFyaWFudDJbJ2RlZmF1bHQnXShmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfTtcblxuICByZXR1cm4gUm91dGluZ0NvbnRleHQ7XG59KShfcmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGluZ0NvbnRleHQucHJvcFR5cGVzID0ge1xuICBoaXN0b3J5OiBvYmplY3QuaXNSZXF1aXJlZCxcbiAgY3JlYXRlRWxlbWVudDogZnVuYy5pc1JlcXVpcmVkLFxuICBsb2NhdGlvbjogb2JqZWN0LmlzUmVxdWlyZWQsXG4gIHJvdXRlczogYXJyYXkuaXNSZXF1aXJlZCxcbiAgcGFyYW1zOiBvYmplY3QuaXNSZXF1aXJlZCxcbiAgY29tcG9uZW50czogYXJyYXkuaXNSZXF1aXJlZFxufTtcblxuUm91dGluZ0NvbnRleHQuZGVmYXVsdFByb3BzID0ge1xuICBjcmVhdGVFbGVtZW50OiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudFxufTtcblxuUm91dGluZ0NvbnRleHQuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIGhpc3Rvcnk6IG9iamVjdC5pc1JlcXVpcmVkLFxuICBsb2NhdGlvbjogb2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFJvdXRpbmdDb250ZXh0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5ydW5FbnRlckhvb2tzID0gcnVuRW50ZXJIb29rcztcbmV4cG9ydHMucnVuTGVhdmVIb29rcyA9IHJ1bkxlYXZlSG9va3M7XG5cbnZhciBfQXN5bmNVdGlscyA9IHJlcXVpcmUoJy4vQXN5bmNVdGlscycpO1xuXG5mdW5jdGlvbiBjcmVhdGVFbnRlckhvb2soaG9vaywgcm91dGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjYWxsYmFjaykge1xuICAgIGhvb2suYXBwbHkocm91dGUsIGFyZ3VtZW50cyk7XG5cbiAgICBpZiAoaG9vay5sZW5ndGggPCAzKSB7XG4gICAgICAvLyBBc3N1bWUgaG9vayBleGVjdXRlcyBzeW5jaHJvbm91c2x5IGFuZFxuICAgICAgLy8gYXV0b21hdGljYWxseSBjYWxsIHRoZSBjYWxsYmFjay5cbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRFbnRlckhvb2tzKHJvdXRlcykge1xuICByZXR1cm4gcm91dGVzLnJlZHVjZShmdW5jdGlvbiAoaG9va3MsIHJvdXRlKSB7XG4gICAgaWYgKHJvdXRlLm9uRW50ZXIpIGhvb2tzLnB1c2goY3JlYXRlRW50ZXJIb29rKHJvdXRlLm9uRW50ZXIsIHJvdXRlKSk7XG5cbiAgICByZXR1cm4gaG9va3M7XG4gIH0sIFtdKTtcbn1cblxuLyoqXG4gKiBSdW5zIGFsbCBvbkVudGVyIGhvb2tzIGluIHRoZSBnaXZlbiBhcnJheSBvZiByb3V0ZXMgaW4gb3JkZXJcbiAqIHdpdGggb25FbnRlcihuZXh0U3RhdGUsIHJlcGxhY2VTdGF0ZSwgY2FsbGJhY2spIGFuZCBjYWxsc1xuICogY2FsbGJhY2soZXJyb3IsIHJlZGlyZWN0SW5mbykgd2hlbiBmaW5pc2hlZC4gVGhlIGZpcnN0IGhvb2tcbiAqIHRvIHVzZSByZXBsYWNlU3RhdGUgc2hvcnQtY2lyY3VpdHMgdGhlIGxvb3AuXG4gKlxuICogSWYgYSBob29rIG5lZWRzIHRvIHJ1biBhc3luY2hyb25vdXNseSwgaXQgbWF5IHVzZSB0aGUgY2FsbGJhY2tcbiAqIGZ1bmN0aW9uLiBIb3dldmVyLCBkb2luZyBzbyB3aWxsIGNhdXNlIHRoZSB0cmFuc2l0aW9uIHRvIHBhdXNlLFxuICogd2hpY2ggY291bGQgbGVhZCB0byBhIG5vbi1yZXNwb25zaXZlIFVJIGlmIHRoZSBob29rIGlzIHNsb3cuXG4gKi9cblxuZnVuY3Rpb24gcnVuRW50ZXJIb29rcyhyb3V0ZXMsIG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgdmFyIGhvb2tzID0gZ2V0RW50ZXJIb29rcyhyb3V0ZXMpO1xuXG4gIGlmICghaG9va3MubGVuZ3RoKSB7XG4gICAgY2FsbGJhY2soKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcmVkaXJlY3RJbmZvID0gdW5kZWZpbmVkO1xuICBmdW5jdGlvbiByZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGhuYW1lLCBxdWVyeSkge1xuICAgIHJlZGlyZWN0SW5mbyA9IHsgcGF0aG5hbWU6IHBhdGhuYW1lLCBxdWVyeTogcXVlcnksIHN0YXRlOiBzdGF0ZSB9O1xuICB9XG5cbiAgX0FzeW5jVXRpbHMubG9vcEFzeW5jKGhvb2tzLmxlbmd0aCwgZnVuY3Rpb24gKGluZGV4LCBuZXh0LCBkb25lKSB7XG4gICAgaG9va3NbaW5kZXhdKG5leHRTdGF0ZSwgcmVwbGFjZVN0YXRlLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciB8fCByZWRpcmVjdEluZm8pIHtcbiAgICAgICAgZG9uZShlcnJvciwgcmVkaXJlY3RJbmZvKTsgLy8gTm8gbmVlZCB0byBjb250aW51ZS5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gIH0sIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBSdW5zIGFsbCBvbkxlYXZlIGhvb2tzIGluIHRoZSBnaXZlbiBhcnJheSBvZiByb3V0ZXMgaW4gb3JkZXIuXG4gKi9cblxuZnVuY3Rpb24gcnVuTGVhdmVIb29rcyhyb3V0ZXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJvdXRlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChyb3V0ZXNbaV0ub25MZWF2ZSkgcm91dGVzW2ldLm9uTGVhdmUuY2FsbChyb3V0ZXNbaV0pO1xuICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX1BhdHRlcm5VdGlscyA9IHJlcXVpcmUoJy4vUGF0dGVyblV0aWxzJyk7XG5cbmZ1bmN0aW9uIHJvdXRlUGFyYW1zQ2hhbmdlZChyb3V0ZSwgcHJldlN0YXRlLCBuZXh0U3RhdGUpIHtcbiAgaWYgKCFyb3V0ZS5wYXRoKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIHBhcmFtTmFtZXMgPSBfUGF0dGVyblV0aWxzLmdldFBhcmFtTmFtZXMocm91dGUucGF0aCk7XG5cbiAgcmV0dXJuIHBhcmFtTmFtZXMuc29tZShmdW5jdGlvbiAocGFyYW1OYW1lKSB7XG4gICAgcmV0dXJuIHByZXZTdGF0ZS5wYXJhbXNbcGFyYW1OYW1lXSAhPT0gbmV4dFN0YXRlLnBhcmFtc1twYXJhbU5hbWVdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiB7IGxlYXZlUm91dGVzLCBlbnRlclJvdXRlcyB9IGRldGVybWluZWQgYnlcbiAqIHRoZSBjaGFuZ2UgZnJvbSBwcmV2U3RhdGUgdG8gbmV4dFN0YXRlLiBXZSBsZWF2ZSByb3V0ZXMgaWYgZWl0aGVyXG4gKiAxKSB0aGV5IGFyZSBub3QgaW4gdGhlIG5leHQgc3RhdGUgb3IgMikgdGhleSBhcmUgaW4gdGhlIG5leHQgc3RhdGVcbiAqIGJ1dCB0aGVpciBwYXJhbXMgaGF2ZSBjaGFuZ2VkIChpLmUuIC91c2Vycy8xMjMgPT4gL3VzZXJzLzQ1NikuXG4gKlxuICogbGVhdmVSb3V0ZXMgYXJlIG9yZGVyZWQgc3RhcnRpbmcgYXQgdGhlIGxlYWYgcm91dGUgb2YgdGhlIHRyZWVcbiAqIHdlJ3JlIGxlYXZpbmcgdXAgdG8gdGhlIGNvbW1vbiBwYXJlbnQgcm91dGUuIGVudGVyUm91dGVzIGFyZSBvcmRlcmVkXG4gKiBmcm9tIHRoZSB0b3Agb2YgdGhlIHRyZWUgd2UncmUgZW50ZXJpbmcgZG93biB0byB0aGUgbGVhZiByb3V0ZS5cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUNoYW5nZWRSb3V0ZXMocHJldlN0YXRlLCBuZXh0U3RhdGUpIHtcbiAgdmFyIHByZXZSb3V0ZXMgPSBwcmV2U3RhdGUgJiYgcHJldlN0YXRlLnJvdXRlcztcbiAgdmFyIG5leHRSb3V0ZXMgPSBuZXh0U3RhdGUucm91dGVzO1xuXG4gIHZhciBsZWF2ZVJvdXRlcyA9IHVuZGVmaW5lZCxcbiAgICAgIGVudGVyUm91dGVzID0gdW5kZWZpbmVkO1xuICBpZiAocHJldlJvdXRlcykge1xuICAgIGxlYXZlUm91dGVzID0gcHJldlJvdXRlcy5maWx0ZXIoZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICByZXR1cm4gbmV4dFJvdXRlcy5pbmRleE9mKHJvdXRlKSA9PT0gLTEgfHwgcm91dGVQYXJhbXNDaGFuZ2VkKHJvdXRlLCBwcmV2U3RhdGUsIG5leHRTdGF0ZSk7XG4gICAgfSk7XG5cbiAgICAvLyBvbkxlYXZlIGhvb2tzIHN0YXJ0IGF0IHRoZSBsZWFmIHJvdXRlLlxuICAgIGxlYXZlUm91dGVzLnJldmVyc2UoKTtcblxuICAgIGVudGVyUm91dGVzID0gbmV4dFJvdXRlcy5maWx0ZXIoZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICByZXR1cm4gcHJldlJvdXRlcy5pbmRleE9mKHJvdXRlKSA9PT0gLTEgfHwgbGVhdmVSb3V0ZXMuaW5kZXhPZihyb3V0ZSkgIT09IC0xO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGxlYXZlUm91dGVzID0gW107XG4gICAgZW50ZXJSb3V0ZXMgPSBuZXh0Um91dGVzO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsZWF2ZVJvdXRlczogbGVhdmVSb3V0ZXMsXG4gICAgZW50ZXJSb3V0ZXM6IGVudGVyUm91dGVzXG4gIH07XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNvbXB1dGVDaGFuZ2VkUm91dGVzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX0FzeW5jVXRpbHMgPSByZXF1aXJlKCcuL0FzeW5jVXRpbHMnKTtcblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50c0ZvclJvdXRlKGxvY2F0aW9uLCByb3V0ZSwgY2FsbGJhY2spIHtcbiAgaWYgKHJvdXRlLmNvbXBvbmVudCB8fCByb3V0ZS5jb21wb25lbnRzKSB7XG4gICAgY2FsbGJhY2sobnVsbCwgcm91dGUuY29tcG9uZW50IHx8IHJvdXRlLmNvbXBvbmVudHMpO1xuICB9IGVsc2UgaWYgKHJvdXRlLmdldENvbXBvbmVudCkge1xuICAgIHJvdXRlLmdldENvbXBvbmVudChsb2NhdGlvbiwgY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKHJvdXRlLmdldENvbXBvbmVudHMpIHtcbiAgICByb3V0ZS5nZXRDb21wb25lbnRzKGxvY2F0aW9uLCBjYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxufVxuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IGZldGNoZXMgYWxsIGNvbXBvbmVudHMgbmVlZGVkIGZvciB0aGUgZ2l2ZW4gcm91dGVyXG4gKiBzdGF0ZSBhbmQgY2FsbHMgY2FsbGJhY2soZXJyb3IsIGNvbXBvbmVudHMpIHdoZW4gZmluaXNoZWQuXG4gKlxuICogTm90ZTogVGhpcyBvcGVyYXRpb24gbWF5IGZpbmlzaCBzeW5jaHJvbm91c2x5IGlmIG5vIHJvdXRlcyBoYXZlIGFuXG4gKiBhc3luY2hyb25vdXMgZ2V0Q29tcG9uZW50cyBtZXRob2QuXG4gKi9cbmZ1bmN0aW9uIGdldENvbXBvbmVudHMobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICBfQXN5bmNVdGlscy5tYXBBc3luYyhuZXh0U3RhdGUucm91dGVzLCBmdW5jdGlvbiAocm91dGUsIGluZGV4LCBjYWxsYmFjaykge1xuICAgIGdldENvbXBvbmVudHNGb3JSb3V0ZShuZXh0U3RhdGUubG9jYXRpb24sIHJvdXRlLCBjYWxsYmFjayk7XG4gIH0sIGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gZ2V0Q29tcG9uZW50cztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9QYXR0ZXJuVXRpbHMgPSByZXF1aXJlKCcuL1BhdHRlcm5VdGlscycpO1xuXG4vKipcbiAqIEV4dHJhY3RzIGFuIG9iamVjdCBvZiBwYXJhbXMgdGhlIGdpdmVuIHJvdXRlIGNhcmVzIGFib3V0IGZyb21cbiAqIHRoZSBnaXZlbiBwYXJhbXMgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBnZXRSb3V0ZVBhcmFtcyhyb3V0ZSwgcGFyYW1zKSB7XG4gIHZhciByb3V0ZVBhcmFtcyA9IHt9O1xuXG4gIGlmICghcm91dGUucGF0aCkgcmV0dXJuIHJvdXRlUGFyYW1zO1xuXG4gIHZhciBwYXJhbU5hbWVzID0gX1BhdHRlcm5VdGlscy5nZXRQYXJhbU5hbWVzKHJvdXRlLnBhdGgpO1xuXG4gIGZvciAodmFyIHAgaW4gcGFyYW1zKSB7XG4gICAgaWYgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShwKSAmJiBwYXJhbU5hbWVzLmluZGV4T2YocCkgIT09IC0xKSByb3V0ZVBhcmFtc1twXSA9IHBhcmFtc1twXTtcbiAgfXJldHVybiByb3V0ZVBhcmFtcztcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gZ2V0Um91dGVQYXJhbXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvKiBjb21wb25lbnRzICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9Sb3V0ZXIyID0gcmVxdWlyZSgnLi9Sb3V0ZXInKTtcblxudmFyIF9Sb3V0ZXIzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGVyMik7XG5cbmV4cG9ydHMuUm91dGVyID0gX1JvdXRlcjNbJ2RlZmF1bHQnXTtcblxudmFyIF9MaW5rMiA9IHJlcXVpcmUoJy4vTGluaycpO1xuXG52YXIgX0xpbmszID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGluazIpO1xuXG5leHBvcnRzLkxpbmsgPSBfTGluazNbJ2RlZmF1bHQnXTtcblxudmFyIF9JbmRleExpbmsyID0gcmVxdWlyZSgnLi9JbmRleExpbmsnKTtcblxudmFyIF9JbmRleExpbmszID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW5kZXhMaW5rMik7XG5cbmV4cG9ydHMuSW5kZXhMaW5rID0gX0luZGV4TGluazNbJ2RlZmF1bHQnXTtcblxuLyogY29tcG9uZW50cyAoY29uZmlndXJhdGlvbikgKi9cblxudmFyIF9JbmRleFJlZGlyZWN0MiA9IHJlcXVpcmUoJy4vSW5kZXhSZWRpcmVjdCcpO1xuXG52YXIgX0luZGV4UmVkaXJlY3QzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW5kZXhSZWRpcmVjdDIpO1xuXG5leHBvcnRzLkluZGV4UmVkaXJlY3QgPSBfSW5kZXhSZWRpcmVjdDNbJ2RlZmF1bHQnXTtcblxudmFyIF9JbmRleFJvdXRlMiA9IHJlcXVpcmUoJy4vSW5kZXhSb3V0ZScpO1xuXG52YXIgX0luZGV4Um91dGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW5kZXhSb3V0ZTIpO1xuXG5leHBvcnRzLkluZGV4Um91dGUgPSBfSW5kZXhSb3V0ZTNbJ2RlZmF1bHQnXTtcblxudmFyIF9SZWRpcmVjdDIgPSByZXF1aXJlKCcuL1JlZGlyZWN0Jyk7XG5cbnZhciBfUmVkaXJlY3QzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVkaXJlY3QyKTtcblxuZXhwb3J0cy5SZWRpcmVjdCA9IF9SZWRpcmVjdDNbJ2RlZmF1bHQnXTtcblxudmFyIF9Sb3V0ZTIgPSByZXF1aXJlKCcuL1JvdXRlJyk7XG5cbnZhciBfUm91dGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGUyKTtcblxuZXhwb3J0cy5Sb3V0ZSA9IF9Sb3V0ZTNbJ2RlZmF1bHQnXTtcblxuLyogbWl4aW5zICovXG5cbnZhciBfSGlzdG9yeTIgPSByZXF1aXJlKCcuL0hpc3RvcnknKTtcblxudmFyIF9IaXN0b3J5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0hpc3RvcnkyKTtcblxuZXhwb3J0cy5IaXN0b3J5ID0gX0hpc3RvcnkzWydkZWZhdWx0J107XG5cbnZhciBfTGlmZWN5Y2xlMiA9IHJlcXVpcmUoJy4vTGlmZWN5Y2xlJyk7XG5cbnZhciBfTGlmZWN5Y2xlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xpZmVjeWNsZTIpO1xuXG5leHBvcnRzLkxpZmVjeWNsZSA9IF9MaWZlY3ljbGUzWydkZWZhdWx0J107XG5cbnZhciBfUm91dGVDb250ZXh0MiA9IHJlcXVpcmUoJy4vUm91dGVDb250ZXh0Jyk7XG5cbnZhciBfUm91dGVDb250ZXh0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdXRlQ29udGV4dDIpO1xuXG5leHBvcnRzLlJvdXRlQ29udGV4dCA9IF9Sb3V0ZUNvbnRleHQzWydkZWZhdWx0J107XG5cbi8qIHV0aWxzICovXG5cbnZhciBfdXNlUm91dGVzMiA9IHJlcXVpcmUoJy4vdXNlUm91dGVzJyk7XG5cbnZhciBfdXNlUm91dGVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VzZVJvdXRlczIpO1xuXG5leHBvcnRzLnVzZVJvdXRlcyA9IF91c2VSb3V0ZXMzWydkZWZhdWx0J107XG5cbnZhciBfUm91dGVVdGlscyA9IHJlcXVpcmUoJy4vUm91dGVVdGlscycpO1xuXG5leHBvcnRzLmNyZWF0ZVJvdXRlcyA9IF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlcztcblxudmFyIF9Sb3V0aW5nQ29udGV4dDIgPSByZXF1aXJlKCcuL1JvdXRpbmdDb250ZXh0Jyk7XG5cbnZhciBfUm91dGluZ0NvbnRleHQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGluZ0NvbnRleHQyKTtcblxuZXhwb3J0cy5Sb3V0aW5nQ29udGV4dCA9IF9Sb3V0aW5nQ29udGV4dDNbJ2RlZmF1bHQnXTtcblxudmFyIF9Qcm9wVHlwZXMyID0gcmVxdWlyZSgnLi9Qcm9wVHlwZXMnKTtcblxudmFyIF9Qcm9wVHlwZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHJvcFR5cGVzMik7XG5cbmV4cG9ydHMuUHJvcFR5cGVzID0gX1Byb3BUeXBlczNbJ2RlZmF1bHQnXTtcblxudmFyIF9tYXRjaDIgPSByZXF1aXJlKCcuL21hdGNoJyk7XG5cbnZhciBfbWF0Y2gzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWF0Y2gyKTtcblxuZXhwb3J0cy5tYXRjaCA9IF9tYXRjaDNbJ2RlZmF1bHQnXTtcblxudmFyIF9Sb3V0ZXI0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGVyMik7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IF9Sb3V0ZXI0WydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX1BhdHRlcm5VdGlscyA9IHJlcXVpcmUoJy4vUGF0dGVyblV0aWxzJyk7XG5cbmZ1bmN0aW9uIGRlZXBFcXVhbChhLCBiKSB7XG4gIGlmIChhID09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiBkZWVwRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAodmFyIHAgaW4gYSkge1xuICAgICAgaWYgKCFhLmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYVtwXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChiW3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWIuaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICghZGVlcEVxdWFsKGFbcF0sIGJbcF0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcbn1cblxuZnVuY3Rpb24gcGFyYW1zQXJlQWN0aXZlKHBhcmFtTmFtZXMsIHBhcmFtVmFsdWVzLCBhY3RpdmVQYXJhbXMpIHtcbiAgLy8gRklYTUU6IFRoaXMgZG9lc24ndCB3b3JrIG9uIHJlcGVhdGVkIHBhcmFtcyBpbiBhY3RpdmVQYXJhbXMuXG4gIHJldHVybiBwYXJhbU5hbWVzLmV2ZXJ5KGZ1bmN0aW9uIChwYXJhbU5hbWUsIGluZGV4KSB7XG4gICAgcmV0dXJuIFN0cmluZyhwYXJhbVZhbHVlc1tpbmRleF0pID09PSBTdHJpbmcoYWN0aXZlUGFyYW1zW3BhcmFtTmFtZV0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TWF0Y2hpbmdSb3V0ZUluZGV4KHBhdGhuYW1lLCBhY3RpdmVSb3V0ZXMsIGFjdGl2ZVBhcmFtcykge1xuICB2YXIgcmVtYWluaW5nUGF0aG5hbWUgPSBwYXRobmFtZSxcbiAgICAgIHBhcmFtTmFtZXMgPSBbXSxcbiAgICAgIHBhcmFtVmFsdWVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFjdGl2ZVJvdXRlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciByb3V0ZSA9IGFjdGl2ZVJvdXRlc1tpXTtcbiAgICB2YXIgcGF0dGVybiA9IHJvdXRlLnBhdGggfHwgJyc7XG5cbiAgICBpZiAocGF0dGVybi5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgcmVtYWluaW5nUGF0aG5hbWUgPSBwYXRobmFtZTtcbiAgICAgIHBhcmFtTmFtZXMgPSBbXTtcbiAgICAgIHBhcmFtVmFsdWVzID0gW107XG4gICAgfVxuXG4gICAgaWYgKHJlbWFpbmluZ1BhdGhuYW1lICE9PSBudWxsKSB7XG4gICAgICB2YXIgbWF0Y2hlZCA9IF9QYXR0ZXJuVXRpbHMubWF0Y2hQYXR0ZXJuKHBhdHRlcm4sIHJlbWFpbmluZ1BhdGhuYW1lKTtcbiAgICAgIHJlbWFpbmluZ1BhdGhuYW1lID0gbWF0Y2hlZC5yZW1haW5pbmdQYXRobmFtZTtcbiAgICAgIHBhcmFtTmFtZXMgPSBbXS5jb25jYXQocGFyYW1OYW1lcywgbWF0Y2hlZC5wYXJhbU5hbWVzKTtcbiAgICAgIHBhcmFtVmFsdWVzID0gW10uY29uY2F0KHBhcmFtVmFsdWVzLCBtYXRjaGVkLnBhcmFtVmFsdWVzKTtcbiAgICB9XG5cbiAgICBpZiAocmVtYWluaW5nUGF0aG5hbWUgPT09ICcnICYmIHJvdXRlLnBhdGggJiYgcGFyYW1zQXJlQWN0aXZlKHBhcmFtTmFtZXMsIHBhcmFtVmFsdWVzLCBhY3RpdmVQYXJhbXMpKSByZXR1cm4gaTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gcGF0aG5hbWUgbWF0Y2hlcyB0aGUgYWN0aXZlIHJvdXRlc1xuICogYW5kIHBhcmFtcy5cbiAqL1xuZnVuY3Rpb24gcm91dGVJc0FjdGl2ZShwYXRobmFtZSwgcm91dGVzLCBwYXJhbXMsIGluZGV4T25seSkge1xuICB2YXIgaSA9IGdldE1hdGNoaW5nUm91dGVJbmRleChwYXRobmFtZSwgcm91dGVzLCBwYXJhbXMpO1xuXG4gIGlmIChpID09PSBudWxsKSB7XG4gICAgLy8gTm8gbWF0Y2guXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKCFpbmRleE9ubHkpIHtcbiAgICAvLyBBbnkgbWF0Y2ggaXMgZ29vZCBlbm91Z2guXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBJZiBhbnkgcmVtYWluaW5nIHJvdXRlcyBwYXN0IHRoZSBtYXRjaCBpbmRleCBoYXZlIHBhdGhzLCB0aGVuIHdlIGNhbid0XG4gIC8vIGJlIG9uIHRoZSBpbmRleCByb3V0ZS5cbiAgcmV0dXJuIHJvdXRlcy5zbGljZShpICsgMSkuZXZlcnkoZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgcmV0dXJuICFyb3V0ZS5wYXRoO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYWxsIGtleS92YWx1ZSBwYWlycyBpbiB0aGUgZ2l2ZW4gcXVlcnkgYXJlXG4gKiBjdXJyZW50bHkgYWN0aXZlLlxuICovXG5mdW5jdGlvbiBxdWVyeUlzQWN0aXZlKHF1ZXJ5LCBhY3RpdmVRdWVyeSkge1xuICBpZiAoYWN0aXZlUXVlcnkgPT0gbnVsbCkgcmV0dXJuIHF1ZXJ5ID09IG51bGw7XG5cbiAgaWYgKHF1ZXJ5ID09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiBkZWVwRXF1YWwocXVlcnksIGFjdGl2ZVF1ZXJ5KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSA8TGluaz4gdG8gdGhlIGdpdmVuIHBhdGhuYW1lL3F1ZXJ5IGNvbWJpbmF0aW9uIGlzXG4gKiBjdXJyZW50bHkgYWN0aXZlLlxuICovXG5mdW5jdGlvbiBpc0FjdGl2ZShwYXRobmFtZSwgcXVlcnksIGluZGV4T25seSwgbG9jYXRpb24sIHJvdXRlcywgcGFyYW1zKSB7XG4gIGlmIChsb2NhdGlvbiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKCFyb3V0ZUlzQWN0aXZlKHBhdGhuYW1lLCByb3V0ZXMsIHBhcmFtcywgaW5kZXhPbmx5KSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBxdWVyeUlzQWN0aXZlKHF1ZXJ5LCBsb2NhdGlvbi5xdWVyeSk7XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGlzQWN0aXZlO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfaGlzdG9yeUxpYkNyZWF0ZU1lbW9yeUhpc3RvcnkgPSByZXF1aXJlKCdoaXN0b3J5L2xpYi9jcmVhdGVNZW1vcnlIaXN0b3J5Jyk7XG5cbnZhciBfaGlzdG9yeUxpYkNyZWF0ZU1lbW9yeUhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGlzdG9yeUxpYkNyZWF0ZU1lbW9yeUhpc3RvcnkpO1xuXG52YXIgX2hpc3RvcnlMaWJVc2VCYXNlbmFtZSA9IHJlcXVpcmUoJ2hpc3RvcnkvbGliL3VzZUJhc2VuYW1lJyk7XG5cbnZhciBfaGlzdG9yeUxpYlVzZUJhc2VuYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hpc3RvcnlMaWJVc2VCYXNlbmFtZSk7XG5cbnZhciBfUm91dGVVdGlscyA9IHJlcXVpcmUoJy4vUm91dGVVdGlscycpO1xuXG52YXIgX3VzZVJvdXRlcyA9IHJlcXVpcmUoJy4vdXNlUm91dGVzJyk7XG5cbnZhciBfdXNlUm91dGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VzZVJvdXRlcyk7XG5cbnZhciBjcmVhdGVIaXN0b3J5ID0gX3VzZVJvdXRlczJbJ2RlZmF1bHQnXShfaGlzdG9yeUxpYlVzZUJhc2VuYW1lMlsnZGVmYXVsdCddKF9oaXN0b3J5TGliQ3JlYXRlTWVtb3J5SGlzdG9yeTJbJ2RlZmF1bHQnXSkpO1xuXG4vKipcbiAqIEEgaGlnaC1sZXZlbCBBUEkgdG8gYmUgdXNlZCBmb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gbWF0Y2hlcyBhIGxvY2F0aW9uIHRvIGEgc2V0IG9mIHJvdXRlcyBhbmQgY2FsbHNcbiAqIGNhbGxiYWNrKGVycm9yLCByZWRpcmVjdExvY2F0aW9uLCByZW5kZXJQcm9wcykgd2hlbiBmaW5pc2hlZC5cbiAqXG4gKiBOb3RlOiBZb3UgcHJvYmFibHkgZG9uJ3Qgd2FudCB0byB1c2UgdGhpcyBpbiBhIGJyb3dzZXIuIFVzZVxuICogdGhlIGhpc3RvcnkubGlzdGVuIEFQSSBpbnN0ZWFkLlxuICovXG5mdW5jdGlvbiBtYXRjaChfcmVmLCBjYWxsYmFjaykge1xuICB2YXIgcm91dGVzID0gX3JlZi5yb3V0ZXM7XG4gIHZhciBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb247XG4gIHZhciBwYXJzZVF1ZXJ5U3RyaW5nID0gX3JlZi5wYXJzZVF1ZXJ5U3RyaW5nO1xuICB2YXIgc3RyaW5naWZ5UXVlcnkgPSBfcmVmLnN0cmluZ2lmeVF1ZXJ5O1xuICB2YXIgYmFzZW5hbWUgPSBfcmVmLmJhc2VuYW1lO1xuXG4gICFsb2NhdGlvbiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnbWF0Y2ggbmVlZHMgYSBsb2NhdGlvbicpIDogX2ludmFyaWFudDJbJ2RlZmF1bHQnXShmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgdmFyIGhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KHtcbiAgICByb3V0ZXM6IF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlcyhyb3V0ZXMpLFxuICAgIHBhcnNlUXVlcnlTdHJpbmc6IHBhcnNlUXVlcnlTdHJpbmcsXG4gICAgc3RyaW5naWZ5UXVlcnk6IHN0cmluZ2lmeVF1ZXJ5LFxuICAgIGJhc2VuYW1lOiBiYXNlbmFtZVxuICB9KTtcblxuICAvLyBBbGxvdyBtYXRjaCh7IGxvY2F0aW9uOiAnL3RoZS9wYXRoJywgLi4uIH0pXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnKSBsb2NhdGlvbiA9IGhpc3RvcnkuY3JlYXRlTG9jYXRpb24obG9jYXRpb24pO1xuXG4gIGhpc3RvcnkubWF0Y2gobG9jYXRpb24sIGZ1bmN0aW9uIChlcnJvciwgcmVkaXJlY3RMb2NhdGlvbiwgbmV4dFN0YXRlKSB7XG4gICAgY2FsbGJhY2soZXJyb3IsIHJlZGlyZWN0TG9jYXRpb24sIG5leHRTdGF0ZSAmJiBfZXh0ZW5kcyh7fSwgbmV4dFN0YXRlLCB7IGhpc3Rvcnk6IGhpc3RvcnkgfSkpO1xuICB9KTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gbWF0Y2g7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfQXN5bmNVdGlscyA9IHJlcXVpcmUoJy4vQXN5bmNVdGlscycpO1xuXG52YXIgX1BhdHRlcm5VdGlscyA9IHJlcXVpcmUoJy4vUGF0dGVyblV0aWxzJyk7XG5cbnZhciBfUm91dGVVdGlscyA9IHJlcXVpcmUoJy4vUm91dGVVdGlscycpO1xuXG5mdW5jdGlvbiBnZXRDaGlsZFJvdXRlcyhyb3V0ZSwgbG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gIGlmIChyb3V0ZS5jaGlsZFJvdXRlcykge1xuICAgIGNhbGxiYWNrKG51bGwsIHJvdXRlLmNoaWxkUm91dGVzKTtcbiAgfSBlbHNlIGlmIChyb3V0ZS5nZXRDaGlsZFJvdXRlcykge1xuICAgIHJvdXRlLmdldENoaWxkUm91dGVzKGxvY2F0aW9uLCBmdW5jdGlvbiAoZXJyb3IsIGNoaWxkUm91dGVzKSB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgIWVycm9yICYmIF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlcyhjaGlsZFJvdXRlcykpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SW5kZXhSb3V0ZShyb3V0ZSwgbG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gIGlmIChyb3V0ZS5pbmRleFJvdXRlKSB7XG4gICAgY2FsbGJhY2sobnVsbCwgcm91dGUuaW5kZXhSb3V0ZSk7XG4gIH0gZWxzZSBpZiAocm91dGUuZ2V0SW5kZXhSb3V0ZSkge1xuICAgIHJvdXRlLmdldEluZGV4Um91dGUobG9jYXRpb24sIGZ1bmN0aW9uIChlcnJvciwgaW5kZXhSb3V0ZSkge1xuICAgICAgY2FsbGJhY2soZXJyb3IsICFlcnJvciAmJiBfUm91dGVVdGlscy5jcmVhdGVSb3V0ZXMoaW5kZXhSb3V0ZSlbMF0pO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHJvdXRlLmNoaWxkUm91dGVzKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXRobGVzcyA9IHJvdXRlLmNoaWxkUm91dGVzLmZpbHRlcihmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiAhb2JqLmhhc093blByb3BlcnR5KCdwYXRoJyk7XG4gICAgICB9KTtcblxuICAgICAgX0FzeW5jVXRpbHMubG9vcEFzeW5jKHBhdGhsZXNzLmxlbmd0aCwgZnVuY3Rpb24gKGluZGV4LCBuZXh0LCBkb25lKSB7XG4gICAgICAgIGdldEluZGV4Um91dGUocGF0aGxlc3NbaW5kZXhdLCBsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCBpbmRleFJvdXRlKSB7XG4gICAgICAgICAgaWYgKGVycm9yIHx8IGluZGV4Um91dGUpIHtcbiAgICAgICAgICAgIHZhciByb3V0ZXMgPSBbcGF0aGxlc3NbaW5kZXhdXS5jb25jYXQoQXJyYXkuaXNBcnJheShpbmRleFJvdXRlKSA/IGluZGV4Um91dGUgOiBbaW5kZXhSb3V0ZV0pO1xuICAgICAgICAgICAgZG9uZShlcnJvciwgcm91dGVzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyLCByb3V0ZXMpIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcm91dGVzKTtcbiAgICAgIH0pO1xuICAgIH0pKCk7XG4gIH0gZWxzZSB7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NpZ25QYXJhbXMocGFyYW1zLCBwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcykge1xuICByZXR1cm4gcGFyYW1OYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKHBhcmFtcywgcGFyYW1OYW1lLCBpbmRleCkge1xuICAgIHZhciBwYXJhbVZhbHVlID0gcGFyYW1WYWx1ZXMgJiYgcGFyYW1WYWx1ZXNbaW5kZXhdO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1zW3BhcmFtTmFtZV0pKSB7XG4gICAgICBwYXJhbXNbcGFyYW1OYW1lXS5wdXNoKHBhcmFtVmFsdWUpO1xuICAgIH0gZWxzZSBpZiAocGFyYW1OYW1lIGluIHBhcmFtcykge1xuICAgICAgcGFyYW1zW3BhcmFtTmFtZV0gPSBbcGFyYW1zW3BhcmFtTmFtZV0sIHBhcmFtVmFsdWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbXNbcGFyYW1OYW1lXSA9IHBhcmFtVmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfSwgcGFyYW1zKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGFyYW1zKHBhcmFtTmFtZXMsIHBhcmFtVmFsdWVzKSB7XG4gIHJldHVybiBhc3NpZ25QYXJhbXMoe30sIHBhcmFtTmFtZXMsIHBhcmFtVmFsdWVzKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZURlZXAocm91dGUsIGxvY2F0aW9uLCByZW1haW5pbmdQYXRobmFtZSwgcGFyYW1OYW1lcywgcGFyYW1WYWx1ZXMsIGNhbGxiYWNrKSB7XG4gIHZhciBwYXR0ZXJuID0gcm91dGUucGF0aCB8fCAnJztcblxuICBpZiAocGF0dGVybi5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgIHJlbWFpbmluZ1BhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gICAgcGFyYW1OYW1lcyA9IFtdO1xuICAgIHBhcmFtVmFsdWVzID0gW107XG4gIH1cblxuICBpZiAocmVtYWluaW5nUGF0aG5hbWUgIT09IG51bGwpIHtcbiAgICB2YXIgbWF0Y2hlZCA9IF9QYXR0ZXJuVXRpbHMubWF0Y2hQYXR0ZXJuKHBhdHRlcm4sIHJlbWFpbmluZ1BhdGhuYW1lKTtcbiAgICByZW1haW5pbmdQYXRobmFtZSA9IG1hdGNoZWQucmVtYWluaW5nUGF0aG5hbWU7XG4gICAgcGFyYW1OYW1lcyA9IFtdLmNvbmNhdChwYXJhbU5hbWVzLCBtYXRjaGVkLnBhcmFtTmFtZXMpO1xuICAgIHBhcmFtVmFsdWVzID0gW10uY29uY2F0KHBhcmFtVmFsdWVzLCBtYXRjaGVkLnBhcmFtVmFsdWVzKTtcblxuICAgIGlmIChyZW1haW5pbmdQYXRobmFtZSA9PT0gJycgJiYgcm91dGUucGF0aCkge1xuICAgICAgdmFyIF9yZXQyID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1hdGNoID0ge1xuICAgICAgICAgIHJvdXRlczogW3JvdXRlXSxcbiAgICAgICAgICBwYXJhbXM6IGNyZWF0ZVBhcmFtcyhwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcylcbiAgICAgICAgfTtcblxuICAgICAgICBnZXRJbmRleFJvdXRlKHJvdXRlLCBsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCBpbmRleFJvdXRlKSB7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGluZGV4Um91dGUpKSB7XG4gICAgICAgICAgICAgIHZhciBfbWF0Y2gkcm91dGVzO1xuXG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShpbmRleFJvdXRlLmV2ZXJ5KGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhcm91dGUucGF0aDtcbiAgICAgICAgICAgICAgfSksICdJbmRleCByb3V0ZXMgc2hvdWxkIG5vdCBoYXZlIHBhdGhzJykgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIChfbWF0Y2gkcm91dGVzID0gbWF0Y2gucm91dGVzKS5wdXNoLmFwcGx5KF9tYXRjaCRyb3V0ZXMsIGluZGV4Um91dGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpbmRleFJvdXRlKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfd2FybmluZzJbJ2RlZmF1bHQnXSghaW5kZXhSb3V0ZS5wYXRoLCAnSW5kZXggcm91dGVzIHNob3VsZCBub3QgaGF2ZSBwYXRocycpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICBtYXRjaC5yb3V0ZXMucHVzaChpbmRleFJvdXRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgbWF0Y2gpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdjogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICB9KSgpO1xuXG4gICAgICBpZiAodHlwZW9mIF9yZXQyID09PSAnb2JqZWN0JykgcmV0dXJuIF9yZXQyLnY7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJlbWFpbmluZ1BhdGhuYW1lICE9IG51bGwgfHwgcm91dGUuY2hpbGRSb3V0ZXMpIHtcbiAgICAvLyBFaXRoZXIgYSkgdGhpcyByb3V0ZSBtYXRjaGVkIGF0IGxlYXN0IHNvbWUgb2YgdGhlIHBhdGggb3IgYilcbiAgICAvLyB3ZSBkb24ndCBoYXZlIHRvIGxvYWQgdGhpcyByb3V0ZSdzIGNoaWxkcmVuIGFzeW5jaHJvbm91c2x5LiBJblxuICAgIC8vIGVpdGhlciBjYXNlIGNvbnRpbnVlIGNoZWNraW5nIGZvciBtYXRjaGVzIGluIHRoZSBzdWJ0cmVlLlxuICAgIGdldENoaWxkUm91dGVzKHJvdXRlLCBsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCBjaGlsZFJvdXRlcykge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGRSb3V0ZXMpIHtcbiAgICAgICAgLy8gQ2hlY2sgdGhlIGNoaWxkIHJvdXRlcyB0byBzZWUgaWYgYW55IG9mIHRoZW0gbWF0Y2guXG4gICAgICAgIG1hdGNoUm91dGVzKGNoaWxkUm91dGVzLCBsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCBtYXRjaCkge1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIC8vIEEgY2hpbGQgcm91dGUgbWF0Y2hlZCEgQXVnbWVudCB0aGUgbWF0Y2ggYW5kIHBhc3MgaXQgdXAgdGhlIHN0YWNrLlxuICAgICAgICAgICAgbWF0Y2gucm91dGVzLnVuc2hpZnQocm91dGUpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgbWF0Y2gpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgcmVtYWluaW5nUGF0aG5hbWUsIHBhcmFtTmFtZXMsIHBhcmFtVmFsdWVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxufVxuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IG1hdGNoZXMgdGhlIGdpdmVuIGxvY2F0aW9uIHRvIGEgc2V0IG9mIHJvdXRlcyBhbmQgY2FsbHNcbiAqIGNhbGxiYWNrKGVycm9yLCBzdGF0ZSkgd2hlbiBmaW5pc2hlZC4gVGhlIHN0YXRlIG9iamVjdCB3aWxsIGhhdmUgdGhlXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAtIHJvdXRlcyAgICAgICBBbiBhcnJheSBvZiByb3V0ZXMgdGhhdCBtYXRjaGVkLCBpbiBoaWVyYXJjaGljYWwgb3JkZXJcbiAqIC0gcGFyYW1zICAgICAgIEFuIG9iamVjdCBvZiBVUkwgcGFyYW1ldGVyc1xuICpcbiAqIE5vdGU6IFRoaXMgb3BlcmF0aW9uIG1heSBmaW5pc2ggc3luY2hyb25vdXNseSBpZiBubyByb3V0ZXMgaGF2ZSBhblxuICogYXN5bmNocm9ub3VzIGdldENoaWxkUm91dGVzIG1ldGhvZC5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hSb3V0ZXMocm91dGVzLCBsb2NhdGlvbiwgY2FsbGJhY2spIHtcbiAgdmFyIHJlbWFpbmluZ1BhdGhuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA8PSAzIHx8IGFyZ3VtZW50c1szXSA9PT0gdW5kZWZpbmVkID8gbG9jYXRpb24ucGF0aG5hbWUgOiBhcmd1bWVudHNbM107XG4gIHZhciBwYXJhbU5hbWVzID0gYXJndW1lbnRzLmxlbmd0aCA8PSA0IHx8IGFyZ3VtZW50c1s0XSA9PT0gdW5kZWZpbmVkID8gW10gOiBhcmd1bWVudHNbNF07XG4gIHZhciBwYXJhbVZhbHVlcyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gNSB8fCBhcmd1bWVudHNbNV0gPT09IHVuZGVmaW5lZCA/IFtdIDogYXJndW1lbnRzWzVdO1xuICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcbiAgICBfQXN5bmNVdGlscy5sb29wQXN5bmMocm91dGVzLmxlbmd0aCwgZnVuY3Rpb24gKGluZGV4LCBuZXh0LCBkb25lKSB7XG4gICAgICBtYXRjaFJvdXRlRGVlcChyb3V0ZXNbaW5kZXhdLCBsb2NhdGlvbiwgcmVtYWluaW5nUGF0aG5hbWUsIHBhcmFtTmFtZXMsIHBhcmFtVmFsdWVzLCBmdW5jdGlvbiAoZXJyb3IsIG1hdGNoKSB7XG4gICAgICAgIGlmIChlcnJvciB8fCBtYXRjaCkge1xuICAgICAgICAgIGRvbmUoZXJyb3IsIG1hdGNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGNhbGxiYWNrKTtcbiAgfSkoKTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gbWF0Y2hSb3V0ZXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9oaXN0b3J5TGliQWN0aW9ucyA9IHJlcXVpcmUoJ2hpc3RvcnkvbGliL0FjdGlvbnMnKTtcblxudmFyIF9oaXN0b3J5TGliVXNlUXVlcmllcyA9IHJlcXVpcmUoJ2hpc3RvcnkvbGliL3VzZVF1ZXJpZXMnKTtcblxudmFyIF9oaXN0b3J5TGliVXNlUXVlcmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oaXN0b3J5TGliVXNlUXVlcmllcyk7XG5cbnZhciBfY29tcHV0ZUNoYW5nZWRSb3V0ZXMyID0gcmVxdWlyZSgnLi9jb21wdXRlQ2hhbmdlZFJvdXRlcycpO1xuXG52YXIgX2NvbXB1dGVDaGFuZ2VkUm91dGVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXB1dGVDaGFuZ2VkUm91dGVzMik7XG5cbnZhciBfVHJhbnNpdGlvblV0aWxzID0gcmVxdWlyZSgnLi9UcmFuc2l0aW9uVXRpbHMnKTtcblxudmFyIF9pc0FjdGl2ZTIgPSByZXF1aXJlKCcuL2lzQWN0aXZlJyk7XG5cbnZhciBfaXNBY3RpdmUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNBY3RpdmUyKTtcblxudmFyIF9nZXRDb21wb25lbnRzID0gcmVxdWlyZSgnLi9nZXRDb21wb25lbnRzJyk7XG5cbnZhciBfZ2V0Q29tcG9uZW50czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRDb21wb25lbnRzKTtcblxudmFyIF9tYXRjaFJvdXRlcyA9IHJlcXVpcmUoJy4vbWF0Y2hSb3V0ZXMnKTtcblxudmFyIF9tYXRjaFJvdXRlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXRjaFJvdXRlcyk7XG5cbmZ1bmN0aW9uIGhhc0FueVByb3BlcnRpZXMob2JqZWN0KSB7XG4gIGZvciAodmFyIHAgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShwKSkgcmV0dXJuIHRydWU7XG4gIH1yZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBjcmVhdGVIaXN0b3J5IGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gY3JlYXRlXG4gKiBoaXN0b3J5IG9iamVjdHMgdGhhdCBrbm93IGFib3V0IHJvdXRpbmcuXG4gKlxuICogRW5oYW5jZXMgaGlzdG9yeSBvYmplY3RzIHdpdGggdGhlIGZvbGxvd2luZyBtZXRob2RzOlxuICpcbiAqIC0gbGlzdGVuKChlcnJvciwgbmV4dFN0YXRlKSA9PiB7fSlcbiAqIC0gbGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlKHJvdXRlLCAobmV4dExvY2F0aW9uKSA9PiB7fSlcbiAqIC0gbWF0Y2gobG9jYXRpb24sIChlcnJvciwgcmVkaXJlY3RMb2NhdGlvbiwgbmV4dFN0YXRlKSA9PiB7fSlcbiAqIC0gaXNBY3RpdmUocGF0aG5hbWUsIHF1ZXJ5LCBpbmRleE9ubHk9ZmFsc2UpXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlcyhjcmVhdGVIaXN0b3J5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcbiAgICB2YXIgcm91dGVzID0gb3B0aW9ucy5yb3V0ZXM7XG5cbiAgICB2YXIgaGlzdG9yeU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgWydyb3V0ZXMnXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IF9oaXN0b3J5TGliVXNlUXVlcmllczJbJ2RlZmF1bHQnXShjcmVhdGVIaXN0b3J5KShoaXN0b3J5T3B0aW9ucyk7XG4gICAgdmFyIHN0YXRlID0ge307XG5cbiAgICBmdW5jdGlvbiBpc0FjdGl2ZShwYXRobmFtZSwgcXVlcnkpIHtcbiAgICAgIHZhciBpbmRleE9ubHkgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGFyZ3VtZW50c1syXTtcblxuICAgICAgcmV0dXJuIF9pc0FjdGl2ZTNbJ2RlZmF1bHQnXShwYXRobmFtZSwgcXVlcnksIGluZGV4T25seSwgc3RhdGUubG9jYXRpb24sIHN0YXRlLnJvdXRlcywgc3RhdGUucGFyYW1zKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbkZyb21SZWRpcmVjdEluZm8oX3JlZikge1xuICAgICAgdmFyIHBhdGhuYW1lID0gX3JlZi5wYXRobmFtZTtcbiAgICAgIHZhciBxdWVyeSA9IF9yZWYucXVlcnk7XG4gICAgICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgICByZXR1cm4gaGlzdG9yeS5jcmVhdGVMb2NhdGlvbihoaXN0b3J5LmNyZWF0ZVBhdGgocGF0aG5hbWUsIHF1ZXJ5KSwgc3RhdGUsIF9oaXN0b3J5TGliQWN0aW9ucy5SRVBMQUNFKTtcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbE5leHRTdGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgIGZ1bmN0aW9uIG1hdGNoKGxvY2F0aW9uLCBjYWxsYmFjaykge1xuICAgICAgaWYgKHBhcnRpYWxOZXh0U3RhdGUgJiYgcGFydGlhbE5leHRTdGF0ZS5sb2NhdGlvbiA9PT0gbG9jYXRpb24pIHtcbiAgICAgICAgLy8gQ29udGludWUgZnJvbSB3aGVyZSB3ZSBsZWZ0IG9mZi5cbiAgICAgICAgZmluaXNoTWF0Y2gocGFydGlhbE5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX21hdGNoUm91dGVzMlsnZGVmYXVsdCddKHJvdXRlcywgbG9jYXRpb24sIGZ1bmN0aW9uIChlcnJvciwgbmV4dFN0YXRlKSB7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgfSBlbHNlIGlmIChuZXh0U3RhdGUpIHtcbiAgICAgICAgICAgIGZpbmlzaE1hdGNoKF9leHRlbmRzKHt9LCBuZXh0U3RhdGUsIHsgbG9jYXRpb246IGxvY2F0aW9uIH0pLCBjYWxsYmFjayk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaW5pc2hNYXRjaChuZXh0U3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX2NvbXB1dGVDaGFuZ2VkUm91dGVzID0gX2NvbXB1dGVDaGFuZ2VkUm91dGVzM1snZGVmYXVsdCddKHN0YXRlLCBuZXh0U3RhdGUpO1xuXG4gICAgICB2YXIgbGVhdmVSb3V0ZXMgPSBfY29tcHV0ZUNoYW5nZWRSb3V0ZXMubGVhdmVSb3V0ZXM7XG4gICAgICB2YXIgZW50ZXJSb3V0ZXMgPSBfY29tcHV0ZUNoYW5nZWRSb3V0ZXMuZW50ZXJSb3V0ZXM7XG5cbiAgICAgIF9UcmFuc2l0aW9uVXRpbHMucnVuTGVhdmVIb29rcyhsZWF2ZVJvdXRlcyk7XG5cbiAgICAgIF9UcmFuc2l0aW9uVXRpbHMucnVuRW50ZXJIb29rcyhlbnRlclJvdXRlcywgbmV4dFN0YXRlLCBmdW5jdGlvbiAoZXJyb3IsIHJlZGlyZWN0SW5mbykge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH0gZWxzZSBpZiAocmVkaXJlY3RJbmZvKSB7XG4gICAgICAgICAgY2FsbGJhY2sobnVsbCwgY3JlYXRlTG9jYXRpb25Gcm9tUmVkaXJlY3RJbmZvKHJlZGlyZWN0SW5mbykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRPRE86IEZldGNoIGNvbXBvbmVudHMgYWZ0ZXIgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICAgICAgICBfZ2V0Q29tcG9uZW50czJbJ2RlZmF1bHQnXShuZXh0U3RhdGUsIGZ1bmN0aW9uIChlcnJvciwgY29tcG9uZW50cykge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFRPRE86IE1ha2UgbWF0Y2ggYSBwdXJlIGZ1bmN0aW9uIGFuZCBoYXZlIHNvbWUgb3RoZXIgQVBJXG4gICAgICAgICAgICAgIC8vIGZvciBcIm1hdGNoIGFuZCB1cGRhdGUgc3RhdGVcIi5cbiAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgbnVsbCwgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgbmV4dFN0YXRlLCB7IGNvbXBvbmVudHM6IGNvbXBvbmVudHMgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgUm91dGVHdWlkID0gMTtcblxuICAgIGZ1bmN0aW9uIGdldFJvdXRlSUQocm91dGUpIHtcbiAgICAgIHJldHVybiByb3V0ZS5fX2lkX18gfHwgKHJvdXRlLl9faWRfXyA9IFJvdXRlR3VpZCsrKTtcbiAgICB9XG5cbiAgICB2YXIgUm91dGVIb29rcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZ2V0Um91dGVIb29rc0ZvclJvdXRlcyhyb3V0ZXMpIHtcbiAgICAgIHJldHVybiByb3V0ZXMucmVkdWNlKGZ1bmN0aW9uIChob29rcywgcm91dGUpIHtcbiAgICAgICAgaG9va3MucHVzaC5hcHBseShob29rcywgUm91dGVIb29rc1tnZXRSb3V0ZUlEKHJvdXRlKV0pO1xuICAgICAgICByZXR1cm4gaG9va3M7XG4gICAgICB9LCBbXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNpdGlvbkhvb2sobG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgICBfbWF0Y2hSb3V0ZXMyWydkZWZhdWx0J10ocm91dGVzLCBsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCBuZXh0U3RhdGUpIHtcbiAgICAgICAgaWYgKG5leHRTdGF0ZSA9PSBudWxsKSB7XG4gICAgICAgICAgLy8gVE9ETzogV2UgZGlkbid0IGFjdHVhbGx5IG1hdGNoIGFueXRoaW5nLCBidXQgaGFuZ1xuICAgICAgICAgIC8vIG9udG8gZXJyb3IvbmV4dFN0YXRlIHNvIHdlIGRvbid0IGhhdmUgdG8gbWF0Y2hSb3V0ZXNcbiAgICAgICAgICAvLyBhZ2FpbiBpbiB0aGUgbGlzdGVuIGNhbGxiYWNrLlxuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FjaGUgc29tZSBzdGF0ZSBoZXJlIHNvIHdlIGRvbid0IGhhdmUgdG9cbiAgICAgICAgLy8gbWF0Y2hSb3V0ZXMoKSBhZ2FpbiBpbiB0aGUgbGlzdGVuIGNhbGxiYWNrLlxuICAgICAgICBwYXJ0aWFsTmV4dFN0YXRlID0gX2V4dGVuZHMoe30sIG5leHRTdGF0ZSwgeyBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG5cbiAgICAgICAgdmFyIGhvb2tzID0gZ2V0Um91dGVIb29rc0ZvclJvdXRlcyhfY29tcHV0ZUNoYW5nZWRSb3V0ZXMzWydkZWZhdWx0J10oc3RhdGUsIHBhcnRpYWxOZXh0U3RhdGUpLmxlYXZlUm91dGVzKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaG9va3MubGVuZ3RoOyByZXN1bHQgPT0gbnVsbCAmJiBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAvLyBQYXNzaW5nIHRoZSBsb2NhdGlvbiBhcmcgaGVyZSBpbmRpY2F0ZXMgdG9cbiAgICAgICAgICAvLyB0aGUgdXNlciB0aGF0IHRoaXMgaXMgYSB0cmFuc2l0aW9uIGhvb2suXG4gICAgICAgICAgcmVzdWx0ID0gaG9va3NbaV0obG9jYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJlZm9yZVVubG9hZEhvb2soKSB7XG4gICAgICAvLyBTeW5jaHJvbm91c2x5IGNoZWNrIHRvIHNlZSBpZiBhbnkgcm91dGUgaG9va3Mgd2FudFxuICAgICAgLy8gdG8gcHJldmVudCB0aGUgY3VycmVudCB3aW5kb3cvdGFiIGZyb20gY2xvc2luZy5cbiAgICAgIGlmIChzdGF0ZS5yb3V0ZXMpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gZ2V0Um91dGVIb29rc0ZvclJvdXRlcyhzdGF0ZS5yb3V0ZXMpO1xuXG4gICAgICAgIHZhciBtZXNzYWdlID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaG9va3MubGVuZ3RoOyB0eXBlb2YgbWVzc2FnZSAhPT0gJ3N0cmluZycgJiYgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgLy8gUGFzc2luZyBubyBhcmdzIGluZGljYXRlcyB0byB0aGUgdXNlciB0aGF0IHRoaXMgaXMgYVxuICAgICAgICAgIC8vIGJlZm9yZXVubG9hZCBob29rLiBXZSBkb24ndCBrbm93IHRoZSBuZXh0IGxvY2F0aW9uLlxuICAgICAgICAgIG1lc3NhZ2UgPSBob29rc1tpXSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVubGlzdGVuQmVmb3JlID0gdW5kZWZpbmVkLFxuICAgICAgICB1bmxpc3RlbkJlZm9yZVVubG9hZCA9IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyB0aGUgZ2l2ZW4gaG9vayBmdW5jdGlvbiB0byBydW4gYmVmb3JlIGxlYXZpbmcgdGhlIGdpdmVuIHJvdXRlLlxuICAgICAqXG4gICAgICogRHVyaW5nIGEgbm9ybWFsIHRyYW5zaXRpb24sIHRoZSBob29rIGZ1bmN0aW9uIHJlY2VpdmVzIHRoZSBuZXh0IGxvY2F0aW9uXG4gICAgICogYXMgaXRzIG9ubHkgYXJndW1lbnQgYW5kIG11c3QgcmV0dXJuIGVpdGhlciBhKSBhIHByb21wdCBtZXNzYWdlIHRvIHNob3dcbiAgICAgKiB0aGUgdXNlciwgdG8gbWFrZSBzdXJlIHRoZXkgd2FudCB0byBsZWF2ZSB0aGUgcGFnZSBvciBiKSBmYWxzZSwgdG8gcHJldmVudFxuICAgICAqIHRoZSB0cmFuc2l0aW9uLlxuICAgICAqXG4gICAgICogRHVyaW5nIHRoZSBiZWZvcmV1bmxvYWQgZXZlbnQgKGluIGJyb3dzZXJzKSB0aGUgaG9vayByZWNlaXZlcyBubyBhcmd1bWVudHMuXG4gICAgICogSW4gdGhpcyBjYXNlIGl0IG11c3QgcmV0dXJuIGEgcHJvbXB0IG1lc3NhZ2UgdG8gcHJldmVudCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKlxuICAgICAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIHVuYmluZCB0aGUgbGlzdGVuZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlKHJvdXRlLCBob29rKSB7XG4gICAgICAvLyBUT0RPOiBXYXJuIGlmIHRoZXkgcmVnaXN0ZXIgZm9yIGEgcm91dGUgdGhhdCBpc24ndCBjdXJyZW50bHlcbiAgICAgIC8vIGFjdGl2ZS4gVGhleSdyZSBwcm9iYWJseSBkb2luZyBzb21ldGhpbmcgd3JvbmcsIGxpa2UgcmUtY3JlYXRpbmdcbiAgICAgIC8vIHJvdXRlIG9iamVjdHMgb24gZXZlcnkgbG9jYXRpb24gY2hhbmdlLlxuICAgICAgdmFyIHJvdXRlSUQgPSBnZXRSb3V0ZUlEKHJvdXRlKTtcbiAgICAgIHZhciBob29rcyA9IFJvdXRlSG9va3Nbcm91dGVJRF07XG5cbiAgICAgIGlmIChob29rcyA9PSBudWxsKSB7XG4gICAgICAgIHZhciB0aGVyZVdlcmVOb1JvdXRlSG9va3MgPSAhaGFzQW55UHJvcGVydGllcyhSb3V0ZUhvb2tzKTtcblxuICAgICAgICBob29rcyA9IFJvdXRlSG9va3Nbcm91dGVJRF0gPSBbaG9va107XG5cbiAgICAgICAgaWYgKHRoZXJlV2VyZU5vUm91dGVIb29rcykge1xuICAgICAgICAgIC8vIHNldHVwIHRyYW5zaXRpb24gJiBiZWZvcmV1bmxvYWQgaG9va3NcbiAgICAgICAgICB1bmxpc3RlbkJlZm9yZSA9IGhpc3RvcnkubGlzdGVuQmVmb3JlKHRyYW5zaXRpb25Ib29rKTtcblxuICAgICAgICAgIGlmIChoaXN0b3J5Lmxpc3RlbkJlZm9yZVVubG9hZCkgdW5saXN0ZW5CZWZvcmVVbmxvYWQgPSBoaXN0b3J5Lmxpc3RlbkJlZm9yZVVubG9hZChiZWZvcmVVbmxvYWRIb29rKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChob29rcy5pbmRleE9mKGhvb2spID09PSAtMSkge1xuICAgICAgICBob29rcy5wdXNoKGhvb2spO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaG9va3MgPSBSb3V0ZUhvb2tzW3JvdXRlSURdO1xuXG4gICAgICAgIGlmIChob29rcyAhPSBudWxsKSB7XG4gICAgICAgICAgdmFyIG5ld0hvb2tzID0gaG9va3MuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbSAhPT0gaG9vaztcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChuZXdIb29rcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSBSb3V0ZUhvb2tzW3JvdXRlSURdO1xuXG4gICAgICAgICAgICBpZiAoIWhhc0FueVByb3BlcnRpZXMoUm91dGVIb29rcykpIHtcbiAgICAgICAgICAgICAgLy8gdGVhcmRvd24gdHJhbnNpdGlvbiAmIGJlZm9yZXVubG9hZCBob29rc1xuICAgICAgICAgICAgICBpZiAodW5saXN0ZW5CZWZvcmUpIHtcbiAgICAgICAgICAgICAgICB1bmxpc3RlbkJlZm9yZSgpO1xuICAgICAgICAgICAgICAgIHVubGlzdGVuQmVmb3JlID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh1bmxpc3RlbkJlZm9yZVVubG9hZCkge1xuICAgICAgICAgICAgICAgIHVubGlzdGVuQmVmb3JlVW5sb2FkKCk7XG4gICAgICAgICAgICAgICAgdW5saXN0ZW5CZWZvcmVVbmxvYWQgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFJvdXRlSG9va3Nbcm91dGVJRF0gPSBuZXdIb29rcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBpcyB0aGUgQVBJIGZvciBzdGF0ZWZ1bCBlbnZpcm9ubWVudHMuIEFzIHRoZSBsb2NhdGlvblxuICAgICAqIGNoYW5nZXMsIHdlIHVwZGF0ZSBzdGF0ZSBhbmQgY2FsbCB0aGUgbGlzdGVuZXIuIFdlIGNhbiBhbHNvXG4gICAgICogZ3JhY2VmdWxseSBoYW5kbGUgZXJyb3JzIGFuZCByZWRpcmVjdHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICAvLyBUT0RPOiBPbmx5IHVzZSBhIHNpbmdsZSBoaXN0b3J5IGxpc3RlbmVyLiBPdGhlcndpc2Ugd2UnbGxcbiAgICAgIC8vIGVuZCB1cCB3aXRoIG11bHRpcGxlIGNvbmN1cnJlbnQgY2FsbHMgdG8gbWF0Y2guXG4gICAgICByZXR1cm4gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChzdGF0ZS5sb2NhdGlvbiA9PT0gbG9jYXRpb24pIHtcbiAgICAgICAgICBsaXN0ZW5lcihudWxsLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF0Y2gobG9jYXRpb24sIGZ1bmN0aW9uIChlcnJvciwgcmVkaXJlY3RMb2NhdGlvbiwgbmV4dFN0YXRlKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXIoZXJyb3IpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZWRpcmVjdExvY2F0aW9uKSB7XG4gICAgICAgICAgICAgIGhpc3RvcnkudHJhbnNpdGlvblRvKHJlZGlyZWN0TG9jYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXh0U3RhdGUpIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXIobnVsbCwgbmV4dFN0YXRlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShmYWxzZSwgJ0xvY2F0aW9uIFwiJXNcIiBkaWQgbm90IG1hdGNoIGFueSByb3V0ZXMnLCBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2gpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcbiAgICAgIGlzQWN0aXZlOiBpc0FjdGl2ZSxcbiAgICAgIG1hdGNoOiBtYXRjaCxcbiAgICAgIGxpc3RlbkJlZm9yZUxlYXZpbmdSb3V0ZTogbGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlLFxuICAgICAgbGlzdGVuOiBsaXN0ZW5cbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gdXNlUm91dGVzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEF1dG9Gb2N1c1V0aWxzXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcblxudmFyIGZpbmRET01Ob2RlID0gcmVxdWlyZSgnLi9maW5kRE9NTm9kZScpO1xudmFyIGZvY3VzTm9kZSA9IHJlcXVpcmUoJ2ZianMvbGliL2ZvY3VzTm9kZScpO1xuXG52YXIgTWl4aW4gPSB7XG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYXV0b0ZvY3VzKSB7XG4gICAgICBmb2N1c05vZGUoZmluZERPTU5vZGUodGhpcykpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIEF1dG9Gb2N1c1V0aWxzID0ge1xuICBNaXhpbjogTWl4aW4sXG5cbiAgZm9jdXNET01Db21wb25lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICBmb2N1c05vZGUoUmVhY3RNb3VudC5nZXROb2RlKHRoaXMuX3Jvb3ROb2RlSUQpKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdXRvRm9jdXNVdGlsczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZSgnLi9FdmVudENvbnN0YW50cycpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCcuL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlID0gcmVxdWlyZSgnLi9GYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUnKTtcbnZhciBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50Jyk7XG52YXIgU3ludGhldGljSW5wdXRFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljSW5wdXRFdmVudCcpO1xuXG52YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xuXG52YXIgRU5EX0tFWUNPREVTID0gWzksIDEzLCAyNywgMzJdOyAvLyBUYWIsIFJldHVybiwgRXNjLCBTcGFjZVxudmFyIFNUQVJUX0tFWUNPREUgPSAyMjk7XG5cbnZhciBjYW5Vc2VDb21wb3NpdGlvbkV2ZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdDb21wb3NpdGlvbkV2ZW50JyBpbiB3aW5kb3c7XG5cbnZhciBkb2N1bWVudE1vZGUgPSBudWxsO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkge1xuICBkb2N1bWVudE1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG59XG5cbi8vIFdlYmtpdCBvZmZlcnMgYSB2ZXJ5IHVzZWZ1bCBgdGV4dElucHV0YCBldmVudCB0aGF0IGNhbiBiZSB1c2VkIHRvXG4vLyBkaXJlY3RseSByZXByZXNlbnQgYGJlZm9yZUlucHV0YC4gVGhlIElFIGB0ZXh0aW5wdXRgIGV2ZW50IGlzIG5vdCBhc1xuLy8gdXNlZnVsLCBzbyB3ZSBkb24ndCB1c2UgaXQuXG52YXIgY2FuVXNlVGV4dElucHV0RXZlbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ1RleHRFdmVudCcgaW4gd2luZG93ICYmICFkb2N1bWVudE1vZGUgJiYgIWlzUHJlc3RvKCk7XG5cbi8vIEluIElFOSssIHdlIGhhdmUgYWNjZXNzIHRvIGNvbXBvc2l0aW9uIGV2ZW50cywgYnV0IHRoZSBkYXRhIHN1cHBsaWVkXG4vLyBieSB0aGUgbmF0aXZlIGNvbXBvc2l0aW9uZW5kIGV2ZW50IG1heSBiZSBpbmNvcnJlY3QuIEphcGFuZXNlIGlkZW9ncmFwaGljXG4vLyBzcGFjZXMsIGZvciBpbnN0YW5jZSAoXFx1MzAwMCkgYXJlIG5vdCByZWNvcmRlZCBjb3JyZWN0bHkuXG52YXIgdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgKCFjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IHx8IGRvY3VtZW50TW9kZSAmJiBkb2N1bWVudE1vZGUgPiA4ICYmIGRvY3VtZW50TW9kZSA8PSAxMSk7XG5cbi8qKlxuICogT3BlcmEgPD0gMTIgaW5jbHVkZXMgVGV4dEV2ZW50IGluIHdpbmRvdywgYnV0IGRvZXMgbm90IGZpcmVcbiAqIHRleHQgaW5wdXQgZXZlbnRzLiBSZWx5IG9uIGtleXByZXNzIGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIGlzUHJlc3RvKCkge1xuICB2YXIgb3BlcmEgPSB3aW5kb3cub3BlcmE7XG4gIHJldHVybiB0eXBlb2Ygb3BlcmEgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvcGVyYS52ZXJzaW9uID09PSAnZnVuY3Rpb24nICYmIHBhcnNlSW50KG9wZXJhLnZlcnNpb24oKSwgMTApIDw9IDEyO1xufVxuXG52YXIgU1BBQ0VCQVJfQ09ERSA9IDMyO1xudmFyIFNQQUNFQkFSX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFNQQUNFQkFSX0NPREUpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbi8vIEV2ZW50cyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSBuYW1lcy5cbnZhciBldmVudFR5cGVzID0ge1xuICBiZWZvcmVJbnB1dDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQmVmb3JlSW5wdXQ6IG51bGwgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkJlZm9yZUlucHV0Q2FwdHVyZTogbnVsbCB9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZCwgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcywgdG9wTGV2ZWxUeXBlcy50b3BUZXh0SW5wdXQsIHRvcExldmVsVHlwZXMudG9wUGFzdGVdXG4gIH0sXG4gIGNvbXBvc2l0aW9uRW5kOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Db21wb3NpdGlvbkVuZDogbnVsbCB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQ29tcG9zaXRpb25FbmRDYXB0dXJlOiBudWxsIH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFt0b3BMZXZlbFR5cGVzLnRvcEJsdXIsIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQsIHRvcExldmVsVHlwZXMudG9wS2V5RG93biwgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcywgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25dXG4gIH0sXG4gIGNvbXBvc2l0aW9uU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkNvbXBvc2l0aW9uU3RhcnQ6IG51bGwgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlOiBudWxsIH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFt0b3BMZXZlbFR5cGVzLnRvcEJsdXIsIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25TdGFydCwgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLCB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzLCB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLCB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bl1cbiAgfSxcbiAgY29tcG9zaXRpb25VcGRhdGU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkNvbXBvc2l0aW9uVXBkYXRlOiBudWxsIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmU6IG51bGwgfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW3RvcExldmVsVHlwZXMudG9wQmx1ciwgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblVwZGF0ZSwgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLCB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzLCB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLCB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bl1cbiAgfVxufTtcblxuLy8gVHJhY2sgd2hldGhlciB3ZSd2ZSBldmVyIGhhbmRsZWQgYSBrZXlwcmVzcyBvbiB0aGUgc3BhY2Uga2V5LlxudmFyIGhhc1NwYWNlS2V5cHJlc3MgPSBmYWxzZTtcblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciBhIG5hdGl2ZSBrZXlwcmVzcyBldmVudCBpcyBhc3N1bWVkIHRvIGJlIGEgY29tbWFuZC5cbiAqIFRoaXMgaXMgcmVxdWlyZWQgYmVjYXVzZSBGaXJlZm94IGZpcmVzIGBrZXlwcmVzc2AgZXZlbnRzIGZvciBrZXkgY29tbWFuZHNcbiAqIChjdXQsIGNvcHksIHNlbGVjdC1hbGwsIGV0Yy4pIGV2ZW4gdGhvdWdoIG5vIGNoYXJhY3RlciBpcyBpbnNlcnRlZC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIChuYXRpdmVFdmVudC5jdHJsS2V5IHx8IG5hdGl2ZUV2ZW50LmFsdEtleSB8fCBuYXRpdmVFdmVudC5tZXRhS2V5KSAmJlxuICAvLyBjdHJsS2V5ICYmIGFsdEtleSBpcyBlcXVpdmFsZW50IHRvIEFsdEdyLCBhbmQgaXMgbm90IGEgY29tbWFuZC5cbiAgIShuYXRpdmVFdmVudC5jdHJsS2V5ICYmIG5hdGl2ZUV2ZW50LmFsdEtleSk7XG59XG5cbi8qKlxuICogVHJhbnNsYXRlIG5hdGl2ZSB0b3AgbGV2ZWwgZXZlbnRzIGludG8gZXZlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRDb21wb3NpdGlvbkV2ZW50VHlwZSh0b3BMZXZlbFR5cGUpIHtcbiAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25TdGFydDpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQ7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kOlxuICAgICAgcmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQ7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uVXBkYXRlOlxuICAgICAgcmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25VcGRhdGU7XG4gIH1cbn1cblxuLyoqXG4gKiBEb2VzIG91ciBmYWxsYmFjayBiZXN0LWd1ZXNzIG1vZGVsIHRoaW5rIHRoaXMgZXZlbnQgc2lnbmlmaWVzIHRoYXRcbiAqIGNvbXBvc2l0aW9uIGhhcyBiZWd1bj9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRmFsbGJhY2tDb21wb3NpdGlvblN0YXJ0KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duICYmIG5hdGl2ZUV2ZW50LmtleUNvZGUgPT09IFNUQVJUX0tFWUNPREU7XG59XG5cbi8qKlxuICogRG9lcyBvdXIgZmFsbGJhY2sgbW9kZSB0aGluayB0aGF0IHRoaXMgZXZlbnQgaXMgdGhlIGVuZCBvZiBjb21wb3NpdGlvbj9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwOlxuICAgICAgLy8gQ29tbWFuZCBrZXlzIGluc2VydCBvciBjbGVhciBJTUUgaW5wdXQuXG4gICAgICByZXR1cm4gRU5EX0tFWUNPREVTLmluZGV4T2YobmF0aXZlRXZlbnQua2V5Q29kZSkgIT09IC0xO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duOlxuICAgICAgLy8gRXhwZWN0IElNRSBrZXlDb2RlIG9uIGVhY2gga2V5ZG93bi4gSWYgd2UgZ2V0IGFueSBvdGhlclxuICAgICAgLy8gY29kZSB3ZSBtdXN0IGhhdmUgZXhpdGVkIGVhcmxpZXIuXG4gICAgICByZXR1cm4gbmF0aXZlRXZlbnQua2V5Q29kZSAhPT0gU1RBUlRfS0VZQ09ERTtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3M6XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bjpcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQmx1cjpcbiAgICAgIC8vIEV2ZW50cyBhcmUgbm90IHBvc3NpYmxlIHdpdGhvdXQgY2FuY2VsbGluZyBJTUUuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogR29vZ2xlIElucHV0IFRvb2xzIHByb3ZpZGVzIGNvbXBvc2l0aW9uIGRhdGEgdmlhIGEgQ3VzdG9tRXZlbnQsXG4gKiB3aXRoIHRoZSBgZGF0YWAgcHJvcGVydHkgcG9wdWxhdGVkIGluIHRoZSBgZGV0YWlsYCBvYmplY3QuIElmIHRoaXNcbiAqIGlzIGF2YWlsYWJsZSBvbiB0aGUgZXZlbnQgb2JqZWN0LCB1c2UgaXQuIElmIG5vdCwgdGhpcyBpcyBhIHBsYWluXG4gKiBjb21wb3NpdGlvbiBldmVudCBhbmQgd2UgaGF2ZSBub3RoaW5nIHNwZWNpYWwgdG8gZXh0cmFjdC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4gez9zdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGRldGFpbCA9IG5hdGl2ZUV2ZW50LmRldGFpbDtcbiAgaWYgKHR5cGVvZiBkZXRhaWwgPT09ICdvYmplY3QnICYmICdkYXRhJyBpbiBkZXRhaWwpIHtcbiAgICByZXR1cm4gZGV0YWlsLmRhdGE7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIFRyYWNrIHRoZSBjdXJyZW50IElNRSBjb21wb3NpdGlvbiBmYWxsYmFjayBvYmplY3QsIGlmIGFueS5cbnZhciBjdXJyZW50Q29tcG9zaXRpb24gPSBudWxsO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHs/b2JqZWN0fSBBIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RDb21wb3NpdGlvbkV2ZW50KHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICB2YXIgZXZlbnRUeXBlO1xuICB2YXIgZmFsbGJhY2tEYXRhO1xuXG4gIGlmIChjYW5Vc2VDb21wb3NpdGlvbkV2ZW50KSB7XG4gICAgZXZlbnRUeXBlID0gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKTtcbiAgfSBlbHNlIGlmICghY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgaWYgKGlzRmFsbGJhY2tDb21wb3NpdGlvblN0YXJ0KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgICBldmVudFR5cGUgPSBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQ7XG4gIH1cblxuICBpZiAoIWV2ZW50VHlwZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhKSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgY29tcG9zaXRpb24gaXMgc3RvcmVkIHN0YXRpY2FsbHkgYW5kIG11c3Qgbm90IGJlXG4gICAgLy8gb3ZlcndyaXR0ZW4gd2hpbGUgY29tcG9zaXRpb24gY29udGludWVzLlxuICAgIGlmICghY3VycmVudENvbXBvc2l0aW9uICYmIGV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0KSB7XG4gICAgICBjdXJyZW50Q29tcG9zaXRpb24gPSBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUuZ2V0UG9vbGVkKHRvcExldmVsVGFyZ2V0KTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZCkge1xuICAgICAgaWYgKGN1cnJlbnRDb21wb3NpdGlvbikge1xuICAgICAgICBmYWxsYmFja0RhdGEgPSBjdXJyZW50Q29tcG9zaXRpb24uZ2V0RGF0YSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZSwgdG9wTGV2ZWxUYXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICBpZiAoZmFsbGJhY2tEYXRhKSB7XG4gICAgLy8gSW5qZWN0IGRhdGEgZ2VuZXJhdGVkIGZyb20gZmFsbGJhY2sgcGF0aCBpbnRvIHRoZSBzeW50aGV0aWMgZXZlbnQuXG4gICAgLy8gVGhpcyBtYXRjaGVzIHRoZSBwcm9wZXJ0eSBvZiBuYXRpdmUgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZS5cbiAgICBldmVudC5kYXRhID0gZmFsbGJhY2tEYXRhO1xuICB9IGVsc2Uge1xuICAgIHZhciBjdXN0b21EYXRhID0gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCk7XG4gICAgaWYgKGN1c3RvbURhdGEgIT09IG51bGwpIHtcbiAgICAgIGV2ZW50LmRhdGEgPSBjdXN0b21EYXRhO1xuICAgIH1cbiAgfVxuXG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gIHJldHVybiBldmVudDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgc3RyaW5nIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBgYmVmb3JlSW5wdXRgIGV2ZW50LlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQ6XG4gICAgICByZXR1cm4gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCk7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgICAgLyoqXG4gICAgICAgKiBJZiBuYXRpdmUgYHRleHRJbnB1dGAgZXZlbnRzIGFyZSBhdmFpbGFibGUsIG91ciBnb2FsIGlzIHRvIG1ha2VcbiAgICAgICAqIHVzZSBvZiB0aGVtLiBIb3dldmVyLCB0aGVyZSBpcyBhIHNwZWNpYWwgY2FzZTogdGhlIHNwYWNlYmFyIGtleS5cbiAgICAgICAqIEluIFdlYmtpdCwgcHJldmVudGluZyBkZWZhdWx0IG9uIGEgc3BhY2ViYXIgYHRleHRJbnB1dGAgZXZlbnRcbiAgICAgICAqIGNhbmNlbHMgY2hhcmFjdGVyIGluc2VydGlvbiwgYnV0IGl0ICphbHNvKiBjYXVzZXMgdGhlIGJyb3dzZXJcbiAgICAgICAqIHRvIGZhbGwgYmFjayB0byBpdHMgZGVmYXVsdCBzcGFjZWJhciBiZWhhdmlvciBvZiBzY3JvbGxpbmcgdGhlXG4gICAgICAgKiBwYWdlLlxuICAgICAgICpcbiAgICAgICAqIFRyYWNraW5nIGF0OlxuICAgICAgICogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM1NTEwM1xuICAgICAgICpcbiAgICAgICAqIFRvIGF2b2lkIHRoaXMgaXNzdWUsIHVzZSB0aGUga2V5cHJlc3MgZXZlbnQgYXMgaWYgbm8gYHRleHRJbnB1dGBcbiAgICAgICAqIGV2ZW50IGlzIGF2YWlsYWJsZS5cbiAgICAgICAqL1xuICAgICAgdmFyIHdoaWNoID0gbmF0aXZlRXZlbnQud2hpY2g7XG4gICAgICBpZiAod2hpY2ggIT09IFNQQUNFQkFSX0NPREUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGhhc1NwYWNlS2V5cHJlc3MgPSB0cnVlO1xuICAgICAgcmV0dXJuIFNQQUNFQkFSX0NIQVI7XG5cbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVGV4dElucHV0OlxuICAgICAgLy8gUmVjb3JkIHRoZSBjaGFyYWN0ZXJzIHRvIGJlIGFkZGVkIHRvIHRoZSBET00uXG4gICAgICB2YXIgY2hhcnMgPSBuYXRpdmVFdmVudC5kYXRhO1xuXG4gICAgICAvLyBJZiBpdCdzIGEgc3BhY2ViYXIgY2hhcmFjdGVyLCBhc3N1bWUgdGhhdCB3ZSBoYXZlIGFscmVhZHkgaGFuZGxlZFxuICAgICAgLy8gaXQgYXQgdGhlIGtleXByZXNzIGxldmVsIGFuZCBiYWlsIGltbWVkaWF0ZWx5LiBBbmRyb2lkIENocm9tZVxuICAgICAgLy8gZG9lc24ndCBnaXZlIHVzIGtleWNvZGVzLCBzbyB3ZSBuZWVkIHRvIGJsYWNrbGlzdCBpdC5cbiAgICAgIGlmIChjaGFycyA9PT0gU1BBQ0VCQVJfQ0hBUiAmJiBoYXNTcGFjZUtleXByZXNzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2hhcnM7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgLy8gRm9yIG90aGVyIG5hdGl2ZSBldmVudCB0eXBlcywgZG8gbm90aGluZy5cbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogRm9yIGJyb3dzZXJzIHRoYXQgZG8gbm90IHByb3ZpZGUgdGhlIGB0ZXh0SW5wdXRgIGV2ZW50LCBleHRyYWN0IHRoZVxuICogYXBwcm9wcmlhdGUgc3RyaW5nIHRvIHVzZSBmb3IgU3ludGhldGljSW5wdXRFdmVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgZmFsbGJhY2sgc3RyaW5nIGZvciB0aGlzIGBiZWZvcmVJbnB1dGAgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIC8vIElmIHdlIGFyZSBjdXJyZW50bHkgY29tcG9zaW5nIChJTUUpIGFuZCB1c2luZyBhIGZhbGxiYWNrIHRvIGRvIHNvLFxuICAvLyB0cnkgdG8gZXh0cmFjdCB0aGUgY29tcG9zZWQgY2hhcmFjdGVycyBmcm9tIHRoZSBmYWxsYmFjayBvYmplY3QuXG4gIGlmIChjdXJyZW50Q29tcG9zaXRpb24pIHtcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kIHx8IGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgICAgdmFyIGNoYXJzID0gY3VycmVudENvbXBvc2l0aW9uLmdldERhdGEoKTtcbiAgICAgIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5yZWxlYXNlKGN1cnJlbnRDb21wb3NpdGlvbik7XG4gICAgICBjdXJyZW50Q29tcG9zaXRpb24gPSBudWxsO1xuICAgICAgcmV0dXJuIGNoYXJzO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlOlxuICAgICAgLy8gSWYgYSBwYXN0ZSBldmVudCBvY2N1cnMgYWZ0ZXIgYSBrZXlwcmVzcywgdGhyb3cgb3V0IHRoZSBpbnB1dFxuICAgICAgLy8gY2hhcnMuIFBhc3RlIGV2ZW50cyBzaG91bGQgbm90IGxlYWQgdG8gQmVmb3JlSW5wdXQgZXZlbnRzLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgICAgLyoqXG4gICAgICAgKiBBcyBvZiB2MjcsIEZpcmVmb3ggbWF5IGZpcmUga2V5cHJlc3MgZXZlbnRzIGV2ZW4gd2hlbiBubyBjaGFyYWN0ZXJcbiAgICAgICAqIHdpbGwgYmUgaW5zZXJ0ZWQuIEEgZmV3IHBvc3NpYmlsaXRpZXM6XG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIGAwYC4gQXJyb3cga2V5cywgRXNjIGtleSwgZXRjLlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyB0aGUgcHJlc3NlZCBrZXkgY29kZSwgYnV0IG5vIGNoYXIgaXMgYXZhaWxhYmxlLlxuICAgICAgICogICBFeDogJ0FsdEdyICsgZGAgaW4gUG9saXNoLiBUaGVyZSBpcyBubyBtb2RpZmllZCBjaGFyYWN0ZXIgZm9yXG4gICAgICAgKiAgIHRoaXMga2V5IGNvbWJpbmF0aW9uIGFuZCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQgaW50byB0aGVcbiAgICAgICAqICAgZG9jdW1lbnQsIGJ1dCBGRiBmaXJlcyB0aGUga2V5cHJlc3MgZm9yIGNoYXIgY29kZSBgMTAwYCBhbnl3YXkuXG4gICAgICAgKiAgIE5vIGBpbnB1dGAgZXZlbnQgd2lsbCBvY2N1ci5cbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgdGhlIHByZXNzZWQga2V5IGNvZGUsIGJ1dCBhIGNvbW1hbmQgY29tYmluYXRpb24gaXNcbiAgICAgICAqICAgYmVpbmcgdXNlZC4gRXg6IGBDbWQrQ2AuIE5vIGNoYXJhY3RlciBpcyBpbnNlcnRlZCwgYW5kIG5vXG4gICAgICAgKiAgIGBpbnB1dGAgZXZlbnQgd2lsbCBvY2N1ci5cbiAgICAgICAqL1xuICAgICAgaWYgKG5hdGl2ZUV2ZW50LndoaWNoICYmICFpc0tleXByZXNzQ29tbWFuZChuYXRpdmVFdmVudCkpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUobmF0aXZlRXZlbnQud2hpY2gpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kOlxuICAgICAgcmV0dXJuIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhID8gbnVsbCA6IG5hdGl2ZUV2ZW50LmRhdGE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogRXh0cmFjdCBhIFN5bnRoZXRpY0lucHV0RXZlbnQgZm9yIGBiZWZvcmVJbnB1dGAsIGJhc2VkIG9uIGVpdGhlciBuYXRpdmVcbiAqIGB0ZXh0SW5wdXRgIG9yIGZhbGxiYWNrIGJlaGF2aW9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHs/b2JqZWN0fSBBIFN5bnRoZXRpY0lucHV0RXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RCZWZvcmVJbnB1dEV2ZW50KHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICB2YXIgY2hhcnM7XG5cbiAgaWYgKGNhblVzZVRleHRJbnB1dEV2ZW50KSB7XG4gICAgY2hhcnMgPSBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICB9IGVsc2Uge1xuICAgIGNoYXJzID0gZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICB9XG5cbiAgLy8gSWYgbm8gY2hhcmFjdGVycyBhcmUgYmVpbmcgaW5zZXJ0ZWQsIG5vIEJlZm9yZUlucHV0IGV2ZW50IHNob3VsZFxuICAvLyBiZSBmaXJlZC5cbiAgaWYgKCFjaGFycykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGV2ZW50ID0gU3ludGhldGljSW5wdXRFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5iZWZvcmVJbnB1dCwgdG9wTGV2ZWxUYXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICBldmVudC5kYXRhID0gY2hhcnM7XG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gIHJldHVybiBldmVudDtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gYG9uQmVmb3JlSW5wdXRgIGV2ZW50IHRvIG1hdGNoXG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDEzMTEwNS8jZXZlbnRzLWlucHV0ZXZlbnRzLlxuICpcbiAqIFRoaXMgZXZlbnQgcGx1Z2luIGlzIGJhc2VkIG9uIHRoZSBuYXRpdmUgYHRleHRJbnB1dGAgZXZlbnRcbiAqIGF2YWlsYWJsZSBpbiBDaHJvbWUsIFNhZmFyaSwgT3BlcmEsIGFuZCBJRS4gVGhpcyBldmVudCBmaXJlcyBhZnRlclxuICogYG9uS2V5UHJlc3NgIGFuZCBgb25Db21wb3NpdGlvbkVuZGAsIGJ1dCBiZWZvcmUgYG9uSW5wdXRgLlxuICpcbiAqIGBiZWZvcmVJbnB1dGAgaXMgc3BlYydkIGJ1dCBub3QgaW1wbGVtZW50ZWQgaW4gYW55IGJyb3dzZXJzLCBhbmRcbiAqIHRoZSBgaW5wdXRgIGV2ZW50IGRvZXMgbm90IHByb3ZpZGUgYW55IHVzZWZ1bCBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGhhc1xuICogYWN0dWFsbHkgYmVlbiBhZGRlZCwgY29udHJhcnkgdG8gdGhlIHNwZWMuIFRodXMsIGB0ZXh0SW5wdXRgIGlzIHRoZSBiZXN0XG4gKiBhdmFpbGFibGUgZXZlbnQgdG8gaWRlbnRpZnkgdGhlIGNoYXJhY3RlcnMgdGhhdCBoYXZlIGFjdHVhbGx5IGJlZW4gaW5zZXJ0ZWRcbiAqIGludG8gdGhlIHRhcmdldCBub2RlLlxuICpcbiAqIFRoaXMgcGx1Z2luIGlzIGFsc28gcmVzcG9uc2libGUgZm9yIGVtaXR0aW5nIGBjb21wb3NpdGlvbmAgZXZlbnRzLCB0aHVzXG4gKiBhbGxvd2luZyB1cyB0byBzaGFyZSBjb21wb3NpdGlvbiBmYWxsYmFjayBjb2RlIGZvciBib3RoIGBiZWZvcmVJbnB1dGAgYW5kXG4gKiBgY29tcG9zaXRpb25gIGV2ZW50IHR5cGVzLlxuICovXG52YXIgQmVmb3JlSW5wdXRFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICByZXR1cm4gW2V4dHJhY3RDb21wb3NpdGlvbkV2ZW50KHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCksIGV4dHJhY3RCZWZvcmVJbnB1dEV2ZW50KHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCldO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJlZm9yZUlucHV0RXZlbnRQbHVnaW47IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENTU1Byb3BlcnR5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENTUyBwcm9wZXJ0aWVzIHdoaWNoIGFjY2VwdCBudW1iZXJzIGJ1dCBhcmUgbm90IGluIHVuaXRzIG9mIFwicHhcIi5cbiAqL1xudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiB0cnVlLFxuICBib3hGbGV4OiB0cnVlLFxuICBib3hGbGV4R3JvdXA6IHRydWUsXG4gIGJveE9yZGluYWxHcm91cDogdHJ1ZSxcbiAgY29sdW1uQ291bnQ6IHRydWUsXG4gIGZsZXg6IHRydWUsXG4gIGZsZXhHcm93OiB0cnVlLFxuICBmbGV4UG9zaXRpdmU6IHRydWUsXG4gIGZsZXhTaHJpbms6IHRydWUsXG4gIGZsZXhOZWdhdGl2ZTogdHJ1ZSxcbiAgZmxleE9yZGVyOiB0cnVlLFxuICBmb250V2VpZ2h0OiB0cnVlLFxuICBsaW5lQ2xhbXA6IHRydWUsXG4gIGxpbmVIZWlnaHQ6IHRydWUsXG4gIG9wYWNpdHk6IHRydWUsXG4gIG9yZGVyOiB0cnVlLFxuICBvcnBoYW5zOiB0cnVlLFxuICB0YWJTaXplOiB0cnVlLFxuICB3aWRvd3M6IHRydWUsXG4gIHpJbmRleDogdHJ1ZSxcbiAgem9vbTogdHJ1ZSxcblxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiB0cnVlLFxuICBzdG9wT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogdHJ1ZSxcbiAgc3Ryb2tlT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlV2lkdGg6IHRydWVcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCB2ZW5kb3Itc3BlY2lmaWMgcHJlZml4LCBlZzogV2Via2l0XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHN0eWxlIG5hbWUsIGVnOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAqIEByZXR1cm4ge3N0cmluZ30gc3R5bGUgbmFtZSBwcmVmaXhlZCB3aXRoIGBwcmVmaXhgLCBwcm9wZXJseSBjYW1lbENhc2VkLCBlZzpcbiAqIFdlYmtpdFRyYW5zaXRpb25EdXJhdGlvblxuICovXG5mdW5jdGlvbiBwcmVmaXhLZXkocHJlZml4LCBrZXkpIHtcbiAgcmV0dXJuIHByZWZpeCArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHJpbmcoMSk7XG59XG5cbi8qKlxuICogU3VwcG9ydCBzdHlsZSBuYW1lcyB0aGF0IG1heSBjb21lIHBhc3NlZCBpbiBwcmVmaXhlZCBieSBhZGRpbmcgcGVybXV0YXRpb25zXG4gKiBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cbnZhciBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ21zJywgJ01veicsICdPJ107XG5cbi8vIFVzaW5nIE9iamVjdC5rZXlzIGhlcmUsIG9yIGVsc2UgdGhlIHZhbmlsbGEgZm9yLWluIGxvb3AgbWFrZXMgSUU4IGdvIGludG8gYW5cbi8vIGluZmluaXRlIGxvb3AsIGJlY2F1c2UgaXQgaXRlcmF0ZXMgb3ZlciB0aGUgbmV3bHkgYWRkZWQgcHJvcHMgdG9vLlxuT2JqZWN0LmtleXMoaXNVbml0bGVzc051bWJlcikuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICBwcmVmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICBpc1VuaXRsZXNzTnVtYmVyW3ByZWZpeEtleShwcmVmaXgsIHByb3ApXSA9IGlzVW5pdGxlc3NOdW1iZXJbcHJvcF07XG4gIH0pO1xufSk7XG5cbi8qKlxuICogTW9zdCBzdHlsZSBwcm9wZXJ0aWVzIGNhbiBiZSB1bnNldCBieSBkb2luZyAuc3R5bGVbcHJvcF0gPSAnJyBidXQgSUU4XG4gKiBkb2Vzbid0IGxpa2UgZG9pbmcgdGhhdCB3aXRoIHNob3J0aGFuZCBwcm9wZXJ0aWVzIHNvIGZvciB0aGUgcHJvcGVydGllcyB0aGF0XG4gKiBJRTggYnJlYWtzIG9uLCB3aGljaCBhcmUgbGlzdGVkIGhlcmUsIHdlIGluc3RlYWQgdW5zZXQgZWFjaCBvZiB0aGVcbiAqIGluZGl2aWR1YWwgcHJvcGVydGllcy4gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzg1LlxuICogVGhlIDQtdmFsdWUgJ2Nsb2NrJyBwcm9wZXJ0aWVzIGxpa2UgbWFyZ2luLCBwYWRkaW5nLCBib3JkZXItd2lkdGggc2VlbSB0b1xuICogYmVoYXZlIHdpdGhvdXQgYW55IHByb2JsZW1zLiBDdXJpb3VzbHksIGxpc3Qtc3R5bGUgd29ya3MgdG9vIHdpdGhvdXQgYW55XG4gKiBzcGVjaWFsIHByb2RkaW5nLlxuICovXG52YXIgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zID0ge1xuICBiYWNrZ3JvdW5kOiB7XG4gICAgYmFja2dyb3VuZEF0dGFjaG1lbnQ6IHRydWUsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0cnVlLFxuICAgIGJhY2tncm91bmRJbWFnZTogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25YOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblk6IHRydWUsXG4gICAgYmFja2dyb3VuZFJlcGVhdDogdHJ1ZVxuICB9LFxuICBiYWNrZ3JvdW5kUG9zaXRpb246IHtcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25YOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblk6IHRydWVcbiAgfSxcbiAgYm9yZGVyOiB7XG4gICAgYm9yZGVyV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyQm90dG9tOiB7XG4gICAgYm9yZGVyQm90dG9tV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyQm90dG9tU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyQm90dG9tQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyTGVmdDoge1xuICAgIGJvcmRlckxlZnRXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJMZWZ0U3R5bGU6IHRydWUsXG4gICAgYm9yZGVyTGVmdENvbG9yOiB0cnVlXG4gIH0sXG4gIGJvcmRlclJpZ2h0OiB7XG4gICAgYm9yZGVyUmlnaHRXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJSaWdodFN0eWxlOiB0cnVlLFxuICAgIGJvcmRlclJpZ2h0Q29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyVG9wOiB7XG4gICAgYm9yZGVyVG9wV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyVG9wU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyVG9wQ29sb3I6IHRydWVcbiAgfSxcbiAgZm9udDoge1xuICAgIGZvbnRTdHlsZTogdHJ1ZSxcbiAgICBmb250VmFyaWFudDogdHJ1ZSxcbiAgICBmb250V2VpZ2h0OiB0cnVlLFxuICAgIGZvbnRTaXplOiB0cnVlLFxuICAgIGxpbmVIZWlnaHQ6IHRydWUsXG4gICAgZm9udEZhbWlseTogdHJ1ZVxuICB9LFxuICBvdXRsaW5lOiB7XG4gICAgb3V0bGluZVdpZHRoOiB0cnVlLFxuICAgIG91dGxpbmVTdHlsZTogdHJ1ZSxcbiAgICBvdXRsaW5lQ29sb3I6IHRydWVcbiAgfVxufTtcblxudmFyIENTU1Byb3BlcnR5ID0ge1xuICBpc1VuaXRsZXNzTnVtYmVyOiBpc1VuaXRsZXNzTnVtYmVyLFxuICBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnM6IHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDU1NQcm9wZXJ0eTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ1NTUHJvcGVydHlPcGVyYXRpb25zXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENTU1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9DU1NQcm9wZXJ0eScpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xuXG52YXIgY2FtZWxpemVTdHlsZU5hbWUgPSByZXF1aXJlKCdmYmpzL2xpYi9jYW1lbGl6ZVN0eWxlTmFtZScpO1xudmFyIGRhbmdlcm91c1N0eWxlVmFsdWUgPSByZXF1aXJlKCcuL2Rhbmdlcm91c1N0eWxlVmFsdWUnKTtcbnZhciBoeXBoZW5hdGVTdHlsZU5hbWUgPSByZXF1aXJlKCdmYmpzL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUnKTtcbnZhciBtZW1vaXplU3RyaW5nT25seSA9IHJlcXVpcmUoJ2ZianMvbGliL21lbW9pemVTdHJpbmdPbmx5Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSBtZW1vaXplU3RyaW5nT25seShmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gIHJldHVybiBoeXBoZW5hdGVTdHlsZU5hbWUoc3R5bGVOYW1lKTtcbn0pO1xuXG52YXIgaGFzU2hvcnRoYW5kUHJvcGVydHlCdWcgPSBmYWxzZTtcbnZhciBzdHlsZUZsb2F0QWNjZXNzb3IgPSAnY3NzRmxvYXQnO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB2YXIgdGVtcFN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHRyeSB7XG4gICAgLy8gSUU4IHRocm93cyBcIkludmFsaWQgYXJndW1lbnQuXCIgaWYgcmVzZXR0aW5nIHNob3J0aGFuZCBzdHlsZSBwcm9wZXJ0aWVzLlxuICAgIHRlbXBTdHlsZS5mb250ID0gJyc7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1ZyA9IHRydWU7XG4gIH1cbiAgLy8gSUU4IG9ubHkgc3VwcG9ydHMgYWNjZXNzaW5nIGNzc0Zsb2F0IChzdGFuZGFyZCkgYXMgc3R5bGVGbG9hdFxuICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmNzc0Zsb2F0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsZUZsb2F0QWNjZXNzb3IgPSAnc3R5bGVGbG9hdCc7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gJ21zVHJhbnNmb3JtJyBpcyBjb3JyZWN0LCBidXQgdGhlIG90aGVyIHByZWZpeGVzIHNob3VsZCBiZSBjYXBpdGFsaXplZFxuICB2YXIgYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuID0gL14oPzp3ZWJraXR8bW96fG8pW0EtWl0vO1xuXG4gIC8vIHN0eWxlIHZhbHVlcyBzaG91bGRuJ3QgY29udGFpbiBhIHNlbWljb2xvblxuICB2YXIgYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuID0gLztcXHMqJC87XG5cbiAgdmFyIHdhcm5lZFN0eWxlTmFtZXMgPSB7fTtcbiAgdmFyIHdhcm5lZFN0eWxlVmFsdWVzID0ge307XG5cbiAgdmFyIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVbnN1cHBvcnRlZCBzdHlsZSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPycsIG5hbWUsIGNhbWVsaXplU3R5bGVOYW1lKG5hbWUpKSA6IHVuZGVmaW5lZDtcbiAgfTtcblxuICB2YXIgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVbnN1cHBvcnRlZCB2ZW5kb3ItcHJlZml4ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8nLCBuYW1lLCBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSkgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdmFyIHdhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbiA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh3YXJuZWRTdHlsZVZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgJiYgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1N0eWxlIHByb3BlcnR5IHZhbHVlcyBzaG91bGRuXFwndCBjb250YWluIGEgc2VtaWNvbG9uLiAnICsgJ1RyeSBcIiVzOiAlc1wiIGluc3RlYWQuJywgbmFtZSwgdmFsdWUucmVwbGFjZShiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4sICcnKSkgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHZhciB3YXJuVmFsaWRTdHlsZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChuYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZShuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybi50ZXN0KG5hbWUpKSB7XG4gICAgICB3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUobmFtZSk7XG4gICAgfSBlbHNlIGlmIChiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4udGVzdCh2YWx1ZSkpIHtcbiAgICAgIHdhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbihuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBDU1MgcHJvcGVydGllcy5cbiAqL1xudmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogU2VyaWFsaXplcyBhIG1hcHBpbmcgb2Ygc3R5bGUgcHJvcGVydGllcyBmb3IgdXNlIGFzIGlubGluZSBzdHlsZXM6XG4gICAqXG4gICAqICAgPiBjcmVhdGVNYXJrdXBGb3JTdHlsZXMoe3dpZHRoOiAnMjAwcHgnLCBoZWlnaHQ6IDB9KVxuICAgKiAgIFwid2lkdGg6MjAwcHg7aGVpZ2h0OjA7XCJcbiAgICpcbiAgICogVW5kZWZpbmVkIHZhbHVlcyBhcmUgaWdub3JlZCBzbyB0aGF0IGRlY2xhcmF0aXZlIHByb2dyYW1taW5nIGlzIGVhc2llci5cbiAgICogVGhlIHJlc3VsdCBzaG91bGQgYmUgSFRNTC1lc2NhcGVkIGJlZm9yZSBpbnNlcnRpb24gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JTdHlsZXM6IGZ1bmN0aW9uIChzdHlsZXMpIHtcbiAgICB2YXIgc2VyaWFsaXplZCA9ICcnO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgc3R5bGVWYWx1ZSA9IHN0eWxlc1tzdHlsZU5hbWVdO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FyblZhbGlkU3R5bGUoc3R5bGVOYW1lLCBzdHlsZVZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHlsZVZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgc2VyaWFsaXplZCArPSBwcm9jZXNzU3R5bGVOYW1lKHN0eWxlTmFtZSkgKyAnOic7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlVmFsdWUpICsgJzsnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2VyaWFsaXplZCB8fCBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBmb3IgbXVsdGlwbGUgc3R5bGVzIG9uIGEgbm9kZS4gIElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkIGFzXG4gICAqICcnIChlbXB0eSBzdHJpbmcpLCB0aGUgY29ycmVzcG9uZGluZyBzdHlsZSBwcm9wZXJ0eSB3aWxsIGJlIHVuc2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtvYmplY3R9IHN0eWxlc1xuICAgKi9cbiAgc2V0VmFsdWVGb3JTdHlsZXM6IGZ1bmN0aW9uIChub2RlLCBzdHlsZXMpIHtcbiAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuVmFsaWRTdHlsZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdKTtcbiAgICAgIH1cbiAgICAgIHZhciBzdHlsZVZhbHVlID0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdKTtcbiAgICAgIGlmIChzdHlsZU5hbWUgPT09ICdmbG9hdCcpIHtcbiAgICAgICAgc3R5bGVOYW1lID0gc3R5bGVGbG9hdEFjY2Vzc29yO1xuICAgICAgfVxuICAgICAgaWYgKHN0eWxlVmFsdWUpIHtcbiAgICAgICAgc3R5bGVbc3R5bGVOYW1lXSA9IHN0eWxlVmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZXhwYW5zaW9uID0gaGFzU2hvcnRoYW5kUHJvcGVydHlCdWcgJiYgQ1NTUHJvcGVydHkuc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zW3N0eWxlTmFtZV07XG4gICAgICAgIGlmIChleHBhbnNpb24pIHtcbiAgICAgICAgICAvLyBTaG9ydGhhbmQgcHJvcGVydHkgdGhhdCBJRTggd29uJ3QgbGlrZSB1bnNldHRpbmcsIHNvIHVuc2V0IGVhY2hcbiAgICAgICAgICAvLyBjb21wb25lbnQgdG8gcGxhY2F0ZSBpdFxuICAgICAgICAgIGZvciAodmFyIGluZGl2aWR1YWxTdHlsZU5hbWUgaW4gZXhwYW5zaW9uKSB7XG4gICAgICAgICAgICBzdHlsZVtpbmRpdmlkdWFsU3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHlsZVtzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKENTU1Byb3BlcnR5T3BlcmF0aW9ucywgJ0NTU1Byb3BlcnR5T3BlcmF0aW9ucycsIHtcbiAgc2V0VmFsdWVGb3JTdHlsZXM6ICdzZXRWYWx1ZUZvclN0eWxlcydcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU1Byb3BlcnR5T3BlcmF0aW9uczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ2FsbGJhY2tRdWV1ZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCBwc2V1ZG8tZXZlbnQgbW9kdWxlIHRvIGhlbHAga2VlcCB0cmFjayBvZiBjb21wb25lbnRzIHdhaXRpbmcgdG9cbiAqIGJlIG5vdGlmaWVkIHdoZW4gdGhlaXIgRE9NIHJlcHJlc2VudGF0aW9ucyBhcmUgYXZhaWxhYmxlIGZvciB1c2UuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRzIGBQb29sZWRDbGFzc2AsIHNvIHlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byBpbnN0YW50aWF0ZSB0aGlzLlxuICogSW5zdGVhZCwgdXNlIGBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpYC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RNb3VudFJlYWR5XG4gKiBAaW1wbGVtZW50cyBQb29sZWRDbGFzc1xuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIENhbGxiYWNrUXVldWUoKSB7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbn1cblxuYXNzaWduKENhbGxiYWNrUXVldWUucHJvdG90eXBlLCB7XG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGBub3RpZnlBbGxgIGlzIGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIEludm9rZWQgd2hlbiBgbm90aWZ5QWxsYCBpcyBpbnZva2VkLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IGNvbnRleHQgQ29udGV4dCB0byBjYWxsIGBjYWxsYmFja2Agd2l0aC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwgW107XG4gICAgdGhpcy5fY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cyB8fCBbXTtcbiAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgdGhpcy5fY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlcyBhbGwgZW5xdWV1ZWQgY2FsbGJhY2tzIGFuZCBjbGVhcnMgdGhlIHF1ZXVlLiBUaGlzIGlzIGludm9rZWQgYWZ0ZXJcbiAgICogdGhlIERPTSByZXByZXNlbnRhdGlvbiBvZiBhIGNvbXBvbmVudCBoYXMgYmVlbiBjcmVhdGVkIG9yIHVwZGF0ZWQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbm90aWZ5QWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcztcbiAgICB2YXIgY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cztcbiAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAhKGNhbGxiYWNrcy5sZW5ndGggPT09IGNvbnRleHRzLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzbWF0Y2hlZCBsaXN0IG9mIGNvbnRleHRzIGluIGNhbGxiYWNrIHF1ZXVlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxiYWNrc1tpXS5jYWxsKGNvbnRleHRzW2ldKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgICAgY29udGV4dHMubGVuZ3RoID0gMDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgaW50ZXJuYWwgcXVldWUuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcy5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxufSk7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDYWxsYmFja1F1ZXVlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYWxsYmFja1F1ZXVlOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDaGFuZ2VFdmVudFBsdWdpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZSgnLi9FdmVudENvbnN0YW50cycpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCcuL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcblxudmFyIGdldEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9nZXRFdmVudFRhcmdldCcpO1xudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRTdXBwb3J0ZWQnKTtcbnZhciBpc1RleHRJbnB1dEVsZW1lbnQgPSByZXF1aXJlKCcuL2lzVGV4dElucHV0RWxlbWVudCcpO1xudmFyIGtleU9mID0gcmVxdWlyZSgnZmJqcy9saWIva2V5T2YnKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgY2hhbmdlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25DaGFuZ2U6IG51bGwgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkNoYW5nZUNhcHR1cmU6IG51bGwgfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW3RvcExldmVsVHlwZXMudG9wQmx1ciwgdG9wTGV2ZWxUeXBlcy50b3BDaGFuZ2UsIHRvcExldmVsVHlwZXMudG9wQ2xpY2ssIHRvcExldmVsVHlwZXMudG9wRm9jdXMsIHRvcExldmVsVHlwZXMudG9wSW5wdXQsIHRvcExldmVsVHlwZXMudG9wS2V5RG93biwgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCwgdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2VdXG4gIH1cbn07XG5cbi8qKlxuICogRm9yIElFIHNoaW1zXG4gKi9cbnZhciBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudFZhbHVlUHJvcCA9IG51bGw7XG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjaGFuZ2VgIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVzZUNoYW5nZUV2ZW50KGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ3NlbGVjdCcgfHwgbm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgZWxlbS50eXBlID09PSAnZmlsZSc7XG59XG5cbnZhciBkb2VzQ2hhbmdlRXZlbnRCdWJibGUgPSBmYWxzZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gU2VlIGBoYW5kbGVDaGFuZ2VgIGNvbW1lbnQgYmVsb3dcbiAgZG9lc0NoYW5nZUV2ZW50QnViYmxlID0gaXNFdmVudFN1cHBvcnRlZCgnY2hhbmdlJykgJiYgKCEoJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQpIHx8IGRvY3VtZW50LmRvY3VtZW50TW9kZSA+IDgpO1xufVxuXG5mdW5jdGlvbiBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLmNoYW5nZSwgYWN0aXZlRWxlbWVudElELCBuYXRpdmVFdmVudCwgZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpKTtcbiAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcblxuICAvLyBJZiBjaGFuZ2UgYW5kIHByb3BlcnR5Y2hhbmdlIGJ1YmJsZWQsIHdlJ2QganVzdCBiaW5kIHRvIGl0IGxpa2UgYWxsIHRoZVxuICAvLyBvdGhlciBldmVudHMgYW5kIGhhdmUgaXQgZ28gdGhyb3VnaCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuIFNpbmNlIGl0XG4gIC8vIGRvZXNuJ3QsIHdlIG1hbnVhbGx5IGxpc3RlbiBmb3IgdGhlIGV2ZW50cyBhbmQgc28gd2UgaGF2ZSB0byBlbnF1ZXVlIGFuZFxuICAvLyBwcm9jZXNzIHRoZSBhYnN0cmFjdCBldmVudCBtYW51YWxseS5cbiAgLy9cbiAgLy8gQmF0Y2hpbmcgaXMgbmVjZXNzYXJ5IGhlcmUgaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgYWxsIGV2ZW50IGhhbmRsZXJzIHJ1blxuICAvLyBiZWZvcmUgdGhlIG5leHQgcmVyZW5kZXIgKGluY2x1ZGluZyBldmVudCBoYW5kbGVycyBhdHRhY2hlZCB0byBhbmNlc3RvclxuICAvLyBlbGVtZW50cyBpbnN0ZWFkIG9mIGRpcmVjdGx5IG9uIHRoZSBpbnB1dCkuIFdpdGhvdXQgdGhpcywgY29udHJvbGxlZFxuICAvLyBjb21wb25lbnRzIGRvbid0IHdvcmsgcHJvcGVybHkgaW4gY29uanVuY3Rpb24gd2l0aCBldmVudCBidWJibGluZyBiZWNhdXNlXG4gIC8vIHRoZSBjb21wb25lbnQgaXMgcmVyZW5kZXJlZCBhbmQgdGhlIHZhbHVlIHJldmVydGVkIGJlZm9yZSBhbGwgdGhlIGV2ZW50XG4gIC8vIGhhbmRsZXJzIGNhbiBydW4uIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzcwOC5cbiAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKHJ1bkV2ZW50SW5CYXRjaCwgZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBydW5FdmVudEluQmF0Y2goZXZlbnQpIHtcbiAgRXZlbnRQbHVnaW5IdWIuZW5xdWV1ZUV2ZW50cyhldmVudCk7XG4gIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gc3RhcnRXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KHRhcmdldCwgdGFyZ2V0SUQpIHtcbiAgYWN0aXZlRWxlbWVudCA9IHRhcmdldDtcbiAgYWN0aXZlRWxlbWVudElEID0gdGFyZ2V0SUQ7XG4gIGFjdGl2ZUVsZW1lbnQuYXR0YWNoRXZlbnQoJ29uY2hhbmdlJywgbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCk7XG59XG5cbmZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCkge1xuICBpZiAoIWFjdGl2ZUVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYWN0aXZlRWxlbWVudC5kZXRhY2hFdmVudCgnb25jaGFuZ2UnLCBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KTtcbiAgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldElERm9yQ2hhbmdlRXZlbnQodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENoYW5nZSkge1xuICAgIHJldHVybiB0b3BMZXZlbFRhcmdldElEO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFOCh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wRm9jdXMpIHtcbiAgICAvLyBzdG9wV2F0Y2hpbmcoKSBzaG91bGQgYmUgYSBub29wIGhlcmUgYnV0IHdlIGNhbGwgaXQganVzdCBpbiBjYXNlIHdlXG4gICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuICAgIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCk7XG4gICAgc3RhcnRXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKTtcbiAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuICAgIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCk7XG4gIH1cbn1cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGlucHV0YCBldmVudFxuICovXG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gZmFsc2U7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIElFOSBjbGFpbXMgdG8gc3VwcG9ydCB0aGUgaW5wdXQgZXZlbnQgYnV0IGZhaWxzIHRvIHRyaWdnZXIgaXQgd2hlblxuICAvLyBkZWxldGluZyB0ZXh0LCBzbyB3ZSBpZ25vcmUgaXRzIGlucHV0IGV2ZW50c1xuICBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPSBpc0V2ZW50U3VwcG9ydGVkKCdpbnB1dCcpICYmICghKCdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50KSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA5KTtcbn1cblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFJlcGxhY2VtZW50IGdldHRlci9zZXR0ZXIgZm9yIHRoZSBgdmFsdWVgIHByb3BlcnR5IHRoYXQgZ2V0c1xuICogc2V0IG9uIHRoZSBhY3RpdmUgZWxlbWVudC5cbiAqL1xudmFyIG5ld1ZhbHVlUHJvcCA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AuZ2V0LmNhbGwodGhpcyk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbCkge1xuICAgIC8vIENhc3QgdG8gYSBzdHJpbmcgc28gd2UgY2FuIGRvIGVxdWFsaXR5IGNoZWNrcy5cbiAgICBhY3RpdmVFbGVtZW50VmFsdWUgPSAnJyArIHZhbDtcbiAgICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wLnNldC5jYWxsKHRoaXMsIHZhbCk7XG4gIH1cbn07XG5cbi8qKlxuICogKEZvciBvbGQgSUUuKSBTdGFydHMgdHJhY2tpbmcgcHJvcGVydHljaGFuZ2UgZXZlbnRzIG9uIHRoZSBwYXNzZWQtaW4gZWxlbWVudFxuICogYW5kIG92ZXJyaWRlIHRoZSB2YWx1ZSBwcm9wZXJ0eSBzbyB0aGF0IHdlIGNhbiBkaXN0aW5ndWlzaCB1c2VyIGV2ZW50cyBmcm9tXG4gKiB2YWx1ZSBjaGFuZ2VzIGluIEpTLlxuICovXG5mdW5jdGlvbiBzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UodGFyZ2V0LCB0YXJnZXRJRCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SUQgPSB0YXJnZXRJRDtcbiAgYWN0aXZlRWxlbWVudFZhbHVlID0gdGFyZ2V0LnZhbHVlO1xuICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQuY29uc3RydWN0b3IucHJvdG90eXBlLCAndmFsdWUnKTtcblxuICAvLyBOb3QgZ3VhcmRlZCBpbiBhIGNhbkRlZmluZVByb3BlcnR5IGNoZWNrOiBJRTggc3VwcG9ydHMgZGVmaW5lUHJvcGVydHkgb25seVxuICAvLyBvbiBET00gZWxlbWVudHNcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFjdGl2ZUVsZW1lbnQsICd2YWx1ZScsIG5ld1ZhbHVlUHJvcCk7XG4gIGFjdGl2ZUVsZW1lbnQuYXR0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSk7XG59XG5cbi8qKlxuICogKEZvciBvbGQgSUUuKSBSZW1vdmVzIHRoZSBldmVudCBsaXN0ZW5lcnMgZnJvbSB0aGUgY3VycmVudGx5LXRyYWNrZWQgZWxlbWVudCxcbiAqIGlmIGFueSBleGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCkge1xuICBpZiAoIWFjdGl2ZUVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBkZWxldGUgcmVzdG9yZXMgdGhlIG9yaWdpbmFsIHByb3BlcnR5IGRlZmluaXRpb25cbiAgZGVsZXRlIGFjdGl2ZUVsZW1lbnQudmFsdWU7XG4gIGFjdGl2ZUVsZW1lbnQuZGV0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSk7XG5cbiAgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IG51bGw7XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AgPSBudWxsO1xufVxuXG4vKipcbiAqIChGb3Igb2xkIElFLikgSGFuZGxlcyBhIHByb3BlcnR5Y2hhbmdlIGV2ZW50LCBzZW5kaW5nIGEgYGNoYW5nZWAgZXZlbnQgaWZcbiAqIHRoZSB2YWx1ZSBvZiB0aGUgYWN0aXZlIGVsZW1lbnQgaGFzIGNoYW5nZWQuXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZVByb3BlcnR5Q2hhbmdlKG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChuYXRpdmVFdmVudC5wcm9wZXJ0eU5hbWUgIT09ICd2YWx1ZScpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHZhbHVlID0gbmF0aXZlRXZlbnQuc3JjRWxlbWVudC52YWx1ZTtcbiAgaWYgKHZhbHVlID09PSBhY3RpdmVFbGVtZW50VmFsdWUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYWN0aXZlRWxlbWVudFZhbHVlID0gdmFsdWU7XG5cbiAgbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudChuYXRpdmVFdmVudCk7XG59XG5cbi8qKlxuICogSWYgYSBgY2hhbmdlYCBldmVudCBzaG91bGQgYmUgZmlyZWQsIHJldHVybnMgdGhlIHRhcmdldCdzIElELlxuICovXG5mdW5jdGlvbiBnZXRUYXJnZXRJREZvcklucHV0RXZlbnQodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcElucHV0KSB7XG4gICAgLy8gSW4gbW9kZXJuIGJyb3dzZXJzIChpLmUuLCBub3QgSUU4IG9yIElFOSksIHRoZSBpbnB1dCBldmVudCBpcyBleGFjdGx5XG4gICAgLy8gd2hhdCB3ZSB3YW50IHNvIGZhbGwgdGhyb3VnaCBoZXJlIGFuZCB0cmlnZ2VyIGFuIGFic3RyYWN0IGV2ZW50XG4gICAgcmV0dXJuIHRvcExldmVsVGFyZ2V0SUQ7XG4gIH1cbn1cblxuLy8gRm9yIElFOCBhbmQgSUU5LlxuZnVuY3Rpb24gaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudElFKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BGb2N1cykge1xuICAgIC8vIEluIElFOCwgd2UgY2FuIGNhcHR1cmUgYWxtb3N0IGFsbCAudmFsdWUgY2hhbmdlcyBieSBhZGRpbmcgYVxuICAgIC8vIHByb3BlcnR5Y2hhbmdlIGhhbmRsZXIgYW5kIGxvb2tpbmcgZm9yIGV2ZW50cyB3aXRoIHByb3BlcnR5TmFtZVxuICAgIC8vIGVxdWFsIHRvICd2YWx1ZSdcbiAgICAvLyBJbiBJRTksIHByb3BlcnR5Y2hhbmdlIGZpcmVzIGZvciBtb3N0IGlucHV0IGV2ZW50cyBidXQgaXMgYnVnZ3kgYW5kXG4gICAgLy8gZG9lc24ndCBmaXJlIHdoZW4gdGV4dCBpcyBkZWxldGVkLCBidXQgY29udmVuaWVudGx5LCBzZWxlY3Rpb25jaGFuZ2VcbiAgICAvLyBhcHBlYXJzIHRvIGZpcmUgaW4gYWxsIG9mIHRoZSByZW1haW5pbmcgY2FzZXMgc28gd2UgY2F0Y2ggdGhvc2UgYW5kXG4gICAgLy8gZm9yd2FyZCB0aGUgZXZlbnQgaWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkXG4gICAgLy8gSW4gZWl0aGVyIGNhc2UsIHdlIGRvbid0IHdhbnQgdG8gY2FsbCB0aGUgZXZlbnQgaGFuZGxlciBpZiB0aGUgdmFsdWVcbiAgICAvLyBpcyBjaGFuZ2VkIGZyb20gSlMgc28gd2UgcmVkZWZpbmUgYSBzZXR0ZXIgZm9yIGAudmFsdWVgIHRoYXQgdXBkYXRlc1xuICAgIC8vIG91ciBhY3RpdmVFbGVtZW50VmFsdWUgdmFyaWFibGUsIGFsbG93aW5nIHVzIHRvIGlnbm9yZSB0aG9zZSBjaGFuZ2VzXG4gICAgLy9cbiAgICAvLyBzdG9wV2F0Y2hpbmcoKSBzaG91bGQgYmUgYSBub29wIGhlcmUgYnV0IHdlIGNhbGwgaXQganVzdCBpbiBjYXNlIHdlXG4gICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gICAgc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKTtcbiAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gIH1cbn1cblxuLy8gRm9yIElFOCBhbmQgSUU5LlxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50SUUodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZSB8fCB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5VXAgfHwgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24pIHtcbiAgICAvLyBPbiB0aGUgc2VsZWN0aW9uY2hhbmdlIGV2ZW50LCB0aGUgdGFyZ2V0IGlzIGp1c3QgZG9jdW1lbnQgd2hpY2ggaXNuJ3RcbiAgICAvLyBoZWxwZnVsIGZvciB1cyBzbyBqdXN0IGNoZWNrIGFjdGl2ZUVsZW1lbnQgaW5zdGVhZC5cbiAgICAvL1xuICAgIC8vIDk5JSBvZiB0aGUgdGltZSwga2V5ZG93biBhbmQga2V5dXAgYXJlbid0IG5lY2Vzc2FyeS4gSUU4IGZhaWxzIHRvIGZpcmVcbiAgICAvLyBwcm9wZXJ0eWNoYW5nZSBvbiB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYWZ0ZXIgc2V0dGluZyBgdmFsdWVgIGZyb20gYVxuICAgIC8vIHNjcmlwdCBhbmQgZmlyZXMgb25seSBrZXlkb3duLCBrZXlwcmVzcywga2V5dXAuIENhdGNoaW5nIGtleXVwIHVzdWFsbHlcbiAgICAvLyBnZXRzIGl0IGFuZCBjYXRjaGluZyBrZXlkb3duIGxldHMgdXMgZmlyZSBhbiBldmVudCBmb3IgdGhlIGZpcnN0XG4gICAgLy8ga2V5c3Ryb2tlIGlmIHVzZXIgZG9lcyBhIGtleSByZXBlYXQgKGl0J2xsIGJlIGEgbGl0dGxlIGRlbGF5ZWQ6IHJpZ2h0XG4gICAgLy8gYmVmb3JlIHRoZSBzZWNvbmQga2V5c3Ryb2tlKS4gT3RoZXIgaW5wdXQgbWV0aG9kcyAoZS5nLiwgcGFzdGUpIHNlZW0gdG9cbiAgICAvLyBmaXJlIHNlbGVjdGlvbmNoYW5nZSBub3JtYWxseS5cbiAgICBpZiAoYWN0aXZlRWxlbWVudCAmJiBhY3RpdmVFbGVtZW50LnZhbHVlICE9PSBhY3RpdmVFbGVtZW50VmFsdWUpIHtcbiAgICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IGFjdGl2ZUVsZW1lbnQudmFsdWU7XG4gICAgICByZXR1cm4gYWN0aXZlRWxlbWVudElEO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFNFQ1RJT046IGhhbmRsZSBgY2xpY2tgIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVzZUNsaWNrRXZlbnQoZWxlbSkge1xuICAvLyBVc2UgdGhlIGBjbGlja2AgZXZlbnQgdG8gZGV0ZWN0IGNoYW5nZXMgdG8gY2hlY2tib3ggYW5kIHJhZGlvIGlucHV0cy5cbiAgLy8gVGhpcyBhcHByb2FjaCB3b3JrcyBhY3Jvc3MgYWxsIGJyb3dzZXJzLCB3aGVyZWFzIGBjaGFuZ2VgIGRvZXMgbm90IGZpcmVcbiAgLy8gdW50aWwgYGJsdXJgIGluIElFOC5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnICYmIChlbGVtLnR5cGUgPT09ICdjaGVja2JveCcgfHwgZWxlbS50eXBlID09PSAncmFkaW8nKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JDbGlja0V2ZW50KHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BDbGljaykge1xuICAgIHJldHVybiB0b3BMZXZlbFRhcmdldElEO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBwbHVnaW4gY3JlYXRlcyBhbiBgb25DaGFuZ2VgIGV2ZW50IHRoYXQgbm9ybWFsaXplcyBjaGFuZ2UgZXZlbnRzXG4gKiBhY3Jvc3MgZm9ybSBlbGVtZW50cy4gVGhpcyBldmVudCBmaXJlcyBhdCBhIHRpbWUgd2hlbiBpdCdzIHBvc3NpYmxlIHRvXG4gKiBjaGFuZ2UgdGhlIGVsZW1lbnQncyB2YWx1ZSB3aXRob3V0IHNlZWluZyBhIGZsaWNrZXIuXG4gKlxuICogU3VwcG9ydGVkIGVsZW1lbnRzIGFyZTpcbiAqIC0gaW5wdXQgKHNlZSBgaXNUZXh0SW5wdXRFbGVtZW50YClcbiAqIC0gdGV4dGFyZWFcbiAqIC0gc2VsZWN0XG4gKi9cbnZhciBDaGFuZ2VFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcblxuICAgIHZhciBnZXRUYXJnZXRJREZ1bmMsIGhhbmRsZUV2ZW50RnVuYztcbiAgICBpZiAoc2hvdWxkVXNlQ2hhbmdlRXZlbnQodG9wTGV2ZWxUYXJnZXQpKSB7XG4gICAgICBpZiAoZG9lc0NoYW5nZUV2ZW50QnViYmxlKSB7XG4gICAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9yQ2hhbmdlRXZlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSBoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFODtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0b3BMZXZlbFRhcmdldCkpIHtcbiAgICAgIGlmIChpc0lucHV0RXZlbnRTdXBwb3J0ZWQpIHtcbiAgICAgICAgZ2V0VGFyZ2V0SURGdW5jID0gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0VGFyZ2V0SURGdW5jID0gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50SUU7XG4gICAgICAgIGhhbmRsZUV2ZW50RnVuYyA9IGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRJRTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNob3VsZFVzZUNsaWNrRXZlbnQodG9wTGV2ZWxUYXJnZXQpKSB7XG4gICAgICBnZXRUYXJnZXRJREZ1bmMgPSBnZXRUYXJnZXRJREZvckNsaWNrRXZlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGdldFRhcmdldElERnVuYykge1xuICAgICAgdmFyIHRhcmdldElEID0gZ2V0VGFyZ2V0SURGdW5jKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQpO1xuICAgICAgaWYgKHRhcmdldElEKSB7XG4gICAgICAgIHZhciBldmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLmNoYW5nZSwgdGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICAgIGV2ZW50LnR5cGUgPSAnY2hhbmdlJztcbiAgICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChoYW5kbGVFdmVudEZ1bmMpIHtcbiAgICAgIGhhbmRsZUV2ZW50RnVuYyh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDaGFuZ2VFdmVudFBsdWdpbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ2xpZW50UmVhY3RSb290SW5kZXhcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbmV4dFJlYWN0Um9vdEluZGV4ID0gMDtcblxudmFyIENsaWVudFJlYWN0Um9vdEluZGV4ID0ge1xuICBjcmVhdGVSZWFjdFJvb3RJbmRleDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXh0UmVhY3RSb290SW5kZXgrKztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnRSZWFjdFJvb3RJbmRleDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRE9NQ2hpbGRyZW5PcGVyYXRpb25zXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERhbmdlciA9IHJlcXVpcmUoJy4vRGFuZ2VyJyk7XG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSByZXF1aXJlKCcuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzJyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcblxudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoJy4vc2V0SW5uZXJIVE1MJyk7XG52YXIgc2V0VGV4dENvbnRlbnQgPSByZXF1aXJlKCcuL3NldFRleHRDb250ZW50Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogSW5zZXJ0cyBgY2hpbGROb2RlYCBhcyBhIGNoaWxkIG9mIGBwYXJlbnROb2RlYCBhdCB0aGUgYGluZGV4YC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudE5vZGUgUGFyZW50IG5vZGUgaW4gd2hpY2ggdG8gaW5zZXJ0LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjaGlsZE5vZGUgQ2hpbGQgbm9kZSB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBjaGlsZC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpbnNlcnRDaGlsZEF0KHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgaW5kZXgpIHtcbiAgLy8gQnkgZXhwbG9pdGluZyBhcnJheXMgcmV0dXJuaW5nIGB1bmRlZmluZWRgIGZvciBhbiB1bmRlZmluZWQgaW5kZXgsIHdlIGNhblxuICAvLyByZWx5IGV4Y2x1c2l2ZWx5IG9uIGBpbnNlcnRCZWZvcmUobm9kZSwgbnVsbClgIGluc3RlYWQgb2YgYWxzbyB1c2luZ1xuICAvLyBgYXBwZW5kQ2hpbGQobm9kZSlgLiBIb3dldmVyLCB1c2luZyBgdW5kZWZpbmVkYCBpcyBub3QgYWxsb3dlZCBieSBhbGxcbiAgLy8gYnJvd3NlcnMgc28gd2UgbXVzdCByZXBsYWNlIGl0IHdpdGggYG51bGxgLlxuXG4gIC8vIGZpeCByZW5kZXIgb3JkZXIgZXJyb3IgaW4gc2FmYXJpXG4gIC8vIElFOCB3aWxsIHRocm93IGVycm9yIHdoZW4gaW5kZXggb3V0IG9mIGxpc3Qgc2l6ZS5cbiAgdmFyIGJlZm9yZUNoaWxkID0gaW5kZXggPj0gcGFyZW50Tm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA/IG51bGwgOiBwYXJlbnROb2RlLmNoaWxkTm9kZXMuaXRlbShpbmRleCk7XG5cbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2RlLCBiZWZvcmVDaGlsZCk7XG59XG5cbi8qKlxuICogT3BlcmF0aW9ucyBmb3IgdXBkYXRpbmcgd2l0aCBET00gY2hpbGRyZW4uXG4gKi9cbnZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSB7XG5cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6IERhbmdlci5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCxcblxuICB1cGRhdGVUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBjb21wb25lbnQncyBjaGlsZHJlbiBieSBwcm9jZXNzaW5nIGEgc2VyaWVzIG9mIHVwZGF0ZXMuIFRoZVxuICAgKiB1cGRhdGUgY29uZmlndXJhdGlvbnMgYXJlIGVhY2ggZXhwZWN0ZWQgdG8gaGF2ZSBhIGBwYXJlbnROb2RlYCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxvYmplY3Q+fSB1cGRhdGVzIExpc3Qgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IG1hcmt1cExpc3QgTGlzdCBvZiBtYXJrdXAgc3RyaW5ncy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcm9jZXNzVXBkYXRlczogZnVuY3Rpb24gKHVwZGF0ZXMsIG1hcmt1cExpc3QpIHtcbiAgICB2YXIgdXBkYXRlO1xuICAgIC8vIE1hcHBpbmcgZnJvbSBwYXJlbnQgSURzIHRvIGluaXRpYWwgY2hpbGQgb3JkZXJpbmdzLlxuICAgIHZhciBpbml0aWFsQ2hpbGRyZW4gPSBudWxsO1xuICAgIC8vIExpc3Qgb2YgY2hpbGRyZW4gdGhhdCB3aWxsIGJlIG1vdmVkIG9yIHJlbW92ZWQuXG4gICAgdmFyIHVwZGF0ZWRDaGlsZHJlbiA9IG51bGw7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVwZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHVwZGF0ZSA9IHVwZGF0ZXNbaV07XG4gICAgICBpZiAodXBkYXRlLnR5cGUgPT09IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkcgfHwgdXBkYXRlLnR5cGUgPT09IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFKSB7XG4gICAgICAgIHZhciB1cGRhdGVkSW5kZXggPSB1cGRhdGUuZnJvbUluZGV4O1xuICAgICAgICB2YXIgdXBkYXRlZENoaWxkID0gdXBkYXRlLnBhcmVudE5vZGUuY2hpbGROb2Rlc1t1cGRhdGVkSW5kZXhdO1xuICAgICAgICB2YXIgcGFyZW50SUQgPSB1cGRhdGUucGFyZW50SUQ7XG5cbiAgICAgICAgIXVwZGF0ZWRDaGlsZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdwcm9jZXNzVXBkYXRlcygpOiBVbmFibGUgdG8gZmluZCBjaGlsZCAlcyBvZiBlbGVtZW50LiBUaGlzICcgKyAncHJvYmFibHkgbWVhbnMgdGhlIERPTSB3YXMgdW5leHBlY3RlZGx5IG11dGF0ZWQgKGUuZy4sIGJ5IHRoZSAnICsgJ2Jyb3dzZXIpLCB1c3VhbGx5IGR1ZSB0byBmb3JnZXR0aW5nIGEgPHRib2R5PiB3aGVuIHVzaW5nIHRhYmxlcywgJyArICduZXN0aW5nIHRhZ3MgbGlrZSA8Zm9ybT4sIDxwPiwgb3IgPGE+LCBvciB1c2luZyBub24tU1ZHIGVsZW1lbnRzICcgKyAnaW4gYW4gPHN2Zz4gcGFyZW50LiBUcnkgaW5zcGVjdGluZyB0aGUgY2hpbGQgbm9kZXMgb2YgdGhlIGVsZW1lbnQgJyArICd3aXRoIFJlYWN0IElEIGAlc2AuJywgdXBkYXRlZEluZGV4LCBwYXJlbnRJRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGluaXRpYWxDaGlsZHJlbiA9IGluaXRpYWxDaGlsZHJlbiB8fCB7fTtcbiAgICAgICAgaW5pdGlhbENoaWxkcmVuW3BhcmVudElEXSA9IGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF0gfHwgW107XG4gICAgICAgIGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF1bdXBkYXRlZEluZGV4XSA9IHVwZGF0ZWRDaGlsZDtcblxuICAgICAgICB1cGRhdGVkQ2hpbGRyZW4gPSB1cGRhdGVkQ2hpbGRyZW4gfHwgW107XG4gICAgICAgIHVwZGF0ZWRDaGlsZHJlbi5wdXNoKHVwZGF0ZWRDaGlsZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlbmRlcmVkTWFya3VwO1xuICAgIC8vIG1hcmt1cExpc3QgaXMgZWl0aGVyIGEgbGlzdCBvZiBtYXJrdXAgb3IganVzdCBhIGxpc3Qgb2YgZWxlbWVudHNcbiAgICBpZiAobWFya3VwTGlzdC5sZW5ndGggJiYgdHlwZW9mIG1hcmt1cExpc3RbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZW5kZXJlZE1hcmt1cCA9IERhbmdlci5kYW5nZXJvdXNseVJlbmRlck1hcmt1cChtYXJrdXBMaXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVuZGVyZWRNYXJrdXAgPSBtYXJrdXBMaXN0O1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSB1cGRhdGVkIGNoaWxkcmVuIGZpcnN0IHNvIHRoYXQgYHRvSW5kZXhgIGlzIGNvbnNpc3RlbnQuXG4gICAgaWYgKHVwZGF0ZWRDaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB1cGRhdGVkQ2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdXBkYXRlZENoaWxkcmVuW2pdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodXBkYXRlZENoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHVwZGF0ZXMubGVuZ3RoOyBrKyspIHtcbiAgICAgIHVwZGF0ZSA9IHVwZGF0ZXNba107XG4gICAgICBzd2l0Y2ggKHVwZGF0ZS50eXBlKSB7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuSU5TRVJUX01BUktVUDpcbiAgICAgICAgICBpbnNlcnRDaGlsZEF0KHVwZGF0ZS5wYXJlbnROb2RlLCByZW5kZXJlZE1hcmt1cFt1cGRhdGUubWFya3VwSW5kZXhdLCB1cGRhdGUudG9JbmRleCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORzpcbiAgICAgICAgICBpbnNlcnRDaGlsZEF0KHVwZGF0ZS5wYXJlbnROb2RlLCBpbml0aWFsQ2hpbGRyZW5bdXBkYXRlLnBhcmVudElEXVt1cGRhdGUuZnJvbUluZGV4XSwgdXBkYXRlLnRvSW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlNFVF9NQVJLVVA6XG4gICAgICAgICAgc2V0SW5uZXJIVE1MKHVwZGF0ZS5wYXJlbnROb2RlLCB1cGRhdGUuY29udGVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuVEVYVF9DT05URU5UOlxuICAgICAgICAgIHNldFRleHRDb250ZW50KHVwZGF0ZS5wYXJlbnROb2RlLCB1cGRhdGUuY29udGVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREU6XG4gICAgICAgICAgLy8gQWxyZWFkeSByZW1vdmVkIGJ5IHRoZSBmb3ItbG9vcCBhYm92ZS5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKERPTUNoaWxkcmVuT3BlcmF0aW9ucywgJ0RPTUNoaWxkcmVuT3BlcmF0aW9ucycsIHtcbiAgdXBkYXRlVGV4dENvbnRlbnQ6ICd1cGRhdGVUZXh0Q29udGVudCdcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTUNoaWxkcmVuT3BlcmF0aW9uczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRE9NUHJvcGVydHlcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbmZ1bmN0aW9uIGNoZWNrTWFzayh2YWx1ZSwgYml0bWFzaykge1xuICByZXR1cm4gKHZhbHVlICYgYml0bWFzaykgPT09IGJpdG1hc2s7XG59XG5cbnZhciBET01Qcm9wZXJ0eUluamVjdGlvbiA9IHtcbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkLCBjYW1lbGNhc2VkIHByb3BlcnR5IG5hbWVzIHRvIGEgY29uZmlndXJhdGlvbiB0aGF0XG4gICAqIHNwZWNpZmllcyBob3cgdGhlIGFzc29jaWF0ZWQgRE9NIHByb3BlcnR5IHNob3VsZCBiZSBhY2Nlc3NlZCBvciByZW5kZXJlZC5cbiAgICovXG4gIE1VU1RfVVNFX0FUVFJJQlVURTogMHgxLFxuICBNVVNUX1VTRV9QUk9QRVJUWTogMHgyLFxuICBIQVNfU0lERV9FRkZFQ1RTOiAweDQsXG4gIEhBU19CT09MRUFOX1ZBTFVFOiAweDgsXG4gIEhBU19OVU1FUklDX1ZBTFVFOiAweDEwLFxuICBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTogMHgyMCB8IDB4MTAsXG4gIEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6IDB4NDAsXG5cbiAgLyoqXG4gICAqIEluamVjdCBzb21lIHNwZWNpYWxpemVkIGtub3dsZWRnZSBhYm91dCB0aGUgRE9NLiBUaGlzIHRha2VzIGEgY29uZmlnIG9iamVjdFxuICAgKiB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogaXNDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uIHRoYXQgZ2l2ZW4gYW4gYXR0cmlidXRlIG5hbWUgd2lsbCByZXR1cm4gdHJ1ZVxuICAgKiBpZiBpdCBjYW4gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NIHZlcmJhdGltLiBVc2VmdWwgZm9yIGRhdGEtKiBvciBhcmlhLSpcbiAgICogYXR0cmlidXRlcyB3aGVyZSBpdCdzIGltcG9zc2libGUgdG8gZW51bWVyYXRlIGFsbCBvZiB0aGUgcG9zc2libGVcbiAgICogYXR0cmlidXRlIG5hbWVzLFxuICAgKlxuICAgKiBQcm9wZXJ0aWVzOiBvYmplY3QgbWFwcGluZyBET00gcHJvcGVydHkgbmFtZSB0byBvbmUgb2YgdGhlXG4gICAqIERPTVByb3BlcnR5SW5qZWN0aW9uIGNvbnN0YW50cyBvciBudWxsLiBJZiB5b3VyIGF0dHJpYnV0ZSBpc24ndCBpbiBoZXJlLFxuICAgKiBpdCB3b24ndCBnZXQgd3JpdHRlbiB0byB0aGUgRE9NLlxuICAgKlxuICAgKiBET01BdHRyaWJ1dGVOYW1lczogb2JqZWN0IG1hcHBpbmcgUmVhY3QgYXR0cmlidXRlIG5hbWUgdG8gdGhlIERPTVxuICAgKiBhdHRyaWJ1dGUgbmFtZS4gQXR0cmlidXRlIG5hbWVzIG5vdCBzcGVjaWZpZWQgdXNlIHRoZSAqKmxvd2VyY2FzZSoqXG4gICAqIG5vcm1hbGl6ZWQgbmFtZS5cbiAgICpcbiAgICogRE9NQXR0cmlidXRlTmFtZXNwYWNlczogb2JqZWN0IG1hcHBpbmcgUmVhY3QgYXR0cmlidXRlIG5hbWUgdG8gdGhlIERPTVxuICAgKiBhdHRyaWJ1dGUgbmFtZXNwYWNlIFVSTC4gKEF0dHJpYnV0ZSBuYW1lcyBub3Qgc3BlY2lmaWVkIHVzZSBubyBuYW1lc3BhY2UuKVxuICAgKlxuICAgKiBET01Qcm9wZXJ0eU5hbWVzOiBzaW1pbGFyIHRvIERPTUF0dHJpYnV0ZU5hbWVzIGJ1dCBmb3IgRE9NIHByb3BlcnRpZXMuXG4gICAqIFByb3BlcnR5IG5hbWVzIG5vdCBzcGVjaWZpZWQgdXNlIHRoZSBub3JtYWxpemVkIG5hbWUuXG4gICAqXG4gICAqIERPTU11dGF0aW9uTWV0aG9kczogUHJvcGVydGllcyB0aGF0IHJlcXVpcmUgc3BlY2lhbCBtdXRhdGlvbiBtZXRob2RzLiBJZlxuICAgKiBgdmFsdWVgIGlzIHVuZGVmaW5lZCwgdGhlIG11dGF0aW9uIG1ldGhvZCBzaG91bGQgdW5zZXQgdGhlIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZG9tUHJvcGVydHlDb25maWcgdGhlIGNvbmZpZyBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqL1xuICBpbmplY3RET01Qcm9wZXJ0eUNvbmZpZzogZnVuY3Rpb24gKGRvbVByb3BlcnR5Q29uZmlnKSB7XG4gICAgdmFyIEluamVjdGlvbiA9IERPTVByb3BlcnR5SW5qZWN0aW9uO1xuICAgIHZhciBQcm9wZXJ0aWVzID0gZG9tUHJvcGVydHlDb25maWcuUHJvcGVydGllcyB8fCB7fTtcbiAgICB2YXIgRE9NQXR0cmlidXRlTmFtZXNwYWNlcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTUF0dHJpYnV0ZU5hbWVzcGFjZXMgfHwge307XG4gICAgdmFyIERPTUF0dHJpYnV0ZU5hbWVzID0gZG9tUHJvcGVydHlDb25maWcuRE9NQXR0cmlidXRlTmFtZXMgfHwge307XG4gICAgdmFyIERPTVByb3BlcnR5TmFtZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01Qcm9wZXJ0eU5hbWVzIHx8IHt9O1xuICAgIHZhciBET01NdXRhdGlvbk1ldGhvZHMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01NdXRhdGlvbk1ldGhvZHMgfHwge307XG5cbiAgICBpZiAoZG9tUHJvcGVydHlDb25maWcuaXNDdXN0b21BdHRyaWJ1dGUpIHtcbiAgICAgIERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9ucy5wdXNoKGRvbVByb3BlcnR5Q29uZmlnLmlzQ3VzdG9tQXR0cmlidXRlKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBQcm9wZXJ0aWVzKSB7XG4gICAgICAhIURPTVByb3BlcnR5LnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2luamVjdERPTVByb3BlcnR5Q29uZmlnKC4uLik6IFlvdVxcJ3JlIHRyeWluZyB0byBpbmplY3QgRE9NIHByb3BlcnR5ICcgKyAnXFwnJXNcXCcgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiBpbmplY3RlZC4gWW91IG1heSBiZSBhY2NpZGVudGFsbHkgJyArICdpbmplY3RpbmcgdGhlIHNhbWUgRE9NIHByb3BlcnR5IGNvbmZpZyB0d2ljZSwgb3IgeW91IG1heSBiZSAnICsgJ2luamVjdGluZyB0d28gY29uZmlncyB0aGF0IGhhdmUgY29uZmxpY3RpbmcgcHJvcGVydHkgbmFtZXMuJywgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIGxvd2VyQ2FzZWQgPSBwcm9wTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHByb3BDb25maWcgPSBQcm9wZXJ0aWVzW3Byb3BOYW1lXTtcblxuICAgICAgdmFyIHByb3BlcnR5SW5mbyA9IHtcbiAgICAgICAgYXR0cmlidXRlTmFtZTogbG93ZXJDYXNlZCxcbiAgICAgICAgYXR0cmlidXRlTmFtZXNwYWNlOiBudWxsLFxuICAgICAgICBwcm9wZXJ0eU5hbWU6IHByb3BOYW1lLFxuICAgICAgICBtdXRhdGlvbk1ldGhvZDogbnVsbCxcblxuICAgICAgICBtdXN0VXNlQXR0cmlidXRlOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLk1VU1RfVVNFX0FUVFJJQlVURSksXG4gICAgICAgIG11c3RVc2VQcm9wZXJ0eTogY2hlY2tNYXNrKHByb3BDb25maWcsIEluamVjdGlvbi5NVVNUX1VTRV9QUk9QRVJUWSksXG4gICAgICAgIGhhc1NpZGVFZmZlY3RzOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLkhBU19TSURFX0VGRkVDVFMpLFxuICAgICAgICBoYXNCb29sZWFuVmFsdWU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUUpLFxuICAgICAgICBoYXNOdW1lcmljVmFsdWU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX05VTUVSSUNfVkFMVUUpLFxuICAgICAgICBoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZTogY2hlY2tNYXNrKHByb3BDb25maWcsIEluamVjdGlvbi5IQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSksXG4gICAgICAgIGhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSlcbiAgICAgIH07XG5cbiAgICAgICEoIXByb3BlcnR5SW5mby5tdXN0VXNlQXR0cmlidXRlIHx8ICFwcm9wZXJ0eUluZm8ubXVzdFVzZVByb3BlcnR5KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdET01Qcm9wZXJ0eTogQ2Fubm90IHJlcXVpcmUgdXNpbmcgYm90aCBhdHRyaWJ1dGUgYW5kIHByb3BlcnR5OiAlcycsIHByb3BOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICAhKHByb3BlcnR5SW5mby5tdXN0VXNlUHJvcGVydHkgfHwgIXByb3BlcnR5SW5mby5oYXNTaWRlRWZmZWN0cykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRE9NUHJvcGVydHk6IFByb3BlcnRpZXMgdGhhdCBoYXZlIHNpZGUgZWZmZWN0cyBtdXN0IHVzZSBwcm9wZXJ0eTogJXMnLCBwcm9wTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgIShwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlICsgcHJvcGVydHlJbmZvLmhhc051bWVyaWNWYWx1ZSArIHByb3BlcnR5SW5mby5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlIDw9IDEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0RPTVByb3BlcnR5OiBWYWx1ZSBjYW4gYmUgb25lIG9mIGJvb2xlYW4sIG92ZXJsb2FkZWQgYm9vbGVhbiwgb3IgJyArICdudW1lcmljIHZhbHVlLCBidXQgbm90IGEgY29tYmluYXRpb246ICVzJywgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZF0gPSBwcm9wTmFtZTtcbiAgICAgIH1cblxuICAgICAgaWYgKERPTUF0dHJpYnV0ZU5hbWVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IERPTUF0dHJpYnV0ZU5hbWVzW3Byb3BOYW1lXTtcbiAgICAgICAgcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIERPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW2F0dHJpYnV0ZU5hbWVdID0gcHJvcE5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKERPTUF0dHJpYnV0ZU5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lc3BhY2UgPSBET01BdHRyaWJ1dGVOYW1lc3BhY2VzW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgaWYgKERPTVByb3BlcnR5TmFtZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BlcnR5SW5mby5wcm9wZXJ0eU5hbWUgPSBET01Qcm9wZXJ0eU5hbWVzW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgaWYgKERPTU11dGF0aW9uTWV0aG9kcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcGVydHlJbmZvLm11dGF0aW9uTWV0aG9kID0gRE9NTXV0YXRpb25NZXRob2RzW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgRE9NUHJvcGVydHkucHJvcGVydGllc1twcm9wTmFtZV0gPSBwcm9wZXJ0eUluZm87XG4gICAgfVxuICB9XG59O1xudmFyIGRlZmF1bHRWYWx1ZUNhY2hlID0ge307XG5cbi8qKlxuICogRE9NUHJvcGVydHkgZXhwb3J0cyBsb29rdXAgb2JqZWN0cyB0aGF0IGNhbiBiZSB1c2VkIGxpa2UgZnVuY3Rpb25zOlxuICpcbiAqICAgPiBET01Qcm9wZXJ0eS5pc1ZhbGlkWydpZCddXG4gKiAgIHRydWVcbiAqICAgPiBET01Qcm9wZXJ0eS5pc1ZhbGlkWydmb29iYXInXVxuICogICB1bmRlZmluZWRcbiAqXG4gKiBBbHRob3VnaCB0aGlzIG1heSBiZSBjb25mdXNpbmcsIGl0IHBlcmZvcm1zIGJldHRlciBpbiBnZW5lcmFsLlxuICpcbiAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20va2V5LWV4aXN0c1xuICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9rZXktbWlzc2luZ1xuICovXG52YXIgRE9NUHJvcGVydHkgPSB7XG5cbiAgSURfQVRUUklCVVRFX05BTUU6ICdkYXRhLXJlYWN0aWQnLFxuXG4gIC8qKlxuICAgKiBNYXAgZnJvbSBwcm9wZXJ0eSBcInN0YW5kYXJkIG5hbWVcIiB0byBhbiBvYmplY3Qgd2l0aCBpbmZvIGFib3V0IGhvdyB0byBzZXRcbiAgICogdGhlIHByb3BlcnR5IGluIHRoZSBET00uIEVhY2ggb2JqZWN0IGNvbnRhaW5zOlxuICAgKlxuICAgKiBhdHRyaWJ1dGVOYW1lOlxuICAgKiAgIFVzZWQgd2hlbiByZW5kZXJpbmcgbWFya3VwIG9yIHdpdGggYCpBdHRyaWJ1dGUoKWAuXG4gICAqIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICAgKiBwcm9wZXJ0eU5hbWU6XG4gICAqICAgVXNlZCBvbiBET00gbm9kZSBpbnN0YW5jZXMuIChUaGlzIGluY2x1ZGVzIHByb3BlcnRpZXMgdGhhdCBtdXRhdGUgZHVlIHRvXG4gICAqICAgZXh0ZXJuYWwgZmFjdG9ycy4pXG4gICAqIG11dGF0aW9uTWV0aG9kOlxuICAgKiAgIElmIG5vbi1udWxsLCB1c2VkIGluc3RlYWQgb2YgdGhlIHByb3BlcnR5IG9yIGBzZXRBdHRyaWJ1dGUoKWAgYWZ0ZXJcbiAgICogICBpbml0aWFsIHJlbmRlci5cbiAgICogbXVzdFVzZUF0dHJpYnV0ZTpcbiAgICogICBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIGFjY2Vzc2VkIGFuZCBtdXRhdGVkIHVzaW5nIGAqQXR0cmlidXRlKClgLlxuICAgKiAgIChUaGlzIGluY2x1ZGVzIGFueXRoaW5nIHRoYXQgZmFpbHMgYDxwcm9wTmFtZT4gaW4gPGVsZW1lbnQ+YC4pXG4gICAqIG11c3RVc2VQcm9wZXJ0eTpcbiAgICogICBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIGFjY2Vzc2VkIGFuZCBtdXRhdGVkIGFzIGFuIG9iamVjdCBwcm9wZXJ0eS5cbiAgICogaGFzU2lkZUVmZmVjdHM6XG4gICAqICAgV2hldGhlciBvciBub3Qgc2V0dGluZyBhIHZhbHVlIGNhdXNlcyBzaWRlIGVmZmVjdHMgc3VjaCBhcyB0cmlnZ2VyaW5nXG4gICAqICAgcmVzb3VyY2VzIHRvIGJlIGxvYWRlZCBvciB0ZXh0IHNlbGVjdGlvbiBjaGFuZ2VzLiBJZiB0cnVlLCB3ZSByZWFkIGZyb21cbiAgICogICB0aGUgRE9NIGJlZm9yZSB1cGRhdGluZyB0byBlbnN1cmUgdGhhdCB0aGUgdmFsdWUgaXMgb25seSBzZXQgaWYgaXQgaGFzXG4gICAqICAgY2hhbmdlZC5cbiAgICogaGFzQm9vbGVhblZhbHVlOlxuICAgKiAgIFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSByZW1vdmVkIHdoZW4gc2V0IHRvIGEgZmFsc2V5IHZhbHVlLlxuICAgKiBoYXNOdW1lcmljVmFsdWU6XG4gICAqICAgV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBudW1lcmljIG9yIHBhcnNlIGFzIGEgbnVtZXJpYyBhbmQgc2hvdWxkIGJlXG4gICAqICAgcmVtb3ZlZCB3aGVuIHNldCB0byBhIGZhbHNleSB2YWx1ZS5cbiAgICogaGFzUG9zaXRpdmVOdW1lcmljVmFsdWU6XG4gICAqICAgV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBwb3NpdGl2ZSBudW1lcmljIG9yIHBhcnNlIGFzIGEgcG9zaXRpdmVcbiAgICogICBudW1lcmljIGFuZCBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuIHNldCB0byBhIGZhbHNleSB2YWx1ZS5cbiAgICogaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZTpcbiAgICogICBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBjYW4gYmUgdXNlZCBhcyBhIGZsYWcgYXMgd2VsbCBhcyB3aXRoIGEgdmFsdWUuXG4gICAqICAgUmVtb3ZlZCB3aGVuIHN0cmljdGx5IGVxdWFsIHRvIGZhbHNlOyBwcmVzZW50IHdpdGhvdXQgYSB2YWx1ZSB3aGVuXG4gICAqICAgc3RyaWN0bHkgZXF1YWwgdG8gdHJ1ZTsgcHJlc2VudCB3aXRoIGEgdmFsdWUgb3RoZXJ3aXNlLlxuICAgKi9cbiAgcHJvcGVydGllczoge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBsb3dlcmNhc2UgcHJvcGVydHkgbmFtZXMgdG8gdGhlIHByb3Blcmx5IGNhc2VkIHZlcnNpb24sIHVzZWRcbiAgICogdG8gd2FybiBpbiB0aGUgY2FzZSBvZiBtaXNzaW5nIHByb3BlcnRpZXMuIEF2YWlsYWJsZSBvbmx5IGluIF9fREVWX18uXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBnZXRQb3NzaWJsZVN0YW5kYXJkTmFtZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHt9IDogbnVsbCxcblxuICAvKipcbiAgICogQWxsIG9mIHRoZSBpc0N1c3RvbUF0dHJpYnV0ZSgpIGZ1bmN0aW9ucyB0aGF0IGhhdmUgYmVlbiBpbmplY3RlZC5cbiAgICovXG4gIF9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9uczogW10sXG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIGEgcHJvcGVydHkgbmFtZSBpcyBhIGN1c3RvbSBhdHRyaWJ1dGUuXG4gICAqIEBtZXRob2RcbiAgICovXG4gIGlzQ3VzdG9tQXR0cmlidXRlOiBmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXNDdXN0b21BdHRyaWJ1dGVGbiA9IERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9uc1tpXTtcbiAgICAgIGlmIChpc0N1c3RvbUF0dHJpYnV0ZUZuKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRlZmF1bHQgcHJvcGVydHkgdmFsdWUgZm9yIGEgRE9NIHByb3BlcnR5IChpLmUuLCBub3QgYW5cbiAgICogYXR0cmlidXRlKS4gTW9zdCBkZWZhdWx0IHZhbHVlcyBhcmUgJycgb3IgZmFsc2UsIGJ1dCBub3QgYWxsLiBXb3JzZSB5ZXQsXG4gICAqIHNvbWUgKGluIHBhcnRpY3VsYXIsIGB0eXBlYCkgdmFyeSBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2YgZWxlbWVudC5cbiAgICpcbiAgICogVE9ETzogSXMgaXQgYmV0dGVyIHRvIGdyYWIgYWxsIHRoZSBwb3NzaWJsZSBwcm9wZXJ0aWVzIHdoZW4gY3JlYXRpbmcgYW5cbiAgICogZWxlbWVudCB0byBhdm9pZCBoYXZpbmcgdG8gY3JlYXRlIHRoZSBzYW1lIGVsZW1lbnQgdHdpY2U/XG4gICAqL1xuICBnZXREZWZhdWx0VmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24gKG5vZGVOYW1lLCBwcm9wKSB7XG4gICAgdmFyIG5vZGVEZWZhdWx0cyA9IGRlZmF1bHRWYWx1ZUNhY2hlW25vZGVOYW1lXTtcbiAgICB2YXIgdGVzdEVsZW1lbnQ7XG4gICAgaWYgKCFub2RlRGVmYXVsdHMpIHtcbiAgICAgIGRlZmF1bHRWYWx1ZUNhY2hlW25vZGVOYW1lXSA9IG5vZGVEZWZhdWx0cyA9IHt9O1xuICAgIH1cbiAgICBpZiAoIShwcm9wIGluIG5vZGVEZWZhdWx0cykpIHtcbiAgICAgIHRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlTmFtZSk7XG4gICAgICBub2RlRGVmYXVsdHNbcHJvcF0gPSB0ZXN0RWxlbWVudFtwcm9wXTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVEZWZhdWx0c1twcm9wXTtcbiAgfSxcblxuICBpbmplY3Rpb246IERPTVByb3BlcnR5SW5qZWN0aW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVByb3BlcnR5OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBET01Qcm9wZXJ0eU9wZXJhdGlvbnNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcblxudmFyIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyID0gcmVxdWlyZSgnLi9xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlcicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8vIFNpbXBsaWZpZWQgc3Vic2V0XG52YXIgVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVggPSAvXlthLXpBLVpfXVtcXHdcXC5cXC1dKiQvO1xudmFyIGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUgPSB7fTtcbnZhciB2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gaXNBdHRyaWJ1dGVOYW1lU2FmZShhdHRyaWJ1dGVOYW1lKSB7XG4gIGlmICh2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUuaGFzT3duUHJvcGVydHkoYXR0cmlidXRlTmFtZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZS5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGVOYW1lKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVgudGVzdChhdHRyaWJ1dGVOYW1lKSkge1xuICAgIHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZVthdHRyaWJ1dGVOYW1lXSA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZVthdHRyaWJ1dGVOYW1lXSA9IHRydWU7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnSW52YWxpZCBhdHRyaWJ1dGUgbmFtZTogYCVzYCcsIGF0dHJpYnV0ZU5hbWUpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHNob3VsZElnbm9yZVZhbHVlKHByb3BlcnR5SW5mbywgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgfHwgcHJvcGVydHlJbmZvLmhhc0Jvb2xlYW5WYWx1ZSAmJiAhdmFsdWUgfHwgcHJvcGVydHlJbmZvLmhhc051bWVyaWNWYWx1ZSAmJiBpc05hTih2YWx1ZSkgfHwgcHJvcGVydHlJbmZvLmhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlICYmIHZhbHVlIDwgMSB8fCBwcm9wZXJ0eUluZm8uaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSAmJiB2YWx1ZSA9PT0gZmFsc2U7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciByZWFjdFByb3BzID0ge1xuICAgIGNoaWxkcmVuOiB0cnVlLFxuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB0cnVlLFxuICAgIGtleTogdHJ1ZSxcbiAgICByZWY6IHRydWVcbiAgfTtcbiAgdmFyIHdhcm5lZFByb3BlcnRpZXMgPSB7fTtcblxuICB2YXIgd2FyblVua25vd25Qcm9wZXJ0eSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKHJlYWN0UHJvcHMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgcmVhY3RQcm9wc1tuYW1lXSB8fCB3YXJuZWRQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBkYXRhLSogYXR0cmlidXRlcyBzaG91bGQgYmUgbG93ZXJjYXNlOyBzdWdnZXN0IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuICAgIHZhciBzdGFuZGFyZE5hbWUgPSBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShsb3dlckNhc2VkTmFtZSkgPyBsb3dlckNhc2VkTmFtZSA6IERPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZWROYW1lKSA/IERPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW2xvd2VyQ2FzZWROYW1lXSA6IG51bGw7XG5cbiAgICAvLyBGb3Igbm93LCBvbmx5IHdhcm4gd2hlbiB3ZSBoYXZlIGEgc3VnZ2VzdGVkIGNvcnJlY3Rpb24uIFRoaXMgcHJldmVudHNcbiAgICAvLyBsb2dnaW5nIHRvbyBtdWNoIHdoZW4gdXNpbmcgdHJhbnNmZXJQcm9wc1RvLlxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHN0YW5kYXJkTmFtZSA9PSBudWxsLCAnVW5rbm93biBET00gcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8nLCBuYW1lLCBzdGFuZGFyZE5hbWUpIDogdW5kZWZpbmVkO1xuICB9O1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBET00gcHJvcGVydGllcy5cbiAqL1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBJRCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFVuZXNjYXBlZCBJRC5cbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgc3RyaW5nLlxuICAgKi9cbiAgY3JlYXRlTWFya3VwRm9ySUQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRSArICc9JyArIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKGlkKTtcbiAgfSxcblxuICBzZXRBdHRyaWJ1dGVGb3JJRDogZnVuY3Rpb24gKG5vZGUsIGlkKSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUUsIGlkKTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIGEgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHJldHVybiB7P3N0cmluZ30gTWFya3VwIHN0cmluZywgb3IgbnVsbCBpZiB0aGUgcHJvcGVydHkgd2FzIGludmFsaWQuXG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eTogZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIHByb3BlcnR5SW5mbyA9IERPTVByb3BlcnR5LnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW25hbWVdIDogbnVsbDtcbiAgICBpZiAocHJvcGVydHlJbmZvKSB7XG4gICAgICBpZiAoc2hvdWxkSWdub3JlVmFsdWUocHJvcGVydHlJbmZvLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZTtcbiAgICAgIGlmIChwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlIHx8IHByb3BlcnR5SW5mby5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlICYmIHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVOYW1lICsgJz1cIlwiJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBhdHRyaWJ1dGVOYW1lICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYW1lICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbWFya3VwIGZvciBhIGN1c3RvbSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBzdHJpbmcsIG9yIGVtcHR5IHN0cmluZyBpZiB0aGUgcHJvcGVydHkgd2FzIGludmFsaWQuXG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIGlmICghaXNBdHRyaWJ1dGVOYW1lU2FmZShuYW1lKSB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBuYW1lICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBmb3IgYSBwcm9wZXJ0eSBvbiBhIG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqL1xuICBzZXRWYWx1ZUZvclByb3BlcnR5OiBmdW5jdGlvbiAobm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgcHJvcGVydHlJbmZvID0gRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IERPTVByb3BlcnR5LnByb3BlcnRpZXNbbmFtZV0gOiBudWxsO1xuICAgIGlmIChwcm9wZXJ0eUluZm8pIHtcbiAgICAgIHZhciBtdXRhdGlvbk1ldGhvZCA9IHByb3BlcnR5SW5mby5tdXRhdGlvbk1ldGhvZDtcbiAgICAgIGlmIChtdXRhdGlvbk1ldGhvZCkge1xuICAgICAgICBtdXRhdGlvbk1ldGhvZChub2RlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHNob3VsZElnbm9yZVZhbHVlKHByb3BlcnR5SW5mbywgdmFsdWUpKSB7XG4gICAgICAgIHRoaXMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJbmZvLm11c3RVc2VBdHRyaWJ1dGUpIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZTtcbiAgICAgICAgdmFyIG5hbWVzcGFjZSA9IHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lc3BhY2U7XG4gICAgICAgIC8vIGBzZXRBdHRyaWJ1dGVgIHdpdGggb2JqZWN0cyBiZWNvbWVzIG9ubHkgYFtvYmplY3RdYCBpbiBJRTgvOSxcbiAgICAgICAgLy8gKCcnICsgdmFsdWUpIG1ha2VzIGl0IG91dHB1dCB0aGUgY29ycmVjdCB0b1N0cmluZygpLXZhbHVlLlxuICAgICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyhuYW1lc3BhY2UsIGF0dHJpYnV0ZU5hbWUsICcnICsgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUgfHwgcHJvcGVydHlJbmZvLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUgJiYgdmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCAnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IHByb3BlcnR5SW5mby5wcm9wZXJ0eU5hbWU7XG4gICAgICAgIC8vIE11c3QgZXhwbGljaXRseSBjYXN0IHZhbHVlcyBmb3IgSEFTX1NJREVfRUZGRUNUUy1wcm9wZXJ0aWVzIHRvIHRoZVxuICAgICAgICAvLyBwcm9wZXJ0eSB0eXBlIGJlZm9yZSBjb21wYXJpbmc7IG9ubHkgYHZhbHVlYCBkb2VzIGFuZCBpcyBzdHJpbmcuXG4gICAgICAgIGlmICghcHJvcGVydHlJbmZvLmhhc1NpZGVFZmZlY3RzIHx8ICcnICsgbm9kZVtwcm9wTmFtZV0gIT09ICcnICsgdmFsdWUpIHtcbiAgICAgICAgICAvLyBDb250cmFyeSB0byBgc2V0QXR0cmlidXRlYCwgb2JqZWN0IHByb3BlcnRpZXMgYXJlIHByb3Blcmx5XG4gICAgICAgICAgLy8gYHRvU3RyaW5nYGVkIGJ5IElFOC85LlxuICAgICAgICAgIG5vZGVbcHJvcE5hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JBdHRyaWJ1dGUobm9kZSwgbmFtZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgc2V0VmFsdWVGb3JBdHRyaWJ1dGU6IGZ1bmN0aW9uIChub2RlLCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmICghaXNBdHRyaWJ1dGVOYW1lU2FmZShuYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsICcnICsgdmFsdWUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVsZXRlcyB0aGUgdmFsdWUgZm9yIGEgcHJvcGVydHkgb24gYSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICovXG4gIGRlbGV0ZVZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uIChub2RlLCBuYW1lKSB7XG4gICAgdmFyIHByb3BlcnR5SW5mbyA9IERPTVByb3BlcnR5LnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW25hbWVdIDogbnVsbDtcbiAgICBpZiAocHJvcGVydHlJbmZvKSB7XG4gICAgICB2YXIgbXV0YXRpb25NZXRob2QgPSBwcm9wZXJ0eUluZm8ubXV0YXRpb25NZXRob2Q7XG4gICAgICBpZiAobXV0YXRpb25NZXRob2QpIHtcbiAgICAgICAgbXV0YXRpb25NZXRob2Qobm9kZSwgdW5kZWZpbmVkKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJbmZvLm11c3RVc2VBdHRyaWJ1dGUpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUocHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gcHJvcGVydHlJbmZvLnByb3BlcnR5TmFtZTtcbiAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IERPTVByb3BlcnR5LmdldERlZmF1bHRWYWx1ZUZvclByb3BlcnR5KG5vZGUubm9kZU5hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgaWYgKCFwcm9wZXJ0eUluZm8uaGFzU2lkZUVmZmVjdHMgfHwgJycgKyBub2RlW3Byb3BOYW1lXSAhPT0gZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgbm9kZVtwcm9wTmFtZV0gPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm5Vbmtub3duUHJvcGVydHkobmFtZSk7XG4gICAgfVxuICB9XG5cbn07XG5cblJlYWN0UGVyZi5tZWFzdXJlTWV0aG9kcyhET01Qcm9wZXJ0eU9wZXJhdGlvbnMsICdET01Qcm9wZXJ0eU9wZXJhdGlvbnMnLCB7XG4gIHNldFZhbHVlRm9yUHJvcGVydHk6ICdzZXRWYWx1ZUZvclByb3BlcnR5JyxcbiAgc2V0VmFsdWVGb3JBdHRyaWJ1dGU6ICdzZXRWYWx1ZUZvckF0dHJpYnV0ZScsXG4gIGRlbGV0ZVZhbHVlRm9yUHJvcGVydHk6ICdkZWxldGVWYWx1ZUZvclByb3BlcnR5J1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NUHJvcGVydHlPcGVyYXRpb25zOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEYW5nZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgY3JlYXRlTm9kZXNGcm9tTWFya3VwID0gcmVxdWlyZSgnZmJqcy9saWIvY3JlYXRlTm9kZXNGcm9tTWFya3VwJyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBnZXRNYXJrdXBXcmFwID0gcmVxdWlyZSgnZmJqcy9saWIvZ2V0TWFya3VwV3JhcCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgT1BFTl9UQUdfTkFNRV9FWFAgPSAvXig8W14gXFwvPl0rKS87XG52YXIgUkVTVUxUX0lOREVYX0FUVFIgPSAnZGF0YS1kYW5nZXItaW5kZXgnO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBgbm9kZU5hbWVgIGZyb20gYSBzdHJpbmcgb2YgbWFya3VwLlxuICpcbiAqIE5PVEU6IEV4dHJhY3RpbmcgdGhlIGBub2RlTmFtZWAgZG9lcyBub3QgcmVxdWlyZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBtYXRjaFxuICogYmVjYXVzZSB3ZSBtYWtlIGFzc3VtcHRpb25zIGFib3V0IFJlYWN0LWdlbmVyYXRlZCBtYXJrdXAgKGkuZS4gdGhlcmUgYXJlIG5vXG4gKiBzcGFjZXMgc3Vycm91bmRpbmcgdGhlIG9wZW5pbmcgdGFnIGFuZCB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgYXR0cmlidXRlKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIFN0cmluZyBvZiBtYXJrdXAuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vZGUgbmFtZSBvZiB0aGUgc3VwcGxpZWQgbWFya3VwLlxuICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9leHRyYWN0LW5vZGVuYW1lXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVOYW1lKG1hcmt1cCkge1xuICByZXR1cm4gbWFya3VwLnN1YnN0cmluZygxLCBtYXJrdXAuaW5kZXhPZignICcpKTtcbn1cblxudmFyIERhbmdlciA9IHtcblxuICAvKipcbiAgICogUmVuZGVycyBtYXJrdXAgaW50byBhbiBhcnJheSBvZiBub2Rlcy4gVGhlIG1hcmt1cCBpcyBleHBlY3RlZCB0byByZW5kZXJcbiAgICogaW50byBhIGxpc3Qgb2Ygcm9vdCBub2Rlcy4gQWxzbywgdGhlIGxlbmd0aCBvZiBgcmVzdWx0TGlzdGAgYW5kXG4gICAqIGBtYXJrdXBMaXN0YCBzaG91bGQgYmUgdGhlIHNhbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gbWFya3VwTGlzdCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzIHRvIHJlbmRlci5cbiAgICogQHJldHVybiB7YXJyYXk8RE9NRWxlbWVudD59IExpc3Qgb2YgcmVuZGVyZWQgbm9kZXMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXA6IGZ1bmN0aW9uIChtYXJrdXBMaXN0KSB7XG4gICAgIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlbmRlck1hcmt1cCguLi4pOiBDYW5ub3QgcmVuZGVyIG1hcmt1cCBpbiBhIHdvcmtlciAnICsgJ3RocmVhZC4gTWFrZSBzdXJlIGB3aW5kb3dgIGFuZCBgZG9jdW1lbnRgIGFyZSBhdmFpbGFibGUgZ2xvYmFsbHkgJyArICdiZWZvcmUgcmVxdWlyaW5nIFJlYWN0IHdoZW4gdW5pdCB0ZXN0aW5nIG9yIHVzZSAnICsgJ1JlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RyaW5nIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbm9kZU5hbWU7XG4gICAgdmFyIG1hcmt1cEJ5Tm9kZU5hbWUgPSB7fTtcbiAgICAvLyBHcm91cCBtYXJrdXAgYnkgYG5vZGVOYW1lYCBpZiBhIHdyYXAgaXMgbmVjZXNzYXJ5LCBlbHNlIGJ5ICcqJy5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hcmt1cExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICFtYXJrdXBMaXN0W2ldID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Rhbmdlcm91c2x5UmVuZGVyTWFya3VwKC4uLik6IE1pc3NpbmcgbWFya3VwLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgIG5vZGVOYW1lID0gZ2V0Tm9kZU5hbWUobWFya3VwTGlzdFtpXSk7XG4gICAgICBub2RlTmFtZSA9IGdldE1hcmt1cFdyYXAobm9kZU5hbWUpID8gbm9kZU5hbWUgOiAnKic7XG4gICAgICBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXSA9IG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdIHx8IFtdO1xuICAgICAgbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV1baV0gPSBtYXJrdXBMaXN0W2ldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0TGlzdCA9IFtdO1xuICAgIHZhciByZXN1bHRMaXN0QXNzaWdubWVudENvdW50ID0gMDtcbiAgICBmb3IgKG5vZGVOYW1lIGluIG1hcmt1cEJ5Tm9kZU5hbWUpIHtcbiAgICAgIGlmICghbWFya3VwQnlOb2RlTmFtZS5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgbWFya3VwTGlzdEJ5Tm9kZU5hbWUgPSBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXTtcblxuICAgICAgLy8gVGhpcyBmb3ItaW4gbG9vcCBza2lwcyB0aGUgaG9sZXMgb2YgdGhlIHNwYXJzZSBhcnJheS4gVGhlIG9yZGVyIG9mXG4gICAgICAvLyBpdGVyYXRpb24gc2hvdWxkIGZvbGxvdyB0aGUgb3JkZXIgb2YgYXNzaWdubWVudCwgd2hpY2ggaGFwcGVucyB0byBtYXRjaFxuICAgICAgLy8gbnVtZXJpY2FsIGluZGV4IG9yZGVyLCBidXQgd2UgZG9uJ3QgcmVseSBvbiB0aGF0LlxuICAgICAgdmFyIHJlc3VsdEluZGV4O1xuICAgICAgZm9yIChyZXN1bHRJbmRleCBpbiBtYXJrdXBMaXN0QnlOb2RlTmFtZSkge1xuICAgICAgICBpZiAobWFya3VwTGlzdEJ5Tm9kZU5hbWUuaGFzT3duUHJvcGVydHkocmVzdWx0SW5kZXgpKSB7XG4gICAgICAgICAgdmFyIG1hcmt1cCA9IG1hcmt1cExpc3RCeU5vZGVOYW1lW3Jlc3VsdEluZGV4XTtcblxuICAgICAgICAgIC8vIFB1c2ggdGhlIHJlcXVlc3RlZCBtYXJrdXAgd2l0aCBhbiBhZGRpdGlvbmFsIFJFU1VMVF9JTkRFWF9BVFRSXG4gICAgICAgICAgLy8gYXR0cmlidXRlLiAgSWYgdGhlIG1hcmt1cCBkb2VzIG5vdCBzdGFydCB3aXRoIGEgPCBjaGFyYWN0ZXIsIGl0XG4gICAgICAgICAgLy8gd2lsbCBiZSBkaXNjYXJkZWQgYmVsb3cgKHdpdGggYW4gYXBwcm9wcmlhdGUgY29uc29sZS5lcnJvcikuXG4gICAgICAgICAgbWFya3VwTGlzdEJ5Tm9kZU5hbWVbcmVzdWx0SW5kZXhdID0gbWFya3VwLnJlcGxhY2UoT1BFTl9UQUdfTkFNRV9FWFAsXG4gICAgICAgICAgLy8gVGhpcyBpbmRleCB3aWxsIGJlIHBhcnNlZCBiYWNrIG91dCBiZWxvdy5cbiAgICAgICAgICAnJDEgJyArIFJFU1VMVF9JTkRFWF9BVFRSICsgJz1cIicgKyByZXN1bHRJbmRleCArICdcIiAnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZW5kZXIgZWFjaCBncm91cCBvZiBtYXJrdXAgd2l0aCBzaW1pbGFyIHdyYXBwaW5nIGBub2RlTmFtZWAuXG4gICAgICB2YXIgcmVuZGVyTm9kZXMgPSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAobWFya3VwTGlzdEJ5Tm9kZU5hbWUuam9pbignJyksIGVtcHR5RnVuY3Rpb24gLy8gRG8gbm90aGluZyBzcGVjaWFsIHdpdGggPHNjcmlwdD4gdGFncy5cbiAgICAgICk7XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmVuZGVyTm9kZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgdmFyIHJlbmRlck5vZGUgPSByZW5kZXJOb2Rlc1tqXTtcbiAgICAgICAgaWYgKHJlbmRlck5vZGUuaGFzQXR0cmlidXRlICYmIHJlbmRlck5vZGUuaGFzQXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKSkge1xuXG4gICAgICAgICAgcmVzdWx0SW5kZXggPSArcmVuZGVyTm9kZS5nZXRBdHRyaWJ1dGUoUkVTVUxUX0lOREVYX0FUVFIpO1xuICAgICAgICAgIHJlbmRlck5vZGUucmVtb3ZlQXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKTtcblxuICAgICAgICAgICEhcmVzdWx0TGlzdC5oYXNPd25Qcm9wZXJ0eShyZXN1bHRJbmRleCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRGFuZ2VyOiBBc3NpZ25pbmcgdG8gYW4gYWxyZWFkeS1vY2N1cGllZCByZXN1bHQgaW5kZXguJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgcmVzdWx0TGlzdFtyZXN1bHRJbmRleF0gPSByZW5kZXJOb2RlO1xuXG4gICAgICAgICAgLy8gVGhpcyBzaG91bGQgbWF0Y2ggcmVzdWx0TGlzdC5sZW5ndGggYW5kIG1hcmt1cExpc3QubGVuZ3RoIHdoZW5cbiAgICAgICAgICAvLyB3ZSdyZSBkb25lLlxuICAgICAgICAgIHJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQgKz0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRGFuZ2VyOiBEaXNjYXJkaW5nIHVuZXhwZWN0ZWQgbm9kZTonLCByZW5kZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFsdGhvdWdoIHJlc3VsdExpc3Qgd2FzIHBvcHVsYXRlZCBvdXQgb2Ygb3JkZXIsIGl0IHNob3VsZCBub3cgYmUgYSBkZW5zZVxuICAgIC8vIGFycmF5LlxuICAgICEocmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCA9PT0gcmVzdWx0TGlzdC5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0RhbmdlcjogRGlkIG5vdCBhc3NpZ24gdG8gZXZlcnkgaW5kZXggb2YgcmVzdWx0TGlzdC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICAhKHJlc3VsdExpc3QubGVuZ3RoID09PSBtYXJrdXBMaXN0Lmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRGFuZ2VyOiBFeHBlY3RlZCBtYXJrdXAgdG8gcmVuZGVyICVzIG5vZGVzLCBidXQgcmVuZGVyZWQgJXMuJywgbWFya3VwTGlzdC5sZW5ndGgsIHJlc3VsdExpc3QubGVuZ3RoKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICByZXR1cm4gcmVzdWx0TGlzdDtcbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZXMgYSBub2RlIHdpdGggYSBzdHJpbmcgb2YgbWFya3VwIGF0IGl0cyBjdXJyZW50IHBvc2l0aW9uIHdpdGhpbiBpdHNcbiAgICogcGFyZW50LiBUaGUgbWFya3VwIG11c3QgcmVuZGVyIGludG8gYSBzaW5nbGUgcm9vdCBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG9sZENoaWxkIENoaWxkIG5vZGUgdG8gcmVwbGFjZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgdG8gcmVuZGVyIGluIHBsYWNlIG9mIHRoZSBjaGlsZCBub2RlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwOiBmdW5jdGlvbiAob2xkQ2hpbGQsIG1hcmt1cCkge1xuICAgICFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogQ2Fubm90IHJlbmRlciBtYXJrdXAgaW4gYSAnICsgJ3dvcmtlciB0aHJlYWQuIE1ha2Ugc3VyZSBgd2luZG93YCBhbmQgYGRvY3VtZW50YCBhcmUgYXZhaWxhYmxlICcgKyAnZ2xvYmFsbHkgYmVmb3JlIHJlcXVpcmluZyBSZWFjdCB3aGVuIHVuaXQgdGVzdGluZyBvciB1c2UgJyArICdSZWFjdERPTVNlcnZlci5yZW5kZXJUb1N0cmluZygpIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAhbWFya3VwID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IE1pc3NpbmcgbWFya3VwLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAhKG9sZENoaWxkLnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2h0bWwnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBDYW5ub3QgcmVwbGFjZSBtYXJrdXAgb2YgdGhlICcgKyAnPGh0bWw+IG5vZGUuIFRoaXMgaXMgYmVjYXVzZSBicm93c2VyIHF1aXJrcyBtYWtlIHRoaXMgdW5yZWxpYWJsZSAnICsgJ2FuZC9vciBzbG93LiBJZiB5b3Ugd2FudCB0byByZW5kZXIgdG8gdGhlIHJvb3QgeW91IG11c3QgdXNlICcgKyAnc2VydmVyIHJlbmRlcmluZy4gU2VlIFJlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RyaW5nKCkuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIG5ld0NoaWxkO1xuICAgIGlmICh0eXBlb2YgbWFya3VwID09PSAnc3RyaW5nJykge1xuICAgICAgbmV3Q2hpbGQgPSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAobWFya3VwLCBlbXB0eUZ1bmN0aW9uKVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3Q2hpbGQgPSBtYXJrdXA7XG4gICAgfVxuICAgIG9sZENoaWxkLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld0NoaWxkLCBvbGRDaGlsZCk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYW5nZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xuXG4vKipcbiAqIE1vZHVsZSB0aGF0IGlzIGluamVjdGFibGUgaW50byBgRXZlbnRQbHVnaW5IdWJgLCB0aGF0IHNwZWNpZmllcyBhXG4gKiBkZXRlcm1pbmlzdGljIG9yZGVyaW5nIG9mIGBFdmVudFBsdWdpbmBzLiBBIGNvbnZlbmllbnQgd2F5IHRvIHJlYXNvbiBhYm91dFxuICogcGx1Z2lucywgd2l0aG91dCBoYXZpbmcgdG8gcGFja2FnZSBldmVyeSBvbmUgb2YgdGhlbS4gVGhpcyBpcyBiZXR0ZXIgdGhhblxuICogaGF2aW5nIHBsdWdpbnMgYmUgb3JkZXJlZCBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IHRoZXkgYXJlIGluamVjdGVkIGJlY2F1c2VcbiAqIHRoYXQgb3JkZXJpbmcgd291bGQgYmUgaW5mbHVlbmNlZCBieSB0aGUgcGFja2FnaW5nIG9yZGVyLlxuICogYFJlc3BvbmRlckV2ZW50UGx1Z2luYCBtdXN0IG9jY3VyIGJlZm9yZSBgU2ltcGxlRXZlbnRQbHVnaW5gIHNvIHRoYXRcbiAqIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBldmVudHMgaXMgY29udmVuaWVudCBpbiBgU2ltcGxlRXZlbnRQbHVnaW5gIGhhbmRsZXJzLlxuICovXG52YXIgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIgPSBba2V5T2YoeyBSZXNwb25kZXJFdmVudFBsdWdpbjogbnVsbCB9KSwga2V5T2YoeyBTaW1wbGVFdmVudFBsdWdpbjogbnVsbCB9KSwga2V5T2YoeyBUYXBFdmVudFBsdWdpbjogbnVsbCB9KSwga2V5T2YoeyBFbnRlckxlYXZlRXZlbnRQbHVnaW46IG51bGwgfSksIGtleU9mKHsgQ2hhbmdlRXZlbnRQbHVnaW46IG51bGwgfSksIGtleU9mKHsgU2VsZWN0RXZlbnRQbHVnaW46IG51bGwgfSksIGtleU9mKHsgQmVmb3JlSW5wdXRFdmVudFBsdWdpbjogbnVsbCB9KV07XG5cbm1vZHVsZS5leHBvcnRzID0gRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEVudGVyTGVhdmVFdmVudFBsdWdpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xuXG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIGtleU9mID0gcmVxdWlyZSgnZmJqcy9saWIva2V5T2YnKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xudmFyIGdldEZpcnN0UmVhY3RET00gPSBSZWFjdE1vdW50LmdldEZpcnN0UmVhY3RET007XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBtb3VzZUVudGVyOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZToga2V5T2YoeyBvbk1vdXNlRW50ZXI6IG51bGwgfSksXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXJdXG4gIH0sXG4gIG1vdXNlTGVhdmU6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7IG9uTW91c2VMZWF2ZTogbnVsbCB9KSxcbiAgICBkZXBlbmRlbmNpZXM6IFt0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0LCB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3Zlcl1cbiAgfVxufTtcblxudmFyIGV4dHJhY3RlZEV2ZW50cyA9IFtudWxsLCBudWxsXTtcblxudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBGb3IgYWxtb3N0IGV2ZXJ5IGludGVyYWN0aW9uIHdlIGNhcmUgYWJvdXQsIHRoZXJlIHdpbGwgYmUgYm90aCBhIHRvcC1sZXZlbFxuICAgKiBgbW91c2VvdmVyYCBhbmQgYG1vdXNlb3V0YCBldmVudCB0aGF0IG9jY3Vycy4gT25seSB1c2UgYG1vdXNlb3V0YCBzbyB0aGF0XG4gICAqIHdlIGRvIG5vdCBleHRyYWN0IGR1cGxpY2F0ZSBldmVudHMuIEhvd2V2ZXIsIG1vdmluZyB0aGUgbW91c2UgaW50byB0aGVcbiAgICogYnJvd3NlciBmcm9tIG91dHNpZGUgd2lsbCBub3QgZmlyZSBhIGBtb3VzZW91dGAgZXZlbnQuIEluIHRoaXMgY2FzZSwgd2UgdXNlXG4gICAqIHRoZSBgbW91c2VvdmVyYCB0b3AtbGV2ZWwgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyICYmIChuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LmZyb21FbGVtZW50KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0b3BMZXZlbFR5cGUgIT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQgJiYgdG9wTGV2ZWxUeXBlICE9PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3Zlcikge1xuICAgICAgLy8gTXVzdCBub3QgYmUgYSBtb3VzZSBpbiBvciBtb3VzZSBvdXQgLSBpZ25vcmluZy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB3aW47XG4gICAgaWYgKHRvcExldmVsVGFyZ2V0LndpbmRvdyA9PT0gdG9wTGV2ZWxUYXJnZXQpIHtcbiAgICAgIC8vIGB0b3BMZXZlbFRhcmdldGAgaXMgcHJvYmFibHkgYSB3aW5kb3cgb2JqZWN0LlxuICAgICAgd2luID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cbiAgICAgIHZhciBkb2MgPSB0b3BMZXZlbFRhcmdldC5vd25lckRvY3VtZW50O1xuICAgICAgaWYgKGRvYykge1xuICAgICAgICB3aW4gPSBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbiA9IHdpbmRvdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZnJvbTtcbiAgICB2YXIgdG87XG4gICAgdmFyIGZyb21JRCA9ICcnO1xuICAgIHZhciB0b0lEID0gJyc7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCkge1xuICAgICAgZnJvbSA9IHRvcExldmVsVGFyZ2V0O1xuICAgICAgZnJvbUlEID0gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgICAgIHRvID0gZ2V0Rmlyc3RSZWFjdERPTShuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnRvRWxlbWVudCk7XG4gICAgICBpZiAodG8pIHtcbiAgICAgICAgdG9JRCA9IFJlYWN0TW91bnQuZ2V0SUQodG8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG8gPSB3aW47XG4gICAgICB9XG4gICAgICB0byA9IHRvIHx8IHdpbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJvbSA9IHdpbjtcbiAgICAgIHRvID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgICB0b0lEID0gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgICB9XG5cbiAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgIC8vIE5vdGhpbmcgcGVydGFpbnMgdG8gb3VyIG1hbmFnZWQgY29tcG9uZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBsZWF2ZSA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMubW91c2VMZWF2ZSwgZnJvbUlELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGxlYXZlLnR5cGUgPSAnbW91c2VsZWF2ZSc7XG4gICAgbGVhdmUudGFyZ2V0ID0gZnJvbTtcbiAgICBsZWF2ZS5yZWxhdGVkVGFyZ2V0ID0gdG87XG5cbiAgICB2YXIgZW50ZXIgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLm1vdXNlRW50ZXIsIHRvSUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgZW50ZXIudHlwZSA9ICdtb3VzZWVudGVyJztcbiAgICBlbnRlci50YXJnZXQgPSB0bztcbiAgICBlbnRlci5yZWxhdGVkVGFyZ2V0ID0gZnJvbTtcblxuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbUlELCB0b0lEKTtcblxuICAgIGV4dHJhY3RlZEV2ZW50c1swXSA9IGxlYXZlO1xuICAgIGV4dHJhY3RlZEV2ZW50c1sxXSA9IGVudGVyO1xuXG4gICAgcmV0dXJuIGV4dHJhY3RlZEV2ZW50cztcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVudGVyTGVhdmVFdmVudFBsdWdpbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRDb25zdGFudHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXlNaXJyb3IgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlNaXJyb3InKTtcblxudmFyIFByb3BhZ2F0aW9uUGhhc2VzID0ga2V5TWlycm9yKHsgYnViYmxlZDogbnVsbCwgY2FwdHVyZWQ6IG51bGwgfSk7XG5cbi8qKlxuICogVHlwZXMgb2YgcmF3IHNpZ25hbHMgZnJvbSB0aGUgYnJvd3NlciBjYXVnaHQgYXQgdGhlIHRvcCBsZXZlbC5cbiAqL1xudmFyIHRvcExldmVsVHlwZXMgPSBrZXlNaXJyb3Ioe1xuICB0b3BBYm9ydDogbnVsbCxcbiAgdG9wQmx1cjogbnVsbCxcbiAgdG9wQ2FuUGxheTogbnVsbCxcbiAgdG9wQ2FuUGxheVRocm91Z2g6IG51bGwsXG4gIHRvcENoYW5nZTogbnVsbCxcbiAgdG9wQ2xpY2s6IG51bGwsXG4gIHRvcENvbXBvc2l0aW9uRW5kOiBudWxsLFxuICB0b3BDb21wb3NpdGlvblN0YXJ0OiBudWxsLFxuICB0b3BDb21wb3NpdGlvblVwZGF0ZTogbnVsbCxcbiAgdG9wQ29udGV4dE1lbnU6IG51bGwsXG4gIHRvcENvcHk6IG51bGwsXG4gIHRvcEN1dDogbnVsbCxcbiAgdG9wRG91YmxlQ2xpY2s6IG51bGwsXG4gIHRvcERyYWc6IG51bGwsXG4gIHRvcERyYWdFbmQ6IG51bGwsXG4gIHRvcERyYWdFbnRlcjogbnVsbCxcbiAgdG9wRHJhZ0V4aXQ6IG51bGwsXG4gIHRvcERyYWdMZWF2ZTogbnVsbCxcbiAgdG9wRHJhZ092ZXI6IG51bGwsXG4gIHRvcERyYWdTdGFydDogbnVsbCxcbiAgdG9wRHJvcDogbnVsbCxcbiAgdG9wRHVyYXRpb25DaGFuZ2U6IG51bGwsXG4gIHRvcEVtcHRpZWQ6IG51bGwsXG4gIHRvcEVuY3J5cHRlZDogbnVsbCxcbiAgdG9wRW5kZWQ6IG51bGwsXG4gIHRvcEVycm9yOiBudWxsLFxuICB0b3BGb2N1czogbnVsbCxcbiAgdG9wSW5wdXQ6IG51bGwsXG4gIHRvcEtleURvd246IG51bGwsXG4gIHRvcEtleVByZXNzOiBudWxsLFxuICB0b3BLZXlVcDogbnVsbCxcbiAgdG9wTG9hZDogbnVsbCxcbiAgdG9wTG9hZGVkRGF0YTogbnVsbCxcbiAgdG9wTG9hZGVkTWV0YWRhdGE6IG51bGwsXG4gIHRvcExvYWRTdGFydDogbnVsbCxcbiAgdG9wTW91c2VEb3duOiBudWxsLFxuICB0b3BNb3VzZU1vdmU6IG51bGwsXG4gIHRvcE1vdXNlT3V0OiBudWxsLFxuICB0b3BNb3VzZU92ZXI6IG51bGwsXG4gIHRvcE1vdXNlVXA6IG51bGwsXG4gIHRvcFBhc3RlOiBudWxsLFxuICB0b3BQYXVzZTogbnVsbCxcbiAgdG9wUGxheTogbnVsbCxcbiAgdG9wUGxheWluZzogbnVsbCxcbiAgdG9wUHJvZ3Jlc3M6IG51bGwsXG4gIHRvcFJhdGVDaGFuZ2U6IG51bGwsXG4gIHRvcFJlc2V0OiBudWxsLFxuICB0b3BTY3JvbGw6IG51bGwsXG4gIHRvcFNlZWtlZDogbnVsbCxcbiAgdG9wU2Vla2luZzogbnVsbCxcbiAgdG9wU2VsZWN0aW9uQ2hhbmdlOiBudWxsLFxuICB0b3BTdGFsbGVkOiBudWxsLFxuICB0b3BTdWJtaXQ6IG51bGwsXG4gIHRvcFN1c3BlbmQ6IG51bGwsXG4gIHRvcFRleHRJbnB1dDogbnVsbCxcbiAgdG9wVGltZVVwZGF0ZTogbnVsbCxcbiAgdG9wVG91Y2hDYW5jZWw6IG51bGwsXG4gIHRvcFRvdWNoRW5kOiBudWxsLFxuICB0b3BUb3VjaE1vdmU6IG51bGwsXG4gIHRvcFRvdWNoU3RhcnQ6IG51bGwsXG4gIHRvcFZvbHVtZUNoYW5nZTogbnVsbCxcbiAgdG9wV2FpdGluZzogbnVsbCxcbiAgdG9wV2hlZWw6IG51bGxcbn0pO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSB7XG4gIHRvcExldmVsVHlwZXM6IHRvcExldmVsVHlwZXMsXG4gIFByb3BhZ2F0aW9uUGhhc2VzOiBQcm9wYWdhdGlvblBoYXNlc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudENvbnN0YW50czsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5IdWJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudFBsdWdpblJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpblJlZ2lzdHJ5Jyk7XG52YXIgRXZlbnRQbHVnaW5VdGlscyA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5VdGlscycpO1xudmFyIFJlYWN0RXJyb3JVdGlscyA9IHJlcXVpcmUoJy4vUmVhY3RFcnJvclV0aWxzJyk7XG5cbnZhciBhY2N1bXVsYXRlSW50byA9IHJlcXVpcmUoJy4vYWNjdW11bGF0ZUludG8nKTtcbnZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSByZXF1aXJlKCcuL2ZvckVhY2hBY2N1bXVsYXRlZCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogSW50ZXJuYWwgc3RvcmUgZm9yIGV2ZW50IGxpc3RlbmVyc1xuICovXG52YXIgbGlzdGVuZXJCYW5rID0ge307XG5cbi8qKlxuICogSW50ZXJuYWwgcXVldWUgb2YgZXZlbnRzIHRoYXQgaGF2ZSBhY2N1bXVsYXRlZCB0aGVpciBkaXNwYXRjaGVzIGFuZCBhcmVcbiAqIHdhaXRpbmcgdG8gaGF2ZSB0aGVpciBkaXNwYXRjaGVzIGV4ZWN1dGVkLlxuICovXG52YXIgZXZlbnRRdWV1ZSA9IG51bGw7XG5cbi8qKlxuICogRGlzcGF0Y2hlcyBhbiBldmVudCBhbmQgcmVsZWFzZXMgaXQgYmFjayBpbnRvIHRoZSBwb29sLCB1bmxlc3MgcGVyc2lzdGVudC5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IGV2ZW50IFN5bnRoZXRpYyBldmVudCB0byBiZSBkaXNwYXRjaGVkLlxuICogQHBhcmFtIHtib29sZWFufSBzaW11bGF0ZWQgSWYgdGhlIGV2ZW50IGlzIHNpbXVsYXRlZCAoY2hhbmdlcyBleG4gYmVoYXZpb3IpXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlID0gZnVuY3Rpb24gKGV2ZW50LCBzaW11bGF0ZWQpIHtcbiAgaWYgKGV2ZW50KSB7XG4gICAgRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIHNpbXVsYXRlZCk7XG5cbiAgICBpZiAoIWV2ZW50LmlzUGVyc2lzdGVudCgpKSB7XG4gICAgICBldmVudC5jb25zdHJ1Y3Rvci5yZWxlYXNlKGV2ZW50KTtcbiAgICB9XG4gIH1cbn07XG52YXIgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlU2ltdWxhdGVkID0gZnVuY3Rpb24gKGUpIHtcbiAgcmV0dXJuIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZShlLCB0cnVlKTtcbn07XG52YXIgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlVG9wTGV2ZWwgPSBmdW5jdGlvbiAoZSkge1xuICByZXR1cm4gZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlKGUsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogLSBgSW5zdGFuY2VIYW5kbGVgOiBbcmVxdWlyZWRdIE1vZHVsZSB0aGF0IHBlcmZvcm1zIGxvZ2ljYWwgdHJhdmVyc2FscyBvZiBET01cbiAqICAgaGllcmFyY2h5IGdpdmVuIGlkcyBvZiB0aGUgbG9naWNhbCBET00gZWxlbWVudHMgaW52b2x2ZWQuXG4gKi9cbnZhciBJbnN0YW5jZUhhbmRsZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSW5zdGFuY2VIYW5kbGUoKSB7XG4gIHZhciB2YWxpZCA9IEluc3RhbmNlSGFuZGxlICYmIEluc3RhbmNlSGFuZGxlLnRyYXZlcnNlVHdvUGhhc2UgJiYgSW5zdGFuY2VIYW5kbGUudHJhdmVyc2VFbnRlckxlYXZlO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh2YWxpZCwgJ0luc3RhbmNlSGFuZGxlIG5vdCBpbmplY3RlZCBiZWZvcmUgdXNlIScpIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYSB1bmlmaWVkIGludGVyZmFjZSBmb3IgZXZlbnQgcGx1Z2lucyB0byBiZSBpbnN0YWxsZWQgYW5kIGNvbmZpZ3VyZWQuXG4gKlxuICogRXZlbnQgcGx1Z2lucyBjYW4gaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIGBleHRyYWN0RXZlbnRzYCB7ZnVuY3Rpb24oc3RyaW5nLCBET01FdmVudFRhcmdldCwgc3RyaW5nLCBvYmplY3QpOiAqfVxuICogICAgIFJlcXVpcmVkLiBXaGVuIGEgdG9wLWxldmVsIGV2ZW50IGlzIGZpcmVkLCB0aGlzIG1ldGhvZCBpcyBleHBlY3RlZCB0b1xuICogICAgIGV4dHJhY3Qgc3ludGhldGljIGV2ZW50cyB0aGF0IHdpbGwgaW4gdHVybiBiZSBxdWV1ZWQgYW5kIGRpc3BhdGNoZWQuXG4gKlxuICogICBgZXZlbnRUeXBlc2Age29iamVjdH1cbiAqICAgICBPcHRpb25hbCwgcGx1Z2lucyB0aGF0IGZpcmUgZXZlbnRzIG11c3QgcHVibGlzaCBhIG1hcHBpbmcgb2YgcmVnaXN0cmF0aW9uXG4gKiAgICAgbmFtZXMgdGhhdCBhcmUgdXNlZCB0byByZWdpc3RlciBsaXN0ZW5lcnMuIFZhbHVlcyBvZiB0aGlzIG1hcHBpbmcgbXVzdFxuICogICAgIGJlIG9iamVjdHMgdGhhdCBjb250YWluIGByZWdpc3RyYXRpb25OYW1lYCBvciBgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNgLlxuICpcbiAqICAgYGV4ZWN1dGVEaXNwYXRjaGAge2Z1bmN0aW9uKG9iamVjdCwgZnVuY3Rpb24sIHN0cmluZyl9XG4gKiAgICAgT3B0aW9uYWwsIGFsbG93cyBwbHVnaW5zIHRvIG92ZXJyaWRlIGhvdyBhbiBldmVudCBnZXRzIGRpc3BhdGNoZWQuIEJ5XG4gKiAgICAgZGVmYXVsdCwgdGhlIGxpc3RlbmVyIGlzIHNpbXBseSBpbnZva2VkLlxuICpcbiAqIEVhY2ggcGx1Z2luIHRoYXQgaXMgaW5qZWN0ZWQgaW50byBgRXZlbnRzUGx1Z2luSHViYCBpcyBpbW1lZGlhdGVseSBvcGVyYWJsZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBFdmVudFBsdWdpbkh1YiA9IHtcblxuICAvKipcbiAgICogTWV0aG9kcyBmb3IgaW5qZWN0aW5nIGRlcGVuZGVuY2llcy5cbiAgICovXG4gIGluamVjdGlvbjoge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IEluamVjdGVkTW91bnRcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaW5qZWN0TW91bnQ6IEV2ZW50UGx1Z2luVXRpbHMuaW5qZWN0aW9uLmluamVjdE1vdW50LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IEluamVjdGVkSW5zdGFuY2VIYW5kbGVcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaW5qZWN0SW5zdGFuY2VIYW5kbGU6IGZ1bmN0aW9uIChJbmplY3RlZEluc3RhbmNlSGFuZGxlKSB7XG4gICAgICBJbnN0YW5jZUhhbmRsZSA9IEluamVjdGVkSW5zdGFuY2VIYW5kbGU7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YWxpZGF0ZUluc3RhbmNlSGFuZGxlKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGdldEluc3RhbmNlSGFuZGxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YWxpZGF0ZUluc3RhbmNlSGFuZGxlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gSW5zdGFuY2VIYW5kbGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IEluamVjdGVkRXZlbnRQbHVnaW5PcmRlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBpbmplY3RFdmVudFBsdWdpbk9yZGVyOiBFdmVudFBsdWdpblJlZ2lzdHJ5LmluamVjdEV2ZW50UGx1Z2luT3JkZXIsXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cbiAgICAgKi9cbiAgICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IEV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lXG5cbiAgfSxcblxuICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6IEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLFxuXG4gIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgYGxpc3RlbmVyYCBhdCBgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2lkXWAuIElzIGlkZW1wb3RlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGxpc3RlbmVyIFRoZSBjYWxsYmFjayB0byBzdG9yZS5cbiAgICovXG4gIHB1dExpc3RlbmVyOiBmdW5jdGlvbiAoaWQsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKSB7XG4gICAgISh0eXBlb2YgbGlzdGVuZXIgPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkICVzIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24sIGluc3RlYWQgZ290IHR5cGUgJXMnLCByZWdpc3RyYXRpb25OYW1lLCB0eXBlb2YgbGlzdGVuZXIpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXSB8fCAobGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdID0ge30pO1xuICAgIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2lkXSA9IGxpc3RlbmVyO1xuXG4gICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgaWYgKFBsdWdpbk1vZHVsZSAmJiBQbHVnaW5Nb2R1bGUuZGlkUHV0TGlzdGVuZXIpIHtcbiAgICAgIFBsdWdpbk1vZHVsZS5kaWRQdXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKiBAcmV0dXJuIHs/ZnVuY3Rpb259IFRoZSBzdG9yZWQgY2FsbGJhY2suXG4gICAqL1xuICBnZXRMaXN0ZW5lcjogZnVuY3Rpb24gKGlkLCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIHJldHVybiBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSAmJiBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpZF07XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSBsaXN0ZW5lciBmcm9tIHRoZSByZWdpc3RyYXRpb24gYmFuay5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKi9cbiAgZGVsZXRlTGlzdGVuZXI6IGZ1bmN0aW9uIChpZCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcikge1xuICAgICAgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIG5ldmVyIGJlIG51bGwgLS0gd2hlbiBpcyBpdD9cbiAgICBpZiAoYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgIGRlbGV0ZSBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpZF07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBsaXN0ZW5lcnMgZm9yIHRoZSBET00gZWxlbWVudCB3aXRoIHRoZSBzdXBwbGllZCBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICovXG4gIGRlbGV0ZUFsbExpc3RlbmVyczogZnVuY3Rpb24gKGlkKSB7XG4gICAgZm9yICh2YXIgcmVnaXN0cmF0aW9uTmFtZSBpbiBsaXN0ZW5lckJhbmspIHtcbiAgICAgIGlmICghbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2lkXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgICBpZiAoUGx1Z2luTW9kdWxlICYmIFBsdWdpbk1vZHVsZS53aWxsRGVsZXRlTGlzdGVuZXIpIHtcbiAgICAgICAgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV1baWRdO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQWxsb3dzIHJlZ2lzdGVyZWQgcGx1Z2lucyBhbiBvcHBvcnR1bml0eSB0byBleHRyYWN0IGV2ZW50cyBmcm9tIHRvcC1sZXZlbFxuICAgKiBuYXRpdmUgYnJvd3NlciBldmVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICB2YXIgZXZlbnRzO1xuICAgIHZhciBwbHVnaW5zID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gTm90IGV2ZXJ5IHBsdWdpbiBpbiB0aGUgb3JkZXJpbmcgbWF5IGJlIGxvYWRlZCBhdCBydW50aW1lLlxuICAgICAgdmFyIHBvc3NpYmxlUGx1Z2luID0gcGx1Z2luc1tpXTtcbiAgICAgIGlmIChwb3NzaWJsZVBsdWdpbikge1xuICAgICAgICB2YXIgZXh0cmFjdGVkRXZlbnRzID0gcG9zc2libGVQbHVnaW4uZXh0cmFjdEV2ZW50cyh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICBpZiAoZXh0cmFjdGVkRXZlbnRzKSB7XG4gICAgICAgICAgZXZlbnRzID0gYWNjdW11bGF0ZUludG8oZXZlbnRzLCBleHRyYWN0ZWRFdmVudHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBldmVudHM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgc3ludGhldGljIGV2ZW50IHRoYXQgc2hvdWxkIGJlIGRpc3BhdGNoZWQgd2hlblxuICAgKiBgcHJvY2Vzc0V2ZW50UXVldWVgIGlzIGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZXZlbnRzIEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVFdmVudHM6IGZ1bmN0aW9uIChldmVudHMpIHtcbiAgICBpZiAoZXZlbnRzKSB7XG4gICAgICBldmVudFF1ZXVlID0gYWNjdW11bGF0ZUludG8oZXZlbnRRdWV1ZSwgZXZlbnRzKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYWxsIHN5bnRoZXRpYyBldmVudHMgb24gdGhlIGV2ZW50IHF1ZXVlLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHByb2Nlc3NFdmVudFF1ZXVlOiBmdW5jdGlvbiAoc2ltdWxhdGVkKSB7XG4gICAgLy8gU2V0IGBldmVudFF1ZXVlYCB0byBudWxsIGJlZm9yZSBwcm9jZXNzaW5nIGl0IHNvIHRoYXQgd2UgY2FuIHRlbGwgaWYgbW9yZVxuICAgIC8vIGV2ZW50cyBnZXQgZW5xdWV1ZWQgd2hpbGUgcHJvY2Vzc2luZy5cbiAgICB2YXIgcHJvY2Vzc2luZ0V2ZW50UXVldWUgPSBldmVudFF1ZXVlO1xuICAgIGV2ZW50UXVldWUgPSBudWxsO1xuICAgIGlmIChzaW11bGF0ZWQpIHtcbiAgICAgIGZvckVhY2hBY2N1bXVsYXRlZChwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlU2ltdWxhdGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yRWFjaEFjY3VtdWxhdGVkKHByb2Nlc3NpbmdFdmVudFF1ZXVlLCBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VUb3BMZXZlbCk7XG4gICAgfVxuICAgICEhZXZlbnRRdWV1ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdwcm9jZXNzRXZlbnRRdWV1ZSgpOiBBZGRpdGlvbmFsIGV2ZW50cyB3ZXJlIGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcgJyArICdhbiBldmVudCBxdWV1ZS4gU3VwcG9ydCBmb3IgdGhpcyBoYXMgbm90IHlldCBiZWVuIGltcGxlbWVudGVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAvLyBUaGlzIHdvdWxkIGJlIGEgZ29vZCB0aW1lIHRvIHJldGhyb3cgaWYgYW55IG9mIHRoZSBldmVudCBoYW5kbGVycyB0aHJldy5cbiAgICBSZWFjdEVycm9yVXRpbHMucmV0aHJvd0NhdWdodEVycm9yKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZXNlIGFyZSBuZWVkZWQgZm9yIHRlc3RzIG9ubHkuIERvIG5vdCB1c2UhXG4gICAqL1xuICBfX3B1cmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgbGlzdGVuZXJCYW5rID0ge307XG4gIH0sXG5cbiAgX19nZXRMaXN0ZW5lckJhbms6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbGlzdGVuZXJCYW5rO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5IdWI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50UGx1Z2luUmVnaXN0cnlcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogSW5qZWN0YWJsZSBvcmRlcmluZyBvZiBldmVudCBwbHVnaW5zLlxuICovXG52YXIgRXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG5cbi8qKlxuICogSW5qZWN0YWJsZSBtYXBwaW5nIGZyb20gbmFtZXMgdG8gZXZlbnQgcGx1Z2luIG1vZHVsZXMuXG4gKi9cbnZhciBuYW1lc1RvUGx1Z2lucyA9IHt9O1xuXG4vKipcbiAqIFJlY29tcHV0ZXMgdGhlIHBsdWdpbiBsaXN0IHVzaW5nIHRoZSBpbmplY3RlZCBwbHVnaW5zIGFuZCBwbHVnaW4gb3JkZXJpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKSB7XG4gIGlmICghRXZlbnRQbHVnaW5PcmRlcikge1xuICAgIC8vIFdhaXQgdW50aWwgYW4gYEV2ZW50UGx1Z2luT3JkZXJgIGlzIGluamVjdGVkLlxuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgdmFyIFBsdWdpbk1vZHVsZSA9IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgIHZhciBwbHVnaW5JbmRleCA9IEV2ZW50UGx1Z2luT3JkZXIuaW5kZXhPZihwbHVnaW5OYW1lKTtcbiAgICAhKHBsdWdpbkluZGV4ID4gLTEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgZXZlbnQgcGx1Z2lucyB0aGF0IGRvIG5vdCBleGlzdCBpbiAnICsgJ3RoZSBwbHVnaW4gb3JkZXJpbmcsIGAlc2AuJywgcGx1Z2luTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIGlmIChFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbcGx1Z2luSW5kZXhdKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgIVBsdWdpbk1vZHVsZS5leHRyYWN0RXZlbnRzID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IEV2ZW50IHBsdWdpbnMgbXVzdCBpbXBsZW1lbnQgYW4gYGV4dHJhY3RFdmVudHNgICcgKyAnbWV0aG9kLCBidXQgYCVzYCBkb2VzIG5vdC4nLCBwbHVnaW5OYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zW3BsdWdpbkluZGV4XSA9IFBsdWdpbk1vZHVsZTtcbiAgICB2YXIgcHVibGlzaGVkRXZlbnRzID0gUGx1Z2luTW9kdWxlLmV2ZW50VHlwZXM7XG4gICAgZm9yICh2YXIgZXZlbnROYW1lIGluIHB1Ymxpc2hlZEV2ZW50cykge1xuICAgICAgIXB1Ymxpc2hFdmVudEZvclBsdWdpbihwdWJsaXNoZWRFdmVudHNbZXZlbnROYW1lXSwgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IEZhaWxlZCB0byBwdWJsaXNoIGV2ZW50IGAlc2AgZm9yIHBsdWdpbiBgJXNgLicsIGV2ZW50TmFtZSwgcGx1Z2luTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFB1Ymxpc2hlcyBhbiBldmVudCBzbyB0aGF0IGl0IGNhbiBiZSBkaXNwYXRjaGVkIGJ5IHRoZSBzdXBwbGllZCBwbHVnaW4uXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIERpc3BhdGNoIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBQbHVnaW5Nb2R1bGUgUGx1Z2luIHB1Ymxpc2hpbmcgdGhlIGV2ZW50LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgd2FzIHN1Y2Nlc3NmdWxseSBwdWJsaXNoZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwdWJsaXNoRXZlbnRGb3JQbHVnaW4oZGlzcGF0Y2hDb25maWcsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSB7XG4gICEhRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgJyArICdldmVudCBuYW1lLCBgJXNgLicsIGV2ZW50TmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICBFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlnc1tldmVudE5hbWVdID0gZGlzcGF0Y2hDb25maWc7XG5cbiAgdmFyIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzID0gZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7XG4gIGlmIChwaGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgIGZvciAodmFyIHBoYXNlTmFtZSBpbiBwaGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlTmFtZSkpIHtcbiAgICAgICAgdmFyIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUgPSBwaGFzZWRSZWdpc3RyYXRpb25OYW1lc1twaGFzZU5hbWVdO1xuICAgICAgICBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShwaGFzZWRSZWdpc3RyYXRpb25OYW1lLCBQbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lLCBQbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFB1Ymxpc2hlcyBhIHJlZ2lzdHJhdGlvbiBuYW1lIHRoYXQgaXMgdXNlZCB0byBpZGVudGlmeSBkaXNwYXRjaGVkIGV2ZW50cyBhbmRcbiAqIGNhbiBiZSB1c2VkIHdpdGggYEV2ZW50UGx1Z2luSHViLnB1dExpc3RlbmVyYCB0byByZWdpc3RlciBsaXN0ZW5lcnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgUmVnaXN0cmF0aW9uIG5hbWUgdG8gYWRkLlxuICogQHBhcmFtIHtvYmplY3R9IFBsdWdpbk1vZHVsZSBQbHVnaW4gcHVibGlzaGluZyB0aGUgZXZlbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShyZWdpc3RyYXRpb25OYW1lLCBQbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkge1xuICAhIUV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lICcgKyAncmVnaXN0cmF0aW9uIG5hbWUsIGAlc2AuJywgcmVnaXN0cmF0aW9uTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gUGx1Z2luTW9kdWxlO1xuICBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBQbHVnaW5Nb2R1bGUuZXZlbnRUeXBlc1tldmVudE5hbWVdLmRlcGVuZGVuY2llcztcbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgcGx1Z2lucyBzbyB0aGF0IHRoZXkgY2FuIGV4dHJhY3QgYW5kIGRpc3BhdGNoIGV2ZW50cy5cbiAqXG4gKiBAc2VlIHtFdmVudFBsdWdpbkh1Yn1cbiAqL1xudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSB7XG5cbiAgLyoqXG4gICAqIE9yZGVyZWQgbGlzdCBvZiBpbmplY3RlZCBwbHVnaW5zLlxuICAgKi9cbiAgcGx1Z2luczogW10sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBldmVudCBuYW1lIHRvIGRpc3BhdGNoIGNvbmZpZ1xuICAgKi9cbiAgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOiB7fSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIHBsdWdpbiBtb2R1bGVcbiAgICovXG4gIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiB7fSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIGV2ZW50IG5hbWVcbiAgICovXG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6IHt9LFxuXG4gIC8qKlxuICAgKiBJbmplY3RzIGFuIG9yZGVyaW5nIG9mIHBsdWdpbnMgKGJ5IHBsdWdpbiBuYW1lKS4gVGhpcyBhbGxvd3MgdGhlIG9yZGVyaW5nXG4gICAqIHRvIGJlIGRlY291cGxlZCBmcm9tIGluamVjdGlvbiBvZiB0aGUgYWN0dWFsIHBsdWdpbnMgc28gdGhhdCBvcmRlcmluZyBpc1xuICAgKiBhbHdheXMgZGV0ZXJtaW5pc3RpYyByZWdhcmRsZXNzIG9mIHBhY2thZ2luZywgb24tdGhlLWZseSBpbmplY3Rpb24sIGV0Yy5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheX0gSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5PcmRlcn1cbiAgICovXG4gIGluamVjdEV2ZW50UGx1Z2luT3JkZXI6IGZ1bmN0aW9uIChJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIpIHtcbiAgICAhIUV2ZW50UGx1Z2luT3JkZXIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW4gb3JkZXJpbmcgbW9yZSB0aGFuICcgKyAnb25jZS4gWW91IGFyZSBsaWtlbHkgdHJ5aW5nIHRvIGxvYWQgbW9yZSB0aGFuIG9uZSBjb3B5IG9mIFJlYWN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAvLyBDbG9uZSB0aGUgb3JkZXJpbmcgc28gaXQgY2Fubm90IGJlIGR5bmFtaWNhbGx5IG11dGF0ZWQuXG4gICAgRXZlbnRQbHVnaW5PcmRlciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKEluamVjdGVkRXZlbnRQbHVnaW5PcmRlcik7XG4gICAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcbiAgfSxcblxuICAvKipcbiAgICogSW5qZWN0cyBwbHVnaW5zIHRvIGJlIHVzZWQgYnkgYEV2ZW50UGx1Z2luSHViYC4gVGhlIHBsdWdpbiBuYW1lcyBtdXN0IGJlXG4gICAqIGluIHRoZSBvcmRlcmluZyBpbmplY3RlZCBieSBgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcmAuXG4gICAqXG4gICAqIFBsdWdpbnMgY2FuIGJlIGluamVjdGVkIGFzIHBhcnQgb2YgcGFnZSBpbml0aWFsaXphdGlvbiBvciBvbi10aGUtZmx5LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cbiAgICogQGludGVybmFsXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWV9XG4gICAqL1xuICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IGZ1bmN0aW9uIChpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gICAgdmFyIGlzT3JkZXJpbmdEaXJ0eSA9IGZhbHNlO1xuICAgIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucykge1xuICAgICAgaWYgKCFpbmplY3RlZE5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIFBsdWdpbk1vZHVsZSA9IGluamVjdGVkTmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgICBpZiAoIW5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpIHx8IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdICE9PSBQbHVnaW5Nb2R1bGUpIHtcbiAgICAgICAgISFuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IHR3byBkaWZmZXJlbnQgZXZlbnQgcGx1Z2lucyAnICsgJ3VzaW5nIHRoZSBzYW1lIG5hbWUsIGAlc2AuJywgcGx1Z2luTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgICBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSA9IFBsdWdpbk1vZHVsZTtcbiAgICAgICAgaXNPcmRlcmluZ0RpcnR5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzT3JkZXJpbmdEaXJ0eSkge1xuICAgICAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIExvb2tzIHVwIHRoZSBwbHVnaW4gZm9yIHRoZSBzdXBwbGllZCBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IEEgc3ludGhldGljIGV2ZW50LlxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fSBUaGUgcGx1Z2luIHRoYXQgY3JlYXRlZCB0aGUgc3VwcGxpZWQgZXZlbnQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBkaXNwYXRjaENvbmZpZyA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnO1xuICAgIGlmIChkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICByZXR1cm4gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lXSB8fCBudWxsO1xuICAgIH1cbiAgICBmb3IgKHZhciBwaGFzZSBpbiBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgaWYgKCFkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcy5oYXNPd25Qcm9wZXJ0eShwaGFzZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgUGx1Z2luTW9kdWxlID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1twaGFzZV1dO1xuICAgICAgaWYgKFBsdWdpbk1vZHVsZSkge1xuICAgICAgICByZXR1cm4gUGx1Z2luTW9kdWxlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Jlc2V0RXZlbnRQbHVnaW5zOiBmdW5jdGlvbiAoKSB7XG4gICAgRXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG4gICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBuYW1lc1RvUGx1Z2lucykge1xuICAgICAgaWYgKG5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpKSB7XG4gICAgICAgIGRlbGV0ZSBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zLmxlbmd0aCA9IDA7XG5cbiAgICB2YXIgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M7XG4gICAgZm9yICh2YXIgZXZlbnROYW1lIGluIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlncykge1xuICAgICAgaWYgKGV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpKSB7XG4gICAgICAgIGRlbGV0ZSBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3NbZXZlbnROYW1lXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzO1xuICAgIGZvciAodmFyIHJlZ2lzdHJhdGlvbk5hbWUgaW4gcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMpIHtcbiAgICAgIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShyZWdpc3RyYXRpb25OYW1lKSkge1xuICAgICAgICBkZWxldGUgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5SZWdpc3RyeTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5VdGlsc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZSgnLi9FdmVudENvbnN0YW50cycpO1xudmFyIFJlYWN0RXJyb3JVdGlscyA9IHJlcXVpcmUoJy4vUmVhY3RFcnJvclV0aWxzJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG4vKipcbiAqIEluamVjdGVkIGRlcGVuZGVuY2llczpcbiAqL1xuXG4vKipcbiAqIC0gYE1vdW50YDogW3JlcXVpcmVkXSBNb2R1bGUgdGhhdCBjYW4gY29udmVydCBiZXR3ZWVuIFJlYWN0IGRvbSBJRHMgYW5kXG4gKiAgIGFjdHVhbCBub2RlIHJlZmVyZW5jZXMuXG4gKi9cbnZhciBpbmplY3Rpb24gPSB7XG4gIE1vdW50OiBudWxsLFxuICBpbmplY3RNb3VudDogZnVuY3Rpb24gKEluamVjdGVkTW91bnQpIHtcbiAgICBpbmplY3Rpb24uTW91bnQgPSBJbmplY3RlZE1vdW50O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhJbmplY3RlZE1vdW50ICYmIEluamVjdGVkTW91bnQuZ2V0Tm9kZSAmJiBJbmplY3RlZE1vdW50LmdldElELCAnRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0TW91bnQoLi4uKTogSW5qZWN0ZWQgTW91bnQgJyArICdtb2R1bGUgaXMgbWlzc2luZyBnZXROb2RlIG9yIGdldElELicpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG5mdW5jdGlvbiBpc0VuZGlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwIHx8IHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaEVuZCB8fCB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hDYW5jZWw7XG59XG5cbmZ1bmN0aW9uIGlzTW92ZWlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU1vdmUgfHwgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoTW92ZTtcbn1cbmZ1bmN0aW9uIGlzU3RhcnRpc2godG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duIHx8IHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0O1xufVxuXG52YXIgdmFsaWRhdGVFdmVudERpc3BhdGNoZXM7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgICB2YXIgZGlzcGF0Y2hJRHMgPSBldmVudC5fZGlzcGF0Y2hJRHM7XG5cbiAgICB2YXIgbGlzdGVuZXJzSXNBcnIgPSBBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKTtcbiAgICB2YXIgaWRzSXNBcnIgPSBBcnJheS5pc0FycmF5KGRpc3BhdGNoSURzKTtcbiAgICB2YXIgSURzTGVuID0gaWRzSXNBcnIgPyBkaXNwYXRjaElEcy5sZW5ndGggOiBkaXNwYXRjaElEcyA/IDEgOiAwO1xuICAgIHZhciBsaXN0ZW5lcnNMZW4gPSBsaXN0ZW5lcnNJc0FyciA/IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aCA6IGRpc3BhdGNoTGlzdGVuZXJzID8gMSA6IDA7XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhpZHNJc0FyciA9PT0gbGlzdGVuZXJzSXNBcnIgJiYgSURzTGVuID09PSBsaXN0ZW5lcnNMZW4sICdFdmVudFBsdWdpblV0aWxzOiBJbnZhbGlkIGBldmVudGAuJykgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggdGhlIGV2ZW50IHRvIHRoZSBsaXN0ZW5lci5cbiAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IFN5bnRoZXRpY0V2ZW50IHRvIGhhbmRsZVxuICogQHBhcmFtIHtib29sZWFufSBzaW11bGF0ZWQgSWYgdGhlIGV2ZW50IGlzIHNpbXVsYXRlZCAoY2hhbmdlcyBleG4gYmVoYXZpb3IpXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBBcHBsaWNhdGlvbi1sZXZlbCBjYWxsYmFja1xuICogQHBhcmFtIHtzdHJpbmd9IGRvbUlEIERPTSBpZCB0byBwYXNzIHRvIHRoZSBjYWxsYmFjay5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBzaW11bGF0ZWQsIGxpc3RlbmVyLCBkb21JRCkge1xuICB2YXIgdHlwZSA9IGV2ZW50LnR5cGUgfHwgJ3Vua25vd24tZXZlbnQnO1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gaW5qZWN0aW9uLk1vdW50LmdldE5vZGUoZG9tSUQpO1xuICBpZiAoc2ltdWxhdGVkKSB7XG4gICAgUmVhY3RFcnJvclV0aWxzLmludm9rZUd1YXJkZWRDYWxsYmFja1dpdGhDYXRjaCh0eXBlLCBsaXN0ZW5lciwgZXZlbnQsIGRvbUlEKTtcbiAgfSBlbHNlIHtcbiAgICBSZWFjdEVycm9yVXRpbHMuaW52b2tlR3VhcmRlZENhbGxiYWNrKHR5cGUsIGxpc3RlbmVyLCBldmVudCwgZG9tSUQpO1xuICB9XG4gIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBudWxsO1xufVxuXG4vKipcbiAqIFN0YW5kYXJkL3NpbXBsZSBpdGVyYXRpb24gdGhyb3VnaCBhbiBldmVudCdzIGNvbGxlY3RlZCBkaXNwYXRjaGVzLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIHNpbXVsYXRlZCkge1xuICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaElEcyA9IGV2ZW50Ll9kaXNwYXRjaElEcztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBMaXN0ZW5lcnMgYW5kIElEcyBhcmUgdHdvIHBhcmFsbGVsIGFycmF5cyB0aGF0IGFyZSBhbHdheXMgaW4gc3luYy5cbiAgICAgIGV4ZWN1dGVEaXNwYXRjaChldmVudCwgc2ltdWxhdGVkLCBkaXNwYXRjaExpc3RlbmVyc1tpXSwgZGlzcGF0Y2hJRHNbaV0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgIGV4ZWN1dGVEaXNwYXRjaChldmVudCwgc2ltdWxhdGVkLCBkaXNwYXRjaExpc3RlbmVycywgZGlzcGF0Y2hJRHMpO1xuICB9XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaElEcyA9IG51bGw7XG59XG5cbi8qKlxuICogU3RhbmRhcmQvc2ltcGxlIGl0ZXJhdGlvbiB0aHJvdWdoIGFuIGV2ZW50J3MgY29sbGVjdGVkIGRpc3BhdGNoZXMsIGJ1dCBzdG9wc1xuICogYXQgdGhlIGZpcnN0IGRpc3BhdGNoIGV4ZWN1dGlvbiByZXR1cm5pbmcgdHJ1ZSwgYW5kIHJldHVybnMgdGhhdCBpZC5cbiAqXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBpZCBvZiB0aGUgZmlyc3QgZGlzcGF0Y2ggZXhlY3V0aW9uIHdobydzIGxpc3RlbmVyIHJldHVybnNcbiAqIHRydWUsIG9yIG51bGwgaWYgbm8gbGlzdGVuZXIgcmV0dXJuZWQgdHJ1ZS5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwoZXZlbnQpIHtcbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICB2YXIgZGlzcGF0Y2hJRHMgPSBldmVudC5fZGlzcGF0Y2hJRHM7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMoZXZlbnQpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gTGlzdGVuZXJzIGFuZCBJRHMgYXJlIHR3byBwYXJhbGxlbCBhcnJheXMgdGhhdCBhcmUgYWx3YXlzIGluIHN5bmMuXG4gICAgICBpZiAoZGlzcGF0Y2hMaXN0ZW5lcnNbaV0oZXZlbnQsIGRpc3BhdGNoSURzW2ldKSkge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2hJRHNbaV07XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKSB7XG4gICAgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKGV2ZW50LCBkaXNwYXRjaElEcykpIHtcbiAgICAgIHJldHVybiBkaXNwYXRjaElEcztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQHNlZSBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbFxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlKGV2ZW50KSB7XG4gIHZhciByZXQgPSBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbChldmVudCk7XG4gIGV2ZW50Ll9kaXNwYXRjaElEcyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogRXhlY3V0aW9uIG9mIGEgXCJkaXJlY3RcIiBkaXNwYXRjaCAtIHRoZXJlIG11c3QgYmUgYXQgbW9zdCBvbmUgZGlzcGF0Y2hcbiAqIGFjY3VtdWxhdGVkIG9uIHRoZSBldmVudCBvciBpdCBpcyBjb25zaWRlcmVkIGFuIGVycm9yLiBJdCBkb2Vzbid0IHJlYWxseSBtYWtlXG4gKiBzZW5zZSBmb3IgYW4gZXZlbnQgd2l0aCBtdWx0aXBsZSBkaXNwYXRjaGVzIChidWJibGVkKSB0byBrZWVwIHRyYWNrIG9mIHRoZVxuICogcmV0dXJuIHZhbHVlcyBhdCBlYWNoIGRpc3BhdGNoIGV4ZWN1dGlvbiwgYnV0IGl0IGRvZXMgdGVuZCB0byBtYWtlIHNlbnNlIHdoZW5cbiAqIGRlYWxpbmcgd2l0aCBcImRpcmVjdFwiIGRpc3BhdGNoZXMuXG4gKlxuICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBleGVjdXRpbmcgdGhlIHNpbmdsZSBkaXNwYXRjaC5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpcmVjdERpc3BhdGNoKGV2ZW50KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMoZXZlbnQpO1xuICB9XG4gIHZhciBkaXNwYXRjaExpc3RlbmVyID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICB2YXIgZGlzcGF0Y2hJRCA9IGV2ZW50Ll9kaXNwYXRjaElEcztcbiAgISFBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2V4ZWN1dGVEaXJlY3REaXNwYXRjaCguLi4pOiBJbnZhbGlkIGBldmVudGAuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICB2YXIgcmVzID0gZGlzcGF0Y2hMaXN0ZW5lciA/IGRpc3BhdGNoTGlzdGVuZXIoZXZlbnQsIGRpc3BhdGNoSUQpIDogbnVsbDtcbiAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbDtcbiAgZXZlbnQuX2Rpc3BhdGNoSURzID0gbnVsbDtcbiAgcmV0dXJuIHJlcztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZmYgbnVtYmVyIG9mIGRpc3BhdGNoZXMgYWNjdW11bGF0ZWQgaXMgZ3JlYXRlciB0aGFuIDAuXG4gKi9cbmZ1bmN0aW9uIGhhc0Rpc3BhdGNoZXMoZXZlbnQpIHtcbiAgcmV0dXJuICEhZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xufVxuXG4vKipcbiAqIEdlbmVyYWwgdXRpbGl0aWVzIHRoYXQgYXJlIHVzZWZ1bCBpbiBjcmVhdGluZyBjdXN0b20gRXZlbnQgUGx1Z2lucy5cbiAqL1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSB7XG4gIGlzRW5kaXNoOiBpc0VuZGlzaCxcbiAgaXNNb3ZlaXNoOiBpc01vdmVpc2gsXG4gIGlzU3RhcnRpc2g6IGlzU3RhcnRpc2gsXG5cbiAgZXhlY3V0ZURpcmVjdERpc3BhdGNoOiBleGVjdXRlRGlyZWN0RGlzcGF0Y2gsXG4gIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcjogZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyLFxuICBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlOiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlLFxuICBoYXNEaXNwYXRjaGVzOiBoYXNEaXNwYXRjaGVzLFxuXG4gIGdldE5vZGU6IGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBpbmplY3Rpb24uTW91bnQuZ2V0Tm9kZShpZCk7XG4gIH0sXG4gIGdldElEOiBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBpbmplY3Rpb24uTW91bnQuZ2V0SUQobm9kZSk7XG4gIH0sXG5cbiAgaW5qZWN0aW9uOiBpbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5VdGlsczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQcm9wYWdhdG9yc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZSgnLi9FdmVudENvbnN0YW50cycpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIGFjY3VtdWxhdGVJbnRvID0gcmVxdWlyZSgnLi9hY2N1bXVsYXRlSW50bycpO1xudmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IHJlcXVpcmUoJy4vZm9yRWFjaEFjY3VtdWxhdGVkJyk7XG5cbnZhciBQcm9wYWdhdGlvblBoYXNlcyA9IEV2ZW50Q29uc3RhbnRzLlByb3BhZ2F0aW9uUGhhc2VzO1xudmFyIGdldExpc3RlbmVyID0gRXZlbnRQbHVnaW5IdWIuZ2V0TGlzdGVuZXI7XG5cbi8qKlxuICogU29tZSBldmVudCB0eXBlcyBoYXZlIGEgbm90aW9uIG9mIGRpZmZlcmVudCByZWdpc3RyYXRpb24gbmFtZXMgZm9yIGRpZmZlcmVudFxuICogXCJwaGFzZXNcIiBvZiBwcm9wYWdhdGlvbi4gVGhpcyBmaW5kcyBsaXN0ZW5lcnMgYnkgYSBnaXZlbiBwaGFzZS5cbiAqL1xuZnVuY3Rpb24gbGlzdGVuZXJBdFBoYXNlKGlkLCBldmVudCwgcHJvcGFnYXRpb25QaGFzZSkge1xuICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3Byb3BhZ2F0aW9uUGhhc2VdO1xuICByZXR1cm4gZ2V0TGlzdGVuZXIoaWQsIHJlZ2lzdHJhdGlvbk5hbWUpO1xufVxuXG4vKipcbiAqIFRhZ3MgYSBgU3ludGhldGljRXZlbnRgIHdpdGggZGlzcGF0Y2hlZCBsaXN0ZW5lcnMuIENyZWF0aW5nIHRoaXMgZnVuY3Rpb25cbiAqIGhlcmUsIGFsbG93cyB1cyB0byBub3QgaGF2ZSB0byBiaW5kIG9yIGNyZWF0ZSBmdW5jdGlvbnMgZm9yIGVhY2ggZXZlbnQuXG4gKiBNdXRhdGluZyB0aGUgZXZlbnQncyBtZW1iZXJzIGFsbG93cyB1cyB0byBub3QgaGF2ZSB0byBjcmVhdGUgYSB3cmFwcGluZ1xuICogXCJkaXNwYXRjaFwiIG9iamVjdCB0aGF0IHBhaXJzIHRoZSBldmVudCB3aXRoIHRoZSBsaXN0ZW5lci5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyhkb21JRCwgdXB3YXJkcywgZXZlbnQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhkb21JRCwgJ0Rpc3BhdGNoaW5nIGlkIG11c3Qgbm90IGJlIG51bGwnKSA6IHVuZGVmaW5lZDtcbiAgfVxuICB2YXIgcGhhc2UgPSB1cHdhcmRzID8gUHJvcGFnYXRpb25QaGFzZXMuYnViYmxlZCA6IFByb3BhZ2F0aW9uUGhhc2VzLmNhcHR1cmVkO1xuICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lckF0UGhhc2UoZG9tSUQsIGV2ZW50LCBwaGFzZSk7XG4gIGlmIChsaXN0ZW5lcikge1xuICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgbGlzdGVuZXIpO1xuICAgIGV2ZW50Ll9kaXNwYXRjaElEcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaElEcywgZG9tSUQpO1xuICB9XG59XG5cbi8qKlxuICogQ29sbGVjdCBkaXNwYXRjaGVzIChtdXN0IGJlIGVudGlyZWx5IGNvbGxlY3RlZCBiZWZvcmUgZGlzcGF0Y2hpbmcgLSBzZWUgdW5pdFxuICogdGVzdHMpLiBMYXppbHkgYWxsb2NhdGUgdGhlIGFycmF5IHRvIGNvbnNlcnZlIG1lbW9yeS4gIFdlIG11c3QgbG9vcCB0aHJvdWdoXG4gKiBlYWNoIGV2ZW50IGFuZCBwZXJmb3JtIHRoZSB0cmF2ZXJzYWwgZm9yIGVhY2ggb25lLiBXZSBjYW5ub3QgcGVyZm9ybSBhXG4gKiBzaW5nbGUgdHJhdmVyc2FsIGZvciB0aGUgZW50aXJlIGNvbGxlY3Rpb24gb2YgZXZlbnRzIGJlY2F1c2UgZWFjaCBldmVudCBtYXlcbiAqIGhhdmUgYSBkaWZmZXJlbnQgdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgIEV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5nZXRJbnN0YW5jZUhhbmRsZSgpLnRyYXZlcnNlVHdvUGhhc2UoZXZlbnQuZGlzcGF0Y2hNYXJrZXIsIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMsIGV2ZW50KTtcbiAgfVxufVxuXG4vKipcbiAqIFNhbWUgYXMgYGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGVgLCBidXQgc2tpcHMgb3ZlciB0aGUgdGFyZ2V0SUQuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGVTa2lwVGFyZ2V0KGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgIEV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5nZXRJbnN0YW5jZUhhbmRsZSgpLnRyYXZlcnNlVHdvUGhhc2VTa2lwVGFyZ2V0KGV2ZW50LmRpc3BhdGNoTWFya2VyLCBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzLCBldmVudCk7XG4gIH1cbn1cblxuLyoqXG4gKiBBY2N1bXVsYXRlcyB3aXRob3V0IHJlZ2FyZCB0byBkaXJlY3Rpb24sIGRvZXMgbm90IGxvb2sgZm9yIHBoYXNlZFxuICogcmVnaXN0cmF0aW9uIG5hbWVzLiBTYW1lIGFzIGBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZWAgYnV0IHdpdGhvdXRcbiAqIHJlcXVpcmluZyB0aGF0IHRoZSBgZGlzcGF0Y2hNYXJrZXJgIGJlIHRoZSBzYW1lIGFzIHRoZSBkaXNwYXRjaGVkIElELlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhpZCwgaWdub3JlZERpcmVjdGlvbiwgZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWU7XG4gICAgdmFyIGxpc3RlbmVyID0gZ2V0TGlzdGVuZXIoaWQsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLCBsaXN0ZW5lcik7XG4gICAgICBldmVudC5fZGlzcGF0Y2hJRHMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hJRHMsIGlkKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2N1bXVsYXRlcyBkaXNwYXRjaGVzIG9uIGFuIGBTeW50aGV0aWNFdmVudGAsIGJ1dCBvbmx5IGZvciB0aGVcbiAqIGBkaXNwYXRjaE1hcmtlcmAuXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudFxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZShldmVudCkge1xuICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIGFjY3VtdWxhdGVEaXNwYXRjaGVzKGV2ZW50LmRpc3BhdGNoTWFya2VyLCBudWxsLCBldmVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudHMpIHtcbiAgZm9yRWFjaEFjY3VtdWxhdGVkKGV2ZW50cywgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZSk7XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0KGV2ZW50cykge1xuICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlU2tpcFRhcmdldCk7XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyhsZWF2ZSwgZW50ZXIsIGZyb21JRCwgdG9JRCkge1xuICBFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uZ2V0SW5zdGFuY2VIYW5kbGUoKS50cmF2ZXJzZUVudGVyTGVhdmUoZnJvbUlELCB0b0lELCBhY2N1bXVsYXRlRGlzcGF0Y2hlcywgbGVhdmUsIGVudGVyKTtcbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKTtcbn1cblxuLyoqXG4gKiBBIHNtYWxsIHNldCBvZiBwcm9wYWdhdGlvbiBwYXR0ZXJucywgZWFjaCBvZiB3aGljaCB3aWxsIGFjY2VwdCBhIHNtYWxsIGFtb3VudFxuICogb2YgaW5mb3JtYXRpb24sIGFuZCBnZW5lcmF0ZSBhIHNldCBvZiBcImRpc3BhdGNoIHJlYWR5IGV2ZW50IG9iamVjdHNcIiAtIHdoaWNoXG4gKiBhcmUgc2V0cyBvZiBldmVudHMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBhbm5vdGF0ZWQgd2l0aCBhIHNldCBvZiBkaXNwYXRjaGVkXG4gKiBsaXN0ZW5lciBmdW5jdGlvbnMvaWRzLiBUaGUgQVBJIGlzIGRlc2lnbmVkIHRoaXMgd2F5IHRvIGRpc2NvdXJhZ2UgdGhlc2VcbiAqIHByb3BhZ2F0aW9uIHN0cmF0ZWdpZXMgZnJvbSBhY3R1YWxseSBleGVjdXRpbmcgdGhlIGRpc3BhdGNoZXMsIHNpbmNlIHdlXG4gKiBhbHdheXMgd2FudCB0byBjb2xsZWN0IHRoZSBlbnRpcmUgc2V0IG9mIGRpc3BhdGNoZXMgYmVmb3JlIGV4ZWN1dGluZyBldmVudCBhXG4gKiBzaW5nbGUgb25lLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBFdmVudFByb3BhZ2F0b3JzXG4gKi9cbnZhciBFdmVudFByb3BhZ2F0b3JzID0ge1xuICBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzLFxuICBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDogYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQsXG4gIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyxcbiAgYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOiBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQcm9wYWdhdG9yczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciA9IHJlcXVpcmUoJy4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcicpO1xuXG4vKipcbiAqIFRoaXMgaGVscGVyIGNsYXNzIHN0b3JlcyBpbmZvcm1hdGlvbiBhYm91dCB0ZXh0IGNvbnRlbnQgb2YgYSB0YXJnZXQgbm9kZSxcbiAqIGFsbG93aW5nIGNvbXBhcmlzb24gb2YgY29udGVudCBiZWZvcmUgYW5kIGFmdGVyIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogSWRlbnRpZnkgdGhlIG5vZGUgd2hlcmUgc2VsZWN0aW9uIGN1cnJlbnRseSBiZWdpbnMsIHRoZW4gb2JzZXJ2ZVxuICogYm90aCBpdHMgdGV4dCBjb250ZW50IGFuZCBpdHMgY3VycmVudCBwb3NpdGlvbiBpbiB0aGUgRE9NLiBTaW5jZSB0aGVcbiAqIGJyb3dzZXIgbWF5IG5hdGl2ZWx5IHJlcGxhY2UgdGhlIHRhcmdldCBub2RlIGR1cmluZyBjb21wb3NpdGlvbiwgd2UgY2FuXG4gKiB1c2UgaXRzIHBvc2l0aW9uIHRvIGZpbmQgaXRzIHJlcGxhY2VtZW50LlxuICpcbiAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHJvb3RcbiAqL1xuZnVuY3Rpb24gRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlKHJvb3QpIHtcbiAgdGhpcy5fcm9vdCA9IHJvb3Q7XG4gIHRoaXMuX3N0YXJ0VGV4dCA9IHRoaXMuZ2V0VGV4dCgpO1xuICB0aGlzLl9mYWxsYmFja1RleHQgPSBudWxsO1xufVxuXG5hc3NpZ24oRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLnByb3RvdHlwZSwge1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gICAgdGhpcy5fc3RhcnRUZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9mYWxsYmFja1RleHQgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCB0ZXh0IG9mIGlucHV0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXRUZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCd2YWx1ZScgaW4gdGhpcy5fcm9vdCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jvb3QudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yb290W2dldFRleHRDb250ZW50QWNjZXNzb3IoKV07XG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgZGlmZmVyaW5nIHN1YnN0cmluZyBiZXR3ZWVuIHRoZSBpbml0aWFsbHkgc3RvcmVkXG4gICAqIHRleHQgY29udGVudCBhbmQgdGhlIGN1cnJlbnQgY29udGVudC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0RGF0YTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9mYWxsYmFja1RleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mYWxsYmFja1RleHQ7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0O1xuICAgIHZhciBzdGFydFZhbHVlID0gdGhpcy5fc3RhcnRUZXh0O1xuICAgIHZhciBzdGFydExlbmd0aCA9IHN0YXJ0VmFsdWUubGVuZ3RoO1xuICAgIHZhciBlbmQ7XG4gICAgdmFyIGVuZFZhbHVlID0gdGhpcy5nZXRUZXh0KCk7XG4gICAgdmFyIGVuZExlbmd0aCA9IGVuZFZhbHVlLmxlbmd0aDtcblxuICAgIGZvciAoc3RhcnQgPSAwOyBzdGFydCA8IHN0YXJ0TGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydF0gIT09IGVuZFZhbHVlW3N0YXJ0XSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbWluRW5kID0gc3RhcnRMZW5ndGggLSBzdGFydDtcbiAgICBmb3IgKGVuZCA9IDE7IGVuZCA8PSBtaW5FbmQ7IGVuZCsrKSB7XG4gICAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydExlbmd0aCAtIGVuZF0gIT09IGVuZFZhbHVlW2VuZExlbmd0aCAtIGVuZF0pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNsaWNlVGFpbCA9IGVuZCA+IDEgPyAxIC0gZW5kIDogdW5kZWZpbmVkO1xuICAgIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IGVuZFZhbHVlLnNsaWNlKHN0YXJ0LCBzbGljZVRhaWwpO1xuICAgIHJldHVybiB0aGlzLl9mYWxsYmFja1RleHQ7XG4gIH1cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEhUTUxET01Qcm9wZXJ0eUNvbmZpZ1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIE1VU1RfVVNFX0FUVFJJQlVURSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5NVVNUX1VTRV9BVFRSSUJVVEU7XG52YXIgTVVTVF9VU0VfUFJPUEVSVFkgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uTVVTVF9VU0VfUFJPUEVSVFk7XG52YXIgSEFTX0JPT0xFQU5fVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUU7XG52YXIgSEFTX1NJREVfRUZGRUNUUyA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfU0lERV9FRkZFQ1RTO1xudmFyIEhBU19OVU1FUklDX1ZBTFVFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19OVU1FUklDX1ZBTFVFO1xudmFyIEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFO1xudmFyIEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRTtcblxudmFyIGhhc1NWRztcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgdmFyIGltcGxlbWVudGF0aW9uID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb247XG4gIGhhc1NWRyA9IGltcGxlbWVudGF0aW9uICYmIGltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUgJiYgaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvZmVhdHVyZSNCYXNpY1N0cnVjdHVyZScsICcxLjEnKTtcbn1cblxudmFyIEhUTUxET01Qcm9wZXJ0eUNvbmZpZyA9IHtcbiAgaXNDdXN0b21BdHRyaWJ1dGU6IFJlZ0V4cC5wcm90b3R5cGUudGVzdC5iaW5kKC9eKGRhdGF8YXJpYSktW2Etel9dW2EtelxcZF8uXFwtXSokLyksXG4gIFByb3BlcnRpZXM6IHtcbiAgICAvKipcbiAgICAgKiBTdGFuZGFyZCBQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgYWNjZXB0OiBudWxsLFxuICAgIGFjY2VwdENoYXJzZXQ6IG51bGwsXG4gICAgYWNjZXNzS2V5OiBudWxsLFxuICAgIGFjdGlvbjogbnVsbCxcbiAgICBhbGxvd0Z1bGxTY3JlZW46IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGFsbG93VHJhbnNwYXJlbmN5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgYWx0OiBudWxsLFxuICAgIGFzeW5jOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBhdXRvQ29tcGxldGU6IG51bGwsXG4gICAgLy8gYXV0b0ZvY3VzIGlzIHBvbHlmaWxsZWQvbm9ybWFsaXplZCBieSBBdXRvRm9jdXNVdGlsc1xuICAgIC8vIGF1dG9Gb2N1czogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYXV0b1BsYXk6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNhcHR1cmU6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNlbGxQYWRkaW5nOiBudWxsLFxuICAgIGNlbGxTcGFjaW5nOiBudWxsLFxuICAgIGNoYXJTZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBjaGFsbGVuZ2U6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBjaGVja2VkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNsYXNzSUQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICAvLyBUbyBzZXQgY2xhc3NOYW1lIG9uIFNWRyBlbGVtZW50cywgaXQncyBuZWNlc3NhcnkgdG8gdXNlIC5zZXRBdHRyaWJ1dGU7XG4gICAgLy8gdGhpcyB3b3JrcyBvbiBIVE1MIGVsZW1lbnRzIHRvbyBpbiBhbGwgYnJvd3NlcnMgZXhjZXB0IElFOC4gQ29udmVuaWVudGx5LFxuICAgIC8vIElFOCBkb2Vzbid0IHN1cHBvcnQgU1ZHIGFuZCBzbyB3ZSBjYW4gc2ltcGx5IHVzZSB0aGUgYXR0cmlidXRlIGluXG4gICAgLy8gYnJvd3NlcnMgdGhhdCBzdXBwb3J0IFNWRyBhbmQgdGhlIHByb3BlcnR5IGluIGJyb3dzZXJzIHRoYXQgZG9uJ3QsXG4gICAgLy8gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSBlbGVtZW50IGlzIEhUTUwgb3IgU1ZHLlxuICAgIGNsYXNzTmFtZTogaGFzU1ZHID8gTVVTVF9VU0VfQVRUUklCVVRFIDogTVVTVF9VU0VfUFJPUEVSVFksXG4gICAgY29sczogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgY29sU3BhbjogbnVsbCxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGNvbnRlbnRFZGl0YWJsZTogbnVsbCxcbiAgICBjb250ZXh0TWVudTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGNvbnRyb2xzOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNvb3JkczogbnVsbCxcbiAgICBjcm9zc09yaWdpbjogbnVsbCxcbiAgICBkYXRhOiBudWxsLCAvLyBGb3IgYDxvYmplY3QgLz5gIGFjdHMgYXMgYHNyY2AuXG4gICAgZGF0ZVRpbWU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICAnZGVmYXVsdCc6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGRlZmVyOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBkaXI6IG51bGwsXG4gICAgZGlzYWJsZWQ6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGRvd25sb2FkOiBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFLFxuICAgIGRyYWdnYWJsZTogbnVsbCxcbiAgICBlbmNUeXBlOiBudWxsLFxuICAgIGZvcm06IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtQWN0aW9uOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9ybUVuY1R5cGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtTWV0aG9kOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9ybU5vVmFsaWRhdGU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGZvcm1UYXJnZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmcmFtZUJvcmRlcjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGhlYWRlcnM6IG51bGwsXG4gICAgaGVpZ2h0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgaGlkZGVuOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBoaWdoOiBudWxsLFxuICAgIGhyZWY6IG51bGwsXG4gICAgaHJlZkxhbmc6IG51bGwsXG4gICAgaHRtbEZvcjogbnVsbCxcbiAgICBodHRwRXF1aXY6IG51bGwsXG4gICAgaWNvbjogbnVsbCxcbiAgICBpZDogTVVTVF9VU0VfUFJPUEVSVFksXG4gICAgaW5wdXRNb2RlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgaW50ZWdyaXR5OiBudWxsLFxuICAgIGlzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAga2V5UGFyYW1zOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAga2V5VHlwZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGtpbmQ6IG51bGwsXG4gICAgbGFiZWw6IG51bGwsXG4gICAgbGFuZzogbnVsbCxcbiAgICBsaXN0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbG9vcDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBsb3c6IG51bGwsXG4gICAgbWFuaWZlc3Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtYXJnaW5IZWlnaHQ6IG51bGwsXG4gICAgbWFyZ2luV2lkdGg6IG51bGwsXG4gICAgbWF4OiBudWxsLFxuICAgIG1heExlbmd0aDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1lZGlhOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWVkaWFHcm91cDogbnVsbCxcbiAgICBtZXRob2Q6IG51bGwsXG4gICAgbWluOiBudWxsLFxuICAgIG1pbkxlbmd0aDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG11bHRpcGxlOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG11dGVkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG5hbWU6IG51bGwsXG4gICAgbm9uY2U6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBub1ZhbGlkYXRlOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBvcGVuOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBvcHRpbXVtOiBudWxsLFxuICAgIHBhdHRlcm46IG51bGwsXG4gICAgcGxhY2Vob2xkZXI6IG51bGwsXG4gICAgcG9zdGVyOiBudWxsLFxuICAgIHByZWxvYWQ6IG51bGwsXG4gICAgcmFkaW9Hcm91cDogbnVsbCxcbiAgICByZWFkT25seTogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICByZWw6IG51bGwsXG4gICAgcmVxdWlyZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHJldmVyc2VkOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICByb2xlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcm93czogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgcm93U3BhbjogbnVsbCxcbiAgICBzYW5kYm94OiBudWxsLFxuICAgIHNjb3BlOiBudWxsLFxuICAgIHNjb3BlZDogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgc2Nyb2xsaW5nOiBudWxsLFxuICAgIHNlYW1sZXNzOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzZWxlY3RlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzaGFwZTogbnVsbCxcbiAgICBzaXplOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICBzaXplczogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHNwYW46IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIHNwZWxsQ2hlY2s6IG51bGwsXG4gICAgc3JjOiBudWxsLFxuICAgIHNyY0RvYzogTVVTVF9VU0VfUFJPUEVSVFksXG4gICAgc3JjTGFuZzogbnVsbCxcbiAgICBzcmNTZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdGFydDogSEFTX05VTUVSSUNfVkFMVUUsXG4gICAgc3RlcDogbnVsbCxcbiAgICBzdHlsZTogbnVsbCxcbiAgICBzdW1tYXJ5OiBudWxsLFxuICAgIHRhYkluZGV4OiBudWxsLFxuICAgIHRhcmdldDogbnVsbCxcbiAgICB0aXRsZTogbnVsbCxcbiAgICB0eXBlOiBudWxsLFxuICAgIHVzZU1hcDogbnVsbCxcbiAgICB2YWx1ZTogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfU0lERV9FRkZFQ1RTLFxuICAgIHdpZHRoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgd21vZGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB3cmFwOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogUkRGYSBQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgYWJvdXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBkYXRhdHlwZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGlubGlzdDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHByZWZpeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIC8vIHByb3BlcnR5IGlzIGFsc28gc3VwcG9ydGVkIGZvciBPcGVuR3JhcGggaW4gbWV0YSB0YWdzLlxuICAgIHByb3BlcnR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcmVzb3VyY2U6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICAndHlwZW9mJzogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHZvY2FiOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cbiAgICAvKipcbiAgICAgKiBOb24tc3RhbmRhcmQgUHJvcGVydGllc1xuICAgICAqL1xuICAgIC8vIGF1dG9DYXBpdGFsaXplIGFuZCBhdXRvQ29ycmVjdCBhcmUgc3VwcG9ydGVkIGluIE1vYmlsZSBTYWZhcmkgZm9yXG4gICAgLy8ga2V5Ym9hcmQgaGludHMuXG4gICAgYXV0b0NhcGl0YWxpemU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBhdXRvQ29ycmVjdDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIC8vIGF1dG9TYXZlIGFsbG93cyBXZWJLaXQvQmxpbmsgdG8gcGVyc2lzdCB2YWx1ZXMgb2YgaW5wdXQgZmllbGRzIG9uIHBhZ2UgcmVsb2Fkc1xuICAgIGF1dG9TYXZlOiBudWxsLFxuICAgIC8vIGNvbG9yIGlzIGZvciBTYWZhcmkgbWFzay1pY29uIGxpbmtcbiAgICBjb2xvcjogbnVsbCxcbiAgICAvLyBpdGVtUHJvcCwgaXRlbVNjb3BlLCBpdGVtVHlwZSBhcmUgZm9yXG4gICAgLy8gTWljcm9kYXRhIHN1cHBvcnQuIFNlZSBodHRwOi8vc2NoZW1hLm9yZy9kb2NzL2dzLmh0bWxcbiAgICBpdGVtUHJvcDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGl0ZW1TY29wZTogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgaXRlbVR5cGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICAvLyBpdGVtSUQgYW5kIGl0ZW1SZWYgYXJlIGZvciBNaWNyb2RhdGEgc3VwcG9ydCBhcyB3ZWxsIGJ1dFxuICAgIC8vIG9ubHkgc3BlY2lmaWVkIGluIHRoZSB0aGUgV0hBVFdHIHNwZWMgZG9jdW1lbnQuIFNlZVxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL21pY3JvZGF0YS5odG1sI21pY3JvZGF0YS1kb20tYXBpXG4gICAgaXRlbUlEOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgaXRlbVJlZjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIC8vIHJlc3VsdHMgc2hvdyBsb29raW5nIGdsYXNzIGljb24gYW5kIHJlY2VudCBzZWFyY2hlcyBvbiBpbnB1dFxuICAgIC8vIHNlYXJjaCBmaWVsZHMgaW4gV2ViS2l0L0JsaW5rXG4gICAgcmVzdWx0czogbnVsbCxcbiAgICAvLyBJRS1vbmx5IGF0dHJpYnV0ZSB0aGF0IHNwZWNpZmllcyBzZWN1cml0eSByZXN0cmljdGlvbnMgb24gYW4gaWZyYW1lXG4gICAgLy8gYXMgYW4gYWx0ZXJuYXRpdmUgdG8gdGhlIHNhbmRib3ggYXR0cmlidXRlIG9uIElFPDEwXG4gICAgc2VjdXJpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICAvLyBJRS1vbmx5IGF0dHJpYnV0ZSB0aGF0IGNvbnRyb2xzIGZvY3VzIGJlaGF2aW9yXG4gICAgdW5zZWxlY3RhYmxlOiBNVVNUX1VTRV9BVFRSSUJVVEVcbiAgfSxcbiAgRE9NQXR0cmlidXRlTmFtZXM6IHtcbiAgICBhY2NlcHRDaGFyc2V0OiAnYWNjZXB0LWNoYXJzZXQnLFxuICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcbiAgICBodG1sRm9yOiAnZm9yJyxcbiAgICBodHRwRXF1aXY6ICdodHRwLWVxdWl2J1xuICB9LFxuICBET01Qcm9wZXJ0eU5hbWVzOiB7XG4gICAgYXV0b0NvbXBsZXRlOiAnYXV0b2NvbXBsZXRlJyxcbiAgICBhdXRvRm9jdXM6ICdhdXRvZm9jdXMnLFxuICAgIGF1dG9QbGF5OiAnYXV0b3BsYXknLFxuICAgIGF1dG9TYXZlOiAnYXV0b3NhdmUnLFxuICAgIC8vIGBlbmNvZGluZ2AgaXMgZXF1aXZhbGVudCB0byBgZW5jdHlwZWAsIElFOCBsYWNrcyBhbiBgZW5jdHlwZWAgc2V0dGVyLlxuICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L2Zvcm1zLmh0bWwjZG9tLWZzLWVuY29kaW5nXG4gICAgZW5jVHlwZTogJ2VuY29kaW5nJyxcbiAgICBocmVmTGFuZzogJ2hyZWZsYW5nJyxcbiAgICByYWRpb0dyb3VwOiAncmFkaW9ncm91cCcsXG4gICAgc3BlbGxDaGVjazogJ3NwZWxsY2hlY2snLFxuICAgIHNyY0RvYzogJ3NyY2RvYycsXG4gICAgc3JjU2V0OiAnc3Jjc2V0J1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhUTUxET01Qcm9wZXJ0eUNvbmZpZzsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgTGlua2VkVmFsdWVVdGlsc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZXMnKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgaGFzUmVhZE9ubHlWYWx1ZSA9IHtcbiAgJ2J1dHRvbic6IHRydWUsXG4gICdjaGVja2JveCc6IHRydWUsXG4gICdpbWFnZSc6IHRydWUsXG4gICdoaWRkZW4nOiB0cnVlLFxuICAncmFkaW8nOiB0cnVlLFxuICAncmVzZXQnOiB0cnVlLFxuICAnc3VibWl0JzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXRQcm9wcykge1xuICAhKGlucHV0UHJvcHMuY2hlY2tlZExpbmsgPT0gbnVsbCB8fCBpbnB1dFByb3BzLnZhbHVlTGluayA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIHZhbHVlTGluay4gSWYgeW91IHdhbnQgdG8gdXNlICcgKyAnY2hlY2tlZExpbmssIHlvdSBwcm9iYWJseSBkb25cXCd0IHdhbnQgdG8gdXNlIHZhbHVlTGluayBhbmQgdmljZSB2ZXJzYS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0UHJvcHMpIHtcbiAgX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXRQcm9wcyk7XG4gICEoaW5wdXRQcm9wcy52YWx1ZSA9PSBudWxsICYmIGlucHV0UHJvcHMub25DaGFuZ2UgPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHByb3ZpZGUgYSB2YWx1ZUxpbmsgYW5kIGEgdmFsdWUgb3Igb25DaGFuZ2UgZXZlbnQuIElmIHlvdSB3YW50ICcgKyAndG8gdXNlIHZhbHVlIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvIHVzZSB2YWx1ZUxpbmsuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXRQcm9wcykge1xuICBfYXNzZXJ0U2luZ2xlTGluayhpbnB1dFByb3BzKTtcbiAgIShpbnB1dFByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dFByb3BzLm9uQ2hhbmdlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBwcm92aWRlIGEgY2hlY2tlZExpbmsgYW5kIGEgY2hlY2tlZCBwcm9wZXJ0eSBvciBvbkNoYW5nZSBldmVudC4gJyArICdJZiB5b3Ugd2FudCB0byB1c2UgY2hlY2tlZCBvciBvbkNoYW5nZSwgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byAnICsgJ3VzZSBjaGVja2VkTGluaycpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbn1cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgdmFsdWU6IGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fCBoYXNSZWFkT25seVZhbHVlW3Byb3BzLnR5cGVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYHZhbHVlYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgKyAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICsgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRWYWx1ZWAuIE90aGVyd2lzZSwgJyArICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nKTtcbiAgfSxcbiAgY2hlY2tlZDogZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgIGlmICghcHJvcHNbcHJvcE5hbWVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYGNoZWNrZWRgIHByb3AgdG8gYSBmb3JtIGZpZWxkIHdpdGhvdXQgYW4gJyArICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgKyAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdENoZWNrZWRgLiBPdGhlcndpc2UsICcgKyAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJyk7XG4gIH0sXG4gIG9uQ2hhbmdlOiBSZWFjdFByb3BUeXBlcy5mdW5jXG59O1xuXG52YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpIHtcbiAgaWYgKG93bmVyKSB7XG4gICAgdmFyIG5hbWUgPSBvd25lci5nZXROYW1lKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBQcm92aWRlIGEgbGlua2VkIGB2YWx1ZWAgYXR0cmlidXRlIGZvciBjb250cm9sbGVkIGZvcm1zLiBZb3Ugc2hvdWxkIG5vdCB1c2VcbiAqIHRoaXMgb3V0c2lkZSBvZiB0aGUgUmVhY3RET00gY29udHJvbGxlZCBmb3JtIGNvbXBvbmVudHMuXG4gKi9cbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0ge1xuICBjaGVja1Byb3BUeXBlczogZnVuY3Rpb24gKHRhZ05hbWUsIHByb3BzLCBvd25lcikge1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuICAgICAgaWYgKHByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yID0gcHJvcFR5cGVzW3Byb3BOYW1lXShwcm9wcywgcHJvcE5hbWUsIHRhZ05hbWUsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcCk7XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBmb3JtIHByb3BUeXBlOiAlcyVzJywgZXJyb3IubWVzc2FnZSwgYWRkZW5kdW0pIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGlucHV0UHJvcHMgUHJvcHMgZm9yIGZvcm0gY29tcG9uZW50XG4gICAqIEByZXR1cm4geyp9IGN1cnJlbnQgdmFsdWUgb2YgdGhlIGlucHV0IGVpdGhlciBmcm9tIHZhbHVlIHByb3Agb3IgbGluay5cbiAgICovXG4gIGdldFZhbHVlOiBmdW5jdGlvbiAoaW5wdXRQcm9wcykge1xuICAgIGlmIChpbnB1dFByb3BzLnZhbHVlTGluaykge1xuICAgICAgX2Fzc2VydFZhbHVlTGluayhpbnB1dFByb3BzKTtcbiAgICAgIHJldHVybiBpbnB1dFByb3BzLnZhbHVlTGluay52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0UHJvcHMudmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dFByb3BzIFByb3BzIGZvciBmb3JtIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHsqfSBjdXJyZW50IGNoZWNrZWQgc3RhdHVzIG9mIHRoZSBpbnB1dCBlaXRoZXIgZnJvbSBjaGVja2VkIHByb3BcbiAgICogICAgICAgICAgICAgb3IgbGluay5cbiAgICovXG4gIGdldENoZWNrZWQ6IGZ1bmN0aW9uIChpbnB1dFByb3BzKSB7XG4gICAgaWYgKGlucHV0UHJvcHMuY2hlY2tlZExpbmspIHtcbiAgICAgIF9hc3NlcnRDaGVja2VkTGluayhpbnB1dFByb3BzKTtcbiAgICAgIHJldHVybiBpbnB1dFByb3BzLmNoZWNrZWRMaW5rLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXRQcm9wcy5jaGVja2VkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5wdXRQcm9wcyBQcm9wcyBmb3IgZm9ybSBjb21wb25lbnRcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgY2hhbmdlIGV2ZW50IHRvIGhhbmRsZVxuICAgKi9cbiAgZXhlY3V0ZU9uQ2hhbmdlOiBmdW5jdGlvbiAoaW5wdXRQcm9wcywgZXZlbnQpIHtcbiAgICBpZiAoaW5wdXRQcm9wcy52YWx1ZUxpbmspIHtcbiAgICAgIF9hc3NlcnRWYWx1ZUxpbmsoaW5wdXRQcm9wcyk7XG4gICAgICByZXR1cm4gaW5wdXRQcm9wcy52YWx1ZUxpbmsucmVxdWVzdENoYW5nZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoaW5wdXRQcm9wcy5jaGVja2VkTGluaykge1xuICAgICAgX2Fzc2VydENoZWNrZWRMaW5rKGlucHV0UHJvcHMpO1xuICAgICAgcmV0dXJuIGlucHV0UHJvcHMuY2hlY2tlZExpbmsucmVxdWVzdENoYW5nZShldmVudC50YXJnZXQuY2hlY2tlZCk7XG4gICAgfSBlbHNlIGlmIChpbnB1dFByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICByZXR1cm4gaW5wdXRQcm9wcy5vbkNoYW5nZS5jYWxsKHVuZGVmaW5lZCwgZXZlbnQpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5rZWRWYWx1ZVV0aWxzOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBPYmplY3QuYXNzaWduXG4gKi9cblxuLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLW9iamVjdC5hc3NpZ25cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2VzKSB7XG4gIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gdGFyZ2V0IGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICB9XG5cbiAgdmFyIHRvID0gT2JqZWN0KHRhcmdldCk7XG4gIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgbmV4dEluZGV4ID0gMTsgbmV4dEluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgbmV4dEluZGV4KyspIHtcbiAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tuZXh0SW5kZXhdO1xuICAgIGlmIChuZXh0U291cmNlID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBmcm9tID0gT2JqZWN0KG5leHRTb3VyY2UpO1xuXG4gICAgLy8gV2UgZG9uJ3QgY3VycmVudGx5IHN1cHBvcnQgYWNjZXNzb3JzIG5vciBwcm94aWVzLiBUaGVyZWZvcmUgdGhpc1xuICAgIC8vIGNvcHkgY2Fubm90IHRocm93LiBJZiB3ZSBldmVyIHN1cHBvcnRlZCB0aGlzIHRoZW4gd2UgbXVzdCBoYW5kbGVcbiAgICAvLyBleGNlcHRpb25zIGFuZCBzaWRlLWVmZmVjdHMuIFdlIGRvbid0IHN1cHBvcnQgc3ltYm9scyBzbyB0aGV5IHdvbid0XG4gICAgLy8gYmUgdHJhbnNmZXJyZWQuXG5cbiAgICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuICAgICAgICB0b1trZXldID0gZnJvbVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ247IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFBvb2xlZENsYXNzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogU3RhdGljIHBvb2xlcnMuIFNldmVyYWwgY3VzdG9tIHZlcnNpb25zIGZvciBlYWNoIHBvdGVudGlhbCBudW1iZXIgb2ZcbiAqIGFyZ3VtZW50cy4gQSBjb21wbGV0ZWx5IGdlbmVyaWMgcG9vbGVyIGlzIGVhc3kgdG8gaW1wbGVtZW50LCBidXQgd291bGRcbiAqIHJlcXVpcmUgYWNjZXNzaW5nIHRoZSBgYXJndW1lbnRzYCBvYmplY3QuIEluIGVhY2ggb2YgdGhlc2UsIGB0aGlzYCByZWZlcnMgdG9cbiAqIHRoZSBDbGFzcyBpdHNlbGYsIG5vdCBhbiBpbnN0YW5jZS4gSWYgYW55IG90aGVycyBhcmUgbmVlZGVkLCBzaW1wbHkgYWRkIHRoZW1cbiAqIGhlcmUsIG9yIGluIHRoZWlyIG93biBmaWxlcy5cbiAqL1xudmFyIG9uZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gKGNvcHlGaWVsZHNGcm9tKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGNvcHlGaWVsZHNGcm9tKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhjb3B5RmllbGRzRnJvbSk7XG4gIH1cbn07XG5cbnZhciB0d29Bcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChhMSwgYTIpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIpO1xuICB9XG59O1xuXG52YXIgdGhyZWVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChhMSwgYTIsIGEzKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMpO1xuICB9XG59O1xuXG52YXIgZm91ckFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0KSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMsIGE0KTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzLCBhNCk7XG4gIH1cbn07XG5cbnZhciBmaXZlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQsIGE1KTtcbiAgfVxufTtcblxudmFyIHN0YW5kYXJkUmVsZWFzZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgIShpbnN0YW5jZSBpbnN0YW5jZW9mIEtsYXNzKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUcnlpbmcgdG8gcmVsZWFzZSBhbiBpbnN0YW5jZSBpbnRvIGEgcG9vbCBvZiBhIGRpZmZlcmVudCB0eXBlLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgaW5zdGFuY2UuZGVzdHJ1Y3RvcigpO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCA8IEtsYXNzLnBvb2xTaXplKSB7XG4gICAgS2xhc3MuaW5zdGFuY2VQb29sLnB1c2goaW5zdGFuY2UpO1xuICB9XG59O1xuXG52YXIgREVGQVVMVF9QT09MX1NJWkUgPSAxMDtcbnZhciBERUZBVUxUX1BPT0xFUiA9IG9uZUFyZ3VtZW50UG9vbGVyO1xuXG4vKipcbiAqIEF1Z21lbnRzIGBDb3B5Q29uc3RydWN0b3JgIHRvIGJlIGEgcG9vbGFibGUgY2xhc3MsIGF1Z21lbnRpbmcgb25seSB0aGUgY2xhc3NcbiAqIGl0c2VsZiAoc3RhdGljYWxseSkgbm90IGFkZGluZyBhbnkgcHJvdG90eXBpY2FsIGZpZWxkcy4gQW55IENvcHlDb25zdHJ1Y3RvclxuICogeW91IGdpdmUgdGhpcyBtYXkgaGF2ZSBhIGBwb29sU2l6ZWAgcHJvcGVydHksIGFuZCB3aWxsIGxvb2sgZm9yIGFcbiAqIHByb3RvdHlwaWNhbCBgZGVzdHJ1Y3RvcmAgb24gaW5zdGFuY2VzIChvcHRpb25hbCkuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gQ29weUNvbnN0cnVjdG9yIENvbnN0cnVjdG9yIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVzZXQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwb29sZXIgQ3VzdG9taXphYmxlIHBvb2xlci5cbiAqL1xudmFyIGFkZFBvb2xpbmdUbyA9IGZ1bmN0aW9uIChDb3B5Q29uc3RydWN0b3IsIHBvb2xlcikge1xuICB2YXIgTmV3S2xhc3MgPSBDb3B5Q29uc3RydWN0b3I7XG4gIE5ld0tsYXNzLmluc3RhbmNlUG9vbCA9IFtdO1xuICBOZXdLbGFzcy5nZXRQb29sZWQgPSBwb29sZXIgfHwgREVGQVVMVF9QT09MRVI7XG4gIGlmICghTmV3S2xhc3MucG9vbFNpemUpIHtcbiAgICBOZXdLbGFzcy5wb29sU2l6ZSA9IERFRkFVTFRfUE9PTF9TSVpFO1xuICB9XG4gIE5ld0tsYXNzLnJlbGVhc2UgPSBzdGFuZGFyZFJlbGVhc2VyO1xuICByZXR1cm4gTmV3S2xhc3M7XG59O1xuXG52YXIgUG9vbGVkQ2xhc3MgPSB7XG4gIGFkZFBvb2xpbmdUbzogYWRkUG9vbGluZ1RvLFxuICBvbmVBcmd1bWVudFBvb2xlcjogb25lQXJndW1lbnRQb29sZXIsXG4gIHR3b0FyZ3VtZW50UG9vbGVyOiB0d29Bcmd1bWVudFBvb2xlcixcbiAgdGhyZWVBcmd1bWVudFBvb2xlcjogdGhyZWVBcmd1bWVudFBvb2xlcixcbiAgZm91ckFyZ3VtZW50UG9vbGVyOiBmb3VyQXJndW1lbnRQb29sZXIsXG4gIGZpdmVBcmd1bWVudFBvb2xlcjogZml2ZUFyZ3VtZW50UG9vbGVyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvb2xlZENsYXNzOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NID0gcmVxdWlyZSgnLi9SZWFjdERPTScpO1xudmFyIFJlYWN0RE9NU2VydmVyID0gcmVxdWlyZSgnLi9SZWFjdERPTVNlcnZlcicpO1xudmFyIFJlYWN0SXNvbW9ycGhpYyA9IHJlcXVpcmUoJy4vUmVhY3RJc29tb3JwaGljJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBkZXByZWNhdGVkID0gcmVxdWlyZSgnLi9kZXByZWNhdGVkJyk7XG5cbi8vIGB2ZXJzaW9uYCB3aWxsIGJlIGFkZGVkIGhlcmUgYnkgUmVhY3RJc29tb3JwaGljLlxudmFyIFJlYWN0ID0ge307XG5cbmFzc2lnbihSZWFjdCwgUmVhY3RJc29tb3JwaGljKTtcblxuYXNzaWduKFJlYWN0LCB7XG4gIC8vIFJlYWN0RE9NXG4gIGZpbmRET01Ob2RlOiBkZXByZWNhdGVkKCdmaW5kRE9NTm9kZScsICdSZWFjdERPTScsICdyZWFjdC1kb20nLCBSZWFjdERPTSwgUmVhY3RET00uZmluZERPTU5vZGUpLFxuICByZW5kZXI6IGRlcHJlY2F0ZWQoJ3JlbmRlcicsICdSZWFjdERPTScsICdyZWFjdC1kb20nLCBSZWFjdERPTSwgUmVhY3RET00ucmVuZGVyKSxcbiAgdW5tb3VudENvbXBvbmVudEF0Tm9kZTogZGVwcmVjYXRlZCgndW5tb3VudENvbXBvbmVudEF0Tm9kZScsICdSZWFjdERPTScsICdyZWFjdC1kb20nLCBSZWFjdERPTSwgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZSksXG5cbiAgLy8gUmVhY3RET01TZXJ2ZXJcbiAgcmVuZGVyVG9TdHJpbmc6IGRlcHJlY2F0ZWQoJ3JlbmRlclRvU3RyaW5nJywgJ1JlYWN0RE9NU2VydmVyJywgJ3JlYWN0LWRvbS9zZXJ2ZXInLCBSZWFjdERPTVNlcnZlciwgUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcpLFxuICByZW5kZXJUb1N0YXRpY01hcmt1cDogZGVwcmVjYXRlZCgncmVuZGVyVG9TdGF0aWNNYXJrdXAnLCAnUmVhY3RET01TZXJ2ZXInLCAncmVhY3QtZG9tL3NlcnZlcicsIFJlYWN0RE9NU2VydmVyLCBSZWFjdERPTVNlcnZlci5yZW5kZXJUb1N0YXRpY01hcmt1cClcbn0pO1xuXG5SZWFjdC5fX1NFQ1JFVF9ET01fRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCA9IFJlYWN0RE9NO1xuUmVhY3QuX19TRUNSRVRfRE9NX1NFUlZFUl9ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEID0gUmVhY3RET01TZXJ2ZXI7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZU1hcCcpO1xuXG52YXIgZmluZERPTU5vZGUgPSByZXF1aXJlKCcuL2ZpbmRET01Ob2RlJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIGRpZFdhcm5LZXkgPSAnX2dldERPTU5vZGVEaWRXYXJuJztcblxudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgRE9NIG5vZGUgcmVuZGVyZWQgYnkgdGhpcyBjb21wb25lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IFRoZSByb290IG5vZGUgb2YgdGhpcyBjb21wb25lbnQuXG4gICAqIEBmaW5hbFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBnZXRET01Ob2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodGhpcy5jb25zdHJ1Y3RvcltkaWRXYXJuS2V5XSwgJyVzLmdldERPTU5vZGUoLi4uKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlICcgKyAnUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpIGluc3RlYWQuJywgUmVhY3RJbnN0YW5jZU1hcC5nZXQodGhpcykuZ2V0TmFtZSgpIHx8IHRoaXMudGFnTmFtZSB8fCAnVW5rbm93bicpIDogdW5kZWZpbmVkO1xuICAgIHRoaXMuY29uc3RydWN0b3JbZGlkV2FybktleV0gPSB0cnVlO1xuICAgIHJldHVybiBmaW5kRE9NTm9kZSh0aGlzKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZSgnLi9FdmVudENvbnN0YW50cycpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luUmVnaXN0cnknKTtcbnZhciBSZWFjdEV2ZW50RW1pdHRlck1peGluID0gcmVxdWlyZSgnLi9SZWFjdEV2ZW50RW1pdHRlck1peGluJyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcbnZhciBWaWV3cG9ydE1ldHJpY3MgPSByZXF1aXJlKCcuL1ZpZXdwb3J0TWV0cmljcycpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoJy4vaXNFdmVudFN1cHBvcnRlZCcpO1xuXG4vKipcbiAqIFN1bW1hcnkgb2YgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgZXZlbnQgaGFuZGxpbmc6XG4gKlxuICogIC0gVG9wLWxldmVsIGRlbGVnYXRpb24gaXMgdXNlZCB0byB0cmFwIG1vc3QgbmF0aXZlIGJyb3dzZXIgZXZlbnRzLiBUaGlzXG4gKiAgICBtYXkgb25seSBvY2N1ciBpbiB0aGUgbWFpbiB0aHJlYWQgYW5kIGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZlxuICogICAgUmVhY3RFdmVudExpc3RlbmVyLCB3aGljaCBpcyBpbmplY3RlZCBhbmQgY2FuIHRoZXJlZm9yZSBzdXBwb3J0IHBsdWdnYWJsZVxuICogICAgZXZlbnQgc291cmNlcy4gVGhpcyBpcyB0aGUgb25seSB3b3JrIHRoYXQgb2NjdXJzIGluIHRoZSBtYWluIHRocmVhZC5cbiAqXG4gKiAgLSBXZSBub3JtYWxpemUgYW5kIGRlLWR1cGxpY2F0ZSBldmVudHMgdG8gYWNjb3VudCBmb3IgYnJvd3NlciBxdWlya3MuIFRoaXNcbiAqICAgIG1heSBiZSBkb25lIGluIHRoZSB3b3JrZXIgdGhyZWFkLlxuICpcbiAqICAtIEZvcndhcmQgdGhlc2UgbmF0aXZlIGV2ZW50cyAod2l0aCB0aGUgYXNzb2NpYXRlZCB0b3AtbGV2ZWwgdHlwZSB1c2VkIHRvXG4gKiAgICB0cmFwIGl0KSB0byBgRXZlbnRQbHVnaW5IdWJgLCB3aGljaCBpbiB0dXJuIHdpbGwgYXNrIHBsdWdpbnMgaWYgdGhleSB3YW50XG4gKiAgICB0byBleHRyYWN0IGFueSBzeW50aGV0aWMgZXZlbnRzLlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHdpbGwgdGhlbiBwcm9jZXNzIGVhY2ggZXZlbnQgYnkgYW5ub3RhdGluZyB0aGVtIHdpdGhcbiAqICAgIFwiZGlzcGF0Y2hlc1wiLCBhIHNlcXVlbmNlIG9mIGxpc3RlbmVycyBhbmQgSURzIHRoYXQgY2FyZSBhYm91dCB0aGF0IGV2ZW50LlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHRoZW4gZGlzcGF0Y2hlcyB0aGUgZXZlbnRzLlxuICpcbiAqIE92ZXJ2aWV3IG9mIFJlYWN0IGFuZCB0aGUgZXZlbnQgc3lzdGVtOlxuICpcbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgICAgRE9NICAgICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqICAgICAgIHwgICAgICAgICAgIC5cbiAqICAgICAgIHYgICAgICAgICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgUmVhY3RFdmVudCB8ICAgIC5cbiAqIHwgIExpc3RlbmVyICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgICstLS0tLS0tLSt8U2ltcGxlRXZlbnR8XG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgfCAgICAgICAgIHxQbHVnaW4gICAgIHxcbiAqICstLS0tLXwtLS0tLS0rICAgIC4gICAgICAgICAgICAgICB2ICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58RXZlbnRQbHVnaW5IdWJ8ICAgICAgICAgICAgICAgICAgICB8ICAgIEV2ZW50ICAgfFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8IFByb3BhZ2F0b3JzfFxuICogfCBSZWFjdEV2ZW50IHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICB8VGFwRXZlbnQgICB8ICB8LS0tLS0tLS0tLS0tfFxuICogfCAgRW1pdHRlciAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8PC0tLSt8UGx1Z2luICAgICB8ICB8b3RoZXIgcGx1Z2lufFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8ICB1dGlsaXRpZXMgfFxuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58ICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rXG4gKiArLS0tLS18LS0tLS0tKyAgICAuICAgICAgICAgICAgICAgIF4gICAgICAgICstLS0tLS0tLS0tLStcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICAgfCAgICAgICAgfEVudGVyL0xlYXZlfFxuICogICAgICAgKyAgICAgICAgICAgLiAgICAgICAgICAgICAgICArLS0tLS0tLSt8UGx1Z2luICAgICB8XG4gKiArLS0tLS0tLS0tLS0tLSsgICAuICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLStcbiAqIHwgYXBwbGljYXRpb24gfCAgIC5cbiAqIHwtLS0tLS0tLS0tLS0tfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqICstLS0tLS0tLS0tLS0tKyAgIC5cbiAqICAgICAgICAgICAgICAgICAgIC5cbiAqICAgIFJlYWN0IENvcmUgICAgIC4gIEdlbmVyYWwgUHVycG9zZSBFdmVudCBQbHVnaW4gU3lzdGVtXG4gKi9cblxudmFyIGFscmVhZHlMaXN0ZW5pbmdUbyA9IHt9O1xudmFyIGlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlID0gZmFsc2U7XG52YXIgcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyID0gMDtcblxuLy8gRm9yIGV2ZW50cyBsaWtlICdzdWJtaXQnIHdoaWNoIGRvbid0IGNvbnNpc3RlbnRseSBidWJibGUgKHdoaWNoIHdlIHRyYXAgYXQgYVxuLy8gbG93ZXIgbm9kZSB0aGFuIGBkb2N1bWVudGApLCBiaW5kaW5nIGF0IGBkb2N1bWVudGAgd291bGQgY2F1c2UgZHVwbGljYXRlXG4vLyBldmVudHMgc28gd2UgZG9uJ3QgaW5jbHVkZSB0aGVtIGhlcmVcbnZhciB0b3BFdmVudE1hcHBpbmcgPSB7XG4gIHRvcEFib3J0OiAnYWJvcnQnLFxuICB0b3BCbHVyOiAnYmx1cicsXG4gIHRvcENhblBsYXk6ICdjYW5wbGF5JyxcbiAgdG9wQ2FuUGxheVRocm91Z2g6ICdjYW5wbGF5dGhyb3VnaCcsXG4gIHRvcENoYW5nZTogJ2NoYW5nZScsXG4gIHRvcENsaWNrOiAnY2xpY2snLFxuICB0b3BDb21wb3NpdGlvbkVuZDogJ2NvbXBvc2l0aW9uZW5kJyxcbiAgdG9wQ29tcG9zaXRpb25TdGFydDogJ2NvbXBvc2l0aW9uc3RhcnQnLFxuICB0b3BDb21wb3NpdGlvblVwZGF0ZTogJ2NvbXBvc2l0aW9udXBkYXRlJyxcbiAgdG9wQ29udGV4dE1lbnU6ICdjb250ZXh0bWVudScsXG4gIHRvcENvcHk6ICdjb3B5JyxcbiAgdG9wQ3V0OiAnY3V0JyxcbiAgdG9wRG91YmxlQ2xpY2s6ICdkYmxjbGljaycsXG4gIHRvcERyYWc6ICdkcmFnJyxcbiAgdG9wRHJhZ0VuZDogJ2RyYWdlbmQnLFxuICB0b3BEcmFnRW50ZXI6ICdkcmFnZW50ZXInLFxuICB0b3BEcmFnRXhpdDogJ2RyYWdleGl0JyxcbiAgdG9wRHJhZ0xlYXZlOiAnZHJhZ2xlYXZlJyxcbiAgdG9wRHJhZ092ZXI6ICdkcmFnb3ZlcicsXG4gIHRvcERyYWdTdGFydDogJ2RyYWdzdGFydCcsXG4gIHRvcERyb3A6ICdkcm9wJyxcbiAgdG9wRHVyYXRpb25DaGFuZ2U6ICdkdXJhdGlvbmNoYW5nZScsXG4gIHRvcEVtcHRpZWQ6ICdlbXB0aWVkJyxcbiAgdG9wRW5jcnlwdGVkOiAnZW5jcnlwdGVkJyxcbiAgdG9wRW5kZWQ6ICdlbmRlZCcsXG4gIHRvcEVycm9yOiAnZXJyb3InLFxuICB0b3BGb2N1czogJ2ZvY3VzJyxcbiAgdG9wSW5wdXQ6ICdpbnB1dCcsXG4gIHRvcEtleURvd246ICdrZXlkb3duJyxcbiAgdG9wS2V5UHJlc3M6ICdrZXlwcmVzcycsXG4gIHRvcEtleVVwOiAna2V5dXAnLFxuICB0b3BMb2FkZWREYXRhOiAnbG9hZGVkZGF0YScsXG4gIHRvcExvYWRlZE1ldGFkYXRhOiAnbG9hZGVkbWV0YWRhdGEnLFxuICB0b3BMb2FkU3RhcnQ6ICdsb2Fkc3RhcnQnLFxuICB0b3BNb3VzZURvd246ICdtb3VzZWRvd24nLFxuICB0b3BNb3VzZU1vdmU6ICdtb3VzZW1vdmUnLFxuICB0b3BNb3VzZU91dDogJ21vdXNlb3V0JyxcbiAgdG9wTW91c2VPdmVyOiAnbW91c2VvdmVyJyxcbiAgdG9wTW91c2VVcDogJ21vdXNldXAnLFxuICB0b3BQYXN0ZTogJ3Bhc3RlJyxcbiAgdG9wUGF1c2U6ICdwYXVzZScsXG4gIHRvcFBsYXk6ICdwbGF5JyxcbiAgdG9wUGxheWluZzogJ3BsYXlpbmcnLFxuICB0b3BQcm9ncmVzczogJ3Byb2dyZXNzJyxcbiAgdG9wUmF0ZUNoYW5nZTogJ3JhdGVjaGFuZ2UnLFxuICB0b3BTY3JvbGw6ICdzY3JvbGwnLFxuICB0b3BTZWVrZWQ6ICdzZWVrZWQnLFxuICB0b3BTZWVraW5nOiAnc2Vla2luZycsXG4gIHRvcFNlbGVjdGlvbkNoYW5nZTogJ3NlbGVjdGlvbmNoYW5nZScsXG4gIHRvcFN0YWxsZWQ6ICdzdGFsbGVkJyxcbiAgdG9wU3VzcGVuZDogJ3N1c3BlbmQnLFxuICB0b3BUZXh0SW5wdXQ6ICd0ZXh0SW5wdXQnLFxuICB0b3BUaW1lVXBkYXRlOiAndGltZXVwZGF0ZScsXG4gIHRvcFRvdWNoQ2FuY2VsOiAndG91Y2hjYW5jZWwnLFxuICB0b3BUb3VjaEVuZDogJ3RvdWNoZW5kJyxcbiAgdG9wVG91Y2hNb3ZlOiAndG91Y2htb3ZlJyxcbiAgdG9wVG91Y2hTdGFydDogJ3RvdWNoc3RhcnQnLFxuICB0b3BWb2x1bWVDaGFuZ2U6ICd2b2x1bWVjaGFuZ2UnLFxuICB0b3BXYWl0aW5nOiAnd2FpdGluZycsXG4gIHRvcFdoZWVsOiAnd2hlZWwnXG59O1xuXG4vKipcbiAqIFRvIGVuc3VyZSBubyBjb25mbGljdHMgd2l0aCBvdGhlciBwb3RlbnRpYWwgUmVhY3QgaW5zdGFuY2VzIG9uIHRoZSBwYWdlXG4gKi9cbnZhciB0b3BMaXN0ZW5lcnNJREtleSA9ICdfcmVhY3RMaXN0ZW5lcnNJRCcgKyBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5cbmZ1bmN0aW9uIGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpIHtcbiAgLy8gSW4gSUU4LCBgbW91bnRBdGAgaXMgYSBob3N0IG9iamVjdCBhbmQgZG9lc24ndCBoYXZlIGBoYXNPd25Qcm9wZXJ0eWBcbiAgLy8gZGlyZWN0bHkuXG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vdW50QXQsIHRvcExpc3RlbmVyc0lES2V5KSkge1xuICAgIG1vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldID0gcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyKys7XG4gICAgYWxyZWFkeUxpc3RlbmluZ1RvW21vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldXSA9IHt9O1xuICB9XG4gIHJldHVybiBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dO1xufVxuXG4vKipcbiAqIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGlzIHVzZWQgdG8gYXR0YWNoIHRvcC1sZXZlbCBldmVudCBsaXN0ZW5lcnMuIEZvclxuICogZXhhbXBsZTpcbiAqXG4gKiAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5wdXRMaXN0ZW5lcignbXlJRCcsICdvbkNsaWNrJywgbXlGdW5jdGlvbik7XG4gKlxuICogVGhpcyB3b3VsZCBhbGxvY2F0ZSBhIFwicmVnaXN0cmF0aW9uXCIgb2YgYCgnb25DbGljaycsIG15RnVuY3Rpb24pYCBvbiAnbXlJRCcuXG4gKlxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSBhc3NpZ24oe30sIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4sIHtcblxuICAvKipcbiAgICogSW5qZWN0YWJsZSBldmVudCBiYWNrZW5kXG4gICAqL1xuICBSZWFjdEV2ZW50TGlzdGVuZXI6IG51bGwsXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFJlYWN0RXZlbnRMaXN0ZW5lclxuICAgICAqL1xuICAgIGluamVjdFJlYWN0RXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKFJlYWN0RXZlbnRMaXN0ZW5lcikge1xuICAgICAgUmVhY3RFdmVudExpc3RlbmVyLnNldEhhbmRsZVRvcExldmVsKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5oYW5kbGVUb3BMZXZlbCk7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyID0gUmVhY3RFdmVudExpc3RlbmVyO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIG9yIG5vdCBhbnkgY3JlYXRlZCBjYWxsYmFja3Mgc2hvdWxkIGJlIGVuYWJsZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBUcnVlIGlmIGNhbGxiYWNrcyBzaG91bGQgYmUgZW5hYmxlZC5cbiAgICovXG4gIHNldEVuYWJsZWQ6IGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgaWYgKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuc2V0RW5hYmxlZChlbmFibGVkKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgY2FsbGJhY2tzIGFyZSBlbmFibGVkLlxuICAgKi9cbiAgaXNFbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIgJiYgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5pc0VuYWJsZWQoKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdlIGxpc3RlbiBmb3IgYnViYmxlZCB0b3VjaCBldmVudHMgb24gdGhlIGRvY3VtZW50IG9iamVjdC5cbiAgICpcbiAgICogRmlyZWZveCB2OC4wMSAoYW5kIHBvc3NpYmx5IG90aGVycykgZXhoaWJpdGVkIHN0cmFuZ2UgYmVoYXZpb3Igd2hlblxuICAgKiBtb3VudGluZyBgb25tb3VzZW1vdmVgIGV2ZW50cyBhdCBzb21lIG5vZGUgdGhhdCB3YXMgbm90IHRoZSBkb2N1bWVudFxuICAgKiBlbGVtZW50LiBUaGUgc3ltcHRvbXMgd2VyZSB0aGF0IGlmIHlvdXIgbW91c2UgaXMgbm90IG1vdmluZyBvdmVyIHNvbWV0aGluZ1xuICAgKiBjb250YWluZWQgd2l0aGluIHRoYXQgbW91bnQgcG9pbnQgKGZvciBleGFtcGxlIG9uIHRoZSBiYWNrZ3JvdW5kKSB0aGVcbiAgICogdG9wLWxldmVsIGxpc3RlbmVycyBmb3IgYG9ubW91c2Vtb3ZlYCB3b24ndCBiZSBjYWxsZWQuIEhvd2V2ZXIsIGlmIHlvdVxuICAgKiByZWdpc3RlciB0aGUgYG1vdXNlbW92ZWAgb24gdGhlIGRvY3VtZW50IG9iamVjdCwgdGhlbiBpdCB3aWxsIG9mIGNvdXJzZVxuICAgKiBjYXRjaCBhbGwgYG1vdXNlbW92ZWBzLiBUaGlzIGFsb25nIHdpdGggaU9TIHF1aXJrcywganVzdGlmaWVzIHJlc3RyaWN0aW5nXG4gICAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgdG8gdGhlIGRvY3VtZW50IG9iamVjdCBvbmx5LCBhdCBsZWFzdCBmb3IgdGhlc2VcbiAgICogbW92ZW1lbnQgdHlwZXMgb2YgZXZlbnRzIGFuZCBwb3NzaWJseSBhbGwgZXZlbnRzLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDEwLzA5L2NsaWNrX2V2ZW50X2RlbC5odG1sXG4gICAqXG4gICAqIEFsc28sIGBrZXl1cGAvYGtleXByZXNzYC9ga2V5ZG93bmAgZG8gbm90IGJ1YmJsZSB0byB0aGUgd2luZG93IG9uIElFLCBidXRcbiAgICogdGhleSBidWJibGUgdG8gZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRlbnREb2N1bWVudEhhbmRsZSBEb2N1bWVudCB3aGljaCBvd25zIHRoZSBjb250YWluZXJcbiAgICovXG4gIGxpc3RlblRvOiBmdW5jdGlvbiAocmVnaXN0cmF0aW9uTmFtZSwgY29udGVudERvY3VtZW50SGFuZGxlKSB7XG4gICAgdmFyIG1vdW50QXQgPSBjb250ZW50RG9jdW1lbnRIYW5kbGU7XG4gICAgdmFyIGlzTGlzdGVuaW5nID0gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCk7XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXTtcblxuICAgIHZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlcGVuZGVuY3kgPSBkZXBlbmRlbmNpZXNbaV07XG4gICAgICBpZiAoIShpc0xpc3RlbmluZy5oYXNPd25Qcm9wZXJ0eShkZXBlbmRlbmN5KSAmJiBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSkpIHtcbiAgICAgICAgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wV2hlZWwpIHtcbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnd2hlZWwnKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wV2hlZWwsICd3aGVlbCcsIG1vdW50QXQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNFdmVudFN1cHBvcnRlZCgnbW91c2V3aGVlbCcpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BXaGVlbCwgJ21vdXNld2hlZWwnLCBtb3VudEF0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmlyZWZveCBuZWVkcyB0byBjYXB0dXJlIGEgZGlmZmVyZW50IG1vdXNlIHNjcm9sbCBldmVudC5cbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9kb20vZXZlbnRzL3Rlc3RzL3Njcm9sbC5odG1sXG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BXaGVlbCwgJ0RPTU1vdXNlU2Nyb2xsJywgbW91bnRBdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wU2Nyb2xsKSB7XG5cbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnc2Nyb2xsJywgdHJ1ZSkpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BTY3JvbGwsICdzY3JvbGwnLCBtb3VudEF0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wU2Nyb2xsLCAnc2Nyb2xsJywgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5XSU5ET1dfSEFORExFKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyB8fCBkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcEJsdXIpIHtcblxuICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdmb2N1cycsIHRydWUpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wRm9jdXMsICdmb2N1cycsIG1vdW50QXQpO1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudCh0b3BMZXZlbFR5cGVzLnRvcEJsdXIsICdibHVyJywgbW91bnRBdCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdmb2N1c2luJykpIHtcbiAgICAgICAgICAgIC8vIElFIGhhcyBgZm9jdXNpbmAgYW5kIGBmb2N1c291dGAgZXZlbnRzIHdoaWNoIGJ1YmJsZS5cbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMDgvMDQvZGVsZWdhdGluZ190aGUuaHRtbFxuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wRm9jdXMsICdmb2N1c2luJywgbW91bnRBdCk7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BCbHVyLCAnZm9jdXNvdXQnLCBtb3VudEF0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB0byBtYWtlIHN1cmUgYmx1ciBhbmQgZm9jdXMgZXZlbnQgbGlzdGVuZXJzIGFyZSBvbmx5IGF0dGFjaGVkIG9uY2VcbiAgICAgICAgICBpc0xpc3RlbmluZ1t0b3BMZXZlbFR5cGVzLnRvcEJsdXJdID0gdHJ1ZTtcbiAgICAgICAgICBpc0xpc3RlbmluZ1t0b3BMZXZlbFR5cGVzLnRvcEZvY3VzXSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAodG9wRXZlbnRNYXBwaW5nLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpKSB7XG4gICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KGRlcGVuZGVuY3ksIHRvcEV2ZW50TWFwcGluZ1tkZXBlbmRlbmN5XSwgbW91bnRBdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHRyYXBCdWJibGVkRXZlbnQ6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgcmV0dXJuIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKTtcbiAgfSxcblxuICB0cmFwQ2FwdHVyZWRFdmVudDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICByZXR1cm4gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudCh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKTtcbiAgfSxcblxuICAvKipcbiAgICogTGlzdGVucyB0byB3aW5kb3cgc2Nyb2xsIGFuZCByZXNpemUgZXZlbnRzLiBXZSBjYWNoZSBzY3JvbGwgdmFsdWVzIHNvIHRoYXRcbiAgICogYXBwbGljYXRpb24gY29kZSBjYW4gYWNjZXNzIHRoZW0gd2l0aG91dCB0cmlnZ2VyaW5nIHJlZmxvd3MuXG4gICAqXG4gICAqIE5PVEU6IFNjcm9sbCBldmVudHMgZG8gbm90IGJ1YmJsZS5cbiAgICpcbiAgICogQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS9ldmVudHMvc2Nyb2xsLmh0bWxcbiAgICovXG4gIGVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZzogZnVuY3Rpb24gKCkge1xuICAgIGlmICghaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUpIHtcbiAgICAgIHZhciByZWZyZXNoID0gVmlld3BvcnRNZXRyaWNzLnJlZnJlc2hTY3JvbGxWYWx1ZXM7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLm1vbml0b3JTY3JvbGxWYWx1ZShyZWZyZXNoKTtcbiAgICAgIGlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOiBFdmVudFBsdWdpbkh1Yi5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MsXG5cbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IEV2ZW50UGx1Z2luSHViLnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLFxuXG4gIHB1dExpc3RlbmVyOiBFdmVudFBsdWdpbkh1Yi5wdXRMaXN0ZW5lcixcblxuICBnZXRMaXN0ZW5lcjogRXZlbnRQbHVnaW5IdWIuZ2V0TGlzdGVuZXIsXG5cbiAgZGVsZXRlTGlzdGVuZXI6IEV2ZW50UGx1Z2luSHViLmRlbGV0ZUxpc3RlbmVyLFxuXG4gIGRlbGV0ZUFsbExpc3RlbmVyczogRXZlbnRQbHVnaW5IdWIuZGVsZXRlQWxsTGlzdGVuZXJzXG5cbn0pO1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLCAnUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyJywge1xuICBwdXRMaXN0ZW5lcjogJ3B1dExpc3RlbmVyJyxcbiAgZGVsZXRlTGlzdGVuZXI6ICdkZWxldGVMaXN0ZW5lcidcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDaGlsZFJlY29uY2lsZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcblxudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gaW5zdGFudGlhdGVDaGlsZChjaGlsZEluc3RhbmNlcywgY2hpbGQsIG5hbWUpIHtcbiAgLy8gV2UgZm91bmQgYSBjb21wb25lbnQgaW5zdGFuY2UuXG4gIHZhciBrZXlVbmlxdWUgPSBjaGlsZEluc3RhbmNlc1tuYW1lXSA9PT0gdW5kZWZpbmVkO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGtleVVuaXF1ZSwgJ2ZsYXR0ZW5DaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksICcgKyAnYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgJyArICd0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSB1c2VkLicsIG5hbWUpIDogdW5kZWZpbmVkO1xuICB9XG4gIGlmIChjaGlsZCAhPSBudWxsICYmIGtleVVuaXF1ZSkge1xuICAgIGNoaWxkSW5zdGFuY2VzW25hbWVdID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChjaGlsZCwgbnVsbCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZWFjdENoaWxkUmVjb25jaWxlciBwcm92aWRlcyBoZWxwZXJzIGZvciBpbml0aWFsaXppbmcgb3IgdXBkYXRpbmcgYSBzZXQgb2ZcbiAqIGNoaWxkcmVuLiBJdHMgb3V0cHV0IGlzIHN1aXRhYmxlIGZvciBwYXNzaW5nIGl0IG9udG8gUmVhY3RNdWx0aUNoaWxkIHdoaWNoXG4gKiBkb2VzIGRpZmZlZCByZW9yZGVyaW5nIGFuZCBpbnNlcnRpb24uXG4gKi9cbnZhciBSZWFjdENoaWxkUmVjb25jaWxlciA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIFwibW91bnQgaW1hZ2VcIiBmb3IgZWFjaCBvZiB0aGUgc3VwcGxpZWQgY2hpbGRyZW4uIEluIHRoZSBjYXNlXG4gICAqIG9mIGBSZWFjdERPTUNvbXBvbmVudGAsIGEgbW91bnQgaW1hZ2UgaXMgYSBzdHJpbmcgb2YgbWFya3VwLlxuICAgKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5lc3RlZENoaWxkTm9kZXMgTmVzdGVkIGNoaWxkIG1hcHMuXG4gICAqIEByZXR1cm4gez9vYmplY3R9IEEgc2V0IG9mIGNoaWxkIGluc3RhbmNlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBpbnN0YW50aWF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAobmVzdGVkQ2hpbGROb2RlcywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICBpZiAobmVzdGVkQ2hpbGROb2RlcyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGNoaWxkSW5zdGFuY2VzID0ge307XG4gICAgdHJhdmVyc2VBbGxDaGlsZHJlbihuZXN0ZWRDaGlsZE5vZGVzLCBpbnN0YW50aWF0ZUNoaWxkLCBjaGlsZEluc3RhbmNlcyk7XG4gICAgcmV0dXJuIGNoaWxkSW5zdGFuY2VzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSByZW5kZXJlZCBjaGlsZHJlbiBhbmQgcmV0dXJucyBhIG5ldyBzZXQgb2YgY2hpbGRyZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcHJldkNoaWxkcmVuIFByZXZpb3VzbHkgaW5pdGlhbGl6ZWQgc2V0IG9mIGNoaWxkcmVuLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDaGlsZHJlbiBGbGF0IGNoaWxkIGVsZW1lbnQgbWFwcy5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fSBBIG5ldyBzZXQgb2YgY2hpbGQgaW5zdGFuY2VzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAocHJldkNoaWxkcmVuLCBuZXh0Q2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgLy8gV2UgY3VycmVudGx5IGRvbid0IGhhdmUgYSB3YXkgdG8gdHJhY2sgbW92ZXMgaGVyZSBidXQgaWYgd2UgdXNlIGl0ZXJhdG9yc1xuICAgIC8vIGluc3RlYWQgb2YgZm9yLi5pbiB3ZSBjYW4gemlwIHRoZSBpdGVyYXRvcnMgYW5kIGNoZWNrIGlmIGFuIGl0ZW0gaGFzXG4gICAgLy8gbW92ZWQuXG4gICAgLy8gVE9ETzogSWYgbm90aGluZyBoYXMgY2hhbmdlZCwgcmV0dXJuIHRoZSBwcmV2Q2hpbGRyZW4gb2JqZWN0IHNvIHRoYXQgd2VcbiAgICAvLyBjYW4gcXVpY2tseSBiYWlsb3V0IGlmIG5vdGhpbmcgaGFzIGNoYW5nZWQuXG4gICAgaWYgKCFuZXh0Q2hpbGRyZW4gJiYgIXByZXZDaGlsZHJlbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBuYW1lO1xuICAgIGZvciAobmFtZSBpbiBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgIGlmICghbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZHJlbiAmJiBwcmV2Q2hpbGRyZW5bbmFtZV07XG4gICAgICB2YXIgcHJldkVsZW1lbnQgPSBwcmV2Q2hpbGQgJiYgcHJldkNoaWxkLl9jdXJyZW50RWxlbWVudDtcbiAgICAgIHZhciBuZXh0RWxlbWVudCA9IG5leHRDaGlsZHJlbltuYW1lXTtcbiAgICAgIGlmIChwcmV2Q2hpbGQgIT0gbnVsbCAmJiBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpKSB7XG4gICAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KHByZXZDaGlsZCwgbmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgbmV4dENoaWxkcmVuW25hbWVdID0gcHJldkNoaWxkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByZXZDaGlsZCkge1xuICAgICAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHByZXZDaGlsZCwgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGNoaWxkIG11c3QgYmUgaW5zdGFudGlhdGVkIGJlZm9yZSBpdCdzIG1vdW50ZWQuXG4gICAgICAgIHZhciBuZXh0Q2hpbGRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobmV4dEVsZW1lbnQsIG51bGwpO1xuICAgICAgICBuZXh0Q2hpbGRyZW5bbmFtZV0gPSBuZXh0Q2hpbGRJbnN0YW5jZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVW5tb3VudCBjaGlsZHJlbiB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudC5cbiAgICBmb3IgKG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpICYmICEobmV4dENoaWxkcmVuICYmIG5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkpIHtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNoaWxkcmVuW25hbWVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5leHRDaGlsZHJlbjtcbiAgfSxcblxuICAvKipcbiAgICogVW5tb3VudHMgYWxsIHJlbmRlcmVkIGNoaWxkcmVuLiBUaGlzIHNob3VsZCBiZSB1c2VkIHRvIGNsZWFuIHVwIGNoaWxkcmVuXG4gICAqIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxuICAgKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IHJlbmRlcmVkQ2hpbGRyZW4gUHJldmlvdXNseSBpbml0aWFsaXplZCBzZXQgb2YgY2hpbGRyZW4uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdW5tb3VudENoaWxkcmVuOiBmdW5jdGlvbiAocmVuZGVyZWRDaGlsZHJlbikge1xuICAgIGZvciAodmFyIG5hbWUgaW4gcmVuZGVyZWRDaGlsZHJlbikge1xuICAgICAgaWYgKHJlbmRlcmVkQ2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgdmFyIHJlbmRlcmVkQ2hpbGQgPSByZW5kZXJlZENoaWxkcmVuW25hbWVdO1xuICAgICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChyZW5kZXJlZENoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENoaWxkUmVjb25jaWxlcjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDaGlsZHJlblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSByZXF1aXJlKCcuL3RyYXZlcnNlQWxsQ2hpbGRyZW4nKTtcblxudmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gUG9vbGVkQ2xhc3MudHdvQXJndW1lbnRQb29sZXI7XG52YXIgZm91ckFyZ3VtZW50UG9vbGVyID0gUG9vbGVkQ2xhc3MuZm91ckFyZ3VtZW50UG9vbGVyO1xuXG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXggPSAvXFwvKD8hXFwvKS9nO1xuZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UodXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsICcvLycpO1xufVxuXG4vKipcbiAqIFBvb2xlZENsYXNzIHJlcHJlc2VudGluZyB0aGUgYm9va2tlZXBpbmcgYXNzb2NpYXRlZCB3aXRoIHBlcmZvcm1pbmcgYSBjaGlsZFxuICogdHJhdmVyc2FsLiBBbGxvd3MgYXZvaWRpbmcgYmluZGluZyBjYWxsYmFja3MuXG4gKlxuICogQGNvbnN0cnVjdG9yIEZvckVhY2hCb29rS2VlcGluZ1xuICogQHBhcmFtIHshZnVuY3Rpb259IGZvckVhY2hGdW5jdGlvbiBGdW5jdGlvbiB0byBwZXJmb3JtIHRyYXZlcnNhbCB3aXRoLlxuICogQHBhcmFtIHs/Kn0gZm9yRWFjaENvbnRleHQgQ29udGV4dCB0byBwZXJmb3JtIGNvbnRleHQgd2l0aC5cbiAqL1xuZnVuY3Rpb24gRm9yRWFjaEJvb2tLZWVwaW5nKGZvckVhY2hGdW5jdGlvbiwgZm9yRWFjaENvbnRleHQpIHtcbiAgdGhpcy5mdW5jID0gZm9yRWFjaEZ1bmN0aW9uO1xuICB0aGlzLmNvbnRleHQgPSBmb3JFYWNoQ29udGV4dDtcbiAgdGhpcy5jb3VudCA9IDA7XG59XG5Gb3JFYWNoQm9va0tlZXBpbmcucHJvdG90eXBlLmRlc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZnVuYyA9IG51bGw7XG4gIHRoaXMuY29udGV4dCA9IG51bGw7XG4gIHRoaXMuY291bnQgPSAwO1xufTtcblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhGb3JFYWNoQm9va0tlZXBpbmcsIHR3b0FyZ3VtZW50UG9vbGVyKTtcblxuZnVuY3Rpb24gZm9yRWFjaFNpbmdsZUNoaWxkKGJvb2tLZWVwaW5nLCBjaGlsZCwgbmFtZSkge1xuICB2YXIgZnVuYyA9IGJvb2tLZWVwaW5nLmZ1bmM7XG4gIHZhciBjb250ZXh0ID0gYm9va0tlZXBpbmcuY29udGV4dDtcblxuICBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGJvb2tLZWVwaW5nLmNvdW50KyspO1xufVxuXG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFRoZSBwcm92aWRlZCBmb3JFYWNoRnVuYyhjaGlsZCwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBmb3JFYWNoRnVuY1xuICogQHBhcmFtIHsqfSBmb3JFYWNoQ29udGV4dCBDb250ZXh0IGZvciBmb3JFYWNoQ29udGV4dC5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IEZvckVhY2hCb29rS2VlcGluZy5nZXRQb29sZWQoZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KTtcbiAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaFNpbmdsZUNoaWxkLCB0cmF2ZXJzZUNvbnRleHQpO1xuICBGb3JFYWNoQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG4vKipcbiAqIFBvb2xlZENsYXNzIHJlcHJlc2VudGluZyB0aGUgYm9va2tlZXBpbmcgYXNzb2NpYXRlZCB3aXRoIHBlcmZvcm1pbmcgYSBjaGlsZFxuICogbWFwcGluZy4gQWxsb3dzIGF2b2lkaW5nIGJpbmRpbmcgY2FsbGJhY2tzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBNYXBCb29rS2VlcGluZ1xuICogQHBhcmFtIHshKn0gbWFwUmVzdWx0IE9iamVjdCBjb250YWluaW5nIHRoZSBvcmRlcmVkIG1hcCBvZiByZXN1bHRzLlxuICogQHBhcmFtIHshZnVuY3Rpb259IG1hcEZ1bmN0aW9uIEZ1bmN0aW9uIHRvIHBlcmZvcm0gbWFwcGluZyB3aXRoLlxuICogQHBhcmFtIHs/Kn0gbWFwQ29udGV4dCBDb250ZXh0IHRvIHBlcmZvcm0gbWFwcGluZyB3aXRoLlxuICovXG5mdW5jdGlvbiBNYXBCb29rS2VlcGluZyhtYXBSZXN1bHQsIGtleVByZWZpeCwgbWFwRnVuY3Rpb24sIG1hcENvbnRleHQpIHtcbiAgdGhpcy5yZXN1bHQgPSBtYXBSZXN1bHQ7XG4gIHRoaXMua2V5UHJlZml4ID0ga2V5UHJlZml4O1xuICB0aGlzLmZ1bmMgPSBtYXBGdW5jdGlvbjtcbiAgdGhpcy5jb250ZXh0ID0gbWFwQ29udGV4dDtcbiAgdGhpcy5jb3VudCA9IDA7XG59XG5NYXBCb29rS2VlcGluZy5wcm90b3R5cGUuZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZXN1bHQgPSBudWxsO1xuICB0aGlzLmtleVByZWZpeCA9IG51bGw7XG4gIHRoaXMuZnVuYyA9IG51bGw7XG4gIHRoaXMuY29udGV4dCA9IG51bGw7XG4gIHRoaXMuY291bnQgPSAwO1xufTtcblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhNYXBCb29rS2VlcGluZywgZm91ckFyZ3VtZW50UG9vbGVyKTtcblxuZnVuY3Rpb24gbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dChib29rS2VlcGluZywgY2hpbGQsIGNoaWxkS2V5KSB7XG4gIHZhciByZXN1bHQgPSBib29rS2VlcGluZy5yZXN1bHQ7XG4gIHZhciBrZXlQcmVmaXggPSBib29rS2VlcGluZy5rZXlQcmVmaXg7XG4gIHZhciBmdW5jID0gYm9va0tlZXBpbmcuZnVuYztcbiAgdmFyIGNvbnRleHQgPSBib29rS2VlcGluZy5jb250ZXh0O1xuXG4gIHZhciBtYXBwZWRDaGlsZCA9IGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgYm9va0tlZXBpbmcuY291bnQrKyk7XG4gIGlmIChBcnJheS5pc0FycmF5KG1hcHBlZENoaWxkKSkge1xuICAgIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwobWFwcGVkQ2hpbGQsIHJlc3VsdCwgY2hpbGRLZXksIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCk7XG4gIH0gZWxzZSBpZiAobWFwcGVkQ2hpbGQgIT0gbnVsbCkge1xuICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobWFwcGVkQ2hpbGQpKSB7XG4gICAgICBtYXBwZWRDaGlsZCA9IFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VLZXkobWFwcGVkQ2hpbGQsXG4gICAgICAvLyBLZWVwIGJvdGggdGhlIChtYXBwZWQpIGFuZCBvbGQga2V5cyBpZiB0aGV5IGRpZmZlciwganVzdCBhc1xuICAgICAgLy8gdHJhdmVyc2VBbGxDaGlsZHJlbiB1c2VkIHRvIGRvIGZvciBvYmplY3RzIGFzIGNoaWxkcmVuXG4gICAgICBrZXlQcmVmaXggKyAobWFwcGVkQ2hpbGQgIT09IGNoaWxkID8gZXNjYXBlVXNlclByb3ZpZGVkS2V5KG1hcHBlZENoaWxkLmtleSB8fCAnJykgKyAnLycgOiAnJykgKyBjaGlsZEtleSk7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKG1hcHBlZENoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKGNoaWxkcmVuLCBhcnJheSwgcHJlZml4LCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBlc2NhcGVkUHJlZml4ID0gJyc7XG4gIGlmIChwcmVmaXggIT0gbnVsbCkge1xuICAgIGVzY2FwZWRQcmVmaXggPSBlc2NhcGVVc2VyUHJvdmlkZWRLZXkocHJlZml4KSArICcvJztcbiAgfVxuICB2YXIgdHJhdmVyc2VDb250ZXh0ID0gTWFwQm9va0tlZXBpbmcuZ2V0UG9vbGVkKGFycmF5LCBlc2NhcGVkUHJlZml4LCBmdW5jLCBjb250ZXh0KTtcbiAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgdHJhdmVyc2VDb250ZXh0KTtcbiAgTWFwQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG4vKipcbiAqIE1hcHMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFRoZSBwcm92aWRlZCBtYXBGdW5jdGlvbihjaGlsZCwga2V5LCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZ1bmMgVGhlIG1hcCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBtYXBGdW5jdGlvbi5cbiAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9yZGVyZWQgbWFwIG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBmdW5jLCBjb250ZXh0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFNpbmdsZUNoaWxkRHVtbXkodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBDb3VudCB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXNcbiAqIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4uXG4gKi9cbmZ1bmN0aW9uIGNvdW50Q2hpbGRyZW4oY2hpbGRyZW4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hTaW5nbGVDaGlsZER1bW15LCBudWxsKTtcbn1cblxuLyoqXG4gKiBGbGF0dGVuIGEgY2hpbGRyZW4gb2JqZWN0ICh0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmApIGFuZFxuICogcmV0dXJuIGFuIGFycmF5IHdpdGggYXBwcm9wcmlhdGVseSByZS1rZXllZCBjaGlsZHJlbi5cbiAqL1xuZnVuY3Rpb24gdG9BcnJheShjaGlsZHJlbikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIHJlc3VsdCwgbnVsbCwgZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIFJlYWN0Q2hpbGRyZW4gPSB7XG4gIGZvckVhY2g6IGZvckVhY2hDaGlsZHJlbixcbiAgbWFwOiBtYXBDaGlsZHJlbixcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbDogbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbCxcbiAgY291bnQ6IGNvdW50Q2hpbGRyZW4sXG4gIHRvQXJyYXk6IHRvQXJyYXlcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDaGlsZHJlbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDbGFzc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudCcpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZUxvY2F0aW9ucycpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcycpO1xudmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdE5vb3BVcGRhdGVRdWV1ZScpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU1pcnJvcicpO1xudmFyIGtleU9mID0gcmVxdWlyZSgnZmJqcy9saWIva2V5T2YnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgTUlYSU5TX0tFWSA9IGtleU9mKHsgbWl4aW5zOiBudWxsIH0pO1xuXG4vKipcbiAqIFBvbGljaWVzIHRoYXQgZGVzY3JpYmUgbWV0aG9kcyBpbiBgUmVhY3RDbGFzc0ludGVyZmFjZWAuXG4gKi9cbnZhciBTcGVjUG9saWN5ID0ga2V5TWlycm9yKHtcbiAgLyoqXG4gICAqIFRoZXNlIG1ldGhvZHMgbWF5IGJlIGRlZmluZWQgb25seSBvbmNlIGJ5IHRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIG9yIG1peGluLlxuICAgKi9cbiAgREVGSU5FX09OQ0U6IG51bGwsXG4gIC8qKlxuICAgKiBUaGVzZSBtZXRob2RzIG1heSBiZSBkZWZpbmVkIGJ5IGJvdGggdGhlIGNsYXNzIHNwZWNpZmljYXRpb24gYW5kIG1peGlucy5cbiAgICogU3Vic2VxdWVudCBkZWZpbml0aW9ucyB3aWxsIGJlIGNoYWluZWQuIFRoZXNlIG1ldGhvZHMgbXVzdCByZXR1cm4gdm9pZC5cbiAgICovXG4gIERFRklORV9NQU5ZOiBudWxsLFxuICAvKipcbiAgICogVGhlc2UgbWV0aG9kcyBhcmUgb3ZlcnJpZGluZyB0aGUgYmFzZSBjbGFzcy5cbiAgICovXG4gIE9WRVJSSURFX0JBU0U6IG51bGwsXG4gIC8qKlxuICAgKiBUaGVzZSBtZXRob2RzIGFyZSBzaW1pbGFyIHRvIERFRklORV9NQU5ZLCBleGNlcHQgd2UgYXNzdW1lIHRoZXkgcmV0dXJuXG4gICAqIG9iamVjdHMuIFdlIHRyeSB0byBtZXJnZSB0aGUga2V5cyBvZiB0aGUgcmV0dXJuIHZhbHVlcyBvZiBhbGwgdGhlIG1peGVkIGluXG4gICAqIGZ1bmN0aW9ucy4gSWYgdGhlcmUgaXMgYSBrZXkgY29uZmxpY3Qgd2UgdGhyb3cuXG4gICAqL1xuICBERUZJTkVfTUFOWV9NRVJHRUQ6IG51bGxcbn0pO1xuXG52YXIgaW5qZWN0ZWRNaXhpbnMgPSBbXTtcblxudmFyIHdhcm5lZFNldFByb3BzID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuU2V0UHJvcHMoKSB7XG4gIGlmICghd2FybmVkU2V0UHJvcHMpIHtcbiAgICB3YXJuZWRTZXRQcm9wcyA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdzZXRQcm9wcyguLi4pIGFuZCByZXBsYWNlUHJvcHMoLi4uKSBhcmUgZGVwcmVjYXRlZC4gJyArICdJbnN0ZWFkLCBjYWxsIHJlbmRlciBhZ2FpbiBhdCB0aGUgdG9wIGxldmVsLicpIDogdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogQ29tcG9zaXRlIGNvbXBvbmVudHMgYXJlIGhpZ2hlci1sZXZlbCBjb21wb25lbnRzIHRoYXQgY29tcG9zZSBvdGhlciBjb21wb3NpdGVcbiAqIG9yIG5hdGl2ZSBjb21wb25lbnRzLlxuICpcbiAqIFRvIGNyZWF0ZSBhIG5ldyB0eXBlIG9mIGBSZWFjdENsYXNzYCwgcGFzcyBhIHNwZWNpZmljYXRpb24gb2ZcbiAqIHlvdXIgbmV3IGNsYXNzIHRvIGBSZWFjdC5jcmVhdGVDbGFzc2AuIFRoZSBvbmx5IHJlcXVpcmVtZW50IG9mIHlvdXIgY2xhc3NcbiAqIHNwZWNpZmljYXRpb24gaXMgdGhhdCB5b3UgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLlxuICpcbiAqICAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gKiAgICAgICByZXR1cm4gPGRpdj5IZWxsbyBXb3JsZDwvZGl2PjtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIHN1cHBvcnRzIGEgc3BlY2lmaWMgcHJvdG9jb2wgb2YgbWV0aG9kcyB0aGF0IGhhdmVcbiAqIHNwZWNpYWwgbWVhbmluZyAoZS5nLiBgcmVuZGVyYCkuIFNlZSBgUmVhY3RDbGFzc0ludGVyZmFjZWAgZm9yXG4gKiBtb3JlIHRoZSBjb21wcmVoZW5zaXZlIHByb3RvY29sLiBBbnkgb3RoZXIgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBpbiB0aGVcbiAqIGNsYXNzIHNwZWNpZmljYXRpb24gd2lsbCBiZSBhdmFpbGFibGUgb24gdGhlIHByb3RvdHlwZS5cbiAqXG4gKiBAaW50ZXJmYWNlIFJlYWN0Q2xhc3NJbnRlcmZhY2VcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RDbGFzc0ludGVyZmFjZSA9IHtcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgTWl4aW4gb2JqZWN0cyB0byBpbmNsdWRlIHdoZW4gZGVmaW5pbmcgeW91ciBjb21wb25lbnQuXG4gICAqXG4gICAqIEB0eXBlIHthcnJheX1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBtaXhpbnM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgdGhhdCBzaG91bGQgYmUgZGVmaW5lZCBvblxuICAgKiB0aGUgY29tcG9uZW50J3MgY29uc3RydWN0b3IgaW5zdGVhZCBvZiBpdHMgcHJvdG90eXBlIChzdGF0aWMgbWV0aG9kcykuXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgc3RhdGljczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogRGVmaW5pdGlvbiBvZiBwcm9wIHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBwcm9wVHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29udGV4dFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBEZWZpbml0aW9uIG9mIGNvbnRleHQgdHlwZXMgdGhpcyBjb21wb25lbnQgc2V0cyBmb3IgaXRzIGNoaWxkcmVuLlxuICAgKlxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNoaWxkQ29udGV4dFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8vID09PT0gRGVmaW5pdGlvbiBtZXRob2RzID09PT1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC4gVmFsdWVzIGluIHRoZSBtYXBwaW5nIHdpbGwgYmUgc2V0IG9uXG4gICAqIGB0aGlzLnByb3BzYCBpZiB0aGF0IHByb3AgaXMgbm90IHNwZWNpZmllZCAoaS5lLiB1c2luZyBhbiBgaW5gIGNoZWNrKS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgaW52b2tlZCBiZWZvcmUgYGdldEluaXRpYWxTdGF0ZWAgYW5kIHRoZXJlZm9yZSBjYW5ub3QgcmVseVxuICAgKiBvbiBgdGhpcy5zdGF0ZWAgb3IgdXNlIGB0aGlzLnNldFN0YXRlYC5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldERlZmF1bHRQcm9wczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cbiAgLyoqXG4gICAqIEludm9rZWQgb25jZSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZFxuICAgKiBhcyB0aGUgaW5pdGlhbCB2YWx1ZSBvZiBgdGhpcy5zdGF0ZWAuXG4gICAqXG4gICAqICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICogICAgIHJldHVybiB7XG4gICAqICAgICAgIGlzT246IGZhbHNlLFxuICAgKiAgICAgICBmb29CYXo6IG5ldyBCYXpGb28oKVxuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldEluaXRpYWxTdGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBnZXRDaGlsZENvbnRleHQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELFxuXG4gIC8qKlxuICAgKiBVc2VzIHByb3BzIGZyb20gYHRoaXMucHJvcHNgIGFuZCBzdGF0ZSBmcm9tIGB0aGlzLnN0YXRlYCB0byByZW5kZXIgdGhlXG4gICAqIHN0cnVjdHVyZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBObyBndWFyYW50ZWVzIGFyZSBtYWRlIGFib3V0IHdoZW4gb3IgaG93IG9mdGVuIHRoaXMgbWV0aG9kIGlzIGludm9rZWQsIHNvXG4gICAqIGl0IG11c3Qgbm90IGhhdmUgc2lkZSBlZmZlY3RzLlxuICAgKlxuICAgKiAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAqICAgICB2YXIgbmFtZSA9IHRoaXMucHJvcHMubmFtZTtcbiAgICogICAgIHJldHVybiA8ZGl2PkhlbGxvLCB7bmFtZX0hPC9kaXY+O1xuICAgKiAgIH1cbiAgICpcbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9XG4gICAqIEBub3NpZGVlZmZlY3RzXG4gICAqIEByZXF1aXJlZFxuICAgKi9cbiAgcmVuZGVyOiBTcGVjUG9saWN5LkRFRklORV9PTkNFLFxuXG4gIC8vID09PT0gRGVsZWdhdGUgbWV0aG9kcyA9PT09XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluaXRpYWxseSBjcmVhdGVkIGFuZCBhYm91dCB0byBiZSBtb3VudGVkLlxuICAgKiBUaGlzIG1heSBoYXZlIHNpZGUgZWZmZWN0cywgYnV0IGFueSBleHRlcm5hbCBzdWJzY3JpcHRpb25zIG9yIGRhdGEgY3JlYXRlZFxuICAgKiBieSB0aGlzIG1ldGhvZCBtdXN0IGJlIGNsZWFuZWQgdXAgaW4gYGNvbXBvbmVudFdpbGxVbm1vdW50YC5cbiAgICpcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsTW91bnQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWQgYW5kIGhhcyBhIERPTSByZXByZXNlbnRhdGlvbi5cbiAgICogSG93ZXZlciwgdGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIERPTSBub2RlIGlzIGluIHRoZSBkb2N1bWVudC5cbiAgICpcbiAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gb3BlcmF0ZSBvbiB0aGUgRE9NIHdoZW4gdGhlIGNvbXBvbmVudCBoYXNcbiAgICogYmVlbiBtb3VudGVkIChpbml0aWFsaXplZCBhbmQgcmVuZGVyZWQpIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSByb290Tm9kZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGNvbXBvbmVudC5cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCByZWNlaXZlcyBuZXcgcHJvcHMuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHJlYWN0IHRvIGEgcHJvcCB0cmFuc2l0aW9uIGJ5IHVwZGF0aW5nIHRoZVxuICAgKiBzdGF0ZSB1c2luZyBgdGhpcy5zZXRTdGF0ZWAuIEN1cnJlbnQgcHJvcHMgYXJlIGFjY2Vzc2VkIHZpYSBgdGhpcy5wcm9wc2AuXG4gICAqXG4gICAqICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgKiAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAqICAgICAgIGxpa2VzSW5jcmVhc2luZzogbmV4dFByb3BzLmxpa2VDb3VudCA+IHRoaXMucHJvcHMubGlrZUNvdW50XG4gICAqICAgICB9KTtcbiAgICogICB9XG4gICAqXG4gICAqIE5PVEU6IFRoZXJlIGlzIG5vIGVxdWl2YWxlbnQgYGNvbXBvbmVudFdpbGxSZWNlaXZlU3RhdGVgLiBBbiBpbmNvbWluZyBwcm9wXG4gICAqIHRyYW5zaXRpb24gbWF5IGNhdXNlIGEgc3RhdGUgY2hhbmdlLCBidXQgdGhlIG9wcG9zaXRlIGlzIG5vdCB0cnVlLiBJZiB5b3VcbiAgICogbmVlZCBpdCwgeW91IGFyZSBwcm9iYWJseSBsb29raW5nIGZvciBgY29tcG9uZW50V2lsbFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoaWxlIGRlY2lkaW5nIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIGJlIHVwZGF0ZWQgYXMgYSByZXN1bHQgb2ZcbiAgICogcmVjZWl2aW5nIG5ldyBwcm9wcywgc3RhdGUgYW5kL29yIGNvbnRleHQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGByZXR1cm4gZmFsc2VgIHdoZW4geW91J3JlIGNlcnRhaW4gdGhhdCB0aGVcbiAgICogdHJhbnNpdGlvbiB0byB0aGUgbmV3IHByb3BzL3N0YXRlL2NvbnRleHQgd2lsbCBub3QgcmVxdWlyZSBhIGNvbXBvbmVudFxuICAgKiB1cGRhdGUuXG4gICAqXG4gICAqICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbihuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpIHtcbiAgICogICAgIHJldHVybiAhZXF1YWwobmV4dFByb3BzLCB0aGlzLnByb3BzKSB8fFxuICAgKiAgICAgICAhZXF1YWwobmV4dFN0YXRlLCB0aGlzLnN0YXRlKSB8fFxuICAgKiAgICAgICAhZXF1YWwobmV4dENvbnRleHQsIHRoaXMuY29udGV4dCk7XG4gICAqICAgfVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY29tcG9uZW50IHNob3VsZCB1cGRhdGUuXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9PTkNFLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBhYm91dCB0byB1cGRhdGUgZHVlIHRvIGEgdHJhbnNpdGlvbiBmcm9tXG4gICAqIGB0aGlzLnByb3BzYCwgYHRoaXMuc3RhdGVgIGFuZCBgdGhpcy5jb250ZXh0YCB0byBgbmV4dFByb3BzYCwgYG5leHRTdGF0ZWBcbiAgICogYW5kIGBuZXh0Q29udGV4dGAuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHBlcmZvcm0gcHJlcGFyYXRpb24gYmVmb3JlIGFuIHVwZGF0ZSBvY2N1cnMuXG4gICAqXG4gICAqIE5PVEU6IFlvdSAqKmNhbm5vdCoqIHVzZSBgdGhpcy5zZXRTdGF0ZSgpYCBpbiB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZVxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsVXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCdzIERPTSByZXByZXNlbnRhdGlvbiBoYXMgYmVlbiB1cGRhdGVkLlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBvcGVyYXRlIG9uIHRoZSBET00gd2hlbiB0aGUgY29tcG9uZW50IGhhc1xuICAgKiBiZWVuIHVwZGF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2UHJvcHNcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2U3RhdGVcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2Q29udGV4dFxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHJvb3ROb2RlIERPTSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgY29tcG9uZW50LlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgcmVtb3ZlZCBmcm9tIGl0cyBwYXJlbnQgYW5kIGhhdmVcbiAgICogaXRzIERPTSByZXByZXNlbnRhdGlvbiBkZXN0cm95ZWQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGRlYWxsb2NhdGUgYW55IGV4dGVybmFsIHJlc291cmNlcy5cbiAgICpcbiAgICogTk9URTogVGhlcmUgaXMgbm8gYGNvbXBvbmVudERpZFVubW91bnRgIHNpbmNlIHlvdXIgY29tcG9uZW50IHdpbGwgaGF2ZSBiZWVuXG4gICAqIGRlc3Ryb3llZCBieSB0aGF0IHBvaW50LlxuICAgKlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8vID09PT0gQWR2YW5jZWQgbWV0aG9kcyA9PT09XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGNvbXBvbmVudCdzIGN1cnJlbnRseSBtb3VudGVkIERPTSByZXByZXNlbnRhdGlvbi5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhpcyBpbXBsZW1lbnRzIFJlYWN0J3MgcmVuZGVyaW5nIGFuZCByZWNvbmNpbGlhdGlvbiBhbGdvcml0aG0uXG4gICAqIFNvcGhpc3RpY2F0ZWQgY2xpZW50cyBtYXkgd2lzaCB0byBvdmVycmlkZSB0aGlzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAb3ZlcnJpZGFibGVcbiAgICovXG4gIHVwZGF0ZUNvbXBvbmVudDogU3BlY1BvbGljeS5PVkVSUklERV9CQVNFXG5cbn07XG5cbi8qKlxuICogTWFwcGluZyBmcm9tIGNsYXNzIHNwZWNpZmljYXRpb24ga2V5cyB0byBzcGVjaWFsIHByb2Nlc3NpbmcgZnVuY3Rpb25zLlxuICpcbiAqIEFsdGhvdWdoIHRoZXNlIGFyZSBkZWNsYXJlZCBsaWtlIGluc3RhbmNlIHByb3BlcnRpZXMgaW4gdGhlIHNwZWNpZmljYXRpb25cbiAqIHdoZW4gZGVmaW5pbmcgY2xhc3NlcyB1c2luZyBgUmVhY3QuY3JlYXRlQ2xhc3NgLCB0aGV5IGFyZSBhY3R1YWxseSBzdGF0aWNcbiAqIGFuZCBhcmUgYWNjZXNzaWJsZSBvbiB0aGUgY29uc3RydWN0b3IgaW5zdGVhZCBvZiB0aGUgcHJvdG90eXBlLiBEZXNwaXRlXG4gKiBiZWluZyBzdGF0aWMsIHRoZXkgbXVzdCBiZSBkZWZpbmVkIG91dHNpZGUgb2YgdGhlIFwic3RhdGljc1wiIGtleSB1bmRlclxuICogd2hpY2ggYWxsIG90aGVyIHN0YXRpYyBtZXRob2RzIGFyZSBkZWZpbmVkLlxuICovXG52YXIgUkVTRVJWRURfU1BFQ19LRVlTID0ge1xuICBkaXNwbGF5TmFtZTogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBkaXNwbGF5TmFtZSkge1xuICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIH0sXG4gIG1peGluczogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBtaXhpbnMpIHtcbiAgICBpZiAobWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvciwgbWl4aW5zW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNoaWxkQ29udGV4dFR5cGVzOiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGNoaWxkQ29udGV4dFR5cGVzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY2hpbGRDb250ZXh0KTtcbiAgICB9XG4gICAgQ29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMgPSBhc3NpZ24oe30sIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLCBjaGlsZENvbnRleHRUeXBlcyk7XG4gIH0sXG4gIGNvbnRleHRUeXBlczogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dCk7XG4gICAgfVxuICAgIENvbnN0cnVjdG9yLmNvbnRleHRUeXBlcyA9IGFzc2lnbih7fSwgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzLCBjb250ZXh0VHlwZXMpO1xuICB9LFxuICAvKipcbiAgICogU3BlY2lhbCBjYXNlIGdldERlZmF1bHRQcm9wcyB3aGljaCBzaG91bGQgbW92ZSBpbnRvIHN0YXRpY3MgYnV0IHJlcXVpcmVzXG4gICAqIGF1dG9tYXRpYyBtZXJnaW5nLlxuICAgKi9cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGdldERlZmF1bHRQcm9wcykge1xuICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcywgZ2V0RGVmYXVsdFByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gZ2V0RGVmYXVsdFByb3BzO1xuICAgIH1cbiAgfSxcbiAgcHJvcFR5cGVzOiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3BUeXBlcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIHByb3BUeXBlcywgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wKTtcbiAgICB9XG4gICAgQ29uc3RydWN0b3IucHJvcFR5cGVzID0gYXNzaWduKHt9LCBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMsIHByb3BUeXBlcyk7XG4gIH0sXG4gIHN0YXRpY3M6IGZ1bmN0aW9uIChDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICAgIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKTtcbiAgfSxcbiAgYXV0b2JpbmQ6IGZ1bmN0aW9uICgpIHt9IH07XG5cbi8vIG5vb3BcbmZ1bmN0aW9uIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgdHlwZURlZiwgbG9jYXRpb24pIHtcbiAgZm9yICh2YXIgcHJvcE5hbWUgaW4gdHlwZURlZikge1xuICAgIGlmICh0eXBlRGVmLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgLy8gdXNlIGEgd2FybmluZyBpbnN0ZWFkIG9mIGFuIGludmFyaWFudCBzbyBjb21wb25lbnRzXG4gICAgICAvLyBkb24ndCBzaG93IHVwIGluIHByb2QgYnV0IG5vdCBpbiBfX0RFVl9fXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tICcgKyAnUmVhY3QuUHJvcFR5cGVzLicsIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCBwcm9wTmFtZSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUocHJvdG8sIG5hbWUpIHtcbiAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpID8gUmVhY3RDbGFzc0ludGVyZmFjZVtuYW1lXSA6IG51bGw7XG5cbiAgLy8gRGlzYWxsb3cgb3ZlcnJpZGluZyBvZiBiYXNlIGNsYXNzIG1ldGhvZHMgdW5sZXNzIGV4cGxpY2l0bHkgYWxsb3dlZC5cbiAgaWYgKFJlYWN0Q2xhc3NNaXhpbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICEoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5PVkVSUklERV9CQVNFKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gb3ZlcnJpZGUgJyArICdgJXNgIGZyb20geW91ciBjbGFzcyBzcGVjaWZpY2F0aW9uLiBFbnN1cmUgdGhhdCB5b3VyIG1ldGhvZCBuYW1lcyAnICsgJ2RvIG5vdCBvdmVybGFwIHdpdGggUmVhY3QgbWV0aG9kcy4nLCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBEaXNhbGxvdyBkZWZpbmluZyBtZXRob2RzIG1vcmUgdGhhbiBvbmNlIHVubGVzcyBleHBsaWNpdGx5IGFsbG93ZWQuXG4gIGlmIChwcm90by5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICEoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSB8fCBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSAnICsgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSAnICsgJ3RvIGEgbWl4aW4uJywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogTWl4aW4gaGVscGVyIHdoaWNoIGhhbmRsZXMgcG9saWN5IHZhbGlkYXRpb24gYW5kIHJlc2VydmVkXG4gKiBzcGVjaWZpY2F0aW9uIGtleXMgd2hlbiBidWlsZGluZyBSZWFjdCBjbGFzc3Nlcy5cbiAqL1xuZnVuY3Rpb24gbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpIHtcbiAgaWYgKCFzcGVjKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgISh0eXBlb2Ygc3BlYyAhPT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91XFwncmUgYXR0ZW1wdGluZyB0byAnICsgJ3VzZSBhIGNvbXBvbmVudCBjbGFzcyBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhIHJlZ3VsYXIgb2JqZWN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgISFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3BlYykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91XFwncmUgYXR0ZW1wdGluZyB0byAnICsgJ3VzZSBhIGNvbXBvbmVudCBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhIHJlZ3VsYXIgb2JqZWN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICB2YXIgcHJvdG8gPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgLy8gQnkgaGFuZGxpbmcgbWl4aW5zIGJlZm9yZSBhbnkgb3RoZXIgcHJvcGVydGllcywgd2UgZW5zdXJlIHRoZSBzYW1lXG4gIC8vIGNoYWluaW5nIG9yZGVyIGlzIGFwcGxpZWQgdG8gbWV0aG9kcyB3aXRoIERFRklORV9NQU5ZIHBvbGljeSwgd2hldGhlclxuICAvLyBtaXhpbnMgYXJlIGxpc3RlZCBiZWZvcmUgb3IgYWZ0ZXIgdGhlc2UgbWV0aG9kcyBpbiB0aGUgc3BlYy5cbiAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoTUlYSU5TX0tFWSkpIHtcbiAgICBSRVNFUlZFRF9TUEVDX0tFWVMubWl4aW5zKENvbnN0cnVjdG9yLCBzcGVjLm1peGlucyk7XG4gIH1cblxuICBmb3IgKHZhciBuYW1lIGluIHNwZWMpIHtcbiAgICBpZiAoIXNwZWMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSBNSVhJTlNfS0VZKSB7XG4gICAgICAvLyBXZSBoYXZlIGFscmVhZHkgaGFuZGxlZCBtaXhpbnMgaW4gYSBzcGVjaWFsIGNhc2UgYWJvdmUuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgcHJvcGVydHkgPSBzcGVjW25hbWVdO1xuICAgIHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUocHJvdG8sIG5hbWUpO1xuXG4gICAgaWYgKFJFU0VSVkVEX1NQRUNfS0VZUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgUkVTRVJWRURfU1BFQ19LRVlTW25hbWVdKENvbnN0cnVjdG9yLCBwcm9wZXJ0eSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNldHVwIG1ldGhvZHMgb24gcHJvdG90eXBlOlxuICAgICAgLy8gVGhlIGZvbGxvd2luZyBtZW1iZXIgbWV0aG9kcyBzaG91bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgYm91bmQ6XG4gICAgICAvLyAxLiBFeHBlY3RlZCBSZWFjdENsYXNzIG1ldGhvZHMgKGluIHRoZSBcImludGVyZmFjZVwiKS5cbiAgICAgIC8vIDIuIE92ZXJyaWRkZW4gbWV0aG9kcyAodGhhdCB3ZXJlIG1peGVkIGluKS5cbiAgICAgIHZhciBpc1JlYWN0Q2xhc3NNZXRob2QgPSBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgdmFyIGlzQWxyZWFkeURlZmluZWQgPSBwcm90by5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nO1xuICAgICAgdmFyIHNob3VsZEF1dG9CaW5kID0gaXNGdW5jdGlvbiAmJiAhaXNSZWFjdENsYXNzTWV0aG9kICYmICFpc0FscmVhZHlEZWZpbmVkICYmIHNwZWMuYXV0b2JpbmQgIT09IGZhbHNlO1xuXG4gICAgICBpZiAoc2hvdWxkQXV0b0JpbmQpIHtcbiAgICAgICAgaWYgKCFwcm90by5fX3JlYWN0QXV0b0JpbmRNYXApIHtcbiAgICAgICAgICBwcm90by5fX3JlYWN0QXV0b0JpbmRNYXAgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBwcm90by5fX3JlYWN0QXV0b0JpbmRNYXBbbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlW25hbWVdO1xuXG4gICAgICAgICAgLy8gVGhlc2UgY2FzZXMgc2hvdWxkIGFscmVhZHkgYmUgY2F1Z2h0IGJ5IHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUuXG4gICAgICAgICAgIShpc1JlYWN0Q2xhc3NNZXRob2QgJiYgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEIHx8IHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENsYXNzOiBVbmV4cGVjdGVkIHNwZWMgcG9saWN5ICVzIGZvciBrZXkgJXMgJyArICd3aGVuIG1peGluZyBpbiBjb21wb25lbnQgc3BlY3MuJywgc3BlY1BvbGljeSwgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgLy8gRm9yIG1ldGhvZHMgd2hpY2ggYXJlIGRlZmluZWQgbW9yZSB0aGFuIG9uY2UsIGNhbGwgdGhlIGV4aXN0aW5nXG4gICAgICAgICAgLy8gbWV0aG9kcyBiZWZvcmUgY2FsbGluZyB0aGUgbmV3IHByb3BlcnR5LCBtZXJnaW5nIGlmIGFwcHJvcHJpYXRlLlxuICAgICAgICAgIGlmIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSkge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ocHJvdG9bbmFtZV0sIHByb3BlcnR5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgLy8gQWRkIHZlcmJvc2UgZGlzcGxheU5hbWUgdG8gdGhlIGZ1bmN0aW9uLCB3aGljaCBoZWxwcyB3aGVuIGxvb2tpbmdcbiAgICAgICAgICAgIC8vIGF0IHByb2ZpbGluZyB0b29scy5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbicgJiYgc3BlYy5kaXNwbGF5TmFtZSkge1xuICAgICAgICAgICAgICBwcm90b1tuYW1lXS5kaXNwbGF5TmFtZSA9IHNwZWMuZGlzcGxheU5hbWUgKyAnXycgKyBuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICBpZiAoIXN0YXRpY3MpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yICh2YXIgbmFtZSBpbiBzdGF0aWNzKSB7XG4gICAgdmFyIHByb3BlcnR5ID0gc3RhdGljc1tuYW1lXTtcbiAgICBpZiAoIXN0YXRpY3MuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBpc1Jlc2VydmVkID0gKG5hbWUgaW4gUkVTRVJWRURfU1BFQ19LRVlTKTtcbiAgICAhIWlzUmVzZXJ2ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBhIHJlc2VydmVkICcgKyAncHJvcGVydHksIGAlc2AsIHRoYXQgc2hvdWxkblxcJ3QgYmUgb24gdGhlIFwic3RhdGljc1wiIGtleS4gRGVmaW5lIGl0ICcgKyAnYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgaW5zdGVhZDsgaXQgd2lsbCBzdGlsbCBiZSBhY2Nlc3NpYmxlIG9uIHRoZSAnICsgJ2NvbnN0cnVjdG9yLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBpc0luaGVyaXRlZCA9IChuYW1lIGluIENvbnN0cnVjdG9yKTtcbiAgICAhIWlzSW5oZXJpdGVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArICdgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSAnICsgJ2R1ZSB0byBhIG1peGluLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBDb25zdHJ1Y3RvcltuYW1lXSA9IHByb3BlcnR5O1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9iamVjdHMsIGJ1dCB0aHJvdyBpZiBib3RoIGNvbnRhaW4gdGhlIHNhbWUga2V5LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvbmUgVGhlIGZpcnN0IG9iamVjdCwgd2hpY2ggaXMgbXV0YXRlZC5cbiAqIEBwYXJhbSB7b2JqZWN0fSB0d28gVGhlIHNlY29uZCBvYmplY3RcbiAqIEByZXR1cm4ge29iamVjdH0gb25lIGFmdGVyIGl0IGhhcyBiZWVuIG11dGF0ZWQgdG8gY29udGFpbiBldmVyeXRoaW5nIGluIHR3by5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhvbmUsIHR3bykge1xuICAhKG9uZSAmJiB0d28gJiYgdHlwZW9mIG9uZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR3byA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogQ2Fubm90IG1lcmdlIG5vbi1vYmplY3RzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICBmb3IgKHZhciBrZXkgaW4gdHdvKSB7XG4gICAgaWYgKHR3by5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAhKG9uZVtrZXldID09PSB1bmRlZmluZWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogJyArICdUcmllZCB0byBtZXJnZSB0d28gb2JqZWN0cyB3aXRoIHRoZSBzYW1lIGtleTogYCVzYC4gVGhpcyBjb25mbGljdCAnICsgJ21heSBiZSBkdWUgdG8gYSBtaXhpbjsgaW4gcGFydGljdWxhciwgdGhpcyBtYXkgYmUgY2F1c2VkIGJ5IHR3byAnICsgJ2dldEluaXRpYWxTdGF0ZSgpIG9yIGdldERlZmF1bHRQcm9wcygpIG1ldGhvZHMgcmV0dXJuaW5nIG9iamVjdHMgJyArICd3aXRoIGNsYXNoaW5nIGtleXMuJywga2V5KSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICBvbmVba2V5XSA9IHR3b1trZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb25lO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdHdvIGZ1bmN0aW9ucyBhbmQgbWVyZ2VzIHRoZWlyIHJldHVybiB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25lIEZ1bmN0aW9uIHRvIGludm9rZSBmaXJzdC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHR3byBGdW5jdGlvbiB0byBpbnZva2Ugc2Vjb25kLlxuICogQHJldHVybiB7ZnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgdHdvIGFyZ3VtZW50IGZ1bmN0aW9ucy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gIHJldHVybiBmdW5jdGlvbiBtZXJnZWRSZXN1bHQoKSB7XG4gICAgdmFyIGEgPSBvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB2YXIgYiA9IHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChhID09IG51bGwpIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH0gZWxzZSBpZiAoYiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgdmFyIGMgPSB7fTtcbiAgICBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGMsIGEpO1xuICAgIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoYywgYik7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0d28gZnVuY3Rpb25zIGFuZCBpZ25vcmVzIHRoZWlyIHJldHVybiB2YWxlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmUgRnVuY3Rpb24gdG8gaW52b2tlIGZpcnN0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHdvIEZ1bmN0aW9uIHRvIGludm9rZSBzZWNvbmQuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gRnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSB0d28gYXJndW1lbnQgZnVuY3Rpb25zLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdHdvLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbi8qKlxuICogQmluZHMgYSBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29tcG9uZW50IENvbXBvbmVudCB3aG9zZSBtZXRob2QgaXMgZ29pbmcgdG8gYmUgYm91bmQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2QgTWV0aG9kIHRvIGJlIGJvdW5kLlxuICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBib3VuZCBtZXRob2QuXG4gKi9cbmZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCkge1xuICB2YXIgYm91bmRNZXRob2QgPSBtZXRob2QuYmluZChjb21wb25lbnQpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZEFyZ3VtZW50cyA9IG51bGw7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG4gICAgdmFyIF9iaW5kID0gYm91bmRNZXRob2QuYmluZDtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBibG9jay1zY29wZWQtdmFyLCBuby11bmRlZiAqL1xuICAgIGJvdW5kTWV0aG9kLmJpbmQgPSBmdW5jdGlvbiAobmV3VGhpcykge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICAvLyBVc2VyIGlzIHRyeWluZyB0byBiaW5kKCkgYW4gYXV0b2JvdW5kIG1ldGhvZDsgd2UgZWZmZWN0aXZlbHkgd2lsbFxuICAgICAgLy8gaWdub3JlIHRoZSB2YWx1ZSBvZiBcInRoaXNcIiB0aGF0IHRoZSB1c2VyIGlzIHRyeWluZyB0byB1c2UsIHNvXG4gICAgICAvLyBsZXQncyB3YXJuLlxuICAgICAgaWYgKG5ld1RoaXMgIT09IGNvbXBvbmVudCAmJiBuZXdUaGlzICE9PSBudWxsKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYmluZCgpOiBSZWFjdCBjb21wb25lbnQgbWV0aG9kcyBtYXkgb25seSBiZSBib3VuZCB0byB0aGUgJyArICdjb21wb25lbnQgaW5zdGFuY2UuIFNlZSAlcycsIGNvbXBvbmVudE5hbWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gJyArICdSZWFjdCBkb2VzIHRoaXMgZm9yIHlvdSBhdXRvbWF0aWNhbGx5IGluIGEgaGlnaC1wZXJmb3JtYW5jZSAnICsgJ3dheSwgc28geW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoaXMgY2FsbC4gU2VlICVzJywgY29tcG9uZW50TmFtZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBib3VuZE1ldGhvZDtcbiAgICAgIH1cbiAgICAgIHZhciByZWJvdW5kTWV0aG9kID0gX2JpbmQuYXBwbHkoYm91bmRNZXRob2QsIGFyZ3VtZW50cyk7XG4gICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gYXJncztcbiAgICAgIHJldHVybiByZWJvdW5kTWV0aG9kO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGJvdW5kTWV0aG9kO1xufVxuXG4vKipcbiAqIEJpbmRzIGFsbCBhdXRvLWJvdW5kIG1ldGhvZHMgaW4gYSBjb21wb25lbnQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudCBDb21wb25lbnQgd2hvc2UgbWV0aG9kIGlzIGdvaW5nIHRvIGJlIGJvdW5kLlxuICovXG5mdW5jdGlvbiBiaW5kQXV0b0JpbmRNZXRob2RzKGNvbXBvbmVudCkge1xuICBmb3IgKHZhciBhdXRvQmluZEtleSBpbiBjb21wb25lbnQuX19yZWFjdEF1dG9CaW5kTWFwKSB7XG4gICAgaWYgKGNvbXBvbmVudC5fX3JlYWN0QXV0b0JpbmRNYXAuaGFzT3duUHJvcGVydHkoYXV0b0JpbmRLZXkpKSB7XG4gICAgICB2YXIgbWV0aG9kID0gY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcFthdXRvQmluZEtleV07XG4gICAgICBjb21wb25lbnRbYXV0b0JpbmRLZXldID0gYmluZEF1dG9CaW5kTWV0aG9kKGNvbXBvbmVudCwgbWV0aG9kKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBZGQgbW9yZSB0byB0aGUgUmVhY3RDbGFzcyBiYXNlIGNsYXNzLiBUaGVzZSBhcmUgYWxsIGxlZ2FjeSBmZWF0dXJlcyBhbmRcbiAqIHRoZXJlZm9yZSBub3QgYWxyZWFkeSBwYXJ0IG9mIHRoZSBtb2Rlcm4gUmVhY3RDb21wb25lbnQuXG4gKi9cbnZhciBSZWFjdENsYXNzTWl4aW4gPSB7XG5cbiAgLyoqXG4gICAqIFRPRE86IFRoaXMgd2lsbCBiZSBkZXByZWNhdGVkIGJlY2F1c2Ugc3RhdGUgc2hvdWxkIGFsd2F5cyBrZWVwIGEgY29uc2lzdGVudFxuICAgKiB0eXBlIHNpZ25hdHVyZSBhbmQgdGhlIG9ubHkgdXNlIGNhc2UgZm9yIHRoaXMsIGlzIHRvIGF2b2lkIHRoYXQuXG4gICAqL1xuICByZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIChuZXdTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZSh0aGlzLCBuZXdTdGF0ZSk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQGZpbmFsXG4gICAqL1xuICBpc01vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVyLmlzTW91bnRlZCh0aGlzKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyBhIHN1YnNldCBvZiB0aGUgcHJvcHMuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWFsUHJvcHMgU3Vic2V0IG9mIHRoZSBuZXh0IHByb3BzLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHByb3BzIGFyZSB1cGRhdGVkLlxuICAgKiBAZmluYWxcbiAgICogQHB1YmxpY1xuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgc2V0UHJvcHM6IGZ1bmN0aW9uIChwYXJ0aWFsUHJvcHMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm5TZXRQcm9wcygpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFByb3BzKHRoaXMsIHBhcnRpYWxQcm9wcyk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2UgYWxsIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5ld1Byb3BzIFN1YnNldCBvZiB0aGUgbmV4dCBwcm9wcy5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBwcm9wcyBhcmUgdXBkYXRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBwdWJsaWNcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIHJlcGxhY2VQcm9wczogZnVuY3Rpb24gKG5ld1Byb3BzLCBjYWxsYmFjaykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuU2V0UHJvcHMoKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVyLmVucXVldWVSZXBsYWNlUHJvcHModGhpcywgbmV3UHJvcHMpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgUmVhY3RDbGFzc0NvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHt9O1xuYXNzaWduKFJlYWN0Q2xhc3NDb21wb25lbnQucHJvdG90eXBlLCBSZWFjdENvbXBvbmVudC5wcm90b3R5cGUsIFJlYWN0Q2xhc3NNaXhpbik7XG5cbi8qKlxuICogTW9kdWxlIGZvciBjcmVhdGluZyBjb21wb3NpdGUgY29tcG9uZW50cy5cbiAqXG4gKiBAY2xhc3MgUmVhY3RDbGFzc1xuICovXG52YXIgUmVhY3RDbGFzcyA9IHtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNvbXBvc2l0ZSBjb21wb25lbnQgY2xhc3MgZ2l2ZW4gYSBjbGFzcyBzcGVjaWZpY2F0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3BlYyBDbGFzcyBzcGVjaWZpY2F0aW9uICh3aGljaCBtdXN0IGRlZmluZSBgcmVuZGVyYCkuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBDb21wb25lbnQgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGNyZWF0ZUNsYXNzOiBmdW5jdGlvbiAoc3BlYykge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICAgICAgLy8gVGhpcyBjb25zdHJ1Y3RvciBpcyBvdmVycmlkZGVuIGJ5IG1vY2tzLiBUaGUgYXJndW1lbnQgaXMgdXNlZFxuICAgICAgLy8gYnkgbW9ja3MgdG8gYXNzZXJ0IG9uIHdoYXQgZ2V0cyBtb3VudGVkLlxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0aGlzIGluc3RhbmNlb2YgQ29uc3RydWN0b3IsICdTb21ldGhpbmcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gVXNlIGEgZmFjdG9yeSBvciAnICsgJ0pTWCBpbnN0ZWFkLiBTZWU6IGh0dHBzOi8vZmIubWUvcmVhY3QtbGVnYWN5ZmFjdG9yeScpIDogdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICAvLyBXaXJlIHVwIGF1dG8tYmluZGluZ1xuICAgICAgaWYgKHRoaXMuX19yZWFjdEF1dG9CaW5kTWFwKSB7XG4gICAgICAgIGJpbmRBdXRvQmluZE1ldGhvZHModGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICAgIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuXG4gICAgICAvLyBSZWFjdENsYXNzZXMgZG9lc24ndCBoYXZlIGNvbnN0cnVjdG9ycy4gSW5zdGVhZCwgdGhleSB1c2UgdGhlXG4gICAgICAvLyBnZXRJbml0aWFsU3RhdGUgYW5kIGNvbXBvbmVudFdpbGxNb3VudCBtZXRob2RzIGZvciBpbml0aWFsaXphdGlvbi5cblxuICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IHRoaXMuZ2V0SW5pdGlhbFN0YXRlID8gdGhpcy5nZXRJbml0aWFsU3RhdGUoKSA6IG51bGw7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAvLyBXZSBhbGxvdyBhdXRvLW1vY2tzIHRvIHByb2NlZWQgYXMgaWYgdGhleSdyZSByZXR1cm5pbmcgbnVsbC5cbiAgICAgICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnICYmIHRoaXMuZ2V0SW5pdGlhbFN0YXRlLl9pc01vY2tGdW5jdGlvbikge1xuICAgICAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYmFkIHByYWN0aWNlLiBDb25zaWRlciB3YXJuaW5nIGhlcmUgYW5kXG4gICAgICAgICAgLy8gZGVwcmVjYXRpbmcgdGhpcyBjb252ZW5pZW5jZS5cbiAgICAgICAgICBpbml0aWFsU3RhdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAhKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGluaXRpYWxTdGF0ZSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzLmdldEluaXRpYWxTdGF0ZSgpOiBtdXN0IHJldHVybiBhbiBvYmplY3Qgb3IgbnVsbCcsIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICB9O1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IG5ldyBSZWFjdENsYXNzQ29tcG9uZW50KCk7XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG5cbiAgICBpbmplY3RlZE1peGlucy5mb3JFYWNoKG1peFNwZWNJbnRvQ29tcG9uZW50LmJpbmQobnVsbCwgQ29uc3RydWN0b3IpKTtcblxuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzcGVjKTtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIGRlZmF1bHRQcm9wcyBwcm9wZXJ0eSBhZnRlciBhbGwgbWl4aW5zIGhhdmUgYmVlbiBtZXJnZWQuXG4gICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgQ29uc3RydWN0b3IuZGVmYXVsdFByb3BzID0gQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKCk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSB0YWcgdG8gaW5kaWNhdGUgdGhhdCB0aGUgdXNlIG9mIHRoZXNlIG1ldGhvZCBuYW1lcyBpcyBvayxcbiAgICAgIC8vIHNpbmNlIGl0J3MgdXNlZCB3aXRoIGNyZWF0ZUNsYXNzLiBJZiBpdCdzIG5vdCwgdGhlbiBpdCdzIGxpa2VseSBhXG4gICAgICAvLyBtaXN0YWtlIHNvIHdlJ2xsIHdhcm4geW91IHRvIHVzZSB0aGUgc3RhdGljIHByb3BlcnR5LCBwcm9wZXJ0eVxuICAgICAgLy8gaW5pdGlhbGl6ZXIgb3IgY29uc3RydWN0b3IgcmVzcGVjdGl2ZWx5LlxuICAgICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAhQ29uc3RydWN0b3IucHJvdG90eXBlLnJlbmRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVDbGFzcyguLi4pOiBDbGFzcyBzcGVjaWZpY2F0aW9uIG11c3QgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbXBvbmVudFNob3VsZFVwZGF0ZSwgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyAnICsgJ1RoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyAnICsgJ2V4cGVjdGVkIHRvIHJldHVybiBhIHZhbHVlLicsIHNwZWMuZGlzcGxheU5hbWUgfHwgJ0EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcygpLiBEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpPycsIHNwZWMuZGlzcGxheU5hbWUgfHwgJ0EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gUmVkdWNlIHRpbWUgc3BlbnQgZG9pbmcgbG9va3VwcyBieSBzZXR0aW5nIHRoZXNlIG9uIHRoZSBwcm90b3R5cGUuXG4gICAgZm9yICh2YXIgbWV0aG9kTmFtZSBpbiBSZWFjdENsYXNzSW50ZXJmYWNlKSB7XG4gICAgICBpZiAoIUNvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSkge1xuICAgICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfSxcblxuICBpbmplY3Rpb246IHtcbiAgICBpbmplY3RNaXhpbjogZnVuY3Rpb24gKG1peGluKSB7XG4gICAgICBpbmplY3RlZE1peGlucy5wdXNoKG1peGluKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENsYXNzOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvbmVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdE5vb3BVcGRhdGVRdWV1ZScpO1xuXG52YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBoZWxwZXJzIGZvciB0aGUgdXBkYXRpbmcgc3RhdGUgb2YgYSBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIFJlYWN0Q29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIC8vIFdlIGluaXRpYWxpemUgdGhlIGRlZmF1bHQgdXBkYXRlciBidXQgdGhlIHJlYWwgb25lIGdldHMgaW5qZWN0ZWQgYnkgdGhlXG4gIC8vIHJlbmRlcmVyLlxuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuXG5SZWFjdENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuXG4vKipcbiAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgdG8gbXV0YXRlXG4gKiBzdGF0ZS4gWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAgd2lsbCBydW4gc3luY2hyb25vdXNseSxcbiAqIGFzIHRoZXkgbWF5IGV2ZW50dWFsbHkgYmUgYmF0Y2hlZCB0b2dldGhlci4gIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbFxuICogY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGNhbGwgdG8gc2V0U3RhdGUgaXMgYWN0dWFsbHlcbiAqIGNvbXBsZXRlZC5cbiAqXG4gKiBXaGVuIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQgdG8gc2V0U3RhdGUsIGl0IHdpbGwgYmUgY2FsbGVkIGF0IHNvbWUgcG9pbnQgaW5cbiAqIHRoZSBmdXR1cmUgKG5vdCBzeW5jaHJvbm91c2x5KS4gSXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgdXAgdG8gZGF0ZVxuICogY29tcG9uZW50IGFyZ3VtZW50cyAoc3RhdGUsIHByb3BzLCBjb250ZXh0KS4gVGhlc2UgdmFsdWVzIGNhbiBiZSBkaWZmZXJlbnRcbiAqIGZyb20gdGhpcy4qIGJlY2F1c2UgeW91ciBmdW5jdGlvbiBtYXkgYmUgY2FsbGVkIGFmdGVyIHJlY2VpdmVQcm9wcyBidXQgYmVmb3JlXG4gKiBzaG91bGRDb21wb25lbnRVcGRhdGUsIGFuZCB0aGlzIG5ldyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHdpbGwgbm90IHlldCBiZVxuICogYXNzaWduZWQgdG8gdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSBvciBmdW5jdGlvbiB0b1xuICogICAgICAgIHByb2R1Y2UgbmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuUmVhY3RDb21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgISh0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnZnVuY3Rpb24nIHx8IHBhcnRpYWxTdGF0ZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhICcgKyAnZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwYXJ0aWFsU3RhdGUgIT0gbnVsbCwgJ3NldFN0YXRlKC4uLik6IFlvdSBwYXNzZWQgYW4gdW5kZWZpbmVkIG9yIG51bGwgc3RhdGUgb2JqZWN0OyAnICsgJ2luc3RlYWQsIHVzZSBmb3JjZVVwZGF0ZSgpLicpIDogdW5kZWZpbmVkO1xuICB9XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcywgcGFydGlhbFN0YXRlKTtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICogY2VydGFpbnR5IHRoYXQgd2UgYXJlICoqbm90KiogaW4gYSBET00gdHJhbnNhY3Rpb24uXG4gKlxuICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICogY29tcG9uZW50J3Mgc3RhdGUgaGFzIGNoYW5nZWQgYnV0IGBzZXRTdGF0ZWAgd2FzIG5vdCBjYWxsZWQuXG4gKlxuICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICogYGNvbXBvbmVudFdpbGxVcGRhdGVgIGFuZCBgY29tcG9uZW50RGlkVXBkYXRlYC5cbiAqXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHVwZGF0ZSBpcyBjb21wbGV0ZS5cbiAqIEBmaW5hbFxuICogQHByb3RlY3RlZFxuICovXG5SZWFjdENvbXBvbmVudC5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzKTtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogRGVwcmVjYXRlZCBBUElzLiBUaGVzZSBBUElzIHVzZWQgdG8gZXhpc3Qgb24gY2xhc3NpYyBSZWFjdCBjbGFzc2VzIGJ1dCBzaW5jZVxuICogd2Ugd291bGQgbGlrZSB0byBkZXByZWNhdGUgdGhlbSwgd2UncmUgbm90IGdvaW5nIHRvIG1vdmUgdGhlbSBvdmVyIHRvIHRoaXNcbiAqIG1vZGVybiBiYXNlIGNsYXNzLiBJbnN0ZWFkLCB3ZSBkZWZpbmUgYSBnZXR0ZXIgdGhhdCB3YXJucyBpZiBpdCdzIGFjY2Vzc2VkLlxuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgZGVwcmVjYXRlZEFQSXMgPSB7XG4gICAgZ2V0RE9NTm9kZTogWydnZXRET01Ob2RlJywgJ1VzZSBSZWFjdERPTS5maW5kRE9NTm9kZShjb21wb25lbnQpIGluc3RlYWQuJ10sXG4gICAgaXNNb3VudGVkOiBbJ2lzTW91bnRlZCcsICdJbnN0ZWFkLCBtYWtlIHN1cmUgdG8gY2xlYW4gdXAgc3Vic2NyaXB0aW9ucyBhbmQgcGVuZGluZyByZXF1ZXN0cyBpbiAnICsgJ2NvbXBvbmVudFdpbGxVbm1vdW50IHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzLiddLFxuICAgIHJlcGxhY2VQcm9wczogWydyZXBsYWNlUHJvcHMnLCAnSW5zdGVhZCwgY2FsbCByZW5kZXIgYWdhaW4gYXQgdGhlIHRvcCBsZXZlbC4nXSxcbiAgICByZXBsYWNlU3RhdGU6IFsncmVwbGFjZVN0YXRlJywgJ1JlZmFjdG9yIHlvdXIgY29kZSB0byB1c2Ugc2V0U3RhdGUgaW5zdGVhZCAoc2VlICcgKyAnaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS4nXSxcbiAgICBzZXRQcm9wczogWydzZXRQcm9wcycsICdJbnN0ZWFkLCBjYWxsIHJlbmRlciBhZ2FpbiBhdCB0aGUgdG9wIGxldmVsLiddXG4gIH07XG4gIHZhciBkZWZpbmVEZXByZWNhdGlvbldhcm5pbmcgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgaW5mbykge1xuICAgIGlmIChjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSwgbWV0aG9kTmFtZSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzKC4uLikgaXMgZGVwcmVjYXRlZCBpbiBwbGFpbiBKYXZhU2NyaXB0IFJlYWN0IGNsYXNzZXMuICVzJywgaW5mb1swXSwgaW5mb1sxXSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBmb3IgKHZhciBmbk5hbWUgaW4gZGVwcmVjYXRlZEFQSXMpIHtcbiAgICBpZiAoZGVwcmVjYXRlZEFQSXMuaGFzT3duUHJvcGVydHkoZm5OYW1lKSkge1xuICAgICAgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nKGZuTmFtZSwgZGVwcmVjYXRlZEFQSXNbZm5OYW1lXSk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01JRE9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL1JlYWN0RE9NSURPcGVyYXRpb25zJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xuXG4vKipcbiAqIEFic3RyYWN0cyBhd2F5IGFsbCBmdW5jdGlvbmFsaXR5IG9mIHRoZSByZWNvbmNpbGVyIHRoYXQgcmVxdWlyZXMga25vd2xlZGdlIG9mXG4gKiB0aGUgYnJvd3NlciBjb250ZXh0LiBUT0RPOiBUaGVzZSBjYWxsZXJzIHNob3VsZCBiZSByZWZhY3RvcmVkIHRvIGF2b2lkIHRoZVxuICogbmVlZCBmb3IgdGhpcyBpbmplY3Rpb24uXG4gKi9cbnZhciBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCA9IHtcblxuICBwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBSZWFjdERPTUlET3BlcmF0aW9ucy5kYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMsXG5cbiAgcmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDogUmVhY3RET01JRE9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlELFxuXG4gIC8qKlxuICAgKiBJZiBhIHBhcnRpY3VsYXIgZW52aXJvbm1lbnQgcmVxdWlyZXMgdGhhdCBzb21lIHJlc291cmNlcyBiZSBjbGVhbmVkIHVwLFxuICAgKiBzcGVjaWZ5IHRoaXMgaW4gdGhlIGluamVjdGVkIE1peGluLiBJbiB0aGUgRE9NLCB3ZSB3b3VsZCBsaWtlbHkgd2FudCB0b1xuICAgKiBwdXJnZSBhbnkgY2FjaGVkIG5vZGUgSUQgbG9va3Vwcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogZnVuY3Rpb24gKHJvb3ROb2RlSUQpIHtcbiAgICBSZWFjdE1vdW50LnB1cmdlSUQocm9vdE5vZGVJRCk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgaW5qZWN0ZWQgPSBmYWxzZTtcblxudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSB7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBlbnZpcm9ubWVudCBkZXBlbmRlbnQgY2xlYW51cCBob29rLiAoc2VydmVyIHZzLlxuICAgKiBicm93c2VyIGV0YykuIEV4YW1wbGU6IEEgYnJvd3NlciBzeXN0ZW0gY2FjaGVzIERPTSBub2RlcyBiYXNlZCBvbiBjb21wb25lbnRcbiAgICogSUQgYW5kIG11c3QgcmVtb3ZlIHRoYXQgY2FjaGUgZW50cnkgd2hlbiB0aGlzIGluc3RhbmNlIGlzIHVubW91bnRlZC5cbiAgICovXG4gIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogbnVsbCxcblxuICAvKipcbiAgICogT3B0aW9uYWxseSBpbmplY3RhYmxlIGhvb2sgZm9yIHN3YXBwaW5nIG91dCBtb3VudCBpbWFnZXMgaW4gdGhlIG1pZGRsZSBvZlxuICAgKiB0aGUgdHJlZS5cbiAgICovXG4gIHJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBob29rIGZvciBwcm9jZXNzaW5nIGEgcXVldWUgb2YgY2hpbGQgdXBkYXRlcy4gV2lsbFxuICAgKiBsYXRlciBtb3ZlIGludG8gTXVsdGlDaGlsZENvbXBvbmVudHMuXG4gICAqL1xuICBwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBudWxsLFxuXG4gIGluamVjdGlvbjoge1xuICAgIGluamVjdEVudmlyb25tZW50OiBmdW5jdGlvbiAoZW52aXJvbm1lbnQpIHtcbiAgICAgICEhaW5qZWN0ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQ6IGluamVjdEVudmlyb25tZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQ7XG4gICAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQgPSBlbnZpcm9ubWVudC5yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEO1xuICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5wcm9jZXNzQ2hpbGRyZW5VcGRhdGVzID0gZW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcztcbiAgICAgIGluamVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudEVudmlyb25tZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VNYXAnKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnMnKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMnKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xudmFyIFJlYWN0VXBkYXRlUXVldWUgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlUXVldWUnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSB7XG4gIHZhciBvd25lciA9IGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQuX293bmVyIHx8IG51bGw7XG4gIGlmIChvd25lcikge1xuICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIFN0YXRlbGVzc0NvbXBvbmVudChDb21wb25lbnQpIHt9XG5TdGF0ZWxlc3NDb21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENvbXBvbmVudCA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KHRoaXMpLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICByZXR1cm4gQ29tcG9uZW50KHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCwgdGhpcy51cGRhdGVyKTtcbn07XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tIFRoZSBMaWZlLUN5Y2xlIG9mIGEgQ29tcG9zaXRlIENvbXBvbmVudCAtLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiAtIGNvbnN0cnVjdG9yOiBJbml0aWFsaXphdGlvbiBvZiBzdGF0ZS4gVGhlIGluc3RhbmNlIGlzIG5vdyByZXRhaW5lZC5cbiAqICAgLSBjb21wb25lbnRXaWxsTW91bnRcbiAqICAgLSByZW5kZXJcbiAqICAgLSBbY2hpbGRyZW4ncyBjb25zdHJ1Y3RvcnNdXG4gKiAgICAgLSBbY2hpbGRyZW4ncyBjb21wb25lbnRXaWxsTW91bnQgYW5kIHJlbmRlcl1cbiAqICAgICAtIFtjaGlsZHJlbidzIGNvbXBvbmVudERpZE1vdW50XVxuICogICAgIC0gY29tcG9uZW50RGlkTW91bnRcbiAqXG4gKiAgICAgICBVcGRhdGUgUGhhc2VzOlxuICogICAgICAgLSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChvbmx5IGNhbGxlZCBpZiBwYXJlbnQgdXBkYXRlZClcbiAqICAgICAgIC0gc2hvdWxkQ29tcG9uZW50VXBkYXRlXG4gKiAgICAgICAgIC0gY29tcG9uZW50V2lsbFVwZGF0ZVxuICogICAgICAgICAgIC0gcmVuZGVyXG4gKiAgICAgICAgICAgLSBbY2hpbGRyZW4ncyBjb25zdHJ1Y3RvcnMgb3IgcmVjZWl2ZSBwcm9wcyBwaGFzZXNdXG4gKiAgICAgICAgIC0gY29tcG9uZW50RGlkVXBkYXRlXG4gKlxuICogICAgIC0gY29tcG9uZW50V2lsbFVubW91bnRcbiAqICAgICAtIFtjaGlsZHJlbidzIGNvbXBvbmVudFdpbGxVbm1vdW50XVxuICogICAtIFtjaGlsZHJlbiBkZXN0cm95ZWRdXG4gKiAtIChkZXN0cm95ZWQpOiBUaGUgaW5zdGFuY2UgaXMgbm93IGJsYW5rLCByZWxlYXNlZCBieSBSZWFjdCBhbmQgcmVhZHkgZm9yIEdDLlxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuLyoqXG4gKiBBbiBpbmNyZW1lbnRpbmcgSUQgYXNzaWduZWQgdG8gZWFjaCBjb21wb25lbnQgd2hlbiBpdCBpcyBtb3VudGVkLiBUaGlzIGlzXG4gKiB1c2VkIHRvIGVuZm9yY2UgdGhlIG9yZGVyIGluIHdoaWNoIGBSZWFjdFVwZGF0ZXNgIHVwZGF0ZXMgZGlydHkgY29tcG9uZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbmV4dE1vdW50SUQgPSAxO1xuXG4vKipcbiAqIEBsZW5kcyB7UmVhY3RDb21wb3NpdGVDb21wb25lbnQucHJvdG90eXBlfVxuICovXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbiA9IHtcblxuICAvKipcbiAgICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIGNvbXBvc2l0ZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xuXG4gICAgLy8gU2VlIFJlYWN0VXBkYXRlUXVldWVcbiAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1N0YXRlUXVldWUgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcblxuICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gbnVsbDtcblxuICAgIHRoaXMuX2NvbnRleHQgPSBudWxsO1xuICAgIHRoaXMuX21vdW50T3JkZXIgPSAwO1xuICAgIHRoaXMuX3RvcExldmVsV3JhcHBlciA9IG51bGw7XG5cbiAgICAvLyBTZWUgUmVhY3RVcGRhdGVzIGFuZCBSZWFjdFVwZGF0ZVF1ZXVlLlxuICAgIHRoaXMuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgY29tcG9uZW50LCByZW5kZXJzIG1hcmt1cCwgYW5kIHJlZ2lzdGVycyBldmVudCBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBSZW5kZXJlZCBtYXJrdXAgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24gKHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9tb3VudE9yZGVyID0gbmV4dE1vdW50SUQrKztcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gcm9vdElEO1xuXG4gICAgdmFyIHB1YmxpY1Byb3BzID0gdGhpcy5fcHJvY2Vzc1Byb3BzKHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzKTtcbiAgICB2YXIgcHVibGljQ29udGV4dCA9IHRoaXMuX3Byb2Nlc3NDb250ZXh0KGNvbnRleHQpO1xuXG4gICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBwdWJsaWMgY2xhc3NcbiAgICB2YXIgaW5zdDtcbiAgICB2YXIgcmVuZGVyZWRFbGVtZW50O1xuXG4gICAgLy8gVGhpcyBpcyBhIHdheSB0byBkZXRlY3QgaWYgQ29tcG9uZW50IGlzIGEgc3RhdGVsZXNzIGFycm93IGZ1bmN0aW9uXG4gICAgLy8gY29tcG9uZW50LCB3aGljaCBpcyBub3QgbmV3YWJsZS4gSXQgbWlnaHQgbm90IGJlIDEwMCUgcmVsaWFibGUgYnV0IGlzXG4gICAgLy8gc29tZXRoaW5nIHdlIGNhbiBkbyB1bnRpbCB3ZSBzdGFydCBkZXRlY3RpbmcgdGhhdCBDb21wb25lbnQgZXh0ZW5kc1xuICAgIC8vIFJlYWN0LkNvbXBvbmVudC4gV2UgYWxyZWFkeSBhc3N1bWUgdGhhdCB0eXBlb2YgQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nLlxuICAgIHZhciBjYW5JbnN0YW50aWF0ZSA9ICgncHJvdG90eXBlJyBpbiBDb21wb25lbnQpO1xuXG4gICAgaWYgKGNhbkluc3RhbnRpYXRlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpbnN0ID0gbmV3IENvbXBvbmVudChwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgUmVhY3RVcGRhdGVRdWV1ZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3QgPSBuZXcgQ29tcG9uZW50KHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0LCBSZWFjdFVwZGF0ZVF1ZXVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNhbkluc3RhbnRpYXRlIHx8IGluc3QgPT09IG51bGwgfHwgaW5zdCA9PT0gZmFsc2UgfHwgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGluc3QpKSB7XG4gICAgICByZW5kZXJlZEVsZW1lbnQgPSBpbnN0O1xuICAgICAgaW5zdCA9IG5ldyBTdGF0ZWxlc3NDb21wb25lbnQoQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGxhdGVyIGluIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQsIGJ1dCBhZGQgYW4gZWFybHlcbiAgICAgIC8vIHdhcm5pbmcgbm93IHRvIGhlbHAgZGVidWdnaW5nXG4gICAgICBpZiAoaW5zdC5yZW5kZXIgPT0gbnVsbCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzKC4uLik6IE5vIGByZW5kZXJgIG1ldGhvZCBmb3VuZCBvbiB0aGUgcmV0dXJuZWQgY29tcG9uZW50ICcgKyAnaW5zdGFuY2U6IHlvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gZGVmaW5lIGByZW5kZXJgLCByZXR1cm5lZCAnICsgJ251bGwvZmFsc2UgZnJvbSBhIHN0YXRlbGVzcyBjb21wb25lbnQsIG9yIHRyaWVkIHRvIHJlbmRlciBhbiAnICsgJ2VsZW1lbnQgd2hvc2UgdHlwZSBpcyBhIGZ1bmN0aW9uIHRoYXQgaXNuXFwndCBhIFJlYWN0IGNvbXBvbmVudC4nLCBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2Ugc3VwcG9ydCBFUzYgaW5oZXJpdGluZyBmcm9tIFJlYWN0LkNvbXBvbmVudCwgdGhlIG1vZHVsZSBwYXR0ZXJuLFxuICAgICAgICAvLyBhbmQgc3RhdGVsZXNzIGNvbXBvbmVudHMsIGJ1dCBub3QgRVM2IGNsYXNzZXMgdGhhdCBkb24ndCBleHRlbmRcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoQ29tcG9uZW50LnByb3RvdHlwZSAmJiBDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgfHwgIWNhbkluc3RhbnRpYXRlIHx8ICEoaW5zdCBpbnN0YW5jZW9mIENvbXBvbmVudCksICclcyguLi4pOiBSZWFjdCBjb21wb25lbnQgY2xhc3NlcyBtdXN0IGV4dGVuZCBSZWFjdC5Db21wb25lbnQuJywgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGVzZSBzaG91bGQgYmUgc2V0IHVwIGluIHRoZSBjb25zdHJ1Y3RvciwgYnV0IGFzIGEgY29udmVuaWVuY2UgZm9yXG4gICAgLy8gc2ltcGxlciBjbGFzcyBhYnN0cmFjdGlvbnMsIHdlIHNldCB0aGVtIHVwIGFmdGVyIHRoZSBmYWN0LlxuICAgIGluc3QucHJvcHMgPSBwdWJsaWNQcm9wcztcbiAgICBpbnN0LmNvbnRleHQgPSBwdWJsaWNDb250ZXh0O1xuICAgIGluc3QucmVmcyA9IGVtcHR5T2JqZWN0O1xuICAgIGluc3QudXBkYXRlciA9IFJlYWN0VXBkYXRlUXVldWU7XG5cbiAgICB0aGlzLl9pbnN0YW5jZSA9IGluc3Q7XG5cbiAgICAvLyBTdG9yZSBhIHJlZmVyZW5jZSBmcm9tIHRoZSBpbnN0YW5jZSBiYWNrIHRvIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvblxuICAgIFJlYWN0SW5zdGFuY2VNYXAuc2V0KGluc3QsIHRoaXMpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFNpbmNlIHBsYWluIEpTIGNsYXNzZXMgYXJlIGRlZmluZWQgd2l0aG91dCBhbnkgc3BlY2lhbCBpbml0aWFsaXphdGlvblxuICAgICAgLy8gbG9naWMsIHdlIGNhbiBub3QgY2F0Y2ggY29tbW9uIGVycm9ycyBlYXJseS4gVGhlcmVmb3JlLCB3ZSBoYXZlIHRvXG4gICAgICAvLyBjYXRjaCB0aGVtIGhlcmUsIGF0IGluaXRpYWxpemF0aW9uIHRpbWUsIGluc3RlYWQuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaW5zdC5nZXRJbml0aWFsU3RhdGUgfHwgaW5zdC5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQsICdnZXRJbml0aWFsU3RhdGUgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gJyArICdUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuICcgKyAnRGlkIHlvdSBtZWFuIHRvIGRlZmluZSBhIHN0YXRlIHByb3BlcnR5IGluc3RlYWQ/JywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaW5zdC5nZXREZWZhdWx0UHJvcHMgfHwgaW5zdC5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQsICdnZXREZWZhdWx0UHJvcHMgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gJyArICdUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuICcgKyAnVXNlIGEgc3RhdGljIHByb3BlcnR5IHRvIGRlZmluZSBkZWZhdWx0UHJvcHMgaW5zdGVhZC4nLCB0aGlzLmdldE5hbWUoKSB8fCAnYSBjb21wb25lbnQnKSA6IHVuZGVmaW5lZDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFpbnN0LnByb3BUeXBlcywgJ3Byb3BUeXBlcyB3YXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBvbiAlcy4gVXNlIGEgc3RhdGljICcgKyAncHJvcGVydHkgdG8gZGVmaW5lIHByb3BUeXBlcyBpbnN0ZWFkLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdhIGNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWluc3QuY29udGV4dFR5cGVzLCAnY29udGV4dFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSAnICsgJ3N0YXRpYyBwcm9wZXJ0eSB0byBkZWZpbmUgY29udGV4dFR5cGVzIGluc3RlYWQuJywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgaW5zdC5jb21wb25lbnRTaG91bGRVcGRhdGUgIT09ICdmdW5jdGlvbicsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArICdUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgJyArICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nLCB0aGlzLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKSA6IHVuZGVmaW5lZDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHR5cGVvZiBpbnN0LmNvbXBvbmVudERpZFVubW91bnQgIT09ICdmdW5jdGlvbicsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50RGlkVW5tb3VudCgpLiBCdXQgdGhlcmUgaXMgbm8gc3VjaCBsaWZlY3ljbGUgbWV0aG9kLiAnICsgJ0RpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsVW5tb3VudCgpPycsIHRoaXMuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3QuY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyAhPT0gJ2Z1bmN0aW9uJywgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/JywgdGhpcy5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IGluc3Quc3RhdGU7XG4gICAgaWYgKGluaXRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpbnN0LnN0YXRlID0gaW5pdGlhbFN0YXRlID0gbnVsbDtcbiAgICB9XG4gICAgISh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcy5zdGF0ZTogbXVzdCBiZSBzZXQgdG8gYW4gb2JqZWN0IG9yIG51bGwnLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgaWYgKGluc3QuY29tcG9uZW50V2lsbE1vdW50KSB7XG4gICAgICBpbnN0LmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgLy8gV2hlbiBtb3VudGluZywgY2FsbHMgdG8gYHNldFN0YXRlYCBieSBgY29tcG9uZW50V2lsbE1vdW50YCB3aWxsIHNldFxuICAgICAgLy8gYHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlYCB3aXRob3V0IHRyaWdnZXJpbmcgYSByZS1yZW5kZXIuXG4gICAgICBpZiAodGhpcy5fcGVuZGluZ1N0YXRlUXVldWUpIHtcbiAgICAgICAgaW5zdC5zdGF0ZSA9IHRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUoaW5zdC5wcm9wcywgaW5zdC5jb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBub3QgYSBzdGF0ZWxlc3MgY29tcG9uZW50LCB3ZSBub3cgcmVuZGVyXG4gICAgaWYgKHJlbmRlcmVkRWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZW5kZXJlZEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IHRoaXMuX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQocmVuZGVyZWRFbGVtZW50KTtcblxuICAgIHZhciBtYXJrdXAgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQodGhpcy5fcmVuZGVyZWRDb21wb25lbnQsIHJvb3RJRCwgdHJhbnNhY3Rpb24sIHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoY29udGV4dCkpO1xuICAgIGlmIChpbnN0LmNvbXBvbmVudERpZE1vdW50KSB7XG4gICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGluc3QuY29tcG9uZW50RGlkTW91bnQsIGluc3QpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXJrdXA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIGFueSByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IGBtb3VudENvbXBvbmVudGAuXG4gICAqXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuXG4gICAgaWYgKGluc3QuY29tcG9uZW50V2lsbFVubW91bnQpIHtcbiAgICAgIGluc3QuY29tcG9uZW50V2lsbFVubW91bnQoKTtcbiAgICB9XG5cbiAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudCh0aGlzLl9yZW5kZXJlZENvbXBvbmVudCk7XG4gICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSBudWxsO1xuICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcblxuICAgIC8vIFJlc2V0IHBlbmRpbmcgZmllbGRzXG4gICAgLy8gRXZlbiBpZiB0aGlzIGNvbXBvbmVudCBpcyBzY2hlZHVsZWQgZm9yIGFub3RoZXIgdXBkYXRlIGluIFJlYWN0VXBkYXRlcyxcbiAgICAvLyBpdCB3b3VsZCBzdGlsbCBiZSBpZ25vcmVkIGJlY2F1c2UgdGhlc2UgZmllbGRzIGFyZSByZXNldC5cbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcblxuICAgIC8vIFRoZXNlIGZpZWxkcyBkbyBub3QgcmVhbGx5IG5lZWQgdG8gYmUgcmVzZXQgc2luY2UgdGhpcyBvYmplY3QgaXMgbm9cbiAgICAvLyBsb25nZXIgYWNjZXNzaWJsZS5cbiAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgICB0aGlzLl90b3BMZXZlbFdyYXBwZXIgPSBudWxsO1xuXG4gICAgLy8gRGVsZXRlIHRoZSByZWZlcmVuY2UgZnJvbSB0aGUgaW5zdGFuY2UgdG8gdGhpcyBpbnRlcm5hbCByZXByZXNlbnRhdGlvblxuICAgIC8vIHdoaWNoIGFsbG93IHRoZSBpbnRlcm5hbHMgdG8gYmUgcHJvcGVybHkgY2xlYW5lZCB1cCBldmVuIGlmIHRoZSB1c2VyXG4gICAgLy8gbGVha3MgYSByZWZlcmVuY2UgdG8gdGhlIHB1YmxpYyBpbnN0YW5jZS5cbiAgICBSZWFjdEluc3RhbmNlTWFwLnJlbW92ZShpbnN0KTtcblxuICAgIC8vIFNvbWUgZXhpc3RpbmcgY29tcG9uZW50cyByZWx5IG9uIGluc3QucHJvcHMgZXZlbiBhZnRlciB0aGV5J3ZlIGJlZW5cbiAgICAvLyBkZXN0cm95ZWQgKGluIGV2ZW50IGhhbmRsZXJzKS5cbiAgICAvLyBUT0RPOiBpbnN0LnByb3BzID0gbnVsbDtcbiAgICAvLyBUT0RPOiBpbnN0LnN0YXRlID0gbnVsbDtcbiAgICAvLyBUT0RPOiBpbnN0LmNvbnRleHQgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaWx0ZXJzIHRoZSBjb250ZXh0IG9iamVjdCB0byBvbmx5IGNvbnRhaW4ga2V5cyBzcGVjaWZpZWQgaW5cbiAgICogYGNvbnRleHRUeXBlc2BcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7P29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9tYXNrQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgbWFza2VkQ29udGV4dCA9IG51bGw7XG4gICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgdmFyIGNvbnRleHRUeXBlcyA9IENvbXBvbmVudC5jb250ZXh0VHlwZXM7XG4gICAgaWYgKCFjb250ZXh0VHlwZXMpIHtcbiAgICAgIHJldHVybiBlbXB0eU9iamVjdDtcbiAgICB9XG4gICAgbWFza2VkQ29udGV4dCA9IHt9O1xuICAgIGZvciAodmFyIGNvbnRleHROYW1lIGluIGNvbnRleHRUeXBlcykge1xuICAgICAgbWFza2VkQ29udGV4dFtjb250ZXh0TmFtZV0gPSBjb250ZXh0W2NvbnRleHROYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIG1hc2tlZENvbnRleHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbHRlcnMgdGhlIGNvbnRleHQgb2JqZWN0IHRvIG9ubHkgY29udGFpbiBrZXlzIHNwZWNpZmllZCBpblxuICAgKiBgY29udGV4dFR5cGVzYCwgYW5kIGFzc2VydHMgdGhhdCB0aGV5IGFyZSB2YWxpZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7P29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wcm9jZXNzQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgbWFza2VkQ29udGV4dCA9IHRoaXMuX21hc2tDb250ZXh0KGNvbnRleHQpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgQ29tcG9uZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgIGlmIChDb21wb25lbnQuY29udGV4dFR5cGVzKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrUHJvcFR5cGVzKENvbXBvbmVudC5jb250ZXh0VHlwZXMsIG1hc2tlZENvbnRleHQsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXNrZWRDb250ZXh0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY3VycmVudENvbnRleHRcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Byb2Nlc3NDaGlsZENvbnRleHQ6IGZ1bmN0aW9uIChjdXJyZW50Q29udGV4dCkge1xuICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgdmFyIGNoaWxkQ29udGV4dCA9IGluc3QuZ2V0Q2hpbGRDb250ZXh0ICYmIGluc3QuZ2V0Q2hpbGRDb250ZXh0KCk7XG4gICAgaWYgKGNoaWxkQ29udGV4dCkge1xuICAgICAgISh0eXBlb2YgQ29tcG9uZW50LmNoaWxkQ29udGV4dFR5cGVzID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGNoaWxkQ29udGV4dFR5cGVzIG11c3QgYmUgZGVmaW5lZCBpbiBvcmRlciB0byAnICsgJ3VzZSBnZXRDaGlsZENvbnRleHQoKS4nLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB0aGlzLl9jaGVja1Byb3BUeXBlcyhDb21wb25lbnQuY2hpbGRDb250ZXh0VHlwZXMsIGNoaWxkQ29udGV4dCwgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jaGlsZENvbnRleHQpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbmFtZSBpbiBjaGlsZENvbnRleHQpIHtcbiAgICAgICAgIShuYW1lIGluIENvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGtleSBcIiVzXCIgaXMgbm90IGRlZmluZWQgaW4gY2hpbGRDb250ZXh0VHlwZXMuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFzc2lnbih7fSwgY3VycmVudENvbnRleHQsIGNoaWxkQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50Q29udGV4dDtcbiAgfSxcblxuICAvKipcbiAgICogUHJvY2Vzc2VzIHByb3BzIGJ5IHNldHRpbmcgZGVmYXVsdCB2YWx1ZXMgZm9yIHVuc3BlY2lmaWVkIHByb3BzIGFuZFxuICAgKiBhc3NlcnRpbmcgdGhhdCB0aGUgcHJvcHMgYXJlIHZhbGlkLiBEb2VzIG5vdCBtdXRhdGUgaXRzIGFyZ3VtZW50OyByZXR1cm5zXG4gICAqIGEgbmV3IHByb3BzIG9iamVjdCB3aXRoIGRlZmF1bHRzIG1lcmdlZCBpbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5ld1Byb3BzXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wcm9jZXNzUHJvcHM6IGZ1bmN0aW9uIChuZXdQcm9wcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgQ29tcG9uZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgIGlmIChDb21wb25lbnQucHJvcFR5cGVzKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrUHJvcFR5cGVzKENvbXBvbmVudC5wcm9wVHlwZXMsIG5ld1Byb3BzLCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3UHJvcHM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFzc2VydCB0aGF0IHRoZSBwcm9wcyBhcmUgdmFsaWRcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BUeXBlcyBNYXAgb2YgcHJvcCBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NoZWNrUHJvcFR5cGVzOiBmdW5jdGlvbiAocHJvcFR5cGVzLCBwcm9wcywgbG9jYXRpb24pIHtcbiAgICAvLyBUT0RPOiBTdG9wIHZhbGlkYXRpbmcgcHJvcCB0eXBlcyBoZXJlIGFuZCBvbmx5IHVzZSB0aGUgZWxlbWVudFxuICAgIC8vIHZhbGlkYXRpb24uXG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSB0aGlzLmdldE5hbWUoKTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgISh0eXBlb2YgcHJvcFR5cGVzW3Byb3BOYW1lXSA9PT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgJyArICdmcm9tIFJlYWN0LlByb3BUeXBlcy4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBlcnJvciA9IHByb3BUeXBlc1twcm9wTmFtZV0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIC8vIFdlIG1heSB3YW50IHRvIGV4dGVuZCB0aGlzIGxvZ2ljIGZvciBzaW1pbGFyIGVycm9ycyBpblxuICAgICAgICAgIC8vIHRvcC1sZXZlbCByZW5kZXIgY2FsbHMsIHNvIEknbSBhYnN0cmFjdGluZyBpdCBhd2F5IGludG9cbiAgICAgICAgICAvLyBhIGZ1bmN0aW9uIHRvIG1pbmltaXplIHJlZmFjdG9yaW5nIGluIHRoZSBmdXR1cmVcbiAgICAgICAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0odGhpcyk7XG5cbiAgICAgICAgICBpZiAobG9jYXRpb24gPT09IFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcCkge1xuICAgICAgICAgICAgLy8gUHJlZmFjZSBnaXZlcyB1cyBzb21ldGhpbmcgdG8gYmxhY2tsaXN0IGluIHdhcm5pbmcgbW9kdWxlXG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICVzJXMnLCBlcnJvci5tZXNzYWdlLCBhZGRlbmR1bSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkIENvbnRleHQgVHlwZXM6ICVzJXMnLCBlcnJvci5tZXNzYWdlLCBhZGRlbmR1bSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uIChuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIG5leHRDb250ZXh0KSB7XG4gICAgdmFyIHByZXZFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG4gICAgdmFyIHByZXZDb250ZXh0ID0gdGhpcy5fY29udGV4dDtcblxuICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcblxuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQsIHByZXZDb250ZXh0LCBuZXh0Q29udGV4dCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIElmIGFueSBvZiBgX3BlbmRpbmdFbGVtZW50YCwgYF9wZW5kaW5nU3RhdGVRdWV1ZWAsIG9yIGBfcGVuZGluZ0ZvcmNlVXBkYXRlYFxuICAgKiBpcyBzZXQsIHVwZGF0ZSB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24pIHtcbiAgICBpZiAodGhpcy5fcGVuZGluZ0VsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQodGhpcywgdGhpcy5fcGVuZGluZ0VsZW1lbnQgfHwgdGhpcy5fY3VycmVudEVsZW1lbnQsIHRyYW5zYWN0aW9uLCB0aGlzLl9jb250ZXh0KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ1N0YXRlUXVldWUgIT09IG51bGwgfHwgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgdGhpcy5fY3VycmVudEVsZW1lbnQsIHRoaXMuX2N1cnJlbnRFbGVtZW50LCB0aGlzLl9jb250ZXh0LCB0aGlzLl9jb250ZXh0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gYW4gdXBkYXRlIHRvIGEgbW91bnRlZCBjb21wb25lbnQuIFRoZSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIGFuZFxuICAgKiBzaG91bGRDb21wb25lbnRVcGRhdGUgbWV0aG9kcyBhcmUgY2FsbGVkLCB0aGVuIChhc3N1bWluZyB0aGUgdXBkYXRlIGlzbid0XG4gICAqIHNraXBwZWQpIHRoZSByZW1haW5pbmcgdXBkYXRlIGxpZmVjeWNsZSBtZXRob2RzIGFyZSBjYWxsZWQgYW5kIHRoZSBET01cbiAgICogcmVwcmVzZW50YXRpb24gaXMgdXBkYXRlZC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhpcyBpbXBsZW1lbnRzIFJlYWN0J3MgcmVuZGVyaW5nIGFuZCByZWNvbmNpbGlhdGlvbiBhbGdvcml0aG0uXG4gICAqIFNvcGhpc3RpY2F0ZWQgY2xpZW50cyBtYXkgd2lzaCB0byBvdmVycmlkZSB0aGlzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBwcmV2UGFyZW50RWxlbWVudFxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dFBhcmVudEVsZW1lbnRcbiAgICogQGludGVybmFsXG4gICAqIEBvdmVycmlkYWJsZVxuICAgKi9cbiAgdXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHByZXZQYXJlbnRFbGVtZW50LCBuZXh0UGFyZW50RWxlbWVudCwgcHJldlVubWFza2VkQ29udGV4dCwgbmV4dFVubWFza2VkQ29udGV4dCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG5cbiAgICB2YXIgbmV4dENvbnRleHQgPSB0aGlzLl9jb250ZXh0ID09PSBuZXh0VW5tYXNrZWRDb250ZXh0ID8gaW5zdC5jb250ZXh0IDogdGhpcy5fcHJvY2Vzc0NvbnRleHQobmV4dFVubWFza2VkQ29udGV4dCk7XG4gICAgdmFyIG5leHRQcm9wcztcblxuICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYSBwcm9wcyB1cGRhdGUgdmVyc3VzIGEgc2ltcGxlIHN0YXRlIHVwZGF0ZVxuICAgIGlmIChwcmV2UGFyZW50RWxlbWVudCA9PT0gbmV4dFBhcmVudEVsZW1lbnQpIHtcbiAgICAgIC8vIFNraXAgY2hlY2tpbmcgcHJvcCB0eXBlcyBhZ2FpbiAtLSB3ZSBkb24ndCByZWFkIGluc3QucHJvcHMgdG8gYXZvaWRcbiAgICAgIC8vIHdhcm5pbmcgZm9yIERPTSBjb21wb25lbnQgcHJvcHMgaW4gdGhpcyB1cGdyYWRlXG4gICAgICBuZXh0UHJvcHMgPSBuZXh0UGFyZW50RWxlbWVudC5wcm9wcztcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dFByb3BzID0gdGhpcy5fcHJvY2Vzc1Byb3BzKG5leHRQYXJlbnRFbGVtZW50LnByb3BzKTtcbiAgICAgIC8vIEFuIHVwZGF0ZSBoZXJlIHdpbGwgc2NoZWR1bGUgYW4gdXBkYXRlIGJ1dCBpbW1lZGlhdGVseSBzZXRcbiAgICAgIC8vIF9wZW5kaW5nU3RhdGVRdWV1ZSB3aGljaCB3aWxsIGVuc3VyZSB0aGF0IGFueSBzdGF0ZSB1cGRhdGVzIGdldHNcbiAgICAgIC8vIGltbWVkaWF0ZWx5IHJlY29uY2lsZWQgaW5zdGVhZCBvZiB3YWl0aW5nIGZvciB0aGUgbmV4dCBiYXRjaC5cblxuICAgICAgaWYgKGluc3QuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykge1xuICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzLCBuZXh0Q29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG5leHRTdGF0ZSA9IHRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUobmV4dFByb3BzLCBuZXh0Q29udGV4dCk7XG5cbiAgICB2YXIgc2hvdWxkVXBkYXRlID0gdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlIHx8ICFpbnN0LnNob3VsZENvbXBvbmVudFVwZGF0ZSB8fCBpbnN0LnNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHR5cGVvZiBzaG91bGRVcGRhdGUgIT09ICd1bmRlZmluZWQnLCAnJXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk6IFJldHVybmVkIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIGEgJyArICdib29sZWFuIHZhbHVlLiBNYWtlIHN1cmUgdG8gcmV0dXJuIHRydWUgb3IgZmFsc2UuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG4gICAgICAvLyBXaWxsIHNldCBgdGhpcy5wcm9wc2AsIGB0aGlzLnN0YXRlYCBhbmQgYHRoaXMuY29udGV4dGAuXG4gICAgICB0aGlzLl9wZXJmb3JtQ29tcG9uZW50VXBkYXRlKG5leHRQYXJlbnRFbGVtZW50LCBuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQsIHRyYW5zYWN0aW9uLCBuZXh0VW5tYXNrZWRDb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgaXQncyBkZXRlcm1pbmVkIHRoYXQgYSBjb21wb25lbnQgc2hvdWxkIG5vdCB1cGRhdGUsIHdlIHN0aWxsIHdhbnRcbiAgICAgIC8vIHRvIHNldCBwcm9wcyBhbmQgc3RhdGUgYnV0IHdlIHNob3J0Y3V0IHRoZSByZXN0IG9mIHRoZSB1cGRhdGUuXG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRQYXJlbnRFbGVtZW50O1xuICAgICAgdGhpcy5fY29udGV4dCA9IG5leHRVbm1hc2tlZENvbnRleHQ7XG4gICAgICBpbnN0LnByb3BzID0gbmV4dFByb3BzO1xuICAgICAgaW5zdC5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgIGluc3QuY29udGV4dCA9IG5leHRDb250ZXh0O1xuICAgIH1cbiAgfSxcblxuICBfcHJvY2Vzc1BlbmRpbmdTdGF0ZTogZnVuY3Rpb24gKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICB2YXIgcXVldWUgPSB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZTtcbiAgICB2YXIgcmVwbGFjZSA9IHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGU7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcblxuICAgIGlmICghcXVldWUpIHtcbiAgICAgIHJldHVybiBpbnN0LnN0YXRlO1xuICAgIH1cblxuICAgIGlmIChyZXBsYWNlICYmIHF1ZXVlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHF1ZXVlWzBdO1xuICAgIH1cblxuICAgIHZhciBuZXh0U3RhdGUgPSBhc3NpZ24oe30sIHJlcGxhY2UgPyBxdWV1ZVswXSA6IGluc3Quc3RhdGUpO1xuICAgIGZvciAodmFyIGkgPSByZXBsYWNlID8gMSA6IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhcnRpYWwgPSBxdWV1ZVtpXTtcbiAgICAgIGFzc2lnbihuZXh0U3RhdGUsIHR5cGVvZiBwYXJ0aWFsID09PSAnZnVuY3Rpb24nID8gcGFydGlhbC5jYWxsKGluc3QsIG5leHRTdGF0ZSwgcHJvcHMsIGNvbnRleHQpIDogcGFydGlhbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgfSxcblxuICAvKipcbiAgICogTWVyZ2VzIG5ldyBwcm9wcyBhbmQgc3RhdGUsIG5vdGlmaWVzIGRlbGVnYXRlIG1ldGhvZHMgb2YgdXBkYXRlIGFuZFxuICAgKiBwZXJmb3JtcyB1cGRhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudCBOZXh0IGVsZW1lbnRcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wcyBOZXh0IHB1YmxpYyBvYmplY3QgdG8gc2V0IGFzIHByb3BlcnRpZXMuXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlIE5leHQgb2JqZWN0IHRvIHNldCBhcyBzdGF0ZS5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dCBOZXh0IHB1YmxpYyBvYmplY3QgdG8gc2V0IGFzIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHs/b2JqZWN0fSB1bm1hc2tlZENvbnRleHRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wZXJmb3JtQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCwgdHJhbnNhY3Rpb24sIHVubWFza2VkQ29udGV4dCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG5cbiAgICB2YXIgaGFzQ29tcG9uZW50RGlkVXBkYXRlID0gQm9vbGVhbihpbnN0LmNvbXBvbmVudERpZFVwZGF0ZSk7XG4gICAgdmFyIHByZXZQcm9wcztcbiAgICB2YXIgcHJldlN0YXRlO1xuICAgIHZhciBwcmV2Q29udGV4dDtcbiAgICBpZiAoaGFzQ29tcG9uZW50RGlkVXBkYXRlKSB7XG4gICAgICBwcmV2UHJvcHMgPSBpbnN0LnByb3BzO1xuICAgICAgcHJldlN0YXRlID0gaW5zdC5zdGF0ZTtcbiAgICAgIHByZXZDb250ZXh0ID0gaW5zdC5jb250ZXh0O1xuICAgIH1cblxuICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxVcGRhdGUpIHtcbiAgICAgIGluc3QuY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgIH1cblxuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG4gICAgdGhpcy5fY29udGV4dCA9IHVubWFza2VkQ29udGV4dDtcbiAgICBpbnN0LnByb3BzID0gbmV4dFByb3BzO1xuICAgIGluc3Quc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgaW5zdC5jb250ZXh0ID0gbmV4dENvbnRleHQ7XG5cbiAgICB0aGlzLl91cGRhdGVSZW5kZXJlZENvbXBvbmVudCh0cmFuc2FjdGlvbiwgdW5tYXNrZWRDb250ZXh0KTtcblxuICAgIGlmIChoYXNDb21wb25lbnREaWRVcGRhdGUpIHtcbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoaW5zdC5jb21wb25lbnREaWRVcGRhdGUuYmluZChpbnN0LCBwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcHJldkNvbnRleHQpLCBpbnN0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGwgdGhlIGNvbXBvbmVudCdzIGByZW5kZXJgIG1ldGhvZCBhbmQgdXBkYXRlIHRoZSBET00gYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICBfdXBkYXRlUmVuZGVyZWRDb21wb25lbnQ6IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBwcmV2Q29tcG9uZW50SW5zdGFuY2UgPSB0aGlzLl9yZW5kZXJlZENvbXBvbmVudDtcbiAgICB2YXIgcHJldlJlbmRlcmVkRWxlbWVudCA9IHByZXZDb21wb25lbnRJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQ7XG4gICAgdmFyIG5leHRSZW5kZXJlZEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQoKTtcbiAgICBpZiAoc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldlJlbmRlcmVkRWxlbWVudCwgbmV4dFJlbmRlcmVkRWxlbWVudCkpIHtcbiAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KHByZXZDb21wb25lbnRJbnN0YW5jZSwgbmV4dFJlbmRlcmVkRWxlbWVudCwgdHJhbnNhY3Rpb24sIHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoY29udGV4dCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGVzZSB0d28gSURzIGFyZSBhY3R1YWxseSB0aGUgc2FtZSEgQnV0IG5vdGhpbmcgc2hvdWxkIHJlbHkgb24gdGhhdC5cbiAgICAgIHZhciB0aGlzSUQgPSB0aGlzLl9yb290Tm9kZUlEO1xuICAgICAgdmFyIHByZXZDb21wb25lbnRJRCA9IHByZXZDb21wb25lbnRJbnN0YW5jZS5fcm9vdE5vZGVJRDtcbiAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHByZXZDb21wb25lbnRJbnN0YW5jZSk7XG5cbiAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gdGhpcy5faW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChuZXh0UmVuZGVyZWRFbGVtZW50KTtcbiAgICAgIHZhciBuZXh0TWFya3VwID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LCB0aGlzSUQsIHRyYW5zYWN0aW9uLCB0aGlzLl9wcm9jZXNzQ2hpbGRDb250ZXh0KGNvbnRleHQpKTtcbiAgICAgIHRoaXMuX3JlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQocHJldkNvbXBvbmVudElELCBuZXh0TWFya3VwKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOiBmdW5jdGlvbiAocHJldkNvbXBvbmVudElELCBuZXh0TWFya3VwKSB7XG4gICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEKHByZXZDb21wb25lbnRJRCwgbmV4dE1hcmt1cCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgIHZhciByZW5kZXJlZENvbXBvbmVudCA9IGluc3QucmVuZGVyKCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFdlIGFsbG93IGF1dG8tbW9ja3MgdG8gcHJvY2VlZCBhcyBpZiB0aGV5J3JlIHJldHVybmluZyBudWxsLlxuICAgICAgaWYgKHR5cGVvZiByZW5kZXJlZENvbXBvbmVudCA9PT0gJ3VuZGVmaW5lZCcgJiYgaW5zdC5yZW5kZXIuX2lzTW9ja0Z1bmN0aW9uKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYmFkIHByYWN0aWNlLiBDb25zaWRlciB3YXJuaW5nIGhlcmUgYW5kXG4gICAgICAgIC8vIGRlcHJlY2F0aW5nIHRoaXMgY29udmVuaWVuY2UuXG4gICAgICAgIHJlbmRlcmVkQ29tcG9uZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVuZGVyZWRDb21wb25lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlbmRlcmVkQ29tcG9uZW50O1xuICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB0aGlzO1xuICAgIHRyeSB7XG4gICAgICByZW5kZXJlZENvbXBvbmVudCA9IHRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dCgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgIShcbiAgICAvLyBUT0RPOiBBbiBgaXNWYWxpZE5vZGVgIGZ1bmN0aW9uIHdvdWxkIHByb2JhYmx5IGJlIG1vcmUgYXBwcm9wcmlhdGVcbiAgICByZW5kZXJlZENvbXBvbmVudCA9PT0gbnVsbCB8fCByZW5kZXJlZENvbXBvbmVudCA9PT0gZmFsc2UgfHwgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHJlbmRlcmVkQ29tcG9uZW50KSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMucmVuZGVyKCk6IEEgdmFsaWQgUmVhY3RDb21wb25lbnQgbXVzdCBiZSByZXR1cm5lZC4gWW91IG1heSBoYXZlICcgKyAncmV0dXJuZWQgdW5kZWZpbmVkLCBhbiBhcnJheSBvciBzb21lIG90aGVyIGludmFsaWQgb2JqZWN0LicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVuZGVyZWRDb21wb25lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIExhemlseSBhbGxvY2F0ZXMgdGhlIHJlZnMgb2JqZWN0IGFuZCBzdG9yZXMgYGNvbXBvbmVudGAgYXMgYHJlZmAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgUmVmZXJlbmNlIG5hbWUuXG4gICAqIEBwYXJhbSB7Y29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRvIHN0b3JlIGFzIGByZWZgLlxuICAgKiBAZmluYWxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGF0dGFjaFJlZjogZnVuY3Rpb24gKHJlZiwgY29tcG9uZW50KSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLmdldFB1YmxpY0luc3RhbmNlKCk7XG4gICAgIShpbnN0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1N0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBoYXZlIHJlZnMuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIHZhciBwdWJsaWNDb21wb25lbnRJbnN0YW5jZSA9IGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudCAmJiBjb21wb25lbnQuZ2V0TmFtZSA/IGNvbXBvbmVudC5nZXROYW1lKCkgOiAnYSBjb21wb25lbnQnO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocHVibGljQ29tcG9uZW50SW5zdGFuY2UgIT0gbnVsbCwgJ1N0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzICcgKyAnKFNlZSByZWYgXCIlc1wiIGluICVzIGNyZWF0ZWQgYnkgJXMpLiAnICsgJ0F0dGVtcHRzIHRvIGFjY2VzcyB0aGlzIHJlZiB3aWxsIGZhaWwuJywgcmVmLCBjb21wb25lbnROYW1lLCB0aGlzLmdldE5hbWUoKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHZhciByZWZzID0gaW5zdC5yZWZzID09PSBlbXB0eU9iamVjdCA/IGluc3QucmVmcyA9IHt9IDogaW5zdC5yZWZzO1xuICAgIHJlZnNbcmVmXSA9IHB1YmxpY0NvbXBvbmVudEluc3RhbmNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZXRhY2hlcyBhIHJlZmVyZW5jZSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgdG8gZGVyZWZlcmVuY2UuXG4gICAqIEBmaW5hbFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGV0YWNoUmVmOiBmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIHJlZnMgPSB0aGlzLmdldFB1YmxpY0luc3RhbmNlKCkucmVmcztcbiAgICBkZWxldGUgcmVmc1tyZWZdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgYSB0ZXh0IGRlc2NyaXB0aW9uIG9mIHRoZSBjb21wb25lbnQgdGhhdCBjYW4gYmUgdXNlZCB0byBpZGVudGlmeSBpdFxuICAgKiBpbiBlcnJvciBtZXNzYWdlcy5cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgbmFtZSBvciBudWxsLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldE5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdHlwZSA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gdGhpcy5faW5zdGFuY2UgJiYgdGhpcy5faW5zdGFuY2UuY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgY29uc3RydWN0b3IgJiYgY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IGNvbnN0cnVjdG9yICYmIGNvbnN0cnVjdG9yLm5hbWUgfHwgbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHRoZSBwdWJsaWNseSBhY2Nlc3NpYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgY29tcG9uZW50IC0gaS5lLiB3aGF0XG4gICAqIGlzIGV4cG9zZWQgYnkgcmVmcyBhbmQgcmV0dXJuZWQgYnkgcmVuZGVyLiBDYW4gYmUgbnVsbCBmb3Igc3RhdGVsZXNzXG4gICAqIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSB0aGUgcHVibGljIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRQdWJsaWNJbnN0YW5jZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgaWYgKGluc3QgaW5zdGFuY2VvZiBTdGF0ZWxlc3NDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdDtcbiAgfSxcblxuICAvLyBTdHViXG4gIF9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50OiBudWxsXG5cbn07XG5cblJlYWN0UGVyZi5tZWFzdXJlTWV0aG9kcyhSZWFjdENvbXBvc2l0ZUNvbXBvbmVudE1peGluLCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnLCB7XG4gIG1vdW50Q29tcG9uZW50OiAnbW91bnRDb21wb25lbnQnLFxuICB1cGRhdGVDb21wb25lbnQ6ICd1cGRhdGVDb21wb25lbnQnLFxuICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50OiAnX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCdcbn0pO1xuXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSB7XG5cbiAgTWl4aW46IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50TWl4aW5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDdXJyZW50T3duZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gKlxuICogVGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIGNvbXBvbmVudCB3aG8gc2hvdWxkIG93biBhbnkgY29tcG9uZW50cyB0aGF0IGFyZVxuICogY3VycmVudGx5IGJlaW5nIGNvbnN0cnVjdGVkLlxuICovXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSB7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAdHlwZSB7UmVhY3RDb21wb25lbnR9XG4gICAqL1xuICBjdXJyZW50OiBudWxsXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDdXJyZW50T3duZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NXG4gKi9cblxuLyogZ2xvYmFscyBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18qL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdERPTVRleHRDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RE9NVGV4dENvbXBvbmVudCcpO1xudmFyIFJlYWN0RGVmYXVsdEluamVjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3REZWZhdWx0SW5qZWN0aW9uJyk7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VIYW5kbGVzJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoJy4vUmVhY3RQZXJmJyk7XG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xudmFyIFJlYWN0VmVyc2lvbiA9IHJlcXVpcmUoJy4vUmVhY3RWZXJzaW9uJyk7XG5cbnZhciBmaW5kRE9NTm9kZSA9IHJlcXVpcmUoJy4vZmluZERPTU5vZGUnKTtcbnZhciByZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciA9IHJlcXVpcmUoJy4vcmVuZGVyU3VidHJlZUludG9Db250YWluZXInKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5SZWFjdERlZmF1bHRJbmplY3Rpb24uaW5qZWN0KCk7XG5cbnZhciByZW5kZXIgPSBSZWFjdFBlcmYubWVhc3VyZSgnUmVhY3QnLCAncmVuZGVyJywgUmVhY3RNb3VudC5yZW5kZXIpO1xuXG52YXIgUmVhY3QgPSB7XG4gIGZpbmRET01Ob2RlOiBmaW5kRE9NTm9kZSxcbiAgcmVuZGVyOiByZW5kZXIsXG4gIHVubW91bnRDb21wb25lbnRBdE5vZGU6IFJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEF0Tm9kZSxcbiAgdmVyc2lvbjogUmVhY3RWZXJzaW9uLFxuXG4gIC8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuICB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczogUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzLFxuICB1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjogcmVuZGVyU3VidHJlZUludG9Db250YWluZXJcbn07XG5cbi8vIEluamVjdCB0aGUgcnVudGltZSBpbnRvIGEgZGV2dG9vbHMgZ2xvYmFsIGhvb2sgcmVnYXJkbGVzcyBvZiBicm93c2VyLlxuLy8gQWxsb3dzIGZvciBkZWJ1Z2dpbmcgd2hlbiB0aGUgaG9vayBpcyBpbmplY3RlZCBvbiB0aGUgcGFnZS5cbi8qIGVzbGludC1lbmFibGUgY2FtZWxjYXNlICovXG5pZiAodHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5pbmplY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdCh7XG4gICAgQ3VycmVudE93bmVyOiBSZWFjdEN1cnJlbnRPd25lcixcbiAgICBJbnN0YW5jZUhhbmRsZXM6IFJlYWN0SW5zdGFuY2VIYW5kbGVzLFxuICAgIE1vdW50OiBSZWFjdE1vdW50LFxuICAgIFJlY29uY2lsZXI6IFJlYWN0UmVjb25jaWxlcixcbiAgICBUZXh0Q29tcG9uZW50OiBSZWFjdERPTVRleHRDb21wb25lbnRcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG4gIGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgd2luZG93LnRvcCA9PT0gd2luZG93LnNlbGYpIHtcblxuICAgIC8vIEZpcnN0IGNoZWNrIGlmIGRldnRvb2xzIGlzIG5vdCBpbnN0YWxsZWRcbiAgICBpZiAodHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIElmIHdlJ3JlIGluIENocm9tZSBvciBGaXJlZm94LCBwcm92aWRlIGEgZG93bmxvYWQgbGluayBpZiBub3QgaW5zdGFsbGVkLlxuICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgPiAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0VkZ2UnKSA9PT0gLTEgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPiAtMSkge1xuICAgICAgICBjb25zb2xlLmRlYnVnKCdEb3dubG9hZCB0aGUgUmVhY3QgRGV2VG9vbHMgZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1kZXZ0b29scycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHdlJ3JlIGluIElFOCwgY2hlY2sgdG8gc2VlIGlmIHdlIGFyZSBpbiBjb21wYXRpYmlsaXR5IG1vZGUgYW5kIHByb3ZpZGVcbiAgICAvLyBpbmZvcm1hdGlvbiBvbiBwcmV2ZW50aW5nIGNvbXBhdGliaWxpdHkgbW9kZVxuICAgIHZhciBpZUNvbXBhdGliaWxpdHlNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSA8IDg7XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaWVDb21wYXRpYmlsaXR5TW9kZSwgJ0ludGVybmV0IEV4cGxvcmVyIGlzIHJ1bm5pbmcgaW4gY29tcGF0aWJpbGl0eSBtb2RlOyBwbGVhc2UgYWRkIHRoZSAnICsgJ2ZvbGxvd2luZyB0YWcgdG8geW91ciBIVE1MIHRvIHByZXZlbnQgdGhpcyBmcm9tIGhhcHBlbmluZzogJyArICc8bWV0YSBodHRwLWVxdWl2PVwiWC1VQS1Db21wYXRpYmxlXCIgY29udGVudD1cIklFPWVkZ2VcIiAvPicpIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGV4cGVjdGVkRmVhdHVyZXMgPSBbXG4gICAgLy8gc2hpbXNcbiAgICBBcnJheS5pc0FycmF5LCBBcnJheS5wcm90b3R5cGUuZXZlcnksIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiwgQXJyYXkucHJvdG90eXBlLm1hcCwgRGF0ZS5ub3csIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLCBPYmplY3Qua2V5cywgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgU3RyaW5nLnByb3RvdHlwZS50cmltLFxuXG4gICAgLy8gc2hhbXNcbiAgICBPYmplY3QuY3JlYXRlLCBPYmplY3QuZnJlZXplXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRGZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFleHBlY3RlZEZlYXR1cmVzW2ldKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ09uZSBvciBtb3JlIEVTNSBzaGltL3NoYW1zIGV4cGVjdGVkIGJ5IFJlYWN0IGFyZSBub3QgYXZhaWxhYmxlOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1wb2x5ZmlsbHMnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NQnV0dG9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbW91c2VMaXN0ZW5lck5hbWVzID0ge1xuICBvbkNsaWNrOiB0cnVlLFxuICBvbkRvdWJsZUNsaWNrOiB0cnVlLFxuICBvbk1vdXNlRG93bjogdHJ1ZSxcbiAgb25Nb3VzZU1vdmU6IHRydWUsXG4gIG9uTW91c2VVcDogdHJ1ZSxcblxuICBvbkNsaWNrQ2FwdHVyZTogdHJ1ZSxcbiAgb25Eb3VibGVDbGlja0NhcHR1cmU6IHRydWUsXG4gIG9uTW91c2VEb3duQ2FwdHVyZTogdHJ1ZSxcbiAgb25Nb3VzZU1vdmVDYXB0dXJlOiB0cnVlLFxuICBvbk1vdXNlVXBDYXB0dXJlOiB0cnVlXG59O1xuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8YnV0dG9uPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgZG9lcyBub3QgcmVjZWl2ZSBtb3VzZSBldmVudHNcbiAqIHdoZW4gYGRpc2FibGVkYCBpcyBzZXQuXG4gKi9cbnZhciBSZWFjdERPTUJ1dHRvbiA9IHtcbiAgZ2V0TmF0aXZlUHJvcHM6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcywgY29udGV4dCkge1xuICAgIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9XG5cbiAgICAvLyBDb3B5IHRoZSBwcm9wcywgZXhjZXB0IHRoZSBtb3VzZSBsaXN0ZW5lcnNcbiAgICB2YXIgbmF0aXZlUHJvcHMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICFtb3VzZUxpc3RlbmVyTmFtZXNba2V5XSkge1xuICAgICAgICBuYXRpdmVQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmF0aXZlUHJvcHM7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01CdXR0b247IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NQ29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbi8qIGdsb2JhbCBoYXNPd25Qcm9wZXJ0eTp0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEF1dG9Gb2N1c1V0aWxzID0gcmVxdWlyZSgnLi9BdXRvRm9jdXNVdGlscycpO1xudmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vQ1NTUHJvcGVydHlPcGVyYXRpb25zJyk7XG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMnKTtcbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlcicpO1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0RE9NQnV0dG9uID0gcmVxdWlyZSgnLi9SZWFjdERPTUJ1dHRvbicpO1xudmFyIFJlYWN0RE9NSW5wdXQgPSByZXF1aXJlKCcuL1JlYWN0RE9NSW5wdXQnKTtcbnZhciBSZWFjdERPTU9wdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RET01PcHRpb24nKTtcbnZhciBSZWFjdERPTVNlbGVjdCA9IHJlcXVpcmUoJy4vUmVhY3RET01TZWxlY3QnKTtcbnZhciBSZWFjdERPTVRleHRhcmVhID0gcmVxdWlyZSgnLi9SZWFjdERPTVRleHRhcmVhJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIFJlYWN0TXVsdGlDaGlsZCA9IHJlcXVpcmUoJy4vUmVhY3RNdWx0aUNoaWxkJyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZVF1ZXVlJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vY2FuRGVmaW5lUHJvcGVydHknKTtcbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKCcuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRTdXBwb3J0ZWQnKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU9mJyk7XG52YXIgc2V0SW5uZXJIVE1MID0gcmVxdWlyZSgnLi9zZXRJbm5lckhUTUwnKTtcbnZhciBzZXRUZXh0Q29udGVudCA9IHJlcXVpcmUoJy4vc2V0VGV4dENvbnRlbnQnKTtcbnZhciBzaGFsbG93RXF1YWwgPSByZXF1aXJlKCdmYmpzL2xpYi9zaGFsbG93RXF1YWwnKTtcbnZhciB2YWxpZGF0ZURPTU5lc3RpbmcgPSByZXF1aXJlKCcuL3ZhbGlkYXRlRE9NTmVzdGluZycpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBkZWxldGVMaXN0ZW5lciA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5kZWxldGVMaXN0ZW5lcjtcbnZhciBsaXN0ZW5UbyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5saXN0ZW5UbztcbnZhciByZWdpc3RyYXRpb25OYW1lTW9kdWxlcyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcztcblxuLy8gRm9yIHF1aWNrbHkgbWF0Y2hpbmcgY2hpbGRyZW4gdHlwZSwgdG8gdGVzdCBpZiBjYW4gYmUgdHJlYXRlZCBhcyBjb250ZW50LlxudmFyIENPTlRFTlRfVFlQRVMgPSB7ICdzdHJpbmcnOiB0cnVlLCAnbnVtYmVyJzogdHJ1ZSB9O1xuXG52YXIgQ0hJTERSRU4gPSBrZXlPZih7IGNoaWxkcmVuOiBudWxsIH0pO1xudmFyIFNUWUxFID0ga2V5T2YoeyBzdHlsZTogbnVsbCB9KTtcbnZhciBIVE1MID0ga2V5T2YoeyBfX2h0bWw6IG51bGwgfSk7XG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShpbnRlcm5hbEluc3RhbmNlKSB7XG4gIGlmIChpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgdmFyIG93bmVyID0gaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQuX293bmVyIHx8IG51bGw7XG4gICAgaWYgKG93bmVyKSB7XG4gICAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHJldHVybiAnIFRoaXMgRE9NIG5vZGUgd2FzIHJlbmRlcmVkIGJ5IGAnICsgbmFtZSArICdgLic7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxudmFyIGxlZ2FjeVByb3BzRGVzY3JpcHRvcjtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGxlZ2FjeVByb3BzRGVzY3JpcHRvciA9IHtcbiAgICBwcm9wczoge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IHRoaXMuX3JlYWN0SW50ZXJuYWxDb21wb25lbnQ7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnUmVhY3RET01Db21wb25lbnQ6IERvIG5vdCBhY2Nlc3MgLnByb3BzIG9mIGEgRE9NIG5vZGU7IGluc3RlYWQsICcgKyAncmVjcmVhdGUgdGhlIHByb3BzIGFzIGByZW5kZXJgIGRpZCBvcmlnaW5hbGx5IG9yIHJlYWQgdGhlIERPTSAnICsgJ3Byb3BlcnRpZXMvYXR0cmlidXRlcyBkaXJlY3RseSBmcm9tIHRoaXMgbm9kZSAoZS5nLiwgJyArICd0aGlzLnJlZnMuYm94LmNsYXNzTmFtZSkuJXMnLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbGVnYWN5R2V0RE9NTm9kZSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5fcmVhY3RJbnRlcm5hbENvbXBvbmVudDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0RE9NQ29tcG9uZW50OiBEbyBub3QgYWNjZXNzIC5nZXRET01Ob2RlKCkgb2YgYSBET00gbm9kZTsgJyArICdpbnN0ZWFkLCB1c2UgdGhlIG5vZGUgZGlyZWN0bHkuJXMnLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGxlZ2FjeUlzTW91bnRlZCgpIHtcbiAgdmFyIGNvbXBvbmVudCA9IHRoaXMuX3JlYWN0SW50ZXJuYWxDb21wb25lbnQ7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdSZWFjdERPTUNvbXBvbmVudDogRG8gbm90IGFjY2VzcyAuaXNNb3VudGVkKCkgb2YgYSBET00gbm9kZS4lcycsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShjb21wb25lbnQpKSA6IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gISFjb21wb25lbnQ7XG59XG5cbmZ1bmN0aW9uIGxlZ2FjeVNldFN0YXRlRXRjKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBjb21wb25lbnQgPSB0aGlzLl9yZWFjdEludGVybmFsQ29tcG9uZW50O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnUmVhY3RET01Db21wb25lbnQ6IERvIG5vdCBhY2Nlc3MgLnNldFN0YXRlKCksIC5yZXBsYWNlU3RhdGUoKSwgb3IgJyArICcuZm9yY2VVcGRhdGUoKSBvZiBhIERPTSBub2RlLiBUaGlzIGlzIGEgbm8tb3AuJXMnLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSkgOiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVnYWN5U2V0UHJvcHMocGFydGlhbFByb3BzLCBjYWxsYmFjaykge1xuICB2YXIgY29tcG9uZW50ID0gdGhpcy5fcmVhY3RJbnRlcm5hbENvbXBvbmVudDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0RE9NQ29tcG9uZW50OiBEbyBub3QgYWNjZXNzIC5zZXRQcm9wcygpIG9mIGEgRE9NIG5vZGUuICcgKyAnSW5zdGVhZCwgY2FsbCBSZWFjdERPTS5yZW5kZXIgYWdhaW4gYXQgdGhlIHRvcCBsZXZlbC4lcycsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShjb21wb25lbnQpKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoIWNvbXBvbmVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVTZXRQcm9wc0ludGVybmFsKGNvbXBvbmVudCwgcGFydGlhbFByb3BzKTtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlQ2FsbGJhY2tJbnRlcm5hbChjb21wb25lbnQsIGNhbGxiYWNrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWdhY3lSZXBsYWNlUHJvcHMocGFydGlhbFByb3BzLCBjYWxsYmFjaykge1xuICB2YXIgY29tcG9uZW50ID0gdGhpcy5fcmVhY3RJbnRlcm5hbENvbXBvbmVudDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0RE9NQ29tcG9uZW50OiBEbyBub3QgYWNjZXNzIC5yZXBsYWNlUHJvcHMoKSBvZiBhIERPTSBub2RlLiAnICsgJ0luc3RlYWQsIGNhbGwgUmVhY3RET00ucmVuZGVyIGFnYWluIGF0IHRoZSB0b3AgbGV2ZWwuJXMnLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKCFjb21wb25lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlUmVwbGFjZVByb3BzSW50ZXJuYWwoY29tcG9uZW50LCBwYXJ0aWFsUHJvcHMpO1xuICBpZiAoY2FsbGJhY2spIHtcbiAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFja0ludGVybmFsKGNvbXBvbmVudCwgY2FsbGJhY2spO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZyaWVuZGx5U3RyaW5naWZ5KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICByZXR1cm4gJ1snICsgb2JqLm1hcChmcmllbmRseVN0cmluZ2lmeSkuam9pbignLCAnKSArICddJztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhaXJzID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgdmFyIGtleUVzY2FwZWQgPSAvXlthLXokX11bXFx3JF9dKiQvaS50ZXN0KGtleSkgPyBrZXkgOiBKU09OLnN0cmluZ2lmeShrZXkpO1xuICAgICAgICAgIHBhaXJzLnB1c2goa2V5RXNjYXBlZCArICc6ICcgKyBmcmllbmRseVN0cmluZ2lmeShvYmpba2V5XSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gJ3snICsgcGFpcnMuam9pbignLCAnKSArICd9JztcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuICdbZnVuY3Rpb24gb2JqZWN0XSc7XG4gIH1cbiAgLy8gRGlmZmVycyBmcm9tIEpTT04uc3RyaW5naWZ5IGluIHRoYXQgdW5kZWZpbmVkIGJlY2F1c2VzIHVuZGVmaW5lZCBhbmQgdGhhdFxuICAvLyBpbmYgYW5kIG5hbiBkb24ndCBiZWNvbWUgbnVsbFxuICByZXR1cm4gU3RyaW5nKG9iaik7XG59XG5cbnZhciBzdHlsZU11dGF0aW9uV2FybmluZyA9IHt9O1xuXG5mdW5jdGlvbiBjaGVja0FuZFdhcm5Gb3JNdXRhdGVkU3R5bGUoc3R5bGUxLCBzdHlsZTIsIGNvbXBvbmVudCkge1xuICBpZiAoc3R5bGUxID09IG51bGwgfHwgc3R5bGUyID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHNoYWxsb3dFcXVhbChzdHlsZTEsIHN0eWxlMikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudC5fdGFnO1xuICB2YXIgb3duZXIgPSBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgdmFyIG93bmVyTmFtZTtcbiAgaWYgKG93bmVyKSB7XG4gICAgb3duZXJOYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICB9XG5cbiAgdmFyIGhhc2ggPSBvd25lck5hbWUgKyAnfCcgKyBjb21wb25lbnROYW1lO1xuXG4gIGlmIChzdHlsZU11dGF0aW9uV2FybmluZy5oYXNPd25Qcm9wZXJ0eShoYXNoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0eWxlTXV0YXRpb25XYXJuaW5nW2hhc2hdID0gdHJ1ZTtcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2Alc2Agd2FzIHBhc3NlZCBhIHN0eWxlIG9iamVjdCB0aGF0IGhhcyBwcmV2aW91c2x5IGJlZW4gbXV0YXRlZC4gJyArICdNdXRhdGluZyBgc3R5bGVgIGlzIGRlcHJlY2F0ZWQuIENvbnNpZGVyIGNsb25pbmcgaXQgYmVmb3JlaGFuZC4gQ2hlY2sgJyArICd0aGUgYHJlbmRlcmAgJXMuIFByZXZpb3VzIHN0eWxlOiAlcy4gTXV0YXRlZCBzdHlsZTogJXMuJywgY29tcG9uZW50TmFtZSwgb3duZXIgPyAnb2YgYCcgKyBvd25lck5hbWUgKyAnYCcgOiAndXNpbmcgPCcgKyBjb21wb25lbnROYW1lICsgJz4nLCBmcmllbmRseVN0cmluZ2lmeShzdHlsZTEpLCBmcmllbmRseVN0cmluZ2lmeShzdHlsZTIpKSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gY29tcG9uZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IHByb3BzXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFZhbGlkUHJvcHMoY29tcG9uZW50LCBwcm9wcykge1xuICBpZiAoIXByb3BzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIE5vdGUgdGhlIHVzZSBvZiBgPT1gIHdoaWNoIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWQuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHZvaWRFbGVtZW50VGFnc1tjb21wb25lbnQuX3RhZ10pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHByb3BzLmNoaWxkcmVuID09IG51bGwgJiYgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCwgJyVzIGlzIGEgdm9pZCBlbGVtZW50IHRhZyBhbmQgbXVzdCBub3QgaGF2ZSBgY2hpbGRyZW5gIG9yICcgKyAndXNlIGBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAuJXMnLCBjb21wb25lbnQuX3RhZywgY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXIgPyAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICcgKyBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lci5nZXROYW1lKCkgKyAnLicgOiAnJykgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIGlmIChwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAhPSBudWxsKSB7XG4gICAgIShwcm9wcy5jaGlsZHJlbiA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW4gb25seSBzZXQgb25lIG9mIGBjaGlsZHJlbmAgb3IgYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgISh0eXBlb2YgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT09ICdvYmplY3QnICYmIEhUTUwgaW4gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Bwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAgbXVzdCBiZSBpbiB0aGUgZm9ybSBge19faHRtbDogLi4ufWAuICcgKyAnUGxlYXNlIHZpc2l0IGh0dHBzOi8vZmIubWUvcmVhY3QtaW52YXJpYW50LWRhbmdlcm91c2x5LXNldC1pbm5lci1odG1sICcgKyAnZm9yIG1vcmUgaW5mb3JtYXRpb24uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocHJvcHMuaW5uZXJIVE1MID09IG51bGwsICdEaXJlY3RseSBzZXR0aW5nIHByb3BlcnR5IGBpbm5lckhUTUxgIGlzIG5vdCBwZXJtaXR0ZWQuICcgKyAnRm9yIG1vcmUgaW5mb3JtYXRpb24sIGxvb2t1cCBkb2N1bWVudGF0aW9uIG9uIGBkYW5nZXJvdXNseVNldElubmVySFRNTGAuJykgOiB1bmRlZmluZWQ7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIXByb3BzLmNvbnRlbnRFZGl0YWJsZSB8fCBwcm9wcy5jaGlsZHJlbiA9PSBudWxsLCAnQSBjb21wb25lbnQgaXMgYGNvbnRlbnRFZGl0YWJsZWAgYW5kIGNvbnRhaW5zIGBjaGlsZHJlbmAgbWFuYWdlZCBieSAnICsgJ1JlYWN0LiBJdCBpcyBub3cgeW91ciByZXNwb25zaWJpbGl0eSB0byBndWFyYW50ZWUgdGhhdCBub25lIG9mICcgKyAndGhvc2Ugbm9kZXMgYXJlIHVuZXhwZWN0ZWRseSBtb2RpZmllZCBvciBkdXBsaWNhdGVkLiBUaGlzIGlzICcgKyAncHJvYmFibHkgbm90IGludGVudGlvbmFsLicpIDogdW5kZWZpbmVkO1xuICB9XG4gICEocHJvcHMuc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2YgcHJvcHMuc3R5bGUgPT09ICdvYmplY3QnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUaGUgYHN0eWxlYCBwcm9wIGV4cGVjdHMgYSBtYXBwaW5nIGZyb20gc3R5bGUgcHJvcGVydGllcyB0byB2YWx1ZXMsICcgKyAnbm90IGEgc3RyaW5nLiBGb3IgZXhhbXBsZSwgc3R5bGU9e3ttYXJnaW5SaWdodDogc3BhY2luZyArIFxcJ2VtXFwnfX0gd2hlbiAnICsgJ3VzaW5nIEpTWC4lcycsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShjb21wb25lbnQpKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGVucXVldWVQdXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIsIHRyYW5zYWN0aW9uKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gSUU4IGhhcyBubyBBUEkgZm9yIGV2ZW50IGNhcHR1cmluZyBhbmQgdGhlIGBvblNjcm9sbGAgZXZlbnQgZG9lc24ndFxuICAgIC8vIGJ1YmJsZS5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhyZWdpc3RyYXRpb25OYW1lICE9PSAnb25TY3JvbGwnIHx8IGlzRXZlbnRTdXBwb3J0ZWQoJ3Njcm9sbCcsIHRydWUpLCAnVGhpcyBicm93c2VyIGRvZXNuXFwndCBzdXBwb3J0IHRoZSBgb25TY3JvbGxgIGV2ZW50JykgOiB1bmRlZmluZWQ7XG4gIH1cbiAgdmFyIGNvbnRhaW5lciA9IFJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQoaWQpO1xuICBpZiAoY29udGFpbmVyKSB7XG4gICAgdmFyIGRvYyA9IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgPyBjb250YWluZXIub3duZXJEb2N1bWVudCA6IGNvbnRhaW5lcjtcbiAgICBsaXN0ZW5UbyhyZWdpc3RyYXRpb25OYW1lLCBkb2MpO1xuICB9XG4gIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUocHV0TGlzdGVuZXIsIHtcbiAgICBpZDogaWQsXG4gICAgcmVnaXN0cmF0aW9uTmFtZTogcmVnaXN0cmF0aW9uTmFtZSxcbiAgICBsaXN0ZW5lcjogbGlzdGVuZXJcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHB1dExpc3RlbmVyKCkge1xuICB2YXIgbGlzdGVuZXJUb1B1dCA9IHRoaXM7XG4gIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5wdXRMaXN0ZW5lcihsaXN0ZW5lclRvUHV0LmlkLCBsaXN0ZW5lclRvUHV0LnJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyVG9QdXQubGlzdGVuZXIpO1xufVxuXG4vLyBUaGVyZSBhcmUgc28gbWFueSBtZWRpYSBldmVudHMsIGl0IG1ha2VzIHNlbnNlIHRvIGp1c3Rcbi8vIG1haW50YWluIGEgbGlzdCByYXRoZXIgdGhhbiBjcmVhdGUgYSBgdHJhcEJ1YmJsZWRFdmVudGAgZm9yIGVhY2hcbnZhciBtZWRpYUV2ZW50cyA9IHtcbiAgdG9wQWJvcnQ6ICdhYm9ydCcsXG4gIHRvcENhblBsYXk6ICdjYW5wbGF5JyxcbiAgdG9wQ2FuUGxheVRocm91Z2g6ICdjYW5wbGF5dGhyb3VnaCcsXG4gIHRvcER1cmF0aW9uQ2hhbmdlOiAnZHVyYXRpb25jaGFuZ2UnLFxuICB0b3BFbXB0aWVkOiAnZW1wdGllZCcsXG4gIHRvcEVuY3J5cHRlZDogJ2VuY3J5cHRlZCcsXG4gIHRvcEVuZGVkOiAnZW5kZWQnLFxuICB0b3BFcnJvcjogJ2Vycm9yJyxcbiAgdG9wTG9hZGVkRGF0YTogJ2xvYWRlZGRhdGEnLFxuICB0b3BMb2FkZWRNZXRhZGF0YTogJ2xvYWRlZG1ldGFkYXRhJyxcbiAgdG9wTG9hZFN0YXJ0OiAnbG9hZHN0YXJ0JyxcbiAgdG9wUGF1c2U6ICdwYXVzZScsXG4gIHRvcFBsYXk6ICdwbGF5JyxcbiAgdG9wUGxheWluZzogJ3BsYXlpbmcnLFxuICB0b3BQcm9ncmVzczogJ3Byb2dyZXNzJyxcbiAgdG9wUmF0ZUNoYW5nZTogJ3JhdGVjaGFuZ2UnLFxuICB0b3BTZWVrZWQ6ICdzZWVrZWQnLFxuICB0b3BTZWVraW5nOiAnc2Vla2luZycsXG4gIHRvcFN0YWxsZWQ6ICdzdGFsbGVkJyxcbiAgdG9wU3VzcGVuZDogJ3N1c3BlbmQnLFxuICB0b3BUaW1lVXBkYXRlOiAndGltZXVwZGF0ZScsXG4gIHRvcFZvbHVtZUNoYW5nZTogJ3ZvbHVtZWNoYW5nZScsXG4gIHRvcFdhaXRpbmc6ICd3YWl0aW5nJ1xufTtcblxuZnVuY3Rpb24gdHJhcEJ1YmJsZWRFdmVudHNMb2NhbCgpIHtcbiAgdmFyIGluc3QgPSB0aGlzO1xuICAvLyBJZiBhIGNvbXBvbmVudCByZW5kZXJzIHRvIG51bGwgb3IgaWYgYW5vdGhlciBjb21wb25lbnQgZmF0YWxzIGFuZCBjYXVzZXNcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSB0cmVlIHRvIGJlIGNvcnJ1cHRlZCwgYG5vZGVgIGhlcmUgY2FuIGJlIG51bGwuXG4gICFpbnN0Ll9yb290Tm9kZUlEID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ011c3QgYmUgbW91bnRlZCB0byB0cmFwIGV2ZW50cycpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaW5zdC5fcm9vdE5vZGVJRCk7XG4gICFub2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RyYXBCdWJibGVkRXZlbnQoLi4uKTogUmVxdWlyZXMgbm9kZSB0byBiZSByZW5kZXJlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgc3dpdGNoIChpbnN0Ll90YWcpIHtcbiAgICBjYXNlICdpZnJhbWUnOlxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcExvYWQsICdsb2FkJywgbm9kZSldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndmlkZW8nOlxuICAgIGNhc2UgJ2F1ZGlvJzpcblxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtdO1xuICAgICAgLy8gY3JlYXRlIGxpc3RlbmVyIGZvciBlYWNoIG1lZGlhIGV2ZW50XG4gICAgICBmb3IgKHZhciBldmVudCBpbiBtZWRpYUV2ZW50cykge1xuICAgICAgICBpZiAobWVkaWFFdmVudHMuaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7XG4gICAgICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycy5wdXNoKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXNbZXZlbnRdLCBtZWRpYUV2ZW50c1tldmVudF0sIG5vZGUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICBjYXNlICdpbWcnOlxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcEVycm9yLCAnZXJyb3InLCBub2RlKSwgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BMb2FkLCAnbG9hZCcsIG5vZGUpXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcFJlc2V0LCAncmVzZXQnLCBub2RlKSwgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BTdWJtaXQsICdzdWJtaXQnLCBub2RlKV07XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBtb3VudFJlYWR5SW5wdXRXcmFwcGVyKCkge1xuICBSZWFjdERPTUlucHV0Lm1vdW50UmVhZHlXcmFwcGVyKHRoaXMpO1xufVxuXG5mdW5jdGlvbiBwb3N0VXBkYXRlU2VsZWN0V3JhcHBlcigpIHtcbiAgUmVhY3RET01TZWxlY3QucG9zdFVwZGF0ZVdyYXBwZXIodGhpcyk7XG59XG5cbi8vIEZvciBIVE1MLCBjZXJ0YWluIHRhZ3Mgc2hvdWxkIG9taXQgdGhlaXIgY2xvc2UgdGFnLiBXZSBrZWVwIGEgd2hpdGVsaXN0IGZvclxuLy8gdGhvc2Ugc3BlY2lhbCBjYXNlZCB0YWdzLlxuXG52YXIgb21pdHRlZENsb3NlVGFncyA9IHtcbiAgJ2FyZWEnOiB0cnVlLFxuICAnYmFzZSc6IHRydWUsXG4gICdicic6IHRydWUsXG4gICdjb2wnOiB0cnVlLFxuICAnZW1iZWQnOiB0cnVlLFxuICAnaHInOiB0cnVlLFxuICAnaW1nJzogdHJ1ZSxcbiAgJ2lucHV0JzogdHJ1ZSxcbiAgJ2tleWdlbic6IHRydWUsXG4gICdsaW5rJzogdHJ1ZSxcbiAgJ21ldGEnOiB0cnVlLFxuICAncGFyYW0nOiB0cnVlLFxuICAnc291cmNlJzogdHJ1ZSxcbiAgJ3RyYWNrJzogdHJ1ZSxcbiAgJ3dicic6IHRydWVcbn07XG5cbi8vIE5PVEU6IG1lbnVpdGVtJ3MgY2xvc2UgdGFnIHNob3VsZCBiZSBvbWl0dGVkLCBidXQgdGhhdCBjYXVzZXMgcHJvYmxlbXMuXG52YXIgbmV3bGluZUVhdGluZ1RhZ3MgPSB7XG4gICdsaXN0aW5nJzogdHJ1ZSxcbiAgJ3ByZSc6IHRydWUsXG4gICd0ZXh0YXJlYSc6IHRydWVcbn07XG5cbi8vIEZvciBIVE1MLCBjZXJ0YWluIHRhZ3MgY2Fubm90IGhhdmUgY2hpbGRyZW4uIFRoaXMgaGFzIHRoZSBzYW1lIHB1cnBvc2UgYXNcbi8vIGBvbWl0dGVkQ2xvc2VUYWdzYCBleGNlcHQgdGhhdCBgbWVudWl0ZW1gIHNob3VsZCBzdGlsbCBoYXZlIGl0cyBjbG9zaW5nIHRhZy5cblxudmFyIHZvaWRFbGVtZW50VGFncyA9IGFzc2lnbih7XG4gICdtZW51aXRlbSc6IHRydWVcbn0sIG9taXR0ZWRDbG9zZVRhZ3MpO1xuXG4vLyBXZSBhY2NlcHQgYW55IHRhZyB0byBiZSByZW5kZXJlZCBidXQgc2luY2UgdGhpcyBnZXRzIGluamVjdGVkIGludG8gYXJiaXRyYXJ5XG4vLyBIVE1MLCB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IGl0J3MgYSBzYWZlIHRhZy5cbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy14bWwvI05ULU5hbWVcblxudmFyIFZBTElEX1RBR19SRUdFWCA9IC9eW2EtekEtWl1bYS16QS1aOl9cXC5cXC1cXGRdKiQvOyAvLyBTaW1wbGlmaWVkIHN1YnNldFxudmFyIHZhbGlkYXRlZFRhZ0NhY2hlID0ge307XG52YXIgaGFzT3duUHJvcGVydHkgPSAoe30pLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiB2YWxpZGF0ZURhbmdlcm91c1RhZyh0YWcpIHtcbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbGlkYXRlZFRhZ0NhY2hlLCB0YWcpKSB7XG4gICAgIVZBTElEX1RBR19SRUdFWC50ZXN0KHRhZykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnSW52YWxpZCB0YWc6ICVzJywgdGFnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgdmFsaWRhdGVkVGFnQ2FjaGVbdGFnXSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0NoaWxkQ29udGV4dERldihjb250ZXh0LCBpbnN0KSB7XG4gIC8vIFBhc3MgZG93biBvdXIgdGFnIG5hbWUgdG8gY2hpbGQgY29tcG9uZW50cyBmb3IgdmFsaWRhdGlvbiBwdXJwb3Nlc1xuICBjb250ZXh0ID0gYXNzaWduKHt9LCBjb250ZXh0KTtcbiAgdmFyIGluZm8gPSBjb250ZXh0W3ZhbGlkYXRlRE9NTmVzdGluZy5hbmNlc3RvckluZm9Db250ZXh0S2V5XTtcbiAgY29udGV4dFt2YWxpZGF0ZURPTU5lc3RpbmcuYW5jZXN0b3JJbmZvQ29udGV4dEtleV0gPSB2YWxpZGF0ZURPTU5lc3RpbmcudXBkYXRlZEFuY2VzdG9ySW5mbyhpbmZvLCBpbnN0Ll90YWcsIGluc3QpO1xuICByZXR1cm4gY29udGV4dDtcbn1cblxuZnVuY3Rpb24gaXNDdXN0b21Db21wb25lbnQodGFnTmFtZSwgcHJvcHMpIHtcbiAgcmV0dXJuIHRhZ05hbWUuaW5kZXhPZignLScpID49IDAgfHwgcHJvcHMuaXMgIT0gbnVsbDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFJlYWN0IGNsYXNzIHRoYXQgaXMgaWRlbXBvdGVudCBhbmQgY2FwYWJsZSBvZiBjb250YWluaW5nIG90aGVyXG4gKiBSZWFjdCBjb21wb25lbnRzLiBJdCBhY2NlcHRzIGV2ZW50IGxpc3RlbmVycyBhbmQgRE9NIHByb3BlcnRpZXMgdGhhdCBhcmVcbiAqIHZhbGlkIGFjY29yZGluZyB0byBgRE9NUHJvcGVydHlgLlxuICpcbiAqICAtIEV2ZW50IGxpc3RlbmVyczogYG9uQ2xpY2tgLCBgb25Nb3VzZURvd25gLCBldGMuXG4gKiAgLSBET00gcHJvcGVydGllczogYGNsYXNzTmFtZWAsIGBuYW1lYCwgYHRpdGxlYCwgZXRjLlxuICpcbiAqIFRoZSBgc3R5bGVgIHByb3BlcnR5IGZ1bmN0aW9ucyBkaWZmZXJlbnRseSBmcm9tIHRoZSBET00gQVBJLiBJdCBhY2NlcHRzIGFuXG4gKiBvYmplY3QgbWFwcGluZyBvZiBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgUmVhY3RET01Db21wb25lbnRcbiAqIEBleHRlbmRzIFJlYWN0TXVsdGlDaGlsZFxuICovXG5mdW5jdGlvbiBSZWFjdERPTUNvbXBvbmVudCh0YWcpIHtcbiAgdmFsaWRhdGVEYW5nZXJvdXNUYWcodGFnKTtcbiAgdGhpcy5fdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLl9wcmV2aW91c1N0eWxlID0gbnVsbDtcbiAgdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBudWxsO1xuICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgdGhpcy5fd3JhcHBlclN0YXRlID0gbnVsbDtcbiAgdGhpcy5fdG9wTGV2ZWxXcmFwcGVyID0gbnVsbDtcbiAgdGhpcy5fbm9kZVdpdGhMZWdhY3lQcm9wZXJ0aWVzID0gbnVsbDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB0aGlzLl91bnByb2Nlc3NlZENvbnRleHREZXYgPSBudWxsO1xuICAgIHRoaXMuX3Byb2Nlc3NlZENvbnRleHREZXYgPSBudWxsO1xuICB9XG59XG5cblJlYWN0RE9NQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ1JlYWN0RE9NQ29tcG9uZW50JztcblxuUmVhY3RET01Db21wb25lbnQuTWl4aW4gPSB7XG5cbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcbiAgfSxcblxuICAvKipcbiAgICogR2VuZXJhdGVzIHJvb3QgdGFnIG1hcmt1cCB0aGVuIHJlY3Vyc2VzLiBUaGlzIG1ldGhvZCBoYXMgc2lkZSBlZmZlY3RzIGFuZFxuICAgKiBpcyBub3QgaWRlbXBvdGVudC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgVGhlIHJvb3QgRE9NIElEIGZvciB0aGlzIG5vZGUuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb21wdXRlZCBtYXJrdXAuXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24gKHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gcm9vdElEO1xuXG4gICAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgY2FzZSAnaWZyYW1lJzpcbiAgICAgIGNhc2UgJ2ltZyc6XG4gICAgICBjYXNlICdmb3JtJzpcbiAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgdGhpcy5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgICAgIGxpc3RlbmVyczogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRyYXBCdWJibGVkRXZlbnRzTG9jYWwsIHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICAgIHByb3BzID0gUmVhY3RET01CdXR0b24uZ2V0TmF0aXZlUHJvcHModGhpcywgcHJvcHMsIGNvbnRleHQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgUmVhY3RET01JbnB1dC5tb3VudFdyYXBwZXIodGhpcywgcHJvcHMsIGNvbnRleHQpO1xuICAgICAgICBwcm9wcyA9IFJlYWN0RE9NSW5wdXQuZ2V0TmF0aXZlUHJvcHModGhpcywgcHJvcHMsIGNvbnRleHQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgIFJlYWN0RE9NT3B0aW9uLm1vdW50V3JhcHBlcih0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIHByb3BzID0gUmVhY3RET01PcHRpb24uZ2V0TmF0aXZlUHJvcHModGhpcywgcHJvcHMsIGNvbnRleHQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIFJlYWN0RE9NU2VsZWN0Lm1vdW50V3JhcHBlcih0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIHByb3BzID0gUmVhY3RET01TZWxlY3QuZ2V0TmF0aXZlUHJvcHModGhpcywgcHJvcHMsIGNvbnRleHQpO1xuICAgICAgICBjb250ZXh0ID0gUmVhY3RET01TZWxlY3QucHJvY2Vzc0NoaWxkQ29udGV4dCh0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICBSZWFjdERPTVRleHRhcmVhLm1vdW50V3JhcHBlcih0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIHByb3BzID0gUmVhY3RET01UZXh0YXJlYS5nZXROYXRpdmVQcm9wcyh0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGFzc2VydFZhbGlkUHJvcHModGhpcywgcHJvcHMpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY29udGV4dFt2YWxpZGF0ZURPTU5lc3RpbmcuYW5jZXN0b3JJbmZvQ29udGV4dEtleV0pIHtcbiAgICAgICAgdmFsaWRhdGVET01OZXN0aW5nKHRoaXMuX3RhZywgdGhpcywgY29udGV4dFt2YWxpZGF0ZURPTU5lc3RpbmcuYW5jZXN0b3JJbmZvQ29udGV4dEtleV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aGlzLl91bnByb2Nlc3NlZENvbnRleHREZXYgPSBjb250ZXh0O1xuICAgICAgdGhpcy5fcHJvY2Vzc2VkQ29udGV4dERldiA9IHByb2Nlc3NDaGlsZENvbnRleHREZXYoY29udGV4dCwgdGhpcyk7XG4gICAgICBjb250ZXh0ID0gdGhpcy5fcHJvY2Vzc2VkQ29udGV4dERldjtcbiAgICB9XG5cbiAgICB2YXIgbW91bnRJbWFnZTtcbiAgICBpZiAodHJhbnNhY3Rpb24udXNlQ3JlYXRlRWxlbWVudCkge1xuICAgICAgdmFyIG93bmVyRG9jdW1lbnQgPSBjb250ZXh0W1JlYWN0TW91bnQub3duZXJEb2N1bWVudENvbnRleHRLZXldO1xuICAgICAgdmFyIGVsID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUpO1xuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldEF0dHJpYnV0ZUZvcklEKGVsLCB0aGlzLl9yb290Tm9kZUlEKTtcbiAgICAgIC8vIFBvcHVsYXRlIG5vZGUgY2FjaGVcbiAgICAgIFJlYWN0TW91bnQuZ2V0SUQoZWwpO1xuICAgICAgdGhpcy5fdXBkYXRlRE9NUHJvcGVydGllcyh7fSwgcHJvcHMsIHRyYW5zYWN0aW9uLCBlbCk7XG4gICAgICB0aGlzLl9jcmVhdGVJbml0aWFsQ2hpbGRyZW4odHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0LCBlbCk7XG4gICAgICBtb3VudEltYWdlID0gZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0YWdPcGVuID0gdGhpcy5fY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVycyh0cmFuc2FjdGlvbiwgcHJvcHMpO1xuICAgICAgdmFyIHRhZ0NvbnRlbnQgPSB0aGlzLl9jcmVhdGVDb250ZW50TWFya3VwKHRyYW5zYWN0aW9uLCBwcm9wcywgY29udGV4dCk7XG4gICAgICBpZiAoIXRhZ0NvbnRlbnQgJiYgb21pdHRlZENsb3NlVGFnc1t0aGlzLl90YWddKSB7XG4gICAgICAgIG1vdW50SW1hZ2UgPSB0YWdPcGVuICsgJy8+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vdW50SW1hZ2UgPSB0YWdPcGVuICsgJz4nICsgdGFnQ29udGVudCArICc8LycgKyB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlICsgJz4nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUobW91bnRSZWFkeUlucHV0V3JhcHBlciwgdGhpcyk7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlICdidXR0b24nOlxuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgaWYgKHByb3BzLmF1dG9Gb2N1cykge1xuICAgICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoQXV0b0ZvY3VzVXRpbHMuZm9jdXNET01Db21wb25lbnQsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBtb3VudEltYWdlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIG9wZW4gdGFnIGFuZCBhbGwgYXR0cmlidXRlcy5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaGFzIHNpZGUgZWZmZWN0cyBiZWNhdXNlIGV2ZW50cyBnZXQgcmVnaXN0ZXJlZC5cbiAgICpcbiAgICogSXRlcmF0aW5nIG92ZXIgb2JqZWN0IHByb3BlcnRpZXMgaXMgZmFzdGVyIHRoYW4gaXRlcmF0aW5nIG92ZXIgYXJyYXlzLlxuICAgKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL29iai12cy1hcnItaXRlcmF0aW9uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgb2Ygb3BlbmluZyB0YWcuXG4gICAqL1xuICBfY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVyczogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBwcm9wcykge1xuICAgIHZhciByZXQgPSAnPCcgKyB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuXG4gICAgZm9yICh2YXIgcHJvcEtleSBpbiBwcm9wcykge1xuICAgICAgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wS2V5XTtcbiAgICAgIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBpZiAocHJvcFZhbHVlKSB7XG4gICAgICAgICAgZW5xdWV1ZVB1dExpc3RlbmVyKHRoaXMuX3Jvb3ROb2RlSUQsIHByb3BLZXksIHByb3BWYWx1ZSwgdHJhbnNhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgICBpZiAocHJvcFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAvLyBTZWUgYF91cGRhdGVET01Qcm9wZXJ0aWVzYC4gc3R5bGUgYmxvY2tcbiAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZSA9IHByb3BWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb3BWYWx1ZSA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gYXNzaWduKHt9LCBwcm9wcy5zdHlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb3BWYWx1ZSA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JTdHlsZXMocHJvcFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWFya3VwID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuX3RhZyAhPSBudWxsICYmIGlzQ3VzdG9tQ29tcG9uZW50KHRoaXMuX3RhZywgcHJvcHMpKSB7XG4gICAgICAgICAgaWYgKHByb3BLZXkgIT09IENISUxEUkVOKSB7XG4gICAgICAgICAgICBtYXJrdXAgPSBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yQ3VzdG9tQXR0cmlidXRlKHByb3BLZXksIHByb3BWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hcmt1cCA9IERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eShwcm9wS2V5LCBwcm9wVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXJrdXApIHtcbiAgICAgICAgICByZXQgKz0gJyAnICsgbWFya3VwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRm9yIHN0YXRpYyBwYWdlcywgbm8gbmVlZCB0byBwdXQgUmVhY3QgSUQgYW5kIGNoZWNrc3VtLiBTYXZlcyBsb3RzIG9mXG4gICAgLy8gYnl0ZXMuXG4gICAgaWYgKHRyYW5zYWN0aW9uLnJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHZhciBtYXJrdXBGb3JJRCA9IERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JJRCh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICByZXR1cm4gcmV0ICsgJyAnICsgbWFya3VwRm9ySUQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbWFya3VwIGZvciB0aGUgY29udGVudCBiZXR3ZWVuIHRoZSB0YWdzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4ge3N0cmluZ30gQ29udGVudCBtYXJrdXAuXG4gICAqL1xuICBfY3JlYXRlQ29udGVudE1hcmt1cDogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBwcm9wcywgY29udGV4dCkge1xuICAgIHZhciByZXQgPSAnJztcblxuICAgIC8vIEludGVudGlvbmFsIHVzZSBvZiAhPSB0byBhdm9pZCBjYXRjaGluZyB6ZXJvL2ZhbHNlLlxuICAgIHZhciBpbm5lckhUTUwgPSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTDtcbiAgICBpZiAoaW5uZXJIVE1MICE9IG51bGwpIHtcbiAgICAgIGlmIChpbm5lckhUTUwuX19odG1sICE9IG51bGwpIHtcbiAgICAgICAgcmV0ID0gaW5uZXJIVE1MLl9faHRtbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNvbnRlbnRUb1VzZSA9IENPTlRFTlRfVFlQRVNbdHlwZW9mIHByb3BzLmNoaWxkcmVuXSA/IHByb3BzLmNoaWxkcmVuIDogbnVsbDtcbiAgICAgIHZhciBjaGlsZHJlblRvVXNlID0gY29udGVudFRvVXNlICE9IG51bGwgPyBudWxsIDogcHJvcHMuY2hpbGRyZW47XG4gICAgICBpZiAoY29udGVudFRvVXNlICE9IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETzogVmFsaWRhdGUgdGhhdCB0ZXh0IGlzIGFsbG93ZWQgYXMgYSBjaGlsZCBvZiB0aGlzIG5vZGVcbiAgICAgICAgcmV0ID0gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKGNvbnRlbnRUb1VzZSk7XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkcmVuVG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICB2YXIgbW91bnRJbWFnZXMgPSB0aGlzLm1vdW50Q2hpbGRyZW4oY2hpbGRyZW5Ub1VzZSwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICByZXQgPSBtb3VudEltYWdlcy5qb2luKCcnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5ld2xpbmVFYXRpbmdUYWdzW3RoaXMuX3RhZ10gJiYgcmV0LmNoYXJBdCgwKSA9PT0gJ1xcbicpIHtcbiAgICAgIC8vIHRleHQvaHRtbCBpZ25vcmVzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaW4gdGhlc2UgdGFncyBpZiBpdCdzIGEgbmV3bGluZVxuICAgICAgLy8gUHJlZmVyIHRvIGJyZWFrIGFwcGxpY2F0aW9uL3htbCBvdmVyIHRleHQvaHRtbCAoZm9yIG5vdykgYnkgYWRkaW5nXG4gICAgICAvLyBhIG5ld2xpbmUgc3BlY2lmaWNhbGx5IHRvIGdldCBlYXRlbiBieSB0aGUgcGFyc2VyLiAoQWx0ZXJuYXRlbHkgZm9yXG4gICAgICAvLyB0ZXh0YXJlYXMsIHJlcGxhY2luZyBcIl5cXG5cIiB3aXRoIFwiXFxyXFxuXCIgZG9lc24ndCBnZXQgZWF0ZW4sIGFuZCB0aGUgZmlyc3RcbiAgICAgIC8vIFxcciBpcyBub3JtYWxpemVkIG91dCBieSBIVE1MVGV4dEFyZWFFbGVtZW50I3ZhbHVlLilcbiAgICAgIC8vIFNlZTogPGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWwtcG9seWdsb3QvI25ld2xpbmVzLWluLXRleHRhcmVhLWFuZC1wcmU+XG4gICAgICAvLyBTZWU6IDxodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9zeW50YXguaHRtbCNlbGVtZW50LXJlc3RyaWN0aW9ucz5cbiAgICAgIC8vIFNlZTogPGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI25ld2xpbmVzPlxuICAgICAgLy8gU2VlOiBQYXJzaW5nIG9mIFwidGV4dGFyZWFcIiBcImxpc3RpbmdcIiBhbmQgXCJwcmVcIiBlbGVtZW50c1xuICAgICAgLy8gIGZyb20gPGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmJvZHk+XG4gICAgICByZXR1cm4gJ1xcbicgKyByZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICB9LFxuXG4gIF9jcmVhdGVJbml0aWFsQ2hpbGRyZW46IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgcHJvcHMsIGNvbnRleHQsIGVsKSB7XG4gICAgLy8gSW50ZW50aW9uYWwgdXNlIG9mICE9IHRvIGF2b2lkIGNhdGNoaW5nIHplcm8vZmFsc2UuXG4gICAgdmFyIGlubmVySFRNTCA9IHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO1xuICAgIGlmIChpbm5lckhUTUwgIT0gbnVsbCkge1xuICAgICAgaWYgKGlubmVySFRNTC5fX2h0bWwgIT0gbnVsbCkge1xuICAgICAgICBzZXRJbm5lckhUTUwoZWwsIGlubmVySFRNTC5fX2h0bWwpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY29udGVudFRvVXNlID0gQ09OVEVOVF9UWVBFU1t0eXBlb2YgcHJvcHMuY2hpbGRyZW5dID8gcHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgICAgdmFyIGNoaWxkcmVuVG9Vc2UgPSBjb250ZW50VG9Vc2UgIT0gbnVsbCA/IG51bGwgOiBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIGlmIChjb250ZW50VG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICAvLyBUT0RPOiBWYWxpZGF0ZSB0aGF0IHRleHQgaXMgYWxsb3dlZCBhcyBhIGNoaWxkIG9mIHRoaXMgbm9kZVxuICAgICAgICBzZXRUZXh0Q29udGVudChlbCwgY29udGVudFRvVXNlKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGRyZW5Ub1VzZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBtb3VudEltYWdlcyA9IHRoaXMubW91bnRDaGlsZHJlbihjaGlsZHJlblRvVXNlLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbW91bnRJbWFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBlbC5hcHBlbmRDaGlsZChtb3VudEltYWdlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlY2VpdmVzIGEgbmV4dCBlbGVtZW50IGFuZCB1cGRhdGVzIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnRcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqL1xuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIHByZXZFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0RWxlbWVudDtcbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQsIG5leHRFbGVtZW50LCBjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIG5hdGl2ZSBET00gY29tcG9uZW50IGFmdGVyIGl0IGhhcyBhbHJlYWR5IGJlZW4gYWxsb2NhdGVkIGFuZFxuICAgKiBhdHRhY2hlZCB0byB0aGUgRE9NLiBSZWNvbmNpbGVzIHRoZSByb290IERPTSBub2RlLCB0aGVuIHJlY3Vyc2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBwcmV2RWxlbWVudFxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnRcbiAgICogQGludGVybmFsXG4gICAqIEBvdmVycmlkYWJsZVxuICAgKi9cbiAgdXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCwgY29udGV4dCkge1xuICAgIHZhciBsYXN0UHJvcHMgPSBwcmV2RWxlbWVudC5wcm9wcztcbiAgICB2YXIgbmV4dFByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgY2FzZSAnYnV0dG9uJzpcbiAgICAgICAgbGFzdFByb3BzID0gUmVhY3RET01CdXR0b24uZ2V0TmF0aXZlUHJvcHModGhpcywgbGFzdFByb3BzKTtcbiAgICAgICAgbmV4dFByb3BzID0gUmVhY3RET01CdXR0b24uZ2V0TmF0aXZlUHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIFJlYWN0RE9NSW5wdXQudXBkYXRlV3JhcHBlcih0aGlzKTtcbiAgICAgICAgbGFzdFByb3BzID0gUmVhY3RET01JbnB1dC5nZXROYXRpdmVQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTUlucHV0LmdldE5hdGl2ZVByb3BzKHRoaXMsIG5leHRQcm9wcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgICAgbGFzdFByb3BzID0gUmVhY3RET01PcHRpb24uZ2V0TmF0aXZlUHJvcHModGhpcywgbGFzdFByb3BzKTtcbiAgICAgICAgbmV4dFByb3BzID0gUmVhY3RET01PcHRpb24uZ2V0TmF0aXZlUHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICBsYXN0UHJvcHMgPSBSZWFjdERPTVNlbGVjdC5nZXROYXRpdmVQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTVNlbGVjdC5nZXROYXRpdmVQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgUmVhY3RET01UZXh0YXJlYS51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICAgICAgICBsYXN0UHJvcHMgPSBSZWFjdERPTVRleHRhcmVhLmdldE5hdGl2ZVByb3BzKHRoaXMsIGxhc3RQcm9wcyk7XG4gICAgICAgIG5leHRQcm9wcyA9IFJlYWN0RE9NVGV4dGFyZWEuZ2V0TmF0aXZlUHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIElmIHRoZSBjb250ZXh0IGlzIHJlZmVyZW5jZS1lcXVhbCB0byB0aGUgb2xkIG9uZSwgcGFzcyBkb3duIHRoZSBzYW1lXG4gICAgICAvLyBwcm9jZXNzZWQgb2JqZWN0IHNvIHRoZSB1cGRhdGUgYmFpbG91dCBpbiBSZWFjdFJlY29uY2lsZXIgYmVoYXZlc1xuICAgICAgLy8gY29ycmVjdGx5IChhbmQgaWRlbnRpY2FsbHkgaW4gZGV2IGFuZCBwcm9kKS4gU2VlICM1MDA1LlxuICAgICAgaWYgKHRoaXMuX3VucHJvY2Vzc2VkQ29udGV4dERldiAhPT0gY29udGV4dCkge1xuICAgICAgICB0aGlzLl91bnByb2Nlc3NlZENvbnRleHREZXYgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLl9wcm9jZXNzZWRDb250ZXh0RGV2ID0gcHJvY2Vzc0NoaWxkQ29udGV4dERldihjb250ZXh0LCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQgPSB0aGlzLl9wcm9jZXNzZWRDb250ZXh0RGV2O1xuICAgIH1cblxuICAgIGFzc2VydFZhbGlkUHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICB0aGlzLl91cGRhdGVET01Qcm9wZXJ0aWVzKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbiwgbnVsbCk7XG4gICAgdGhpcy5fdXBkYXRlRE9NQ2hpbGRyZW4obGFzdFByb3BzLCBuZXh0UHJvcHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcblxuICAgIGlmICghY2FuRGVmaW5lUHJvcGVydHkgJiYgdGhpcy5fbm9kZVdpdGhMZWdhY3lQcm9wZXJ0aWVzKSB7XG4gICAgICB0aGlzLl9ub2RlV2l0aExlZ2FjeVByb3BlcnRpZXMucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vIDxzZWxlY3Q+IHZhbHVlIHVwZGF0ZSBuZWVkcyB0byBvY2N1ciBhZnRlciA8b3B0aW9uPiBjaGlsZHJlblxuICAgICAgLy8gcmVjb25jaWxpYXRpb25cbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUocG9zdFVwZGF0ZVNlbGVjdFdyYXBwZXIsIHRoaXMpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVjb25jaWxlcyB0aGUgcHJvcGVydGllcyBieSBkZXRlY3RpbmcgZGlmZmVyZW5jZXMgaW4gcHJvcGVydHkgdmFsdWVzIGFuZFxuICAgKiB1cGRhdGluZyB0aGUgRE9NIGFzIG5lY2Vzc2FyeS4gVGhpcyBmdW5jdGlvbiBpcyBwcm9iYWJseSB0aGUgc2luZ2xlIG1vc3RcbiAgICogY3JpdGljYWwgcGF0aCBmb3IgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICAgKlxuICAgKiBUT0RPOiBCZW5jaG1hcmsgd2hldGhlciBjaGVja2luZyBmb3IgY2hhbmdlZCB2YWx1ZXMgaW4gbWVtb3J5IGFjdHVhbGx5XG4gICAqICAgICAgIGltcHJvdmVzIHBlcmZvcm1hbmNlIChlc3BlY2lhbGx5IHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50cykuXG4gICAqIFRPRE86IEJlbmNobWFyayB0aGUgZWZmZWN0cyBvZiBwdXR0aW5nIHRoaXMgYXQgdGhlIHRvcCBzaW5jZSA5OSUgb2YgcHJvcHNcbiAgICogICAgICAgZG8gbm90IGNoYW5nZSBmb3IgYSBnaXZlbiByZWNvbmNpbGlhdGlvbi5cbiAgICogVE9ETzogQmVuY2htYXJrIGFyZWFzIHRoYXQgY2FuIGJlIGltcHJvdmVkIHdpdGggY2FjaGluZy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtvYmplY3R9IGxhc3RQcm9wc1xuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHs/RE9NRWxlbWVudH0gbm9kZVxuICAgKi9cbiAgX3VwZGF0ZURPTVByb3BlcnRpZXM6IGZ1bmN0aW9uIChsYXN0UHJvcHMsIG5leHRQcm9wcywgdHJhbnNhY3Rpb24sIG5vZGUpIHtcbiAgICB2YXIgcHJvcEtleTtcbiAgICB2YXIgc3R5bGVOYW1lO1xuICAgIHZhciBzdHlsZVVwZGF0ZXM7XG4gICAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgICAgaWYgKG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fCAhbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgIHZhciBsYXN0U3R5bGUgPSB0aGlzLl9wcmV2aW91c1N0eWxlQ29weTtcbiAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbGFzdFN0eWxlKSB7XG4gICAgICAgICAgaWYgKGxhc3RTdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGlmIChsYXN0UHJvcHNbcHJvcEtleV0pIHtcbiAgICAgICAgICAvLyBPbmx5IGNhbGwgZGVsZXRlTGlzdGVuZXIgaWYgdGhlcmUgd2FzIGEgbGlzdGVuZXIgcHJldmlvdXNseSBvclxuICAgICAgICAgIC8vIGVsc2Ugd2lsbERlbGV0ZUxpc3RlbmVyIGdldHMgY2FsbGVkIHdoZW4gdGhlcmUgd2Fzbid0IGFjdHVhbGx5IGFcbiAgICAgICAgICAvLyBsaXN0ZW5lciAoZS5nLiwgb25DbGljaz17bnVsbH0pXG4gICAgICAgICAgZGVsZXRlTGlzdGVuZXIodGhpcy5fcm9vdE5vZGVJRCwgcHJvcEtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkucHJvcGVydGllc1twcm9wS2V5XSB8fCBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgICB9XG4gICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIHByb3BLZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHByb3BLZXkgaW4gbmV4dFByb3BzKSB7XG4gICAgICB2YXIgbmV4dFByb3AgPSBuZXh0UHJvcHNbcHJvcEtleV07XG4gICAgICB2YXIgbGFzdFByb3AgPSBwcm9wS2V5ID09PSBTVFlMRSA/IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5IDogbGFzdFByb3BzW3Byb3BLZXldO1xuICAgICAgaWYgKCFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgbmV4dFByb3AgPT09IGxhc3RQcm9wKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgIGlmIChuZXh0UHJvcCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjaGVja0FuZFdhcm5Gb3JNdXRhdGVkU3R5bGUodGhpcy5fcHJldmlvdXNTdHlsZUNvcHksIHRoaXMuX3ByZXZpb3VzU3R5bGUsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZSA9IG5leHRQcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0UHJvcCA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gYXNzaWduKHt9LCBuZXh0UHJvcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0UHJvcCkge1xuICAgICAgICAgIC8vIFVuc2V0IHN0eWxlcyBvbiBgbGFzdFByb3BgIGJ1dCBub3Qgb24gYG5leHRQcm9wYC5cbiAgICAgICAgICBmb3IgKHN0eWxlTmFtZSBpbiBsYXN0UHJvcCkge1xuICAgICAgICAgICAgaWYgKGxhc3RQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiYgKCFuZXh0UHJvcCB8fCAhbmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkpIHtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0gc3R5bGVVcGRhdGVzIHx8IHt9O1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBVcGRhdGUgc3R5bGVzIHRoYXQgY2hhbmdlZCBzaW5jZSBgbGFzdFByb3BgLlxuICAgICAgICAgIGZvciAoc3R5bGVOYW1lIGluIG5leHRQcm9wKSB7XG4gICAgICAgICAgICBpZiAobmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSAmJiBsYXN0UHJvcFtzdHlsZU5hbWVdICE9PSBuZXh0UHJvcFtzdHlsZU5hbWVdKSB7XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHN0eWxlVXBkYXRlcyB8fCB7fTtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSBuZXh0UHJvcFtzdHlsZU5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBSZWxpZXMgb24gYHVwZGF0ZVN0eWxlc0J5SURgIG5vdCBtdXRhdGluZyBgc3R5bGVVcGRhdGVzYC5cbiAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBuZXh0UHJvcDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBpZiAobmV4dFByb3ApIHtcbiAgICAgICAgICBlbnF1ZXVlUHV0TGlzdGVuZXIodGhpcy5fcm9vdE5vZGVJRCwgcHJvcEtleSwgbmV4dFByb3AsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChsYXN0UHJvcCkge1xuICAgICAgICAgIGRlbGV0ZUxpc3RlbmVyKHRoaXMuX3Jvb3ROb2RlSUQsIHByb3BLZXkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzQ3VzdG9tQ29tcG9uZW50KHRoaXMuX3RhZywgbmV4dFByb3BzKSkge1xuICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wS2V5ID09PSBDSElMRFJFTikge1xuICAgICAgICAgIG5leHRQcm9wID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JBdHRyaWJ1dGUobm9kZSwgcHJvcEtleSwgbmV4dFByb3ApO1xuICAgICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW3Byb3BLZXldIHx8IERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKHByb3BLZXkpKSB7XG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUodGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UncmUgdXBkYXRpbmcgdG8gbnVsbCBvciB1bmRlZmluZWQsIHdlIHNob3VsZCByZW1vdmUgdGhlIHByb3BlcnR5XG4gICAgICAgIC8vIGZyb20gdGhlIERPTSBub2RlIGluc3RlYWQgb2YgaW5hZHZlcnRhbnRseSBzZXR0aW5nIHRvIGEgc3RyaW5nLiBUaGlzXG4gICAgICAgIC8vIGJyaW5ncyB1cyBpbiBsaW5lIHdpdGggdGhlIHNhbWUgYmVoYXZpb3Igd2UgaGF2ZSBvbiBpbml0aWFsIHJlbmRlci5cbiAgICAgICAgaWYgKG5leHRQcm9wICE9IG51bGwpIHtcbiAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShub2RlLCBwcm9wS2V5LCBuZXh0UHJvcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkobm9kZSwgcHJvcEtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0eWxlVXBkYXRlcykge1xuICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUodGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgICB9XG4gICAgICBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JTdHlsZXMobm9kZSwgc3R5bGVVcGRhdGVzKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlY29uY2lsZXMgdGhlIGNoaWxkcmVuIHdpdGggdGhlIHZhcmlvdXMgcHJvcGVydGllcyB0aGF0IGFmZmVjdCB0aGVcbiAgICogY2hpbGRyZW4gY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGxhc3RQcm9wc1xuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICovXG4gIF91cGRhdGVET01DaGlsZHJlbjogZnVuY3Rpb24gKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBsYXN0Q29udGVudCA9IENPTlRFTlRfVFlQRVNbdHlwZW9mIGxhc3RQcm9wcy5jaGlsZHJlbl0gPyBsYXN0UHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgIHZhciBuZXh0Q29udGVudCA9IENPTlRFTlRfVFlQRVNbdHlwZW9mIG5leHRQcm9wcy5jaGlsZHJlbl0gPyBuZXh0UHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuXG4gICAgdmFyIGxhc3RIdG1sID0gbGFzdFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmIGxhc3RQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG4gICAgdmFyIG5leHRIdG1sID0gbmV4dFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmIG5leHRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG5cbiAgICAvLyBOb3RlIHRoZSB1c2Ugb2YgYCE9YCB3aGljaCBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkLlxuICAgIHZhciBsYXN0Q2hpbGRyZW4gPSBsYXN0Q29udGVudCAhPSBudWxsID8gbnVsbCA6IGxhc3RQcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgbmV4dENoaWxkcmVuID0gbmV4dENvbnRlbnQgIT0gbnVsbCA/IG51bGwgOiBuZXh0UHJvcHMuY2hpbGRyZW47XG5cbiAgICAvLyBJZiB3ZSdyZSBzd2l0Y2hpbmcgZnJvbSBjaGlsZHJlbiB0byBjb250ZW50L2h0bWwgb3IgdmljZSB2ZXJzYSwgcmVtb3ZlXG4gICAgLy8gdGhlIG9sZCBjb250ZW50XG4gICAgdmFyIGxhc3RIYXNDb250ZW50T3JIdG1sID0gbGFzdENvbnRlbnQgIT0gbnVsbCB8fCBsYXN0SHRtbCAhPSBudWxsO1xuICAgIHZhciBuZXh0SGFzQ29udGVudE9ySHRtbCA9IG5leHRDb250ZW50ICE9IG51bGwgfHwgbmV4dEh0bWwgIT0gbnVsbDtcbiAgICBpZiAobGFzdENoaWxkcmVuICE9IG51bGwgJiYgbmV4dENoaWxkcmVuID09IG51bGwpIHtcbiAgICAgIHRoaXMudXBkYXRlQ2hpbGRyZW4obnVsbCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAobGFzdEhhc0NvbnRlbnRPckh0bWwgJiYgIW5leHRIYXNDb250ZW50T3JIdG1sKSB7XG4gICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnKTtcbiAgICB9XG5cbiAgICBpZiAobmV4dENvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgaWYgKGxhc3RDb250ZW50ICE9PSBuZXh0Q29udGVudCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnICsgbmV4dENvbnRlbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV4dEh0bWwgIT0gbnVsbCkge1xuICAgICAgaWYgKGxhc3RIdG1sICE9PSBuZXh0SHRtbCkge1xuICAgICAgICB0aGlzLnVwZGF0ZU1hcmt1cCgnJyArIG5leHRIdG1sKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5leHRDaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuKG5leHRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVzdHJveXMgYWxsIGV2ZW50IHJlZ2lzdHJhdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuIERvZXMgbm90IHJlbW92ZSBmcm9tXG4gICAqIHRoZSBET00uIFRoYXQgbXVzdCBiZSBkb25lIGJ5IHRoZSBwYXJlbnQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24gKCkge1xuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdpZnJhbWUnOlxuICAgICAgY2FzZSAnaW1nJzpcbiAgICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgY2FzZSAndmlkZW8nOlxuICAgICAgY2FzZSAnYXVkaW8nOlxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fd3JhcHBlclN0YXRlLmxpc3RlbmVycztcbiAgICAgICAgaWYgKGxpc3RlbmVycykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbaV0ucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICBSZWFjdERPTUlucHV0LnVubW91bnRXcmFwcGVyKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICBjYXNlICdib2R5JzpcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbXBvbmVudHMgbGlrZSA8aHRtbD4gPGhlYWQ+IGFuZCA8Ym9keT4gY2FuJ3QgYmUgcmVtb3ZlZCBvciBhZGRlZFxuICAgICAgICAgKiBlYXNpbHkgaW4gYSBjcm9zcy1icm93c2VyIHdheSwgaG93ZXZlciBpdCdzIHZhbHVhYmxlIHRvIGJlIGFibGUgdG9cbiAgICAgICAgICogdGFrZSBhZHZhbnRhZ2Ugb2YgUmVhY3QncyByZWNvbmNpbGlhdGlvbiBmb3Igc3R5bGluZyBhbmQgPHRpdGxlPlxuICAgICAgICAgKiBtYW5hZ2VtZW50LiBTbyB3ZSBqdXN0IGRvY3VtZW50IGl0IGFuZCB0aHJvdyBpbiBkYW5nZXJvdXMgY2FzZXMuXG4gICAgICAgICAqL1xuICAgICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnPCVzPiB0cmllZCB0byB1bm1vdW50LiBCZWNhdXNlIG9mIGNyb3NzLWJyb3dzZXIgcXVpcmtzIGl0IGlzICcgKyAnaW1wb3NzaWJsZSB0byB1bm1vdW50IHNvbWUgdG9wLWxldmVsIGNvbXBvbmVudHMgKGVnIDxodG1sPiwgJyArICc8aGVhZD4sIGFuZCA8Ym9keT4pIHJlbGlhYmx5IGFuZCBlZmZpY2llbnRseS4gVG8gZml4IHRoaXMsIGhhdmUgYSAnICsgJ3NpbmdsZSB0b3AtbGV2ZWwgY29tcG9uZW50IHRoYXQgbmV2ZXIgdW5tb3VudHMgcmVuZGVyIHRoZXNlICcgKyAnZWxlbWVudHMuJywgdGhpcy5fdGFnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMudW5tb3VudENoaWxkcmVuKCk7XG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmRlbGV0ZUFsbExpc3RlbmVycyh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQodGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgdGhpcy5fd3JhcHBlclN0YXRlID0gbnVsbDtcbiAgICBpZiAodGhpcy5fbm9kZVdpdGhMZWdhY3lQcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuX25vZGVXaXRoTGVnYWN5UHJvcGVydGllcztcbiAgICAgIG5vZGUuX3JlYWN0SW50ZXJuYWxDb21wb25lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fbm9kZVdpdGhMZWdhY3lQcm9wZXJ0aWVzID0gbnVsbDtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0UHVibGljSW5zdGFuY2U6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX25vZGVXaXRoTGVnYWN5UHJvcGVydGllcykge1xuICAgICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUodGhpcy5fcm9vdE5vZGVJRCk7XG5cbiAgICAgIG5vZGUuX3JlYWN0SW50ZXJuYWxDb21wb25lbnQgPSB0aGlzO1xuICAgICAgbm9kZS5nZXRET01Ob2RlID0gbGVnYWN5R2V0RE9NTm9kZTtcbiAgICAgIG5vZGUuaXNNb3VudGVkID0gbGVnYWN5SXNNb3VudGVkO1xuICAgICAgbm9kZS5zZXRTdGF0ZSA9IGxlZ2FjeVNldFN0YXRlRXRjO1xuICAgICAgbm9kZS5yZXBsYWNlU3RhdGUgPSBsZWdhY3lTZXRTdGF0ZUV0YztcbiAgICAgIG5vZGUuZm9yY2VVcGRhdGUgPSBsZWdhY3lTZXRTdGF0ZUV0YztcbiAgICAgIG5vZGUuc2V0UHJvcHMgPSBsZWdhY3lTZXRQcm9wcztcbiAgICAgIG5vZGUucmVwbGFjZVByb3BzID0gbGVnYWN5UmVwbGFjZVByb3BzO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhub2RlLCBsZWdhY3lQcm9wc0Rlc2NyaXB0b3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHVwZGF0ZUNvbXBvbmVudCB3aWxsIHVwZGF0ZSB0aGlzIHByb3BlcnR5IG9uIHN1YnNlcXVlbnQgcmVuZGVyc1xuICAgICAgICAgIG5vZGUucHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdXBkYXRlQ29tcG9uZW50IHdpbGwgdXBkYXRlIHRoaXMgcHJvcGVydHkgb24gc3Vic2VxdWVudCByZW5kZXJzXG4gICAgICAgIG5vZGUucHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5fbm9kZVdpdGhMZWdhY3lQcm9wZXJ0aWVzID0gbm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX25vZGVXaXRoTGVnYWN5UHJvcGVydGllcztcbiAgfVxuXG59O1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoUmVhY3RET01Db21wb25lbnQsICdSZWFjdERPTUNvbXBvbmVudCcsIHtcbiAgbW91bnRDb21wb25lbnQ6ICdtb3VudENvbXBvbmVudCcsXG4gIHVwZGF0ZUNvbXBvbmVudDogJ3VwZGF0ZUNvbXBvbmVudCdcbn0pO1xuXG5hc3NpZ24oUmVhY3RET01Db21wb25lbnQucHJvdG90eXBlLCBSZWFjdERPTUNvbXBvbmVudC5NaXhpbiwgUmVhY3RNdWx0aUNoaWxkLk1peGluKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUNvbXBvbmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01GYWN0b3JpZXNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudFZhbGlkYXRvcicpO1xuXG52YXIgbWFwT2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvbWFwT2JqZWN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgZmFjdG9yeSB0aGF0IGNyZWF0ZXMgSFRNTCB0YWcgZWxlbWVudHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUYWcgbmFtZSAoZS5nLiBgZGl2YCkuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVET01GYWN0b3J5KHRhZykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeSh0YWcpO1xuICB9XG4gIHJldHVybiBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSh0YWcpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXBwaW5nIGZyb20gc3VwcG9ydGVkIEhUTUwgdGFncyB0byBgUmVhY3RET01Db21wb25lbnRgIGNsYXNzZXMuXG4gKiBUaGlzIGlzIGFsc28gYWNjZXNzaWJsZSB2aWEgYFJlYWN0LkRPTWAuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgUmVhY3RET01GYWN0b3JpZXMgPSBtYXBPYmplY3Qoe1xuICBhOiAnYScsXG4gIGFiYnI6ICdhYmJyJyxcbiAgYWRkcmVzczogJ2FkZHJlc3MnLFxuICBhcmVhOiAnYXJlYScsXG4gIGFydGljbGU6ICdhcnRpY2xlJyxcbiAgYXNpZGU6ICdhc2lkZScsXG4gIGF1ZGlvOiAnYXVkaW8nLFxuICBiOiAnYicsXG4gIGJhc2U6ICdiYXNlJyxcbiAgYmRpOiAnYmRpJyxcbiAgYmRvOiAnYmRvJyxcbiAgYmlnOiAnYmlnJyxcbiAgYmxvY2txdW90ZTogJ2Jsb2NrcXVvdGUnLFxuICBib2R5OiAnYm9keScsXG4gIGJyOiAnYnInLFxuICBidXR0b246ICdidXR0b24nLFxuICBjYW52YXM6ICdjYW52YXMnLFxuICBjYXB0aW9uOiAnY2FwdGlvbicsXG4gIGNpdGU6ICdjaXRlJyxcbiAgY29kZTogJ2NvZGUnLFxuICBjb2w6ICdjb2wnLFxuICBjb2xncm91cDogJ2NvbGdyb3VwJyxcbiAgZGF0YTogJ2RhdGEnLFxuICBkYXRhbGlzdDogJ2RhdGFsaXN0JyxcbiAgZGQ6ICdkZCcsXG4gIGRlbDogJ2RlbCcsXG4gIGRldGFpbHM6ICdkZXRhaWxzJyxcbiAgZGZuOiAnZGZuJyxcbiAgZGlhbG9nOiAnZGlhbG9nJyxcbiAgZGl2OiAnZGl2JyxcbiAgZGw6ICdkbCcsXG4gIGR0OiAnZHQnLFxuICBlbTogJ2VtJyxcbiAgZW1iZWQ6ICdlbWJlZCcsXG4gIGZpZWxkc2V0OiAnZmllbGRzZXQnLFxuICBmaWdjYXB0aW9uOiAnZmlnY2FwdGlvbicsXG4gIGZpZ3VyZTogJ2ZpZ3VyZScsXG4gIGZvb3RlcjogJ2Zvb3RlcicsXG4gIGZvcm06ICdmb3JtJyxcbiAgaDE6ICdoMScsXG4gIGgyOiAnaDInLFxuICBoMzogJ2gzJyxcbiAgaDQ6ICdoNCcsXG4gIGg1OiAnaDUnLFxuICBoNjogJ2g2JyxcbiAgaGVhZDogJ2hlYWQnLFxuICBoZWFkZXI6ICdoZWFkZXInLFxuICBoZ3JvdXA6ICdoZ3JvdXAnLFxuICBocjogJ2hyJyxcbiAgaHRtbDogJ2h0bWwnLFxuICBpOiAnaScsXG4gIGlmcmFtZTogJ2lmcmFtZScsXG4gIGltZzogJ2ltZycsXG4gIGlucHV0OiAnaW5wdXQnLFxuICBpbnM6ICdpbnMnLFxuICBrYmQ6ICdrYmQnLFxuICBrZXlnZW46ICdrZXlnZW4nLFxuICBsYWJlbDogJ2xhYmVsJyxcbiAgbGVnZW5kOiAnbGVnZW5kJyxcbiAgbGk6ICdsaScsXG4gIGxpbms6ICdsaW5rJyxcbiAgbWFpbjogJ21haW4nLFxuICBtYXA6ICdtYXAnLFxuICBtYXJrOiAnbWFyaycsXG4gIG1lbnU6ICdtZW51JyxcbiAgbWVudWl0ZW06ICdtZW51aXRlbScsXG4gIG1ldGE6ICdtZXRhJyxcbiAgbWV0ZXI6ICdtZXRlcicsXG4gIG5hdjogJ25hdicsXG4gIG5vc2NyaXB0OiAnbm9zY3JpcHQnLFxuICBvYmplY3Q6ICdvYmplY3QnLFxuICBvbDogJ29sJyxcbiAgb3B0Z3JvdXA6ICdvcHRncm91cCcsXG4gIG9wdGlvbjogJ29wdGlvbicsXG4gIG91dHB1dDogJ291dHB1dCcsXG4gIHA6ICdwJyxcbiAgcGFyYW06ICdwYXJhbScsXG4gIHBpY3R1cmU6ICdwaWN0dXJlJyxcbiAgcHJlOiAncHJlJyxcbiAgcHJvZ3Jlc3M6ICdwcm9ncmVzcycsXG4gIHE6ICdxJyxcbiAgcnA6ICdycCcsXG4gIHJ0OiAncnQnLFxuICBydWJ5OiAncnVieScsXG4gIHM6ICdzJyxcbiAgc2FtcDogJ3NhbXAnLFxuICBzY3JpcHQ6ICdzY3JpcHQnLFxuICBzZWN0aW9uOiAnc2VjdGlvbicsXG4gIHNlbGVjdDogJ3NlbGVjdCcsXG4gIHNtYWxsOiAnc21hbGwnLFxuICBzb3VyY2U6ICdzb3VyY2UnLFxuICBzcGFuOiAnc3BhbicsXG4gIHN0cm9uZzogJ3N0cm9uZycsXG4gIHN0eWxlOiAnc3R5bGUnLFxuICBzdWI6ICdzdWInLFxuICBzdW1tYXJ5OiAnc3VtbWFyeScsXG4gIHN1cDogJ3N1cCcsXG4gIHRhYmxlOiAndGFibGUnLFxuICB0Ym9keTogJ3Rib2R5JyxcbiAgdGQ6ICd0ZCcsXG4gIHRleHRhcmVhOiAndGV4dGFyZWEnLFxuICB0Zm9vdDogJ3Rmb290JyxcbiAgdGg6ICd0aCcsXG4gIHRoZWFkOiAndGhlYWQnLFxuICB0aW1lOiAndGltZScsXG4gIHRpdGxlOiAndGl0bGUnLFxuICB0cjogJ3RyJyxcbiAgdHJhY2s6ICd0cmFjaycsXG4gIHU6ICd1JyxcbiAgdWw6ICd1bCcsXG4gICd2YXInOiAndmFyJyxcbiAgdmlkZW86ICd2aWRlbycsXG4gIHdicjogJ3dicicsXG5cbiAgLy8gU1ZHXG4gIGNpcmNsZTogJ2NpcmNsZScsXG4gIGNsaXBQYXRoOiAnY2xpcFBhdGgnLFxuICBkZWZzOiAnZGVmcycsXG4gIGVsbGlwc2U6ICdlbGxpcHNlJyxcbiAgZzogJ2cnLFxuICBpbWFnZTogJ2ltYWdlJyxcbiAgbGluZTogJ2xpbmUnLFxuICBsaW5lYXJHcmFkaWVudDogJ2xpbmVhckdyYWRpZW50JyxcbiAgbWFzazogJ21hc2snLFxuICBwYXRoOiAncGF0aCcsXG4gIHBhdHRlcm46ICdwYXR0ZXJuJyxcbiAgcG9seWdvbjogJ3BvbHlnb24nLFxuICBwb2x5bGluZTogJ3BvbHlsaW5lJyxcbiAgcmFkaWFsR3JhZGllbnQ6ICdyYWRpYWxHcmFkaWVudCcsXG4gIHJlY3Q6ICdyZWN0JyxcbiAgc3RvcDogJ3N0b3AnLFxuICBzdmc6ICdzdmcnLFxuICB0ZXh0OiAndGV4dCcsXG4gIHRzcGFuOiAndHNwYW4nXG5cbn0sIGNyZWF0ZURPTUZhY3RvcnkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NRmFjdG9yaWVzOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUZlYXR1cmVGbGFnc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NRmVhdHVyZUZsYWdzID0ge1xuICB1c2VDcmVhdGVFbGVtZW50OiBmYWxzZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUZlYXR1cmVGbGFnczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01JRE9wZXJhdGlvbnNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NQ2hpbGRyZW5PcGVyYXRpb25zID0gcmVxdWlyZSgnLi9ET01DaGlsZHJlbk9wZXJhdGlvbnMnKTtcbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5T3BlcmF0aW9ucycpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogRXJyb3JzIGZvciBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIG5vdCBiZSB1cGRhdGVkIHdpdGggYHVwZGF0ZVByb3BlcnR5QnlJRCgpYC5cbiAqXG4gKiBAdHlwZSB7b2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIElOVkFMSURfUFJPUEVSVFlfRVJST1JTID0ge1xuICBkYW5nZXJvdXNseVNldElubmVySFRNTDogJ2BkYW5nZXJvdXNseVNldElubmVySFRNTGAgbXVzdCBiZSBzZXQgdXNpbmcgYHVwZGF0ZUlubmVySFRNTEJ5SUQoKWAuJyxcbiAgc3R5bGU6ICdgc3R5bGVgIG11c3QgYmUgc2V0IHVzaW5nIGB1cGRhdGVTdHlsZXNCeUlEKClgLidcbn07XG5cbi8qKlxuICogT3BlcmF0aW9ucyB1c2VkIHRvIHByb2Nlc3MgdXBkYXRlcyB0byBET00gbm9kZXMuXG4gKi9cbnZhciBSZWFjdERPTUlET3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogVXBkYXRlcyBhIERPTSBub2RlIHdpdGggbmV3IHByb3BlcnR5IHZhbHVlcy4gVGhpcyBzaG91bGQgb25seSBiZSB1c2VkIHRvXG4gICAqIHVwZGF0ZSBET00gcHJvcGVydGllcyBpbiBgRE9NUHJvcGVydHlgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIG5vZGUgdG8gdXBkYXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBIHZhbGlkIHByb3BlcnR5IG5hbWUsIHNlZSBgRE9NUHJvcGVydHlgLlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIE5ldyB2YWx1ZSBvZiB0aGUgcHJvcGVydHkuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdXBkYXRlUHJvcGVydHlCeUlEOiBmdW5jdGlvbiAoaWQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaWQpO1xuICAgICEhSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndXBkYXRlUHJvcGVydHlCeUlEKC4uLik6ICVzJywgSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlNbbmFtZV0pIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIElmIHdlJ3JlIHVwZGF0aW5nIHRvIG51bGwgb3IgdW5kZWZpbmVkLCB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBwcm9wZXJ0eVxuICAgIC8vIGZyb20gdGhlIERPTSBub2RlIGluc3RlYWQgb2YgaW5hZHZlcnRhbnRseSBzZXR0aW5nIHRvIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gYnJpbmdzIHVzIGluIGxpbmUgd2l0aCB0aGUgc2FtZSBiZWhhdmlvciB3ZSBoYXZlIG9uIGluaXRpYWwgcmVuZGVyLlxuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZXMgYSBET00gbm9kZSB0aGF0IGV4aXN0cyBpbiB0aGUgZG9jdW1lbnQgd2l0aCBtYXJrdXAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiBjaGlsZCB0byBiZSByZXBsYWNlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBEYW5nZXJvdXMgbWFya3VwIHRvIGluamVjdCBpbiBwbGFjZSBvZiBjaGlsZC5cbiAgICogQGludGVybmFsXG4gICAqIEBzZWUge0Rhbmdlci5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cH1cbiAgICovXG4gIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDogZnVuY3Rpb24gKGlkLCBtYXJrdXApIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKG5vZGUsIG1hcmt1cCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBjb21wb25lbnQncyBjaGlsZHJlbiBieSBwcm9jZXNzaW5nIGEgc2VyaWVzIG9mIHVwZGF0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXk8b2JqZWN0Pn0gdXBkYXRlcyBMaXN0IG9mIHVwZGF0ZSBjb25maWd1cmF0aW9ucy5cbiAgICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBtYXJrdXAgTGlzdCBvZiBtYXJrdXAgc3RyaW5ncy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6IGZ1bmN0aW9uICh1cGRhdGVzLCBtYXJrdXApIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVwZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHVwZGF0ZXNbaV0ucGFyZW50Tm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZSh1cGRhdGVzW2ldLnBhcmVudElEKTtcbiAgICB9XG4gICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLnByb2Nlc3NVcGRhdGVzKHVwZGF0ZXMsIG1hcmt1cCk7XG4gIH1cbn07XG5cblJlYWN0UGVyZi5tZWFzdXJlTWV0aG9kcyhSZWFjdERPTUlET3BlcmF0aW9ucywgJ1JlYWN0RE9NSURPcGVyYXRpb25zJywge1xuICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6ICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQnLFxuICBkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6ICdkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMnXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUlET3BlcmF0aW9uczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01JbnB1dFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0gcmVxdWlyZSgnLi9SZWFjdERPTUlET3BlcmF0aW9ucycpO1xudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKCcuL0xpbmtlZFZhbHVlVXRpbHMnKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgaW5zdGFuY2VzQnlSZWFjdElEID0ge307XG5cbmZ1bmN0aW9uIGZvcmNlVXBkYXRlSWZNb3VudGVkKCkge1xuICBpZiAodGhpcy5fcm9vdE5vZGVJRCkge1xuICAgIC8vIERPTSBjb21wb25lbnQgaXMgc3RpbGwgbW91bnRlZDsgdXBkYXRlXG4gICAgUmVhY3RET01JbnB1dC51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8aW5wdXQ+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBhbGxvd3Mgc2V0dGluZyB0aGVzZSBvcHRpb25hbFxuICogcHJvcHM6IGBjaGVja2VkYCwgYHZhbHVlYCwgYGRlZmF1bHRDaGVja2VkYCwgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICpcbiAqIElmIGBjaGVja2VkYCBvciBgdmFsdWVgIGFyZSBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zXG4gKiB0aGF0IGFmZmVjdCB0aGUgY2hlY2tlZCBzdGF0ZSBvciB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiB0aGV5IGFyZSBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgbm90XG4gKiB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuIEluc3RlYWQsIHRoZSBwcm9wcyBtdXN0IGNoYW5nZSBpbiBvcmRlciBmb3JcbiAqIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCBhcyB1bmNoZWNrZWQgKG9yIGBkZWZhdWx0Q2hlY2tlZGApXG4gKiB3aXRoIGFuIGVtcHR5IHZhbHVlIChvciBgZGVmYXVsdFZhbHVlYCkuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEyL1dELWh0bWw1LTIwMTIxMDI1L3RoZS1pbnB1dC1lbGVtZW50Lmh0bWxcbiAqL1xudmFyIFJlYWN0RE9NSW5wdXQgPSB7XG4gIGdldE5hdGl2ZVByb3BzOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICB2YXIgY2hlY2tlZCA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0Q2hlY2tlZChwcm9wcyk7XG5cbiAgICB2YXIgbmF0aXZlUHJvcHMgPSBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICBkZWZhdWx0Q2hlY2tlZDogdW5kZWZpbmVkLFxuICAgICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICB2YWx1ZTogdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSxcbiAgICAgIGNoZWNrZWQ6IGNoZWNrZWQgIT0gbnVsbCA/IGNoZWNrZWQgOiBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQsXG4gICAgICBvbkNoYW5nZTogaW5zdC5fd3JhcHBlclN0YXRlLm9uQ2hhbmdlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmF0aXZlUHJvcHM7XG4gIH0sXG5cbiAgbW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgTGlua2VkVmFsdWVVdGlscy5jaGVja1Byb3BUeXBlcygnaW5wdXQnLCBwcm9wcywgaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgIGluc3QuX3dyYXBwZXJTdGF0ZSA9IHtcbiAgICAgIGluaXRpYWxDaGVja2VkOiBwcm9wcy5kZWZhdWx0Q2hlY2tlZCB8fCBmYWxzZSxcbiAgICAgIGluaXRpYWxWYWx1ZTogZGVmYXVsdFZhbHVlICE9IG51bGwgPyBkZWZhdWx0VmFsdWUgOiBudWxsLFxuICAgICAgb25DaGFuZ2U6IF9oYW5kbGVDaGFuZ2UuYmluZChpbnN0KVxuICAgIH07XG4gIH0sXG5cbiAgbW91bnRSZWFkeVdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgLy8gQ2FuJ3QgYmUgaW4gbW91bnRXcmFwcGVyIG9yIGVsc2Ugc2VydmVyIHJlbmRlcmluZyBsZWFrcy5cbiAgICBpbnN0YW5jZXNCeVJlYWN0SURbaW5zdC5fcm9vdE5vZGVJRF0gPSBpbnN0O1xuICB9LFxuXG4gIHVubW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCkge1xuICAgIGRlbGV0ZSBpbnN0YW5jZXNCeVJlYWN0SURbaW5zdC5fcm9vdE5vZGVJRF07XG4gIH0sXG5cbiAgdXBkYXRlV3JhcHBlcjogZnVuY3Rpb24gKGluc3QpIHtcbiAgICB2YXIgcHJvcHMgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICAgIC8vIFRPRE86IFNob3VsZG4ndCB0aGlzIGJlIGdldENoZWNrZWQocHJvcHMpP1xuICAgIHZhciBjaGVja2VkID0gcHJvcHMuY2hlY2tlZDtcbiAgICBpZiAoY2hlY2tlZCAhPSBudWxsKSB7XG4gICAgICBSZWFjdERPTUlET3BlcmF0aW9ucy51cGRhdGVQcm9wZXJ0eUJ5SUQoaW5zdC5fcm9vdE5vZGVJRCwgJ2NoZWNrZWQnLCBjaGVja2VkIHx8IGZhbHNlKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgLy8gQ2FzdCBgdmFsdWVgIHRvIGEgc3RyaW5nIHRvIGVuc3VyZSB0aGUgdmFsdWUgaXMgc2V0IGNvcnJlY3RseS4gV2hpbGVcbiAgICAgIC8vIGJyb3dzZXJzIHR5cGljYWxseSBkbyB0aGlzIGFzIG5lY2Vzc2FyeSwganNkb20gZG9lc24ndC5cbiAgICAgIFJlYWN0RE9NSURPcGVyYXRpb25zLnVwZGF0ZVByb3BlcnR5QnlJRChpbnN0Ll9yb290Tm9kZUlELCAndmFsdWUnLCAnJyArIHZhbHVlKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgdmFyIHJldHVyblZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5leGVjdXRlT25DaGFuZ2UocHJvcHMsIGV2ZW50KTtcblxuICAvLyBIZXJlIHdlIHVzZSBhc2FwIHRvIHdhaXQgdW50aWwgYWxsIHVwZGF0ZXMgaGF2ZSBwcm9wYWdhdGVkLCB3aGljaFxuICAvLyBpcyBpbXBvcnRhbnQgd2hlbiB1c2luZyBjb250cm9sbGVkIGNvbXBvbmVudHMgd2l0aGluIGxheWVyczpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNjk4XG4gIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcblxuICB2YXIgbmFtZSA9IHByb3BzLm5hbWU7XG4gIGlmIChwcm9wcy50eXBlID09PSAncmFkaW8nICYmIG5hbWUgIT0gbnVsbCkge1xuICAgIHZhciByb290Tm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZSh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICB2YXIgcXVlcnlSb290ID0gcm9vdE5vZGU7XG5cbiAgICB3aGlsZSAocXVlcnlSb290LnBhcmVudE5vZGUpIHtcbiAgICAgIHF1ZXJ5Um9vdCA9IHF1ZXJ5Um9vdC5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIC8vIElmIGByb290Tm9kZS5mb3JtYCB3YXMgbm9uLW51bGwsIHRoZW4gd2UgY291bGQgdHJ5IGBmb3JtLmVsZW1lbnRzYCxcbiAgICAvLyBidXQgdGhhdCBzb21ldGltZXMgYmVoYXZlcyBzdHJhbmdlbHkgaW4gSUU4LiBXZSBjb3VsZCBhbHNvIHRyeSB1c2luZ1xuICAgIC8vIGBmb3JtLmdldEVsZW1lbnRzQnlOYW1lYCwgYnV0IHRoYXQgd2lsbCBvbmx5IHJldHVybiBkaXJlY3QgY2hpbGRyZW5cbiAgICAvLyBhbmQgd29uJ3QgaW5jbHVkZSBpbnB1dHMgdGhhdCB1c2UgdGhlIEhUTUw1IGBmb3JtPWAgYXR0cmlidXRlLiBTaW5jZVxuICAgIC8vIHRoZSBpbnB1dCBtaWdodCBub3QgZXZlbiBiZSBpbiBhIGZvcm0sIGxldCdzIGp1c3QgdXNlIHRoZSBnbG9iYWxcbiAgICAvLyBgcXVlcnlTZWxlY3RvckFsbGAgdG8gZW5zdXJlIHdlIGRvbid0IG1pc3MgYW55dGhpbmcuXG4gICAgdmFyIGdyb3VwID0gcXVlcnlSb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W25hbWU9JyArIEpTT04uc3RyaW5naWZ5KCcnICsgbmFtZSkgKyAnXVt0eXBlPVwicmFkaW9cIl0nKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBvdGhlck5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChvdGhlck5vZGUgPT09IHJvb3ROb2RlIHx8IG90aGVyTm9kZS5mb3JtICE9PSByb290Tm9kZS5mb3JtKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGlmIHJhZGlvIGJ1dHRvbnMgcmVuZGVyZWQgYnkgZGlmZmVyZW50IGNvcGllcyBvZiBSZWFjdFxuICAgICAgLy8gYW5kIHRoZSBzYW1lIG5hbWUgYXJlIHJlbmRlcmVkIGludG8gdGhlIHNhbWUgZm9ybSAoc2FtZSBhcyAjMTkzOSkuXG4gICAgICAvLyBUaGF0J3MgcHJvYmFibHkgb2theTsgd2UgZG9uJ3Qgc3VwcG9ydCBpdCBqdXN0IGFzIHdlIGRvbid0IHN1cHBvcnRcbiAgICAgIC8vIG1peGluZyBSZWFjdCB3aXRoIG5vbi1SZWFjdC5cbiAgICAgIHZhciBvdGhlcklEID0gUmVhY3RNb3VudC5nZXRJRChvdGhlck5vZGUpO1xuICAgICAgIW90aGVySUQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RET01JbnB1dDogTWl4aW5nIFJlYWN0IGFuZCBub24tUmVhY3QgcmFkaW8gaW5wdXRzIHdpdGggdGhlICcgKyAnc2FtZSBgbmFtZWAgaXMgbm90IHN1cHBvcnRlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgb3RoZXJJbnN0YW5jZSA9IGluc3RhbmNlc0J5UmVhY3RJRFtvdGhlcklEXTtcbiAgICAgICFvdGhlckluc3RhbmNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0RE9NSW5wdXQ6IFVua25vd24gcmFkaW8gYnV0dG9uIElEICVzLicsIG90aGVySUQpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgIC8vIElmIHRoaXMgaXMgYSBjb250cm9sbGVkIHJhZGlvIGJ1dHRvbiBncm91cCwgZm9yY2luZyB0aGUgaW5wdXQgdGhhdFxuICAgICAgLy8gd2FzIHByZXZpb3VzbHkgY2hlY2tlZCB0byB1cGRhdGUgd2lsbCBjYXVzZSBpdCB0byBiZSBjb21lIHJlLWNoZWNrZWRcbiAgICAgIC8vIGFzIGFwcHJvcHJpYXRlLlxuICAgICAgUmVhY3RVcGRhdGVzLmFzYXAoZm9yY2VVcGRhdGVJZk1vdW50ZWQsIG90aGVySW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUlucHV0OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTU9wdGlvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKCcuL1JlYWN0Q2hpbGRyZW4nKTtcbnZhciBSZWFjdERPTVNlbGVjdCA9IHJlcXVpcmUoJy4vUmVhY3RET01TZWxlY3QnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciB2YWx1ZUNvbnRleHRLZXkgPSBSZWFjdERPTVNlbGVjdC52YWx1ZUNvbnRleHRLZXk7XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8b3B0aW9uPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgd2FybnMgd2hlbiBgc2VsZWN0ZWRgIGlzIHNldC5cbiAqL1xudmFyIFJlYWN0RE9NT3B0aW9uID0ge1xuICBtb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcywgY29udGV4dCkge1xuICAgIC8vIFRPRE8gKHl1bmdzdGVycyk6IFJlbW92ZSBzdXBwb3J0IGZvciBgc2VsZWN0ZWRgIGluIDxvcHRpb24+LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwcm9wcy5zZWxlY3RlZCA9PSBudWxsLCAnVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIG9uIDxzZWxlY3Q+IGluc3RlYWQgb2YgJyArICdzZXR0aW5nIGBzZWxlY3RlZGAgb24gPG9wdGlvbj4uJykgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gTG9vayB1cCB3aGV0aGVyIHRoaXMgb3B0aW9uIGlzICdzZWxlY3RlZCcgdmlhIGNvbnRleHRcbiAgICB2YXIgc2VsZWN0VmFsdWUgPSBjb250ZXh0W3ZhbHVlQ29udGV4dEtleV07XG5cbiAgICAvLyBJZiBjb250ZXh0IGtleSBpcyBudWxsIChlLmcuLCBubyBzcGVjaWZpZWQgdmFsdWUgb3IgYWZ0ZXIgaW5pdGlhbCBtb3VudClcbiAgICAvLyBvciBtaXNzaW5nIChlLmcuLCBmb3IgPGRhdGFsaXN0PiksIHdlIGRvbid0IGNoYW5nZSBwcm9wcy5zZWxlY3RlZFxuICAgIHZhciBzZWxlY3RlZCA9IG51bGw7XG4gICAgaWYgKHNlbGVjdFZhbHVlICE9IG51bGwpIHtcbiAgICAgIHNlbGVjdGVkID0gZmFsc2U7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RWYWx1ZSkpIHtcbiAgICAgICAgLy8gbXVsdGlwbGVcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3RWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICgnJyArIHNlbGVjdFZhbHVlW2ldID09PSAnJyArIHByb3BzLnZhbHVlKSB7XG4gICAgICAgICAgICBzZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGVkID0gJycgKyBzZWxlY3RWYWx1ZSA9PT0gJycgKyBwcm9wcy52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnN0Ll93cmFwcGVyU3RhdGUgPSB7IHNlbGVjdGVkOiBzZWxlY3RlZCB9O1xuICB9LFxuXG4gIGdldE5hdGl2ZVByb3BzOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgbmF0aXZlUHJvcHMgPSBhc3NpZ24oeyBzZWxlY3RlZDogdW5kZWZpbmVkLCBjaGlsZHJlbjogdW5kZWZpbmVkIH0sIHByb3BzKTtcblxuICAgIC8vIFJlYWQgc3RhdGUgb25seSBmcm9tIGluaXRpYWwgbW91bnQgYmVjYXVzZSA8c2VsZWN0PiB1cGRhdGVzIHZhbHVlXG4gICAgLy8gbWFudWFsbHk7IHdlIG5lZWQgdGhlIGluaXRpYWwgc3RhdGUgb25seSBmb3Igc2VydmVyIHJlbmRlcmluZ1xuICAgIGlmIChpbnN0Ll93cmFwcGVyU3RhdGUuc2VsZWN0ZWQgIT0gbnVsbCkge1xuICAgICAgbmF0aXZlUHJvcHMuc2VsZWN0ZWQgPSBpbnN0Ll93cmFwcGVyU3RhdGUuc2VsZWN0ZWQ7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRlbnQgPSAnJztcblxuICAgIC8vIEZsYXR0ZW4gY2hpbGRyZW4gYW5kIHdhcm4gaWYgdGhleSBhcmVuJ3Qgc3RyaW5ncyBvciBudW1iZXJzO1xuICAgIC8vIGludmFsaWQgdHlwZXMgYXJlIGlnbm9yZWQuXG4gICAgUmVhY3RDaGlsZHJlbi5mb3JFYWNoKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBjaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29udGVudCArPSBjaGlsZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnT25seSBzdHJpbmdzIGFuZCBudW1iZXJzIGFyZSBzdXBwb3J0ZWQgYXMgPG9wdGlvbj4gY2hpbGRyZW4uJykgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoY29udGVudCkge1xuICAgICAgbmF0aXZlUHJvcHMuY2hpbGRyZW4gPSBjb250ZW50O1xuICAgIH1cblxuICAgIHJldHVybiBuYXRpdmVQcm9wcztcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NT3B0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVNlbGVjdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKCcuL0xpbmtlZFZhbHVlVXRpbHMnKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciB2YWx1ZUNvbnRleHRLZXkgPSAnX19SZWFjdERPTVNlbGVjdF92YWx1ZSQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG5cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkKCkge1xuICBpZiAodGhpcy5fcm9vdE5vZGVJRCAmJiB0aGlzLl93cmFwcGVyU3RhdGUucGVuZGluZ1VwZGF0ZSkge1xuICAgIHRoaXMuX3dyYXBwZXJTdGF0ZS5wZW5kaW5nVXBkYXRlID0gZmFsc2U7XG5cbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcblxuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICB1cGRhdGVPcHRpb25zKHRoaXMsIEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpLCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShvd25lcikge1xuICBpZiAob3duZXIpIHtcbiAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG52YXIgdmFsdWVQcm9wTmFtZXMgPSBbJ3ZhbHVlJywgJ2RlZmF1bHRWYWx1ZSddO1xuXG4vKipcbiAqIFZhbGlkYXRpb24gZnVuY3Rpb24gZm9yIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2hlY2tTZWxlY3RQcm9wVHlwZXMoaW5zdCwgcHJvcHMpIHtcbiAgdmFyIG93bmVyID0gaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICBMaW5rZWRWYWx1ZVV0aWxzLmNoZWNrUHJvcFR5cGVzKCdzZWxlY3QnLCBwcm9wcywgb3duZXIpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVQcm9wTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcE5hbWUgPSB2YWx1ZVByb3BOYW1lc1tpXTtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKEFycmF5LmlzQXJyYXkocHJvcHNbcHJvcE5hbWVdKSwgJ1RoZSBgJXNgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhbiBhcnJheSBpZiAnICsgJ2BtdWx0aXBsZWAgaXMgdHJ1ZS4lcycsIHByb3BOYW1lLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpKSA6IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIUFycmF5LmlzQXJyYXkocHJvcHNbcHJvcE5hbWVdKSwgJ1RoZSBgJXNgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhIHNjYWxhciAnICsgJ3ZhbHVlIGlmIGBtdWx0aXBsZWAgaXMgZmFsc2UuJXMnLCBwcm9wTmFtZSwgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdERPTUNvbXBvbmVudH0gaW5zdFxuICogQHBhcmFtIHtib29sZWFufSBtdWx0aXBsZVxuICogQHBhcmFtIHsqfSBwcm9wVmFsdWUgQSBzdHJpbmdhYmxlICh3aXRoIGBtdWx0aXBsZWAsIGEgbGlzdCBvZiBzdHJpbmdhYmxlcykuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zKGluc3QsIG11bHRpcGxlLCBwcm9wVmFsdWUpIHtcbiAgdmFyIHNlbGVjdGVkVmFsdWUsIGk7XG4gIHZhciBvcHRpb25zID0gUmVhY3RNb3VudC5nZXROb2RlKGluc3QuX3Jvb3ROb2RlSUQpLm9wdGlvbnM7XG5cbiAgaWYgKG11bHRpcGxlKSB7XG4gICAgc2VsZWN0ZWRWYWx1ZSA9IHt9O1xuICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHNlbGVjdGVkVmFsdWVbJycgKyBwcm9wVmFsdWVbaV1dID0gdHJ1ZTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWxlY3RlZCA9IHNlbGVjdGVkVmFsdWUuaGFzT3duUHJvcGVydHkob3B0aW9uc1tpXS52YWx1ZSk7XG4gICAgICBpZiAob3B0aW9uc1tpXS5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uc1tpXS5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBEbyBub3Qgc2V0IGBzZWxlY3QudmFsdWVgIGFzIGV4YWN0IGJlaGF2aW9yIGlzbid0IGNvbnNpc3RlbnQgYWNyb3NzIGFsbFxuICAgIC8vIGJyb3dzZXJzIGZvciBhbGwgY2FzZXMuXG4gICAgc2VsZWN0ZWRWYWx1ZSA9ICcnICsgcHJvcFZhbHVlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAob3B0aW9uc1tpXS52YWx1ZSA9PT0gc2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgICBvcHRpb25zW2ldLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgIG9wdGlvbnNbMF0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8c2VsZWN0PiBuYXRpdmUgY29tcG9uZW50IHRoYXQgYWxsb3dzIG9wdGlvbmFsbHkgc2V0dGluZyB0aGVcbiAqIHByb3BzIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLiBJZiBgbXVsdGlwbGVgIGlzIGZhbHNlLCB0aGUgcHJvcCBtdXN0IGJlIGFcbiAqIHN0cmluZ2FibGUuIElmIGBtdWx0aXBsZWAgaXMgdHJ1ZSwgdGhlIHByb3AgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdhYmxlcy5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBjaGFuZ2UgdGhlXG4gKiBzZWxlY3RlZCBvcHRpb24gd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gKlxuICogSWYgaXQgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgb3B0aW9ucyB3aWxsIG5vdFxuICogdXBkYXRlIGluIHJlc3BvbnNlIHRvIHVzZXIgYWN0aW9ucy4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBvcHRpb25zIHRvIHVwZGF0ZS5cbiAqXG4gKiBJZiBgZGVmYXVsdFZhbHVlYCBpcyBwcm92aWRlZCwgYW55IG9wdGlvbnMgd2l0aCB0aGUgc3VwcGxpZWQgdmFsdWVzIHdpbGwgYmVcbiAqIHNlbGVjdGVkLlxuICovXG52YXIgUmVhY3RET01TZWxlY3QgPSB7XG4gIHZhbHVlQ29udGV4dEtleTogdmFsdWVDb250ZXh0S2V5LFxuXG4gIGdldE5hdGl2ZVByb3BzOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgb25DaGFuZ2U6IGluc3QuX3dyYXBwZXJTdGF0ZS5vbkNoYW5nZSxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfSxcblxuICBtb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja1NlbGVjdFByb3BUeXBlcyhpbnN0LCBwcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgaW5zdC5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgcGVuZGluZ1VwZGF0ZTogZmFsc2UsXG4gICAgICBpbml0aWFsVmFsdWU6IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgIG9uQ2hhbmdlOiBfaGFuZGxlQ2hhbmdlLmJpbmQoaW5zdCksXG4gICAgICB3YXNNdWx0aXBsZTogQm9vbGVhbihwcm9wcy5tdWx0aXBsZSlcbiAgICB9O1xuICB9LFxuXG4gIHByb2Nlc3NDaGlsZENvbnRleHQ6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcywgY29udGV4dCkge1xuICAgIC8vIFBhc3MgZG93biBpbml0aWFsIHZhbHVlIHNvIGluaXRpYWwgZ2VuZXJhdGVkIG1hcmt1cCBoYXMgY29ycmVjdFxuICAgIC8vIGBzZWxlY3RlZGAgYXR0cmlidXRlc1xuICAgIHZhciBjaGlsZENvbnRleHQgPSBhc3NpZ24oe30sIGNvbnRleHQpO1xuICAgIGNoaWxkQ29udGV4dFt2YWx1ZUNvbnRleHRLZXldID0gaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtcbiAgICByZXR1cm4gY2hpbGRDb250ZXh0O1xuICB9LFxuXG4gIHBvc3RVcGRhdGVXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCkge1xuICAgIHZhciBwcm9wcyA9IGluc3QuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuXG4gICAgLy8gQWZ0ZXIgdGhlIGluaXRpYWwgbW91bnQsIHdlIGNvbnRyb2wgc2VsZWN0ZWQtbmVzcyBtYW51YWxseSBzbyBkb24ndCBwYXNzXG4gICAgLy8gdGhlIGNvbnRleHQgdmFsdWUgZG93blxuICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUgPSB1bmRlZmluZWQ7XG5cbiAgICB2YXIgd2FzTXVsdGlwbGUgPSBpbnN0Ll93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7XG4gICAgaW5zdC5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlID0gQm9vbGVhbihwcm9wcy5tdWx0aXBsZSk7XG5cbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLnBlbmRpbmdVcGRhdGUgPSBmYWxzZTtcbiAgICAgIHVwZGF0ZU9wdGlvbnMoaW5zdCwgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHdhc011bHRpcGxlICE9PSBCb29sZWFuKHByb3BzLm11bHRpcGxlKSkge1xuICAgICAgLy8gRm9yIHNpbXBsaWNpdHksIHJlYXBwbHkgYGRlZmF1bHRWYWx1ZWAgaWYgYG11bHRpcGxlYCBpcyB0b2dnbGVkLlxuICAgICAgaWYgKHByb3BzLmRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZU9wdGlvbnMoaW5zdCwgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXZlcnQgdGhlIHNlbGVjdCBiYWNrIHRvIGl0cyBkZWZhdWx0IHVuc2VsZWN0ZWQgc3RhdGUuXG4gICAgICAgIHVwZGF0ZU9wdGlvbnMoaW5zdCwgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHByb3BzLm11bHRpcGxlID8gW10gOiAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBfaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gIHZhciBwcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICB2YXIgcmV0dXJuVmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmV4ZWN1dGVPbkNoYW5nZShwcm9wcywgZXZlbnQpO1xuXG4gIHRoaXMuX3dyYXBwZXJTdGF0ZS5wZW5kaW5nVXBkYXRlID0gdHJ1ZTtcbiAgUmVhY3RVcGRhdGVzLmFzYXAodXBkYXRlT3B0aW9uc0lmUGVuZGluZ1VwZGF0ZUFuZE1vdW50ZWQsIHRoaXMpO1xuICByZXR1cm4gcmV0dXJuVmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01TZWxlY3Q7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NU2VsZWN0aW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldCA9IHJlcXVpcmUoJy4vZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldCcpO1xudmFyIGdldFRleHRDb250ZW50QWNjZXNzb3IgPSByZXF1aXJlKCcuL2dldFRleHRDb250ZW50QWNjZXNzb3InKTtcblxuLyoqXG4gKiBXaGlsZSBgaXNDb2xsYXBzZWRgIGlzIGF2YWlsYWJsZSBvbiB0aGUgU2VsZWN0aW9uIG9iamVjdCBhbmQgYGNvbGxhcHNlZGBcbiAqIGlzIGF2YWlsYWJsZSBvbiB0aGUgUmFuZ2Ugb2JqZWN0LCBJRTExIHNvbWV0aW1lcyBnZXRzIHRoZW0gd3JvbmcuXG4gKiBJZiB0aGUgYW5jaG9yL2ZvY3VzIG5vZGVzIGFuZCBvZmZzZXRzIGFyZSB0aGUgc2FtZSwgdGhlIHJhbmdlIGlzIGNvbGxhcHNlZC5cbiAqL1xuZnVuY3Rpb24gaXNDb2xsYXBzZWQoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0LCBmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KSB7XG4gIHJldHVybiBhbmNob3JOb2RlID09PSBmb2N1c05vZGUgJiYgYW5jaG9yT2Zmc2V0ID09PSBmb2N1c09mZnNldDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGFwcHJvcHJpYXRlIGFuY2hvciBhbmQgZm9jdXMgbm9kZS9vZmZzZXQgcGFpcnMgZm9yIElFLlxuICpcbiAqIFRoZSBjYXRjaCBoZXJlIGlzIHRoYXQgSUUncyBzZWxlY3Rpb24gQVBJIGRvZXNuJ3QgcHJvdmlkZSBpbmZvcm1hdGlvblxuICogYWJvdXQgd2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGZvcndhcmQgb3IgYmFja3dhcmQsIHNvIHdlIGhhdmUgdG9cbiAqIGJlaGF2ZSBhcyB0aG91Z2ggaXQncyBhbHdheXMgZm9yd2FyZC5cbiAqXG4gKiBJRSB0ZXh0IGRpZmZlcnMgZnJvbSBtb2Rlcm4gc2VsZWN0aW9uIGluIHRoYXQgaXQgYmVoYXZlcyBhcyB0aG91Z2hcbiAqIGJsb2NrIGVsZW1lbnRzIGVuZCB3aXRoIGEgbmV3IGxpbmUuIFRoaXMgbWVhbnMgY2hhcmFjdGVyIG9mZnNldHMgd2lsbFxuICogZGlmZmVyIGJldHdlZW4gdGhlIHR3byBBUElzLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRJRU9mZnNldHMobm9kZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZG9jdW1lbnQuc2VsZWN0aW9uO1xuICB2YXIgc2VsZWN0ZWRSYW5nZSA9IHNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICB2YXIgc2VsZWN0ZWRMZW5ndGggPSBzZWxlY3RlZFJhbmdlLnRleHQubGVuZ3RoO1xuXG4gIC8vIER1cGxpY2F0ZSBzZWxlY3Rpb24gc28gd2UgY2FuIG1vdmUgcmFuZ2Ugd2l0aG91dCBicmVha2luZyB1c2VyIHNlbGVjdGlvbi5cbiAgdmFyIGZyb21TdGFydCA9IHNlbGVjdGVkUmFuZ2UuZHVwbGljYXRlKCk7XG4gIGZyb21TdGFydC5tb3ZlVG9FbGVtZW50VGV4dChub2RlKTtcbiAgZnJvbVN0YXJ0LnNldEVuZFBvaW50KCdFbmRUb1N0YXJ0Jywgc2VsZWN0ZWRSYW5nZSk7XG5cbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gZnJvbVN0YXJ0LnRleHQubGVuZ3RoO1xuICB2YXIgZW5kT2Zmc2V0ID0gc3RhcnRPZmZzZXQgKyBzZWxlY3RlZExlbmd0aDtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydE9mZnNldCxcbiAgICBlbmQ6IGVuZE9mZnNldFxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7P29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kZXJuT2Zmc2V0cyhub2RlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uICYmIHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcblxuICBpZiAoIXNlbGVjdGlvbiB8fCBzZWxlY3Rpb24ucmFuZ2VDb3VudCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGFuY2hvck5vZGUgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcbiAgdmFyIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQ7XG4gIHZhciBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICB2YXIgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG5cbiAgdmFyIGN1cnJlbnRSYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuXG4gIC8vIEluIEZpcmVmb3gsIHJhbmdlLnN0YXJ0Q29udGFpbmVyIGFuZCByYW5nZS5lbmRDb250YWluZXIgY2FuIGJlIFwiYW5vbnltb3VzXG4gIC8vIGRpdnNcIiwgZS5nLiB0aGUgdXAvZG93biBidXR0b25zIG9uIGFuIDxpbnB1dCB0eXBlPVwibnVtYmVyXCI+LiBBbm9ueW1vdXNcbiAgLy8gZGl2cyBkbyBub3Qgc2VlbSB0byBleHBvc2UgcHJvcGVydGllcywgdHJpZ2dlcmluZyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcbiAgLy8gZXJyb3JcIiBpZiBhbnkgb2YgaXRzIHByb3BlcnRpZXMgYXJlIGFjY2Vzc2VkLiBUaGUgb25seSBzZWVtaW5nbHkgcG9zc2libGVcbiAgLy8gd2F5IHRvIGF2b2lkIGVycm9yaW5nIGlzIHRvIGFjY2VzcyBhIHByb3BlcnR5IHRoYXQgdHlwaWNhbGx5IHdvcmtzIGZvclxuICAvLyBub24tYW5vbnltb3VzIGRpdnMgYW5kIGNhdGNoIGFueSBlcnJvciB0aGF0IG1heSBvdGhlcndpc2UgYXJpc2UuIFNlZVxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0yMDg0MjdcbiAgdHJ5IHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbiAgICBjdXJyZW50UmFuZ2Uuc3RhcnRDb250YWluZXIubm9kZVR5cGU7XG4gICAgY3VycmVudFJhbmdlLmVuZENvbnRhaW5lci5ub2RlVHlwZTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBJZiB0aGUgbm9kZSBhbmQgb2Zmc2V0IHZhbHVlcyBhcmUgdGhlIHNhbWUsIHRoZSBzZWxlY3Rpb24gaXMgY29sbGFwc2VkLlxuICAvLyBgU2VsZWN0aW9uLmlzQ29sbGFwc2VkYCBpcyBhdmFpbGFibGUgbmF0aXZlbHksIGJ1dCBJRSBzb21ldGltZXMgZ2V0c1xuICAvLyB0aGlzIHZhbHVlIHdyb25nLlxuICB2YXIgaXNTZWxlY3Rpb25Db2xsYXBzZWQgPSBpc0NvbGxhcHNlZChzZWxlY3Rpb24uYW5jaG9yTm9kZSwgc2VsZWN0aW9uLmFuY2hvck9mZnNldCwgc2VsZWN0aW9uLmZvY3VzTm9kZSwgc2VsZWN0aW9uLmZvY3VzT2Zmc2V0KTtcblxuICB2YXIgcmFuZ2VMZW5ndGggPSBpc1NlbGVjdGlvbkNvbGxhcHNlZCA/IDAgOiBjdXJyZW50UmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7XG5cbiAgdmFyIHRlbXBSYW5nZSA9IGN1cnJlbnRSYW5nZS5jbG9uZVJhbmdlKCk7XG4gIHRlbXBSYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobm9kZSk7XG4gIHRlbXBSYW5nZS5zZXRFbmQoY3VycmVudFJhbmdlLnN0YXJ0Q29udGFpbmVyLCBjdXJyZW50UmFuZ2Uuc3RhcnRPZmZzZXQpO1xuXG4gIHZhciBpc1RlbXBSYW5nZUNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKHRlbXBSYW5nZS5zdGFydENvbnRhaW5lciwgdGVtcFJhbmdlLnN0YXJ0T2Zmc2V0LCB0ZW1wUmFuZ2UuZW5kQ29udGFpbmVyLCB0ZW1wUmFuZ2UuZW5kT2Zmc2V0KTtcblxuICB2YXIgc3RhcnQgPSBpc1RlbXBSYW5nZUNvbGxhcHNlZCA/IDAgOiB0ZW1wUmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7XG4gIHZhciBlbmQgPSBzdGFydCArIHJhbmdlTGVuZ3RoO1xuXG4gIC8vIERldGVjdCB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gaXMgYmFja3dhcmQuXG4gIHZhciBkZXRlY3Rpb25SYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIGRldGVjdGlvblJhbmdlLnNldFN0YXJ0KGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCk7XG4gIGRldGVjdGlvblJhbmdlLnNldEVuZChmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KTtcbiAgdmFyIGlzQmFja3dhcmQgPSBkZXRlY3Rpb25SYW5nZS5jb2xsYXBzZWQ7XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydDogaXNCYWNrd2FyZCA/IGVuZCA6IHN0YXJ0LFxuICAgIGVuZDogaXNCYWNrd2FyZCA/IHN0YXJ0IDogZW5kXG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gb2Zmc2V0c1xuICovXG5mdW5jdGlvbiBzZXRJRU9mZnNldHMobm9kZSwgb2Zmc2V0cykge1xuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKS5kdXBsaWNhdGUoKTtcbiAgdmFyIHN0YXJ0LCBlbmQ7XG5cbiAgaWYgKHR5cGVvZiBvZmZzZXRzLmVuZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzdGFydCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgZW5kID0gc3RhcnQ7XG4gIH0gZWxzZSBpZiAob2Zmc2V0cy5zdGFydCA+IG9mZnNldHMuZW5kKSB7XG4gICAgc3RhcnQgPSBvZmZzZXRzLmVuZDtcbiAgICBlbmQgPSBvZmZzZXRzLnN0YXJ0O1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICBlbmQgPSBvZmZzZXRzLmVuZDtcbiAgfVxuXG4gIHJhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KG5vZGUpO1xuICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHN0YXJ0KTtcbiAgcmFuZ2Uuc2V0RW5kUG9pbnQoJ0VuZFRvU3RhcnQnLCByYW5nZSk7XG4gIHJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIGVuZCAtIHN0YXJ0KTtcbiAgcmFuZ2Uuc2VsZWN0KCk7XG59XG5cbi8qKlxuICogSW4gbW9kZXJuIG5vbi1JRSBicm93c2Vycywgd2UgY2FuIHN1cHBvcnQgYm90aCBmb3J3YXJkIGFuZCBiYWNrd2FyZFxuICogc2VsZWN0aW9ucy5cbiAqXG4gKiBOb3RlOiBJRTEwKyBzdXBwb3J0cyB0aGUgU2VsZWN0aW9uIG9iamVjdCwgYnV0IGl0IGRvZXMgbm90IHN1cHBvcnRcbiAqIHRoZSBgZXh0ZW5kYCBtZXRob2QsIHdoaWNoIG1lYW5zIHRoYXQgZXZlbiBpbiBtb2Rlcm4gSUUsIGl0J3Mgbm90IHBvc3NpYmxlXG4gKiB0byBwcm9ncmFtYXRpY2FsbHkgY3JlYXRlIGEgYmFja3dhcmQgc2VsZWN0aW9uLiBUaHVzLCBmb3IgYWxsIElFXG4gKiB2ZXJzaW9ucywgd2UgdXNlIHRoZSBvbGQgSUUgQVBJIHRvIGNyZWF0ZSBvdXIgc2VsZWN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gKi9cbmZ1bmN0aW9uIHNldE1vZGVybk9mZnNldHMobm9kZSwgb2Zmc2V0cykge1xuICBpZiAoIXdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICB2YXIgbGVuZ3RoID0gbm9kZVtnZXRUZXh0Q29udGVudEFjY2Vzc29yKCldLmxlbmd0aDtcbiAgdmFyIHN0YXJ0ID0gTWF0aC5taW4ob2Zmc2V0cy5zdGFydCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IHR5cGVvZiBvZmZzZXRzLmVuZCA9PT0gJ3VuZGVmaW5lZCcgPyBzdGFydCA6IE1hdGgubWluKG9mZnNldHMuZW5kLCBsZW5ndGgpO1xuXG4gIC8vIElFIDExIHVzZXMgbW9kZXJuIHNlbGVjdGlvbiwgYnV0IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgZXh0ZW5kIG1ldGhvZC5cbiAgLy8gRmxpcCBiYWNrd2FyZCBzZWxlY3Rpb25zLCBzbyB3ZSBjYW4gc2V0IHdpdGggYSBzaW5nbGUgcmFuZ2UuXG4gIGlmICghc2VsZWN0aW9uLmV4dGVuZCAmJiBzdGFydCA+IGVuZCkge1xuICAgIHZhciB0ZW1wID0gZW5kO1xuICAgIGVuZCA9IHN0YXJ0O1xuICAgIHN0YXJ0ID0gdGVtcDtcbiAgfVxuXG4gIHZhciBzdGFydE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQobm9kZSwgc3RhcnQpO1xuICB2YXIgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBlbmQpO1xuXG4gIGlmIChzdGFydE1hcmtlciAmJiBlbmRNYXJrZXIpIHtcbiAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0TWFya2VyLm5vZGUsIHN0YXJ0TWFya2VyLm9mZnNldCk7XG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgc2VsZWN0aW9uLmV4dGVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlLnNldEVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdXNlSUVPZmZzZXRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdzZWxlY3Rpb24nIGluIGRvY3VtZW50ICYmICEoJ2dldFNlbGVjdGlvbicgaW4gd2luZG93KTtcblxudmFyIFJlYWN0RE9NU2VsZWN0aW9uID0ge1xuICAvKipcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqL1xuICBnZXRPZmZzZXRzOiB1c2VJRU9mZnNldHMgPyBnZXRJRU9mZnNldHMgOiBnZXRNb2Rlcm5PZmZzZXRzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAgICovXG4gIHNldE9mZnNldHM6IHVzZUlFT2Zmc2V0cyA/IHNldElFT2Zmc2V0cyA6IHNldE1vZGVybk9mZnNldHNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01TZWxlY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NU2VydmVyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3REZWZhdWx0SW5qZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdERlZmF1bHRJbmplY3Rpb24nKTtcbnZhciBSZWFjdFNlcnZlclJlbmRlcmluZyA9IHJlcXVpcmUoJy4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmcnKTtcbnZhciBSZWFjdFZlcnNpb24gPSByZXF1aXJlKCcuL1JlYWN0VmVyc2lvbicpO1xuXG5SZWFjdERlZmF1bHRJbmplY3Rpb24uaW5qZWN0KCk7XG5cbnZhciBSZWFjdERPTVNlcnZlciA9IHtcbiAgcmVuZGVyVG9TdHJpbmc6IFJlYWN0U2VydmVyUmVuZGVyaW5nLnJlbmRlclRvU3RyaW5nLFxuICByZW5kZXJUb1N0YXRpY01hcmt1cDogUmVhY3RTZXJ2ZXJSZW5kZXJpbmcucmVuZGVyVG9TdGF0aWNNYXJrdXAsXG4gIHZlcnNpb246IFJlYWN0VmVyc2lvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVNlcnZlcjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01UZXh0Q29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zJyk7XG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMnKTtcbnZhciBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKCcuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcicpO1xudmFyIHNldFRleHRDb250ZW50ID0gcmVxdWlyZSgnLi9zZXRUZXh0Q29udGVudCcpO1xudmFyIHZhbGlkYXRlRE9NTmVzdGluZyA9IHJlcXVpcmUoJy4vdmFsaWRhdGVET01OZXN0aW5nJyk7XG5cbi8qKlxuICogVGV4dCBub2RlcyB2aW9sYXRlIGEgY291cGxlIGFzc3VtcHRpb25zIHRoYXQgUmVhY3QgbWFrZXMgYWJvdXQgY29tcG9uZW50czpcbiAqXG4gKiAgLSBXaGVuIG1vdW50aW5nIHRleHQgaW50byB0aGUgRE9NLCBhZGphY2VudCB0ZXh0IG5vZGVzIGFyZSBtZXJnZWQuXG4gKiAgLSBUZXh0IG5vZGVzIGNhbm5vdCBiZSBhc3NpZ25lZCBhIFJlYWN0IHJvb3QgSUQuXG4gKlxuICogVGhpcyBjb21wb25lbnQgaXMgdXNlZCB0byB3cmFwIHN0cmluZ3MgaW4gZWxlbWVudHMgc28gdGhhdCB0aGV5IGNhbiB1bmRlcmdvXG4gKiB0aGUgc2FtZSByZWNvbmNpbGlhdGlvbiB0aGF0IGlzIGFwcGxpZWQgdG8gZWxlbWVudHMuXG4gKlxuICogVE9ETzogSW52ZXN0aWdhdGUgcmVwcmVzZW50aW5nIFJlYWN0IGNvbXBvbmVudHMgaW4gdGhlIERPTSB3aXRoIHRleHQgbm9kZXMuXG4gKlxuICogQGNsYXNzIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICogQGV4dGVuZHMgUmVhY3RDb21wb25lbnRcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RET01UZXh0Q29tcG9uZW50ID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gIC8vIFRoaXMgY29uc3RydWN0b3IgYW5kIGl0cyBhcmd1bWVudCBpcyBjdXJyZW50bHkgdXNlZCBieSBtb2Nrcy5cbn07XG5cbmFzc2lnbihSZWFjdERPTVRleHRDb21wb25lbnQucHJvdG90eXBlLCB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVhY3RUZXh0fSB0ZXh0XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0OiBmdW5jdGlvbiAodGV4dCkge1xuICAgIC8vIFRPRE86IFRoaXMgaXMgcmVhbGx5IGEgUmVhY3RUZXh0IChSZWFjdE5vZGUpLCBub3QgYSBSZWFjdEVsZW1lbnRcbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IHRleHQ7XG4gICAgdGhpcy5fc3RyaW5nVGV4dCA9ICcnICsgdGV4dDtcblxuICAgIC8vIFByb3BlcnRpZXNcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgICB0aGlzLl9tb3VudEluZGV4ID0gMDtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgbWFya3VwIGZvciB0aGlzIHRleHQgbm9kZS4gVGhpcyBub2RlIGlzIG5vdCBpbnRlbmRlZCB0byBoYXZlXG4gICAqIGFueSBmZWF0dXJlcyBiZXNpZGVzIGNvbnRhaW5pbmcgdGV4dCBjb250ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgZm9yIHRoaXMgdGV4dCBub2RlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAocm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY29udGV4dFt2YWxpZGF0ZURPTU5lc3RpbmcuYW5jZXN0b3JJbmZvQ29udGV4dEtleV0pIHtcbiAgICAgICAgdmFsaWRhdGVET01OZXN0aW5nKCdzcGFuJywgbnVsbCwgY29udGV4dFt2YWxpZGF0ZURPTU5lc3RpbmcuYW5jZXN0b3JJbmZvQ29udGV4dEtleV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSByb290SUQ7XG4gICAgaWYgKHRyYW5zYWN0aW9uLnVzZUNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIHZhciBvd25lckRvY3VtZW50ID0gY29udGV4dFtSZWFjdE1vdW50Lm93bmVyRG9jdW1lbnRDb250ZXh0S2V5XTtcbiAgICAgIHZhciBlbCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldEF0dHJpYnV0ZUZvcklEKGVsLCByb290SUQpO1xuICAgICAgLy8gUG9wdWxhdGUgbm9kZSBjYWNoZVxuICAgICAgUmVhY3RNb3VudC5nZXRJRChlbCk7XG4gICAgICBzZXRUZXh0Q29udGVudChlbCwgdGhpcy5fc3RyaW5nVGV4dCk7XG4gICAgICByZXR1cm4gZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlc2NhcGVkVGV4dCA9IGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0aGlzLl9zdHJpbmdUZXh0KTtcblxuICAgICAgaWYgKHRyYW5zYWN0aW9uLnJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gICAgICAgIC8vIE5vcm1hbGx5IHdlJ2Qgd3JhcCB0aGlzIGluIGEgYHNwYW5gIGZvciB0aGUgcmVhc29ucyBzdGF0ZWQgYWJvdmUsIGJ1dFxuICAgICAgICAvLyBzaW5jZSB0aGlzIGlzIGEgc2l0dWF0aW9uIHdoZXJlIFJlYWN0IHdvbid0IHRha2Ugb3ZlciAoc3RhdGljIHBhZ2VzKSxcbiAgICAgICAgLy8gd2UgY2FuIHNpbXBseSByZXR1cm4gdGhlIHRleHQgYXMgaXQgaXMuXG4gICAgICAgIHJldHVybiBlc2NhcGVkVGV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICc8c3BhbiAnICsgRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvcklEKHJvb3RJRCkgKyAnPicgKyBlc2NhcGVkVGV4dCArICc8L3NwYW4+JztcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhpcyBjb21wb25lbnQgYnkgdXBkYXRpbmcgdGhlIHRleHQgY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFRleHR9IG5leHRUZXh0IFRoZSBuZXh0IHRleHQgY29udGVudFxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24gKG5leHRUZXh0LCB0cmFuc2FjdGlvbikge1xuICAgIGlmIChuZXh0VGV4dCAhPT0gdGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dFRleHQ7XG4gICAgICB2YXIgbmV4dFN0cmluZ1RleHQgPSAnJyArIG5leHRUZXh0O1xuICAgICAgaWYgKG5leHRTdHJpbmdUZXh0ICE9PSB0aGlzLl9zdHJpbmdUZXh0KSB7XG4gICAgICAgIC8vIFRPRE86IFNhdmUgdGhpcyBhcyBwZW5kaW5nIHByb3BzIGFuZCB1c2UgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5XG4gICAgICAgIC8vIGFuZC9vciB1cGRhdGVDb21wb25lbnQgdG8gZG8gdGhlIGFjdHVhbCB1cGRhdGUgZm9yIGNvbnNpc3RlbmN5IHdpdGhcbiAgICAgICAgLy8gb3RoZXIgY29tcG9uZW50IHR5cGVzP1xuICAgICAgICB0aGlzLl9zdHJpbmdUZXh0ID0gbmV4dFN0cmluZ1RleHQ7XG4gICAgICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMudXBkYXRlVGV4dENvbnRlbnQobm9kZSwgbmV4dFN0cmluZ1RleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50KHRoaXMuX3Jvb3ROb2RlSUQpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NVGV4dENvbXBvbmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01UZXh0YXJlYVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKCcuL0xpbmtlZFZhbHVlVXRpbHMnKTtcbnZhciBSZWFjdERPTUlET3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vUmVhY3RET01JRE9wZXJhdGlvbnMnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gZm9yY2VVcGRhdGVJZk1vdW50ZWQoKSB7XG4gIGlmICh0aGlzLl9yb290Tm9kZUlEKSB7XG4gICAgLy8gRE9NIGNvbXBvbmVudCBpcyBzdGlsbCBtb3VudGVkOyB1cGRhdGVcbiAgICBSZWFjdERPTVRleHRhcmVhLnVwZGF0ZVdyYXBwZXIodGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPHRleHRhcmVhPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgYWxsb3dzIHNldHRpbmcgYHZhbHVlYCwgYW5kXG4gKiBgZGVmYXVsdFZhbHVlYC4gVGhpcyBkaWZmZXJzIGZyb20gdGhlIHRyYWRpdGlvbmFsIERPTSBBUEkgYmVjYXVzZSB2YWx1ZSBpc1xuICogdXN1YWxseSBzZXQgYXMgUENEQVRBIGNoaWxkcmVuLlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgbm90IHN1cHBsaWVkIChvciBudWxsL3VuZGVmaW5lZCksIHVzZXIgYWN0aW9ucyB0aGF0IGFmZmVjdCB0aGVcbiAqIHZhbHVlIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsXG4gKiBub3QgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LiBJbnN0ZWFkLCB0aGUgYHZhbHVlYCBwcm9wIG11c3QgY2hhbmdlIGluXG4gKiBvcmRlciBmb3IgdGhlIHJlbmRlcmVkIGVsZW1lbnQgdG8gYmUgdXBkYXRlZC5cbiAqXG4gKiBUaGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIGJlIGluaXRpYWxpemVkIHdpdGggYW4gZW1wdHkgdmFsdWUsIHRoZSBwcm9wXG4gKiBgZGVmYXVsdFZhbHVlYCBpZiBzcGVjaWZpZWQsIG9yIHRoZSBjaGlsZHJlbiBjb250ZW50IChkZXByZWNhdGVkKS5cbiAqL1xudmFyIFJlYWN0RE9NVGV4dGFyZWEgPSB7XG4gIGdldE5hdGl2ZVByb3BzOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMsIGNvbnRleHQpIHtcbiAgICAhKHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2BkYW5nZXJvdXNseVNldElubmVySFRNTGAgZG9lcyBub3QgbWFrZSBzZW5zZSBvbiA8dGV4dGFyZWE+LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIEFsd2F5cyBzZXQgY2hpbGRyZW4gdG8gdGhlIHNhbWUgdGhpbmcuIEluIElFOSwgdGhlIHNlbGVjdGlvbiByYW5nZSB3aWxsXG4gICAgLy8gZ2V0IHJlc2V0IGlmIGB0ZXh0Q29udGVudGAgaXMgbXV0YXRlZC5cbiAgICB2YXIgbmF0aXZlUHJvcHMgPSBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICBjaGlsZHJlbjogaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSxcbiAgICAgIG9uQ2hhbmdlOiBpbnN0Ll93cmFwcGVyU3RhdGUub25DaGFuZ2VcbiAgICB9KTtcblxuICAgIHJldHVybiBuYXRpdmVQcm9wcztcbiAgfSxcblxuICBtb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBMaW5rZWRWYWx1ZVV0aWxzLmNoZWNrUHJvcFR5cGVzKCd0ZXh0YXJlYScsIHByb3BzLCBpbnN0Ll9jdXJyZW50RWxlbWVudC5fb3duZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWU7XG4gICAgLy8gVE9ETyAoeXVuZ3N0ZXJzKTogUmVtb3ZlIHN1cHBvcnQgZm9yIGNoaWxkcmVuIGNvbnRlbnQgaW4gPHRleHRhcmVhPi5cbiAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgaW5zdGVhZCBvZiBzZXR0aW5nICcgKyAnY2hpbGRyZW4gb24gPHRleHRhcmVhPi4nKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgICEoZGVmYXVsdFZhbHVlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0lmIHlvdSBzdXBwbHkgYGRlZmF1bHRWYWx1ZWAgb24gYSA8dGV4dGFyZWE+LCBkbyBub3QgcGFzcyBjaGlsZHJlbi4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgIShjaGlsZHJlbi5sZW5ndGggPD0gMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnPHRleHRhcmVhPiBjYW4gb25seSBoYXZlIGF0IG1vc3Qgb25lIGNoaWxkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlblswXTtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdFZhbHVlID0gJycgKyBjaGlsZHJlbjtcbiAgICB9XG4gICAgaWYgKGRlZmF1bHRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICBkZWZhdWx0VmFsdWUgPSAnJztcbiAgICB9XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG5cbiAgICBpbnN0Ll93cmFwcGVyU3RhdGUgPSB7XG4gICAgICAvLyBXZSBzYXZlIHRoZSBpbml0aWFsIHZhbHVlIHNvIHRoYXQgYFJlYWN0RE9NQ29tcG9uZW50YCBkb2Vzbid0IHVwZGF0ZVxuICAgICAgLy8gYHRleHRDb250ZW50YCAodW5uZWNlc3Nhcnkgc2luY2Ugd2UgdXBkYXRlIHZhbHVlKS5cbiAgICAgIC8vIFRoZSBpbml0aWFsIHZhbHVlIGNhbiBiZSBhIGJvb2xlYW4gb3Igb2JqZWN0IHNvIHRoYXQncyB3aHkgaXQnc1xuICAgICAgLy8gZm9yY2VkIHRvIGJlIGEgc3RyaW5nLlxuICAgICAgaW5pdGlhbFZhbHVlOiAnJyArICh2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBkZWZhdWx0VmFsdWUpLFxuICAgICAgb25DaGFuZ2U6IF9oYW5kbGVDaGFuZ2UuYmluZChpbnN0KVxuICAgIH07XG4gIH0sXG5cbiAgdXBkYXRlV3JhcHBlcjogZnVuY3Rpb24gKGluc3QpIHtcbiAgICB2YXIgcHJvcHMgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgLy8gQ2FzdCBgdmFsdWVgIHRvIGEgc3RyaW5nIHRvIGVuc3VyZSB0aGUgdmFsdWUgaXMgc2V0IGNvcnJlY3RseS4gV2hpbGVcbiAgICAgIC8vIGJyb3dzZXJzIHR5cGljYWxseSBkbyB0aGlzIGFzIG5lY2Vzc2FyeSwganNkb20gZG9lc24ndC5cbiAgICAgIFJlYWN0RE9NSURPcGVyYXRpb25zLnVwZGF0ZVByb3BlcnR5QnlJRChpbnN0Ll9yb290Tm9kZUlELCAndmFsdWUnLCAnJyArIHZhbHVlKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gIHZhciByZXR1cm5WYWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZXhlY3V0ZU9uQ2hhbmdlKHByb3BzLCBldmVudCk7XG4gIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NVGV4dGFyZWE7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9UcmFuc2FjdGlvbicpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcblxudmFyIFJFU0VUX0JBVENIRURfVVBEQVRFUyA9IHtcbiAgaW5pdGlhbGl6ZTogZW1wdHlGdW5jdGlvbixcbiAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBGTFVTSF9CQVRDSEVEX1VQREFURVMgPSB7XG4gIGluaXRpYWxpemU6IGVtcHR5RnVuY3Rpb24sXG4gIGNsb3NlOiBSZWFjdFVwZGF0ZXMuZmx1c2hCYXRjaGVkVXBkYXRlcy5iaW5kKFJlYWN0VXBkYXRlcylcbn07XG5cbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtGTFVTSF9CQVRDSEVEX1VQREFURVMsIFJFU0VUX0JBVENIRURfVVBEQVRFU107XG5cbmZ1bmN0aW9uIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbigpIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xufVxuXG5hc3NpZ24oUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uLnByb3RvdHlwZSwgVHJhbnNhY3Rpb24uTWl4aW4sIHtcbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfVxufSk7XG5cbnZhciB0cmFuc2FjdGlvbiA9IG5ldyBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24oKTtcblxudmFyIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kgPSB7XG4gIGlzQmF0Y2hpbmdVcGRhdGVzOiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gaW4gYSBjb250ZXh0IHdpdGhpbiB3aGljaCBjYWxscyB0byBgc2V0U3RhdGVgXG4gICAqIGFuZCBmcmllbmRzIGFyZSBiYXRjaGVkIHN1Y2ggdGhhdCBjb21wb25lbnRzIGFyZW4ndCB1cGRhdGVkIHVubmVjZXNzYXJpbHkuXG4gICAqL1xuICBiYXRjaGVkVXBkYXRlczogZnVuY3Rpb24gKGNhbGxiYWNrLCBhLCBiLCBjLCBkLCBlKSB7XG4gICAgdmFyIGFscmVhZHlCYXRjaGluZ1VwZGF0ZXMgPSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzO1xuXG4gICAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA9IHRydWU7XG5cbiAgICAvLyBUaGUgY29kZSBpcyB3cml0dGVuIHRoaXMgd2F5IHRvIGF2b2lkIGV4dHJhIGFsbG9jYXRpb25zXG4gICAgaWYgKGFscmVhZHlCYXRjaGluZ1VwZGF0ZXMpIHtcbiAgICAgIGNhbGxiYWNrKGEsIGIsIGMsIGQsIGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2FjdGlvbi5wZXJmb3JtKGNhbGxiYWNrLCBudWxsLCBhLCBiLCBjLCBkLCBlKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3REZWZhdWx0SW5qZWN0aW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQmVmb3JlSW5wdXRFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vQmVmb3JlSW5wdXRFdmVudFBsdWdpbicpO1xudmFyIENoYW5nZUV2ZW50UGx1Z2luID0gcmVxdWlyZSgnLi9DaGFuZ2VFdmVudFBsdWdpbicpO1xudmFyIENsaWVudFJlYWN0Um9vdEluZGV4ID0gcmVxdWlyZSgnLi9DbGllbnRSZWFjdFJvb3RJbmRleCcpO1xudmFyIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyID0gcmVxdWlyZSgnLi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlcicpO1xudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vRW50ZXJMZWF2ZUV2ZW50UGx1Z2luJyk7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIEhUTUxET01Qcm9wZXJ0eUNvbmZpZyA9IHJlcXVpcmUoJy4vSFRNTERPTVByb3BlcnR5Q29uZmlnJyk7XG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKCcuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluJyk7XG52YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50Jyk7XG52YXIgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSA9IHJlcXVpcmUoJy4vUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneScpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudCcpO1xudmFyIFJlYWN0RE9NVGV4dENvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RET01UZXh0Q29tcG9uZW50Jyk7XG52YXIgUmVhY3RFdmVudExpc3RlbmVyID0gcmVxdWlyZSgnLi9SZWFjdEV2ZW50TGlzdGVuZXInKTtcbnZhciBSZWFjdEluamVjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbmplY3Rpb24nKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZUhhbmRsZXMnKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG52YXIgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbicpO1xudmFyIFNlbGVjdEV2ZW50UGx1Z2luID0gcmVxdWlyZSgnLi9TZWxlY3RFdmVudFBsdWdpbicpO1xudmFyIFNlcnZlclJlYWN0Um9vdEluZGV4ID0gcmVxdWlyZSgnLi9TZXJ2ZXJSZWFjdFJvb3RJbmRleCcpO1xudmFyIFNpbXBsZUV2ZW50UGx1Z2luID0gcmVxdWlyZSgnLi9TaW1wbGVFdmVudFBsdWdpbicpO1xudmFyIFNWR0RPTVByb3BlcnR5Q29uZmlnID0gcmVxdWlyZSgnLi9TVkdET01Qcm9wZXJ0eUNvbmZpZycpO1xuXG52YXIgYWxyZWFkeUluamVjdGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGluamVjdCgpIHtcbiAgaWYgKGFscmVhZHlJbmplY3RlZCkge1xuICAgIC8vIFRPRE86IFRoaXMgaXMgY3VycmVudGx5IHRydWUgYmVjYXVzZSB0aGVzZSBpbmplY3Rpb25zIGFyZSBzaGFyZWQgYmV0d2VlblxuICAgIC8vIHRoZSBjbGllbnQgYW5kIHRoZSBzZXJ2ZXIgcGFja2FnZS4gVGhleSBzaG91bGQgYmUgYnVpbHQgaW5kZXBlbmRlbnRseVxuICAgIC8vIGFuZCBub3Qgc2hhcmUgYW55IGluamVjdGlvbiBzdGF0ZS4gVGhlbiB0aGlzIHByb2JsZW0gd2lsbCBiZSBzb2x2ZWQuXG4gICAgcmV0dXJuO1xuICB9XG4gIGFscmVhZHlJbmplY3RlZCA9IHRydWU7XG5cbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRFbWl0dGVyLmluamVjdFJlYWN0RXZlbnRMaXN0ZW5lcihSZWFjdEV2ZW50TGlzdGVuZXIpO1xuXG4gIC8qKlxuICAgKiBJbmplY3QgbW9kdWxlcyBmb3IgcmVzb2x2aW5nIERPTSBoaWVyYXJjaHkgYW5kIHBsdWdpbiBvcmRlcmluZy5cbiAgICovXG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIpO1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RJbnN0YW5jZUhhbmRsZShSZWFjdEluc3RhbmNlSGFuZGxlcyk7XG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdE1vdW50KFJlYWN0TW91bnQpO1xuXG4gIC8qKlxuICAgKiBTb21lIGltcG9ydGFudCBldmVudCBwbHVnaW5zIGluY2x1ZGVkIGJ5IGRlZmF1bHQgKHdpdGhvdXQgaGF2aW5nIHRvIHJlcXVpcmVcbiAgICogdGhlbSkuXG4gICAqL1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1xuICAgIFNpbXBsZUV2ZW50UGx1Z2luOiBTaW1wbGVFdmVudFBsdWdpbixcbiAgICBFbnRlckxlYXZlRXZlbnRQbHVnaW46IEVudGVyTGVhdmVFdmVudFBsdWdpbixcbiAgICBDaGFuZ2VFdmVudFBsdWdpbjogQ2hhbmdlRXZlbnRQbHVnaW4sXG4gICAgU2VsZWN0RXZlbnRQbHVnaW46IFNlbGVjdEV2ZW50UGx1Z2luLFxuICAgIEJlZm9yZUlucHV0RXZlbnRQbHVnaW46IEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cbiAgfSk7XG5cbiAgUmVhY3RJbmplY3Rpb24uTmF0aXZlQ29tcG9uZW50LmluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzcyhSZWFjdERPTUNvbXBvbmVudCk7XG5cbiAgUmVhY3RJbmplY3Rpb24uTmF0aXZlQ29tcG9uZW50LmluamVjdFRleHRDb21wb25lbnRDbGFzcyhSZWFjdERPTVRleHRDb21wb25lbnQpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkNsYXNzLmluamVjdE1peGluKFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluKTtcblxuICBSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhIVE1MRE9NUHJvcGVydHlDb25maWcpO1xuICBSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhTVkdET01Qcm9wZXJ0eUNvbmZpZyk7XG5cbiAgUmVhY3RJbmplY3Rpb24uRW1wdHlDb21wb25lbnQuaW5qZWN0RW1wdHlDb21wb25lbnQoJ25vc2NyaXB0Jyk7XG5cbiAgUmVhY3RJbmplY3Rpb24uVXBkYXRlcy5pbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbihSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKTtcbiAgUmVhY3RJbmplY3Rpb24uVXBkYXRlcy5pbmplY3RCYXRjaGluZ1N0cmF0ZWd5KFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLlJvb3RJbmRleC5pbmplY3RDcmVhdGVSZWFjdFJvb3RJbmRleChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBDbGllbnRSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCA6IFNlcnZlclJlYWN0Um9vdEluZGV4LmNyZWF0ZVJlYWN0Um9vdEluZGV4KTtcblxuICBSZWFjdEluamVjdGlvbi5Db21wb25lbnQuaW5qZWN0RW52aXJvbm1lbnQoUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIHVybCA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiB3aW5kb3cubG9jYXRpb24uaHJlZiB8fCAnJztcbiAgICBpZiAoL1s/Jl1yZWFjdF9wZXJmXFxiLy50ZXN0KHVybCkpIHtcbiAgICAgIHZhciBSZWFjdERlZmF1bHRQZXJmID0gcmVxdWlyZSgnLi9SZWFjdERlZmF1bHRQZXJmJyk7XG4gICAgICBSZWFjdERlZmF1bHRQZXJmLnN0YXJ0KCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpbmplY3Q6IGluamVjdFxufTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3REZWZhdWx0UGVyZlxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbnZhciBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMgPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdFBlcmZBbmFseXNpcycpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xuXG52YXIgcGVyZm9ybWFuY2VOb3cgPSByZXF1aXJlKCdmYmpzL2xpYi9wZXJmb3JtYW5jZU5vdycpO1xuXG5mdW5jdGlvbiByb3VuZEZsb2F0KHZhbCkge1xuICByZXR1cm4gTWF0aC5mbG9vcih2YWwgKiAxMDApIC8gMTAwO1xufVxuXG5mdW5jdGlvbiBhZGRWYWx1ZShvYmosIGtleSwgdmFsKSB7XG4gIG9ialtrZXldID0gKG9ialtrZXldIHx8IDApICsgdmFsO1xufVxuXG52YXIgUmVhY3REZWZhdWx0UGVyZiA9IHtcbiAgX2FsbE1lYXN1cmVtZW50czogW10sIC8vIGxhc3QgaXRlbSBpbiB0aGUgbGlzdCBpcyB0aGUgY3VycmVudCBvbmVcbiAgX21vdW50U3RhY2s6IFswXSxcbiAgX2luamVjdGVkOiBmYWxzZSxcblxuICBzdGFydDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghUmVhY3REZWZhdWx0UGVyZi5faW5qZWN0ZWQpIHtcbiAgICAgIFJlYWN0UGVyZi5pbmplY3Rpb24uaW5qZWN0TWVhc3VyZShSZWFjdERlZmF1bHRQZXJmLm1lYXN1cmUpO1xuICAgIH1cblxuICAgIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5sZW5ndGggPSAwO1xuICAgIFJlYWN0UGVyZi5lbmFibGVNZWFzdXJlID0gdHJ1ZTtcbiAgfSxcblxuICBzdG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgUmVhY3RQZXJmLmVuYWJsZU1lYXN1cmUgPSBmYWxzZTtcbiAgfSxcblxuICBnZXRMYXN0TWVhc3VyZW1lbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cztcbiAgfSxcblxuICBwcmludEV4Y2x1c2l2ZTogZnVuY3Rpb24gKG1lYXN1cmVtZW50cykge1xuICAgIG1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cyB8fCBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHM7XG4gICAgdmFyIHN1bW1hcnkgPSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0RXhjbHVzaXZlU3VtbWFyeShtZWFzdXJlbWVudHMpO1xuICAgIGNvbnNvbGUudGFibGUoc3VtbWFyeS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdDb21wb25lbnQgY2xhc3MgbmFtZSc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ1RvdGFsIGluY2x1c2l2ZSB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uaW5jbHVzaXZlKSxcbiAgICAgICAgJ0V4Y2x1c2l2ZSBtb3VudCB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uZXhjbHVzaXZlKSxcbiAgICAgICAgJ0V4Y2x1c2l2ZSByZW5kZXIgdGltZSAobXMpJzogcm91bmRGbG9hdChpdGVtLnJlbmRlciksXG4gICAgICAgICdNb3VudCB0aW1lIHBlciBpbnN0YW5jZSAobXMpJzogcm91bmRGbG9hdChpdGVtLmV4Y2x1c2l2ZSAvIGl0ZW0uY291bnQpLFxuICAgICAgICAnUmVuZGVyIHRpbWUgcGVyIGluc3RhbmNlIChtcyknOiByb3VuZEZsb2F0KGl0ZW0ucmVuZGVyIC8gaXRlbS5jb3VudCksXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pKTtcbiAgICAvLyBUT0RPOiBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKCkgZG9lcyBub3QgcmV0dXJuIHRoZSBjb3JyZWN0XG4gICAgLy8gbnVtYmVyLlxuICB9LFxuXG4gIHByaW50SW5jbHVzaXZlOiBmdW5jdGlvbiAobWVhc3VyZW1lbnRzKSB7XG4gICAgbWVhc3VyZW1lbnRzID0gbWVhc3VyZW1lbnRzIHx8IFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cztcbiAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRJbmNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cyk7XG4gICAgY29uc29sZS50YWJsZShzdW1tYXJ5Lm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ093bmVyID4gY29tcG9uZW50JzogaXRlbS5jb21wb25lbnROYW1lLFxuICAgICAgICAnSW5jbHVzaXZlIHRpbWUgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS50aW1lKSxcbiAgICAgICAgJ0luc3RhbmNlcyc6IGl0ZW0uY291bnRcbiAgICAgIH07XG4gICAgfSkpO1xuICAgIGNvbnNvbGUubG9nKCdUb3RhbCB0aW1lOicsIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRUb3RhbFRpbWUobWVhc3VyZW1lbnRzKS50b0ZpeGVkKDIpICsgJyBtcycpO1xuICB9LFxuXG4gIGdldE1lYXN1cmVtZW50c1N1bW1hcnlNYXA6IGZ1bmN0aW9uIChtZWFzdXJlbWVudHMpIHtcbiAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRJbmNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cywgdHJ1ZSk7XG4gICAgcmV0dXJuIHN1bW1hcnkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnT3duZXIgPiBjb21wb25lbnQnOiBpdGVtLmNvbXBvbmVudE5hbWUsXG4gICAgICAgICdXYXN0ZWQgdGltZSAobXMpJzogaXRlbS50aW1lLFxuICAgICAgICAnSW5zdGFuY2VzJzogaXRlbS5jb3VudFxuICAgICAgfTtcbiAgICB9KTtcbiAgfSxcblxuICBwcmludFdhc3RlZDogZnVuY3Rpb24gKG1lYXN1cmVtZW50cykge1xuICAgIG1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cyB8fCBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHM7XG4gICAgY29uc29sZS50YWJsZShSZWFjdERlZmF1bHRQZXJmLmdldE1lYXN1cmVtZW50c1N1bW1hcnlNYXAobWVhc3VyZW1lbnRzKSk7XG4gICAgY29uc29sZS5sb2coJ1RvdGFsIHRpbWU6JywgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldFRvdGFsVGltZShtZWFzdXJlbWVudHMpLnRvRml4ZWQoMikgKyAnIG1zJyk7XG4gIH0sXG5cbiAgcHJpbnRET006IGZ1bmN0aW9uIChtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldERPTVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICByZXN1bHRbRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUVdID0gaXRlbS5pZDtcbiAgICAgIHJlc3VsdC50eXBlID0gaXRlbS50eXBlO1xuICAgICAgcmVzdWx0LmFyZ3MgPSBKU09OLnN0cmluZ2lmeShpdGVtLmFyZ3MpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KSk7XG4gICAgY29uc29sZS5sb2coJ1RvdGFsIHRpbWU6JywgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldFRvdGFsVGltZShtZWFzdXJlbWVudHMpLnRvRml4ZWQoMikgKyAnIG1zJyk7XG4gIH0sXG5cbiAgX3JlY29yZFdyaXRlOiBmdW5jdGlvbiAoaWQsIGZuTmFtZSwgdG90YWxUaW1lLCBhcmdzKSB7XG4gICAgLy8gVE9ETzogdG90YWxUaW1lIGlzbid0IHRoYXQgdXNlZnVsIHNpbmNlIGl0IGRvZXNuJ3QgY291bnQgcGFpbnRzL3JlZmxvd3NcbiAgICB2YXIgd3JpdGVzID0gUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzW1JlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5sZW5ndGggLSAxXS53cml0ZXM7XG4gICAgd3JpdGVzW2lkXSA9IHdyaXRlc1tpZF0gfHwgW107XG4gICAgd3JpdGVzW2lkXS5wdXNoKHtcbiAgICAgIHR5cGU6IGZuTmFtZSxcbiAgICAgIHRpbWU6IHRvdGFsVGltZSxcbiAgICAgIGFyZ3M6IGFyZ3NcbiAgICB9KTtcbiAgfSxcblxuICBtZWFzdXJlOiBmdW5jdGlvbiAobW9kdWxlTmFtZSwgZm5OYW1lLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHZhciB0b3RhbFRpbWU7XG4gICAgICB2YXIgcnY7XG4gICAgICB2YXIgc3RhcnQ7XG5cbiAgICAgIGlmIChmbk5hbWUgPT09ICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCcgfHwgZm5OYW1lID09PSAnZmx1c2hCYXRjaGVkVXBkYXRlcycpIHtcbiAgICAgICAgLy8gQSBcIm1lYXN1cmVtZW50XCIgaXMgYSBzZXQgb2YgbWV0cmljcyByZWNvcmRlZCBmb3IgZWFjaCBmbHVzaC4gV2Ugd2FudFxuICAgICAgICAvLyB0byBncm91cCB0aGUgbWV0cmljcyBmb3IgYSBnaXZlbiBmbHVzaCB0b2dldGhlciBzbyB3ZSBjYW4gbG9vayBhdCB0aGVcbiAgICAgICAgLy8gY29tcG9uZW50cyB0aGF0IHJlbmRlcmVkIGFuZCB0aGUgRE9NIG9wZXJhdGlvbnMgdGhhdCBhY3R1YWxseVxuICAgICAgICAvLyBoYXBwZW5lZCB0byBkZXRlcm1pbmUgdGhlIGFtb3VudCBvZiBcIndhc3RlZCB3b3JrXCIgcGVyZm9ybWVkLlxuICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMucHVzaCh7XG4gICAgICAgICAgZXhjbHVzaXZlOiB7fSxcbiAgICAgICAgICBpbmNsdXNpdmU6IHt9LFxuICAgICAgICAgIHJlbmRlcjoge30sXG4gICAgICAgICAgY291bnRzOiB7fSxcbiAgICAgICAgICB3cml0ZXM6IHt9LFxuICAgICAgICAgIGRpc3BsYXlOYW1lczoge30sXG4gICAgICAgICAgdG90YWxUaW1lOiAwLFxuICAgICAgICAgIGNyZWF0ZWQ6IHt9XG4gICAgICAgIH0pO1xuICAgICAgICBzdGFydCA9IHBlcmZvcm1hbmNlTm93KCk7XG4gICAgICAgIHJ2ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzW1JlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5sZW5ndGggLSAxXS50b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSBpZiAoZm5OYW1lID09PSAnX21vdW50SW1hZ2VJbnRvTm9kZScgfHwgbW9kdWxlTmFtZSA9PT0gJ1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlcicgfHwgbW9kdWxlTmFtZSA9PT0gJ1JlYWN0RE9NSURPcGVyYXRpb25zJyB8fCBtb2R1bGVOYW1lID09PSAnQ1NTUHJvcGVydHlPcGVyYXRpb25zJyB8fCBtb2R1bGVOYW1lID09PSAnRE9NQ2hpbGRyZW5PcGVyYXRpb25zJyB8fCBtb2R1bGVOYW1lID09PSAnRE9NUHJvcGVydHlPcGVyYXRpb25zJykge1xuICAgICAgICBzdGFydCA9IHBlcmZvcm1hbmNlTm93KCk7XG4gICAgICAgIHJ2ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgdG90YWxUaW1lID0gcGVyZm9ybWFuY2VOb3coKSAtIHN0YXJ0O1xuXG4gICAgICAgIGlmIChmbk5hbWUgPT09ICdfbW91bnRJbWFnZUludG9Ob2RlJykge1xuICAgICAgICAgIHZhciBtb3VudElEID0gUmVhY3RNb3VudC5nZXRJRChhcmdzWzFdKTtcbiAgICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9yZWNvcmRXcml0ZShtb3VudElELCBmbk5hbWUsIHRvdGFsVGltZSwgYXJnc1swXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm5OYW1lID09PSAnZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzJykge1xuICAgICAgICAgIC8vIHNwZWNpYWwgZm9ybWF0XG4gICAgICAgICAgYXJnc1swXS5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICAgICAgICAgIHZhciB3cml0ZUFyZ3MgPSB7fTtcbiAgICAgICAgICAgIGlmICh1cGRhdGUuZnJvbUluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHdyaXRlQXJncy5mcm9tSW5kZXggPSB1cGRhdGUuZnJvbUluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZS50b0luZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHdyaXRlQXJncy50b0luZGV4ID0gdXBkYXRlLnRvSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlLnRleHRDb250ZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHdyaXRlQXJncy50ZXh0Q29udGVudCA9IHVwZGF0ZS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGUubWFya3VwSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgd3JpdGVBcmdzLm1hcmt1cCA9IGFyZ3NbMV1bdXBkYXRlLm1hcmt1cEluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX3JlY29yZFdyaXRlKHVwZGF0ZS5wYXJlbnRJRCwgdXBkYXRlLnR5cGUsIHRvdGFsVGltZSwgd3JpdGVBcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBiYXNpYyBmb3JtYXRcbiAgICAgICAgICB2YXIgaWQgPSBhcmdzWzBdO1xuICAgICAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZCA9IFJlYWN0TW91bnQuZ2V0SUQoYXJnc1swXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX3JlY29yZFdyaXRlKGlkLCBmbk5hbWUsIHRvdGFsVGltZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSBpZiAobW9kdWxlTmFtZSA9PT0gJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JyAmJiAoZm5OYW1lID09PSAnbW91bnRDb21wb25lbnQnIHx8IGZuTmFtZSA9PT0gJ3VwZGF0ZUNvbXBvbmVudCcgfHwgLy8gVE9ETzogcmVjZWl2ZUNvbXBvbmVudCgpP1xuICAgICAgZm5OYW1lID09PSAnX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCcpKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUgPT09IFJlYWN0TW91bnQuVG9wTGV2ZWxXcmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcm9vdE5vZGVJRCA9IGZuTmFtZSA9PT0gJ21vdW50Q29tcG9uZW50JyA/IGFyZ3NbMF0gOiB0aGlzLl9yb290Tm9kZUlEO1xuICAgICAgICB2YXIgaXNSZW5kZXIgPSBmbk5hbWUgPT09ICdfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50JztcbiAgICAgICAgdmFyIGlzTW91bnQgPSBmbk5hbWUgPT09ICdtb3VudENvbXBvbmVudCc7XG5cbiAgICAgICAgdmFyIG1vdW50U3RhY2sgPSBSZWFjdERlZmF1bHRQZXJmLl9tb3VudFN0YWNrO1xuICAgICAgICB2YXIgZW50cnkgPSBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHNbUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGlmIChpc1JlbmRlcikge1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmNvdW50cywgcm9vdE5vZGVJRCwgMSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNNb3VudCkge1xuICAgICAgICAgIGVudHJ5LmNyZWF0ZWRbcm9vdE5vZGVJRF0gPSB0cnVlO1xuICAgICAgICAgIG1vdW50U3RhY2sucHVzaCgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB0b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG5cbiAgICAgICAgaWYgKGlzUmVuZGVyKSB7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkucmVuZGVyLCByb290Tm9kZUlELCB0b3RhbFRpbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTW91bnQpIHtcbiAgICAgICAgICB2YXIgc3ViTW91bnRUaW1lID0gbW91bnRTdGFjay5wb3AoKTtcbiAgICAgICAgICBtb3VudFN0YWNrW21vdW50U3RhY2subGVuZ3RoIC0gMV0gKz0gdG90YWxUaW1lO1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmV4Y2x1c2l2ZSwgcm9vdE5vZGVJRCwgdG90YWxUaW1lIC0gc3ViTW91bnRUaW1lKTtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5pbmNsdXNpdmUsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkuaW5jbHVzaXZlLCByb290Tm9kZUlELCB0b3RhbFRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW50cnkuZGlzcGxheU5hbWVzW3Jvb3ROb2RlSURdID0ge1xuICAgICAgICAgIGN1cnJlbnQ6IHRoaXMuZ2V0TmFtZSgpLFxuICAgICAgICAgIG93bmVyOiB0aGlzLl9jdXJyZW50RWxlbWVudC5fb3duZXIgPyB0aGlzLl9jdXJyZW50RWxlbWVudC5fb3duZXIuZ2V0TmFtZSgpIDogJzxyb290PidcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcnY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RGVmYXVsdFBlcmY7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xuXG4vLyBEb24ndCB0cnkgdG8gc2F2ZSB1c2VycyBsZXNzIHRoYW4gMS4ybXMgKGEgbnVtYmVyIEkgbWFkZSB1cClcbnZhciBET05UX0NBUkVfVEhSRVNIT0xEID0gMS4yO1xudmFyIERPTV9PUEVSQVRJT05fVFlQRVMgPSB7XG4gICdfbW91bnRJbWFnZUludG9Ob2RlJzogJ3NldCBpbm5lckhUTUwnLFxuICBJTlNFUlRfTUFSS1VQOiAnc2V0IGlubmVySFRNTCcsXG4gIE1PVkVfRVhJU1RJTkc6ICdtb3ZlJyxcbiAgUkVNT1ZFX05PREU6ICdyZW1vdmUnLFxuICBTRVRfTUFSS1VQOiAnc2V0IGlubmVySFRNTCcsXG4gIFRFWFRfQ09OVEVOVDogJ3NldCB0ZXh0Q29udGVudCcsXG4gICdzZXRWYWx1ZUZvclByb3BlcnR5JzogJ3VwZGF0ZSBhdHRyaWJ1dGUnLFxuICAnc2V0VmFsdWVGb3JBdHRyaWJ1dGUnOiAndXBkYXRlIGF0dHJpYnV0ZScsXG4gICdkZWxldGVWYWx1ZUZvclByb3BlcnR5JzogJ3JlbW92ZSBhdHRyaWJ1dGUnLFxuICAnc2V0VmFsdWVGb3JTdHlsZXMnOiAndXBkYXRlIHN0eWxlcycsXG4gICdyZXBsYWNlTm9kZVdpdGhNYXJrdXAnOiAncmVwbGFjZScsXG4gICd1cGRhdGVUZXh0Q29udGVudCc6ICdzZXQgdGV4dENvbnRlbnQnXG59O1xuXG5mdW5jdGlvbiBnZXRUb3RhbFRpbWUobWVhc3VyZW1lbnRzKSB7XG4gIC8vIFRPRE86IHJldHVybiBudW1iZXIgb2YgRE9NIG9wcz8gY291bGQgYmUgbWlzbGVhZGluZy5cbiAgLy8gVE9ETzogbWVhc3VyZSBkcm9wcGVkIGZyYW1lcyBhZnRlciByZWNvbmNpbGU/XG4gIC8vIFRPRE86IGxvZyB0b3RhbCB0aW1lIG9mIGVhY2ggcmVjb25jaWxlIGFuZCB0aGUgdG9wLWxldmVsIGNvbXBvbmVudFxuICAvLyBjbGFzcyB0aGF0IHRyaWdnZXJlZCBpdC5cbiAgdmFyIHRvdGFsVGltZSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHRvdGFsVGltZSArPSBtZWFzdXJlbWVudC50b3RhbFRpbWU7XG4gIH1cbiAgcmV0dXJuIHRvdGFsVGltZTtcbn1cblxuZnVuY3Rpb24gZ2V0RE9NU3VtbWFyeShtZWFzdXJlbWVudHMpIHtcbiAgdmFyIGl0ZW1zID0gW107XG4gIG1lYXN1cmVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtZWFzdXJlbWVudCkge1xuICAgIE9iamVjdC5rZXlzKG1lYXN1cmVtZW50LndyaXRlcykuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgIG1lYXN1cmVtZW50LndyaXRlc1tpZF0uZm9yRWFjaChmdW5jdGlvbiAod3JpdGUpIHtcbiAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIHR5cGU6IERPTV9PUEVSQVRJT05fVFlQRVNbd3JpdGUudHlwZV0gfHwgd3JpdGUudHlwZSxcbiAgICAgICAgICBhcmdzOiB3cml0ZS5hcmdzXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gaXRlbXM7XG59XG5cbmZ1bmN0aW9uIGdldEV4Y2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzKSB7XG4gIHZhciBjYW5kaWRhdGVzID0ge307XG4gIHZhciBkaXNwbGF5TmFtZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICB2YXIgYWxsSURzID0gYXNzaWduKHt9LCBtZWFzdXJlbWVudC5leGNsdXNpdmUsIG1lYXN1cmVtZW50LmluY2x1c2l2ZSk7XG5cbiAgICBmb3IgKHZhciBpZCBpbiBhbGxJRHMpIHtcbiAgICAgIGRpc3BsYXlOYW1lID0gbWVhc3VyZW1lbnQuZGlzcGxheU5hbWVzW2lkXS5jdXJyZW50O1xuXG4gICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXSA9IGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdIHx8IHtcbiAgICAgICAgY29tcG9uZW50TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICAgIGluY2x1c2l2ZTogMCxcbiAgICAgICAgZXhjbHVzaXZlOiAwLFxuICAgICAgICByZW5kZXI6IDAsXG4gICAgICAgIGNvdW50OiAwXG4gICAgICB9O1xuICAgICAgaWYgKG1lYXN1cmVtZW50LnJlbmRlcltpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0ucmVuZGVyICs9IG1lYXN1cmVtZW50LnJlbmRlcltpZF07XG4gICAgICB9XG4gICAgICBpZiAobWVhc3VyZW1lbnQuZXhjbHVzaXZlW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5leGNsdXNpdmUgKz0gbWVhc3VyZW1lbnQuZXhjbHVzaXZlW2lkXTtcbiAgICAgIH1cbiAgICAgIGlmIChtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmluY2x1c2l2ZSArPSBtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdO1xuICAgICAgfVxuICAgICAgaWYgKG1lYXN1cmVtZW50LmNvdW50c1tpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0uY291bnQgKz0gbWVhc3VyZW1lbnQuY291bnRzW2lkXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBOb3cgbWFrZSBhIHNvcnRlZCBhcnJheSB3aXRoIHRoZSByZXN1bHRzLlxuICB2YXIgYXJyID0gW107XG4gIGZvciAoZGlzcGxheU5hbWUgaW4gY2FuZGlkYXRlcykge1xuICAgIGlmIChjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5leGNsdXNpdmUgPj0gRE9OVF9DQVJFX1RIUkVTSE9MRCkge1xuICAgICAgYXJyLnB1c2goY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0pO1xuICAgIH1cbiAgfVxuXG4gIGFyci5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIuZXhjbHVzaXZlIC0gYS5leGNsdXNpdmU7XG4gIH0pO1xuXG4gIHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIGdldEluY2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzLCBvbmx5Q2xlYW4pIHtcbiAgdmFyIGNhbmRpZGF0ZXMgPSB7fTtcbiAgdmFyIGluY2x1c2l2ZUtleTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICB2YXIgYWxsSURzID0gYXNzaWduKHt9LCBtZWFzdXJlbWVudC5leGNsdXNpdmUsIG1lYXN1cmVtZW50LmluY2x1c2l2ZSk7XG4gICAgdmFyIGNsZWFuQ29tcG9uZW50cztcblxuICAgIGlmIChvbmx5Q2xlYW4pIHtcbiAgICAgIGNsZWFuQ29tcG9uZW50cyA9IGdldFVuY2hhbmdlZENvbXBvbmVudHMobWVhc3VyZW1lbnQpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGlkIGluIGFsbElEcykge1xuICAgICAgaWYgKG9ubHlDbGVhbiAmJiAhY2xlYW5Db21wb25lbnRzW2lkXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpc3BsYXlOYW1lID0gbWVhc3VyZW1lbnQuZGlzcGxheU5hbWVzW2lkXTtcblxuICAgICAgLy8gSW5jbHVzaXZlIHRpbWUgaXMgbm90IHVzZWZ1bCBmb3IgbWFueSBjb21wb25lbnRzIHdpdGhvdXQga25vd2luZyB3aGVyZVxuICAgICAgLy8gdGhleSBhcmUgaW5zdGFudGlhdGVkLiBTbyB3ZSBhZ2dyZWdhdGUgaW5jbHVzaXZlIHRpbWUgd2l0aCBib3RoIHRoZVxuICAgICAgLy8gb3duZXIgYW5kIGN1cnJlbnQgZGlzcGxheU5hbWUgYXMgdGhlIGtleS5cbiAgICAgIGluY2x1c2l2ZUtleSA9IGRpc3BsYXlOYW1lLm93bmVyICsgJyA+ICcgKyBkaXNwbGF5TmFtZS5jdXJyZW50O1xuXG4gICAgICBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0gPSBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0gfHwge1xuICAgICAgICBjb21wb25lbnROYW1lOiBpbmNsdXNpdmVLZXksXG4gICAgICAgIHRpbWU6IDAsXG4gICAgICAgIGNvdW50OiAwXG4gICAgICB9O1xuXG4gICAgICBpZiAobWVhc3VyZW1lbnQuaW5jbHVzaXZlW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0udGltZSArPSBtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdO1xuICAgICAgfVxuICAgICAgaWYgKG1lYXN1cmVtZW50LmNvdW50c1tpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldLmNvdW50ICs9IG1lYXN1cmVtZW50LmNvdW50c1tpZF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTm93IG1ha2UgYSBzb3J0ZWQgYXJyYXkgd2l0aCB0aGUgcmVzdWx0cy5cbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKGluY2x1c2l2ZUtleSBpbiBjYW5kaWRhdGVzKSB7XG4gICAgaWYgKGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XS50aW1lID49IERPTlRfQ0FSRV9USFJFU0hPTEQpIHtcbiAgICAgIGFyci5wdXNoKGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XSk7XG4gICAgfVxuICB9XG5cbiAgYXJyLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi50aW1lIC0gYS50aW1lO1xuICB9KTtcblxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBnZXRVbmNoYW5nZWRDb21wb25lbnRzKG1lYXN1cmVtZW50KSB7XG4gIC8vIEZvciBhIGdpdmVuIHJlY29uY2lsZSwgbG9vayBhdCB3aGljaCBjb21wb25lbnRzIGRpZCBub3QgYWN0dWFsbHlcbiAgLy8gcmVuZGVyIGFueXRoaW5nIHRvIHRoZSBET00gYW5kIHJldHVybiBhIG1hcHBpbmcgb2YgdGhlaXIgSUQgdG9cbiAgLy8gdGhlIGFtb3VudCBvZiB0aW1lIGl0IHRvb2sgdG8gcmVuZGVyIHRoZSBlbnRpcmUgc3VidHJlZS5cbiAgdmFyIGNsZWFuQ29tcG9uZW50cyA9IHt9O1xuICB2YXIgZGlydHlMZWFmSURzID0gT2JqZWN0LmtleXMobWVhc3VyZW1lbnQud3JpdGVzKTtcbiAgdmFyIGFsbElEcyA9IGFzc2lnbih7fSwgbWVhc3VyZW1lbnQuZXhjbHVzaXZlLCBtZWFzdXJlbWVudC5pbmNsdXNpdmUpO1xuXG4gIGZvciAodmFyIGlkIGluIGFsbElEcykge1xuICAgIHZhciBpc0RpcnR5ID0gZmFsc2U7XG4gICAgLy8gRm9yIGVhY2ggY29tcG9uZW50IHRoYXQgcmVuZGVyZWQsIHNlZSBpZiBhIGNvbXBvbmVudCB0aGF0IHRyaWdnZXJlZFxuICAgIC8vIGEgRE9NIG9wIGlzIGluIGl0cyBzdWJ0cmVlLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlydHlMZWFmSURzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZGlydHlMZWFmSURzW2ldLmluZGV4T2YoaWQpID09PSAwKSB7XG4gICAgICAgIGlzRGlydHkgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gY2hlY2sgaWYgY29tcG9uZW50IG5ld2x5IGNyZWF0ZWRcbiAgICBpZiAobWVhc3VyZW1lbnQuY3JlYXRlZFtpZF0pIHtcbiAgICAgIGlzRGlydHkgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWlzRGlydHkgJiYgbWVhc3VyZW1lbnQuY291bnRzW2lkXSA+IDApIHtcbiAgICAgIGNsZWFuQ29tcG9uZW50c1tpZF0gPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2xlYW5Db21wb25lbnRzO1xufVxuXG52YXIgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzID0ge1xuICBnZXRFeGNsdXNpdmVTdW1tYXJ5OiBnZXRFeGNsdXNpdmVTdW1tYXJ5LFxuICBnZXRJbmNsdXNpdmVTdW1tYXJ5OiBnZXRJbmNsdXNpdmVTdW1tYXJ5LFxuICBnZXRET01TdW1tYXJ5OiBnZXRET01TdW1tYXJ5LFxuICBnZXRUb3RhbFRpbWU6IGdldFRvdGFsVGltZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RWxlbWVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgnLi9SZWFjdEN1cnJlbnRPd25lcicpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG5cbi8vIFRoZSBTeW1ib2wgdXNlZCB0byB0YWcgdGhlIFJlYWN0RWxlbWVudCB0eXBlLiBJZiB0aGVyZSBpcyBubyBuYXRpdmUgU3ltYm9sXG4vLyBub3IgcG9seWZpbGwsIHRoZW4gYSBwbGFpbiBudW1iZXIgaXMgdXNlZCBmb3IgcGVyZm9ybWFuY2UuXG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2xbJ2ZvciddICYmIFN5bWJvbFsnZm9yJ10oJ3JlYWN0LmVsZW1lbnQnKSB8fCAweGVhYzc7XG5cbnZhciBSRVNFUlZFRF9QUk9QUyA9IHtcbiAga2V5OiB0cnVlLFxuICByZWY6IHRydWUsXG4gIF9fc2VsZjogdHJ1ZSxcbiAgX19zb3VyY2U6IHRydWVcbn07XG5cbi8qKlxuICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIFJlYWN0IGVsZW1lbnRzLiBUaGlzIGlzIG9ubHkgdXNlZCB0byBtYWtlIHRoaXNcbiAqIHdvcmsgd2l0aCBhIGR5bmFtaWMgaW5zdGFuY2VvZiBjaGVjay4gTm90aGluZyBzaG91bGQgbGl2ZSBvbiB0aGlzIHByb3RvdHlwZS5cbiAqXG4gKiBAcGFyYW0geyp9IHR5cGVcbiAqIEBwYXJhbSB7Kn0ga2V5XG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJlZlxuICogQHBhcmFtIHsqfSBzZWxmIEEgKnRlbXBvcmFyeSogaGVscGVyIHRvIGRldGVjdCBwbGFjZXMgd2hlcmUgYHRoaXNgIGlzXG4gKiBkaWZmZXJlbnQgZnJvbSB0aGUgYG93bmVyYCB3aGVuIFJlYWN0LmNyZWF0ZUVsZW1lbnQgaXMgY2FsbGVkLCBzbyB0aGF0IHdlXG4gKiBjYW4gd2Fybi4gV2Ugd2FudCB0byBnZXQgcmlkIG9mIG93bmVyIGFuZCByZXBsYWNlIHN0cmluZyBgcmVmYHMgd2l0aCBhcnJvd1xuICogZnVuY3Rpb25zLCBhbmQgYXMgbG9uZyBhcyBgdGhpc2AgYW5kIG93bmVyIGFyZSB0aGUgc2FtZSwgdGhlcmUgd2lsbCBiZSBub1xuICogY2hhbmdlIGluIGJlaGF2aW9yLlxuICogQHBhcmFtIHsqfSBzb3VyY2UgQW4gYW5ub3RhdGlvbiBvYmplY3QgKGFkZGVkIGJ5IGEgdHJhbnNwaWxlciBvciBvdGhlcndpc2UpXG4gKiBpbmRpY2F0aW5nIGZpbGVuYW1lLCBsaW5lIG51bWJlciwgYW5kL29yIG90aGVyIGluZm9ybWF0aW9uLlxuICogQHBhcmFtIHsqfSBvd25lclxuICogQHBhcmFtIHsqfSBwcm9wc1xuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEVsZW1lbnQgPSBmdW5jdGlvbiAodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKSB7XG4gIHZhciBlbGVtZW50ID0ge1xuICAgIC8vIFRoaXMgdGFnIGFsbG93IHVzIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgYXMgYSBSZWFjdCBFbGVtZW50XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcblxuICAgIC8vIEJ1aWx0LWluIHByb3BlcnRpZXMgdGhhdCBiZWxvbmcgb24gdGhlIGVsZW1lbnRcbiAgICB0eXBlOiB0eXBlLFxuICAgIGtleToga2V5LFxuICAgIHJlZjogcmVmLFxuICAgIHByb3BzOiBwcm9wcyxcblxuICAgIC8vIFJlY29yZCB0aGUgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGlzIGVsZW1lbnQuXG4gICAgX293bmVyOiBvd25lclxuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhlIHZhbGlkYXRpb24gZmxhZyBpcyBjdXJyZW50bHkgbXV0YXRpdmUuIFdlIHB1dCBpdCBvblxuICAgIC8vIGFuIGV4dGVybmFsIGJhY2tpbmcgc3RvcmUgc28gdGhhdCB3ZSBjYW4gZnJlZXplIHRoZSB3aG9sZSBvYmplY3QuXG4gICAgLy8gVGhpcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCBhIFdlYWtNYXAgb25jZSB0aGV5IGFyZSBpbXBsZW1lbnRlZCBpblxuICAgIC8vIGNvbW1vbmx5IHVzZWQgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzLlxuICAgIGVsZW1lbnQuX3N0b3JlID0ge307XG5cbiAgICAvLyBUbyBtYWtlIGNvbXBhcmluZyBSZWFjdEVsZW1lbnRzIGVhc2llciBmb3IgdGVzdGluZyBwdXJwb3Nlcywgd2UgbWFrZVxuICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGRcbiAgICAvLyBpbmNsdWRlIGV2ZXJ5IGVudmlyb25tZW50IHdlIHJ1biB0ZXN0cyBpbiksIHNvIHRoZSB0ZXN0IGZyYW1ld29ya1xuICAgIC8vIGlnbm9yZXMgaXQuXG4gICAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudC5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIC8vIHNlbGYgYW5kIHNvdXJjZSBhcmUgREVWIG9ubHkgcHJvcGVydGllcy5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NlbGYnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBzZWxmXG4gICAgICB9KTtcbiAgICAgIC8vIFR3byBlbGVtZW50cyBjcmVhdGVkIGluIHR3byBkaWZmZXJlbnQgcGxhY2VzIHNob3VsZCBiZSBjb25zaWRlcmVkXG4gICAgICAvLyBlcXVhbCBmb3IgdGVzdGluZyBwdXJwb3NlcyBhbmQgdGhlcmVmb3JlIHdlIGhpZGUgaXQgZnJvbSBlbnVtZXJhdGlvbi5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NvdXJjZScsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IHNvdXJjZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgZWxlbWVudC5fc2VsZiA9IHNlbGY7XG4gICAgICBlbGVtZW50Ll9zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIE9iamVjdC5mcmVlemUoZWxlbWVudC5wcm9wcyk7XG4gICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufTtcblxuUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAodHlwZSwgY29uZmlnLCBjaGlsZHJlbikge1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgLy8gUmVzZXJ2ZWQgbmFtZXMgYXJlIGV4dHJhY3RlZFxuICB2YXIgcHJvcHMgPSB7fTtcblxuICB2YXIga2V5ID0gbnVsbDtcbiAgdmFyIHJlZiA9IG51bGw7XG4gIHZhciBzZWxmID0gbnVsbDtcbiAgdmFyIHNvdXJjZSA9IG51bGw7XG5cbiAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgcmVmID0gY29uZmlnLnJlZiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5yZWY7XG4gICAga2V5ID0gY29uZmlnLmtleSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6ICcnICsgY29uZmlnLmtleTtcbiAgICBzZWxmID0gY29uZmlnLl9fc2VsZiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5fX3NlbGY7XG4gICAgc291cmNlID0gY29uZmlnLl9fc291cmNlID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLl9fc291cmNlO1xuICAgIC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIGFyZSBhZGRlZCB0byBhIG5ldyBwcm9wcyBvYmplY3RcbiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgfVxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuXG4gIC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcykge1xuICAgIHZhciBkZWZhdWx0UHJvcHMgPSB0eXBlLmRlZmF1bHRQcm9wcztcbiAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LCBwcm9wcyk7XG59O1xuXG5SZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIHZhciBmYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQuYmluZChudWxsLCB0eXBlKTtcbiAgLy8gRXhwb3NlIHRoZSB0eXBlIG9uIHRoZSBmYWN0b3J5IGFuZCB0aGUgcHJvdG90eXBlIHNvIHRoYXQgaXQgY2FuIGJlXG4gIC8vIGVhc2lseSBhY2Nlc3NlZCBvbiBlbGVtZW50cy4gRS5nLiBgPEZvbyAvPi50eXBlID09PSBGb29gLlxuICAvLyBUaGlzIHNob3VsZCBub3QgYmUgbmFtZWQgYGNvbnN0cnVjdG9yYCBzaW5jZSB0aGlzIG1heSBub3QgYmUgdGhlIGZ1bmN0aW9uXG4gIC8vIHRoYXQgY3JlYXRlZCB0aGUgZWxlbWVudCwgYW5kIGl0IG1heSBub3QgZXZlbiBiZSBhIGNvbnN0cnVjdG9yLlxuICAvLyBMZWdhY3kgaG9vayBUT0RPOiBXYXJuIGlmIHRoaXMgaXMgYWNjZXNzZWRcbiAgZmFjdG9yeS50eXBlID0gdHlwZTtcbiAgcmV0dXJuIGZhY3Rvcnk7XG59O1xuXG5SZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlS2V5ID0gZnVuY3Rpb24gKG9sZEVsZW1lbnQsIG5ld0tleSkge1xuICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudChvbGRFbGVtZW50LnR5cGUsIG5ld0tleSwgb2xkRWxlbWVudC5yZWYsIG9sZEVsZW1lbnQuX3NlbGYsIG9sZEVsZW1lbnQuX3NvdXJjZSwgb2xkRWxlbWVudC5fb3duZXIsIG9sZEVsZW1lbnQucHJvcHMpO1xuXG4gIHJldHVybiBuZXdFbGVtZW50O1xufTtcblxuUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzID0gZnVuY3Rpb24gKG9sZEVsZW1lbnQsIG5ld1Byb3BzKSB7XG4gIHZhciBuZXdFbGVtZW50ID0gUmVhY3RFbGVtZW50KG9sZEVsZW1lbnQudHlwZSwgb2xkRWxlbWVudC5rZXksIG9sZEVsZW1lbnQucmVmLCBvbGRFbGVtZW50Ll9zZWxmLCBvbGRFbGVtZW50Ll9zb3VyY2UsIG9sZEVsZW1lbnQuX293bmVyLCBuZXdQcm9wcyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBJZiB0aGUga2V5IG9uIHRoZSBvcmlnaW5hbCBpcyB2YWxpZCwgdGhlbiB0aGUgY2xvbmUgaXMgdmFsaWRcbiAgICBuZXdFbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSBvbGRFbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQ7XG4gIH1cblxuICByZXR1cm4gbmV3RWxlbWVudDtcbn07XG5cblJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgY29uZmlnLCBjaGlsZHJlbikge1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgLy8gT3JpZ2luYWwgcHJvcHMgYXJlIGNvcGllZFxuICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMpO1xuXG4gIC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWRcbiAgdmFyIGtleSA9IGVsZW1lbnQua2V5O1xuICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG4gIC8vIFNlbGYgaXMgcHJlc2VydmVkIHNpbmNlIHRoZSBvd25lciBpcyBwcmVzZXJ2ZWQuXG4gIHZhciBzZWxmID0gZWxlbWVudC5fc2VsZjtcbiAgLy8gU291cmNlIGlzIHByZXNlcnZlZCBzaW5jZSBjbG9uZUVsZW1lbnQgaXMgdW5saWtlbHkgdG8gYmUgdGFyZ2V0ZWQgYnkgYVxuICAvLyB0cmFuc3BpbGVyLCBhbmQgdGhlIG9yaWdpbmFsIHNvdXJjZSBpcyBwcm9iYWJseSBhIGJldHRlciBpbmRpY2F0b3Igb2YgdGhlXG4gIC8vIHRydWUgb3duZXIuXG4gIHZhciBzb3VyY2UgPSBlbGVtZW50Ll9zb3VyY2U7XG5cbiAgLy8gT3duZXIgd2lsbCBiZSBwcmVzZXJ2ZWQsIHVubGVzcyByZWYgaXMgb3ZlcnJpZGRlblxuICB2YXIgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICBpZiAoY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBTaWxlbnRseSBzdGVhbCB0aGUgcmVmIGZyb20gdGhlIHBhcmVudC5cbiAgICAgIHJlZiA9IGNvbmZpZy5yZWY7XG4gICAgICBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgfVxuICAgIGlmIChjb25maWcua2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTtcbiAgICB9XG4gICAgLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgb3ZlcnJpZGUgZXhpc3RpbmcgcHJvcHNcbiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgfVxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdEVsZW1lbnQoZWxlbWVudC50eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIHZhbGlkIGNvbXBvbmVudC5cbiAqIEBmaW5hbFxuICovXG5SZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RWxlbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbGVtZW50VmFsaWRhdG9yXG4gKi9cblxuLyoqXG4gKiBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgcHJvdmlkZXMgYSB3cmFwcGVyIGFyb3VuZCBhIGVsZW1lbnQgZmFjdG9yeVxuICogd2hpY2ggdmFsaWRhdGVzIHRoZSBwcm9wcyBwYXNzZWQgdG8gdGhlIGVsZW1lbnQuIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmVcbiAqIHVzZWQgb25seSBpbiBERVYgYW5kIGNvdWxkIGJlIHJlcGxhY2VkIGJ5IGEgc3RhdGljIHR5cGUgY2hlY2tlciBmb3IgbGFuZ3VhZ2VzXG4gKiB0aGF0IHN1cHBvcnQgaXQuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zJyk7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzJyk7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG5cbnZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vY2FuRGVmaW5lUHJvcGVydHknKTtcbnZhciBnZXRJdGVyYXRvckZuID0gcmVxdWlyZSgnLi9nZXRJdGVyYXRvckZuJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkge1xuICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yXG4gKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAqIHVwZGF0ZXMuXG4gKi9cbnZhciBvd25lckhhc0tleVVzZVdhcm5pbmcgPSB7fTtcblxudmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuXG4vKipcbiAqIFdhcm4gaWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGFuIGV4cGxpY2l0IGtleSBhc3NpZ25lZCB0byBpdC5cbiAqIFRoaXMgZWxlbWVudCBpcyBpbiBhbiBhcnJheS4gVGhlIGFycmF5IGNvdWxkIGdyb3cgYW5kIHNocmluayBvciBiZVxuICogcmVvcmRlcmVkLiBBbGwgY2hpbGRyZW4gdGhhdCBoYXZlbid0IGFscmVhZHkgYmVlbiB2YWxpZGF0ZWQgYXJlIHJlcXVpcmVkIHRvXG4gKiBoYXZlIGEgXCJrZXlcIiBwcm9wZXJ0eSBhc3NpZ25lZCB0byBpdC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBlbGVtZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVFeHBsaWNpdEtleShlbGVtZW50LCBwYXJlbnRUeXBlKSB7XG4gIGlmICghZWxlbWVudC5fc3RvcmUgfHwgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkIHx8IGVsZW1lbnQua2V5ICE9IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcblxuICB2YXIgYWRkZW5kYSA9IGdldEFkZGVuZGFGb3JLZXlVc2UoJ3VuaXF1ZUtleScsIGVsZW1lbnQsIHBhcmVudFR5cGUpO1xuICBpZiAoYWRkZW5kYSA9PT0gbnVsbCkge1xuICAgIC8vIHdlIGFscmVhZHkgc2hvd2VkIHRoZSB3YXJuaW5nXG4gICAgcmV0dXJuO1xuICB9XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJyArICclcyVzJXMnLCBhZGRlbmRhLnBhcmVudE9yT3duZXIgfHwgJycsIGFkZGVuZGEuY2hpbGRPd25lciB8fCAnJywgYWRkZW5kYS51cmwgfHwgJycpIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFNoYXJlZCB3YXJuaW5nIGFuZCBtb25pdG9yaW5nIGNvZGUgZm9yIHRoZSBrZXkgd2FybmluZ3MuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVR5cGUgQSBrZXkgdXNlZCBmb3IgZGUtZHVwaW5nIHdhcm5pbmdzLlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgQ29tcG9uZW50IHRoYXQgcmVxdWlyZXMgYSBrZXkuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgZWxlbWVudCdzIHBhcmVudCdzIHR5cGUuXG4gKiBAcmV0dXJucyB7P29iamVjdH0gQSBzZXQgb2YgYWRkZW5kYSB0byB1c2UgaW4gdGhlIHdhcm5pbmcgbWVzc2FnZSwgb3IgbnVsbFxuICogaWYgdGhlIHdhcm5pbmcgaGFzIGFscmVhZHkgYmVlbiBzaG93biBiZWZvcmUgKGFuZCBzaG91bGRuJ3QgYmUgc2hvd24gYWdhaW4pLlxuICovXG5mdW5jdGlvbiBnZXRBZGRlbmRhRm9yS2V5VXNlKG1lc3NhZ2VUeXBlLCBlbGVtZW50LCBwYXJlbnRUeXBlKSB7XG4gIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICBpZiAoIWFkZGVuZHVtKSB7XG4gICAgdmFyIHBhcmVudE5hbWUgPSB0eXBlb2YgcGFyZW50VHlwZSA9PT0gJ3N0cmluZycgPyBwYXJlbnRUeXBlIDogcGFyZW50VHlwZS5kaXNwbGF5TmFtZSB8fCBwYXJlbnRUeXBlLm5hbWU7XG4gICAgaWYgKHBhcmVudE5hbWUpIHtcbiAgICAgIGFkZGVuZHVtID0gJyBDaGVjayB0aGUgdG9wLWxldmVsIHJlbmRlciBjYWxsIHVzaW5nIDwnICsgcGFyZW50TmFtZSArICc+Lic7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1lbW9pemVyID0gb3duZXJIYXNLZXlVc2VXYXJuaW5nW21lc3NhZ2VUeXBlXSB8fCAob3duZXJIYXNLZXlVc2VXYXJuaW5nW21lc3NhZ2VUeXBlXSA9IHt9KTtcbiAgaWYgKG1lbW9pemVyW2FkZGVuZHVtXSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIG1lbW9pemVyW2FkZGVuZHVtXSA9IHRydWU7XG5cbiAgdmFyIGFkZGVuZGEgPSB7XG4gICAgcGFyZW50T3JPd25lcjogYWRkZW5kdW0sXG4gICAgdXJsOiAnIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLFxuICAgIGNoaWxkT3duZXI6IG51bGxcbiAgfTtcblxuICAvLyBVc3VhbGx5IHRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBvZmZlbmRlciwgYnV0IGlmIGl0IGFjY2VwdHMgY2hpbGRyZW4gYXMgYVxuICAvLyBwcm9wZXJ0eSwgaXQgbWF5IGJlIHRoZSBjcmVhdG9yIG9mIHRoZSBjaGlsZCB0aGF0J3MgcmVzcG9uc2libGUgZm9yXG4gIC8vIGFzc2lnbmluZyBpdCBhIGtleS5cbiAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5fb3duZXIgJiYgZWxlbWVudC5fb3duZXIgIT09IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICAvLyBHaXZlIHRoZSBjb21wb25lbnQgdGhhdCBvcmlnaW5hbGx5IGNyZWF0ZWQgdGhpcyBjaGlsZC5cbiAgICBhZGRlbmRhLmNoaWxkT3duZXIgPSAnIEl0IHdhcyBwYXNzZWQgYSBjaGlsZCBmcm9tICcgKyBlbGVtZW50Ll9vd25lci5nZXROYW1lKCkgKyAnLic7XG4gIH1cblxuICByZXR1cm4gYWRkZW5kYTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhhdCBldmVyeSBlbGVtZW50IGVpdGhlciBpcyBwYXNzZWQgaW4gYSBzdGF0aWMgbG9jYXRpb24sIGluIGFuXG4gKiBhcnJheSB3aXRoIGFuIGV4cGxpY2l0IGtleXMgcHJvcGVydHkgZGVmaW5lZCwgb3IgaW4gYW4gb2JqZWN0IGxpdGVyYWxcbiAqIHdpdGggdmFsaWQga2V5IHByb3BlcnR5LlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdE5vZGV9IG5vZGUgU3RhdGljYWxseSBwYXNzZWQgY2hpbGQgb2YgYW55IHR5cGUuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgbm9kZSdzIHBhcmVudCdzIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlQ2hpbGRLZXlzKG5vZGUsIHBhcmVudFR5cGUpIHtcbiAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTtcbiAgICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobm9kZSkpIHtcbiAgICAvLyBUaGlzIGVsZW1lbnQgd2FzIHBhc3NlZCBpbiBhIHZhbGlkIGxvY2F0aW9uLlxuICAgIGlmIChub2RlLl9zdG9yZSkge1xuICAgICAgbm9kZS5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihub2RlKTtcbiAgICAvLyBFbnRyeSBpdGVyYXRvcnMgcHJvdmlkZSBpbXBsaWNpdCBrZXlzLlxuICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gbm9kZS5lbnRyaWVzKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChub2RlKTtcbiAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KHN0ZXAudmFsdWUsIHBhcmVudFR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCB0aGF0IHRoZSBwcm9wcyBhcmUgdmFsaWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BUeXBlcyBNYXAgb2YgcHJvcCBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyhjb21wb25lbnROYW1lLCBwcm9wVHlwZXMsIHByb3BzLCBsb2NhdGlvbikge1xuICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICBpZiAocHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgdmFyIGVycm9yO1xuICAgICAgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICEodHlwZW9mIHByb3BUeXBlc1twcm9wTmFtZV0gPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gJyArICdSZWFjdC5Qcm9wVHlwZXMuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sIHByb3BOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIGVycm9yID0gcHJvcFR5cGVzW3Byb3BOYW1lXShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGVycm9yID0gZXg7XG4gICAgICB9XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghZXJyb3IgfHwgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciwgJyVzOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJXMgYCVzYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgKyAnZnVuY3Rpb24gbXVzdCByZXR1cm4gYG51bGxgIG9yIGFuIGBFcnJvcmAgYnV0IHJldHVybmVkIGEgJXMuICcgKyAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgJyArICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgKyAnc2hhcGUgYWxsIHJlcXVpcmUgYW4gYXJndW1lbnQpLicsIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCBwcm9wTmFtZSwgdHlwZW9mIGVycm9yKSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IubWVzc2FnZV0gPSB0cnVlO1xuXG4gICAgICAgIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBwcm9wVHlwZTogJXMlcycsIGVycm9yLm1lc3NhZ2UsIGFkZGVuZHVtKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhbiBlbGVtZW50LCB2YWxpZGF0ZSB0aGF0IGl0cyBwcm9wcyBmb2xsb3cgdGhlIHByb3BUeXBlcyBkZWZpbml0aW9uLFxuICogcHJvdmlkZWQgYnkgdGhlIHR5cGUuXG4gKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCkge1xuICB2YXIgY29tcG9uZW50Q2xhc3MgPSBlbGVtZW50LnR5cGU7XG4gIGlmICh0eXBlb2YgY29tcG9uZW50Q2xhc3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5hbWUgPSBjb21wb25lbnRDbGFzcy5kaXNwbGF5TmFtZSB8fCBjb21wb25lbnRDbGFzcy5uYW1lO1xuICBpZiAoY29tcG9uZW50Q2xhc3MucHJvcFR5cGVzKSB7XG4gICAgY2hlY2tQcm9wVHlwZXMobmFtZSwgY29tcG9uZW50Q2xhc3MucHJvcFR5cGVzLCBlbGVtZW50LnByb3BzLCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApO1xuICB9XG4gIGlmICh0eXBlb2YgY29tcG9uZW50Q2xhc3MuZ2V0RGVmYXVsdFByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoY29tcG9uZW50Q2xhc3MuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkLCAnZ2V0RGVmYXVsdFByb3BzIGlzIG9ubHkgdXNlZCBvbiBjbGFzc2ljIFJlYWN0LmNyZWF0ZUNsYXNzICcgKyAnZGVmaW5pdGlvbnMuIFVzZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBgZGVmYXVsdFByb3BzYCBpbnN0ZWFkLicpIDogdW5kZWZpbmVkO1xuICB9XG59XG5cbnZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSB7XG5cbiAgY3JlYXRlRWxlbWVudDogZnVuY3Rpb24gKHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuICAgIHZhciB2YWxpZFR5cGUgPSB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbic7XG4gICAgLy8gV2Ugd2FybiBpbiB0aGlzIGNhc2UgYnV0IGRvbid0IHRocm93LiBXZSBleHBlY3QgdGhlIGVsZW1lbnQgY3JlYXRpb24gdG9cbiAgICAvLyBzdWNjZWVkIGFuZCB0aGVyZSB3aWxsIGxpa2VseSBiZSBlcnJvcnMgaW4gcmVuZGVyLlxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHZhbGlkVHlwZSwgJ1JlYWN0LmNyZWF0ZUVsZW1lbnQ6IHR5cGUgc2hvdWxkIG5vdCBiZSBudWxsLCB1bmRlZmluZWQsIGJvb2xlYW4sIG9yICcgKyAnbnVtYmVyLiBJdCBzaG91bGQgYmUgYSBzdHJpbmcgKGZvciBET00gZWxlbWVudHMpIG9yIGEgUmVhY3RDbGFzcyAnICsgJyhmb3IgY29tcG9zaXRlIGNvbXBvbmVudHMpLiVzJywgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkpIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgLy8gVGhlIHJlc3VsdCBjYW4gYmUgbnVsbGlzaCBpZiBhIG1vY2sgb3IgYSBjdXN0b20gZnVuY3Rpb24gaXMgdXNlZC5cbiAgICAvLyBUT0RPOiBEcm9wIHRoaXMgd2hlbiB0aGVzZSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgYXMgdGhlIHR5cGUgYXJndW1lbnQuXG4gICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gU2tpcCBrZXkgd2FybmluZyBpZiB0aGUgdHlwZSBpc24ndCB2YWxpZCBzaW5jZSBvdXIga2V5IHZhbGlkYXRpb24gbG9naWNcbiAgICAvLyBkb2Vzbid0IGV4cGVjdCBhIG5vbi1zdHJpbmcvZnVuY3Rpb24gdHlwZSBhbmQgY2FuIHRocm93IGNvbmZ1c2luZyBlcnJvcnMuXG4gICAgLy8gV2UgZG9uJ3Qgd2FudCBleGNlcHRpb24gYmVoYXZpb3IgdG8gZGlmZmVyIGJldHdlZW4gZGV2IGFuZCBwcm9kLlxuICAgIC8vIChSZW5kZXJpbmcgd2lsbCB0aHJvdyB3aXRoIGEgaGVscGZ1bCBtZXNzYWdlIGFuZCBhcyBzb29uIGFzIHRoZSB0eXBlIGlzXG4gICAgLy8gZml4ZWQsIHRoZSBrZXkgd2FybmluZ3Mgd2lsbCBhcHBlYXIuKVxuICAgIGlmICh2YWxpZFR5cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tpXSwgdHlwZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCk7XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfSxcblxuICBjcmVhdGVGYWN0b3J5OiBmdW5jdGlvbiAodHlwZSkge1xuICAgIHZhciB2YWxpZGF0ZWRGYWN0b3J5ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQuYmluZChudWxsLCB0eXBlKTtcbiAgICAvLyBMZWdhY3kgaG9vayBUT0RPOiBXYXJuIGlmIHRoaXMgaXMgYWNjZXNzZWRcbiAgICB2YWxpZGF0ZWRGYWN0b3J5LnR5cGUgPSB0eXBlO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsaWRhdGVkRmFjdG9yeSwgJ3R5cGUnLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhY3RvcnkudHlwZSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdGhlIGNsYXNzIGRpcmVjdGx5ICcgKyAnYmVmb3JlIHBhc3NpbmcgaXQgdG8gY3JlYXRlRmFjdG9yeS4nKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndHlwZScsIHtcbiAgICAgICAgICAgICAgdmFsdWU6IHR5cGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdGVkRmFjdG9yeTtcbiAgfSxcblxuICBjbG9uZUVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50LCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCBuZXdFbGVtZW50LnR5cGUpO1xuICAgIH1cbiAgICB2YWxpZGF0ZVByb3BUeXBlcyhuZXdFbGVtZW50KTtcbiAgICByZXR1cm4gbmV3RWxlbWVudDtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RWxlbWVudFZhbGlkYXRvcjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbXB0eUNvbXBvbmVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9SZWFjdEVtcHR5Q29tcG9uZW50UmVnaXN0cnknKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG5cbnZhciBwbGFjZWhvbGRlckVsZW1lbnQ7XG5cbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50SW5qZWN0aW9uID0ge1xuICBpbmplY3RFbXB0eUNvbXBvbmVudDogZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgIHBsYWNlaG9sZGVyRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTnVsbENvbXBvbmVudElEKCkge1xuICBSZWFjdEVtcHR5Q29tcG9uZW50UmVnaXN0cnkucmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQodGhpcy5fcm9vdE5vZGVJRCk7XG59XG5cbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0gZnVuY3Rpb24gKGluc3RhbnRpYXRlKSB7XG4gIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gaW5zdGFudGlhdGUocGxhY2Vob2xkZXJFbGVtZW50KTtcbn07XG5hc3NpZ24oUmVhY3RFbXB0eUNvbXBvbmVudC5wcm90b3R5cGUsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZWxlbWVudCkge30sXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAocm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUocmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQsIHRoaXMpO1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSByb290SUQ7XG4gICAgcmV0dXJuIFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudCh0aGlzLl9yZW5kZXJlZENvbXBvbmVudCwgcm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gIH0sXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uICgpIHt9LFxuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAocm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50KTtcbiAgICBSZWFjdEVtcHR5Q29tcG9uZW50UmVnaXN0cnkuZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRCh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG4gIH1cbn0pO1xuXG5SZWFjdEVtcHR5Q29tcG9uZW50LmluamVjdGlvbiA9IFJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFbXB0eUNvbXBvbmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGlzIHJlZ2lzdHJ5IGtlZXBzIHRyYWNrIG9mIHRoZSBSZWFjdCBJRHMgb2YgdGhlIGNvbXBvbmVudHMgdGhhdCByZW5kZXJlZCB0b1xuLy8gYG51bGxgIChpbiByZWFsaXR5IGEgcGxhY2Vob2xkZXIgc3VjaCBhcyBgbm9zY3JpcHRgKVxudmFyIG51bGxDb21wb25lbnRJRHNSZWdpc3RyeSA9IHt9O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBDb21wb25lbnQncyBgX3Jvb3ROb2RlSURgLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY29tcG9uZW50IGlzIHJlbmRlcmVkIHRvIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGlzTnVsbENvbXBvbmVudElEKGlkKSB7XG4gIHJldHVybiAhIW51bGxDb21wb25lbnRJRHNSZWdpc3RyeVtpZF07XG59XG5cbi8qKlxuICogTWFyayB0aGUgY29tcG9uZW50IGFzIGhhdmluZyByZW5kZXJlZCB0byBudWxsLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENvbXBvbmVudCdzIGBfcm9vdE5vZGVJRGAuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGlkKSB7XG4gIG51bGxDb21wb25lbnRJRHNSZWdpc3RyeVtpZF0gPSB0cnVlO1xufVxuXG4vKipcbiAqIFVubWFyayB0aGUgY29tcG9uZW50IGFzIGhhdmluZyByZW5kZXJlZCB0byBudWxsOiBpdCByZW5kZXJzIHRvIHNvbWV0aGluZyBub3cuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cbiAqL1xuZnVuY3Rpb24gZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRChpZCkge1xuICBkZWxldGUgbnVsbENvbXBvbmVudElEc1JlZ2lzdHJ5W2lkXTtcbn1cblxudmFyIFJlYWN0RW1wdHlDb21wb25lbnRSZWdpc3RyeSA9IHtcbiAgaXNOdWxsQ29tcG9uZW50SUQ6IGlzTnVsbENvbXBvbmVudElELFxuICByZWdpc3Rlck51bGxDb21wb25lbnRJRDogcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQsXG4gIGRlcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQ6IGRlcmVnaXN0ZXJOdWxsQ29tcG9uZW50SURcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEVycm9yVXRpbHNcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2F1Z2h0RXJyb3IgPSBudWxsO1xuXG4vKipcbiAqIENhbGwgYSBmdW5jdGlvbiB3aGlsZSBndWFyZGluZyBhZ2FpbnN0IGVycm9ycyB0aGF0IGhhcHBlbnMgd2l0aGluIGl0LlxuICpcbiAqIEBwYXJhbSB7P1N0cmluZ30gbmFtZSBvZiB0aGUgZ3VhcmQgdG8gdXNlIGZvciBsb2dnaW5nIG9yIGRlYnVnZ2luZ1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlXG4gKiBAcGFyYW0geyp9IGEgRmlyc3QgYXJndW1lbnRcbiAqIEBwYXJhbSB7Kn0gYiBTZWNvbmQgYXJndW1lbnRcbiAqL1xuZnVuY3Rpb24gaW52b2tlR3VhcmRlZENhbGxiYWNrKG5hbWUsIGZ1bmMsIGEsIGIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZnVuYyhhLCBiKTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIGlmIChjYXVnaHRFcnJvciA9PT0gbnVsbCkge1xuICAgICAgY2F1Z2h0RXJyb3IgPSB4O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbnZhciBSZWFjdEVycm9yVXRpbHMgPSB7XG4gIGludm9rZUd1YXJkZWRDYWxsYmFjazogaW52b2tlR3VhcmRlZENhbGxiYWNrLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGJ5IFJlYWN0VGVzdFV0aWxzLlNpbXVsYXRlIHNvIHRoYXQgYW55IGVycm9ycyB0aHJvd24gYnkgdGhlIGV2ZW50XG4gICAqIGhhbmRsZXIgYXJlIHN1cmUgdG8gYmUgcmV0aHJvd24gYnkgcmV0aHJvd0NhdWdodEVycm9yLlxuICAgKi9cbiAgaW52b2tlR3VhcmRlZENhbGxiYWNrV2l0aENhdGNoOiBpbnZva2VHdWFyZGVkQ2FsbGJhY2ssXG5cbiAgLyoqXG4gICAqIER1cmluZyBleGVjdXRpb24gb2YgZ3VhcmRlZCBmdW5jdGlvbnMgd2Ugd2lsbCBjYXB0dXJlIHRoZSBmaXJzdCBlcnJvciB3aGljaFxuICAgKiB3ZSB3aWxsIHJldGhyb3cgdG8gYmUgaGFuZGxlZCBieSB0aGUgdG9wIGxldmVsIGVycm9yIGhhbmRsZXIuXG4gICAqL1xuICByZXRocm93Q2F1Z2h0RXJyb3I6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2F1Z2h0RXJyb3IpIHtcbiAgICAgIHZhciBlcnJvciA9IGNhdWdodEVycm9yO1xuICAgICAgY2F1Z2h0RXJyb3IgPSBudWxsO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvKipcbiAgICogVG8gaGVscCBkZXZlbG9wbWVudCB3ZSBjYW4gZ2V0IGJldHRlciBkZXZ0b29scyBpbnRlZ3JhdGlvbiBieSBzaW11bGF0aW5nIGFcbiAgICogcmVhbCBicm93c2VyIGV2ZW50LlxuICAgKi9cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZGlzcGF0Y2hFdmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBmYWtlTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3JlYWN0Jyk7XG4gICAgUmVhY3RFcnJvclV0aWxzLmludm9rZUd1YXJkZWRDYWxsYmFjayA9IGZ1bmN0aW9uIChuYW1lLCBmdW5jLCBhLCBiKSB7XG4gICAgICB2YXIgYm91bmRGdW5jID0gZnVuYy5iaW5kKG51bGwsIGEsIGIpO1xuICAgICAgdmFyIGV2dFR5cGUgPSAncmVhY3QtJyArIG5hbWU7XG4gICAgICBmYWtlTm9kZS5hZGRFdmVudExpc3RlbmVyKGV2dFR5cGUsIGJvdW5kRnVuYywgZmFsc2UpO1xuICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgZXZ0LmluaXRFdmVudChldnRUeXBlLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgZmFrZU5vZGUuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgZmFrZU5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBib3VuZEZ1bmMsIGZhbHNlKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFcnJvclV0aWxzOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEV2ZW50RW1pdHRlck1peGluXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luSHViJyk7XG5cbmZ1bmN0aW9uIHJ1bkV2ZW50UXVldWVJbkJhdGNoKGV2ZW50cykge1xuICBFdmVudFBsdWdpbkh1Yi5lbnF1ZXVlRXZlbnRzKGV2ZW50cyk7XG4gIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKGZhbHNlKTtcbn1cblxudmFyIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4gPSB7XG5cbiAgLyoqXG4gICAqIFN0cmVhbXMgYSBmaXJlZCB0b3AtbGV2ZWwgZXZlbnQgdG8gYEV2ZW50UGx1Z2luSHViYCB3aGVyZSBwbHVnaW5zIGhhdmUgdGhlXG4gICAqIG9wcG9ydHVuaXR5IHRvIGNyZWF0ZSBgUmVhY3RFdmVudGBzIHRvIGJlIGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtvYmplY3R9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBlbnZpcm9ubWVudCBldmVudC5cbiAgICovXG4gIGhhbmRsZVRvcExldmVsOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGV2ZW50cyA9IEV2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHModG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICBydW5FdmVudFF1ZXVlSW5CYXRjaChldmVudHMpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXZlbnRFbWl0dGVyTWl4aW47IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RXZlbnRMaXN0ZW5lclxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudExpc3RlbmVyID0gcmVxdWlyZSgnZmJqcy9saWIvRXZlbnRMaXN0ZW5lcicpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZUhhbmRsZXMnKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGdldEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9nZXRFdmVudFRhcmdldCcpO1xudmFyIGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24nKTtcblxudmFyIERPQ1VNRU5UX0ZSQUdNRU5UX05PREVfVFlQRSA9IDExO1xuXG4vKipcbiAqIEZpbmRzIHRoZSBwYXJlbnQgUmVhY3QgY29tcG9uZW50IG9mIGBub2RlYC5cbiAqXG4gKiBAcGFyYW0geyp9IG5vZGVcbiAqIEByZXR1cm4gez9ET01FdmVudFRhcmdldH0gUGFyZW50IGNvbnRhaW5lciwgb3IgYG51bGxgIGlmIHRoZSBzcGVjaWZpZWQgbm9kZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBub3QgbmVzdGVkLlxuICovXG5mdW5jdGlvbiBmaW5kUGFyZW50KG5vZGUpIHtcbiAgLy8gVE9ETzogSXQgbWF5IGJlIGEgZ29vZCBpZGVhIHRvIGNhY2hlIHRoaXMgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBET01cbiAgLy8gdHJhdmVyc2FsLCBidXQgY2FjaGluZyBpcyBkaWZmaWN1bHQgdG8gZG8gY29ycmVjdGx5IHdpdGhvdXQgdXNpbmcgYVxuICAvLyBtdXRhdGlvbiBvYnNlcnZlciB0byBsaXN0ZW4gZm9yIGFsbCBET00gY2hhbmdlcy5cbiAgdmFyIG5vZGVJRCA9IFJlYWN0TW91bnQuZ2V0SUQobm9kZSk7XG4gIHZhciByb290SUQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5nZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQobm9kZUlEKTtcbiAgdmFyIGNvbnRhaW5lciA9IFJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQocm9vdElEKTtcbiAgdmFyIHBhcmVudCA9IFJlYWN0TW91bnQuZ2V0Rmlyc3RSZWFjdERPTShjb250YWluZXIpO1xuICByZXR1cm4gcGFyZW50O1xufVxuXG4vLyBVc2VkIHRvIHN0b3JlIGFuY2VzdG9yIGhpZXJhcmNoeSBpbiB0b3AgbGV2ZWwgY2FsbGJhY2tcbmZ1bmN0aW9uIFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHRoaXMudG9wTGV2ZWxUeXBlID0gdG9wTGV2ZWxUeXBlO1xuICB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG4gIHRoaXMuYW5jZXN0b3JzID0gW107XG59XG5hc3NpZ24oVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLnByb3RvdHlwZSwge1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50b3BMZXZlbFR5cGUgPSBudWxsO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBudWxsO1xuICAgIHRoaXMuYW5jZXN0b3JzLmxlbmd0aCA9IDA7XG4gIH1cbn0pO1xuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZywgUG9vbGVkQ2xhc3MudHdvQXJndW1lbnRQb29sZXIpO1xuXG5mdW5jdGlvbiBoYW5kbGVUb3BMZXZlbEltcGwoYm9va0tlZXBpbmcpIHtcbiAgLy8gVE9ETzogUmUtZW5hYmxlIGV2ZW50LnBhdGggaGFuZGxpbmdcbiAgLy9cbiAgLy8gaWYgKGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50LnBhdGggJiYgYm9va0tlZXBpbmcubmF0aXZlRXZlbnQucGF0aC5sZW5ndGggPiAxKSB7XG4gIC8vICAgLy8gTmV3IGJyb3dzZXJzIGhhdmUgYSBwYXRoIGF0dHJpYnV0ZSBvbiBuYXRpdmUgZXZlbnRzXG4gIC8vICAgaGFuZGxlVG9wTGV2ZWxXaXRoUGF0aChib29rS2VlcGluZyk7XG4gIC8vIH0gZWxzZSB7XG4gIC8vICAgLy8gTGVnYWN5IGJyb3dzZXJzIGRvbid0IGhhdmUgYSBwYXRoIGF0dHJpYnV0ZSBvbiBuYXRpdmUgZXZlbnRzXG4gIC8vICAgaGFuZGxlVG9wTGV2ZWxXaXRob3V0UGF0aChib29rS2VlcGluZyk7XG4gIC8vIH1cblxuICB2b2lkIGhhbmRsZVRvcExldmVsV2l0aFBhdGg7IC8vIHRlbXBvcmFyaWx5IHVudXNlZFxuICBoYW5kbGVUb3BMZXZlbFdpdGhvdXRQYXRoKGJvb2tLZWVwaW5nKTtcbn1cblxuLy8gTGVnYWN5IGJyb3dzZXJzIGRvbid0IGhhdmUgYSBwYXRoIGF0dHJpYnV0ZSBvbiBuYXRpdmUgZXZlbnRzXG5mdW5jdGlvbiBoYW5kbGVUb3BMZXZlbFdpdGhvdXRQYXRoKGJvb2tLZWVwaW5nKSB7XG4gIHZhciB0b3BMZXZlbFRhcmdldCA9IFJlYWN0TW91bnQuZ2V0Rmlyc3RSZWFjdERPTShnZXRFdmVudFRhcmdldChib29rS2VlcGluZy5uYXRpdmVFdmVudCkpIHx8IHdpbmRvdztcblxuICAvLyBMb29wIHRocm91Z2ggdGhlIGhpZXJhcmNoeSwgaW4gY2FzZSB0aGVyZSdzIGFueSBuZXN0ZWQgY29tcG9uZW50cy5cbiAgLy8gSXQncyBpbXBvcnRhbnQgdGhhdCB3ZSBidWlsZCB0aGUgYXJyYXkgb2YgYW5jZXN0b3JzIGJlZm9yZSBjYWxsaW5nIGFueVxuICAvLyBldmVudCBoYW5kbGVycywgYmVjYXVzZSBldmVudCBoYW5kbGVycyBjYW4gbW9kaWZ5IHRoZSBET00sIGxlYWRpbmcgdG9cbiAgLy8gaW5jb25zaXN0ZW5jaWVzIHdpdGggUmVhY3RNb3VudCdzIG5vZGUgY2FjaGUuIFNlZSAjMTEwNS5cbiAgdmFyIGFuY2VzdG9yID0gdG9wTGV2ZWxUYXJnZXQ7XG4gIHdoaWxlIChhbmNlc3Rvcikge1xuICAgIGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5wdXNoKGFuY2VzdG9yKTtcbiAgICBhbmNlc3RvciA9IGZpbmRQYXJlbnQoYW5jZXN0b3IpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBib29rS2VlcGluZy5hbmNlc3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICB0b3BMZXZlbFRhcmdldCA9IGJvb2tLZWVwaW5nLmFuY2VzdG9yc1tpXTtcbiAgICB2YXIgdG9wTGV2ZWxUYXJnZXRJRCA9IFJlYWN0TW91bnQuZ2V0SUQodG9wTGV2ZWxUYXJnZXQpIHx8ICcnO1xuICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5faGFuZGxlVG9wTGV2ZWwoYm9va0tlZXBpbmcudG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCwgYm9va0tlZXBpbmcubmF0aXZlRXZlbnQsIGdldEV2ZW50VGFyZ2V0KGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50KSk7XG4gIH1cbn1cblxuLy8gTmV3IGJyb3dzZXJzIGhhdmUgYSBwYXRoIGF0dHJpYnV0ZSBvbiBuYXRpdmUgZXZlbnRzXG5mdW5jdGlvbiBoYW5kbGVUb3BMZXZlbFdpdGhQYXRoKGJvb2tLZWVwaW5nKSB7XG4gIHZhciBwYXRoID0gYm9va0tlZXBpbmcubmF0aXZlRXZlbnQucGF0aDtcbiAgdmFyIGN1cnJlbnROYXRpdmVUYXJnZXQgPSBwYXRoWzBdO1xuICB2YXIgZXZlbnRzRmlyZWQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY3VycmVudFBhdGhFbGVtZW50ID0gcGF0aFtpXTtcbiAgICBpZiAoY3VycmVudFBhdGhFbGVtZW50Lm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUpIHtcbiAgICAgIGN1cnJlbnROYXRpdmVUYXJnZXQgPSBwYXRoW2kgKyAxXTtcbiAgICB9XG4gICAgLy8gVE9ETzogc2xvd1xuICAgIHZhciByZWFjdFBhcmVudCA9IFJlYWN0TW91bnQuZ2V0Rmlyc3RSZWFjdERPTShjdXJyZW50UGF0aEVsZW1lbnQpO1xuICAgIGlmIChyZWFjdFBhcmVudCA9PT0gY3VycmVudFBhdGhFbGVtZW50KSB7XG4gICAgICB2YXIgY3VycmVudFBhdGhFbGVtZW50SUQgPSBSZWFjdE1vdW50LmdldElEKGN1cnJlbnRQYXRoRWxlbWVudCk7XG4gICAgICB2YXIgbmV3Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKGN1cnJlbnRQYXRoRWxlbWVudElEKTtcbiAgICAgIGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5wdXNoKGN1cnJlbnRQYXRoRWxlbWVudCk7XG5cbiAgICAgIHZhciB0b3BMZXZlbFRhcmdldElEID0gUmVhY3RNb3VudC5nZXRJRChjdXJyZW50UGF0aEVsZW1lbnQpIHx8ICcnO1xuICAgICAgZXZlbnRzRmlyZWQrKztcbiAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5faGFuZGxlVG9wTGV2ZWwoYm9va0tlZXBpbmcudG9wTGV2ZWxUeXBlLCBjdXJyZW50UGF0aEVsZW1lbnQsIHRvcExldmVsVGFyZ2V0SUQsIGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50LCBjdXJyZW50TmF0aXZlVGFyZ2V0KTtcblxuICAgICAgLy8gSnVtcCB0byB0aGUgcm9vdCBvZiB0aGlzIFJlYWN0IHJlbmRlciB0cmVlXG4gICAgICB3aGlsZSAoY3VycmVudFBhdGhFbGVtZW50SUQgIT09IG5ld1Jvb3RJRCkge1xuICAgICAgICBpKys7XG4gICAgICAgIGN1cnJlbnRQYXRoRWxlbWVudCA9IHBhdGhbaV07XG4gICAgICAgIGN1cnJlbnRQYXRoRWxlbWVudElEID0gUmVhY3RNb3VudC5nZXRJRChjdXJyZW50UGF0aEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZXZlbnRzRmlyZWQgPT09IDApIHtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsKGJvb2tLZWVwaW5nLnRvcExldmVsVHlwZSwgd2luZG93LCAnJywgYm9va0tlZXBpbmcubmF0aXZlRXZlbnQsIGdldEV2ZW50VGFyZ2V0KGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50KSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2Nyb2xsVmFsdWVNb25pdG9yKGNiKSB7XG4gIHZhciBzY3JvbGxQb3NpdGlvbiA9IGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uKHdpbmRvdyk7XG4gIGNiKHNjcm9sbFBvc2l0aW9uKTtcbn1cblxudmFyIFJlYWN0RXZlbnRMaXN0ZW5lciA9IHtcbiAgX2VuYWJsZWQ6IHRydWUsXG4gIF9oYW5kbGVUb3BMZXZlbDogbnVsbCxcblxuICBXSU5ET1dfSEFORExFOiBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyB3aW5kb3cgOiBudWxsLFxuXG4gIHNldEhhbmRsZVRvcExldmVsOiBmdW5jdGlvbiAoaGFuZGxlVG9wTGV2ZWwpIHtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsID0gaGFuZGxlVG9wTGV2ZWw7XG4gIH0sXG5cbiAgc2V0RW5hYmxlZDogZnVuY3Rpb24gKGVuYWJsZWQpIHtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQgPSAhIWVuYWJsZWQ7XG4gIH0sXG5cbiAgaXNFbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZDtcbiAgfSxcblxuICAvKipcbiAgICogVHJhcHMgdG9wLWxldmVsIGV2ZW50cyBieSB1c2luZyBldmVudCBidWJibGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZSBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7P29iamVjdH0gQW4gb2JqZWN0IHdpdGggYSByZW1vdmUgZnVuY3Rpb24gd2hpY2ggd2lsbCBmb3JjZWZ1bGx5XG4gICAqICAgICAgICAgICAgICAgICAgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmFwQnViYmxlZEV2ZW50OiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSkge1xuICAgIHZhciBlbGVtZW50ID0gaGFuZGxlO1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBFdmVudExpc3RlbmVyLmxpc3RlbihlbGVtZW50LCBoYW5kbGVyQmFzZU5hbWUsIFJlYWN0RXZlbnRMaXN0ZW5lci5kaXNwYXRjaEV2ZW50LmJpbmQobnVsbCwgdG9wTGV2ZWxUeXBlKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXBzIGEgdG9wLWxldmVsIGV2ZW50IGJ5IHVzaW5nIGV2ZW50IGNhcHR1cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZSBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7P29iamVjdH0gQW4gb2JqZWN0IHdpdGggYSByZW1vdmUgZnVuY3Rpb24gd2hpY2ggd2lsbCBmb3JjZWZ1bGx5XG4gICAqICAgICAgICAgICAgICAgICAgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmFwQ2FwdHVyZWRFdmVudDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICB2YXIgZWxlbWVudCA9IGhhbmRsZTtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gRXZlbnRMaXN0ZW5lci5jYXB0dXJlKGVsZW1lbnQsIGhhbmRsZXJCYXNlTmFtZSwgUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQuYmluZChudWxsLCB0b3BMZXZlbFR5cGUpKTtcbiAgfSxcblxuICBtb25pdG9yU2Nyb2xsVmFsdWU6IGZ1bmN0aW9uIChyZWZyZXNoKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gc2Nyb2xsVmFsdWVNb25pdG9yLmJpbmQobnVsbCwgcmVmcmVzaCk7XG4gICAgRXZlbnRMaXN0ZW5lci5saXN0ZW4od2luZG93LCAnc2Nyb2xsJywgY2FsbGJhY2spO1xuICB9LFxuXG4gIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gICAgaWYgKCFSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYm9va0tlZXBpbmcgPSBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcuZ2V0UG9vbGVkKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICAgIHRyeSB7XG4gICAgICAvLyBFdmVudCBxdWV1ZSBiZWluZyBwcm9jZXNzZWQgaW4gdGhlIHNhbWUgY3ljbGUgYWxsb3dzXG4gICAgICAvLyBgcHJldmVudERlZmF1bHRgLlxuICAgICAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKGhhbmRsZVRvcExldmVsSW1wbCwgYm9va0tlZXBpbmcpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcucmVsZWFzZShib29rS2VlcGluZyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXZlbnRMaXN0ZW5lcjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbmplY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5IdWInKTtcbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoJy4vUmVhY3RDbGFzcycpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RW1wdHlDb21wb25lbnQnKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlcicpO1xudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdE5hdGl2ZUNvbXBvbmVudCcpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoJy4vUmVhY3RQZXJmJyk7XG52YXIgUmVhY3RSb290SW5kZXggPSByZXF1aXJlKCcuL1JlYWN0Um9vdEluZGV4Jyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIFJlYWN0SW5qZWN0aW9uID0ge1xuICBDb21wb25lbnQ6IFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQuaW5qZWN0aW9uLFxuICBDbGFzczogUmVhY3RDbGFzcy5pbmplY3Rpb24sXG4gIERPTVByb3BlcnR5OiBET01Qcm9wZXJ0eS5pbmplY3Rpb24sXG4gIEVtcHR5Q29tcG9uZW50OiBSZWFjdEVtcHR5Q29tcG9uZW50LmluamVjdGlvbixcbiAgRXZlbnRQbHVnaW5IdWI6IEV2ZW50UGx1Z2luSHViLmluamVjdGlvbixcbiAgRXZlbnRFbWl0dGVyOiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaW5qZWN0aW9uLFxuICBOYXRpdmVDb21wb25lbnQ6IFJlYWN0TmF0aXZlQ29tcG9uZW50LmluamVjdGlvbixcbiAgUGVyZjogUmVhY3RQZXJmLmluamVjdGlvbixcbiAgUm9vdEluZGV4OiBSZWFjdFJvb3RJbmRleC5pbmplY3Rpb24sXG4gIFVwZGF0ZXM6IFJlYWN0VXBkYXRlcy5pbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbmplY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SW5wdXRTZWxlY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERPTVNlbGVjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RET01TZWxlY3Rpb24nKTtcblxudmFyIGNvbnRhaW5zTm9kZSA9IHJlcXVpcmUoJ2ZianMvbGliL2NvbnRhaW5zTm9kZScpO1xudmFyIGZvY3VzTm9kZSA9IHJlcXVpcmUoJ2ZianMvbGliL2ZvY3VzTm9kZScpO1xudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50Jyk7XG5cbmZ1bmN0aW9uIGlzSW5Eb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBjb250YWluc05vZGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBub2RlKTtcbn1cblxuLyoqXG4gKiBAUmVhY3RJbnB1dFNlbGVjdGlvbjogUmVhY3QgaW5wdXQgc2VsZWN0aW9uIG1vZHVsZS4gQmFzZWQgb24gU2VsZWN0aW9uLmpzLFxuICogYnV0IG1vZGlmaWVkIHRvIGJlIHN1aXRhYmxlIGZvciByZWFjdCBhbmQgaGFzIGEgY291cGxlIG9mIGJ1ZyBmaXhlcyAoZG9lc24ndFxuICogYXNzdW1lIGJ1dHRvbnMgaGF2ZSByYW5nZSBzZWxlY3Rpb25zIGFsbG93ZWQpLlxuICogSW5wdXQgc2VsZWN0aW9uIG1vZHVsZSBmb3IgUmVhY3QuXG4gKi9cbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0ge1xuXG4gIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllczogZnVuY3Rpb24gKGVsZW0pIHtcbiAgICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBub2RlTmFtZSAmJiAobm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgZWxlbS50eXBlID09PSAndGV4dCcgfHwgbm9kZU5hbWUgPT09ICd0ZXh0YXJlYScgfHwgZWxlbS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJyk7XG4gIH0sXG5cbiAgZ2V0U2VsZWN0aW9uSW5mb3JtYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzZWRFbGVtOiBmb2N1c2VkRWxlbSxcbiAgICAgIHNlbGVjdGlvblJhbmdlOiBSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhmb2N1c2VkRWxlbSkgPyBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbihmb2N1c2VkRWxlbSkgOiBudWxsXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQHJlc3RvcmVTZWxlY3Rpb246IElmIGFueSBzZWxlY3Rpb24gaW5mb3JtYXRpb24gd2FzIHBvdGVudGlhbGx5IGxvc3QsXG4gICAqIHJlc3RvcmUgaXQuIFRoaXMgaXMgdXNlZnVsIHdoZW4gcGVyZm9ybWluZyBvcGVyYXRpb25zIHRoYXQgY291bGQgcmVtb3ZlIGRvbVxuICAgKiBub2RlcyBhbmQgcGxhY2UgdGhlbSBiYWNrIGluLCByZXN1bHRpbmcgaW4gZm9jdXMgYmVpbmcgbG9zdC5cbiAgICovXG4gIHJlc3RvcmVTZWxlY3Rpb246IGZ1bmN0aW9uIChwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uKSB7XG4gICAgdmFyIGN1ckZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIHZhciBwcmlvckZvY3VzZWRFbGVtID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5mb2N1c2VkRWxlbTtcbiAgICB2YXIgcHJpb3JTZWxlY3Rpb25SYW5nZSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2VsZWN0aW9uUmFuZ2U7XG4gICAgaWYgKGN1ckZvY3VzZWRFbGVtICE9PSBwcmlvckZvY3VzZWRFbGVtICYmIGlzSW5Eb2N1bWVudChwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgaWYgKFJlYWN0SW5wdXRTZWxlY3Rpb24uaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKHByaW9yRm9jdXNlZEVsZW0pKSB7XG4gICAgICAgIFJlYWN0SW5wdXRTZWxlY3Rpb24uc2V0U2VsZWN0aW9uKHByaW9yRm9jdXNlZEVsZW0sIHByaW9yU2VsZWN0aW9uUmFuZ2UpO1xuICAgICAgfVxuICAgICAgZm9jdXNOb2RlKHByaW9yRm9jdXNlZEVsZW0pO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGdldFNlbGVjdGlvbjogR2V0cyB0aGUgc2VsZWN0aW9uIGJvdW5kcyBvZiBhIGZvY3VzZWQgdGV4dGFyZWEsIGlucHV0IG9yXG4gICAqIGNvbnRlbnRFZGl0YWJsZSBub2RlLlxuICAgKiAtQGlucHV0OiBMb29rIHVwIHNlbGVjdGlvbiBib3VuZHMgb2YgdGhpcyBpbnB1dFxuICAgKiAtQHJldHVybiB7c3RhcnQ6IHNlbGVjdGlvblN0YXJ0LCBlbmQ6IHNlbGVjdGlvbkVuZH1cbiAgICovXG4gIGdldFNlbGVjdGlvbjogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgdmFyIHNlbGVjdGlvbjtcblxuICAgIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIGlucHV0KSB7XG4gICAgICAvLyBNb2Rlcm4gYnJvd3NlciB3aXRoIGlucHV0IG9yIHRleHRhcmVhLlxuICAgICAgc2VsZWN0aW9uID0ge1xuICAgICAgICBzdGFydDogaW5wdXQuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgIGVuZDogaW5wdXQuc2VsZWN0aW9uRW5kXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uICYmIChpbnB1dC5ub2RlTmFtZSAmJiBpbnB1dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnKSkge1xuICAgICAgLy8gSUU4IGlucHV0LlxuICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAvLyBUaGVyZSBjYW4gb25seSBiZSBvbmUgc2VsZWN0aW9uIHBlciBkb2N1bWVudCBpbiBJRSwgc28gaXQgbXVzdFxuICAgICAgLy8gYmUgaW4gb3VyIGVsZW1lbnQuXG4gICAgICBpZiAocmFuZ2UucGFyZW50RWxlbWVudCgpID09PSBpbnB1dCkge1xuICAgICAgICBzZWxlY3Rpb24gPSB7XG4gICAgICAgICAgc3RhcnQ6IC1yYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIC1pbnB1dC52YWx1ZS5sZW5ndGgpLFxuICAgICAgICAgIGVuZDogLXJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIC1pbnB1dC52YWx1ZS5sZW5ndGgpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbnRlbnQgZWRpdGFibGUgb3Igb2xkIElFIHRleHRhcmVhLlxuICAgICAgc2VsZWN0aW9uID0gUmVhY3RET01TZWxlY3Rpb24uZ2V0T2Zmc2V0cyhpbnB1dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdGlvbiB8fCB7IHN0YXJ0OiAwLCBlbmQ6IDAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQHNldFNlbGVjdGlvbjogU2V0cyB0aGUgc2VsZWN0aW9uIGJvdW5kcyBvZiBhIHRleHRhcmVhIG9yIGlucHV0IGFuZCBmb2N1c2VzXG4gICAqIHRoZSBpbnB1dC5cbiAgICogLUBpbnB1dCAgICAgU2V0IHNlbGVjdGlvbiBib3VuZHMgb2YgdGhpcyBpbnB1dCBvciB0ZXh0YXJlYVxuICAgKiAtQG9mZnNldHMgICBPYmplY3Qgb2Ygc2FtZSBmb3JtIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSBnZXQqXG4gICAqL1xuICBzZXRTZWxlY3Rpb246IGZ1bmN0aW9uIChpbnB1dCwgb2Zmc2V0cykge1xuICAgIHZhciBzdGFydCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgdmFyIGVuZCA9IG9mZnNldHMuZW5kO1xuICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZW5kID0gc3RhcnQ7XG4gICAgfVxuXG4gICAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gaW5wdXQpIHtcbiAgICAgIGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gc3RhcnQ7XG4gICAgICBpbnB1dC5zZWxlY3Rpb25FbmQgPSBNYXRoLm1pbihlbmQsIGlucHV0LnZhbHVlLmxlbmd0aCk7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgKGlucHV0Lm5vZGVOYW1lICYmIGlucHV0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcpKSB7XG4gICAgICB2YXIgcmFuZ2UgPSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCBzdGFydCk7XG4gICAgICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBlbmQgLSBzdGFydCk7XG4gICAgICByYW5nZS5zZWxlY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3RET01TZWxlY3Rpb24uc2V0T2Zmc2V0cyhpbnB1dCwgb2Zmc2V0cyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5wdXRTZWxlY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SW5zdGFuY2VIYW5kbGVzXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Um9vdEluZGV4ID0gcmVxdWlyZSgnLi9SZWFjdFJvb3RJbmRleCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBTRVBBUkFUT1IgPSAnLic7XG52YXIgU0VQQVJBVE9SX0xFTkdUSCA9IFNFUEFSQVRPUi5sZW5ndGg7XG5cbi8qKlxuICogTWF4aW11bSBkZXB0aCBvZiB0cmF2ZXJzYWxzIGJlZm9yZSB3ZSBjb25zaWRlciB0aGUgcG9zc2liaWxpdHkgb2YgYSBiYWQgSUQuXG4gKi9cbnZhciBNQVhfVFJFRV9ERVBUSCA9IDEwMDAwO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBET00gSUQgcHJlZml4IHRvIHVzZSB3aGVuIG1vdW50aW5nIFJlYWN0IGNvbXBvbmVudHMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEEgdW5pcXVlIGludGVnZXJcbiAqIEByZXR1cm4ge3N0cmluZ30gUmVhY3Qgcm9vdCBJRC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXRSZWFjdFJvb3RJRFN0cmluZyhpbmRleCkge1xuICByZXR1cm4gU0VQQVJBVE9SICsgaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGNoYXJhY3RlciBpbiB0aGUgc3VwcGxpZWQgSUQgaXMgYSBzZXBhcmF0b3Igb3IgdGhlIGVuZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQSBSZWFjdCBET00gSUQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggb2YgdGhlIGNoYXJhY3RlciB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNoYXJhY3RlciBpcyBhIHNlcGFyYXRvciBvciBlbmQgb2YgdGhlIElELlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaXNCb3VuZGFyeShpZCwgaW5kZXgpIHtcbiAgcmV0dXJuIGlkLmNoYXJBdChpbmRleCkgPT09IFNFUEFSQVRPUiB8fCBpbmRleCA9PT0gaWQubGVuZ3RoO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgc3VwcGxpZWQgc3RyaW5nIGlzIGEgdmFsaWQgUmVhY3QgRE9NIElELlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBIFJlYWN0IERPTSBJRCwgbWF5YmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBzdHJpbmcgaXMgYSB2YWxpZCBSZWFjdCBET00gSUQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkSUQoaWQpIHtcbiAgcmV0dXJuIGlkID09PSAnJyB8fCBpZC5jaGFyQXQoMCkgPT09IFNFUEFSQVRPUiAmJiBpZC5jaGFyQXQoaWQubGVuZ3RoIC0gMSkgIT09IFNFUEFSQVRPUjtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGZpcnN0IElEIGlzIGFuIGFuY2VzdG9yIG9mIG9yIGVxdWFsIHRvIHRoZSBzZWNvbmQgSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFuY2VzdG9ySURcbiAqIEBwYXJhbSB7c3RyaW5nfSBkZXNjZW5kYW50SURcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYGFuY2VzdG9ySURgIGlzIGFuIGFuY2VzdG9yIG9mIGBkZXNjZW5kYW50SURgLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGlzQW5jZXN0b3JJRE9mKGFuY2VzdG9ySUQsIGRlc2NlbmRhbnRJRCkge1xuICByZXR1cm4gZGVzY2VuZGFudElELmluZGV4T2YoYW5jZXN0b3JJRCkgPT09IDAgJiYgaXNCb3VuZGFyeShkZXNjZW5kYW50SUQsIGFuY2VzdG9ySUQubGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBwYXJlbnQgSUQgb2YgdGhlIHN1cHBsaWVkIFJlYWN0IERPTSBJRCwgYGlkYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgYSBjb21wb25lbnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IElEIG9mIHRoZSBwYXJlbnQsIG9yIGFuIGVtcHR5IHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudElEKGlkKSB7XG4gIHJldHVybiBpZCA/IGlkLnN1YnN0cigwLCBpZC5sYXN0SW5kZXhPZihTRVBBUkFUT1IpKSA6ICcnO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5leHQgRE9NIElEIG9uIHRoZSB0cmVlIHBhdGggZnJvbSB0aGUgc3VwcGxpZWQgYGFuY2VzdG9ySURgIHRvIHRoZVxuICogc3VwcGxpZWQgYGRlc3RpbmF0aW9uSURgLiBJZiB0aGV5IGFyZSBlcXVhbCwgdGhlIElEIGlzIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhbmNlc3RvcklEIElEIG9mIGFuIGFuY2VzdG9yIG5vZGUgb2YgYGRlc3RpbmF0aW9uSURgLlxuICogQHBhcmFtIHtzdHJpbmd9IGRlc3RpbmF0aW9uSUQgSUQgb2YgdGhlIGRlc3RpbmF0aW9uIG5vZGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5leHQgSUQgb24gdGhlIHBhdGggZnJvbSBgYW5jZXN0b3JJRGAgdG8gYGRlc3RpbmF0aW9uSURgLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0TmV4dERlc2NlbmRhbnRJRChhbmNlc3RvcklELCBkZXN0aW5hdGlvbklEKSB7XG4gICEoaXNWYWxpZElEKGFuY2VzdG9ySUQpICYmIGlzVmFsaWRJRChkZXN0aW5hdGlvbklEKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZ2V0TmV4dERlc2NlbmRhbnRJRCglcywgJXMpOiBSZWNlaXZlZCBhbiBpbnZhbGlkIFJlYWN0IERPTSBJRC4nLCBhbmNlc3RvcklELCBkZXN0aW5hdGlvbklEKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICFpc0FuY2VzdG9ySURPZihhbmNlc3RvcklELCBkZXN0aW5hdGlvbklEKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdnZXROZXh0RGVzY2VuZGFudElEKC4uLik6IFJlYWN0IGhhcyBtYWRlIGFuIGludmFsaWQgYXNzdW1wdGlvbiBhYm91dCAnICsgJ3RoZSBET00gaGllcmFyY2h5LiBFeHBlY3RlZCBgJXNgIHRvIGJlIGFuIGFuY2VzdG9yIG9mIGAlc2AuJywgYW5jZXN0b3JJRCwgZGVzdGluYXRpb25JRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICBpZiAoYW5jZXN0b3JJRCA9PT0gZGVzdGluYXRpb25JRCkge1xuICAgIHJldHVybiBhbmNlc3RvcklEO1xuICB9XG4gIC8vIFNraXAgb3ZlciB0aGUgYW5jZXN0b3IgYW5kIHRoZSBpbW1lZGlhdGUgc2VwYXJhdG9yLiBUcmF2ZXJzZSB1bnRpbCB3ZSBoaXRcbiAgLy8gYW5vdGhlciBzZXBhcmF0b3Igb3Igd2UgcmVhY2ggdGhlIGVuZCBvZiBgZGVzdGluYXRpb25JRGAuXG4gIHZhciBzdGFydCA9IGFuY2VzdG9ySUQubGVuZ3RoICsgU0VQQVJBVE9SX0xFTkdUSDtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IHN0YXJ0OyBpIDwgZGVzdGluYXRpb25JRC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpc0JvdW5kYXJ5KGRlc3RpbmF0aW9uSUQsIGkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlc3RpbmF0aW9uSUQuc3Vic3RyKDAsIGkpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5lYXJlc3QgY29tbW9uIGFuY2VzdG9yIElEIG9mIHR3byBJRHMuXG4gKlxuICogVXNpbmcgdGhpcyBJRCBzY2hlbWUsIHRoZSBuZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBJRCBpcyB0aGUgbG9uZ2VzdCBjb21tb25cbiAqIHByZWZpeCBvZiB0aGUgdHdvIElEcyB0aGF0IGltbWVkaWF0ZWx5IHByZWNlZGVkIGEgXCJtYXJrZXJcIiBpbiBib3RoIHN0cmluZ3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG9uZUlEXG4gKiBAcGFyYW0ge3N0cmluZ30gdHdvSURcbiAqIEByZXR1cm4ge3N0cmluZ30gTmVhcmVzdCBjb21tb24gYW5jZXN0b3IgSUQsIG9yIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm9uZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldEZpcnN0Q29tbW9uQW5jZXN0b3JJRChvbmVJRCwgdHdvSUQpIHtcbiAgdmFyIG1pbkxlbmd0aCA9IE1hdGgubWluKG9uZUlELmxlbmd0aCwgdHdvSUQubGVuZ3RoKTtcbiAgaWYgKG1pbkxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICB2YXIgbGFzdENvbW1vbk1hcmtlckluZGV4ID0gMDtcbiAgLy8gVXNlIGA8PWAgdG8gdHJhdmVyc2UgdW50aWwgdGhlIFwiRU9MXCIgb2YgdGhlIHNob3J0ZXIgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8PSBtaW5MZW5ndGg7IGkrKykge1xuICAgIGlmIChpc0JvdW5kYXJ5KG9uZUlELCBpKSAmJiBpc0JvdW5kYXJ5KHR3b0lELCBpKSkge1xuICAgICAgbGFzdENvbW1vbk1hcmtlckluZGV4ID0gaTtcbiAgICB9IGVsc2UgaWYgKG9uZUlELmNoYXJBdChpKSAhPT0gdHdvSUQuY2hhckF0KGkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgdmFyIGxvbmdlc3RDb21tb25JRCA9IG9uZUlELnN1YnN0cigwLCBsYXN0Q29tbW9uTWFya2VySW5kZXgpO1xuICAhaXNWYWxpZElEKGxvbmdlc3RDb21tb25JRCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKCVzLCAlcyk6IEV4cGVjdGVkIGEgdmFsaWQgUmVhY3QgRE9NIElEOiAlcycsIG9uZUlELCB0d29JRCwgbG9uZ2VzdENvbW1vbklEKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBsb25nZXN0Q29tbW9uSUQ7XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIHRoZSBwYXJlbnQgcGF0aCBiZXR3ZWVuIHR3byBJRHMgKGVpdGhlciB1cCBvciBkb3duKS4gVGhlIElEcyBtdXN0XG4gKiBub3QgYmUgdGhlIHNhbWUsIGFuZCB0aGVyZSBtdXN0IGV4aXN0IGEgcGFyZW50IHBhdGggYmV0d2VlbiB0aGVtLiBJZiB0aGVcbiAqIGNhbGxiYWNrIHJldHVybnMgYGZhbHNlYCwgdHJhdmVyc2FsIGlzIHN0b3BwZWQuXG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfSBzdGFydCBJRCBhdCB3aGljaCB0byBzdGFydCB0cmF2ZXJzYWwuXG4gKiBAcGFyYW0gez9zdHJpbmd9IHN0b3AgSUQgYXQgd2hpY2ggdG8gZW5kIHRyYXZlcnNhbC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZSBlYWNoIElEIHdpdGguXG4gKiBAcGFyYW0geyp9IGFyZyBBcmd1bWVudCB0byBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGguXG4gKiBAcGFyYW0gez9ib29sZWFufSBza2lwRmlyc3QgV2hldGhlciBvciBub3QgdG8gc2tpcCB0aGUgZmlyc3Qgbm9kZS5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IHNraXBMYXN0IFdoZXRoZXIgb3Igbm90IHRvIHNraXAgdGhlIGxhc3Qgbm9kZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlUGFyZW50UGF0aChzdGFydCwgc3RvcCwgY2IsIGFyZywgc2tpcEZpcnN0LCBza2lwTGFzdCkge1xuICBzdGFydCA9IHN0YXJ0IHx8ICcnO1xuICBzdG9wID0gc3RvcCB8fCAnJztcbiAgIShzdGFydCAhPT0gc3RvcCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndHJhdmVyc2VQYXJlbnRQYXRoKC4uLik6IENhbm5vdCB0cmF2ZXJzZSBmcm9tIGFuZCB0byB0aGUgc2FtZSBJRCwgYCVzYC4nLCBzdGFydCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICB2YXIgdHJhdmVyc2VVcCA9IGlzQW5jZXN0b3JJRE9mKHN0b3AsIHN0YXJ0KTtcbiAgISh0cmF2ZXJzZVVwIHx8IGlzQW5jZXN0b3JJRE9mKHN0YXJ0LCBzdG9wKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndHJhdmVyc2VQYXJlbnRQYXRoKCVzLCAlcywgLi4uKTogQ2Fubm90IHRyYXZlcnNlIGZyb20gdHdvIElEcyB0aGF0IGRvICcgKyAnbm90IGhhdmUgYSBwYXJlbnQgcGF0aC4nLCBzdGFydCwgc3RvcCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAvLyBUcmF2ZXJzZSBmcm9tIGBzdGFydGAgdG8gYHN0b3BgIG9uZSBkZXB0aCBhdCBhIHRpbWUuXG4gIHZhciBkZXB0aCA9IDA7XG4gIHZhciB0cmF2ZXJzZSA9IHRyYXZlcnNlVXAgPyBnZXRQYXJlbnRJRCA6IGdldE5leHREZXNjZW5kYW50SUQ7XG4gIGZvciAodmFyIGlkID0gc3RhcnQ7OyAvKiB1bnRpbCBicmVhayAqL2lkID0gdHJhdmVyc2UoaWQsIHN0b3ApKSB7XG4gICAgdmFyIHJldDtcbiAgICBpZiAoKCFza2lwRmlyc3QgfHwgaWQgIT09IHN0YXJ0KSAmJiAoIXNraXBMYXN0IHx8IGlkICE9PSBzdG9wKSkge1xuICAgICAgcmV0ID0gY2IoaWQsIHRyYXZlcnNlVXAsIGFyZyk7XG4gICAgfVxuICAgIGlmIChyZXQgPT09IGZhbHNlIHx8IGlkID09PSBzdG9wKSB7XG4gICAgICAvLyBPbmx5IGJyZWFrIC8vYWZ0ZXIvLyB2aXNpdGluZyBgc3RvcGAuXG4gICAgICBicmVhaztcbiAgICB9XG4gICAgIShkZXB0aCsrIDwgTUFYX1RSRUVfREVQVEgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RyYXZlcnNlUGFyZW50UGF0aCglcywgJXMsIC4uLik6IERldGVjdGVkIGFuIGluZmluaXRlIGxvb3Agd2hpbGUgJyArICd0cmF2ZXJzaW5nIHRoZSBSZWFjdCBET00gSUQgdHJlZS4gVGhpcyBtYXkgYmUgZHVlIHRvIG1hbGZvcm1lZCBJRHM6ICVzJywgc3RhcnQsIHN0b3AsIGlkKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBNYW5hZ2VzIHRoZSBJRHMgYXNzaWduZWQgdG8gRE9NIHJlcHJlc2VudGF0aW9ucyBvZiBSZWFjdCBjb21wb25lbnRzLiBUaGlzXG4gKiB1c2VzIGEgc3BlY2lmaWMgc2NoZW1lIGluIG9yZGVyIHRvIHRyYXZlcnNlIHRoZSBET00gZWZmaWNpZW50bHkgKGUuZy4gaW5cbiAqIG9yZGVyIHRvIHNpbXVsYXRlIGV2ZW50cykuXG4gKlxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIFJlYWN0IHJvb3QgSURcbiAgICogQHJldHVybiB7c3RyaW5nfSBBIFJlYWN0IHJvb3QgSUQuXG4gICAqL1xuICBjcmVhdGVSZWFjdFJvb3RJRDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRSZWFjdFJvb3RJRFN0cmluZyhSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCgpKTtcbiAgfSxcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIFJlYWN0IElEIGJ5IGpvaW5pbmcgYSByb290IElEIHdpdGggYSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIFJvb3QgSUQgb2YgYSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBIGNvbXBvbmVudCdzIG5hbWUgKGFzIGZsYXR0ZW5lZCBjaGlsZHJlbikuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gQSBSZWFjdCBJRC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBjcmVhdGVSZWFjdElEOiBmdW5jdGlvbiAocm9vdElELCBuYW1lKSB7XG4gICAgcmV0dXJuIHJvb3RJRCArIG5hbWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIERPTSBJRCBvZiB0aGUgUmVhY3QgY29tcG9uZW50IHRoYXQgaXMgdGhlIHJvb3Qgb2YgdGhlIHRyZWUgdGhhdFxuICAgKiBjb250YWlucyB0aGUgUmVhY3QgY29tcG9uZW50IHdpdGggdGhlIHN1cHBsaWVkIERPTSBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIERPTSBJRCBvZiBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7P3N0cmluZ30gRE9NIElEIG9mIHRoZSBSZWFjdCBjb21wb25lbnQgdGhhdCBpcyB0aGUgcm9vdC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIGlmIChpZCAmJiBpZC5jaGFyQXQoMCkgPT09IFNFUEFSQVRPUiAmJiBpZC5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgaW5kZXggPSBpZC5pbmRleE9mKFNFUEFSQVRPUiwgMSk7XG4gICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGlkLnN1YnN0cigwLCBpbmRleCkgOiBpZDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXZlcnNlcyB0aGUgSUQgaGllcmFyY2h5IGFuZCBpbnZva2VzIHRoZSBzdXBwbGllZCBgY2JgIG9uIGFueSBJRHMgdGhhdFxuICAgKiBzaG91bGQgd291bGQgcmVjZWl2ZSBhIGBtb3VzZUVudGVyYCBvciBgbW91c2VMZWF2ZWAgZXZlbnQuXG4gICAqXG4gICAqIE5PVEU6IERvZXMgbm90IGludm9rZSB0aGUgY2FsbGJhY2sgb24gdGhlIG5lYXJlc3QgY29tbW9uIGFuY2VzdG9yIGJlY2F1c2VcbiAgICogbm90aGluZyBcImVudGVyZWRcIiBvciBcImxlZnRcIiB0aGF0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsZWF2ZUlEIElEIGJlaW5nIGxlZnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbnRlcklEIElEIGJlaW5nIGVudGVyZWQuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZSBvbiBlYWNoIGVudGVyZWQvbGVmdCBJRC5cbiAgICogQHBhcmFtIHsqfSB1cEFyZyBBcmd1bWVudCB0byBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGggb24gbGVmdCBJRHMuXG4gICAqIEBwYXJhbSB7Kn0gZG93bkFyZyBBcmd1bWVudCB0byBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGggb24gZW50ZXJlZCBJRHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdHJhdmVyc2VFbnRlckxlYXZlOiBmdW5jdGlvbiAobGVhdmVJRCwgZW50ZXJJRCwgY2IsIHVwQXJnLCBkb3duQXJnKSB7XG4gICAgdmFyIGFuY2VzdG9ySUQgPSBnZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQobGVhdmVJRCwgZW50ZXJJRCk7XG4gICAgaWYgKGFuY2VzdG9ySUQgIT09IGxlYXZlSUQpIHtcbiAgICAgIHRyYXZlcnNlUGFyZW50UGF0aChsZWF2ZUlELCBhbmNlc3RvcklELCBjYiwgdXBBcmcsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGFuY2VzdG9ySUQgIT09IGVudGVySUQpIHtcbiAgICAgIHRyYXZlcnNlUGFyZW50UGF0aChhbmNlc3RvcklELCBlbnRlcklELCBjYiwgZG93bkFyZywgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2ltdWxhdGVzIHRoZSB0cmF2ZXJzYWwgb2YgYSB0d28tcGhhc2UsIGNhcHR1cmUvYnViYmxlIGV2ZW50IGRpc3BhdGNoLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIHRyYXZlcnNhbCBoYXBwZW5zIG9uIElEcyB3aXRob3V0IHRvdWNoaW5nIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRJRCBJRCBvZiB0aGUgdGFyZ2V0IG5vZGUuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSBhcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXZlcnNlVHdvUGhhc2U6IGZ1bmN0aW9uICh0YXJnZXRJRCwgY2IsIGFyZykge1xuICAgIGlmICh0YXJnZXRJRCkge1xuICAgICAgdHJhdmVyc2VQYXJlbnRQYXRoKCcnLCB0YXJnZXRJRCwgY2IsIGFyZywgdHJ1ZSwgZmFsc2UpO1xuICAgICAgdHJhdmVyc2VQYXJlbnRQYXRoKHRhcmdldElELCAnJywgY2IsIGFyZywgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2FtZSBhcyBgdHJhdmVyc2VUd29QaGFzZWAgYnV0IHNraXBzIHRoZSBgdGFyZ2V0SURgLlxuICAgKi9cbiAgdHJhdmVyc2VUd29QaGFzZVNraXBUYXJnZXQ6IGZ1bmN0aW9uICh0YXJnZXRJRCwgY2IsIGFyZykge1xuICAgIGlmICh0YXJnZXRJRCkge1xuICAgICAgdHJhdmVyc2VQYXJlbnRQYXRoKCcnLCB0YXJnZXRJRCwgY2IsIGFyZywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgodGFyZ2V0SUQsICcnLCBjYiwgYXJnLCB0cnVlLCB0cnVlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXZlcnNlIGEgbm9kZSBJRCwgY2FsbGluZyB0aGUgc3VwcGxpZWQgYGNiYCBmb3IgZWFjaCBhbmNlc3RvciBJRC4gRm9yXG4gICAqIGV4YW1wbGUsIHBhc3NpbmcgYC4wLiRyb3ctMC4xYCB3b3VsZCByZXN1bHQgaW4gYGNiYCBnZXR0aW5nIGNhbGxlZFxuICAgKiB3aXRoIGAuMGAsIGAuMC4kcm93LTBgLCBhbmQgYC4wLiRyb3ctMC4xYC5cbiAgICpcbiAgICogTk9URTogVGhpcyB0cmF2ZXJzYWwgaGFwcGVucyBvbiBJRHMgd2l0aG91dCB0b3VjaGluZyB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0SUQgSUQgb2YgdGhlIHRhcmdldCBub2RlLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBDYWxsYmFjayB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gYXJnIEFyZ3VtZW50IHRvIGludm9rZSB0aGUgY2FsbGJhY2sgd2l0aC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmF2ZXJzZUFuY2VzdG9yczogZnVuY3Rpb24gKHRhcmdldElELCBjYiwgYXJnKSB7XG4gICAgdHJhdmVyc2VQYXJlbnRQYXRoKCcnLCB0YXJnZXRJRCwgY2IsIGFyZywgdHJ1ZSwgZmFsc2UpO1xuICB9LFxuXG4gIGdldEZpcnN0Q29tbW9uQW5jZXN0b3JJRDogZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklELFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0TmV4dERlc2NlbmRhbnRJRDogZ2V0TmV4dERlc2NlbmRhbnRJRCxcblxuICBpc0FuY2VzdG9ySURPZjogaXNBbmNlc3RvcklET2YsXG5cbiAgU0VQQVJBVE9SOiBTRVBBUkFUT1JcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEluc3RhbmNlSGFuZGxlczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbnN0YW5jZU1hcFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBgUmVhY3RJbnN0YW5jZU1hcGAgbWFpbnRhaW5zIGEgbWFwcGluZyBmcm9tIGEgcHVibGljIGZhY2luZyBzdGF0ZWZ1bFxuICogaW5zdGFuY2UgKGtleSkgYW5kIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiAodmFsdWUpLiBUaGlzIGFsbG93cyBwdWJsaWNcbiAqIG1ldGhvZHMgdG8gYWNjZXB0IHRoZSB1c2VyIGZhY2luZyBpbnN0YW5jZSBhcyBhbiBhcmd1bWVudCBhbmQgbWFwIHRoZW0gYmFja1xuICogdG8gaW50ZXJuYWwgbWV0aG9kcy5cbiAqL1xuXG4vLyBUT0RPOiBSZXBsYWNlIHRoaXMgd2l0aCBFUzY6IHZhciBSZWFjdEluc3RhbmNlTWFwID0gbmV3IE1hcCgpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSB7XG5cbiAgLyoqXG4gICAqIFRoaXMgQVBJIHNob3VsZCBiZSBjYWxsZWQgYGRlbGV0ZWAgYnV0IHdlJ2QgaGF2ZSB0byBtYWtlIHN1cmUgdG8gYWx3YXlzXG4gICAqIHRyYW5zZm9ybSB0aGVzZSB0byBzdHJpbmdzIGZvciBJRSBzdXBwb3J0LiBXaGVuIHRoaXMgdHJhbnNmb3JtIGlzIGZ1bGx5XG4gICAqIHN1cHBvcnRlZCB3ZSBjYW4gcmVuYW1lIGl0LlxuICAgKi9cbiAgcmVtb3ZlOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIH0sXG5cbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtleS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlO1xuICB9LFxuXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSAhPT0gdW5kZWZpbmVkO1xuICB9LFxuXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSA9IHZhbHVlO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbnN0YW5jZU1hcDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJc29tb3JwaGljXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDaGlsZHJlbiA9IHJlcXVpcmUoJy4vUmVhY3RDaGlsZHJlbicpO1xudmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudCcpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKCcuL1JlYWN0Q2xhc3MnKTtcbnZhciBSZWFjdERPTUZhY3RvcmllcyA9IHJlcXVpcmUoJy4vUmVhY3RET01GYWN0b3JpZXMnKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50VmFsaWRhdG9yJyk7XG52YXIgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVzJyk7XG52YXIgUmVhY3RWZXJzaW9uID0gcmVxdWlyZSgnLi9SZWFjdFZlcnNpb24nKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIG9ubHlDaGlsZCA9IHJlcXVpcmUoJy4vb25seUNoaWxkJyk7XG5cbnZhciBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQ7XG52YXIgY3JlYXRlRmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5O1xudmFyIGNsb25lRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQ7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGNyZWF0ZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRWxlbWVudDtcbiAgY3JlYXRlRmFjdG9yeSA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVGYWN0b3J5O1xuICBjbG9uZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY2xvbmVFbGVtZW50O1xufVxuXG52YXIgUmVhY3QgPSB7XG5cbiAgLy8gTW9kZXJuXG5cbiAgQ2hpbGRyZW46IHtcbiAgICBtYXA6IFJlYWN0Q2hpbGRyZW4ubWFwLFxuICAgIGZvckVhY2g6IFJlYWN0Q2hpbGRyZW4uZm9yRWFjaCxcbiAgICBjb3VudDogUmVhY3RDaGlsZHJlbi5jb3VudCxcbiAgICB0b0FycmF5OiBSZWFjdENoaWxkcmVuLnRvQXJyYXksXG4gICAgb25seTogb25seUNoaWxkXG4gIH0sXG5cbiAgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudCxcblxuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50LFxuICBjbG9uZUVsZW1lbnQ6IGNsb25lRWxlbWVudCxcbiAgaXNWYWxpZEVsZW1lbnQ6IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudCxcblxuICAvLyBDbGFzc2ljXG5cbiAgUHJvcFR5cGVzOiBSZWFjdFByb3BUeXBlcyxcbiAgY3JlYXRlQ2xhc3M6IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3MsXG4gIGNyZWF0ZUZhY3Rvcnk6IGNyZWF0ZUZhY3RvcnksXG4gIGNyZWF0ZU1peGluOiBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICAvLyBDdXJyZW50bHkgYSBub29wLiBXaWxsIGJlIHVzZWQgdG8gdmFsaWRhdGUgYW5kIHRyYWNlIG1peGlucy5cbiAgICByZXR1cm4gbWl4aW47XG4gIH0sXG5cbiAgLy8gVGhpcyBsb29rcyBET00gc3BlY2lmaWMgYnV0IHRoZXNlIGFyZSBhY3R1YWxseSBpc29tb3JwaGljIGhlbHBlcnNcbiAgLy8gc2luY2UgdGhleSBhcmUganVzdCBnZW5lcmF0aW5nIERPTSBzdHJpbmdzLlxuICBET006IFJlYWN0RE9NRmFjdG9yaWVzLFxuXG4gIHZlcnNpb246IFJlYWN0VmVyc2lvbixcblxuICAvLyBIb29rIGZvciBKU1ggc3ByZWFkLCBkb24ndCB1c2UgdGhpcyBmb3IgYW55dGhpbmcgZWxzZS5cbiAgX19zcHJlYWQ6IGFzc2lnblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RNYXJrdXBDaGVja3N1bVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFkbGVyMzIgPSByZXF1aXJlKCcuL2FkbGVyMzInKTtcblxudmFyIFRBR19FTkQgPSAvXFwvPz4vO1xuXG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHtcbiAgQ0hFQ0tTVU1fQVRUUl9OQU1FOiAnZGF0YS1yZWFjdC1jaGVja3N1bScsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBzdHJpbmcgd2l0aCBjaGVja3N1bSBhdHRyaWJ1dGUgYXR0YWNoZWRcbiAgICovXG4gIGFkZENoZWNrc3VtVG9NYXJrdXA6IGZ1bmN0aW9uIChtYXJrdXApIHtcbiAgICB2YXIgY2hlY2tzdW0gPSBhZGxlcjMyKG1hcmt1cCk7XG5cbiAgICAvLyBBZGQgY2hlY2tzdW0gKGhhbmRsZSBib3RoIHBhcmVudCB0YWdzIGFuZCBzZWxmLWNsb3NpbmcgdGFncylcbiAgICByZXR1cm4gbWFya3VwLnJlcGxhY2UoVEFHX0VORCwgJyAnICsgUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUgKyAnPVwiJyArIGNoZWNrc3VtICsgJ1wiJCYnKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCB0byB1c2VcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHJvb3QgUmVhY3QgZWxlbWVudFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciBvciBub3QgdGhlIG1hcmt1cCBpcyB0aGUgc2FtZVxuICAgKi9cbiAgY2FuUmV1c2VNYXJrdXA6IGZ1bmN0aW9uIChtYXJrdXAsIGVsZW1lbnQpIHtcbiAgICB2YXIgZXhpc3RpbmdDaGVja3N1bSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FKTtcbiAgICBleGlzdGluZ0NoZWNrc3VtID0gZXhpc3RpbmdDaGVja3N1bSAmJiBwYXJzZUludChleGlzdGluZ0NoZWNrc3VtLCAxMCk7XG4gICAgdmFyIG1hcmt1cENoZWNrc3VtID0gYWRsZXIzMihtYXJrdXApO1xuICAgIHJldHVybiBtYXJrdXBDaGVja3N1bSA9PT0gZXhpc3RpbmdDaGVja3N1bTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1hcmt1cENoZWNrc3VtOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE1vdW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXInKTtcbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdERPTUZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vUmVhY3RET01GZWF0dXJlRmxhZ3MnKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnRSZWdpc3RyeSA9IHJlcXVpcmUoJy4vUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5Jyk7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VIYW5kbGVzJyk7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZU1hcCcpO1xudmFyIFJlYWN0TWFya3VwQ2hlY2tzdW0gPSByZXF1aXJlKCcuL1JlYWN0TWFya3VwQ2hlY2tzdW0nKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoJy4vUmVhY3RSZWNvbmNpbGVyJyk7XG52YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVRdWV1ZScpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5T2JqZWN0Jyk7XG52YXIgY29udGFpbnNOb2RlID0gcmVxdWlyZSgnZmJqcy9saWIvY29udGFpbnNOb2RlJyk7XG52YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoJy4vc2V0SW5uZXJIVE1MJyk7XG52YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50Jyk7XG52YXIgdmFsaWRhdGVET01OZXN0aW5nID0gcmVxdWlyZSgnLi92YWxpZGF0ZURPTU5lc3RpbmcnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgQVRUUl9OQU1FID0gRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUU7XG52YXIgbm9kZUNhY2hlID0ge307XG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG52YXIgRE9DX05PREVfVFlQRSA9IDk7XG52YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFID0gMTE7XG5cbnZhciBvd25lckRvY3VtZW50Q29udGV4dEtleSA9ICdfX1JlYWN0TW91bnRfb3duZXJEb2N1bWVudCQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG5cbi8qKiBNYXBwaW5nIGZyb20gcmVhY3RSb290SUQgdG8gUmVhY3QgY29tcG9uZW50IGluc3RhbmNlLiAqL1xudmFyIGluc3RhbmNlc0J5UmVhY3RSb290SUQgPSB7fTtcblxuLyoqIE1hcHBpbmcgZnJvbSByZWFjdFJvb3RJRCB0byBgY29udGFpbmVyYCBub2Rlcy4gKi9cbnZhciBjb250YWluZXJzQnlSZWFjdFJvb3RJRCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvKiogX19ERVZfXy1vbmx5IG1hcHBpbmcgZnJvbSByZWFjdFJvb3RJRCB0byByb290IGVsZW1lbnRzLiAqL1xuICB2YXIgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRCA9IHt9O1xufVxuXG4vLyBVc2VkIHRvIHN0b3JlIGJyZWFkdGgtZmlyc3Qgc2VhcmNoIHN0YXRlIGluIGZpbmRDb21wb25lbnRSb290LlxudmFyIGZpbmRDb21wb25lbnRSb290UmV1c2FibGVBcnJheSA9IFtdO1xuXG4vKipcbiAqIEZpbmRzIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gKiB0aGF0J3Mgbm90IGNvbW1vbiBiZXR3ZWVuIHRoZSB0d28gZ2l2ZW4gc3RyaW5ncy5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBpbmRleCBvZiB0aGUgY2hhcmFjdGVyIHdoZXJlIHRoZSBzdHJpbmdzIGRpdmVyZ2VcbiAqL1xuZnVuY3Rpb24gZmlyc3REaWZmZXJlbmNlSW5kZXgoc3RyaW5nMSwgc3RyaW5nMikge1xuICB2YXIgbWluTGVuID0gTWF0aC5taW4oc3RyaW5nMS5sZW5ndGgsIHN0cmluZzIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaW5MZW47IGkrKykge1xuICAgIGlmIChzdHJpbmcxLmNoYXJBdChpKSAhPT0gc3RyaW5nMi5jaGFyQXQoaSkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyaW5nMS5sZW5ndGggPT09IHN0cmluZzIubGVuZ3RoID8gLTEgOiBtaW5MZW47XG59XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTURvY3VtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdGhhdCBtYXkgY29udGFpblxuICogYSBSZWFjdCBjb21wb25lbnRcbiAqIEByZXR1cm4gez8qfSBET00gZWxlbWVudCB0aGF0IG1heSBoYXZlIHRoZSByZWFjdFJvb3QgSUQsIG9yIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpIHtcbiAgaWYgKCFjb250YWluZXIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0aGF0IG1heSBjb250YWluIGEgUmVhY3QgY29tcG9uZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gQSBcInJlYWN0Um9vdFwiIElELCBpZiBhIFJlYWN0IGNvbXBvbmVudCBpcyByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKSB7XG4gIHZhciByb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICByZXR1cm4gcm9vdEVsZW1lbnQgJiYgUmVhY3RNb3VudC5nZXRJRChyb290RWxlbWVudCk7XG59XG5cbi8qKlxuICogQWNjZXNzaW5nIG5vZGVbQVRUUl9OQU1FXSBvciBjYWxsaW5nIGdldEF0dHJpYnV0ZShBVFRSX05BTUUpIG9uIGEgZm9ybVxuICogZWxlbWVudCBjYW4gcmV0dXJuIGl0cyBjb250cm9sIHdob3NlIG5hbWUgb3IgSUQgZXF1YWxzIEFUVFJfTkFNRS4gQWxsXG4gKiBET00gbm9kZXMgc3VwcG9ydCBgZ2V0QXR0cmlidXRlTm9kZWAgYnV0IHRoaXMgY2FuIGFsc28gZ2V0IGNhbGxlZCBvblxuICogb3RoZXIgb2JqZWN0cyBzbyBqdXN0IHJldHVybiAnJyBpZiB3ZSdyZSBnaXZlbiBzb21ldGhpbmcgb3RoZXIgdGhhbiBhXG4gKiBET00gbm9kZSAoc3VjaCBhcyB3aW5kb3cpLlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR8RE9NV2luZG93fERPTURvY3VtZW50fERPTVRleHROb2RlfSBub2RlIERPTSBub2RlLlxuICogQHJldHVybiB7c3RyaW5nfSBJRCBvZiB0aGUgc3VwcGxpZWQgYGRvbU5vZGVgLlxuICovXG5mdW5jdGlvbiBnZXRJRChub2RlKSB7XG4gIHZhciBpZCA9IGludGVybmFsR2V0SUQobm9kZSk7XG4gIGlmIChpZCkge1xuICAgIGlmIChub2RlQ2FjaGUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICB2YXIgY2FjaGVkID0gbm9kZUNhY2hlW2lkXTtcbiAgICAgIGlmIChjYWNoZWQgIT09IG5vZGUpIHtcbiAgICAgICAgISFpc1ZhbGlkKGNhY2hlZCwgaWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0TW91bnQ6IFR3byB2YWxpZCBidXQgdW5lcXVhbCBub2RlcyB3aXRoIHRoZSBzYW1lIGAlc2A6ICVzJywgQVRUUl9OQU1FLCBpZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIG5vZGVDYWNoZVtpZF0gPSBub2RlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlQ2FjaGVbaWRdID0gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaWQ7XG59XG5cbmZ1bmN0aW9uIGludGVybmFsR2V0SUQobm9kZSkge1xuICAvLyBJZiBub2RlIGlzIHNvbWV0aGluZyBsaWtlIGEgd2luZG93LCBkb2N1bWVudCwgb3IgdGV4dCBub2RlLCBub25lIG9mXG4gIC8vIHdoaWNoIHN1cHBvcnQgYXR0cmlidXRlcyBvciBhIC5nZXRBdHRyaWJ1dGUgbWV0aG9kLCBncmFjZWZ1bGx5IHJldHVyblxuICAvLyB0aGUgZW1wdHkgc3RyaW5nLCBhcyBpZiB0aGUgYXR0cmlidXRlIHdlcmUgbWlzc2luZy5cbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoQVRUUl9OQU1FKSB8fCAnJztcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBSZWFjdC1zcGVjaWZpYyBJRCBvZiB0aGUgZ2l2ZW4gbm9kZS5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgVGhlIERPTSBub2RlIHdob3NlIElEIHdpbGwgYmUgc2V0LlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSB2YWx1ZSBvZiB0aGUgSUQgYXR0cmlidXRlLlxuICovXG5mdW5jdGlvbiBzZXRJRChub2RlLCBpZCkge1xuICB2YXIgb2xkSUQgPSBpbnRlcm5hbEdldElEKG5vZGUpO1xuICBpZiAob2xkSUQgIT09IGlkKSB7XG4gICAgZGVsZXRlIG5vZGVDYWNoZVtvbGRJRF07XG4gIH1cbiAgbm9kZS5zZXRBdHRyaWJ1dGUoQVRUUl9OQU1FLCBpZCk7XG4gIG5vZGVDYWNoZVtpZF0gPSBub2RlO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBub2RlIHdpdGggdGhlIHN1cHBsaWVkIFJlYWN0LWdlbmVyYXRlZCBET00gSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIEEgUmVhY3QtZ2VuZXJhdGVkIERPTSBJRC5cbiAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IERPTSBub2RlIHdpdGggdGhlIHN1cHBsZWQgYGlkYC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXROb2RlKGlkKSB7XG4gIGlmICghbm9kZUNhY2hlLmhhc093blByb3BlcnR5KGlkKSB8fCAhaXNWYWxpZChub2RlQ2FjaGVbaWRdLCBpZCkpIHtcbiAgICBub2RlQ2FjaGVbaWRdID0gUmVhY3RNb3VudC5maW5kUmVhY3ROb2RlQnlJRChpZCk7XG4gIH1cbiAgcmV0dXJuIG5vZGVDYWNoZVtpZF07XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgcHVibGljIFJlYWN0IGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7Kn0gaW5zdGFuY2UgQSBwdWJsaWMgUmVhY3QgaW5zdGFuY2UuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH0gRE9NIG5vZGUgd2l0aCB0aGUgc3VwcGxlZCBgaWRgLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgdmFyIGlkID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQoaW5zdGFuY2UpLl9yb290Tm9kZUlEO1xuICBpZiAoUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5LmlzTnVsbENvbXBvbmVudElEKGlkKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICghbm9kZUNhY2hlLmhhc093blByb3BlcnR5KGlkKSB8fCAhaXNWYWxpZChub2RlQ2FjaGVbaWRdLCBpZCkpIHtcbiAgICBub2RlQ2FjaGVbaWRdID0gUmVhY3RNb3VudC5maW5kUmVhY3ROb2RlQnlJRChpZCk7XG4gIH1cbiAgcmV0dXJuIG5vZGVDYWNoZVtpZF07XG59XG5cbi8qKlxuICogQSBub2RlIGlzIFwidmFsaWRcIiBpZiBpdCBpcyBjb250YWluZWQgYnkgYSBjdXJyZW50bHkgbW91bnRlZCBjb250YWluZXIuXG4gKlxuICogVGhpcyBtZWFucyB0aGF0IHRoZSBub2RlIGRvZXMgbm90IGhhdmUgdG8gYmUgY29udGFpbmVkIGJ5IGEgZG9jdW1lbnQgaW5cbiAqIG9yZGVyIHRvIGJlIGNvbnNpZGVyZWQgdmFsaWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRWxlbWVudH0gbm9kZSBUaGUgY2FuZGlkYXRlIERPTSBub2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBleHBlY3RlZCBJRCBvZiB0aGUgbm9kZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG5vZGUgaXMgY29udGFpbmVkIGJ5IGEgbW91bnRlZCBjb250YWluZXIuXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWQobm9kZSwgaWQpIHtcbiAgaWYgKG5vZGUpIHtcbiAgICAhKGludGVybmFsR2V0SUQobm9kZSkgPT09IGlkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdE1vdW50OiBVbmV4cGVjdGVkIG1vZGlmaWNhdGlvbiBvZiBgJXNgJywgQVRUUl9OQU1FKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgY29udGFpbmVyID0gUmVhY3RNb3VudC5maW5kUmVhY3RDb250YWluZXJGb3JJRChpZCk7XG4gICAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluc05vZGUoY29udGFpbmVyLCBub2RlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENhdXNlcyB0aGUgY2FjaGUgdG8gZm9yZ2V0IGFib3V0IG9uZSBSZWFjdC1zcGVjaWZpYyBJRC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIHRvIGZvcmdldC5cbiAqL1xuZnVuY3Rpb24gcHVyZ2VJRChpZCkge1xuICBkZWxldGUgbm9kZUNhY2hlW2lkXTtcbn1cblxudmFyIGRlZXBlc3ROb2RlU29GYXIgPSBudWxsO1xuZnVuY3Rpb24gZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvckltcGwoYW5jZXN0b3JJRCkge1xuICB2YXIgYW5jZXN0b3IgPSBub2RlQ2FjaGVbYW5jZXN0b3JJRF07XG4gIGlmIChhbmNlc3RvciAmJiBpc1ZhbGlkKGFuY2VzdG9yLCBhbmNlc3RvcklEKSkge1xuICAgIGRlZXBlc3ROb2RlU29GYXIgPSBhbmNlc3RvcjtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIG5vZGUgaXNuJ3QgcG9wdWxhdGVkIGluIHRoZSBjYWNoZSwgc28gcHJlc3VtYWJseSBub25lIG9mIGl0c1xuICAgIC8vIGRlc2NlbmRhbnRzIGFyZS4gQnJlYWsgb3V0IG9mIHRoZSBsb29wLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZGVlcGVzdCBjYWNoZWQgbm9kZSB3aG9zZSBJRCBpcyBhIHByZWZpeCBvZiBgdGFyZ2V0SURgLlxuICovXG5mdW5jdGlvbiBmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9yKHRhcmdldElEKSB7XG4gIGRlZXBlc3ROb2RlU29GYXIgPSBudWxsO1xuICBSZWFjdEluc3RhbmNlSGFuZGxlcy50cmF2ZXJzZUFuY2VzdG9ycyh0YXJnZXRJRCwgZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvckltcGwpO1xuXG4gIHZhciBmb3VuZE5vZGUgPSBkZWVwZXN0Tm9kZVNvRmFyO1xuICBkZWVwZXN0Tm9kZVNvRmFyID0gbnVsbDtcbiAgcmV0dXJuIGZvdW5kTm9kZTtcbn1cblxuLyoqXG4gKiBNb3VudHMgdGhpcyBjb21wb25lbnQgYW5kIGluc2VydHMgaXQgaW50byB0aGUgRE9NLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudEluc3RhbmNlIFRoZSBpbnN0YW5jZSB0byBtb3VudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byBtb3VudCBpbnRvLlxuICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtib29sZWFufSBzaG91bGRSZXVzZU1hcmt1cCBJZiB0cnVlLCBkbyBub3QgaW5zZXJ0IG1hcmt1cFxuICovXG5mdW5jdGlvbiBtb3VudENvbXBvbmVudEludG9Ob2RlKGNvbXBvbmVudEluc3RhbmNlLCByb290SUQsIGNvbnRhaW5lciwgdHJhbnNhY3Rpb24sIHNob3VsZFJldXNlTWFya3VwLCBjb250ZXh0KSB7XG4gIGlmIChSZWFjdERPTUZlYXR1cmVGbGFncy51c2VDcmVhdGVFbGVtZW50KSB7XG4gICAgY29udGV4dCA9IGFzc2lnbih7fSwgY29udGV4dCk7XG4gICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSkge1xuICAgICAgY29udGV4dFtvd25lckRvY3VtZW50Q29udGV4dEtleV0gPSBjb250YWluZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHRbb3duZXJEb2N1bWVudENvbnRleHRLZXldID0gY29udGFpbmVyLm93bmVyRG9jdW1lbnQ7XG4gICAgfVxuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGNvbnRleHQgPT09IGVtcHR5T2JqZWN0KSB7XG4gICAgICBjb250ZXh0ID0ge307XG4gICAgfVxuICAgIHZhciB0YWcgPSBjb250YWluZXIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBjb250ZXh0W3ZhbGlkYXRlRE9NTmVzdGluZy5hbmNlc3RvckluZm9Db250ZXh0S2V5XSA9IHZhbGlkYXRlRE9NTmVzdGluZy51cGRhdGVkQW5jZXN0b3JJbmZvKG51bGwsIHRhZywgbnVsbCk7XG4gIH1cbiAgdmFyIG1hcmt1cCA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgcm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gIGNvbXBvbmVudEluc3RhbmNlLl9yZW5kZXJlZENvbXBvbmVudC5fdG9wTGV2ZWxXcmFwcGVyID0gY29tcG9uZW50SW5zdGFuY2U7XG4gIFJlYWN0TW91bnQuX21vdW50SW1hZ2VJbnRvTm9kZShtYXJrdXAsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXAsIHRyYW5zYWN0aW9uKTtcbn1cblxuLyoqXG4gKiBCYXRjaGVkIG1vdW50LlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudEluc3RhbmNlIFRoZSBpbnN0YW5jZSB0byBtb3VudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byBtb3VudCBpbnRvLlxuICogQHBhcmFtIHtib29sZWFufSBzaG91bGRSZXVzZU1hcmt1cCBJZiB0cnVlLCBkbyBub3QgaW5zZXJ0IG1hcmt1cFxuICovXG5mdW5jdGlvbiBiYXRjaGVkTW91bnRDb21wb25lbnRJbnRvTm9kZShjb21wb25lbnRJbnN0YW5jZSwgcm9vdElELCBjb250YWluZXIsIHNob3VsZFJldXNlTWFya3VwLCBjb250ZXh0KSB7XG4gIHZhciB0cmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZChcbiAgLyogZm9yY2VIVE1MICovc2hvdWxkUmV1c2VNYXJrdXApO1xuICB0cmFuc2FjdGlvbi5wZXJmb3JtKG1vdW50Q29tcG9uZW50SW50b05vZGUsIG51bGwsIGNvbXBvbmVudEluc3RhbmNlLCByb290SUQsIGNvbnRhaW5lciwgdHJhbnNhY3Rpb24sIHNob3VsZFJldXNlTWFya3VwLCBjb250ZXh0KTtcbiAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG59XG5cbi8qKlxuICogVW5tb3VudHMgYSBjb21wb25lbnQgYW5kIHJlbW92ZXMgaXQgZnJvbSB0aGUgRE9NLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGluc3RhbmNlIFJlYWN0IGNvbXBvbmVudCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHVubW91bnQgZnJvbS5cbiAqIEBmaW5hbFxuICogQGludGVybmFsXG4gKiBAc2VlIHtSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGV9XG4gKi9cbmZ1bmN0aW9uIHVubW91bnRDb21wb25lbnRGcm9tTm9kZShpbnN0YW5jZSwgY29udGFpbmVyKSB7XG4gIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KGluc3RhbmNlKTtcblxuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKSB7XG4gICAgY29udGFpbmVyID0gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2VtcHR5aW5nLWEtbm9kZVxuICB3aGlsZSAoY29udGFpbmVyLmxhc3RDaGlsZCkge1xuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIubGFzdENoaWxkKTtcbiAgfVxufVxuXG4vKipcbiAqIFRydWUgaWYgdGhlIHN1cHBsaWVkIERPTSBub2RlIGhhcyBhIGRpcmVjdCBSZWFjdC1yZW5kZXJlZCBjaGlsZCB0aGF0IGlzXG4gKiBub3QgYSBSZWFjdCByb290IGVsZW1lbnQuIFVzZWZ1bCBmb3Igd2FybmluZyBpbiBgcmVuZGVyYCxcbiAqIGB1bm1vdW50Q29tcG9uZW50QXROb2RlYCwgZXRjLlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR9IG5vZGUgVGhlIGNhbmRpZGF0ZSBET00gbm9kZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIERPTSBlbGVtZW50IGNvbnRhaW5zIGEgZGlyZWN0IGNoaWxkIHRoYXQgd2FzXG4gKiByZW5kZXJlZCBieSBSZWFjdCBidXQgaXMgbm90IGEgcm9vdCBlbGVtZW50LlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGhhc05vblJvb3RSZWFjdENoaWxkKG5vZGUpIHtcbiAgdmFyIHJlYWN0Um9vdElEID0gZ2V0UmVhY3RSb290SUQobm9kZSk7XG4gIHJldHVybiByZWFjdFJvb3RJRCA/IHJlYWN0Um9vdElEICE9PSBSZWFjdEluc3RhbmNlSGFuZGxlcy5nZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQocmVhY3RSb290SUQpIDogZmFsc2U7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgKGRlZXBlc3QpIGFuY2VzdG9yIG9mIGEgbm9kZSB3aGljaCBpcyByZW5kZXJlZCBieSB0aGlzIGNvcHlcbiAqIG9mIFJlYWN0LlxuICovXG5mdW5jdGlvbiBmaW5kRmlyc3RSZWFjdERPTUltcGwobm9kZSkge1xuICAvLyBUaGlzIG5vZGUgbWlnaHQgYmUgZnJvbSBhbm90aGVyIFJlYWN0IGluc3RhbmNlLCBzbyB3ZSBtYWtlIHN1cmUgbm90IHRvXG4gIC8vIGV4YW1pbmUgdGhlIG5vZGUgY2FjaGUgaGVyZVxuICBmb3IgKDsgbm9kZSAmJiBub2RlLnBhcmVudE5vZGUgIT09IG5vZGU7IG5vZGUgPSBub2RlLnBhcmVudE5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgLy8gTm90IGEgRE9NRWxlbWVudCwgdGhlcmVmb3JlIG5vdCBhIFJlYWN0IGNvbXBvbmVudFxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBub2RlSUQgPSBpbnRlcm5hbEdldElEKG5vZGUpO1xuICAgIGlmICghbm9kZUlEKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKG5vZGVJRCk7XG5cbiAgICAvLyBJZiBjb250YWluZXJzQnlSZWFjdFJvb3RJRCBjb250YWlucyB0aGUgY29udGFpbmVyIHdlIGZpbmQgYnkgY3Jhd2xpbmcgdXBcbiAgICAvLyB0aGUgdHJlZSwgd2Uga25vdyB0aGF0IHRoaXMgaW5zdGFuY2Ugb2YgUmVhY3QgcmVuZGVyZWQgdGhlIG5vZGUuXG4gICAgLy8gbmIuIGlzVmFsaWQncyBzdHJhdGVneSAod2l0aCBjb250YWluc05vZGUpIGRvZXMgbm90IHdvcmsgYmVjYXVzZSByZW5kZXJcbiAgICAvLyB0cmVlcyBtYXkgYmUgbmVzdGVkIGFuZCB3ZSBkb24ndCB3YW50IGEgZmFsc2UgcG9zaXRpdmUgaW4gdGhhdCBjYXNlLlxuICAgIHZhciBjdXJyZW50ID0gbm9kZTtcbiAgICB2YXIgbGFzdElEO1xuICAgIGRvIHtcbiAgICAgIGxhc3RJRCA9IGludGVybmFsR2V0SUQoY3VycmVudCk7XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnROb2RlO1xuICAgICAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuICAgICAgICAvLyBUaGUgcGFzc2VkLWluIG5vZGUgaGFzIGJlZW4gZGV0YWNoZWQgZnJvbSB0aGUgY29udGFpbmVyIGl0IHdhc1xuICAgICAgICAvLyBvcmlnaW5hbGx5IHJlbmRlcmVkIGludG8uXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGxhc3RJRCAhPT0gcmVhY3RSb290SUQpO1xuXG4gICAgaWYgKGN1cnJlbnQgPT09IGNvbnRhaW5lcnNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFRlbXBvcmFyeSAoPykgaGFjayBzbyB0aGF0IHdlIGNhbiBzdG9yZSBhbGwgdG9wLWxldmVsIHBlbmRpbmcgdXBkYXRlcyBvblxuICogY29tcG9zaXRlcyBpbnN0ZWFkIG9mIGhhdmluZyB0byB3b3JyeSBhYm91dCBkaWZmZXJlbnQgdHlwZXMgb2YgY29tcG9uZW50c1xuICogaGVyZS5cbiAqL1xudmFyIFRvcExldmVsV3JhcHBlciA9IGZ1bmN0aW9uICgpIHt9O1xuVG9wTGV2ZWxXcmFwcGVyLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0ge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUb3BMZXZlbFdyYXBwZXIuZGlzcGxheU5hbWUgPSAnVG9wTGV2ZWxXcmFwcGVyJztcbn1cblRvcExldmVsV3JhcHBlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAvLyB0aGlzLnByb3BzIGlzIGFjdHVhbGx5IGEgUmVhY3RFbGVtZW50XG4gIHJldHVybiB0aGlzLnByb3BzO1xufTtcblxuLyoqXG4gKiBNb3VudGluZyBpcyB0aGUgcHJvY2VzcyBvZiBpbml0aWFsaXppbmcgYSBSZWFjdCBjb21wb25lbnQgYnkgY3JlYXRpbmcgaXRzXG4gKiByZXByZXNlbnRhdGl2ZSBET00gZWxlbWVudHMgYW5kIGluc2VydGluZyB0aGVtIGludG8gYSBzdXBwbGllZCBgY29udGFpbmVyYC5cbiAqIEFueSBwcmlvciBjb250ZW50IGluc2lkZSBgY29udGFpbmVyYCBpcyBkZXN0cm95ZWQgaW4gdGhlIHByb2Nlc3MuXG4gKlxuICogICBSZWFjdE1vdW50LnJlbmRlcihcbiAqICAgICBjb21wb25lbnQsXG4gKiAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpXG4gKiAgICk7XG4gKlxuICogICA8ZGl2IGlkPVwiY29udGFpbmVyXCI+ICAgICAgICAgICAgICAgICAgIDwtLSBTdXBwbGllZCBgY29udGFpbmVyYC5cbiAqICAgICA8ZGl2IGRhdGEtcmVhY3RpZD1cIi4zXCI+ICAgICAgICAgICAgICA8LS0gUmVuZGVyZWQgcmVhY3RSb290IG9mIFJlYWN0XG4gKiAgICAgICAvLyAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuXG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICpcbiAqIEluc2lkZSBvZiBgY29udGFpbmVyYCwgdGhlIGZpcnN0IGVsZW1lbnQgcmVuZGVyZWQgaXMgdGhlIFwicmVhY3RSb290XCIuXG4gKi9cbnZhciBSZWFjdE1vdW50ID0ge1xuXG4gIFRvcExldmVsV3JhcHBlcjogVG9wTGV2ZWxXcmFwcGVyLFxuXG4gIC8qKiBFeHBvc2VkIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMgKiovXG4gIF9pbnN0YW5jZXNCeVJlYWN0Um9vdElEOiBpbnN0YW5jZXNCeVJlYWN0Um9vdElELFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgaG9vayBwcm92aWRlZCB0byBzdXBwb3J0IHJlbmRlcmluZyBSZWFjdCBjb21wb25lbnRzIHdoaWxlXG4gICAqIGVuc3VyaW5nIHRoYXQgdGhlIGFwcGFyZW50IHNjcm9sbCBwb3NpdGlvbiBvZiBpdHMgYGNvbnRhaW5lcmAgZG9lcyBub3RcbiAgICogY2hhbmdlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBUaGUgYGNvbnRhaW5lcmAgYmVpbmcgcmVuZGVyZWQgaW50by5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVuZGVyQ2FsbGJhY2sgVGhpcyBtdXN0IGJlIGNhbGxlZCBvbmNlIHRvIGRvIHRoZSByZW5kZXIuXG4gICAqL1xuICBzY3JvbGxNb25pdG9yOiBmdW5jdGlvbiAoY29udGFpbmVyLCByZW5kZXJDYWxsYmFjaykge1xuICAgIHJlbmRlckNhbGxiYWNrKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRha2UgYSBjb21wb25lbnQgdGhhdCdzIGFscmVhZHkgbW91bnRlZCBpbnRvIHRoZSBET00gYW5kIHJlcGxhY2UgaXRzIHByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IHByZXZDb21wb25lbnQgY29tcG9uZW50IGluc3RhbmNlIGFscmVhZHkgaW4gdGhlIERPTVxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgY29tcG9uZW50IGluc3RhbmNlIHRvIHJlbmRlclxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBjb250YWluZXIgdG8gcmVuZGVyIGludG9cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG4gICAqL1xuICBfdXBkYXRlUm9vdENvbXBvbmVudDogZnVuY3Rpb24gKHByZXZDb21wb25lbnQsIG5leHRFbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgUmVhY3RNb3VudC5zY3JvbGxNb25pdG9yKGNvbnRhaW5lciwgZnVuY3Rpb24gKCkge1xuICAgICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlRWxlbWVudEludGVybmFsKHByZXZDb21wb25lbnQsIG5leHRFbGVtZW50KTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFja0ludGVybmFsKHByZXZDb21wb25lbnQsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBSZWNvcmQgdGhlIHJvb3QgZWxlbWVudCBpbiBjYXNlIGl0IGxhdGVyIGdldHMgdHJhbnNwbGFudGVkLlxuICAgICAgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtnZXRSZWFjdFJvb3RJRChjb250YWluZXIpXSA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcmV2Q29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGNvbXBvbmVudCBpbnRvIHRoZSBpbnN0YW5jZSBtYXAgYW5kIHN0YXJ0cyBzY3JvbGwgdmFsdWVcbiAgICogbW9uaXRvcmluZ1xuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBuZXh0Q29tcG9uZW50IGNvbXBvbmVudCBpbnN0YW5jZSB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcmVhY3RSb290IElEIHByZWZpeFxuICAgKi9cbiAgX3JlZ2lzdGVyQ29tcG9uZW50OiBmdW5jdGlvbiAobmV4dENvbXBvbmVudCwgY29udGFpbmVyKSB7XG4gICAgIShjb250YWluZXIgJiYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnX3JlZ2lzdGVyQ29tcG9uZW50KC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZygpO1xuXG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RNb3VudC5yZWdpc3RlckNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIGluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gbmV4dENvbXBvbmVudDtcbiAgICByZXR1cm4gcmVhY3RSb290SUQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIG5ldyBjb21wb25lbnQgaW50byB0aGUgRE9NLlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgZWxlbWVudCB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgaWYgd2Ugc2hvdWxkIHNraXAgdGhlIG1hcmt1cCBpbnNlcnRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IG5leHRDb21wb25lbnRcbiAgICovXG4gIF9yZW5kZXJOZXdSb290Q29tcG9uZW50OiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXAsIGNvbnRleHQpIHtcbiAgICAvLyBWYXJpb3VzIHBhcnRzIG9mIG91ciBjb2RlIChzdWNoIGFzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50J3NcbiAgICAvLyBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KSBhc3N1bWUgdGhhdCBjYWxscyB0byByZW5kZXIgYXJlbid0IG5lc3RlZDtcbiAgICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLCAnX3JlbmRlck5ld1Jvb3RDb21wb25lbnQoKTogUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiAnICsgJ29mIHByb3BzIGFuZCBzdGF0ZTsgdHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSAnICsgJ3JlbmRlciBpcyBub3QgYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgKyAnY29tcG9uZW50RGlkVXBkYXRlLiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiAlcy4nLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChuZXh0RWxlbWVudCwgbnVsbCk7XG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RNb3VudC5fcmVnaXN0ZXJDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIGNvbnRhaW5lcik7XG5cbiAgICAvLyBUaGUgaW5pdGlhbCByZW5kZXIgaXMgc3luY2hyb25vdXMgYnV0IGFueSB1cGRhdGVzIHRoYXQgaGFwcGVuIGR1cmluZ1xuICAgIC8vIHJlbmRlcmluZywgaW4gY29tcG9uZW50V2lsbE1vdW50IG9yIGNvbXBvbmVudERpZE1vdW50LCB3aWxsIGJlIGJhdGNoZWRcbiAgICAvLyBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgYmF0Y2hpbmcgc3RyYXRlZ3kuXG5cbiAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMoYmF0Y2hlZE1vdW50Q29tcG9uZW50SW50b05vZGUsIGNvbXBvbmVudEluc3RhbmNlLCByZWFjdFJvb3RJRCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCwgY29udGV4dCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gUmVjb3JkIHRoZSByb290IGVsZW1lbnQgaW4gY2FzZSBpdCBsYXRlciBnZXRzIHRyYW5zcGxhbnRlZC5cbiAgICAgIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBvbmVudEluc3RhbmNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGEgUmVhY3QgY29tcG9uZW50IGludG8gdGhlIERPTSBpbiB0aGUgc3VwcGxpZWQgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIElmIHRoZSBSZWFjdCBjb21wb25lbnQgd2FzIHByZXZpb3VzbHkgcmVuZGVyZWQgaW50byBgY29udGFpbmVyYCwgdGhpcyB3aWxsXG4gICAqIHBlcmZvcm0gYW4gdXBkYXRlIG9uIGl0IGFuZCBvbmx5IG11dGF0ZSB0aGUgRE9NIGFzIG5lY2Vzc2FyeSB0byByZWZsZWN0IHRoZVxuICAgKiBsYXRlc3QgUmVhY3QgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBwYXJlbnRDb21wb25lbnQgVGhlIGNvbmNlcHR1YWwgcGFyZW50IG9mIHRoaXMgcmVuZGVyIHRyZWUuXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudCBDb21wb25lbnQgZWxlbWVudCB0byByZW5kZXIuXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdHJpZ2dlcmVkIG9uIGNvbXBsZXRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IENvbXBvbmVudCBpbnN0YW5jZSByZW5kZXJlZCBpbiBgY29udGFpbmVyYC5cbiAgICovXG4gIHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOiBmdW5jdGlvbiAocGFyZW50Q29tcG9uZW50LCBuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgICEocGFyZW50Q29tcG9uZW50ICE9IG51bGwgJiYgcGFyZW50Q29tcG9uZW50Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncGFyZW50Q29tcG9uZW50IG11c3QgYmUgYSB2YWxpZCBSZWFjdCBDb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIFJlYWN0TW91bnQuX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHBhcmVudENvbXBvbmVudCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spO1xuICB9LFxuXG4gIF9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjogZnVuY3Rpb24gKHBhcmVudENvbXBvbmVudCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5leHRFbGVtZW50KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdERPTS5yZW5kZXIoKTogSW52YWxpZCBjb21wb25lbnQgZWxlbWVudC4lcycsIHR5cGVvZiBuZXh0RWxlbWVudCA9PT0gJ3N0cmluZycgPyAnIEluc3RlYWQgb2YgcGFzc2luZyBhbiBlbGVtZW50IHN0cmluZywgbWFrZSBzdXJlIHRvIGluc3RhbnRpYXRlICcgKyAnaXQgYnkgcGFzc2luZyBpdCB0byBSZWFjdC5jcmVhdGVFbGVtZW50LicgOiB0eXBlb2YgbmV4dEVsZW1lbnQgPT09ICdmdW5jdGlvbicgPyAnIEluc3RlYWQgb2YgcGFzc2luZyBhIGNvbXBvbmVudCBjbGFzcywgbWFrZSBzdXJlIHRvIGluc3RhbnRpYXRlICcgKyAnaXQgYnkgcGFzc2luZyBpdCB0byBSZWFjdC5jcmVhdGVFbGVtZW50LicgOlxuICAgIC8vIENoZWNrIGlmIGl0IHF1YWNrcyBsaWtlIGFuIGVsZW1lbnRcbiAgICBuZXh0RWxlbWVudCAhPSBudWxsICYmIG5leHRFbGVtZW50LnByb3BzICE9PSB1bmRlZmluZWQgPyAnIFRoaXMgbWF5IGJlIGNhdXNlZCBieSB1bmludGVudGlvbmFsbHkgbG9hZGluZyB0d28gaW5kZXBlbmRlbnQgJyArICdjb3BpZXMgb2YgUmVhY3QuJyA6ICcnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY29udGFpbmVyIHx8ICFjb250YWluZXIudGFnTmFtZSB8fCBjb250YWluZXIudGFnTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnQk9EWScsICdyZW5kZXIoKTogUmVuZGVyaW5nIGNvbXBvbmVudHMgZGlyZWN0bHkgaW50byBkb2N1bWVudC5ib2R5IGlzICcgKyAnZGlzY291cmFnZWQsIHNpbmNlIGl0cyBjaGlsZHJlbiBhcmUgb2Z0ZW4gbWFuaXB1bGF0ZWQgYnkgdGhpcmQtcGFydHkgJyArICdzY3JpcHRzIGFuZCBicm93c2VyIGV4dGVuc2lvbnMuIFRoaXMgbWF5IGxlYWQgdG8gc3VidGxlICcgKyAncmVjb25jaWxpYXRpb24gaXNzdWVzLiBUcnkgcmVuZGVyaW5nIGludG8gYSBjb250YWluZXIgZWxlbWVudCBjcmVhdGVkICcgKyAnZm9yIHlvdXIgYXBwLicpIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIG5leHRXcmFwcGVkRWxlbWVudCA9IG5ldyBSZWFjdEVsZW1lbnQoVG9wTGV2ZWxXcmFwcGVyLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBuZXh0RWxlbWVudCk7XG5cbiAgICB2YXIgcHJldkNvbXBvbmVudCA9IGluc3RhbmNlc0J5UmVhY3RSb290SURbZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKV07XG5cbiAgICBpZiAocHJldkNvbXBvbmVudCkge1xuICAgICAgdmFyIHByZXZXcmFwcGVkRWxlbWVudCA9IHByZXZDb21wb25lbnQuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgdmFyIHByZXZFbGVtZW50ID0gcHJldldyYXBwZWRFbGVtZW50LnByb3BzO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgdmFyIHB1YmxpY0luc3QgPSBwcmV2Q29tcG9uZW50Ll9yZW5kZXJlZENvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgICAgICB2YXIgdXBkYXRlZENhbGxiYWNrID0gY2FsbGJhY2sgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNhbGxiYWNrLmNhbGwocHVibGljSW5zdCk7XG4gICAgICAgIH07XG4gICAgICAgIFJlYWN0TW91bnQuX3VwZGF0ZVJvb3RDb21wb25lbnQocHJldkNvbXBvbmVudCwgbmV4dFdyYXBwZWRFbGVtZW50LCBjb250YWluZXIsIHVwZGF0ZWRDYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBwdWJsaWNJbnN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50QXROb2RlKGNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlYWN0Um9vdEVsZW1lbnQgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICB2YXIgY29udGFpbmVySGFzUmVhY3RNYXJrdXAgPSByZWFjdFJvb3RFbGVtZW50ICYmICEhaW50ZXJuYWxHZXRJRChyZWFjdFJvb3RFbGVtZW50KTtcbiAgICB2YXIgY29udGFpbmVySGFzTm9uUm9vdFJlYWN0Q2hpbGQgPSBoYXNOb25Sb290UmVhY3RDaGlsZChjb250YWluZXIpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZCwgJ3JlbmRlciguLi4pOiBSZXBsYWNpbmcgUmVhY3QtcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBhIG5ldyByb290ICcgKyAnY29tcG9uZW50LiBJZiB5b3UgaW50ZW5kZWQgdG8gdXBkYXRlIHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUsICcgKyAneW91IHNob3VsZCBpbnN0ZWFkIGhhdmUgdGhlIGV4aXN0aW5nIGNoaWxkcmVuIHVwZGF0ZSB0aGVpciBzdGF0ZSAnICsgJ2FuZCByZW5kZXIgdGhlIG5ldyBjb21wb25lbnRzIGluc3RlYWQgb2YgY2FsbGluZyBSZWFjdERPTS5yZW5kZXIuJykgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICghY29udGFpbmVySGFzUmVhY3RNYXJrdXAgfHwgcmVhY3RSb290RWxlbWVudC5uZXh0U2libGluZykge1xuICAgICAgICB2YXIgcm9vdEVsZW1lbnRTaWJsaW5nID0gcmVhY3RSb290RWxlbWVudDtcbiAgICAgICAgd2hpbGUgKHJvb3RFbGVtZW50U2libGluZykge1xuICAgICAgICAgIGlmIChpbnRlcm5hbEdldElEKHJvb3RFbGVtZW50U2libGluZykpIHtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAncmVuZGVyKCk6IFRhcmdldCBub2RlIGhhcyBtYXJrdXAgcmVuZGVyZWQgYnkgUmVhY3QsIGJ1dCB0aGVyZSAnICsgJ2FyZSB1bnJlbGF0ZWQgbm9kZXMgYXMgd2VsbC4gVGhpcyBpcyBtb3N0IGNvbW1vbmx5IGNhdXNlZCBieSAnICsgJ3doaXRlLXNwYWNlIGluc2VydGVkIGFyb3VuZCBzZXJ2ZXItcmVuZGVyZWQgbWFya3VwLicpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJvb3RFbGVtZW50U2libGluZyA9IHJvb3RFbGVtZW50U2libGluZy5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzaG91bGRSZXVzZU1hcmt1cCA9IGNvbnRhaW5lckhhc1JlYWN0TWFya3VwICYmICFwcmV2Q29tcG9uZW50ICYmICFjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZDtcbiAgICB2YXIgY29tcG9uZW50ID0gUmVhY3RNb3VudC5fcmVuZGVyTmV3Um9vdENvbXBvbmVudChuZXh0V3JhcHBlZEVsZW1lbnQsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXAsIHBhcmVudENvbXBvbmVudCAhPSBudWxsID8gcGFyZW50Q29tcG9uZW50Ll9yZWFjdEludGVybmFsSW5zdGFuY2UuX3Byb2Nlc3NDaGlsZENvbnRleHQocGFyZW50Q29tcG9uZW50Ll9yZWFjdEludGVybmFsSW5zdGFuY2UuX2NvbnRleHQpIDogZW1wdHlPYmplY3QpLl9yZW5kZXJlZENvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2suY2FsbChjb21wb25lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGEgUmVhY3QgY29tcG9uZW50IGludG8gdGhlIERPTSBpbiB0aGUgc3VwcGxpZWQgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIElmIHRoZSBSZWFjdCBjb21wb25lbnQgd2FzIHByZXZpb3VzbHkgcmVuZGVyZWQgaW50byBgY29udGFpbmVyYCwgdGhpcyB3aWxsXG4gICAqIHBlcmZvcm0gYW4gdXBkYXRlIG9uIGl0IGFuZCBvbmx5IG11dGF0ZSB0aGUgRE9NIGFzIG5lY2Vzc2FyeSB0byByZWZsZWN0IHRoZVxuICAgKiBsYXRlc3QgUmVhY3QgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgQ29tcG9uZW50IGVsZW1lbnQgdG8gcmVuZGVyLlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byByZW5kZXIgaW50by5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBDb21wb25lbnQgaW5zdGFuY2UgcmVuZGVyZWQgaW4gYGNvbnRhaW5lcmAuXG4gICAqL1xuICByZW5kZXI6IGZ1bmN0aW9uIChuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBSZWFjdE1vdW50Ll9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihudWxsLCBuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGNvbnRhaW5lciBub2RlIGludG8gd2hpY2ggUmVhY3QgY29tcG9uZW50cyB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKiBUaGlzIGFsc28gY3JlYXRlcyB0aGUgXCJyZWFjdFJvb3RcIiBJRCB0aGF0IHdpbGwgYmUgYXNzaWduZWQgdG8gdGhlIGVsZW1lbnRcbiAgICogcmVuZGVyZWQgd2l0aGluLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byByZWdpc3RlciBhcyBhIGNvbnRhaW5lci5cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgXCJyZWFjdFJvb3RcIiBJRCBvZiBlbGVtZW50cyByZW5kZXJlZCB3aXRoaW4uXG4gICAqL1xuICByZWdpc3RlckNvbnRhaW5lcjogZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgIHZhciByZWFjdFJvb3RJRCA9IGdldFJlYWN0Um9vdElEKGNvbnRhaW5lcik7XG4gICAgaWYgKHJlYWN0Um9vdElEKSB7XG4gICAgICAvLyBJZiBvbmUgZXhpc3RzLCBtYWtlIHN1cmUgaXQgaXMgYSB2YWxpZCBcInJlYWN0Um9vdFwiIElELlxuICAgICAgcmVhY3RSb290SUQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5nZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQocmVhY3RSb290SUQpO1xuICAgIH1cbiAgICBpZiAoIXJlYWN0Um9vdElEKSB7XG4gICAgICAvLyBObyB2YWxpZCBcInJlYWN0Um9vdFwiIElEIGZvdW5kLCBjcmVhdGUgb25lLlxuICAgICAgcmVhY3RSb290SUQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdFJvb3RJRCgpO1xuICAgIH1cbiAgICBjb250YWluZXJzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF0gPSBjb250YWluZXI7XG4gICAgcmV0dXJuIHJlYWN0Um9vdElEO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVbm1vdW50cyBhbmQgZGVzdHJveXMgdGhlIFJlYWN0IGNvbXBvbmVudCByZW5kZXJlZCBpbiB0aGUgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IGNvbnRhaW5pbmcgYSBSZWFjdCBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYSBjb21wb25lbnQgd2FzIGZvdW5kIGluIGFuZCB1bm1vdW50ZWQgZnJvbVxuICAgKiAgICAgICAgICAgICAgICAgICBgY29udGFpbmVyYFxuICAgKi9cbiAgdW5tb3VudENvbXBvbmVudEF0Tm9kZTogZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgIC8vIFZhcmlvdXMgcGFydHMgb2Ygb3VyIGNvZGUgKHN1Y2ggYXMgUmVhY3RDb21wb3NpdGVDb21wb25lbnQnc1xuICAgIC8vIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQpIGFzc3VtZSB0aGF0IGNhbGxzIHRvIHJlbmRlciBhcmVuJ3QgbmVzdGVkO1xuICAgIC8vIHZlcmlmeSB0aGF0IHRoYXQncyB0aGUgY2FzZS4gKFN0cmljdGx5IHNwZWFraW5nLCB1bm1vdW50aW5nIHdvbid0IGNhdXNlIGFcbiAgICAvLyByZW5kZXIgYnV0IHdlIHN0aWxsIGRvbid0IGV4cGVjdCB0byBiZSBpbiBhIHJlbmRlciBjYWxsIGhlcmUuKVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCwgJ3VubW91bnRDb21wb25lbnRBdE5vZGUoKTogUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiAnICsgJ29mIHByb3BzIGFuZCBzdGF0ZTsgdHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSByZW5kZXIgJyArICdpcyBub3QgYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgKyAnY29tcG9uZW50RGlkVXBkYXRlLiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiAlcy4nLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuXG4gICAgIShjb250YWluZXIgJiYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndW5tb3VudENvbXBvbmVudEF0Tm9kZSguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIHZhciByZWFjdFJvb3RJRCA9IGdldFJlYWN0Um9vdElEKGNvbnRhaW5lcik7XG4gICAgdmFyIGNvbXBvbmVudCA9IGluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAvLyBDaGVjayBpZiB0aGUgbm9kZSBiZWluZyB1bm1vdW50ZWQgd2FzIHJlbmRlcmVkIGJ5IFJlYWN0LCBidXQgaXNuJ3QgYVxuICAgICAgLy8gcm9vdCBub2RlLlxuICAgICAgdmFyIGNvbnRhaW5lckhhc05vblJvb3RSZWFjdENoaWxkID0gaGFzTm9uUm9vdFJlYWN0Q2hpbGQoY29udGFpbmVyKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNvbnRhaW5lciBpdHNlbGYgaXMgYSBSZWFjdCByb290IG5vZGUuXG4gICAgICB2YXIgY29udGFpbmVySUQgPSBpbnRlcm5hbEdldElEKGNvbnRhaW5lcik7XG4gICAgICB2YXIgaXNDb250YWluZXJSZWFjdFJvb3QgPSBjb250YWluZXJJRCAmJiBjb250YWluZXJJRCA9PT0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKGNvbnRhaW5lcklEKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWNvbnRhaW5lckhhc05vblJvb3RSZWFjdENoaWxkLCAndW5tb3VudENvbXBvbmVudEF0Tm9kZSgpOiBUaGUgbm9kZSB5b3VcXCdyZSBhdHRlbXB0aW5nIHRvIHVubW91bnQgJyArICd3YXMgcmVuZGVyZWQgYnkgUmVhY3QgYW5kIGlzIG5vdCBhIHRvcC1sZXZlbCBjb250YWluZXIuICVzJywgaXNDb250YWluZXJSZWFjdFJvb3QgPyAnWW91IG1heSBoYXZlIGFjY2lkZW50YWxseSBwYXNzZWQgaW4gYSBSZWFjdCByb290IG5vZGUgaW5zdGVhZCAnICsgJ29mIGl0cyBjb250YWluZXIuJyA6ICdJbnN0ZWFkLCBoYXZlIHRoZSBwYXJlbnQgY29tcG9uZW50IHVwZGF0ZSBpdHMgc3RhdGUgYW5kICcgKyAncmVyZW5kZXIgaW4gb3JkZXIgdG8gcmVtb3ZlIHRoaXMgY29tcG9uZW50LicpIDogdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyh1bm1vdW50Q29tcG9uZW50RnJvbU5vZGUsIGNvbXBvbmVudCwgY29udGFpbmVyKTtcbiAgICBkZWxldGUgaW5zdGFuY2VzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG4gICAgZGVsZXRlIGNvbnRhaW5lcnNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgZGVsZXRlIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogRmluZHMgdGhlIGNvbnRhaW5lciBET00gZWxlbWVudCB0aGF0IGNvbnRhaW5zIFJlYWN0IGNvbXBvbmVudCB0byB3aGljaCB0aGVcbiAgICogc3VwcGxpZWQgRE9NIGBpZGAgYmVsb25ncy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJRCBvZiBhbiBlbGVtZW50IHJlbmRlcmVkIGJ5IGEgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHs/RE9NRWxlbWVudH0gRE9NIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgYGlkYC5cbiAgICovXG4gIGZpbmRSZWFjdENvbnRhaW5lckZvcklEOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgcmVhY3RSb290SUQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5nZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQoaWQpO1xuICAgIHZhciBjb250YWluZXIgPSBjb250YWluZXJzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG4gICAgICBpZiAocm9vdEVsZW1lbnQgJiYgcm9vdEVsZW1lbnQucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKFxuICAgICAgICAvLyBDYWxsIGludGVybmFsR2V0SUQgaGVyZSBiZWNhdXNlIGdldElEIGNhbGxzIGlzVmFsaWQgd2hpY2ggY2FsbHNcbiAgICAgICAgLy8gZmluZFJlYWN0Q29udGFpbmVyRm9ySUQgKHRoaXMgZnVuY3Rpb24pLlxuICAgICAgICBpbnRlcm5hbEdldElEKHJvb3RFbGVtZW50KSA9PT0gcmVhY3RSb290SUQsICdSZWFjdE1vdW50OiBSb290IGVsZW1lbnQgSUQgZGlmZmVyZWQgZnJvbSByZWFjdFJvb3RJRC4nKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGNvbnRhaW5lckNoaWxkID0gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmIChjb250YWluZXJDaGlsZCAmJiByZWFjdFJvb3RJRCA9PT0gaW50ZXJuYWxHZXRJRChjb250YWluZXJDaGlsZCkpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgY29udGFpbmVyIGhhcyBhIG5ldyBjaGlsZCB3aXRoIHRoZSBzYW1lIElEIGFzIHRoZSBvbGRcbiAgICAgICAgICAvLyByb290IGVsZW1lbnQsIHRoZW4gcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF0gaXNcbiAgICAgICAgICAvLyBqdXN0IHN0YWxlIGFuZCBuZWVkcyB0byBiZSB1cGRhdGVkLiBUaGUgY2FzZSB0aGF0IGRlc2VydmVzIGFcbiAgICAgICAgICAvLyB3YXJuaW5nIGlzIHdoZW4gdGhlIGNvbnRhaW5lciBpcyBlbXB0eS5cbiAgICAgICAgICByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSA9IGNvbnRhaW5lckNoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnUmVhY3RNb3VudDogUm9vdCBlbGVtZW50IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBpdHMgb3JpZ2luYWwgJyArICdjb250YWluZXIuIE5ldyBjb250YWluZXI6ICVzJywgcm9vdEVsZW1lbnQucGFyZW50Tm9kZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udGFpbmVyO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbiBlbGVtZW50IHJlbmRlcmVkIGJ5IFJlYWN0IHdpdGggdGhlIHN1cHBsaWVkIElELlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgYSBET00gbm9kZSBpbiB0aGUgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSBSb290IERPTSBub2RlIG9mIHRoZSBSZWFjdCBjb21wb25lbnQuXG4gICAqL1xuICBmaW5kUmVhY3ROb2RlQnlJRDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIHJlYWN0Um9vdCA9IFJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQoaWQpO1xuICAgIHJldHVybiBSZWFjdE1vdW50LmZpbmRDb21wb25lbnRSb290KHJlYWN0Um9vdCwgaWQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmF2ZXJzZXMgdXAgdGhlIGFuY2VzdG9ycyBvZiB0aGUgc3VwcGxpZWQgbm9kZSB0byBmaW5kIGEgbm9kZSB0aGF0IGlzIGFcbiAgICogRE9NIHJlcHJlc2VudGF0aW9uIG9mIGEgUmVhY3QgY29tcG9uZW50IHJlbmRlcmVkIGJ5IHRoaXMgY29weSBvZiBSZWFjdC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBub2RlXG4gICAqIEByZXR1cm4gez9ET01FdmVudFRhcmdldH1cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRGaXJzdFJlYWN0RE9NOiBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBmaW5kRmlyc3RSZWFjdERPTUltcGwobm9kZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGEgbm9kZSB3aXRoIHRoZSBzdXBwbGllZCBgdGFyZ2V0SURgIGluc2lkZSBvZiB0aGUgc3VwcGxpZWRcbiAgICogYGFuY2VzdG9yTm9kZWAuICBFeHBsb2l0cyB0aGUgSUQgbmFtaW5nIHNjaGVtZSB0byBwZXJmb3JtIHRoZSBzZWFyY2hcbiAgICogcXVpY2tseS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gYW5jZXN0b3JOb2RlIFNlYXJjaCBmcm9tIHRoaXMgcm9vdC5cbiAgICogQHBhcmFybSB7c3RyaW5nfSB0YXJnZXRJRCBJRCBvZiB0aGUgRE9NIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge0RPTUV2ZW50VGFyZ2V0fSBET00gbm9kZSB3aXRoIHRoZSBzdXBwbGllZCBgdGFyZ2V0SURgLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGZpbmRDb21wb25lbnRSb290OiBmdW5jdGlvbiAoYW5jZXN0b3JOb2RlLCB0YXJnZXRJRCkge1xuICAgIHZhciBmaXJzdENoaWxkcmVuID0gZmluZENvbXBvbmVudFJvb3RSZXVzYWJsZUFycmF5O1xuICAgIHZhciBjaGlsZEluZGV4ID0gMDtcblxuICAgIHZhciBkZWVwZXN0QW5jZXN0b3IgPSBmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9yKHRhcmdldElEKSB8fCBhbmNlc3Rvck5vZGU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gVGhpcyB3aWxsIHRocm93IG9uIHRoZSBuZXh0IGxpbmU7IGdpdmUgYW4gZWFybHkgd2FybmluZ1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZGVlcGVzdEFuY2VzdG9yICE9IG51bGwsICdSZWFjdCBjYW5cXCd0IGZpbmQgdGhlIHJvb3QgY29tcG9uZW50IG5vZGUgZm9yIGRhdGEtcmVhY3RpZCB2YWx1ZSAnICsgJ2Alc2AuIElmIHlvdVxcJ3JlIHNlZWluZyB0aGlzIG1lc3NhZ2UsIGl0IHByb2JhYmx5IG1lYW5zIHRoYXQgJyArICd5b3VcXCd2ZSBsb2FkZWQgdHdvIGNvcGllcyBvZiBSZWFjdCBvbiB0aGUgcGFnZS4gQXQgdGhpcyB0aW1lLCBvbmx5ICcgKyAnYSBzaW5nbGUgY29weSBvZiBSZWFjdCBjYW4gYmUgbG9hZGVkIGF0IGEgdGltZS4nLCB0YXJnZXRJRCkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZmlyc3RDaGlsZHJlblswXSA9IGRlZXBlc3RBbmNlc3Rvci5maXJzdENoaWxkO1xuICAgIGZpcnN0Q2hpbGRyZW4ubGVuZ3RoID0gMTtcblxuICAgIHdoaWxlIChjaGlsZEluZGV4IDwgZmlyc3RDaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHZhciBjaGlsZCA9IGZpcnN0Q2hpbGRyZW5bY2hpbGRJbmRleCsrXTtcbiAgICAgIHZhciB0YXJnZXRDaGlsZDtcblxuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIHZhciBjaGlsZElEID0gUmVhY3RNb3VudC5nZXRJRChjaGlsZCk7XG4gICAgICAgIGlmIChjaGlsZElEKSB7XG4gICAgICAgICAgLy8gRXZlbiBpZiB3ZSBmaW5kIHRoZSBub2RlIHdlJ3JlIGxvb2tpbmcgZm9yLCB3ZSBmaW5pc2ggbG9vcGluZ1xuICAgICAgICAgIC8vIHRocm91Z2ggaXRzIHNpYmxpbmdzIHRvIGVuc3VyZSB0aGV5J3JlIGNhY2hlZCBzbyB0aGF0IHdlIGRvbid0IGhhdmVcbiAgICAgICAgICAvLyB0byByZXZpc2l0IHRoaXMgbm9kZSBhZ2Fpbi4gT3RoZXJ3aXNlLCB3ZSBtYWtlIG5eMiBjYWxscyB0byBnZXRJRFxuICAgICAgICAgIC8vIHdoZW4gdmlzaXRpbmcgdGhlIG1hbnkgY2hpbGRyZW4gb2YgYSBzaW5nbGUgbm9kZSBpbiBvcmRlci5cblxuICAgICAgICAgIGlmICh0YXJnZXRJRCA9PT0gY2hpbGRJRCkge1xuICAgICAgICAgICAgdGFyZ2V0Q2hpbGQgPSBjaGlsZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKFJlYWN0SW5zdGFuY2VIYW5kbGVzLmlzQW5jZXN0b3JJRE9mKGNoaWxkSUQsIHRhcmdldElEKSkge1xuICAgICAgICAgICAgLy8gSWYgd2UgZmluZCBhIGNoaWxkIHdob3NlIElEIGlzIGFuIGFuY2VzdG9yIG9mIHRoZSBnaXZlbiBJRCxcbiAgICAgICAgICAgIC8vIHRoZW4gd2UgY2FuIGJlIHN1cmUgdGhhdCB3ZSBvbmx5IHdhbnQgdG8gc2VhcmNoIHRoZSBzdWJ0cmVlXG4gICAgICAgICAgICAvLyByb290ZWQgYXQgdGhpcyBjaGlsZCwgc28gd2UgY2FuIHRocm93IG91dCB0aGUgcmVzdCBvZiB0aGVcbiAgICAgICAgICAgIC8vIHNlYXJjaCBzdGF0ZS5cbiAgICAgICAgICAgIGZpcnN0Q2hpbGRyZW4ubGVuZ3RoID0gY2hpbGRJbmRleCA9IDA7XG4gICAgICAgICAgICBmaXJzdENoaWxkcmVuLnB1c2goY2hpbGQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHRoaXMgY2hpbGQgaGFkIG5vIElELCB0aGVuIHRoZXJlJ3MgYSBjaGFuY2UgdGhhdCBpdCB3YXNcbiAgICAgICAgICAvLyBpbmplY3RlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBicm93c2VyLCBhcyB3aGVuIGEgYDx0YWJsZT5gXG4gICAgICAgICAgLy8gZWxlbWVudCBzcHJvdXRzIGFuIGV4dHJhIGA8dGJvZHk+YCBjaGlsZCBhcyBhIHNpZGUgZWZmZWN0IG9mXG4gICAgICAgICAgLy8gYC5pbm5lckhUTUxgIHBhcnNpbmcuIE9wdGltaXN0aWNhbGx5IGNvbnRpbnVlIGRvd24gdGhpc1xuICAgICAgICAgIC8vIGJyYW5jaCwgYnV0IG5vdCBiZWZvcmUgZXhhbWluaW5nIHRoZSBvdGhlciBzaWJsaW5ncy5cbiAgICAgICAgICBmaXJzdENoaWxkcmVuLnB1c2goY2hpbGQuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0Q2hpbGQpIHtcbiAgICAgICAgLy8gRW1wdHlpbmcgZmlyc3RDaGlsZHJlbi9maW5kQ29tcG9uZW50Um9vdFJldXNhYmxlQXJyYXkgaXNcbiAgICAgICAgLy8gbm90IG5lY2Vzc2FyeSBmb3IgY29ycmVjdG5lc3MsIGJ1dCBpdCBoZWxwcyB0aGUgR0MgcmVjbGFpbVxuICAgICAgICAvLyBhbnkgbm9kZXMgdGhhdCB3ZXJlIGxlZnQgYXQgdGhlIGVuZCBvZiB0aGUgc2VhcmNoLlxuICAgICAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENoaWxkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZpcnN0Q2hpbGRyZW4ubGVuZ3RoID0gMDtcblxuICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdmaW5kQ29tcG9uZW50Um9vdCguLi4sICVzKTogVW5hYmxlIHRvIGZpbmQgZWxlbWVudC4gVGhpcyBwcm9iYWJseSAnICsgJ21lYW5zIHRoZSBET00gd2FzIHVuZXhwZWN0ZWRseSBtdXRhdGVkIChlLmcuLCBieSB0aGUgYnJvd3NlciksICcgKyAndXN1YWxseSBkdWUgdG8gZm9yZ2V0dGluZyBhIDx0Ym9keT4gd2hlbiB1c2luZyB0YWJsZXMsIG5lc3RpbmcgdGFncyAnICsgJ2xpa2UgPGZvcm0+LCA8cD4sIG9yIDxhPiwgb3IgdXNpbmcgbm9uLVNWRyBlbGVtZW50cyBpbiBhbiA8c3ZnPiAnICsgJ3BhcmVudC4gJyArICdUcnkgaW5zcGVjdGluZyB0aGUgY2hpbGQgbm9kZXMgb2YgdGhlIGVsZW1lbnQgd2l0aCBSZWFjdCBJRCBgJXNgLicsIHRhcmdldElELCBSZWFjdE1vdW50LmdldElEKGFuY2VzdG9yTm9kZSkpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgfSxcblxuICBfbW91bnRJbWFnZUludG9Ob2RlOiBmdW5jdGlvbiAobWFya3VwLCBjb250YWluZXIsIHNob3VsZFJldXNlTWFya3VwLCB0cmFuc2FjdGlvbikge1xuICAgICEoY29udGFpbmVyICYmIChjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREVfVFlQRSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ21vdW50Q29tcG9uZW50SW50b05vZGUoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgdmFsaWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKHNob3VsZFJldXNlTWFya3VwKSB7XG4gICAgICB2YXIgcm9vdEVsZW1lbnQgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICAgIGlmIChSZWFjdE1hcmt1cENoZWNrc3VtLmNhblJldXNlTWFya3VwKG1hcmt1cCwgcm9vdEVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjaGVja3N1bSA9IHJvb3RFbGVtZW50LmdldEF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSk7XG4gICAgICAgIHJvb3RFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSk7XG5cbiAgICAgICAgdmFyIHJvb3RNYXJrdXAgPSByb290RWxlbWVudC5vdXRlckhUTUw7XG4gICAgICAgIHJvb3RFbGVtZW50LnNldEF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSwgY2hlY2tzdW0pO1xuXG4gICAgICAgIHZhciBub3JtYWxpemVkTWFya3VwID0gbWFya3VwO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIC8vIGJlY2F1c2Ugcm9vdE1hcmt1cCBpcyByZXRyaWV2ZWQgZnJvbSB0aGUgRE9NLCB2YXJpb3VzIG5vcm1hbGl6YXRpb25zXG4gICAgICAgICAgLy8gd2lsbCBoYXZlIG9jY3VycmVkIHdoaWNoIHdpbGwgbm90IGJlIHByZXNlbnQgaW4gYG1hcmt1cGAuIEhlcmUsXG4gICAgICAgICAgLy8gaW5zZXJ0IG1hcmt1cCBpbnRvIGEgPGRpdj4gb3IgPGlmcmFtZT4gZGVwZW5kaW5nIG9uIHRoZSBjb250YWluZXJcbiAgICAgICAgICAvLyB0eXBlIHRvIHBlcmZvcm0gdGhlIHNhbWUgbm9ybWFsaXphdGlvbnMgYmVmb3JlIGNvbXBhcmluZy5cbiAgICAgICAgICB2YXIgbm9ybWFsaXplcjtcbiAgICAgICAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSkge1xuICAgICAgICAgICAgbm9ybWFsaXplciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgbm9ybWFsaXplci5pbm5lckhUTUwgPSBtYXJrdXA7XG4gICAgICAgICAgICBub3JtYWxpemVkTWFya3VwID0gbm9ybWFsaXplci5pbm5lckhUTUw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9ybWFsaXplcik7XG4gICAgICAgICAgICBub3JtYWxpemVyLmNvbnRlbnREb2N1bWVudC53cml0ZShtYXJrdXApO1xuICAgICAgICAgICAgbm9ybWFsaXplZE1hcmt1cCA9IG5vcm1hbGl6ZXIuY29udGVudERvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vdXRlckhUTUw7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG5vcm1hbGl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaWZmSW5kZXggPSBmaXJzdERpZmZlcmVuY2VJbmRleChub3JtYWxpemVkTWFya3VwLCByb290TWFya3VwKTtcbiAgICAgICAgdmFyIGRpZmZlcmVuY2UgPSAnIChjbGllbnQpICcgKyBub3JtYWxpemVkTWFya3VwLnN1YnN0cmluZyhkaWZmSW5kZXggLSAyMCwgZGlmZkluZGV4ICsgMjApICsgJ1xcbiAoc2VydmVyKSAnICsgcm9vdE1hcmt1cC5zdWJzdHJpbmcoZGlmZkluZGV4IC0gMjAsIGRpZmZJbmRleCArIDIwKTtcblxuICAgICAgICAhKGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnWW91XFwncmUgdHJ5aW5nIHRvIHJlbmRlciBhIGNvbXBvbmVudCB0byB0aGUgZG9jdW1lbnQgdXNpbmcgJyArICdzZXJ2ZXIgcmVuZGVyaW5nIGJ1dCB0aGUgY2hlY2tzdW0gd2FzIGludmFsaWQuIFRoaXMgdXN1YWxseSAnICsgJ21lYW5zIHlvdSByZW5kZXJlZCBhIGRpZmZlcmVudCBjb21wb25lbnQgdHlwZSBvciBwcm9wcyBvbiAnICsgJ3RoZSBjbGllbnQgZnJvbSB0aGUgb25lIG9uIHRoZSBzZXJ2ZXIsIG9yIHlvdXIgcmVuZGVyKCkgJyArICdtZXRob2RzIGFyZSBpbXB1cmUuIFJlYWN0IGNhbm5vdCBoYW5kbGUgdGhpcyBjYXNlIGR1ZSB0byAnICsgJ2Nyb3NzLWJyb3dzZXIgcXVpcmtzIGJ5IHJlbmRlcmluZyBhdCB0aGUgZG9jdW1lbnQgcm9vdC4gWW91ICcgKyAnc2hvdWxkIGxvb2sgZm9yIGVudmlyb25tZW50IGRlcGVuZGVudCBjb2RlIGluIHlvdXIgY29tcG9uZW50cyAnICsgJ2FuZCBlbnN1cmUgdGhlIHByb3BzIGFyZSB0aGUgc2FtZSBjbGllbnQgYW5kIHNlcnZlciBzaWRlOlxcbiVzJywgZGlmZmVyZW5jZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdSZWFjdCBhdHRlbXB0ZWQgdG8gcmV1c2UgbWFya3VwIGluIGEgY29udGFpbmVyIGJ1dCB0aGUgJyArICdjaGVja3N1bSB3YXMgaW52YWxpZC4gVGhpcyBnZW5lcmFsbHkgbWVhbnMgdGhhdCB5b3UgYXJlICcgKyAndXNpbmcgc2VydmVyIHJlbmRlcmluZyBhbmQgdGhlIG1hcmt1cCBnZW5lcmF0ZWQgb24gdGhlICcgKyAnc2VydmVyIHdhcyBub3Qgd2hhdCB0aGUgY2xpZW50IHdhcyBleHBlY3RpbmcuIFJlYWN0IGluamVjdGVkICcgKyAnbmV3IG1hcmt1cCB0byBjb21wZW5zYXRlIHdoaWNoIHdvcmtzIGJ1dCB5b3UgaGF2ZSBsb3N0IG1hbnkgJyArICdvZiB0aGUgYmVuZWZpdHMgb2Ygc2VydmVyIHJlbmRlcmluZy4gSW5zdGVhZCwgZmlndXJlIG91dCAnICsgJ3doeSB0aGUgbWFya3VwIGJlaW5nIGdlbmVyYXRlZCBpcyBkaWZmZXJlbnQgb24gdGhlIGNsaWVudCAnICsgJ29yIHNlcnZlcjpcXG4lcycsIGRpZmZlcmVuY2UpIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgIShjb250YWluZXIubm9kZVR5cGUgIT09IERPQ19OT0RFX1RZUEUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1lvdVxcJ3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IGJ1dCAnICsgJ3lvdSBkaWRuXFwndCB1c2Ugc2VydmVyIHJlbmRlcmluZy4gV2UgY2FuXFwndCBkbyB0aGlzICcgKyAnd2l0aG91dCB1c2luZyBzZXJ2ZXIgcmVuZGVyaW5nIGR1ZSB0byBjcm9zcy1icm93c2VyIHF1aXJrcy4gJyArICdTZWUgUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcoKSBmb3Igc2VydmVyIHJlbmRlcmluZy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAodHJhbnNhY3Rpb24udXNlQ3JlYXRlRWxlbWVudCkge1xuICAgICAgd2hpbGUgKGNvbnRhaW5lci5sYXN0Q2hpbGQpIHtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lci5sYXN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG1hcmt1cCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldElubmVySFRNTChjb250YWluZXIsIG1hcmt1cCk7XG4gICAgfVxuICB9LFxuXG4gIG93bmVyRG9jdW1lbnRDb250ZXh0S2V5OiBvd25lckRvY3VtZW50Q29udGV4dEtleSxcblxuICAvKipcbiAgICogUmVhY3QgSUQgdXRpbGl0aWVzLlxuICAgKi9cblxuICBnZXRSZWFjdFJvb3RJRDogZ2V0UmVhY3RSb290SUQsXG5cbiAgZ2V0SUQ6IGdldElELFxuXG4gIHNldElEOiBzZXRJRCxcblxuICBnZXROb2RlOiBnZXROb2RlLFxuXG4gIGdldE5vZGVGcm9tSW5zdGFuY2U6IGdldE5vZGVGcm9tSW5zdGFuY2UsXG5cbiAgaXNWYWxpZDogaXNWYWxpZCxcblxuICBwdXJnZUlEOiBwdXJnZUlEXG59O1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoUmVhY3RNb3VudCwgJ1JlYWN0TW91bnQnLCB7XG4gIF9yZW5kZXJOZXdSb290Q29tcG9uZW50OiAnX3JlbmRlck5ld1Jvb3RDb21wb25lbnQnLFxuICBfbW91bnRJbWFnZUludG9Ob2RlOiAnX21vdW50SW1hZ2VJbnRvTm9kZSdcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TW91bnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TXVsdGlDaGlsZFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSByZXF1aXJlKCcuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzJyk7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xudmFyIFJlYWN0Q2hpbGRSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdENoaWxkUmVjb25jaWxlcicpO1xuXG52YXIgZmxhdHRlbkNoaWxkcmVuID0gcmVxdWlyZSgnLi9mbGF0dGVuQ2hpbGRyZW4nKTtcblxuLyoqXG4gKiBVcGRhdGluZyBjaGlsZHJlbiBvZiBhIGNvbXBvbmVudCBtYXkgdHJpZ2dlciByZWN1cnNpdmUgdXBkYXRlcy4gVGhlIGRlcHRoIGlzXG4gKiB1c2VkIHRvIGJhdGNoIHJlY3Vyc2l2ZSB1cGRhdGVzIHRvIHJlbmRlciBtYXJrdXAgbW9yZSBlZmZpY2llbnRseS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xudmFyIHVwZGF0ZURlcHRoID0gMDtcblxuLyoqXG4gKiBRdWV1ZSBvZiB1cGRhdGUgY29uZmlndXJhdGlvbiBvYmplY3RzLlxuICpcbiAqIEVhY2ggb2JqZWN0IGhhcyBhIGB0eXBlYCBwcm9wZXJ0eSB0aGF0IGlzIGluIGBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlc2AuXG4gKlxuICogQHR5cGUge2FycmF5PG9iamVjdD59XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgdXBkYXRlUXVldWUgPSBbXTtcblxuLyoqXG4gKiBRdWV1ZSBvZiBtYXJrdXAgdG8gYmUgcmVuZGVyZWQuXG4gKlxuICogQHR5cGUge2FycmF5PHN0cmluZz59XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbWFya3VwUXVldWUgPSBbXTtcblxuLyoqXG4gKiBFbnF1ZXVlcyBtYXJrdXAgdG8gYmUgcmVuZGVyZWQgYW5kIGluc2VydGVkIGF0IGEgc3VwcGxpZWQgaW5kZXguXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgdGhhdCByZW5kZXJzIGludG8gYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZUluc2VydE1hcmt1cChwYXJlbnRJRCwgbWFya3VwLCB0b0luZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuSU5TRVJUX01BUktVUCxcbiAgICBtYXJrdXBJbmRleDogbWFya3VwUXVldWUucHVzaChtYXJrdXApIC0gMSxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGZyb21JbmRleDogbnVsbCxcbiAgICB0b0luZGV4OiB0b0luZGV4XG4gIH0pO1xufVxuXG4vKipcbiAqIEVucXVldWVzIG1vdmluZyBhbiBleGlzdGluZyBlbGVtZW50IHRvIGFub3RoZXIgaW5kZXguXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBTb3VyY2UgaW5kZXggb2YgdGhlIGV4aXN0aW5nIGVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBEZXN0aW5hdGlvbiBpbmRleCBvZiB0aGUgZWxlbWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVNb3ZlKHBhcmVudElELCBmcm9tSW5kZXgsIHRvSW5kZXgpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICB1cGRhdGVRdWV1ZS5wdXNoKHtcbiAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5NT1ZFX0VYSVNUSU5HLFxuICAgIG1hcmt1cEluZGV4OiBudWxsLFxuICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBmcm9tSW5kZXgsXG4gICAgdG9JbmRleDogdG9JbmRleFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyByZW1vdmluZyBhbiBlbGVtZW50IGF0IGFuIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggSW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmVtb3ZlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZVJlbW92ZShwYXJlbnRJRCwgZnJvbUluZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREUsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgY29udGVudDogbnVsbCxcbiAgICBmcm9tSW5kZXg6IGZyb21JbmRleCxcbiAgICB0b0luZGV4OiBudWxsXG4gIH0pO1xufVxuXG4vKipcbiAqIEVucXVldWVzIHNldHRpbmcgdGhlIG1hcmt1cCBvZiBhIG5vZGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgdGhhdCByZW5kZXJzIGludG8gYW4gZWxlbWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVTZXRNYXJrdXAocGFyZW50SUQsIG1hcmt1cCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlNFVF9NQVJLVVAsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgY29udGVudDogbWFya3VwLFxuICAgIGZyb21JbmRleDogbnVsbCxcbiAgICB0b0luZGV4OiBudWxsXG4gIH0pO1xufVxuXG4vKipcbiAqIEVucXVldWVzIHNldHRpbmcgdGhlIHRleHQgY29udGVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dENvbnRlbnQgVGV4dCBjb250ZW50IHRvIHNldC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVUZXh0Q29udGVudChwYXJlbnRJRCwgdGV4dENvbnRlbnQpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICB1cGRhdGVRdWV1ZS5wdXNoKHtcbiAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5URVhUX0NPTlRFTlQsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgY29udGVudDogdGV4dENvbnRlbnQsXG4gICAgZnJvbUluZGV4OiBudWxsLFxuICAgIHRvSW5kZXg6IG51bGxcbiAgfSk7XG59XG5cbi8qKlxuICogUHJvY2Vzc2VzIGFueSBlbnF1ZXVlZCB1cGRhdGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NRdWV1ZSgpIHtcbiAgaWYgKHVwZGF0ZVF1ZXVlLmxlbmd0aCkge1xuICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyh1cGRhdGVRdWV1ZSwgbWFya3VwUXVldWUpO1xuICAgIGNsZWFyUXVldWUoKTtcbiAgfVxufVxuXG4vKipcbiAqIENsZWFycyBhbnkgZW5xdWV1ZWQgdXBkYXRlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjbGVhclF1ZXVlKCkge1xuICB1cGRhdGVRdWV1ZS5sZW5ndGggPSAwO1xuICBtYXJrdXBRdWV1ZS5sZW5ndGggPSAwO1xufVxuXG4vKipcbiAqIFJlYWN0TXVsdGlDaGlsZCBhcmUgY2FwYWJsZSBvZiByZWNvbmNpbGluZyBtdWx0aXBsZSBjaGlsZHJlbi5cbiAqXG4gKiBAY2xhc3MgUmVhY3RNdWx0aUNoaWxkXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0TXVsdGlDaGlsZCA9IHtcblxuICAvKipcbiAgICogUHJvdmlkZXMgY29tbW9uIGZ1bmN0aW9uYWxpdHkgZm9yIGNvbXBvbmVudHMgdGhhdCBtdXN0IHJlY29uY2lsZSBtdWx0aXBsZVxuICAgKiBjaGlsZHJlbi4gVGhpcyBpcyB1c2VkIGJ5IGBSZWFjdERPTUNvbXBvbmVudGAgdG8gbW91bnQsIHVwZGF0ZSwgYW5kXG4gICAqIHVubW91bnQgY2hpbGQgY29tcG9uZW50cy5cbiAgICpcbiAgICogQGxlbmRzIHtSZWFjdE11bHRpQ2hpbGQucHJvdG90eXBlfVxuICAgKi9cbiAgTWl4aW46IHtcblxuICAgIF9yZWNvbmNpbGVySW5zdGFudGlhdGVDaGlsZHJlbjogZnVuY3Rpb24gKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3RDaGlsZFJlY29uY2lsZXIuaW5zdGFudGlhdGVDaGlsZHJlbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdENoaWxkUmVjb25jaWxlci5pbnN0YW50aWF0ZUNoaWxkcmVuKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIF9yZWNvbmNpbGVyVXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChwcmV2Q2hpbGRyZW4sIG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIG5leHRDaGlsZHJlbjtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50RWxlbWVudCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgICAgICAgICAgbmV4dENoaWxkcmVuID0gZmxhdHRlbkNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBSZWFjdENoaWxkUmVjb25jaWxlci51cGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuZXh0Q2hpbGRyZW4gPSBmbGF0dGVuQ2hpbGRyZW4obmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMpO1xuICAgICAgcmV0dXJuIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLnVwZGF0ZUNoaWxkcmVuKHByZXZDaGlsZHJlbiwgbmV4dENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIFwibW91bnQgaW1hZ2VcIiBmb3IgZWFjaCBvZiB0aGUgc3VwcGxpZWQgY2hpbGRyZW4uIEluIHRoZSBjYXNlXG4gICAgICogb2YgYFJlYWN0RE9NQ29tcG9uZW50YCwgYSBtb3VudCBpbWFnZSBpcyBhIHN0cmluZyBvZiBtYXJrdXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5lc3RlZENoaWxkcmVuIE5lc3RlZCBjaGlsZCBtYXBzLlxuICAgICAqIEByZXR1cm4ge2FycmF5fSBBbiBhcnJheSBvZiBtb3VudGVkIHJlcHJlc2VudGF0aW9ucy5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBtb3VudENoaWxkcmVuOiBmdW5jdGlvbiAobmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLl9yZWNvbmNpbGVySW5zdGFudGlhdGVDaGlsZHJlbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgdmFyIG1vdW50SW1hZ2VzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBjaGlsZHJlbikge1xuICAgICAgICBpZiAoY2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltuYW1lXTtcbiAgICAgICAgICAvLyBJbmxpbmVkIGZvciBwZXJmb3JtYW5jZSwgc2VlIGBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdElEYC5cbiAgICAgICAgICB2YXIgcm9vdElEID0gdGhpcy5fcm9vdE5vZGVJRCArIG5hbWU7XG4gICAgICAgICAgdmFyIG1vdW50SW1hZ2UgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQoY2hpbGQsIHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgICBtb3VudEltYWdlcy5wdXNoKG1vdW50SW1hZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbW91bnRJbWFnZXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIGFueSByZW5kZXJlZCBjaGlsZHJlbiB3aXRoIGEgdGV4dCBjb250ZW50IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXh0Q29udGVudCBTdHJpbmcgb2YgY29udGVudC5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1cGRhdGVUZXh0Q29udGVudDogZnVuY3Rpb24gKG5leHRDb250ZW50KSB7XG4gICAgICB1cGRhdGVEZXB0aCsrO1xuICAgICAgdmFyIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgICAvLyBSZW1vdmUgYW55IHJlbmRlcmVkIGNoaWxkcmVuLlxuICAgICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51bm1vdW50Q2hpbGRyZW4ocHJldkNoaWxkcmVuKTtcbiAgICAgICAgLy8gVE9ETzogVGhlIHNldFRleHRDb250ZW50IG9wZXJhdGlvbiBzaG91bGQgYmUgZW5vdWdoXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5fdW5tb3VudENoaWxkKHByZXZDaGlsZHJlbltuYW1lXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBuZXcgdGV4dCBjb250ZW50LlxuICAgICAgICB0aGlzLnNldFRleHRDb250ZW50KG5leHRDb250ZW50KTtcbiAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHVwZGF0ZURlcHRoLS07XG4gICAgICAgIGlmICghdXBkYXRlRGVwdGgpIHtcbiAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIGNsZWFyUXVldWUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzc1F1ZXVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIGFueSByZW5kZXJlZCBjaGlsZHJlbiB3aXRoIGEgbWFya3VwIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXh0TWFya3VwIFN0cmluZyBvZiBtYXJrdXAuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdXBkYXRlTWFya3VwOiBmdW5jdGlvbiAobmV4dE1hcmt1cCkge1xuICAgICAgdXBkYXRlRGVwdGgrKztcbiAgICAgIHZhciBlcnJvclRocm93biA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgICAgLy8gUmVtb3ZlIGFueSByZW5kZXJlZCBjaGlsZHJlbi5cbiAgICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbik7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5fdW5tb3VudENoaWxkQnlOYW1lKHByZXZDaGlsZHJlbltuYW1lXSwgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0TWFya3VwKG5leHRNYXJrdXApO1xuICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdXBkYXRlRGVwdGgtLTtcbiAgICAgICAgaWYgKCF1cGRhdGVEZXB0aCkge1xuICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgY2xlYXJRdWV1ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzUXVldWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBuZXcgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzIE5lc3RlZCBjaGlsZCBlbGVtZW50IG1hcHMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAobmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB1cGRhdGVEZXB0aCsrO1xuICAgICAgdmFyIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB1cGRhdGVEZXB0aC0tO1xuICAgICAgICBpZiAoIXVwZGF0ZURlcHRoKSB7XG4gICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICBjbGVhclF1ZXVlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3NRdWV1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbXByb3ZlIHBlcmZvcm1hbmNlIGJ5IGlzb2xhdGluZyB0aGlzIGhvdCBjb2RlIHBhdGggZnJvbSB0aGUgdHJ5L2NhdGNoXG4gICAgICogYmxvY2sgaW4gYHVwZGF0ZUNoaWxkcmVuYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMgTmVzdGVkIGNoaWxkIGVsZW1lbnQgbWFwcy5cbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQGZpbmFsXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF91cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24gKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICB2YXIgbmV4dENoaWxkcmVuID0gdGhpcy5fcmVjb25jaWxlclVwZGF0ZUNoaWxkcmVuKHByZXZDaGlsZHJlbiwgbmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBuZXh0Q2hpbGRyZW47XG4gICAgICBpZiAoIW5leHRDaGlsZHJlbiAmJiAhcHJldkNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuYW1lO1xuICAgICAgLy8gYG5leHRJbmRleGAgd2lsbCBpbmNyZW1lbnQgZm9yIGVhY2ggY2hpbGQgaW4gYG5leHRDaGlsZHJlbmAsIGJ1dFxuICAgICAgLy8gYGxhc3RJbmRleGAgd2lsbCBiZSB0aGUgbGFzdCBpbmRleCB2aXNpdGVkIGluIGBwcmV2Q2hpbGRyZW5gLlxuICAgICAgdmFyIGxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gMDtcbiAgICAgIGZvciAobmFtZSBpbiBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuICYmIHByZXZDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgdmFyIG5leHRDaGlsZCA9IG5leHRDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgaWYgKHByZXZDaGlsZCA9PT0gbmV4dENoaWxkKSB7XG4gICAgICAgICAgdGhpcy5tb3ZlQ2hpbGQocHJldkNoaWxkLCBuZXh0SW5kZXgsIGxhc3RJbmRleCk7XG4gICAgICAgICAgbGFzdEluZGV4ID0gTWF0aC5tYXgocHJldkNoaWxkLl9tb3VudEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgIHByZXZDaGlsZC5fbW91bnRJbmRleCA9IG5leHRJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocHJldkNoaWxkKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgYGxhc3RJbmRleGAgYmVmb3JlIGBfbW91bnRJbmRleGAgZ2V0cyB1bnNldCBieSB1bm1vdW50aW5nLlxuICAgICAgICAgICAgbGFzdEluZGV4ID0gTWF0aC5tYXgocHJldkNoaWxkLl9tb3VudEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5fdW5tb3VudENoaWxkKHByZXZDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFRoZSBjaGlsZCBtdXN0IGJlIGluc3RhbnRpYXRlZCBiZWZvcmUgaXQncyBtb3VudGVkLlxuICAgICAgICAgIHRoaXMuX21vdW50Q2hpbGRCeU5hbWVBdEluZGV4KG5leHRDaGlsZCwgbmFtZSwgbmV4dEluZGV4LCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEluZGV4Kys7XG4gICAgICB9XG4gICAgICAvLyBSZW1vdmUgY2hpbGRyZW4gdGhhdCBhcmUgbm8gbG9uZ2VyIHByZXNlbnQuXG4gICAgICBmb3IgKG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkgJiYgIShuZXh0Q2hpbGRyZW4gJiYgbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSkge1xuICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZChwcmV2Q2hpbGRyZW5bbmFtZV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVubW91bnRzIGFsbCByZW5kZXJlZCBjaGlsZHJlbi4gVGhpcyBzaG91bGQgYmUgdXNlZCB0byBjbGVhbiB1cCBjaGlsZHJlblxuICAgICAqIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdW5tb3VudENoaWxkcmVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51bm1vdW50Q2hpbGRyZW4ocmVuZGVyZWRDaGlsZHJlbik7XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW92ZXMgYSBjaGlsZCBjb21wb25lbnQgdG8gdGhlIHN1cHBsaWVkIGluZGV4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIG1vdmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXggb2YgdGhlIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxhc3RJbmRleCBMYXN0IGluZGV4IHZpc2l0ZWQgb2YgdGhlIHNpYmxpbmdzIG9mIGBjaGlsZGAuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG1vdmVDaGlsZDogZnVuY3Rpb24gKGNoaWxkLCB0b0luZGV4LCBsYXN0SW5kZXgpIHtcbiAgICAgIC8vIElmIHRoZSBpbmRleCBvZiBgY2hpbGRgIGlzIGxlc3MgdGhhbiBgbGFzdEluZGV4YCwgdGhlbiBpdCBuZWVkcyB0b1xuICAgICAgLy8gYmUgbW92ZWQuIE90aGVyd2lzZSwgd2UgZG8gbm90IG5lZWQgdG8gbW92ZSBpdCBiZWNhdXNlIGEgY2hpbGQgd2lsbCBiZVxuICAgICAgLy8gaW5zZXJ0ZWQgb3IgbW92ZWQgYmVmb3JlIGBjaGlsZGAuXG4gICAgICBpZiAoY2hpbGQuX21vdW50SW5kZXggPCBsYXN0SW5kZXgpIHtcbiAgICAgICAgZW5xdWV1ZU1vdmUodGhpcy5fcm9vdE5vZGVJRCwgY2hpbGQuX21vdW50SW5kZXgsIHRvSW5kZXgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2hpbGQgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIGNyZWF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW91bnRJbWFnZSBNYXJrdXAgdG8gaW5zZXJ0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBjcmVhdGVDaGlsZDogZnVuY3Rpb24gKGNoaWxkLCBtb3VudEltYWdlKSB7XG4gICAgICBlbnF1ZXVlSW5zZXJ0TWFya3VwKHRoaXMuX3Jvb3ROb2RlSUQsIG1vdW50SW1hZ2UsIGNoaWxkLl9tb3VudEluZGV4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENoaWxkIHRvIHJlbW92ZS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcmVtb3ZlQ2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgZW5xdWV1ZVJlbW92ZSh0aGlzLl9yb290Tm9kZUlELCBjaGlsZC5fbW91bnRJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhpcyB0ZXh0IGNvbnRlbnQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRDb250ZW50IFRleHQgY29udGVudCB0byBzZXQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHNldFRleHRDb250ZW50OiBmdW5jdGlvbiAodGV4dENvbnRlbnQpIHtcbiAgICAgIGVucXVldWVUZXh0Q29udGVudCh0aGlzLl9yb290Tm9kZUlELCB0ZXh0Q29udGVudCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhpcyBtYXJrdXAgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgdG8gc2V0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBzZXRNYXJrdXA6IGZ1bmN0aW9uIChtYXJrdXApIHtcbiAgICAgIGVucXVldWVTZXRNYXJrdXAodGhpcy5fcm9vdE5vZGVJRCwgbWFya3VwKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW91bnRzIGEgY2hpbGQgd2l0aCB0aGUgc3VwcGxpZWQgbmFtZS5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoaXMgaXMgcGFydCBvZiBgdXBkYXRlQ2hpbGRyZW5gIGFuZCBpcyBoZXJlIGZvciByZWFkYWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBtb3VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBjaGlsZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBjaGlsZC5cbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbW91bnRDaGlsZEJ5TmFtZUF0SW5kZXg6IGZ1bmN0aW9uIChjaGlsZCwgbmFtZSwgaW5kZXgsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICAvLyBJbmxpbmVkIGZvciBwZXJmb3JtYW5jZSwgc2VlIGBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdElEYC5cbiAgICAgIHZhciByb290SUQgPSB0aGlzLl9yb290Tm9kZUlEICsgbmFtZTtcbiAgICAgIHZhciBtb3VudEltYWdlID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KGNoaWxkLCByb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gaW5kZXg7XG4gICAgICB0aGlzLmNyZWF0ZUNoaWxkKGNoaWxkLCBtb3VudEltYWdlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5tb3VudHMgYSByZW5kZXJlZCBjaGlsZC5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoaXMgaXMgcGFydCBvZiBgdXBkYXRlQ2hpbGRyZW5gIGFuZCBpcyBoZXJlIGZvciByZWFkYWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byB1bm1vdW50LlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VubW91bnRDaGlsZDogZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB0aGlzLnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gbnVsbDtcbiAgICB9XG5cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TXVsdGlDaGlsZDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXlNaXJyb3IgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlNaXJyb3InKTtcblxuLyoqXG4gKiBXaGVuIGEgY29tcG9uZW50J3MgY2hpbGRyZW4gYXJlIHVwZGF0ZWQsIGEgc2VyaWVzIG9mIHVwZGF0ZSBjb25maWd1cmF0aW9uXG4gKiBvYmplY3RzIGFyZSBjcmVhdGVkIGluIG9yZGVyIHRvIGJhdGNoIGFuZCBzZXJpYWxpemUgdGhlIHJlcXVpcmVkIGNoYW5nZXMuXG4gKlxuICogRW51bWVyYXRlcyBhbGwgdGhlIHBvc3NpYmxlIHR5cGVzIG9mIHVwZGF0ZSBjb25maWd1cmF0aW9ucy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzID0ga2V5TWlycm9yKHtcbiAgSU5TRVJUX01BUktVUDogbnVsbCxcbiAgTU9WRV9FWElTVElORzogbnVsbCxcbiAgUkVNT1ZFX05PREU6IG51bGwsXG4gIFNFVF9NQVJLVVA6IG51bGwsXG4gIFRFWFRfQ09OVEVOVDogbnVsbFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TmF0aXZlQ29tcG9uZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBhdXRvR2VuZXJhdGVXcmFwcGVyQ2xhc3MgPSBudWxsO1xudmFyIGdlbmVyaWNDb21wb25lbnRDbGFzcyA9IG51bGw7XG4vLyBUaGlzIHJlZ2lzdHJ5IGtlZXBzIHRyYWNrIG9mIHdyYXBwZXIgY2xhc3NlcyBhcm91bmQgbmF0aXZlIHRhZ3MuXG52YXIgdGFnVG9Db21wb25lbnRDbGFzcyA9IHt9O1xudmFyIHRleHRDb21wb25lbnRDbGFzcyA9IG51bGw7XG5cbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvbiA9IHtcbiAgLy8gVGhpcyBhY2NlcHRzIGEgY2xhc3MgdGhhdCByZWNlaXZlcyB0aGUgdGFnIHN0cmluZy4gVGhpcyBpcyBhIGNhdGNoIGFsbFxuICAvLyB0aGF0IGNhbiByZW5kZXIgYW55IGtpbmQgb2YgdGFnLlxuICBpbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3M6IGZ1bmN0aW9uIChjb21wb25lbnRDbGFzcykge1xuICAgIGdlbmVyaWNDb21wb25lbnRDbGFzcyA9IGNvbXBvbmVudENsYXNzO1xuICB9LFxuICAvLyBUaGlzIGFjY2VwdHMgYSB0ZXh0IGNvbXBvbmVudCBjbGFzcyB0aGF0IHRha2VzIHRoZSB0ZXh0IHN0cmluZyB0byBiZVxuICAvLyByZW5kZXJlZCBhcyBwcm9wcy5cbiAgaW5qZWN0VGV4dENvbXBvbmVudENsYXNzOiBmdW5jdGlvbiAoY29tcG9uZW50Q2xhc3MpIHtcbiAgICB0ZXh0Q29tcG9uZW50Q2xhc3MgPSBjb21wb25lbnRDbGFzcztcbiAgfSxcbiAgLy8gVGhpcyBhY2NlcHRzIGEga2V5ZWQgb2JqZWN0IHdpdGggY2xhc3NlcyBhcyB2YWx1ZXMuIEVhY2gga2V5IHJlcHJlc2VudHMgYVxuICAvLyB0YWcuIFRoYXQgcGFydGljdWxhciB0YWcgd2lsbCB1c2UgdGhpcyBjbGFzcyBpbnN0ZWFkIG9mIHRoZSBnZW5lcmljIG9uZS5cbiAgaW5qZWN0Q29tcG9uZW50Q2xhc3NlczogZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzZXMpIHtcbiAgICBhc3NpZ24odGFnVG9Db21wb25lbnRDbGFzcywgY29tcG9uZW50Q2xhc3Nlcyk7XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IGEgY29tcG9zaXRlIGNvbXBvbmVudCB3cmFwcGVyIGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBUaGUgdGFnIGZvciB3aGljaCB0byBnZXQgdGhlIGNsYXNzLlxuICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBSZWFjdCBjbGFzcyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgaWYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZWxlbWVudC50eXBlO1xuICB9XG4gIHZhciB0YWcgPSBlbGVtZW50LnR5cGU7XG4gIHZhciBjb21wb25lbnRDbGFzcyA9IHRhZ1RvQ29tcG9uZW50Q2xhc3NbdGFnXTtcbiAgaWYgKGNvbXBvbmVudENsYXNzID09IG51bGwpIHtcbiAgICB0YWdUb0NvbXBvbmVudENsYXNzW3RhZ10gPSBjb21wb25lbnRDbGFzcyA9IGF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcyh0YWcpO1xuICB9XG4gIHJldHVybiBjb21wb25lbnRDbGFzcztcbn1cblxuLyoqXG4gKiBHZXQgYSBuYXRpdmUgaW50ZXJuYWwgY29tcG9uZW50IGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBjcmVhdGUuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGludGVybmFsIGNsYXNzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudChlbGVtZW50KSB7XG4gICFnZW5lcmljQ29tcG9uZW50Q2xhc3MgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVGhlcmUgaXMgbm8gcmVnaXN0ZXJlZCBjb21wb25lbnQgZm9yIHRoZSB0YWcgJXMnLCBlbGVtZW50LnR5cGUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIG5ldyBnZW5lcmljQ29tcG9uZW50Q2xhc3MoZWxlbWVudC50eXBlLCBlbGVtZW50LnByb3BzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0VGV4dH0gdGV4dFxuICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlRm9yVGV4dCh0ZXh0KSB7XG4gIHJldHVybiBuZXcgdGV4dENvbXBvbmVudENsYXNzKHRleHQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Q29tcG9uZW50KGNvbXBvbmVudCkge1xuICByZXR1cm4gY29tcG9uZW50IGluc3RhbmNlb2YgdGV4dENvbXBvbmVudENsYXNzO1xufVxuXG52YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSB7XG4gIGdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudDogZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50LFxuICBjcmVhdGVJbnRlcm5hbENvbXBvbmVudDogY3JlYXRlSW50ZXJuYWxDb21wb25lbnQsXG4gIGNyZWF0ZUluc3RhbmNlRm9yVGV4dDogY3JlYXRlSW5zdGFuY2VGb3JUZXh0LFxuICBpc1RleHRDb21wb25lbnQ6IGlzVGV4dENvbXBvbmVudCxcbiAgaW5qZWN0aW9uOiBSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gd2FyblREWihwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBvciBtb3VudGluZyBjb21wb25lbnQuICcgKyAnVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSBjYWxsZWQgJXMoKSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiAnICsgJ1RoaXMgaXMgYSBuby1vcC4gUGxlYXNlIGNoZWNrIHRoZSBjb2RlIGZvciB0aGUgJXMgY29tcG9uZW50LicsIGNhbGxlck5hbWUsIGNhbGxlck5hbWUsIHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yICYmIHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICcnKSA6IHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGFic3RyYWN0IEFQSSBmb3IgYW4gdXBkYXRlIHF1ZXVlLlxuICovXG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSB7XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2Ugd2Ugd2FudCB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFbnF1ZXVlIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGFmdGVyIGFsbCB0aGUgcGVuZGluZyB1cGRhdGVzXG4gICAqIGhhdmUgcHJvY2Vzc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0byB1c2UgYXMgYHRoaXNgIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2spIHt9LFxuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgd2FyblREWihwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgc3RhdGUuIEFsd2F5cyB1c2UgdGhpcyBvciBgc2V0U3RhdGVgIHRvIG11dGF0ZSBzdGF0ZS5cbiAgICogWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIGNvbXBsZXRlU3RhdGUpIHtcbiAgICB3YXJuVERaKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlKSB7XG4gICAgd2FyblREWihwdWJsaWNJbnN0YW5jZSwgJ3NldFN0YXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHByb3BzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxQcm9wcyBTdWJzZXQgb2YgdGhlIG5leHQgcHJvcHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVNldFByb3BzOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIHBhcnRpYWxQcm9wcykge1xuICAgIHdhcm5URFoocHVibGljSW5zdGFuY2UsICdzZXRQcm9wcycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHByb3BzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzIE5ldyBwcm9wcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlUmVwbGFjZVByb3BzOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIHByb3BzKSB7XG4gICAgd2FyblREWihwdWJsaWNJbnN0YW5jZSwgJ3JlcGxhY2VQcm9wcycpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROb29wVXBkYXRlUXVldWU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0T3duZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBSZWFjdE93bmVycyBhcmUgY2FwYWJsZSBvZiBzdG9yaW5nIHJlZmVyZW5jZXMgdG8gb3duZWQgY29tcG9uZW50cy5cbiAqXG4gKiBBbGwgY29tcG9uZW50cyBhcmUgY2FwYWJsZSBvZiAvL2JlaW5nLy8gcmVmZXJlbmNlZCBieSBvd25lciBjb21wb25lbnRzLCBidXRcbiAqIG9ubHkgUmVhY3RPd25lciBjb21wb25lbnRzIGFyZSBjYXBhYmxlIG9mIC8vcmVmZXJlbmNpbmcvLyBvd25lZCBjb21wb25lbnRzLlxuICogVGhlIG5hbWVkIHJlZmVyZW5jZSBpcyBrbm93biBhcyBhIFwicmVmXCIuXG4gKlxuICogUmVmcyBhcmUgYXZhaWxhYmxlIHdoZW4gbW91bnRlZCBhbmQgdXBkYXRlZCBkdXJpbmcgcmVjb25jaWxpYXRpb24uXG4gKlxuICogICB2YXIgTXlDb21wb25lbnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHJldHVybiAoXG4gKiAgICAgICAgIDxkaXYgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja30+XG4gKiAgICAgICAgICAgPEN1c3RvbUNvbXBvbmVudCByZWY9XCJjdXN0b21cIiAvPlxuICogICAgICAgICA8L2Rpdj5cbiAqICAgICAgICk7XG4gKiAgICAgfSxcbiAqICAgICBoYW5kbGVDbGljazogZnVuY3Rpb24oKSB7XG4gKiAgICAgICB0aGlzLnJlZnMuY3VzdG9tLmhhbmRsZUNsaWNrKCk7XG4gKiAgICAgfSxcbiAqICAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gKiAgICAgICB0aGlzLnJlZnMuY3VzdG9tLmluaXRpYWxpemUoKTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFJlZnMgc2hvdWxkIHJhcmVseSBiZSB1c2VkLiBXaGVuIHJlZnMgYXJlIHVzZWQsIHRoZXkgc2hvdWxkIG9ubHkgYmUgZG9uZSB0b1xuICogY29udHJvbCBkYXRhIHRoYXQgaXMgbm90IGhhbmRsZWQgYnkgUmVhY3QncyBkYXRhIGZsb3cuXG4gKlxuICogQGNsYXNzIFJlYWN0T3duZXJcbiAqL1xudmFyIFJlYWN0T3duZXIgPSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gb2JqZWN0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG9iamVjdGAgaXMgYSB2YWxpZCBvd25lci5cbiAgICogQGZpbmFsXG4gICAqL1xuICBpc1ZhbGlkT3duZXI6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gISEob2JqZWN0ICYmIHR5cGVvZiBvYmplY3QuYXR0YWNoUmVmID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmplY3QuZGV0YWNoUmVmID09PSAnZnVuY3Rpb24nKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkcyBhIGNvbXBvbmVudCBieSByZWYgdG8gYW4gb3duZXIgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRvIHJlZmVyZW5jZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiBOYW1lIGJ5IHdoaWNoIHRvIHJlZmVyIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEBwYXJhbSB7UmVhY3RPd25lcn0gb3duZXIgQ29tcG9uZW50IG9uIHdoaWNoIHRvIHJlY29yZCB0aGUgcmVmLlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICBhZGRDb21wb25lbnRBc1JlZlRvOiBmdW5jdGlvbiAoY29tcG9uZW50LCByZWYsIG93bmVyKSB7XG4gICAgIVJlYWN0T3duZXIuaXNWYWxpZE93bmVyKG93bmVyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdhZGRDb21wb25lbnRBc1JlZlRvKC4uLik6IE9ubHkgYSBSZWFjdE93bmVyIGNhbiBoYXZlIHJlZnMuIFlvdSBtaWdodCAnICsgJ2JlIGFkZGluZyBhIHJlZiB0byBhIGNvbXBvbmVudCB0aGF0IHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgYSBjb21wb25lbnRcXCdzICcgKyAnYHJlbmRlcmAgbWV0aG9kLCBvciB5b3UgaGF2ZSBtdWx0aXBsZSBjb3BpZXMgb2YgUmVhY3QgbG9hZGVkICcgKyAnKGRldGFpbHM6IGh0dHBzOi8vZmIubWUvcmVhY3QtcmVmcy1tdXN0LWhhdmUtb3duZXIpLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBvd25lci5hdHRhY2hSZWYocmVmLCBjb21wb25lbnQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgY29tcG9uZW50IGJ5IHJlZiBmcm9tIGFuIG93bmVyIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0byBkZXJlZmVyZW5jZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiBOYW1lIG9mIHRoZSByZWYgdG8gcmVtb3ZlLlxuICAgKiBAcGFyYW0ge1JlYWN0T3duZXJ9IG93bmVyIENvbXBvbmVudCBvbiB3aGljaCB0aGUgcmVmIGlzIHJlY29yZGVkLlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZW1vdmVDb21wb25lbnRBc1JlZkZyb206IGZ1bmN0aW9uIChjb21wb25lbnQsIHJlZiwgb3duZXIpIHtcbiAgICAhUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3JlbW92ZUNvbXBvbmVudEFzUmVmRnJvbSguLi4pOiBPbmx5IGEgUmVhY3RPd25lciBjYW4gaGF2ZSByZWZzLiBZb3UgbWlnaHQgJyArICdiZSByZW1vdmluZyBhIHJlZiB0byBhIGNvbXBvbmVudCB0aGF0IHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgYSBjb21wb25lbnRcXCdzICcgKyAnYHJlbmRlcmAgbWV0aG9kLCBvciB5b3UgaGF2ZSBtdWx0aXBsZSBjb3BpZXMgb2YgUmVhY3QgbG9hZGVkICcgKyAnKGRldGFpbHM6IGh0dHBzOi8vZmIubWUvcmVhY3QtcmVmcy1tdXN0LWhhdmUtb3duZXIpLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAvLyBDaGVjayB0aGF0IGBjb21wb25lbnRgIGlzIHN0aWxsIHRoZSBjdXJyZW50IHJlZiBiZWNhdXNlIHdlIGRvIG5vdCB3YW50IHRvXG4gICAgLy8gZGV0YWNoIHRoZSByZWYgaWYgYW5vdGhlciBjb21wb25lbnQgc3RvbGUgaXQuXG4gICAgaWYgKG93bmVyLmdldFB1YmxpY0luc3RhbmNlKCkucmVmc1tyZWZdID09PSBjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKSkge1xuICAgICAgb3duZXIuZGV0YWNoUmVmKHJlZik7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RPd25lcjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQZXJmXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBSZWFjdFBlcmYgaXMgYSBnZW5lcmFsIEFPUCBzeXN0ZW0gZGVzaWduZWQgdG8gbWVhc3VyZSBwZXJmb3JtYW5jZS4gVGhpc1xuICogbW9kdWxlIG9ubHkgaGFzIHRoZSBob29rczogc2VlIFJlYWN0RGVmYXVsdFBlcmYgZm9yIHRoZSBhbmFseXNpcyB0b29sLlxuICovXG52YXIgUmVhY3RQZXJmID0ge1xuICAvKipcbiAgICogQm9vbGVhbiB0byBlbmFibGUvZGlzYWJsZSBtZWFzdXJlbWVudC4gU2V0IHRvIGZhbHNlIGJ5IGRlZmF1bHQgdG8gcHJldmVudFxuICAgKiBhY2NpZGVudGFsIGxvZ2dpbmcgYW5kIHBlcmYgbG9zcy5cbiAgICovXG4gIGVuYWJsZU1lYXN1cmU6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBIb2xkcyBvbnRvIHRoZSBtZWFzdXJlIGZ1bmN0aW9uIGluIHVzZS4gQnkgZGVmYXVsdCwgZG9uJ3QgbWVhc3VyZVxuICAgKiBhbnl0aGluZywgYnV0IHdlJ2xsIG92ZXJyaWRlIHRoaXMgaWYgd2UgaW5qZWN0IGEgbWVhc3VyZSBmdW5jdGlvbi5cbiAgICovXG4gIHN0b3JlZE1lYXN1cmU6IF9ub01lYXN1cmUsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9iamVjdE5hbWVcbiAgICogQHBhcmFtIHtvYmplY3Q8c3RyaW5nPn0gbWV0aG9kTmFtZXNcbiAgICovXG4gIG1lYXN1cmVNZXRob2RzOiBmdW5jdGlvbiAob2JqZWN0LCBvYmplY3ROYW1lLCBtZXRob2ROYW1lcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kTmFtZXMpIHtcbiAgICAgICAgaWYgKCFtZXRob2ROYW1lcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0W2tleV0gPSBSZWFjdFBlcmYubWVhc3VyZShvYmplY3ROYW1lLCBtZXRob2ROYW1lc1trZXldLCBvYmplY3Rba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBVc2UgdGhpcyB0byB3cmFwIG1ldGhvZHMgeW91IHdhbnQgdG8gbWVhc3VyZS4gWmVybyBvdmVyaGVhZCBpbiBwcm9kdWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb2JqTmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm5OYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmNcbiAgICogQHJldHVybiB7ZnVuY3Rpb259XG4gICAqL1xuICBtZWFzdXJlOiBmdW5jdGlvbiAob2JqTmFtZSwgZm5OYW1lLCBmdW5jKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBtZWFzdXJlZEZ1bmMgPSBudWxsO1xuICAgICAgdmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChSZWFjdFBlcmYuZW5hYmxlTWVhc3VyZSkge1xuICAgICAgICAgIGlmICghbWVhc3VyZWRGdW5jKSB7XG4gICAgICAgICAgICBtZWFzdXJlZEZ1bmMgPSBSZWFjdFBlcmYuc3RvcmVkTWVhc3VyZShvYmpOYW1lLCBmbk5hbWUsIGZ1bmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbWVhc3VyZWRGdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICB3cmFwcGVyLmRpc3BsYXlOYW1lID0gb2JqTmFtZSArICdfJyArIGZuTmFtZTtcbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYztcbiAgfSxcblxuICBpbmplY3Rpb246IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZWFzdXJlXG4gICAgICovXG4gICAgaW5qZWN0TWVhc3VyZTogZnVuY3Rpb24gKG1lYXN1cmUpIHtcbiAgICAgIFJlYWN0UGVyZi5zdG9yZWRNZWFzdXJlID0gbWVhc3VyZTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogU2ltcGx5IHBhc3NlcyB0aHJvdWdoIHRoZSBtZWFzdXJlZCBmdW5jdGlvbiwgd2l0aG91dCBtZWFzdXJpbmcgaXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG9iak5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBmbk5hbWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmNcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBfbm9NZWFzdXJlKG9iak5hbWUsIGZuTmFtZSwgZnVuYykge1xuICByZXR1cm4gZnVuYztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFBlcmY7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7XG4gICAgcHJvcDogJ3Byb3AnLFxuICAgIGNvbnRleHQ6ICdjb250ZXh0JyxcbiAgICBjaGlsZENvbnRleHQ6ICdjaGlsZCBjb250ZXh0J1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFByb3BUeXBlTG9jYXRpb25zXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZSgnZmJqcy9saWIva2V5TWlycm9yJyk7XG5cbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0ga2V5TWlycm9yKHtcbiAgcHJvcDogbnVsbCxcbiAgY29udGV4dDogbnVsbCxcbiAgY2hpbGRDb250ZXh0OiBudWxsXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25zOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFByb3BUeXBlc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzJyk7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGdldEl0ZXJhdG9yRm4gPSByZXF1aXJlKCcuL2dldEl0ZXJhdG9yRm4nKTtcblxuLyoqXG4gKiBDb2xsZWN0aW9uIG9mIG1ldGhvZHMgdGhhdCBhbGxvdyBkZWNsYXJhdGlvbiBhbmQgdmFsaWRhdGlvbiBvZiBwcm9wcyB0aGF0IGFyZVxuICogc3VwcGxpZWQgdG8gUmVhY3QgY29tcG9uZW50cy4gRXhhbXBsZSB1c2FnZTpcbiAqXG4gKiAgIHZhciBQcm9wcyA9IHJlcXVpcmUoJ1JlYWN0UHJvcFR5cGVzJyk7XG4gKiAgIHZhciBNeUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICAgcHJvcFR5cGVzOiB7XG4gKiAgICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgcHJvcCBuYW1lZCBcImRlc2NyaXB0aW9uXCIuXG4gKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLFxuICpcbiAqICAgICAgIC8vIEEgcmVxdWlyZWQgZW51bSBwcm9wIG5hbWVkIFwiY2F0ZWdvcnlcIi5cbiAqICAgICAgIGNhdGVnb3J5OiBQcm9wcy5vbmVPZihbJ05ld3MnLCdQaG90b3MnXSkuaXNSZXF1aXJlZCxcbiAqXG4gKiAgICAgICAvLyBBIHByb3AgbmFtZWQgXCJkaWFsb2dcIiB0aGF0IHJlcXVpcmVzIGFuIGluc3RhbmNlIG9mIERpYWxvZy5cbiAqICAgICAgIGRpYWxvZzogUHJvcHMuaW5zdGFuY2VPZihEaWFsb2cpLmlzUmVxdWlyZWRcbiAqICAgICB9LFxuICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7IC4uLiB9XG4gKiAgIH0pO1xuICpcbiAqIEEgbW9yZSBmb3JtYWwgc3BlY2lmaWNhdGlvbiBvZiBob3cgdGhlc2UgbWV0aG9kcyBhcmUgdXNlZDpcbiAqXG4gKiAgIHR5cGUgOj0gYXJyYXl8Ym9vbHxmdW5jfG9iamVjdHxudW1iZXJ8c3RyaW5nfG9uZU9mKFsuLi5dKXxpbnN0YW5jZU9mKC4uLilcbiAqICAgZGVjbCA6PSBSZWFjdFByb3BUeXBlcy57dHlwZX0oLmlzUmVxdWlyZWQpP1xuICpcbiAqIEVhY2ggYW5kIGV2ZXJ5IGRlY2xhcmF0aW9uIHByb2R1Y2VzIGEgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBzaWduYXR1cmUuIFRoaXNcbiAqIGFsbG93cyB0aGUgY3JlYXRpb24gb2YgY3VzdG9tIHZhbGlkYXRpb24gZnVuY3Rpb25zLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgdmFyIE15TGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgIHByb3BUeXBlczoge1xuICogICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgb3IgVVJJIHByb3AgbmFtZWQgXCJocmVmXCIuXG4gKiAgICAgIGhyZWY6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICogICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmXG4gKiAgICAgICAgICAgICEocHJvcFZhbHVlIGluc3RhbmNlb2YgVVJJKSkge1xuICogICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICtcbiAqICAgICAgICAgICAgY29tcG9uZW50TmFtZVxuICogICAgICAgICAgKTtcbiAqICAgICAgICB9XG4gKiAgICAgIH1cbiAqICAgIH0sXG4gKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn1cbiAqICB9KTtcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG52YXIgQU5PTllNT1VTID0gJzw8YW5vbnltb3VzPj4nO1xuXG52YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gIGFycmF5OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYXJyYXknKSxcbiAgYm9vbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Jvb2xlYW4nKSxcbiAgZnVuYzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Z1bmN0aW9uJyksXG4gIG51bWJlcjogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ251bWJlcicpLFxuICBvYmplY3Q6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdvYmplY3QnKSxcbiAgc3RyaW5nOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignc3RyaW5nJyksXG5cbiAgYW55OiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpLFxuICBhcnJheU9mOiBjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIsXG4gIGVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpLFxuICBpbnN0YW5jZU9mOiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyLFxuICBub2RlOiBjcmVhdGVOb2RlQ2hlY2tlcigpLFxuICBvYmplY3RPZjogY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcixcbiAgb25lT2Y6IGNyZWF0ZUVudW1UeXBlQ2hlY2tlcixcbiAgb25lT2ZUeXBlOiBjcmVhdGVVbmlvblR5cGVDaGVja2VyLFxuICBzaGFwZTogY3JlYXRlU2hhcGVUeXBlQ2hlY2tlclxufTtcblxuZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcbiAgZnVuY3Rpb24gY2hlY2tUeXBlKGlzUmVxdWlyZWQsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IEFOT05ZTU9VUztcbiAgICBwcm9wRnVsbE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignUmVxdWlyZWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCB3YXMgbm90IHNwZWNpZmllZCBpbiAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7XG4gIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuXG4gIHJldHVybiBjaGFpbmVkQ2hlY2tUeXBlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihleHBlY3RlZFR5cGUpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgIGlmIChwcm9wVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgLy8gYHByb3BWYWx1ZWAgYmVpbmcgaW5zdGFuY2Ugb2YsIHNheSwgZGF0ZS9yZWdleHAsIHBhc3MgdGhlICdvYmplY3QnXG4gICAgICAvLyBjaGVjaywgYnV0IHdlIGNhbiBvZmZlciBhIG1vcmUgcHJlY2lzZSBlcnJvciBtZXNzYWdlIGhlcmUgcmF0aGVyIHRoYW5cbiAgICAgIC8vICdvZiB0eXBlIGBvYmplY3RgJy5cbiAgICAgIHZhciBwcmVjaXNlVHlwZSA9IGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSk7XG5cbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJlY2lzZVR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2AnICsgZXhwZWN0ZWRUeXBlICsgJ2AuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpIHtcbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMobnVsbCkpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIGFycmF5LicpKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICdbJyArIGkgKyAnXScpO1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIGlmICghUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgc2luZ2xlIFJlYWN0RWxlbWVudC4nKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBpZiAoIShwcm9wc1twcm9wTmFtZV0gaW5zdGFuY2VvZiBleHBlY3RlZENsYXNzKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHZhciBleHBlY3RlZENsYXNzTmFtZSA9IGV4cGVjdGVkQ2xhc3MubmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICB2YXIgYWN0dWFsQ2xhc3NOYW1lID0gZ2V0Q2xhc3NOYW1lKHByb3BzW3Byb3BOYW1lXSk7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIGFjdHVhbENsYXNzTmFtZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnaW5zdGFuY2Ugb2YgYCcgKyBleHBlY3RlZENsYXNzTmFtZSArICdgLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRW51bVR5cGVDaGVja2VyKGV4cGVjdGVkVmFsdWVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFZhbHVlcykpIHtcbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJyk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwcm9wVmFsdWUgPT09IGV4cGVjdGVkVmFsdWVzW2ldKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgdmFyIHZhbHVlc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGV4cGVjdGVkVmFsdWVzKTtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdmFsdWUgYCcgKyBwcm9wVmFsdWUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgb25lIG9mICcgKyB2YWx1ZXNTdHJpbmcgKyAnLicpKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBvYmplY3QuJykpO1xuICAgIH1cbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcFZhbHVlKSB7XG4gICAgICBpZiAocHJvcFZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXkpO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVbmlvblR5cGVDaGVja2VyKGFycmF5T2ZUeXBlQ2hlY2tlcnMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5T2ZUeXBlQ2hlY2tlcnMpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2ZUeXBlLCBleHBlY3RlZCBhbiBpbnN0YW5jZSBvZiBhcnJheS4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoZWNrZXIgPSBhcnJheU9mVHlwZUNoZWNrZXJzW2ldO1xuICAgICAgaWYgKGNoZWNrZXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLicpKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOb2RlQ2hlY2tlcigpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgaWYgKCFpc05vZGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXMpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGBvYmplY3RgLicpKTtcbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIHNoYXBlVHlwZXMpIHtcbiAgICAgIHZhciBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldO1xuICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSk7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gIHN3aXRjaCAodHlwZW9mIHByb3BWYWx1ZSkge1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gIXByb3BWYWx1ZTtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gcHJvcFZhbHVlLmV2ZXJ5KGlzTm9kZSk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcFZhbHVlID09PSBudWxsIHx8IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4ocHJvcFZhbHVlKTtcbiAgICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChwcm9wVmFsdWUpO1xuICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IHByb3BWYWx1ZS5lbnRyaWVzKSB7XG4gICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgaWYgKCFpc05vZGUoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgIGlmICghaXNOb2RlKGVudHJ5WzFdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vIEVxdWl2YWxlbnQgb2YgYHR5cGVvZmAgYnV0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgYXJyYXkgYW5kIHJlZ2V4cC5cbmZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuICB2YXIgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuICdhcnJheSc7XG4gIH1cbiAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cbiAgICAvLyAnb2JqZWN0JyBmb3IgdHlwZW9mIGEgUmVnRXhwLiBXZSdsbCBub3JtYWxpemUgdGhpcyBoZXJlIHNvIHRoYXQgL2JsYS9cbiAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICByZXR1cm4gJ29iamVjdCc7XG4gIH1cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuXG4vLyBUaGlzIGhhbmRsZXMgbW9yZSB0eXBlcyB0aGFuIGBnZXRQcm9wVHlwZWAuIE9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4vLyBTZWUgYGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyYC5cbmZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHJldHVybiAnZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiAncmVnZXhwJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuXG4vLyBSZXR1cm5zIGNsYXNzIG5hbWUgb2YgdGhlIG9iamVjdCwgaWYgYW55LlxuZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKHByb3BWYWx1ZSkge1xuICBpZiAoIXByb3BWYWx1ZS5jb25zdHJ1Y3RvciB8fCAhcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICByZXR1cm4gJzw8YW5vbnltb3VzPj4nO1xuICB9XG4gIHJldHVybiBwcm9wVmFsdWUuY29uc3RydWN0b3IubmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZSgnLi9DYWxsYmFja1F1ZXVlJyk7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXInKTtcbnZhciBSZWFjdERPTUZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vUmVhY3RET01GZWF0dXJlRmxhZ3MnKTtcbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdElucHV0U2VsZWN0aW9uJyk7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1RyYW5zYWN0aW9uJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQsIHdoZW4gcG9zc2libGUsIHRoZSBzZWxlY3Rpb24gcmFuZ2UgKGN1cnJlbnRseSBzZWxlY3RlZCB0ZXh0XG4gKiBpbnB1dCkgaXMgbm90IGRpc3R1cmJlZCBieSBwZXJmb3JtaW5nIHRoZSB0cmFuc2FjdGlvbi5cbiAqL1xudmFyIFNFTEVDVElPTl9SRVNUT1JBVElPTiA9IHtcbiAgLyoqXG4gICAqIEByZXR1cm4ge1NlbGVjdGlvbn0gU2VsZWN0aW9uIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb25JbmZvcm1hdGlvbixcbiAgLyoqXG4gICAqIEBwYXJhbSB7U2VsZWN0aW9ufSBzZWwgU2VsZWN0aW9uIGluZm9ybWF0aW9uIHJldHVybmVkIGZyb20gYGluaXRpYWxpemVgLlxuICAgKi9cbiAgY2xvc2U6IFJlYWN0SW5wdXRTZWxlY3Rpb24ucmVzdG9yZVNlbGVjdGlvblxufTtcblxuLyoqXG4gKiBTdXBwcmVzc2VzIGV2ZW50cyAoYmx1ci9mb2N1cykgdGhhdCBjb3VsZCBiZSBpbmFkdmVydGVudGx5IGRpc3BhdGNoZWQgZHVlIHRvXG4gKiBoaWdoIGxldmVsIERPTSBtYW5pcHVsYXRpb25zIChsaWtlIHRlbXBvcmFyaWx5IHJlbW92aW5nIGEgdGV4dCBpbnB1dCBmcm9tIHRoZVxuICogRE9NKS5cbiAqL1xudmFyIEVWRU5UX1NVUFBSRVNTSU9OID0ge1xuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGVuYWJsZWQgc3RhdHVzIG9mIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGJlZm9yZVxuICAgKiB0aGUgcmVjb25jaWxpYXRpb24uXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnRseUVuYWJsZWQgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaXNFbmFibGVkKCk7XG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnNldEVuYWJsZWQoZmFsc2UpO1xuICAgIHJldHVybiBjdXJyZW50bHlFbmFibGVkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHByZXZpb3VzbHlFbmFibGVkIEVuYWJsZWQgc3RhdHVzIG9mXG4gICAqICAgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgYmVmb3JlIHRoZSByZWNvbmNpbGlhdGlvbiBvY2N1cnJlZC4gYGNsb3NlYFxuICAgKiAgIHJlc3RvcmVzIHRoZSBwcmV2aW91cyB2YWx1ZS5cbiAgICovXG4gIGNsb3NlOiBmdW5jdGlvbiAocHJldmlvdXNseUVuYWJsZWQpIHtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChwcmV2aW91c2x5RW5hYmxlZCk7XG4gIH1cbn07XG5cbi8qKlxuICogUHJvdmlkZXMgYSBxdWV1ZSBmb3IgY29sbGVjdGluZyBgY29tcG9uZW50RGlkTW91bnRgIGFuZFxuICogYGNvbXBvbmVudERpZFVwZGF0ZWAgY2FsbGJhY2tzIGR1cmluZyB0aGUgdGhlIHRyYW5zYWN0aW9uLlxuICovXG52YXIgT05fRE9NX1JFQURZX1FVRVVFSU5HID0ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGludGVybmFsIGBvbkRPTVJlYWR5YCBxdWV1ZS5cbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeS5yZXNldCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZnRlciBET00gaXMgZmx1c2hlZCwgaW52b2tlIGFsbCByZWdpc3RlcmVkIGBvbkRPTVJlYWR5YCBjYWxsYmFja3MuXG4gICAqL1xuICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5Lm5vdGlmeUFsbCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEV4ZWN1dGVkIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhlIGBUcmFuc2FjdGlvbmAgaW5zdGFuY2UuIENvbnNpZGVyIHRoZXNlIGFzXG4gKiBiZWluZyBtZW1iZXIgbWV0aG9kcywgYnV0IHdpdGggYW4gaW1wbGllZCBvcmRlcmluZyB3aGlsZSBiZWluZyBpc29sYXRlZCBmcm9tXG4gKiBlYWNoIG90aGVyLlxuICovXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbU0VMRUNUSU9OX1JFU1RPUkFUSU9OLCBFVkVOVF9TVVBQUkVTU0lPTiwgT05fRE9NX1JFQURZX1FVRVVFSU5HXTtcblxuLyoqXG4gKiBDdXJyZW50bHk6XG4gKiAtIFRoZSBvcmRlciB0aGF0IHRoZXNlIGFyZSBsaXN0ZWQgaW4gdGhlIHRyYW5zYWN0aW9uIGlzIGNyaXRpY2FsOlxuICogLSBTdXBwcmVzc2VzIGV2ZW50cy5cbiAqIC0gUmVzdG9yZXMgc2VsZWN0aW9uIHJhbmdlLlxuICpcbiAqIEZ1dHVyZTpcbiAqIC0gUmVzdG9yZSBkb2N1bWVudC9vdmVyZmxvdyBzY3JvbGwgcG9zaXRpb25zIHRoYXQgd2VyZSB1bmludGVudGlvbmFsbHlcbiAqICAgbW9kaWZpZWQgdmlhIERPTSBpbnNlcnRpb25zIGFib3ZlIHRoZSB0b3Agdmlld3BvcnQgYm91bmRhcnkuXG4gKiAtIEltcGxlbWVudC9pbnRlZ3JhdGUgd2l0aCBjdXN0b21pemVkIGNvbnN0cmFpbnQgYmFzZWQgbGF5b3V0IHN5c3RlbSBhbmQga2VlcFxuICogICB0cmFjayBvZiB3aGljaCBkaW1lbnNpb25zIG11c3QgYmUgcmVtZWFzdXJlZC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblxuICovXG5mdW5jdGlvbiBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKGZvcmNlSFRNTCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIC8vIE9ubHkgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHJlYWxseSBuZWVkcyB0aGlzIG9wdGlvbiAoc2VlXG4gIC8vIGBSZWFjdFNlcnZlclJlbmRlcmluZ2ApLCBidXQgc2VydmVyLXNpZGUgdXNlc1xuICAvLyBgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbmAgaW5zdGVhZC4gVGhpcyBvcHRpb24gaXMgaGVyZSBzbyB0aGF0IGl0J3NcbiAgLy8gYWNjZXNzaWJsZSBhbmQgZGVmYXVsdHMgdG8gZmFsc2Ugd2hlbiBgUmVhY3RET01Db21wb25lbnRgIGFuZFxuICAvLyBgUmVhY3RUZXh0Q29tcG9uZW50YCBjaGVja3MgaXQgaW4gYG1vdW50Q29tcG9uZW50YC5gXG4gIHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSBmYWxzZTtcbiAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZChudWxsKTtcbiAgdGhpcy51c2VDcmVhdGVFbGVtZW50ID0gIWZvcmNlSFRNTCAmJiBSZWFjdERPTUZlYXR1cmVGbGFncy51c2VDcmVhdGVFbGVtZW50O1xufVxuXG52YXIgTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBAc2VlIFRyYW5zYWN0aW9uXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAZmluYWxcbiAgICogQHJldHVybiB7YXJyYXk8b2JqZWN0Pn0gTGlzdCBvZiBvcGVyYXRpb24gd3JhcCBwcm9jZWR1cmVzLlxuICAgKiAgIFRPRE86IGNvbnZlcnQgdG8gYXJyYXk8VHJhbnNhY3Rpb25XcmFwcGVyPlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBgb25ET01SZWFkeWAgY2FsbGJhY2tzIHdpdGguXG4gICAqL1xuICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFjdE1vdW50UmVhZHk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMsIGFuZCB3aWxsIGludm9rZSB0aGlzIGJlZm9yZSBhbGxvd2luZyB0aGlzXG4gICAqIGluc3RhbmNlIHRvIGJlIHJldXNlZC5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5yZWFjdE1vdW50UmVhZHkpO1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gbnVsbDtcbiAgfVxufTtcblxuYXNzaWduKFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbi5NaXhpbiwgTWl4aW4pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RSZWNvbmNpbGVyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSZWYgPSByZXF1aXJlKCcuL1JlYWN0UmVmJyk7XG5cbi8qKlxuICogSGVscGVyIHRvIGNhbGwgUmVhY3RSZWYuYXR0YWNoUmVmcyB3aXRoIHRoaXMgY29tcG9zaXRlIGNvbXBvbmVudCwgc3BsaXQgb3V0XG4gKiB0byBhdm9pZCBhbGxvY2F0aW9ucyBpbiB0aGUgdHJhbnNhY3Rpb24gbW91bnQtcmVhZHkgcXVldWUuXG4gKi9cbmZ1bmN0aW9uIGF0dGFjaFJlZnMoKSB7XG4gIFJlYWN0UmVmLmF0dGFjaFJlZnModGhpcywgdGhpcy5fY3VycmVudEVsZW1lbnQpO1xufVxuXG52YXIgUmVhY3RSZWNvbmNpbGVyID0ge1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgY29tcG9uZW50LCByZW5kZXJzIG1hcmt1cCwgYW5kIHJlZ2lzdGVycyBldmVudCBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGludGVybmFsSW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBET00gSUQgb2YgdGhlIHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEByZXR1cm4gez9zdHJpbmd9IFJlbmRlcmVkIG1hcmt1cCB0byBiZSBpbnNlcnRlZCBpbnRvIHRoZSBET00uXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgcm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBtYXJrdXAgPSBpbnRlcm5hbEluc3RhbmNlLm1vdW50Q29tcG9uZW50KHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudCAmJiBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5yZWYgIT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShhdHRhY2hSZWZzLCBpbnRlcm5hbEluc3RhbmNlKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcmt1cDtcbiAgfSxcblxuICAvKipcbiAgICogUmVsZWFzZXMgYW55IHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgYG1vdW50Q29tcG9uZW50YC5cbiAgICpcbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24gKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICBSZWFjdFJlZi5kZXRhY2hSZWZzKGludGVybmFsSW5zdGFuY2UsIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50KTtcbiAgICBpbnRlcm5hbEluc3RhbmNlLnVubW91bnRDb21wb25lbnQoKTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlIGEgY29tcG9uZW50IHVzaW5nIGEgbmV3IGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGludGVybmFsSW5zdGFuY2VcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgbmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIHByZXZFbGVtZW50ID0gaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQ7XG5cbiAgICBpZiAobmV4dEVsZW1lbnQgPT09IHByZXZFbGVtZW50ICYmIGNvbnRleHQgPT09IGludGVybmFsSW5zdGFuY2UuX2NvbnRleHQpIHtcbiAgICAgIC8vIFNpbmNlIGVsZW1lbnRzIGFyZSBpbW11dGFibGUgYWZ0ZXIgdGhlIG93bmVyIGlzIHJlbmRlcmVkLFxuICAgICAgLy8gd2UgY2FuIGRvIGEgY2hlYXAgaWRlbnRpdHkgY29tcGFyZSBoZXJlIHRvIGRldGVybWluZSBpZiB0aGlzIGlzIGFcbiAgICAgIC8vIHN1cGVyZmx1b3VzIHJlY29uY2lsZS4gSXQncyBwb3NzaWJsZSBmb3Igc3RhdGUgdG8gYmUgbXV0YWJsZSBidXQgc3VjaFxuICAgICAgLy8gY2hhbmdlIHNob3VsZCB0cmlnZ2VyIGFuIHVwZGF0ZSBvZiB0aGUgb3duZXIgd2hpY2ggd291bGQgcmVjcmVhdGVcbiAgICAgIC8vIHRoZSBlbGVtZW50LiBXZSBleHBsaWNpdGx5IGNoZWNrIGZvciB0aGUgZXhpc3RlbmNlIG9mIGFuIG93bmVyIHNpbmNlXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIGZvciBhbiBlbGVtZW50IGNyZWF0ZWQgb3V0c2lkZSBhIGNvbXBvc2l0ZSB0byBiZVxuICAgICAgLy8gZGVlcGx5IG11dGF0ZWQgYW5kIHJldXNlZC5cblxuICAgICAgLy8gVE9ETzogQmFpbGluZyBvdXQgZWFybHkgaXMganVzdCBhIHBlcmYgb3B0aW1pemF0aW9uIHJpZ2h0P1xuICAgICAgLy8gVE9ETzogUmVtb3ZpbmcgdGhlIHJldHVybiBzdGF0ZW1lbnQgc2hvdWxkIGFmZmVjdCBjb3JyZWN0bmVzcz9cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcmVmc0NoYW5nZWQgPSBSZWFjdFJlZi5zaG91bGRVcGRhdGVSZWZzKHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCk7XG5cbiAgICBpZiAocmVmc0NoYW5nZWQpIHtcbiAgICAgIFJlYWN0UmVmLmRldGFjaFJlZnMoaW50ZXJuYWxJbnN0YW5jZSwgcHJldkVsZW1lbnQpO1xuICAgIH1cblxuICAgIGludGVybmFsSW5zdGFuY2UucmVjZWl2ZUNvbXBvbmVudChuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuXG4gICAgaWYgKHJlZnNDaGFuZ2VkICYmIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50ICYmIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50LnJlZiAhPSBudWxsKSB7XG4gICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGF0dGFjaFJlZnMsIGludGVybmFsSW5zdGFuY2UpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRmx1c2ggYW55IGRpcnR5IGNoYW5nZXMgaW4gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGludGVybmFsSW5zdGFuY2VcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeTogZnVuY3Rpb24gKGludGVybmFsSW5zdGFuY2UsIHRyYW5zYWN0aW9uKSB7XG4gICAgaW50ZXJuYWxJbnN0YW5jZS5wZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkodHJhbnNhY3Rpb24pO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWNvbmNpbGVyOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJlZlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0T3duZXInKTtcblxudmFyIFJlYWN0UmVmID0ge307XG5cbmZ1bmN0aW9uIGF0dGFjaFJlZihyZWYsIGNvbXBvbmVudCwgb3duZXIpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYoY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCkpO1xuICB9IGVsc2Uge1xuICAgIC8vIExlZ2FjeSByZWZcbiAgICBSZWFjdE93bmVyLmFkZENvbXBvbmVudEFzUmVmVG8oY29tcG9uZW50LCByZWYsIG93bmVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXRhY2hSZWYocmVmLCBjb21wb25lbnQsIG93bmVyKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKG51bGwpO1xuICB9IGVsc2Uge1xuICAgIC8vIExlZ2FjeSByZWZcbiAgICBSZWFjdE93bmVyLnJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbShjb21wb25lbnQsIHJlZiwgb3duZXIpO1xuICB9XG59XG5cblJlYWN0UmVmLmF0dGFjaFJlZnMgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICBpZiAocmVmICE9IG51bGwpIHtcbiAgICBhdHRhY2hSZWYocmVmLCBpbnN0YW5jZSwgZWxlbWVudC5fb3duZXIpO1xuICB9XG59O1xuXG5SZWFjdFJlZi5zaG91bGRVcGRhdGVSZWZzID0gZnVuY3Rpb24gKHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkge1xuICAvLyBJZiBlaXRoZXIgdGhlIG93bmVyIG9yIGEgYHJlZmAgaGFzIGNoYW5nZWQsIG1ha2Ugc3VyZSB0aGUgbmV3ZXN0IG93bmVyXG4gIC8vIGhhcyBzdG9yZWQgYSByZWZlcmVuY2UgdG8gYHRoaXNgLCBhbmQgdGhlIHByZXZpb3VzIG93bmVyIChpZiBkaWZmZXJlbnQpXG4gIC8vIGhhcyBmb3Jnb3R0ZW4gdGhlIHJlZmVyZW5jZSB0byBgdGhpc2AuIFdlIHVzZSB0aGUgZWxlbWVudCBpbnN0ZWFkXG4gIC8vIG9mIHRoZSBwdWJsaWMgdGhpcy5wcm9wcyBiZWNhdXNlIHRoZSBwb3N0IHByb2Nlc3NpbmcgY2Fubm90IGRldGVybWluZVxuICAvLyBhIHJlZi4gVGhlIHJlZiBjb25jZXB0dWFsbHkgbGl2ZXMgb24gdGhlIGVsZW1lbnQuXG5cbiAgLy8gVE9ETzogU2hvdWxkIHRoaXMgZXZlbiBiZSBwb3NzaWJsZT8gVGhlIG93bmVyIGNhbm5vdCBjaGFuZ2UgYmVjYXVzZVxuICAvLyBpdCdzIGZvcmJpZGRlbiBieSBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudC4gVGhlIHJlZiBjYW4gY2hhbmdlXG4gIC8vIGlmIHlvdSBzd2FwIHRoZSBrZXlzIG9mIGJ1dCBub3QgdGhlIHJlZnMuIFJlY29uc2lkZXIgd2hlcmUgdGhpcyBjaGVja1xuICAvLyBpcyBtYWRlLiBJdCBwcm9iYWJseSBiZWxvbmdzIHdoZXJlIHRoZSBrZXkgY2hlY2tpbmcgYW5kXG4gIC8vIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgaXMgZG9uZS5cblxuICB2YXIgcHJldkVtcHR5ID0gcHJldkVsZW1lbnQgPT09IG51bGwgfHwgcHJldkVsZW1lbnQgPT09IGZhbHNlO1xuICB2YXIgbmV4dEVtcHR5ID0gbmV4dEVsZW1lbnQgPT09IG51bGwgfHwgbmV4dEVsZW1lbnQgPT09IGZhbHNlO1xuXG4gIHJldHVybihcbiAgICAvLyBUaGlzIGhhcyBhIGZldyBmYWxzZSBwb3NpdGl2ZXMgdy9yL3QgZW1wdHkgY29tcG9uZW50cy5cbiAgICBwcmV2RW1wdHkgfHwgbmV4dEVtcHR5IHx8IG5leHRFbGVtZW50Ll9vd25lciAhPT0gcHJldkVsZW1lbnQuX293bmVyIHx8IG5leHRFbGVtZW50LnJlZiAhPT0gcHJldkVsZW1lbnQucmVmXG4gICk7XG59O1xuXG5SZWFjdFJlZi5kZXRhY2hSZWZzID0gZnVuY3Rpb24gKGluc3RhbmNlLCBlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50ID09PSBudWxsIHx8IGVsZW1lbnQgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciByZWYgPSBlbGVtZW50LnJlZjtcbiAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgZGV0YWNoUmVmKHJlZiwgaW5zdGFuY2UsIGVsZW1lbnQuX293bmVyKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJlZjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RSb290SW5kZXhcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSb290SW5kZXhJbmplY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBfY3JlYXRlUmVhY3RSb290SW5kZXhcbiAgICovXG4gIGluamVjdENyZWF0ZVJlYWN0Um9vdEluZGV4OiBmdW5jdGlvbiAoX2NyZWF0ZVJlYWN0Um9vdEluZGV4KSB7XG4gICAgUmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXggPSBfY3JlYXRlUmVhY3RSb290SW5kZXg7XG4gIH1cbn07XG5cbnZhciBSZWFjdFJvb3RJbmRleCA9IHtcbiAgY3JlYXRlUmVhY3RSb290SW5kZXg6IG51bGwsXG4gIGluamVjdGlvbjogUmVhY3RSb290SW5kZXhJbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSb290SW5kZXg7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFNlcnZlckJhdGNoaW5nU3RyYXRlZ3kgPSB7XG4gIGlzQmF0Y2hpbmdVcGRhdGVzOiBmYWxzZSxcbiAgYmF0Y2hlZFVwZGF0ZXM6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGhlcmUuIER1cmluZyB0aGUgc2VydmVyIHJlbmRlcmluZyB3ZSBkb24ndCB3YW50IHRvXG4gICAgLy8gc2NoZWR1bGUgYW55IHVwZGF0ZXMuIFdlIHdpbGwgc2ltcGx5IGlnbm9yZSB0aGVtLlxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0U2VydmVyUmVuZGVyaW5nXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kgPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3knKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlSGFuZGxlcycpO1xudmFyIFJlYWN0TWFya3VwQ2hlY2tzdW0gPSByZXF1aXJlKCcuL1JlYWN0TWFya3VwQ2hlY2tzdW0nKTtcbnZhciBSZWFjdFNlcnZlckJhdGNoaW5nU3RyYXRlZ3kgPSByZXF1aXJlKCcuL1JlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneScpO1xudmFyIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24nKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgSFRNTCBtYXJrdXBcbiAqL1xuZnVuY3Rpb24gcmVuZGVyVG9TdHJpbmcoZWxlbWVudCkge1xuICAhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3JlbmRlclRvU3RyaW5nKCk6IFlvdSBtdXN0IHBhc3MgYSB2YWxpZCBSZWFjdEVsZW1lbnQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gIHZhciB0cmFuc2FjdGlvbjtcbiAgdHJ5IHtcbiAgICBSZWFjdFVwZGF0ZXMuaW5qZWN0aW9uLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koUmVhY3RTZXJ2ZXJCYXRjaGluZ1N0cmF0ZWd5KTtcblxuICAgIHZhciBpZCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0Um9vdElEKCk7XG4gICAgdHJhbnNhY3Rpb24gPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLmdldFBvb2xlZChmYWxzZSk7XG5cbiAgICByZXR1cm4gdHJhbnNhY3Rpb24ucGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGVsZW1lbnQsIG51bGwpO1xuICAgICAgdmFyIG1hcmt1cCA9IGNvbXBvbmVudEluc3RhbmNlLm1vdW50Q29tcG9uZW50KGlkLCB0cmFuc2FjdGlvbiwgZW1wdHlPYmplY3QpO1xuICAgICAgcmV0dXJuIFJlYWN0TWFya3VwQ2hlY2tzdW0uYWRkQ2hlY2tzdW1Ub01hcmt1cChtYXJrdXApO1xuICAgIH0sIG51bGwpO1xuICB9IGZpbmFsbHkge1xuICAgIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG4gICAgLy8gUmV2ZXJ0IHRvIHRoZSBET00gYmF0Y2hpbmcgc3RyYXRlZ3kgc2luY2UgdGhlc2UgdHdvIHJlbmRlcmVyc1xuICAgIC8vIGN1cnJlbnRseSBzaGFyZSB0aGVzZSBzdGF0ZWZ1bCBtb2R1bGVzLlxuICAgIFJlYWN0VXBkYXRlcy5pbmplY3Rpb24uaW5qZWN0QmF0Y2hpbmdTdHJhdGVneShSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5KTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBIVE1MIG1hcmt1cCwgd2l0aG91dCB0aGUgZXh0cmEgUmVhY3QgSUQgYW5kIGNoZWNrc3VtXG4gKiAoZm9yIGdlbmVyYXRpbmcgc3RhdGljIHBhZ2VzKVxuICovXG5mdW5jdGlvbiByZW5kZXJUb1N0YXRpY01hcmt1cChlbGVtZW50KSB7XG4gICFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncmVuZGVyVG9TdGF0aWNNYXJrdXAoKTogWW91IG11c3QgcGFzcyBhIHZhbGlkIFJlYWN0RWxlbWVudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgdmFyIHRyYW5zYWN0aW9uO1xuICB0cnkge1xuICAgIFJlYWN0VXBkYXRlcy5pbmplY3Rpb24uaW5qZWN0QmF0Y2hpbmdTdHJhdGVneShSZWFjdFNlcnZlckJhdGNoaW5nU3RyYXRlZ3kpO1xuXG4gICAgdmFyIGlkID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RSb290SUQoKTtcbiAgICB0cmFuc2FjdGlvbiA9IFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKHRydWUpO1xuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLnBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChlbGVtZW50LCBudWxsKTtcbiAgICAgIHJldHVybiBjb21wb25lbnRJbnN0YW5jZS5tb3VudENvbXBvbmVudChpZCwgdHJhbnNhY3Rpb24sIGVtcHR5T2JqZWN0KTtcbiAgICB9LCBudWxsKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICAgIC8vIFJldmVydCB0byB0aGUgRE9NIGJhdGNoaW5nIHN0cmF0ZWd5IHNpbmNlIHRoZXNlIHR3byByZW5kZXJlcnNcbiAgICAvLyBjdXJyZW50bHkgc2hhcmUgdGhlc2Ugc3RhdGVmdWwgbW9kdWxlcy5cbiAgICBSZWFjdFVwZGF0ZXMuaW5qZWN0aW9uLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlbmRlclRvU3RyaW5nOiByZW5kZXJUb1N0cmluZyxcbiAgcmVuZGVyVG9TdGF0aWNNYXJrdXA6IHJlbmRlclRvU3RhdGljTWFya3VwXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIENhbGxiYWNrUXVldWUgPSByZXF1aXJlKCcuL0NhbGxiYWNrUXVldWUnKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vVHJhbnNhY3Rpb24nKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG5cbi8qKlxuICogUHJvdmlkZXMgYSBgQ2FsbGJhY2tRdWV1ZWAgcXVldWUgZm9yIGNvbGxlY3RpbmcgYG9uRE9NUmVhZHlgIGNhbGxiYWNrc1xuICogZHVyaW5nIHRoZSBwZXJmb3JtaW5nIG9mIHRoZSB0cmFuc2FjdGlvbi5cbiAqL1xudmFyIE9OX0RPTV9SRUFEWV9RVUVVRUlORyA9IHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBpbnRlcm5hbCBgb25ET01SZWFkeWAgcXVldWUuXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkucmVzZXQoKTtcbiAgfSxcblxuICBjbG9zZTogZW1wdHlGdW5jdGlvblxufTtcblxuLyoqXG4gKiBFeGVjdXRlZCB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBgVHJhbnNhY3Rpb25gIGluc3RhbmNlLiBDb25zaWRlciB0aGVzZSBhc1xuICogYmVpbmcgbWVtYmVyIG1ldGhvZHMsIGJ1dCB3aXRoIGFuIGltcGxpZWQgb3JkZXJpbmcgd2hpbGUgYmVpbmcgaXNvbGF0ZWQgZnJvbVxuICogZWFjaCBvdGhlci5cbiAqL1xudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW09OX0RPTV9SRUFEWV9RVUVVRUlOR107XG5cbi8qKlxuICogQGNsYXNzIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVuZGVyVG9TdGF0aWNNYXJrdXBcbiAqL1xuZnVuY3Rpb24gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbihyZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cDtcbiAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZChudWxsKTtcbiAgdGhpcy51c2VDcmVhdGVFbGVtZW50ID0gZmFsc2U7XG59XG5cbnZhciBNaXhpbiA9IHtcbiAgLyoqXG4gICAqIEBzZWUgVHJhbnNhY3Rpb25cbiAgICogQGFic3RyYWN0XG4gICAqIEBmaW5hbFxuICAgKiBAcmV0dXJuIHthcnJheX0gRW1wdHkgbGlzdCBvZiBvcGVyYXRpb24gd3JhcCBwcm9jZWR1cmVzLlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBgb25ET01SZWFkeWAgY2FsbGJhY2tzIHdpdGguXG4gICAqL1xuICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFjdE1vdW50UmVhZHk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMsIGFuZCB3aWxsIGludm9rZSB0aGlzIGJlZm9yZSBhbGxvd2luZyB0aGlzXG4gICAqIGluc3RhbmNlIHRvIGJlIHJldXNlZC5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5yZWFjdE1vdW50UmVhZHkpO1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gbnVsbDtcbiAgfVxufTtcblxuYXNzaWduKFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbi5NaXhpbiwgTWl4aW4pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0VXBkYXRlUXVldWVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VNYXAnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKSB7XG4gIFJlYWN0VXBkYXRlcy5lbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xufVxuXG5mdW5jdGlvbiBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UsIGNhbGxlck5hbWUpIHtcbiAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldChwdWJsaWNJbnN0YW5jZSk7XG4gIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBPbmx5IHdhcm4gd2hlbiB3ZSBoYXZlIGEgY2FsbGVyTmFtZS4gT3RoZXJ3aXNlIHdlIHNob3VsZCBiZSBzaWxlbnQuXG4gICAgICAvLyBXZSdyZSBwcm9iYWJseSBjYWxsaW5nIGZyb20gZW5xdWV1ZUNhbGxiYWNrLiBXZSBkb24ndCB3YW50IHRvIHdhcm5cbiAgICAgIC8vIHRoZXJlIGJlY2F1c2Ugd2UgYWxyZWFkeSB3YXJuZWQgZm9yIHRoZSBjb3JyZXNwb25kaW5nIGxpZmVjeWNsZSBtZXRob2QuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY2FsbGVyTmFtZSwgJyVzKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50ZWQgb3IgbW91bnRpbmcgY29tcG9uZW50LiAnICsgJ1RoaXMgdXN1YWxseSBtZWFucyB5b3UgY2FsbGVkICVzKCkgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4gJyArICdUaGlzIGlzIGEgbm8tb3AuIFBsZWFzZSBjaGVjayB0aGUgY29kZSBmb3IgdGhlICVzIGNvbXBvbmVudC4nLCBjYWxsZXJOYW1lLCBjYWxsZXJOYW1lLCBwdWJsaWNJbnN0YW5jZS5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsICclcyguLi4pOiBDYW5ub3QgdXBkYXRlIGR1cmluZyBhbiBleGlzdGluZyBzdGF0ZSB0cmFuc2l0aW9uICcgKyAnKHN1Y2ggYXMgd2l0aGluIGByZW5kZXJgKS4gUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiAnICsgJ29mIHByb3BzIGFuZCBzdGF0ZS4nLCBjYWxsZXJOYW1lKSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBpbnRlcm5hbEluc3RhbmNlO1xufVxuXG4vKipcbiAqIFJlYWN0VXBkYXRlUXVldWUgYWxsb3dzIGZvciBzdGF0ZSB1cGRhdGVzIHRvIGJlIHNjaGVkdWxlZCBpbnRvIGEgbGF0ZXJcbiAqIHJlY29uY2lsaWF0aW9uIHN0ZXAuXG4gKi9cbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0ge1xuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHdlIHdhbnQgdG8gdGVzdC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQGZpbmFsXG4gICAqL1xuICBpc01vdW50ZWQ6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciwgJyVzIGlzIGFjY2Vzc2luZyBpc01vdW50ZWQgaW5zaWRlIGl0cyByZW5kZXIoKSBmdW5jdGlvbi4gJyArICdyZW5kZXIoKSBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZS4gSXQgc2hvdWxkICcgKyAnbmV2ZXIgYWNjZXNzIHNvbWV0aGluZyB0aGF0IHJlcXVpcmVzIHN0YWxlIGRhdGEgZnJvbSB0aGUgcHJldmlvdXMgJyArICdyZW5kZXIsIHN1Y2ggYXMgcmVmcy4gTW92ZSB0aGlzIGxvZ2ljIHRvIGNvbXBvbmVudERpZE1vdW50IGFuZCAnICsgJ2NvbXBvbmVudERpZFVwZGF0ZSBpbnN0ZWFkLicsIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgb3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldChwdWJsaWNJbnN0YW5jZSk7XG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIC8vIER1cmluZyBjb21wb25lbnRXaWxsTW91bnQgYW5kIHJlbmRlciB0aGlzIHdpbGwgc3RpbGwgYmUgbnVsbCBidXQgYWZ0ZXJcbiAgICAgIC8vIHRoYXQgd2lsbCBhbHdheXMgcmVuZGVyIHRvIHNvbWV0aGluZy4gQXQgbGVhc3QgZm9yIG5vdy4gU28gd2UgY2FuIHVzZVxuICAgICAgLy8gdGhpcyBoYWNrLlxuICAgICAgcmV0dXJuICEhaW50ZXJuYWxJbnN0YW5jZS5fcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVucXVldWUgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYWZ0ZXIgYWxsIHRoZSBwZW5kaW5nIHVwZGF0ZXNcbiAgICogaGF2ZSBwcm9jZXNzZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRvIHVzZSBhcyBgdGhpc2AgY29udGV4dC5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVDYWxsYmFjazogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjYWxsYmFjaykge1xuICAgICEodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdlbnF1ZXVlQ2FsbGJhY2soLi4uKTogWW91IGNhbGxlZCBgc2V0UHJvcHNgLCBgcmVwbGFjZVByb3BzYCwgJyArICdgc2V0U3RhdGVgLCBgcmVwbGFjZVN0YXRlYCwgb3IgYGZvcmNlVXBkYXRlYCB3aXRoIGEgY2FsbGJhY2sgdGhhdCAnICsgJ2lzblxcJ3QgY2FsbGFibGUuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlKTtcblxuICAgIC8vIFByZXZpb3VzbHkgd2Ugd291bGQgdGhyb3cgYW4gZXJyb3IgaWYgd2UgZGlkbid0IGhhdmUgYW4gaW50ZXJuYWxcbiAgICAvLyBpbnN0YW5jZS4gU2luY2Ugd2Ugd2FudCB0byBtYWtlIGl0IGEgbm8tb3AgaW5zdGVhZCwgd2UgbWlycm9yIHRoZSBzYW1lXG4gICAgLy8gYmVoYXZpb3Igd2UgaGF2ZSBpbiBvdGhlciBlbnF1ZXVlKiBtZXRob2RzLlxuICAgIC8vIFdlIGFsc28gbmVlZCB0byBpZ25vcmUgY2FsbGJhY2tzIGluIGNvbXBvbmVudFdpbGxNb3VudC4gU2VlXG4gICAgLy8gZW5xdWV1ZVVwZGF0ZXMuXG4gICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcykge1xuICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcyA9IFtjYWxsYmFja107XG4gICAgfVxuICAgIC8vIFRPRE86IFRoZSBjYWxsYmFjayBoZXJlIGlzIGlnbm9yZWQgd2hlbiBzZXRTdGF0ZSBpcyBjYWxsZWQgZnJvbVxuICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudC4gRWl0aGVyIGZpeCBpdCBvciBkaXNhbGxvdyBkb2luZyBzbyBjb21wbGV0ZWx5IGluXG4gICAgLy8gZmF2b3Igb2YgZ2V0SW5pdGlhbFN0YXRlLiBBbHRlcm5hdGl2ZWx5LCB3ZSBjYW4gZGlzYWxsb3dcbiAgICAvLyBjb21wb25lbnRXaWxsTW91bnQgZHVyaW5nIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIGVucXVldWVDYWxsYmFja0ludGVybmFsOiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgY2FsbGJhY2spIHtcbiAgICAhKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZW5xdWV1ZUNhbGxiYWNrKC4uLik6IFlvdSBjYWxsZWQgYHNldFByb3BzYCwgYHJlcGxhY2VQcm9wc2AsICcgKyAnYHNldFN0YXRlYCwgYHJlcGxhY2VTdGF0ZWAsIG9yIGBmb3JjZVVwZGF0ZWAgd2l0aCBhIGNhbGxiYWNrIHRoYXQgJyArICdpc25cXCd0IGNhbGxhYmxlLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcykge1xuICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcyA9IFtjYWxsYmFja107XG4gICAgfVxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZvcmNlcyBhbiB1cGRhdGUuIFRoaXMgc2hvdWxkIG9ubHkgYmUgaW52b2tlZCB3aGVuIGl0IGlzIGtub3duIHdpdGhcbiAgICogY2VydGFpbnR5IHRoYXQgd2UgYXJlICoqbm90KiogaW4gYSBET00gdHJhbnNhY3Rpb24uXG4gICAqXG4gICAqIFlvdSBtYXkgd2FudCB0byBjYWxsIHRoaXMgd2hlbiB5b3Uga25vdyB0aGF0IHNvbWUgZGVlcGVyIGFzcGVjdCBvZiB0aGVcbiAgICogY29tcG9uZW50J3Mgc3RhdGUgaGFzIGNoYW5nZWQgYnV0IGBzZXRTdGF0ZWAgd2FzIG5vdCBjYWxsZWQuXG4gICAqXG4gICAqIFRoaXMgd2lsbCBub3QgaW52b2tlIGBzaG91bGRDb21wb25lbnRVcGRhdGVgLCBidXQgaXQgd2lsbCBpbnZva2VcbiAgICogYGNvbXBvbmVudFdpbGxVcGRhdGVgIGFuZCBgY29tcG9uZW50RGlkVXBkYXRlYC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UpIHtcbiAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSB0cnVlO1xuXG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIG9mIHRoZSBzdGF0ZS4gQWx3YXlzIHVzZSB0aGlzIG9yIGBzZXRTdGF0ZWAgdG8gbXV0YXRlIHN0YXRlLlxuICAgKiBZb3Ugc2hvdWxkIHRyZWF0IGB0aGlzLnN0YXRlYCBhcyBpbW11dGFibGUuXG4gICAqXG4gICAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gICAqIGFjY2Vzc2luZyBgdGhpcy5zdGF0ZWAgYWZ0ZXIgY2FsbGluZyB0aGlzIG1ldGhvZCBtYXkgcmV0dXJuIHRoZSBvbGQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29tcGxldGVTdGF0ZSBOZXh0IHN0YXRlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY29tcGxldGVTdGF0ZSkge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtjb21wbGV0ZVN0YXRlXTtcbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gdHJ1ZTtcblxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlKSB7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UsICdzZXRTdGF0ZScpO1xuXG4gICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHF1ZXVlID0gaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ1N0YXRlUXVldWUgfHwgKGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gW10pO1xuICAgIHF1ZXVlLnB1c2gocGFydGlhbFN0YXRlKTtcblxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHByb3BzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxQcm9wcyBTdWJzZXQgb2YgdGhlIG5leHQgcHJvcHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVNldFByb3BzOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIHBhcnRpYWxQcm9wcykge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAnc2V0UHJvcHMnKTtcbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlU2V0UHJvcHNJbnRlcm5hbChpbnRlcm5hbEluc3RhbmNlLCBwYXJ0aWFsUHJvcHMpO1xuICB9LFxuXG4gIGVucXVldWVTZXRQcm9wc0ludGVybmFsOiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgcGFydGlhbFByb3BzKSB7XG4gICAgdmFyIHRvcExldmVsV3JhcHBlciA9IGludGVybmFsSW5zdGFuY2UuX3RvcExldmVsV3JhcHBlcjtcbiAgICAhdG9wTGV2ZWxXcmFwcGVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3NldFByb3BzKC4uLik6IFlvdSBjYWxsZWQgYHNldFByb3BzYCBvbiBhICcgKyAnY29tcG9uZW50IHdpdGggYSBwYXJlbnQuIFRoaXMgaXMgYW4gYW50aS1wYXR0ZXJuIHNpbmNlIHByb3BzIHdpbGwgJyArICdnZXQgcmVhY3RpdmVseSB1cGRhdGVkIHdoZW4gcmVuZGVyZWQuIEluc3RlYWQsIGNoYW5nZSB0aGUgb3duZXJcXCdzICcgKyAnYHJlbmRlcmAgbWV0aG9kIHRvIHBhc3MgdGhlIGNvcnJlY3QgdmFsdWUgYXMgcHJvcHMgdG8gdGhlIGNvbXBvbmVudCAnICsgJ3doZXJlIGl0IGlzIGNyZWF0ZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gTWVyZ2Ugd2l0aCB0aGUgcGVuZGluZyBlbGVtZW50IGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIHdpdGggZXhpc3RpbmdcbiAgICAvLyBlbGVtZW50IHByb3BzLlxuICAgIHZhciB3cmFwRWxlbWVudCA9IHRvcExldmVsV3JhcHBlci5fcGVuZGluZ0VsZW1lbnQgfHwgdG9wTGV2ZWxXcmFwcGVyLl9jdXJyZW50RWxlbWVudDtcbiAgICB2YXIgZWxlbWVudCA9IHdyYXBFbGVtZW50LnByb3BzO1xuICAgIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgZWxlbWVudC5wcm9wcywgcGFydGlhbFByb3BzKTtcbiAgICB0b3BMZXZlbFdyYXBwZXIuX3BlbmRpbmdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzKHdyYXBFbGVtZW50LCBSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMoZWxlbWVudCwgcHJvcHMpKTtcblxuICAgIGVucXVldWVVcGRhdGUodG9wTGV2ZWxXcmFwcGVyKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIG9mIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBOZXcgcHJvcHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VQcm9wczogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwcm9wcykge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVByb3BzJyk7XG4gICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZVJlcGxhY2VQcm9wc0ludGVybmFsKGludGVybmFsSW5zdGFuY2UsIHByb3BzKTtcbiAgfSxcblxuICBlbnF1ZXVlUmVwbGFjZVByb3BzSW50ZXJuYWw6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCBwcm9wcykge1xuICAgIHZhciB0b3BMZXZlbFdyYXBwZXIgPSBpbnRlcm5hbEluc3RhbmNlLl90b3BMZXZlbFdyYXBwZXI7XG4gICAgIXRvcExldmVsV3JhcHBlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdyZXBsYWNlUHJvcHMoLi4uKTogWW91IGNhbGxlZCBgcmVwbGFjZVByb3BzYCBvbiBhICcgKyAnY29tcG9uZW50IHdpdGggYSBwYXJlbnQuIFRoaXMgaXMgYW4gYW50aS1wYXR0ZXJuIHNpbmNlIHByb3BzIHdpbGwgJyArICdnZXQgcmVhY3RpdmVseSB1cGRhdGVkIHdoZW4gcmVuZGVyZWQuIEluc3RlYWQsIGNoYW5nZSB0aGUgb3duZXJcXCdzICcgKyAnYHJlbmRlcmAgbWV0aG9kIHRvIHBhc3MgdGhlIGNvcnJlY3QgdmFsdWUgYXMgcHJvcHMgdG8gdGhlIGNvbXBvbmVudCAnICsgJ3doZXJlIGl0IGlzIGNyZWF0ZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gTWVyZ2Ugd2l0aCB0aGUgcGVuZGluZyBlbGVtZW50IGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIHdpdGggZXhpc3RpbmdcbiAgICAvLyBlbGVtZW50IHByb3BzLlxuICAgIHZhciB3cmFwRWxlbWVudCA9IHRvcExldmVsV3JhcHBlci5fcGVuZGluZ0VsZW1lbnQgfHwgdG9wTGV2ZWxXcmFwcGVyLl9jdXJyZW50RWxlbWVudDtcbiAgICB2YXIgZWxlbWVudCA9IHdyYXBFbGVtZW50LnByb3BzO1xuICAgIHRvcExldmVsV3JhcHBlci5fcGVuZGluZ0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMod3JhcEVsZW1lbnQsIFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VQcm9wcyhlbGVtZW50LCBwcm9wcykpO1xuXG4gICAgZW5xdWV1ZVVwZGF0ZSh0b3BMZXZlbFdyYXBwZXIpO1xuICB9LFxuXG4gIGVucXVldWVFbGVtZW50SW50ZXJuYWw6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCBuZXdFbGVtZW50KSB7XG4gICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0VsZW1lbnQgPSBuZXdFbGVtZW50O1xuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFVwZGF0ZVF1ZXVlOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFVwZGF0ZXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZSgnLi9DYWxsYmFja1F1ZXVlJyk7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9UcmFuc2FjdGlvbicpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBkaXJ0eUNvbXBvbmVudHMgPSBbXTtcbnZhciBhc2FwQ2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG52YXIgYXNhcEVucXVldWVkID0gZmFsc2U7XG5cbnZhciBiYXRjaGluZ1N0cmF0ZWd5ID0gbnVsbDtcblxuZnVuY3Rpb24gZW5zdXJlSW5qZWN0ZWQoKSB7XG4gICEoUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gJiYgYmF0Y2hpbmdTdHJhdGVneSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IGluamVjdCBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzcyBhbmQgYmF0Y2hpbmcgJyArICdzdHJhdGVneScpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbn1cblxudmFyIE5FU1RFRF9VUERBVEVTID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggPSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCAhPT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gQWRkaXRpb25hbCB1cGRhdGVzIHdlcmUgZW5xdWV1ZWQgYnkgY29tcG9uZW50RGlkVXBkYXRlIGhhbmRsZXJzIG9yXG4gICAgICAvLyBzaW1pbGFyOyBiZWZvcmUgb3VyIG93biBVUERBVEVfUVVFVUVJTkcgd3JhcHBlciBjbG9zZXMsIHdlIHdhbnQgdG8gcnVuXG4gICAgICAvLyB0aGVzZSBuZXcgdXBkYXRlcyBzbyB0aGF0IGlmIEEncyBjb21wb25lbnREaWRVcGRhdGUgY2FsbHMgc2V0U3RhdGUgb25cbiAgICAgIC8vIEIsIEIgd2lsbCB1cGRhdGUgYmVmb3JlIHRoZSBjYWxsYmFjayBBJ3MgdXBkYXRlciBwcm92aWRlZCB3aGVuIGNhbGxpbmdcbiAgICAgIC8vIHNldFN0YXRlLlxuICAgICAgZGlydHlDb21wb25lbnRzLnNwbGljZSgwLCB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCk7XG4gICAgICBmbHVzaEJhdGNoZWRVcGRhdGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpcnR5Q29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfVxufTtcblxudmFyIFVQREFURV9RVUVVRUlORyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZS5yZXNldCgpO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZS5ub3RpZnlBbGwoKTtcbiAgfVxufTtcblxudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW05FU1RFRF9VUERBVEVTLCBVUERBVEVfUVVFVUVJTkddO1xuXG5mdW5jdGlvbiBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uKCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcbiAgdGhpcy5jYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbiAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZCggLyogZm9yY2VIVE1MICovZmFsc2UpO1xufVxuXG5hc3NpZ24oUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLk1peGluLCB7XG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH0sXG5cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5jYWxsYmFja1F1ZXVlKTtcbiAgICB0aGlzLmNhbGxiYWNrUXVldWUgPSBudWxsO1xuICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnJlbGVhc2UodGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbik7XG4gICAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiA9IG51bGw7XG4gIH0sXG5cbiAgcGVyZm9ybTogZnVuY3Rpb24gKG1ldGhvZCwgc2NvcGUsIGEpIHtcbiAgICAvLyBFc3NlbnRpYWxseSBjYWxscyBgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbi5wZXJmb3JtKG1ldGhvZCwgc2NvcGUsIGEpYFxuICAgIC8vIHdpdGggdGhpcyB0cmFuc2FjdGlvbidzIHdyYXBwZXJzIGFyb3VuZCBpdC5cbiAgICByZXR1cm4gVHJhbnNhY3Rpb24uTWl4aW4ucGVyZm9ybS5jYWxsKHRoaXMsIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24ucGVyZm9ybSwgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiwgbWV0aG9kLCBzY29wZSwgYSk7XG4gIH1cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbik7XG5cbmZ1bmN0aW9uIGJhdGNoZWRVcGRhdGVzKGNhbGxiYWNrLCBhLCBiLCBjLCBkLCBlKSB7XG4gIGVuc3VyZUluamVjdGVkKCk7XG4gIGJhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMoY2FsbGJhY2ssIGEsIGIsIGMsIGQsIGUpO1xufVxuXG4vKipcbiAqIEFycmF5IGNvbXBhcmF0b3IgZm9yIFJlYWN0Q29tcG9uZW50cyBieSBtb3VudCBvcmRlcmluZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjMSBmaXJzdCBjb21wb25lbnQgeW91J3JlIGNvbXBhcmluZ1xuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gYzIgc2Vjb25kIGNvbXBvbmVudCB5b3UncmUgY29tcGFyaW5nXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFJldHVybiB2YWx1ZSB1c2FibGUgYnkgQXJyYXkucHJvdG90eXBlLnNvcnQoKS5cbiAqL1xuZnVuY3Rpb24gbW91bnRPcmRlckNvbXBhcmF0b3IoYzEsIGMyKSB7XG4gIHJldHVybiBjMS5fbW91bnRPcmRlciAtIGMyLl9tb3VudE9yZGVyO1xufVxuXG5mdW5jdGlvbiBydW5CYXRjaGVkVXBkYXRlcyh0cmFuc2FjdGlvbikge1xuICB2YXIgbGVuID0gdHJhbnNhY3Rpb24uZGlydHlDb21wb25lbnRzTGVuZ3RoO1xuICAhKGxlbiA9PT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgZmx1c2ggdHJhbnNhY3Rpb25cXCdzIHN0b3JlZCBkaXJ0eS1jb21wb25lbnRzIGxlbmd0aCAoJXMpIHRvICcgKyAnbWF0Y2ggZGlydHktY29tcG9uZW50cyBhcnJheSBsZW5ndGggKCVzKS4nLCBsZW4sIGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAvLyBTaW5jZSByZWNvbmNpbGluZyBhIGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIG93bmVyIGhpZXJhcmNoeSB1c3VhbGx5IChub3RcbiAgLy8gYWx3YXlzIC0tIHNlZSBzaG91bGRDb21wb25lbnRVcGRhdGUoKSkgd2lsbCByZWNvbmNpbGUgY2hpbGRyZW4sIHJlY29uY2lsZVxuICAvLyB0aGVtIGJlZm9yZSB0aGVpciBjaGlsZHJlbiBieSBzb3J0aW5nIHRoZSBhcnJheS5cbiAgZGlydHlDb21wb25lbnRzLnNvcnQobW91bnRPcmRlckNvbXBhcmF0b3IpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAvLyBJZiBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYmVmb3JlIHBlbmRpbmcgY2hhbmdlcyBhcHBseSwgaXQgd2lsbCBzdGlsbFxuICAgIC8vIGJlIGhlcmUsIGJ1dCB3ZSBhc3N1bWUgdGhhdCBpdCBoYXMgY2xlYXJlZCBpdHMgX3BlbmRpbmdDYWxsYmFja3MgYW5kXG4gICAgLy8gdGhhdCBwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkgaXMgYSBub29wLlxuICAgIHZhciBjb21wb25lbnQgPSBkaXJ0eUNvbXBvbmVudHNbaV07XG5cbiAgICAvLyBJZiBwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkgaGFwcGVucyB0byBlbnF1ZXVlIGFueSBuZXcgdXBkYXRlcywgd2VcbiAgICAvLyBzaG91bGRuJ3QgZXhlY3V0ZSB0aGUgY2FsbGJhY2tzIHVudGlsIHRoZSBuZXh0IHJlbmRlciBoYXBwZW5zLCBzb1xuICAgIC8vIHN0YXNoIHRoZSBjYWxsYmFja3MgZmlyc3RcbiAgICB2YXIgY2FsbGJhY2tzID0gY29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzO1xuICAgIGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcyA9IG51bGw7XG5cbiAgICBSZWFjdFJlY29uY2lsZXIucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KGNvbXBvbmVudCwgdHJhbnNhY3Rpb24ucmVjb25jaWxlVHJhbnNhY3Rpb24pO1xuXG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjYWxsYmFja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uY2FsbGJhY2tRdWV1ZS5lbnF1ZXVlKGNhbGxiYWNrc1tqXSwgY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZmx1c2hCYXRjaGVkVXBkYXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbidzIHdyYXBwZXJzIHdpbGwgY2xlYXIgdGhlIGRpcnR5Q29tcG9uZW50c1xuICAvLyBhcnJheSBhbmQgcGVyZm9ybSBhbnkgdXBkYXRlcyBlbnF1ZXVlZCBieSBtb3VudC1yZWFkeSBoYW5kbGVycyAoaS5lLixcbiAgLy8gY29tcG9uZW50RGlkVXBkYXRlKSBidXQgd2UgbmVlZCB0byBjaGVjayBoZXJlIHRvbyBpbiBvcmRlciB0byBjYXRjaFxuICAvLyB1cGRhdGVzIGVucXVldWVkIGJ5IHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgYXNhcCBjYWxscy5cbiAgd2hpbGUgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGggfHwgYXNhcEVucXVldWVkKSB7XG4gICAgaWYgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0cmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCk7XG4gICAgICB0cmFuc2FjdGlvbi5wZXJmb3JtKHJ1bkJhdGNoZWRVcGRhdGVzLCBudWxsLCB0cmFuc2FjdGlvbik7XG4gICAgICBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICAgIH1cblxuICAgIGlmIChhc2FwRW5xdWV1ZWQpIHtcbiAgICAgIGFzYXBFbnF1ZXVlZCA9IGZhbHNlO1xuICAgICAgdmFyIHF1ZXVlID0gYXNhcENhbGxiYWNrUXVldWU7XG4gICAgICBhc2FwQ2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG4gICAgICBxdWV1ZS5ub3RpZnlBbGwoKTtcbiAgICAgIENhbGxiYWNrUXVldWUucmVsZWFzZShxdWV1ZSk7XG4gICAgfVxuICB9XG59O1xuZmx1c2hCYXRjaGVkVXBkYXRlcyA9IFJlYWN0UGVyZi5tZWFzdXJlKCdSZWFjdFVwZGF0ZXMnLCAnZmx1c2hCYXRjaGVkVXBkYXRlcycsIGZsdXNoQmF0Y2hlZFVwZGF0ZXMpO1xuXG4vKipcbiAqIE1hcmsgYSBjb21wb25lbnQgYXMgbmVlZGluZyBhIHJlcmVuZGVyLCBhZGRpbmcgYW4gb3B0aW9uYWwgY2FsbGJhY2sgdG8gYVxuICogbGlzdCBvZiBmdW5jdGlvbnMgd2hpY2ggd2lsbCBiZSBleGVjdXRlZCBvbmNlIHRoZSByZXJlbmRlciBvY2N1cnMuXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoY29tcG9uZW50KSB7XG4gIGVuc3VyZUluamVjdGVkKCk7XG5cbiAgLy8gVmFyaW91cyBwYXJ0cyBvZiBvdXIgY29kZSAoc3VjaCBhcyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdzXG4gIC8vIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQpIGFzc3VtZSB0aGF0IGNhbGxzIHRvIHJlbmRlciBhcmVuJ3QgbmVzdGVkO1xuICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuIChUaGlzIGlzIGNhbGxlZCBieSBlYWNoIHRvcC1sZXZlbCB1cGRhdGVcbiAgLy8gZnVuY3Rpb24sIGxpa2Ugc2V0UHJvcHMsIHNldFN0YXRlLCBmb3JjZVVwZGF0ZSwgZXRjLjsgY3JlYXRpb24gYW5kXG4gIC8vIGRlc3RydWN0aW9uIG9mIHRvcC1sZXZlbCBjb21wb25lbnRzIGlzIGd1YXJkZWQgaW4gUmVhY3RNb3VudC4pXG5cbiAgaWYgKCFiYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyhlbnF1ZXVlVXBkYXRlLCBjb21wb25lbnQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRpcnR5Q29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG59XG5cbi8qKlxuICogRW5xdWV1ZSBhIGNhbGxiYWNrIHRvIGJlIHJ1biBhdCB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGJhdGNoaW5nIGN5Y2xlLiBUaHJvd3NcbiAqIGlmIG5vIHVwZGF0ZXMgYXJlIGN1cnJlbnRseSBiZWluZyBwZXJmb3JtZWQuXG4gKi9cbmZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgIWJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzLmFzYXA6IENhblxcJ3QgZW5xdWV1ZSBhbiBhc2FwIGNhbGxiYWNrIGluIGEgY29udGV4dCB3aGVyZScgKyAndXBkYXRlcyBhcmUgbm90IGJlaW5nIGJhdGNoZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICBhc2FwQ2FsbGJhY2tRdWV1ZS5lbnF1ZXVlKGNhbGxiYWNrLCBjb250ZXh0KTtcbiAgYXNhcEVucXVldWVkID0gdHJ1ZTtcbn1cblxudmFyIFJlYWN0VXBkYXRlc0luamVjdGlvbiA9IHtcbiAgaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb246IGZ1bmN0aW9uIChSZWNvbmNpbGVUcmFuc2FjdGlvbikge1xuICAgICFSZWNvbmNpbGVUcmFuc2FjdGlvbiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzcycpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiA9IFJlY29uY2lsZVRyYW5zYWN0aW9uO1xuICB9LFxuXG4gIGluamVjdEJhdGNoaW5nU3RyYXRlZ3k6IGZ1bmN0aW9uIChfYmF0Y2hpbmdTdHJhdGVneSkge1xuICAgICFfYmF0Y2hpbmdTdHJhdGVneSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIGJhdGNoaW5nIHN0cmF0ZWd5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICEodHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIGJhdGNoZWRVcGRhdGVzKCkgZnVuY3Rpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgISh0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPT09ICdib29sZWFuJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYW4gaXNCYXRjaGluZ1VwZGF0ZXMgYm9vbGVhbiBhdHRyaWJ1dGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgYmF0Y2hpbmdTdHJhdGVneSA9IF9iYXRjaGluZ1N0cmF0ZWd5O1xuICB9XG59O1xuXG52YXIgUmVhY3RVcGRhdGVzID0ge1xuICAvKipcbiAgICogUmVhY3QgcmVmZXJlbmNlcyBgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbmAgdXNpbmcgdGhpcyBwcm9wZXJ0eSBpbiBvcmRlclxuICAgKiB0byBhbGxvdyBkZXBlbmRlbmN5IGluamVjdGlvbi5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uOiBudWxsLFxuXG4gIGJhdGNoZWRVcGRhdGVzOiBiYXRjaGVkVXBkYXRlcyxcbiAgZW5xdWV1ZVVwZGF0ZTogZW5xdWV1ZVVwZGF0ZSxcbiAgZmx1c2hCYXRjaGVkVXBkYXRlczogZmx1c2hCYXRjaGVkVXBkYXRlcyxcbiAgaW5qZWN0aW9uOiBSZWFjdFVwZGF0ZXNJbmplY3Rpb24sXG4gIGFzYXA6IGFzYXBcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RVcGRhdGVzOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFZlcnNpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gJzAuMTQuOCc7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFNWR0RPTVByb3BlcnR5Q29uZmlnXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG5cbnZhciBNVVNUX1VTRV9BVFRSSUJVVEUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uTVVTVF9VU0VfQVRUUklCVVRFO1xuXG52YXIgTlMgPSB7XG4gIHhsaW5rOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsXG4gIHhtbDogJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZSdcbn07XG5cbnZhciBTVkdET01Qcm9wZXJ0eUNvbmZpZyA9IHtcbiAgUHJvcGVydGllczoge1xuICAgIGNsaXBQYXRoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgY3g6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBjeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBkeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZmlsbDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZpbGxPcGFjaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9udEZhbWlseTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvbnRTaXplOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZng6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGdyYWRpZW50VHJhbnNmb3JtOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZ3JhZGllbnRVbml0czogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1hcmtlckVuZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1hcmtlck1pZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1hcmtlclN0YXJ0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgb2Zmc2V0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgb3BhY2l0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHBhdHRlcm5Db250ZW50VW5pdHM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBwYXR0ZXJuVW5pdHM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBwb2ludHM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHJ4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcnk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzcHJlYWRNZXRob2Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdG9wQ29sb3I6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdG9wT3BhY2l0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZURhc2hhcnJheTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZUxpbmVjYXA6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2VPcGFjaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlV2lkdGg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB0ZXh0QW5jaG9yOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgdHJhbnNmb3JtOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgdmVyc2lvbjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHZpZXdCb3g6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4MTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHgyOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHhsaW5rQWN0dWF0ZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHhsaW5rQXJjcm9sZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHhsaW5rSHJlZjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHhsaW5rUm9sZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHhsaW5rU2hvdzogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHhsaW5rVGl0bGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4bGlua1R5cGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4bWxCYXNlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeG1sTGFuZzogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHhtbFNwYWNlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeTE6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB5MjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHk6IE1VU1RfVVNFX0FUVFJJQlVURVxuICB9LFxuICBET01BdHRyaWJ1dGVOYW1lc3BhY2VzOiB7XG4gICAgeGxpbmtBY3R1YXRlOiBOUy54bGluayxcbiAgICB4bGlua0FyY3JvbGU6IE5TLnhsaW5rLFxuICAgIHhsaW5rSHJlZjogTlMueGxpbmssXG4gICAgeGxpbmtSb2xlOiBOUy54bGluayxcbiAgICB4bGlua1Nob3c6IE5TLnhsaW5rLFxuICAgIHhsaW5rVGl0bGU6IE5TLnhsaW5rLFxuICAgIHhsaW5rVHlwZTogTlMueGxpbmssXG4gICAgeG1sQmFzZTogTlMueG1sLFxuICAgIHhtbExhbmc6IE5TLnhtbCxcbiAgICB4bWxTcGFjZTogTlMueG1sXG4gIH0sXG4gIERPTUF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgY2xpcFBhdGg6ICdjbGlwLXBhdGgnLFxuICAgIGZpbGxPcGFjaXR5OiAnZmlsbC1vcGFjaXR5JyxcbiAgICBmb250RmFtaWx5OiAnZm9udC1mYW1pbHknLFxuICAgIGZvbnRTaXplOiAnZm9udC1zaXplJyxcbiAgICBncmFkaWVudFRyYW5zZm9ybTogJ2dyYWRpZW50VHJhbnNmb3JtJyxcbiAgICBncmFkaWVudFVuaXRzOiAnZ3JhZGllbnRVbml0cycsXG4gICAgbWFya2VyRW5kOiAnbWFya2VyLWVuZCcsXG4gICAgbWFya2VyTWlkOiAnbWFya2VyLW1pZCcsXG4gICAgbWFya2VyU3RhcnQ6ICdtYXJrZXItc3RhcnQnLFxuICAgIHBhdHRlcm5Db250ZW50VW5pdHM6ICdwYXR0ZXJuQ29udGVudFVuaXRzJyxcbiAgICBwYXR0ZXJuVW5pdHM6ICdwYXR0ZXJuVW5pdHMnLFxuICAgIHByZXNlcnZlQXNwZWN0UmF0aW86ICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJyxcbiAgICBzcHJlYWRNZXRob2Q6ICdzcHJlYWRNZXRob2QnLFxuICAgIHN0b3BDb2xvcjogJ3N0b3AtY29sb3InLFxuICAgIHN0b3BPcGFjaXR5OiAnc3RvcC1vcGFjaXR5JyxcbiAgICBzdHJva2VEYXNoYXJyYXk6ICdzdHJva2UtZGFzaGFycmF5JyxcbiAgICBzdHJva2VMaW5lY2FwOiAnc3Ryb2tlLWxpbmVjYXAnLFxuICAgIHN0cm9rZU9wYWNpdHk6ICdzdHJva2Utb3BhY2l0eScsXG4gICAgc3Ryb2tlV2lkdGg6ICdzdHJva2Utd2lkdGgnLFxuICAgIHRleHRBbmNob3I6ICd0ZXh0LWFuY2hvcicsXG4gICAgdmlld0JveDogJ3ZpZXdCb3gnLFxuICAgIHhsaW5rQWN0dWF0ZTogJ3hsaW5rOmFjdHVhdGUnLFxuICAgIHhsaW5rQXJjcm9sZTogJ3hsaW5rOmFyY3JvbGUnLFxuICAgIHhsaW5rSHJlZjogJ3hsaW5rOmhyZWYnLFxuICAgIHhsaW5rUm9sZTogJ3hsaW5rOnJvbGUnLFxuICAgIHhsaW5rU2hvdzogJ3hsaW5rOnNob3cnLFxuICAgIHhsaW5rVGl0bGU6ICd4bGluazp0aXRsZScsXG4gICAgeGxpbmtUeXBlOiAneGxpbms6dHlwZScsXG4gICAgeG1sQmFzZTogJ3htbDpiYXNlJyxcbiAgICB4bWxMYW5nOiAneG1sOmxhbmcnLFxuICAgIHhtbFNwYWNlOiAneG1sOnNwYWNlJ1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNWR0RPTVByb3BlcnR5Q29uZmlnOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTZWxlY3RFdmVudFBsdWdpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZSgnLi9FdmVudENvbnN0YW50cycpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCcuL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnB1dFNlbGVjdGlvbicpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG52YXIgZ2V0QWN0aXZlRWxlbWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQnKTtcbnZhciBpc1RleHRJbnB1dEVsZW1lbnQgPSByZXF1aXJlKCcuL2lzVGV4dElucHV0RWxlbWVudCcpO1xudmFyIGtleU9mID0gcmVxdWlyZSgnZmJqcy9saWIva2V5T2YnKTtcbnZhciBzaGFsbG93RXF1YWwgPSByZXF1aXJlKCdmYmpzL2xpYi9zaGFsbG93RXF1YWwnKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG52YXIgc2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSA8PSAxMTtcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIHNlbGVjdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uU2VsZWN0OiBudWxsIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25TZWxlY3RDYXB0dXJlOiBudWxsIH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFt0b3BMZXZlbFR5cGVzLnRvcEJsdXIsIHRvcExldmVsVHlwZXMudG9wQ29udGV4dE1lbnUsIHRvcExldmVsVHlwZXMudG9wRm9jdXMsIHRvcExldmVsVHlwZXMudG9wS2V5RG93biwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd24sIHRvcExldmVsVHlwZXMudG9wTW91c2VVcCwgdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2VdXG4gIH1cbn07XG5cbnZhciBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xudmFyIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xudmFyIG1vdXNlRG93biA9IGZhbHNlO1xuXG4vLyBUcmFjayB3aGV0aGVyIGEgbGlzdGVuZXIgZXhpc3RzIGZvciB0aGlzIHBsdWdpbi4gSWYgbm9uZSBleGlzdCwgd2UgZG9cbi8vIG5vdCBleHRyYWN0IGV2ZW50cy5cbnZhciBoYXNMaXN0ZW5lciA9IGZhbHNlO1xudmFyIE9OX1NFTEVDVF9LRVkgPSBrZXlPZih7IG9uU2VsZWN0OiBudWxsIH0pO1xuXG4vKipcbiAqIEdldCBhbiBvYmplY3Qgd2hpY2ggaXMgYSB1bmlxdWUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGN1cnJlbnQgc2VsZWN0aW9uLlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBub3QgYmUgY29uc2lzdGVudCBhY3Jvc3Mgbm9kZXMgb3IgYnJvd3NlcnMsIGJ1dFxuICogdHdvIGlkZW50aWNhbCBzZWxlY3Rpb25zIG9uIHRoZSBzYW1lIG5vZGUgd2lsbCByZXR1cm4gaWRlbnRpY2FsIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbihub2RlKSB7XG4gIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIG5vZGUgJiYgUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMobm9kZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IG5vZGUuc2VsZWN0aW9uU3RhcnQsXG4gICAgICBlbmQ6IG5vZGUuc2VsZWN0aW9uRW5kXG4gICAgfTtcbiAgfSBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAgYW5jaG9yTm9kZTogc2VsZWN0aW9uLmFuY2hvck5vZGUsXG4gICAgICBhbmNob3JPZmZzZXQ6IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgICBmb2N1c05vZGU6IHNlbGVjdGlvbi5mb2N1c05vZGUsXG4gICAgICBmb2N1c09mZnNldDogc2VsZWN0aW9uLmZvY3VzT2Zmc2V0XG4gICAgfTtcbiAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHtcbiAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICByZXR1cm4ge1xuICAgICAgcGFyZW50RWxlbWVudDogcmFuZ2UucGFyZW50RWxlbWVudCgpLFxuICAgICAgdGV4dDogcmFuZ2UudGV4dCxcbiAgICAgIHRvcDogcmFuZ2UuYm91bmRpbmdUb3AsXG4gICAgICBsZWZ0OiByYW5nZS5ib3VuZGluZ0xlZnRcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogUG9sbCBzZWxlY3Rpb24gdG8gc2VlIHdoZXRoZXIgaXQncyBjaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7P1N5bnRoZXRpY0V2ZW50fVxuICovXG5mdW5jdGlvbiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgLy8gRW5zdXJlIHdlIGhhdmUgdGhlIHJpZ2h0IGVsZW1lbnQsIGFuZCB0aGF0IHRoZSB1c2VyIGlzIG5vdCBkcmFnZ2luZyBhXG4gIC8vIHNlbGVjdGlvbiAodGhpcyBtYXRjaGVzIG5hdGl2ZSBgc2VsZWN0YCBldmVudCBiZWhhdmlvcikuIEluIEhUTUw1LCBzZWxlY3RcbiAgLy8gZmlyZXMgb25seSBvbiBpbnB1dCBhbmQgdGV4dGFyZWEgdGh1cyBpZiB0aGVyZSdzIG5vIGZvY3VzZWQgZWxlbWVudCB3ZVxuICAvLyB3b24ndCBkaXNwYXRjaC5cbiAgaWYgKG1vdXNlRG93biB8fCBhY3RpdmVFbGVtZW50ID09IG51bGwgfHwgYWN0aXZlRWxlbWVudCAhPT0gZ2V0QWN0aXZlRWxlbWVudCgpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBPbmx5IGZpcmUgd2hlbiBzZWxlY3Rpb24gaGFzIGFjdHVhbGx5IGNoYW5nZWQuXG4gIHZhciBjdXJyZW50U2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uKGFjdGl2ZUVsZW1lbnQpO1xuICBpZiAoIWxhc3RTZWxlY3Rpb24gfHwgIXNoYWxsb3dFcXVhbChsYXN0U2VsZWN0aW9uLCBjdXJyZW50U2VsZWN0aW9uKSkge1xuICAgIGxhc3RTZWxlY3Rpb24gPSBjdXJyZW50U2VsZWN0aW9uO1xuXG4gICAgdmFyIHN5bnRoZXRpY0V2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMuc2VsZWN0LCBhY3RpdmVFbGVtZW50SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgICBzeW50aGV0aWNFdmVudC50eXBlID0gJ3NlbGVjdCc7XG4gICAgc3ludGhldGljRXZlbnQudGFyZ2V0ID0gYWN0aXZlRWxlbWVudDtcblxuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhzeW50aGV0aWNFdmVudCk7XG5cbiAgICByZXR1cm4gc3ludGhldGljRXZlbnQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBUaGlzIHBsdWdpbiBjcmVhdGVzIGFuIGBvblNlbGVjdGAgZXZlbnQgdGhhdCBub3JtYWxpemVzIHNlbGVjdCBldmVudHNcbiAqIGFjcm9zcyBmb3JtIGVsZW1lbnRzLlxuICpcbiAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG4gKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG4gKiAtIHRleHRhcmVhXG4gKiAtIGNvbnRlbnRFZGl0YWJsZVxuICpcbiAqIFRoaXMgZGlmZmVycyBmcm9tIG5hdGl2ZSBicm93c2VyIGltcGxlbWVudGF0aW9ucyBpbiB0aGUgZm9sbG93aW5nIHdheXM6XG4gKiAtIEZpcmVzIG9uIGNvbnRlbnRFZGl0YWJsZSBmaWVsZHMgYXMgd2VsbCBhcyBpbnB1dHMuXG4gKiAtIEZpcmVzIGZvciBjb2xsYXBzZWQgc2VsZWN0aW9uLlxuICogLSBGaXJlcyBhZnRlciB1c2VyIGlucHV0LlxuICovXG52YXIgU2VsZWN0RXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgaWYgKCFoYXNMaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIC8vIFRyYWNrIHRoZSBpbnB1dCBub2RlIHRoYXQgaGFzIGZvY3VzLlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzOlxuICAgICAgICBpZiAoaXNUZXh0SW5wdXRFbGVtZW50KHRvcExldmVsVGFyZ2V0KSB8fCB0b3BMZXZlbFRhcmdldC5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJykge1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnQgPSB0b3BMZXZlbFRhcmdldDtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50SUQgPSB0b3BMZXZlbFRhcmdldElEO1xuICAgICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICAgIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgICBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xuICAgICAgICBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIC8vIERvbid0IGZpcmUgdGhlIGV2ZW50IHdoaWxlIHRoZSB1c2VyIGlzIGRyYWdnaW5nLiBUaGlzIG1hdGNoZXMgdGhlXG4gICAgICAvLyBzZW1hbnRpY3Mgb2YgdGhlIG5hdGl2ZSBzZWxlY3QgZXZlbnQuXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duOlxuICAgICAgICBtb3VzZURvd24gPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb250ZXh0TWVudTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwOlxuICAgICAgICBtb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgICAgIC8vIENocm9tZSBhbmQgSUUgZmlyZSBub24tc3RhbmRhcmQgZXZlbnQgd2hlbiBzZWxlY3Rpb24gaXMgY2hhbmdlZCAoYW5kXG4gICAgICAvLyBzb21ldGltZXMgd2hlbiBpdCBoYXNuJ3QpLiBJRSdzIGV2ZW50IGZpcmVzIG91dCBvZiBvcmRlciB3aXRoIHJlc3BlY3RcbiAgICAgIC8vIHRvIGtleSBhbmQgaW5wdXQgZXZlbnRzIG9uIGRlbGV0aW9uLCBzbyB3ZSBkaXNjYXJkIGl0LlxuICAgICAgLy9cbiAgICAgIC8vIEZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IHNlbGVjdGlvbmNoYW5nZSwgc28gY2hlY2sgc2VsZWN0aW9uIHN0YXR1c1xuICAgICAgLy8gYWZ0ZXIgZWFjaCBrZXkgZW50cnkuIFRoZSBzZWxlY3Rpb24gY2hhbmdlcyBhZnRlciBrZXlkb3duIGFuZCBiZWZvcmVcbiAgICAgIC8vIGtleXVwLCBidXQgd2UgY2hlY2sgb24ga2V5ZG93biBhcyB3ZWxsIGluIHRoZSBjYXNlIG9mIGhvbGRpbmcgZG93biBhXG4gICAgICAvLyBrZXksIHdoZW4gbXVsdGlwbGUga2V5ZG93biBldmVudHMgYXJlIGZpcmVkIGJ1dCBvbmx5IG9uZSBrZXl1cCBpcy5cbiAgICAgIC8vIFRoaXMgaXMgYWxzbyBvdXIgYXBwcm9hY2ggZm9yIElFIGhhbmRsaW5nLCBmb3IgdGhlIHJlYXNvbiBhYm92ZS5cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2U6XG4gICAgICAgIGlmIChza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd246XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5VXA6XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIGRpZFB1dExpc3RlbmVyOiBmdW5jdGlvbiAoaWQsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgPT09IE9OX1NFTEVDVF9LRVkpIHtcbiAgICAgIGhhc0xpc3RlbmVyID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0RXZlbnRQbHVnaW47IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFNlcnZlclJlYWN0Um9vdEluZGV4XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaXplIG9mIHRoZSByZWFjdFJvb3QgSUQgc3BhY2UuIFdlIGdlbmVyYXRlIHJhbmRvbSBudW1iZXJzIGZvciBSZWFjdCByb290XG4gKiBJRHMgYW5kIGlmIHRoZXJlJ3MgYSBjb2xsaXNpb24gdGhlIGV2ZW50cyBhbmQgRE9NIHVwZGF0ZSBzeXN0ZW0gd2lsbFxuICogZ2V0IGNvbmZ1c2VkLiBJbiB0aGUgZnV0dXJlIHdlIG5lZWQgYSB3YXkgdG8gZ2VuZXJhdGUgR1VJRHMgYnV0IGZvclxuICogbm93IHRoaXMgd2lsbCB3b3JrIG9uIGEgc21hbGxlciBzY2FsZS5cbiAqL1xudmFyIEdMT0JBTF9NT1VOVF9QT0lOVF9NQVggPSBNYXRoLnBvdygyLCA1Myk7XG5cbnZhciBTZXJ2ZXJSZWFjdFJvb3RJbmRleCA9IHtcbiAgY3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiBHTE9CQUxfTU9VTlRfUE9JTlRfTUFYKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXJ2ZXJSZWFjdFJvb3RJbmRleDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU2ltcGxlRXZlbnRQbHVnaW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbnZhciBFdmVudExpc3RlbmVyID0gcmVxdWlyZSgnZmJqcy9saWIvRXZlbnRMaXN0ZW5lcicpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCcuL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG52YXIgU3ludGhldGljQ2xpcGJvYXJkRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0NsaXBib2FyZEV2ZW50Jyk7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG52YXIgU3ludGhldGljRm9jdXNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRm9jdXNFdmVudCcpO1xudmFyIFN5bnRoZXRpY0tleWJvYXJkRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0tleWJvYXJkRXZlbnQnKTtcbnZhciBTeW50aGV0aWNNb3VzZUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNNb3VzZUV2ZW50Jyk7XG52YXIgU3ludGhldGljRHJhZ0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNEcmFnRXZlbnQnKTtcbnZhciBTeW50aGV0aWNUb3VjaEV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNUb3VjaEV2ZW50Jyk7XG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVUlFdmVudCcpO1xudmFyIFN5bnRoZXRpY1doZWVsRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1doZWVsRXZlbnQnKTtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRDaGFyQ29kZScpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIGtleU9mID0gcmVxdWlyZSgnZmJqcy9saWIva2V5T2YnKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgYWJvcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkFib3J0OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25BYm9ydENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGJsdXI6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkJsdXI6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkJsdXJDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBjYW5QbGF5OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25DYW5QbGF5OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25DYW5QbGF5Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgY2FuUGxheVRocm91Z2g6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkNhblBsYXlUaHJvdWdoOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25DYW5QbGF5VGhyb3VnaENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGNsaWNrOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25DbGljazogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQ2xpY2tDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBjb250ZXh0TWVudToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQ29udGV4dE1lbnU6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkNvbnRleHRNZW51Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgY29weToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQ29weTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQ29weUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGN1dDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQ3V0OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25DdXRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBkb3VibGVDbGljazoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRG91YmxlQ2xpY2s6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkRvdWJsZUNsaWNrQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZHJhZzoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRHJhZzogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHJhZ0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdFbmQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkRyYWdFbmQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkRyYWdFbmRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBkcmFnRW50ZXI6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkRyYWdFbnRlcjogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHJhZ0VudGVyQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0V4aXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkRyYWdFeGl0OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25EcmFnRXhpdENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdMZWF2ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRHJhZ0xlYXZlOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25EcmFnTGVhdmVDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBkcmFnT3Zlcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRHJhZ092ZXI6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkRyYWdPdmVyQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ1N0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25EcmFnU3RhcnQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkRyYWdTdGFydENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGRyb3A6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkRyb3A6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkRyb3BDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBkdXJhdGlvbkNoYW5nZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRHVyYXRpb25DaGFuZ2U6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkR1cmF0aW9uQ2hhbmdlQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZW1wdGllZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRW1wdGllZDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRW1wdGllZENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGVuY3J5cHRlZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRW5jcnlwdGVkOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25FbmNyeXB0ZWRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBlbmRlZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRW5kZWQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkVuZGVkQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkVycm9yOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25FcnJvckNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Gb2N1czogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRm9jdXNDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBpbnB1dDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uSW5wdXQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbklucHV0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAga2V5RG93bjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uS2V5RG93bjogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uS2V5RG93bkNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGtleVByZXNzOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25LZXlQcmVzczogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uS2V5UHJlc3NDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBrZXlVcDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uS2V5VXA6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbktleVVwQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgbG9hZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uTG9hZDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uTG9hZENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGxvYWRlZERhdGE6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkxvYWRlZERhdGE6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkxvYWRlZERhdGFDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBsb2FkZWRNZXRhZGF0YToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uTG9hZGVkTWV0YWRhdGE6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkxvYWRlZE1ldGFkYXRhQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgbG9hZFN0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Mb2FkU3RhcnQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkxvYWRTdGFydENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIC8vIE5vdGU6IFdlIGRvIG5vdCBhbGxvdyBsaXN0ZW5pbmcgdG8gbW91c2VPdmVyIGV2ZW50cy4gSW5zdGVhZCwgdXNlIHRoZVxuICAvLyBvbk1vdXNlRW50ZXIvb25Nb3VzZUxlYXZlIGNyZWF0ZWQgYnkgYEVudGVyTGVhdmVFdmVudFBsdWdpbmAuXG4gIG1vdXNlRG93bjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uTW91c2VEb3duOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Nb3VzZURvd25DYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBtb3VzZU1vdmU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbk1vdXNlTW92ZTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uTW91c2VNb3ZlQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgbW91c2VPdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbk1vdXNlT3V0OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Nb3VzZU91dENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlT3Zlcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uTW91c2VPdmVyOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Nb3VzZU92ZXJDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBtb3VzZVVwOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Nb3VzZVVwOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Nb3VzZVVwQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgcGFzdGU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblBhc3RlOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25QYXN0ZUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHBhdXNlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25QYXVzZTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uUGF1c2VDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBwbGF5OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25QbGF5OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25QbGF5Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgcGxheWluZzoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uUGxheWluZzogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uUGxheWluZ0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHByb2dyZXNzOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Qcm9ncmVzczogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uUHJvZ3Jlc3NDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICByYXRlQ2hhbmdlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25SYXRlQ2hhbmdlOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25SYXRlQ2hhbmdlQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgcmVzZXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblJlc2V0OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25SZXNldENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHNjcm9sbDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uU2Nyb2xsOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25TY3JvbGxDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBzZWVrZWQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblNlZWtlZDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uU2Vla2VkQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgc2Vla2luZzoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uU2Vla2luZzogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uU2Vla2luZ0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHN0YWxsZWQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblN0YWxsZWQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblN0YWxsZWRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBzdWJtaXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblN1Ym1pdDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uU3VibWl0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgc3VzcGVuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uU3VzcGVuZDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uU3VzcGVuZENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHRpbWVVcGRhdGU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblRpbWVVcGRhdGU6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblRpbWVVcGRhdGVDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICB0b3VjaENhbmNlbDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uVG91Y2hDYW5jZWw6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblRvdWNoQ2FuY2VsQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgdG91Y2hFbmQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblRvdWNoRW5kOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Ub3VjaEVuZENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoTW92ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uVG91Y2hNb3ZlOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Ub3VjaE1vdmVDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICB0b3VjaFN0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Ub3VjaFN0YXJ0OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Ub3VjaFN0YXJ0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgdm9sdW1lQ2hhbmdlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Wb2x1bWVDaGFuZ2U6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblZvbHVtZUNoYW5nZUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHdhaXRpbmc6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbldhaXRpbmc6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbldhaXRpbmdDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICB3aGVlbDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uV2hlZWw6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbldoZWVsQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfVxufTtcblxudmFyIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZyA9IHtcbiAgdG9wQWJvcnQ6IGV2ZW50VHlwZXMuYWJvcnQsXG4gIHRvcEJsdXI6IGV2ZW50VHlwZXMuYmx1cixcbiAgdG9wQ2FuUGxheTogZXZlbnRUeXBlcy5jYW5QbGF5LFxuICB0b3BDYW5QbGF5VGhyb3VnaDogZXZlbnRUeXBlcy5jYW5QbGF5VGhyb3VnaCxcbiAgdG9wQ2xpY2s6IGV2ZW50VHlwZXMuY2xpY2ssXG4gIHRvcENvbnRleHRNZW51OiBldmVudFR5cGVzLmNvbnRleHRNZW51LFxuICB0b3BDb3B5OiBldmVudFR5cGVzLmNvcHksXG4gIHRvcEN1dDogZXZlbnRUeXBlcy5jdXQsXG4gIHRvcERvdWJsZUNsaWNrOiBldmVudFR5cGVzLmRvdWJsZUNsaWNrLFxuICB0b3BEcmFnOiBldmVudFR5cGVzLmRyYWcsXG4gIHRvcERyYWdFbmQ6IGV2ZW50VHlwZXMuZHJhZ0VuZCxcbiAgdG9wRHJhZ0VudGVyOiBldmVudFR5cGVzLmRyYWdFbnRlcixcbiAgdG9wRHJhZ0V4aXQ6IGV2ZW50VHlwZXMuZHJhZ0V4aXQsXG4gIHRvcERyYWdMZWF2ZTogZXZlbnRUeXBlcy5kcmFnTGVhdmUsXG4gIHRvcERyYWdPdmVyOiBldmVudFR5cGVzLmRyYWdPdmVyLFxuICB0b3BEcmFnU3RhcnQ6IGV2ZW50VHlwZXMuZHJhZ1N0YXJ0LFxuICB0b3BEcm9wOiBldmVudFR5cGVzLmRyb3AsXG4gIHRvcER1cmF0aW9uQ2hhbmdlOiBldmVudFR5cGVzLmR1cmF0aW9uQ2hhbmdlLFxuICB0b3BFbXB0aWVkOiBldmVudFR5cGVzLmVtcHRpZWQsXG4gIHRvcEVuY3J5cHRlZDogZXZlbnRUeXBlcy5lbmNyeXB0ZWQsXG4gIHRvcEVuZGVkOiBldmVudFR5cGVzLmVuZGVkLFxuICB0b3BFcnJvcjogZXZlbnRUeXBlcy5lcnJvcixcbiAgdG9wRm9jdXM6IGV2ZW50VHlwZXMuZm9jdXMsXG4gIHRvcElucHV0OiBldmVudFR5cGVzLmlucHV0LFxuICB0b3BLZXlEb3duOiBldmVudFR5cGVzLmtleURvd24sXG4gIHRvcEtleVByZXNzOiBldmVudFR5cGVzLmtleVByZXNzLFxuICB0b3BLZXlVcDogZXZlbnRUeXBlcy5rZXlVcCxcbiAgdG9wTG9hZDogZXZlbnRUeXBlcy5sb2FkLFxuICB0b3BMb2FkZWREYXRhOiBldmVudFR5cGVzLmxvYWRlZERhdGEsXG4gIHRvcExvYWRlZE1ldGFkYXRhOiBldmVudFR5cGVzLmxvYWRlZE1ldGFkYXRhLFxuICB0b3BMb2FkU3RhcnQ6IGV2ZW50VHlwZXMubG9hZFN0YXJ0LFxuICB0b3BNb3VzZURvd246IGV2ZW50VHlwZXMubW91c2VEb3duLFxuICB0b3BNb3VzZU1vdmU6IGV2ZW50VHlwZXMubW91c2VNb3ZlLFxuICB0b3BNb3VzZU91dDogZXZlbnRUeXBlcy5tb3VzZU91dCxcbiAgdG9wTW91c2VPdmVyOiBldmVudFR5cGVzLm1vdXNlT3ZlcixcbiAgdG9wTW91c2VVcDogZXZlbnRUeXBlcy5tb3VzZVVwLFxuICB0b3BQYXN0ZTogZXZlbnRUeXBlcy5wYXN0ZSxcbiAgdG9wUGF1c2U6IGV2ZW50VHlwZXMucGF1c2UsXG4gIHRvcFBsYXk6IGV2ZW50VHlwZXMucGxheSxcbiAgdG9wUGxheWluZzogZXZlbnRUeXBlcy5wbGF5aW5nLFxuICB0b3BQcm9ncmVzczogZXZlbnRUeXBlcy5wcm9ncmVzcyxcbiAgdG9wUmF0ZUNoYW5nZTogZXZlbnRUeXBlcy5yYXRlQ2hhbmdlLFxuICB0b3BSZXNldDogZXZlbnRUeXBlcy5yZXNldCxcbiAgdG9wU2Nyb2xsOiBldmVudFR5cGVzLnNjcm9sbCxcbiAgdG9wU2Vla2VkOiBldmVudFR5cGVzLnNlZWtlZCxcbiAgdG9wU2Vla2luZzogZXZlbnRUeXBlcy5zZWVraW5nLFxuICB0b3BTdGFsbGVkOiBldmVudFR5cGVzLnN0YWxsZWQsXG4gIHRvcFN1Ym1pdDogZXZlbnRUeXBlcy5zdWJtaXQsXG4gIHRvcFN1c3BlbmQ6IGV2ZW50VHlwZXMuc3VzcGVuZCxcbiAgdG9wVGltZVVwZGF0ZTogZXZlbnRUeXBlcy50aW1lVXBkYXRlLFxuICB0b3BUb3VjaENhbmNlbDogZXZlbnRUeXBlcy50b3VjaENhbmNlbCxcbiAgdG9wVG91Y2hFbmQ6IGV2ZW50VHlwZXMudG91Y2hFbmQsXG4gIHRvcFRvdWNoTW92ZTogZXZlbnRUeXBlcy50b3VjaE1vdmUsXG4gIHRvcFRvdWNoU3RhcnQ6IGV2ZW50VHlwZXMudG91Y2hTdGFydCxcbiAgdG9wVm9sdW1lQ2hhbmdlOiBldmVudFR5cGVzLnZvbHVtZUNoYW5nZSxcbiAgdG9wV2FpdGluZzogZXZlbnRUeXBlcy53YWl0aW5nLFxuICB0b3BXaGVlbDogZXZlbnRUeXBlcy53aGVlbFxufTtcblxuZm9yICh2YXIgdHlwZSBpbiB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWcpIHtcbiAgdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnW3R5cGVdLmRlcGVuZGVuY2llcyA9IFt0eXBlXTtcbn1cblxudmFyIE9OX0NMSUNLX0tFWSA9IGtleU9mKHsgb25DbGljazogbnVsbCB9KTtcbnZhciBvbkNsaWNrTGlzdGVuZXJzID0ge307XG5cbnZhciBTaW1wbGVFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICB2YXIgZGlzcGF0Y2hDb25maWcgPSB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wTGV2ZWxUeXBlXTtcbiAgICBpZiAoIWRpc3BhdGNoQ29uZmlnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIEV2ZW50Q29uc3RydWN0b3I7XG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BBYm9ydDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDYW5QbGF5OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENhblBsYXlUaHJvdWdoOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcER1cmF0aW9uQ2hhbmdlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEVtcHRpZWQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRW5jcnlwdGVkOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEVuZGVkOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEVycm9yOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcElucHV0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcExvYWQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTG9hZGVkRGF0YTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BMb2FkZWRNZXRhZGF0YTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BMb2FkU3RhcnQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUGF1c2U6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUGxheTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQbGF5aW5nOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFByb2dyZXNzOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFJhdGVDaGFuZ2U6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUmVzZXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU2Vla2VkOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFNlZWtpbmc6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU3RhbGxlZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTdWJtaXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU3VzcGVuZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUaW1lVXBkYXRlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFZvbHVtZUNoYW5nZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BXYWl0aW5nOlxuICAgICAgICAvLyBIVE1MIEV2ZW50c1xuICAgICAgICAvLyBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L2luZGV4Lmh0bWwjZXZlbnRzLTBcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0V2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgICAgLy8gRmlyZUZveCBjcmVhdGVzIGEga2V5cHJlc3MgZXZlbnQgZm9yIGZ1bmN0aW9uIGtleXMgdG9vLiBUaGlzIHJlbW92ZXNcbiAgICAgICAgLy8gdGhlIHVud2FudGVkIGtleXByZXNzIGV2ZW50cy4gRW50ZXIgaXMgaG93ZXZlciBib3RoIHByaW50YWJsZSBhbmRcbiAgICAgICAgLy8gbm9uLXByaW50YWJsZS4gT25lIHdvdWxkIGV4cGVjdCBUYWIgdG8gYmUgYXMgd2VsbCAoYnV0IGl0IGlzbid0KS5cbiAgICAgICAgaWYgKGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljS2V5Ym9hcmRFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQmx1cjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BGb2N1czpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENsaWNrOlxuICAgICAgICAvLyBGaXJlZm94IGNyZWF0ZXMgYSBjbGljayBldmVudCBvbiByaWdodCBtb3VzZSBjbGlja3MuIFRoaXMgcmVtb3ZlcyB0aGVcbiAgICAgICAgLy8gdW53YW50ZWQgY2xpY2sgZXZlbnRzLlxuICAgICAgICBpZiAobmF0aXZlRXZlbnQuYnV0dG9uID09PSAyKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb250ZXh0TWVudTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEb3VibGVDbGljazpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VNb3ZlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlcjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljTW91c2VFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZzpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnRW5kOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFbnRlcjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnRXhpdDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnTGVhdmU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ092ZXI6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ1N0YXJ0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyb3A6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoQ2FuY2VsOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoRW5kOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoTW92ZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0OlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVG91Y2hFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU2Nyb2xsOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVUlFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wV2hlZWw6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNXaGVlbEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb3B5OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEN1dDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZTpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgIUV2ZW50Q29uc3RydWN0b3IgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnU2ltcGxlRXZlbnRQbHVnaW46IFVuaGFuZGxlZCBldmVudCB0eXBlLCBgJXNgLicsIHRvcExldmVsVHlwZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIHZhciBldmVudCA9IEV2ZW50Q29uc3RydWN0b3IuZ2V0UG9vbGVkKGRpc3BhdGNoQ29uZmlnLCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9LFxuXG4gIGRpZFB1dExpc3RlbmVyOiBmdW5jdGlvbiAoaWQsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKSB7XG4gICAgLy8gTW9iaWxlIFNhZmFyaSBkb2VzIG5vdCBmaXJlIHByb3Blcmx5IGJ1YmJsZSBjbGljayBldmVudHMgb25cbiAgICAvLyBub24taW50ZXJhY3RpdmUgZWxlbWVudHMsIHdoaWNoIG1lYW5zIGRlbGVnYXRlZCBjbGljayBsaXN0ZW5lcnMgZG8gbm90XG4gICAgLy8gZmlyZS4gVGhlIHdvcmthcm91bmQgZm9yIHRoaXMgYnVnIGludm9sdmVzIGF0dGFjaGluZyBhbiBlbXB0eSBjbGlja1xuICAgIC8vIGxpc3RlbmVyIG9uIHRoZSB0YXJnZXQgbm9kZS5cbiAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gT05fQ0xJQ0tfS0VZKSB7XG4gICAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgICBpZiAoIW9uQ2xpY2tMaXN0ZW5lcnNbaWRdKSB7XG4gICAgICAgIG9uQ2xpY2tMaXN0ZW5lcnNbaWRdID0gRXZlbnRMaXN0ZW5lci5saXN0ZW4obm9kZSwgJ2NsaWNrJywgZW1wdHlGdW5jdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHdpbGxEZWxldGVMaXN0ZW5lcjogZnVuY3Rpb24gKGlkLCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgPT09IE9OX0NMSUNLX0tFWSkge1xuICAgICAgb25DbGlja0xpc3RlbmVyc1tpZF0ucmVtb3ZlKCk7XG4gICAgICBkZWxldGUgb25DbGlja0xpc3RlbmVyc1tpZF07XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2ltcGxlRXZlbnRQbHVnaW47IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvY2xpcGJvYXJkLWFwaXMvXG4gKi9cbnZhciBDbGlwYm9hcmRFdmVudEludGVyZmFjZSA9IHtcbiAgY2xpcGJvYXJkRGF0YTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdjbGlwYm9hcmREYXRhJyBpbiBldmVudCA/IGV2ZW50LmNsaXBib2FyZERhdGEgOiB3aW5kb3cuY2xpcGJvYXJkRGF0YTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNDbGlwYm9hcmRFdmVudCwgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtY29tcG9zaXRpb25ldmVudHNcbiAqL1xudmFyIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRhdGE6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LCBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNEcmFnRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRHJhZ0V2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIERyYWdFdmVudEludGVyZmFjZSA9IHtcbiAgZGF0YVRyYW5zZmVyOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNEcmFnRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgU3ludGhldGljTW91c2VFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRHJhZ0V2ZW50LCBEcmFnRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0RyYWdFdmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBFdmVudEludGVyZmFjZSA9IHtcbiAgdHlwZTogbnVsbCxcbiAgdGFyZ2V0OiBudWxsLFxuICAvLyBjdXJyZW50VGFyZ2V0IGlzIHNldCB3aGVuIGRpc3BhdGNoaW5nOyBubyB1c2UgaW4gY29weWluZyBpdCBoZXJlXG4gIGN1cnJlbnRUYXJnZXQ6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsLFxuICBldmVudFBoYXNlOiBudWxsLFxuICBidWJibGVzOiBudWxsLFxuICBjYW5jZWxhYmxlOiBudWxsLFxuICB0aW1lU3RhbXA6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiBldmVudC50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcbiAgfSxcbiAgZGVmYXVsdFByZXZlbnRlZDogbnVsbCxcbiAgaXNUcnVzdGVkOiBudWxsXG59O1xuXG4vKipcbiAqIFN5bnRoZXRpYyBldmVudHMgYXJlIGRpc3BhdGNoZWQgYnkgZXZlbnQgcGx1Z2lucywgdHlwaWNhbGx5IGluIHJlc3BvbnNlIHRvIGFcbiAqIHRvcC1sZXZlbCBldmVudCBkZWxlZ2F0aW9uIGhhbmRsZXIuXG4gKlxuICogVGhlc2Ugc3lzdGVtcyBzaG91bGQgZ2VuZXJhbGx5IHVzZSBwb29saW5nIHRvIHJlZHVjZSB0aGUgZnJlcXVlbmN5IG9mIGdhcmJhZ2VcbiAqIGNvbGxlY3Rpb24uIFRoZSBzeXN0ZW0gc2hvdWxkIGNoZWNrIGBpc1BlcnNpc3RlbnRgIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZVxuICogZXZlbnQgc2hvdWxkIGJlIHJlbGVhc2VkIGludG8gdGhlIHBvb2wgYWZ0ZXIgYmVpbmcgZGlzcGF0Y2hlZC4gVXNlcnMgdGhhdFxuICogbmVlZCBhIHBlcnNpc3RlZCBldmVudCBzaG91bGQgaW52b2tlIGBwZXJzaXN0YC5cbiAqXG4gKiBTeW50aGV0aWMgZXZlbnRzIChhbmQgc3ViY2xhc3NlcykgaW1wbGVtZW50IHRoZSBET00gTGV2ZWwgMyBFdmVudHMgQVBJIGJ5XG4gKiBub3JtYWxpemluZyBicm93c2VyIHF1aXJrcy4gU3ViY2xhc3NlcyBkbyBub3QgbmVjZXNzYXJpbHkgaGF2ZSB0byBpbXBsZW1lbnQgYVxuICogRE9NIGludGVyZmFjZTsgY3VzdG9tIGFwcGxpY2F0aW9uLXNwZWNpZmljIGV2ZW50cyBjYW4gYWxzbyBzdWJjbGFzcyB0aGlzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IGRpc3BhdGNoQ29uZmlnO1xuICB0aGlzLmRpc3BhdGNoTWFya2VyID0gZGlzcGF0Y2hNYXJrZXI7XG4gIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcblxuICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgIGlmICghSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBub3JtYWxpemUgPSBJbnRlcmZhY2VbcHJvcE5hbWVdO1xuICAgIGlmIChub3JtYWxpemUpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbm9ybWFsaXplKG5hdGl2ZUV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BOYW1lID09PSAndGFyZ2V0Jykge1xuICAgICAgICB0aGlzLnRhcmdldCA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1twcm9wTmFtZV0gPSBuYXRpdmVFdmVudFtwcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkICE9IG51bGwgPyBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkIDogbmF0aXZlRXZlbnQucmV0dXJuVmFsdWUgPT09IGZhbHNlO1xuICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2U7XG4gIH1cbiAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZTtcbn1cblxuYXNzaWduKFN5bnRoZXRpY0V2ZW50LnByb3RvdHlwZSwge1xuXG4gIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhldmVudCwgJ1RoaXMgc3ludGhldGljIGV2ZW50IGlzIHJldXNlZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gSWYgeW91XFwncmUgJyArICdzZWVpbmcgdGhpcywgeW91XFwncmUgY2FsbGluZyBgcHJldmVudERlZmF1bHRgIG9uIGEgJyArICdyZWxlYXNlZC9udWxsaWZpZWQgc3ludGhldGljIGV2ZW50LiBUaGlzIGlzIGEgbm8tb3AuIFNlZSAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtZXZlbnQtcG9vbGluZyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCFldmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhldmVudCwgJ1RoaXMgc3ludGhldGljIGV2ZW50IGlzIHJldXNlZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gSWYgeW91XFwncmUgJyArICdzZWVpbmcgdGhpcywgeW91XFwncmUgY2FsbGluZyBgc3RvcFByb3BhZ2F0aW9uYCBvbiBhICcgKyAncmVsZWFzZWQvbnVsbGlmaWVkIHN5bnRoZXRpYyBldmVudC4gVGhpcyBpcyBhIG5vLW9wLiBTZWUgJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWV2ZW50LXBvb2xpbmcgZm9yIG1vcmUgaW5mb3JtYXRpb24uJykgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICghZXZlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBXZSByZWxlYXNlIGFsbCBkaXNwYXRjaGVkIGBTeW50aGV0aWNFdmVudGBzIGFmdGVyIGVhY2ggZXZlbnQgbG9vcCwgYWRkaW5nXG4gICAqIHRoZW0gYmFjayBpbnRvIHRoZSBwb29sLiBUaGlzIGFsbG93cyBhIHdheSB0byBob2xkIG9udG8gYSByZWZlcmVuY2UgdGhhdFxuICAgKiB3b24ndCBiZSBhZGRlZCBiYWNrIGludG8gdGhlIHBvb2wuXG4gICAqL1xuICBwZXJzaXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pc1BlcnNpc3RlbnQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgZXZlbnQgc2hvdWxkIGJlIHJlbGVhc2VkIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGlzIHNob3VsZCBub3QgYmUgcmVsZWFzZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGlzUGVyc2lzdGVudDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlLFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciBgZGVzdHJ1Y3RvcmAgb24gZWFjaCBpbnN0YW5jZSBpdCByZWxlYXNlcy5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKSB7XG4gICAgICB0aGlzW3Byb3BOYW1lXSA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuZGlzcGF0Y2hDb25maWcgPSBudWxsO1xuICAgIHRoaXMuZGlzcGF0Y2hNYXJrZXIgPSBudWxsO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBudWxsO1xuICB9XG5cbn0pO1xuXG5TeW50aGV0aWNFdmVudC5JbnRlcmZhY2UgPSBFdmVudEludGVyZmFjZTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gcmVkdWNlIGJvaWxlcnBsYXRlIHdoZW4gY3JlYXRpbmcgc3ViY2xhc3Nlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBDbGFzc1xuICogQHBhcmFtIHs/b2JqZWN0fSBJbnRlcmZhY2VcbiAqL1xuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzID0gZnVuY3Rpb24gKENsYXNzLCBJbnRlcmZhY2UpIHtcbiAgdmFyIFN1cGVyID0gdGhpcztcblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICBhc3NpZ24ocHJvdG90eXBlLCBDbGFzcy5wcm90b3R5cGUpO1xuICBDbGFzcy5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIENsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENsYXNzO1xuXG4gIENsYXNzLkludGVyZmFjZSA9IGFzc2lnbih7fSwgU3VwZXIuSW50ZXJmYWNlLCBJbnRlcmZhY2UpO1xuICBDbGFzcy5hdWdtZW50Q2xhc3MgPSBTdXBlci5hdWdtZW50Q2xhc3M7XG5cbiAgUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKENsYXNzLCBQb29sZWRDbGFzcy5mb3VyQXJndW1lbnRQb29sZXIpO1xufTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFN5bnRoZXRpY0V2ZW50LCBQb29sZWRDbGFzcy5mb3VyQXJndW1lbnRQb29sZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0V2ZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNGb2N1c0V2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1VJRXZlbnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEZvY3VzRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRm9jdXNFdmVudEludGVyZmFjZSA9IHtcbiAgcmVsYXRlZFRhcmdldDogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRm9jdXNFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNGb2N1c0V2ZW50LCBGb2N1c0V2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNGb2N1c0V2ZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNJbnB1dEV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAxMzExMDVcbiAqICAgICAgLyNldmVudHMtaW5wdXRldmVudHNcbiAqL1xudmFyIElucHV0RXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRhdGE6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0lucHV0RXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNJbnB1dEV2ZW50LCBJbnB1dEV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNJbnB1dEV2ZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNLZXlib2FyZEV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1VJRXZlbnQnKTtcblxudmFyIGdldEV2ZW50Q2hhckNvZGUgPSByZXF1aXJlKCcuL2dldEV2ZW50Q2hhckNvZGUnKTtcbnZhciBnZXRFdmVudEtleSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRLZXknKTtcbnZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSByZXF1aXJlKCcuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZScpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgS2V5Ym9hcmRFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBLZXlib2FyZEV2ZW50SW50ZXJmYWNlID0ge1xuICBrZXk6IGdldEV2ZW50S2V5LFxuICBsb2NhdGlvbjogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgcmVwZWF0OiBudWxsLFxuICBsb2NhbGU6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgLy8gTGVnYWN5IEludGVyZmFjZVxuICBjaGFyQ29kZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gYGNoYXJDb2RlYCBpcyB0aGUgcmVzdWx0IG9mIGEgS2V5UHJlc3MgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gdGhlIGFjdHVhbCBwcmludGFibGUgY2hhcmFjdGVyLlxuXG4gICAgLy8gS2V5UHJlc3MgaXMgZGVwcmVjYXRlZCwgYnV0IGl0cyByZXBsYWNlbWVudCBpcyBub3QgeWV0IGZpbmFsIGFuZCBub3RcbiAgICAvLyBpbXBsZW1lbnRlZCBpbiBhbnkgbWFqb3IgYnJvd3Nlci4gT25seSBLZXlQcmVzcyBoYXMgY2hhckNvZGUuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgIHJldHVybiBnZXRFdmVudENoYXJDb2RlKGV2ZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIGtleUNvZGU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGBrZXlDb2RlYCBpcyB0aGUgcmVzdWx0IG9mIGEgS2V5RG93bi9VcCBldmVudCBhbmQgcmVwcmVzZW50cyB0aGUgdmFsdWUgb2ZcbiAgICAvLyBwaHlzaWNhbCBrZXlib2FyZCBrZXkuXG5cbiAgICAvLyBUaGUgYWN0dWFsIG1lYW5pbmcgb2YgdGhlIHZhbHVlIGRlcGVuZHMgb24gdGhlIHVzZXJzJyBrZXlib2FyZCBsYXlvdXRcbiAgICAvLyB3aGljaCBjYW5ub3QgYmUgZGV0ZWN0ZWQuIEFzc3VtaW5nIHRoYXQgaXQgaXMgYSBVUyBrZXlib2FyZCBsYXlvdXRcbiAgICAvLyBwcm92aWRlcyBhIHN1cnByaXNpbmdseSBhY2N1cmF0ZSBtYXBwaW5nIGZvciBVUyBhbmQgRXVyb3BlYW4gdXNlcnMuXG4gICAgLy8gRHVlIHRvIHRoaXMsIGl0IGlzIGxlZnQgdG8gdGhlIHVzZXIgdG8gaW1wbGVtZW50IGF0IHRoaXMgdGltZS5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICAgIHJldHVybiBldmVudC5rZXlDb2RlO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSxcbiAgd2hpY2g6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGB3aGljaGAgaXMgYW4gYWxpYXMgZm9yIGVpdGhlciBga2V5Q29kZWAgb3IgYGNoYXJDb2RlYCBkZXBlbmRpbmcgb24gdGhlXG4gICAgLy8gdHlwZSBvZiB0aGUgZXZlbnQuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgIHJldHVybiBnZXRFdmVudENoYXJDb2RlKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0tleWJvYXJkRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljS2V5Ym9hcmRFdmVudCwgS2V5Ym9hcmRFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljS2V5Ym9hcmRFdmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljTW91c2VFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNVSUV2ZW50Jyk7XG52YXIgVmlld3BvcnRNZXRyaWNzID0gcmVxdWlyZSgnLi9WaWV3cG9ydE1ldHJpY3MnKTtcblxudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRNb2RpZmllclN0YXRlJyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBNb3VzZUV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIE1vdXNlRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHNjcmVlblg6IG51bGwsXG4gIHNjcmVlblk6IG51bGwsXG4gIGNsaWVudFg6IG51bGwsXG4gIGNsaWVudFk6IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgYnV0dG9uOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBXZWJraXQsIEZpcmVmb3gsIElFOStcbiAgICAvLyB3aGljaDogIDEgMiAzXG4gICAgLy8gYnV0dG9uOiAwIDEgMiAoc3RhbmRhcmQpXG4gICAgdmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcbiAgICBpZiAoJ3doaWNoJyBpbiBldmVudCkge1xuICAgICAgcmV0dXJuIGJ1dHRvbjtcbiAgICB9XG4gICAgLy8gSUU8OVxuICAgIC8vIHdoaWNoOiAgdW5kZWZpbmVkXG4gICAgLy8gYnV0dG9uOiAwIDAgMFxuICAgIC8vIGJ1dHRvbjogMSA0IDIgKG9ubW91c2V1cClcbiAgICByZXR1cm4gYnV0dG9uID09PSAyID8gMiA6IGJ1dHRvbiA9PT0gNCA/IDEgOiAwO1xuICB9LFxuICBidXR0b25zOiBudWxsLFxuICByZWxhdGVkVGFyZ2V0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQucmVsYXRlZFRhcmdldCB8fCAoZXZlbnQuZnJvbUVsZW1lbnQgPT09IGV2ZW50LnNyY0VsZW1lbnQgPyBldmVudC50b0VsZW1lbnQgOiBldmVudC5mcm9tRWxlbWVudCk7XG4gIH0sXG4gIC8vIFwiUHJvcHJpZXRhcnlcIiBJbnRlcmZhY2UuXG4gIHBhZ2VYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VYJyBpbiBldmVudCA/IGV2ZW50LnBhZ2VYIDogZXZlbnQuY2xpZW50WCArIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsTGVmdDtcbiAgfSxcbiAgcGFnZVk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiAncGFnZVknIGluIGV2ZW50ID8gZXZlbnQucGFnZVkgOiBldmVudC5jbGllbnRZICsgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3A7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY01vdXNlRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljTW91c2VFdmVudCwgTW91c2VFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljTW91c2VFdmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljVG91Y2hFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNVSUV2ZW50Jyk7XG5cbnZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSByZXF1aXJlKCcuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZScpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgVG91Y2hFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi90b3VjaC1ldmVudHMvXG4gKi9cbnZhciBUb3VjaEV2ZW50SW50ZXJmYWNlID0ge1xuICB0b3VjaGVzOiBudWxsLFxuICB0YXJnZXRUb3VjaGVzOiBudWxsLFxuICBjaGFuZ2VkVG91Y2hlczogbnVsbCxcbiAgYWx0S2V5OiBudWxsLFxuICBtZXRhS2V5OiBudWxsLFxuICBjdHJsS2V5OiBudWxsLFxuICBzaGlmdEtleTogbnVsbCxcbiAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNUb3VjaEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1RvdWNoRXZlbnQsIFRvdWNoRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY1RvdWNoRXZlbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY1VJRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRUYXJnZXQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFVJRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgVUlFdmVudEludGVyZmFjZSA9IHtcbiAgdmlldzogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnZpZXcpIHtcbiAgICAgIHJldHVybiBldmVudC52aWV3O1xuICAgIH1cblxuICAgIHZhciB0YXJnZXQgPSBnZXRFdmVudFRhcmdldChldmVudCk7XG4gICAgaWYgKHRhcmdldCAhPSBudWxsICYmIHRhcmdldC53aW5kb3cgPT09IHRhcmdldCkge1xuICAgICAgLy8gdGFyZ2V0IGlzIGEgd2luZG93IG9iamVjdFxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICB2YXIgZG9jID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gICAgLy8gVE9ETzogRmlndXJlIG91dCB3aHkgYG93bmVyRG9jdW1lbnRgIGlzIHNvbWV0aW1lcyB1bmRlZmluZWQgaW4gSUU4LlxuICAgIGlmIChkb2MpIHtcbiAgICAgIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG4gIH0sXG4gIGRldGFpbDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LmRldGFpbCB8fCAwO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVUlFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1VJRXZlbnQsIFVJRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY1VJRXZlbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY1doZWVsRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgV2hlZWxFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBXaGVlbEV2ZW50SW50ZXJmYWNlID0ge1xuICBkZWx0YVg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiAnZGVsdGFYJyBpbiBldmVudCA/IGV2ZW50LmRlbHRhWCA6XG4gICAgLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFYYCBmb3IgV2Via2l0IGFuZCBub3JtYWxpemUgKHJpZ2h0IGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YVgnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFYIDogMDtcbiAgfSxcbiAgZGVsdGFZOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ2RlbHRhWScgaW4gZXZlbnQgPyBldmVudC5kZWx0YVkgOlxuICAgIC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhWWAgZm9yIFdlYmtpdCBhbmQgbm9ybWFsaXplIChkb3duIGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YVknIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFZIDpcbiAgICAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YWAgZm9yIElFPDkgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgJ3doZWVsRGVsdGEnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGEgOiAwO1xuICB9LFxuICBkZWx0YVo6IG51bGwsXG5cbiAgLy8gQnJvd3NlcnMgd2l0aG91dCBcImRlbHRhTW9kZVwiIGlzIHJlcG9ydGluZyBpbiByYXcgd2hlZWwgZGVsdGEgd2hlcmUgb25lXG4gIC8vIG5vdGNoIG9uIHRoZSBzY3JvbGwgaXMgYWx3YXlzICsvLSAxMjAsIHJvdWdobHkgZXF1aXZhbGVudCB0byBwaXhlbHMuXG4gIC8vIEEgZ29vZCBhcHByb3hpbWF0aW9uIG9mIERPTV9ERUxUQV9MSU5FICgxKSBpcyA1JSBvZiB2aWV3cG9ydCBzaXplIG9yXG4gIC8vIH40MCBwaXhlbHMsIGZvciBET01fREVMVEFfU0NSRUVOICgyKSBpdCBpcyA4Ny41JSBvZiB2aWV3cG9ydCBzaXplLlxuICBkZWx0YU1vZGU6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY01vdXNlRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY1doZWVsRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgU3ludGhldGljTW91c2VFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljV2hlZWxFdmVudCwgV2hlZWxFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljV2hlZWxFdmVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgVHJhbnNhY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBgVHJhbnNhY3Rpb25gIGNyZWF0ZXMgYSBibGFjayBib3ggdGhhdCBpcyBhYmxlIHRvIHdyYXAgYW55IG1ldGhvZCBzdWNoIHRoYXRcbiAqIGNlcnRhaW4gaW52YXJpYW50cyBhcmUgbWFpbnRhaW5lZCBiZWZvcmUgYW5kIGFmdGVyIHRoZSBtZXRob2QgaXMgaW52b2tlZFxuICogKEV2ZW4gaWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biB3aGlsZSBpbnZva2luZyB0aGUgd3JhcHBlZCBtZXRob2QpLiBXaG9ldmVyXG4gKiBpbnN0YW50aWF0ZXMgYSB0cmFuc2FjdGlvbiBjYW4gcHJvdmlkZSBlbmZvcmNlcnMgb2YgdGhlIGludmFyaWFudHMgYXRcbiAqIGNyZWF0aW9uIHRpbWUuIFRoZSBgVHJhbnNhY3Rpb25gIGNsYXNzIGl0c2VsZiB3aWxsIHN1cHBseSBvbmUgYWRkaXRpb25hbFxuICogYXV0b21hdGljIGludmFyaWFudCBmb3IgeW91IC0gdGhlIGludmFyaWFudCB0aGF0IGFueSB0cmFuc2FjdGlvbiBpbnN0YW5jZVxuICogc2hvdWxkIG5vdCBiZSBydW4gd2hpbGUgaXQgaXMgYWxyZWFkeSBiZWluZyBydW4uIFlvdSB3b3VsZCB0eXBpY2FsbHkgY3JlYXRlIGFcbiAqIHNpbmdsZSBpbnN0YW5jZSBvZiBhIGBUcmFuc2FjdGlvbmAgZm9yIHJldXNlIG11bHRpcGxlIHRpbWVzLCB0aGF0IHBvdGVudGlhbGx5XG4gKiBpcyB1c2VkIHRvIHdyYXAgc2V2ZXJhbCBkaWZmZXJlbnQgbWV0aG9kcy4gV3JhcHBlcnMgYXJlIGV4dHJlbWVseSBzaW1wbGUgLVxuICogdGhleSBvbmx5IHJlcXVpcmUgaW1wbGVtZW50aW5nIHR3byBtZXRob2RzLlxuICpcbiAqIDxwcmU+XG4gKiAgICAgICAgICAgICAgICAgICAgICAgd3JhcHBlcnMgKGluamVjdGVkIGF0IGNyZWF0aW9uIHRpbWUpXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAgICAgICAgK1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS18LS0tLS0tLS0tLS0tLS0rXG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgdiAgICAgICAgfCAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICAgICArLS0tLS0tLS0tLS0tLS0tKyAgIHwgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgKy0tfCAgICB3cmFwcGVyMSAgIHwtLS18LS0tLSsgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICstLS0tLS0tLS0tLS0tLS0rICAgdiAgICB8ICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICAgICAgICstLS0tLS0tLS0tLS0tKyAgfCAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgKy0tLS18ICAgd3JhcHBlcjIgIHwtLS0tLS0tLSsgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgIHwgICAgKy0tLS0tLS0tLS0tLS0rICB8ICAgICB8ICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICB8ICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgdiAgICAgdiAgICAgICAgICAgICAgICAgICAgIHYgICAgIHYgICB8IHdyYXBwZXJcbiAqICAgICAgICAgICAgICAgICAgICB8ICstLS0rICstLS0rICAgKy0tLS0tLS0tLSsgICArLS0tKyArLS0tKyB8IGludmFyaWFudHNcbiAqIHBlcmZvcm0oYW55TWV0aG9kKSB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8IG1haW50YWluZWRcbiAqICstLS0tLS0tLS0tLS0tLS0tLT58LXwtLS18LXwtLS18LS0+fGFueU1ldGhvZHwtLS18LS0tfC18LS0tfC18LS0tLS0tLS0+XG4gKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuICogICAgICAgICAgICAgICAgICAgIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHxcbiAqICAgICAgICAgICAgICAgICAgICB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCArLS0tKyArLS0tKyAgICstLS0tLS0tLS0rICAgKy0tLSsgKy0tLSsgfFxuICogICAgICAgICAgICAgICAgICAgIHwgIGluaXRpYWxpemUgICAgICAgICAgICAgICAgICAgIGNsb3NlICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gKiA8L3ByZT5cbiAqXG4gKiBVc2UgY2FzZXM6XG4gKiAtIFByZXNlcnZpbmcgdGhlIGlucHV0IHNlbGVjdGlvbiByYW5nZXMgYmVmb3JlL2FmdGVyIHJlY29uY2lsaWF0aW9uLlxuICogICBSZXN0b3Jpbmcgc2VsZWN0aW9uIGV2ZW4gaW4gdGhlIGV2ZW50IG9mIGFuIHVuZXhwZWN0ZWQgZXJyb3IuXG4gKiAtIERlYWN0aXZhdGluZyBldmVudHMgd2hpbGUgcmVhcnJhbmdpbmcgdGhlIERPTSwgcHJldmVudGluZyBibHVycy9mb2N1c2VzLFxuICogICB3aGlsZSBndWFyYW50ZWVpbmcgdGhhdCBhZnRlcndhcmRzLCB0aGUgZXZlbnQgc3lzdGVtIGlzIHJlYWN0aXZhdGVkLlxuICogLSBGbHVzaGluZyBhIHF1ZXVlIG9mIGNvbGxlY3RlZCBET00gbXV0YXRpb25zIHRvIHRoZSBtYWluIFVJIHRocmVhZCBhZnRlciBhXG4gKiAgIHJlY29uY2lsaWF0aW9uIHRha2VzIHBsYWNlIGluIGEgd29ya2VyIHRocmVhZC5cbiAqIC0gSW52b2tpbmcgYW55IGNvbGxlY3RlZCBgY29tcG9uZW50RGlkVXBkYXRlYCBjYWxsYmFja3MgYWZ0ZXIgcmVuZGVyaW5nIG5ld1xuICogICBjb250ZW50LlxuICogLSAoRnV0dXJlIHVzZSBjYXNlKTogV3JhcHBpbmcgcGFydGljdWxhciBmbHVzaGVzIG9mIHRoZSBgUmVhY3RXb3JrZXJgIHF1ZXVlXG4gKiAgIHRvIHByZXNlcnZlIHRoZSBgc2Nyb2xsVG9wYCAoYW4gYXV0b21hdGljIHNjcm9sbCBhd2FyZSBET00pLlxuICogLSAoRnV0dXJlIHVzZSBjYXNlKTogTGF5b3V0IGNhbGN1bGF0aW9ucyBiZWZvcmUgYW5kIGFmdGVyIERPTSB1cGRhdGVzLlxuICpcbiAqIFRyYW5zYWN0aW9uYWwgcGx1Z2luIEFQSTpcbiAqIC0gQSBtb2R1bGUgdGhhdCBoYXMgYW4gYGluaXRpYWxpemVgIG1ldGhvZCB0aGF0IHJldHVybnMgYW55IHByZWNvbXB1dGF0aW9uLlxuICogLSBhbmQgYSBgY2xvc2VgIG1ldGhvZCB0aGF0IGFjY2VwdHMgdGhlIHByZWNvbXB1dGF0aW9uLiBgY2xvc2VgIGlzIGludm9rZWRcbiAqICAgd2hlbiB0aGUgd3JhcHBlZCBwcm9jZXNzIGlzIGNvbXBsZXRlZCwgb3IgaGFzIGZhaWxlZC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PFRyYW5zYWN0aW9uYWxXcmFwcGVyPn0gdHJhbnNhY3Rpb25XcmFwcGVyIFdyYXBwZXIgbW9kdWxlc1xuICogdGhhdCBpbXBsZW1lbnQgYGluaXRpYWxpemVgIGFuZCBgY2xvc2VgLlxuICogQHJldHVybiB7VHJhbnNhY3Rpb259IFNpbmdsZSB0cmFuc2FjdGlvbiBmb3IgcmV1c2UgaW4gdGhyZWFkLlxuICpcbiAqIEBjbGFzcyBUcmFuc2FjdGlvblxuICovXG52YXIgTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBTZXRzIHVwIHRoaXMgaW5zdGFuY2Ugc28gdGhhdCBpdCBpcyBwcmVwYXJlZCBmb3IgY29sbGVjdGluZyBtZXRyaWNzLiBEb2VzXG4gICAqIHNvIHN1Y2ggdGhhdCB0aGlzIHNldHVwIG1ldGhvZCBtYXkgYmUgdXNlZCBvbiBhbiBpbnN0YW5jZSB0aGF0IGlzIGFscmVhZHlcbiAgICogaW5pdGlhbGl6ZWQsIGluIGEgd2F5IHRoYXQgZG9lcyBub3QgY29uc3VtZSBhZGRpdGlvbmFsIG1lbW9yeSB1cG9uIHJldXNlLlxuICAgKiBUaGF0IGNhbiBiZSB1c2VmdWwgaWYgeW91IGRlY2lkZSB0byBtYWtlIHlvdXIgc3ViY2xhc3Mgb2YgdGhpcyBtaXhpbiBhXG4gICAqIFwiUG9vbGVkQ2xhc3NcIi5cbiAgICovXG4gIHJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzID0gdGhpcy5nZXRUcmFuc2FjdGlvbldyYXBwZXJzKCk7XG4gICAgaWYgKHRoaXMud3JhcHBlckluaXREYXRhKSB7XG4gICAgICB0aGlzLndyYXBwZXJJbml0RGF0YS5sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndyYXBwZXJJbml0RGF0YSA9IFtdO1xuICAgIH1cbiAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSBmYWxzZTtcbiAgfSxcblxuICBfaXNJblRyYW5zYWN0aW9uOiBmYWxzZSxcblxuICAvKipcbiAgICogQGFic3RyYWN0XG4gICAqIEByZXR1cm4ge0FycmF5PFRyYW5zYWN0aW9uV3JhcHBlcj59IEFycmF5IG9mIHRyYW5zYWN0aW9uIHdyYXBwZXJzLlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogbnVsbCxcblxuICBpc0luVHJhbnNhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9pc0luVHJhbnNhY3Rpb247XG4gIH0sXG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIHRoZSBmdW5jdGlvbiB3aXRoaW4gYSBzYWZldHkgd2luZG93LiBVc2UgdGhpcyBmb3IgdGhlIHRvcCBsZXZlbFxuICAgKiBtZXRob2RzIHRoYXQgcmVzdWx0IGluIGxhcmdlIGFtb3VudHMgb2YgY29tcHV0YXRpb24vbXV0YXRpb25zIHRoYXQgd291bGRcbiAgICogbmVlZCB0byBiZSBzYWZldHkgY2hlY2tlZC4gVGhlIG9wdGlvbmFsIGFyZ3VtZW50cyBoZWxwcyBwcmV2ZW50IHRoZSBuZWVkXG4gICAqIHRvIGJpbmQgaW4gbWFueSBjYXNlcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kIE1lbWJlciBvZiBzY29wZSB0byBjYWxsLlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2NvcGUgU2NvcGUgdG8gaW52b2tlIGZyb20uXG4gICAqIEBwYXJhbSB7T2JqZWN0Pz19IGEgQXJndW1lbnQgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBiIEFyZ3VtZW50IHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gYyBBcmd1bWVudCB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAqIEBwYXJhbSB7T2JqZWN0Pz19IGQgQXJndW1lbnQgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBlIEFyZ3VtZW50IHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gZiBBcmd1bWVudCB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAqXG4gICAqIEByZXR1cm4geyp9IFJldHVybiB2YWx1ZSBmcm9tIGBtZXRob2RgLlxuICAgKi9cbiAgcGVyZm9ybTogZnVuY3Rpb24gKG1ldGhvZCwgc2NvcGUsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAhIXRoaXMuaXNJblRyYW5zYWN0aW9uKCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJhbnNhY3Rpb24ucGVyZm9ybSguLi4pOiBDYW5ub3QgaW5pdGlhbGl6ZSBhIHRyYW5zYWN0aW9uIHdoZW4gdGhlcmUgJyArICdpcyBhbHJlYWR5IGFuIG91dHN0YW5kaW5nIHRyYW5zYWN0aW9uLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgZXJyb3JUaHJvd247XG4gICAgdmFyIHJldDtcbiAgICB0cnkge1xuICAgICAgdGhpcy5faXNJblRyYW5zYWN0aW9uID0gdHJ1ZTtcbiAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGhcbiAgICAgIC8vIGVycm9yVGhyb3duIHNldCB0byB0cnVlIGJlZm9yZSBzZXR0aW5nIGl0IHRvIGZhbHNlIGFmdGVyIGNhbGxpbmdcbiAgICAgIC8vIGNsb3NlIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIHRydWUgaW4gdGhlIGZpbmFsbHkgYmxvY2ssIGl0IG1lYW5zXG4gICAgICAvLyBvbmUgb2YgdGhlc2UgY2FsbHMgdGhyZXcuXG4gICAgICBlcnJvclRocm93biA9IHRydWU7XG4gICAgICB0aGlzLmluaXRpYWxpemVBbGwoMCk7XG4gICAgICByZXQgPSBtZXRob2QuY2FsbChzY29wZSwgYSwgYiwgYywgZCwgZSwgZik7XG4gICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAvLyBJZiBgbWV0aG9kYCB0aHJvd3MsIHByZWZlciB0byBzaG93IHRoYXQgc3RhY2sgdHJhY2Ugb3ZlciBhbnkgdGhyb3duXG4gICAgICAgICAgLy8gYnkgaW52b2tpbmcgYGNsb3NlQWxsYC5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2luY2UgYG1ldGhvZGAgZGlkbid0IHRocm93LCB3ZSBkb24ndCB3YW50IHRvIHNpbGVuY2UgdGhlIGV4Y2VwdGlvblxuICAgICAgICAgIC8vIGhlcmUuXG4gICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5faXNJblRyYW5zYWN0aW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgaW5pdGlhbGl6ZUFsbDogZnVuY3Rpb24gKHN0YXJ0SW5kZXgpIHtcbiAgICB2YXIgdHJhbnNhY3Rpb25XcmFwcGVycyA9IHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycztcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRyYW5zYWN0aW9uV3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3cmFwcGVyID0gdHJhbnNhY3Rpb25XcmFwcGVyc1tpXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGggdGhlXG4gICAgICAgIC8vIE9CU0VSVkVEX0VSUk9SIHN0YXRlIGJlZm9yZSBvdmVyd3JpdGluZyBpdCB3aXRoIHRoZSByZWFsIHJldHVybiB2YWx1ZVxuICAgICAgICAvLyBvZiBpbml0aWFsaXplIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIE9CU0VSVkVEX0VSUk9SIGluIHRoZSBmaW5hbGx5XG4gICAgICAgIC8vIGJsb2NrLCBpdCBtZWFucyB3cmFwcGVyLmluaXRpYWxpemUgdGhyZXcuXG4gICAgICAgIHRoaXMud3JhcHBlckluaXREYXRhW2ldID0gVHJhbnNhY3Rpb24uT0JTRVJWRURfRVJST1I7XG4gICAgICAgIHRoaXMud3JhcHBlckluaXREYXRhW2ldID0gd3JhcHBlci5pbml0aWFsaXplID8gd3JhcHBlci5pbml0aWFsaXplLmNhbGwodGhpcykgOiBudWxsO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKHRoaXMud3JhcHBlckluaXREYXRhW2ldID09PSBUcmFuc2FjdGlvbi5PQlNFUlZFRF9FUlJPUikge1xuICAgICAgICAgIC8vIFRoZSBpbml0aWFsaXplciBmb3Igd3JhcHBlciBpIHRocmV3IGFuIGVycm9yOyBpbml0aWFsaXplIHRoZVxuICAgICAgICAgIC8vIHJlbWFpbmluZyB3cmFwcGVycyBidXQgc2lsZW5jZSBhbnkgZXhjZXB0aW9ucyBmcm9tIHRoZW0gdG8gZW5zdXJlXG4gICAgICAgICAgLy8gdGhhdCB0aGUgZmlyc3QgZXJyb3IgaXMgdGhlIG9uZSB0byBidWJibGUgdXAuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZUFsbChpICsgMSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2VzIGVhY2ggb2YgYHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycy5jbG9zZVtpXWAgZnVuY3Rpb25zLCBwYXNzaW5nIGludG9cbiAgICogdGhlbSB0aGUgcmVzcGVjdGl2ZSByZXR1cm4gdmFsdWVzIG9mIGB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMuaW5pdFtpXWBcbiAgICogKGBjbG9zZWBycyB0aGF0IGNvcnJlc3BvbmQgdG8gaW5pdGlhbGl6ZXJzIHRoYXQgZmFpbGVkIHdpbGwgbm90IGJlXG4gICAqIGludm9rZWQpLlxuICAgKi9cbiAgY2xvc2VBbGw6IGZ1bmN0aW9uIChzdGFydEluZGV4KSB7XG4gICAgIXRoaXMuaXNJblRyYW5zYWN0aW9uKCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJhbnNhY3Rpb24uY2xvc2VBbGwoKTogQ2Fubm90IGNsb3NlIHRyYW5zYWN0aW9uIHdoZW4gbm9uZSBhcmUgb3Blbi4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnM7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCB0cmFuc2FjdGlvbldyYXBwZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd3JhcHBlciA9IHRyYW5zYWN0aW9uV3JhcHBlcnNbaV07XG4gICAgICB2YXIgaW5pdERhdGEgPSB0aGlzLndyYXBwZXJJbml0RGF0YVtpXTtcbiAgICAgIHZhciBlcnJvclRocm93bjtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGhcbiAgICAgICAgLy8gZXJyb3JUaHJvd24gc2V0IHRvIHRydWUgYmVmb3JlIHNldHRpbmcgaXQgdG8gZmFsc2UgYWZ0ZXIgY2FsbGluZ1xuICAgICAgICAvLyBjbG9zZSAtLSBpZiBpdCdzIHN0aWxsIHNldCB0byB0cnVlIGluIHRoZSBmaW5hbGx5IGJsb2NrLCBpdCBtZWFuc1xuICAgICAgICAvLyB3cmFwcGVyLmNsb3NlIHRocmV3LlxuICAgICAgICBlcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGlmIChpbml0RGF0YSAhPT0gVHJhbnNhY3Rpb24uT0JTRVJWRURfRVJST1IgJiYgd3JhcHBlci5jbG9zZSkge1xuICAgICAgICAgIHdyYXBwZXIuY2xvc2UuY2FsbCh0aGlzLCBpbml0RGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgIC8vIFRoZSBjbG9zZXIgZm9yIHdyYXBwZXIgaSB0aHJldyBhbiBlcnJvcjsgY2xvc2UgdGhlIHJlbWFpbmluZ1xuICAgICAgICAgIC8vIHdyYXBwZXJzIGJ1dCBzaWxlbmNlIGFueSBleGNlcHRpb25zIGZyb20gdGhlbSB0byBlbnN1cmUgdGhhdCB0aGVcbiAgICAgICAgICAvLyBmaXJzdCBlcnJvciBpcyB0aGUgb25lIHRvIGJ1YmJsZSB1cC5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUFsbChpICsgMSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLndyYXBwZXJJbml0RGF0YS5sZW5ndGggPSAwO1xuICB9XG59O1xuXG52YXIgVHJhbnNhY3Rpb24gPSB7XG5cbiAgTWl4aW46IE1peGluLFxuXG4gIC8qKlxuICAgKiBUb2tlbiB0byBsb29rIGZvciB0byBkZXRlcm1pbmUgaWYgYW4gZXJyb3Igb2NjdXJyZWQuXG4gICAqL1xuICBPQlNFUlZFRF9FUlJPUjoge31cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2FjdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgVmlld3BvcnRNZXRyaWNzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVmlld3BvcnRNZXRyaWNzID0ge1xuXG4gIGN1cnJlbnRTY3JvbGxMZWZ0OiAwLFxuXG4gIGN1cnJlbnRTY3JvbGxUb3A6IDAsXG5cbiAgcmVmcmVzaFNjcm9sbFZhbHVlczogZnVuY3Rpb24gKHNjcm9sbFBvc2l0aW9uKSB7XG4gICAgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxMZWZ0ID0gc2Nyb2xsUG9zaXRpb24ueDtcbiAgICBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbFRvcCA9IHNjcm9sbFBvc2l0aW9uLnk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3cG9ydE1ldHJpY3M7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGFjY3VtdWxhdGVJbnRvXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICpcbiAqIEFjY3VtdWxhdGVzIGl0ZW1zIHRoYXQgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgaW50byB0aGUgZmlyc3Qgb25lLiBUaGlzXG4gKiBpcyB1c2VkIHRvIGNvbnNlcnZlIG1lbW9yeSBieSBhdm9pZGluZyBhcnJheSBhbGxvY2F0aW9ucywgYW5kIHRodXMgc2FjcmlmaWNlc1xuICogQVBJIGNsZWFubmVzcy4gU2luY2UgYGN1cnJlbnRgIGNhbiBiZSBudWxsIGJlZm9yZSBiZWluZyBwYXNzZWQgaW4gYW5kIG5vdFxuICogbnVsbCBhZnRlciB0aGlzIGZ1bmN0aW9uLCBtYWtlIHN1cmUgdG8gYXNzaWduIGl0IGJhY2sgdG8gYGN1cnJlbnRgOlxuICpcbiAqIGBhID0gYWNjdW11bGF0ZUludG8oYSwgYik7YFxuICpcbiAqIFRoaXMgQVBJIHNob3VsZCBiZSBzcGFyaW5nbHkgdXNlZC4gVHJ5IGBhY2N1bXVsYXRlYCBmb3Igc29tZXRoaW5nIGNsZWFuZXIuXG4gKlxuICogQHJldHVybiB7KnxhcnJheTwqPn0gQW4gYWNjdW11bGF0aW9uIG9mIGl0ZW1zLlxuICovXG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVJbnRvKGN1cnJlbnQsIG5leHQpIHtcbiAgIShuZXh0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2FjY3VtdWxhdGVJbnRvKC4uLik6IEFjY3VtdWxhdGVkIGl0ZW1zIG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBuZXh0O1xuICB9XG5cbiAgLy8gQm90aCBhcmUgbm90IGVtcHR5LiBXYXJuaW5nOiBOZXZlciBjYWxsIHguY29uY2F0KHkpIHdoZW4geW91IGFyZSBub3RcbiAgLy8gY2VydGFpbiB0aGF0IHggaXMgYW4gQXJyYXkgKHggY291bGQgYmUgYSBzdHJpbmcgd2l0aCBjb25jYXQgbWV0aG9kKS5cbiAgdmFyIGN1cnJlbnRJc0FycmF5ID0gQXJyYXkuaXNBcnJheShjdXJyZW50KTtcbiAgdmFyIG5leHRJc0FycmF5ID0gQXJyYXkuaXNBcnJheShuZXh0KTtcblxuICBpZiAoY3VycmVudElzQXJyYXkgJiYgbmV4dElzQXJyYXkpIHtcbiAgICBjdXJyZW50LnB1c2guYXBwbHkoY3VycmVudCwgbmV4dCk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cblxuICBpZiAoY3VycmVudElzQXJyYXkpIHtcbiAgICBjdXJyZW50LnB1c2gobmV4dCk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cblxuICBpZiAobmV4dElzQXJyYXkpIHtcbiAgICAvLyBBIGJpdCB0b28gZGFuZ2Vyb3VzIHRvIG11dGF0ZSBgbmV4dGAuXG4gICAgcmV0dXJuIFtjdXJyZW50XS5jb25jYXQobmV4dCk7XG4gIH1cblxuICByZXR1cm4gW2N1cnJlbnQsIG5leHRdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFjY3VtdWxhdGVJbnRvOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBhZGxlcjMyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTU9EID0gNjU1MjE7XG5cbi8vIGFkbGVyMzIgaXMgbm90IGNyeXB0b2dyYXBoaWNhbGx5IHN0cm9uZywgYW5kIGlzIG9ubHkgdXNlZCB0byBzYW5pdHkgY2hlY2sgdGhhdFxuLy8gbWFya3VwIGdlbmVyYXRlZCBvbiB0aGUgc2VydmVyIG1hdGNoZXMgdGhlIG1hcmt1cCBnZW5lcmF0ZWQgb24gdGhlIGNsaWVudC5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gKGEgbW9kaWZpZWQgdmVyc2lvbiBvZiB0aGUgU2hlZXRKUyB2ZXJzaW9uKSBoYXMgYmVlbiBvcHRpbWl6ZWRcbi8vIGZvciBvdXIgdXNlIGNhc2UsIGF0IHRoZSBleHBlbnNlIG9mIGNvbmZvcm1pbmcgdG8gdGhlIGFkbGVyMzIgc3BlY2lmaWNhdGlvblxuLy8gZm9yIG5vbi1hc2NpaSBpbnB1dHMuXG5mdW5jdGlvbiBhZGxlcjMyKGRhdGEpIHtcbiAgdmFyIGEgPSAxO1xuICB2YXIgYiA9IDA7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBkYXRhLmxlbmd0aDtcbiAgdmFyIG0gPSBsICYgfjB4MztcbiAgd2hpbGUgKGkgPCBtKSB7XG4gICAgZm9yICg7IGkgPCBNYXRoLm1pbihpICsgNDA5NiwgbSk7IGkgKz0gNCkge1xuICAgICAgYiArPSAoYSArPSBkYXRhLmNoYXJDb2RlQXQoaSkpICsgKGEgKz0gZGF0YS5jaGFyQ29kZUF0KGkgKyAxKSkgKyAoYSArPSBkYXRhLmNoYXJDb2RlQXQoaSArIDIpKSArIChhICs9IGRhdGEuY2hhckNvZGVBdChpICsgMykpO1xuICAgIH1cbiAgICBhICU9IE1PRDtcbiAgICBiICU9IE1PRDtcbiAgfVxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIGIgKz0gYSArPSBkYXRhLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgYSAlPSBNT0Q7XG4gIGIgJT0gTU9EO1xuICByZXR1cm4gYSB8IGIgPDwgMTY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWRsZXIzMjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY2FuRGVmaW5lUHJvcGVydHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IGZhbHNlO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICd4JywgeyBnZXQ6IGZ1bmN0aW9uICgpIHt9IH0pO1xuICAgIGNhbkRlZmluZVByb3BlcnR5ID0gdHJ1ZTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIC8vIElFIHdpbGwgZmFpbCBvbiBkZWZpbmVQcm9wZXJ0eVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FuRGVmaW5lUHJvcGVydHk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGRhbmdlcm91c1N0eWxlVmFsdWVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ1NTUHJvcGVydHkgPSByZXF1aXJlKCcuL0NTU1Byb3BlcnR5Jyk7XG5cbnZhciBpc1VuaXRsZXNzTnVtYmVyID0gQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcjtcblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgaW50byB0aGUgcHJvcGVyIGNzcyB3cml0YWJsZSB2YWx1ZS4gVGhlIHN0eWxlIG5hbWUgYG5hbWVgXG4gKiBzaG91bGQgYmUgbG9naWNhbCAobm8gaHlwaGVucyksIGFzIHNwZWNpZmllZFxuICogaW4gYENTU1Byb3BlcnR5LmlzVW5pdGxlc3NOdW1iZXJgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIENTUyBwcm9wZXJ0eSBuYW1lIHN1Y2ggYXMgYHRvcE1hcmdpbmAuXG4gKiBAcGFyYW0geyp9IHZhbHVlIENTUyBwcm9wZXJ0eSB2YWx1ZSBzdWNoIGFzIGAxMHB4YC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBzdHlsZSB2YWx1ZSB3aXRoIGRpbWVuc2lvbnMgYXBwbGllZC5cbiAqL1xuZnVuY3Rpb24gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShuYW1lLCB2YWx1ZSkge1xuICAvLyBOb3RlIHRoYXQgd2UndmUgcmVtb3ZlZCBlc2NhcGVUZXh0Rm9yQnJvd3NlcigpIGNhbGxzIGhlcmUgc2luY2UgdGhlXG4gIC8vIHdob2xlIHN0cmluZyB3aWxsIGJlIGVzY2FwZWQgd2hlbiB0aGUgYXR0cmlidXRlIGlzIGluamVjdGVkIGludG9cbiAgLy8gdGhlIG1hcmt1cC4gSWYgeW91IHByb3ZpZGUgdW5zYWZlIHVzZXIgZGF0YSBoZXJlIHRoZXkgY2FuIGluamVjdFxuICAvLyBhcmJpdHJhcnkgQ1NTIHdoaWNoIG1heSBiZSBwcm9ibGVtYXRpYyAoSSBjb3VsZG4ndCByZXBybyB0aGlzKTpcbiAgLy8gaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9YU1NfRmlsdGVyX0V2YXNpb25fQ2hlYXRfU2hlZXRcbiAgLy8gaHR0cDovL3d3dy50aGVzcGFubmVyLmNvLnVrLzIwMDcvMTEvMjYvdWx0aW1hdGUteHNzLWNzcy1pbmplY3Rpb24vXG4gIC8vIFRoaXMgaXMgbm90IGFuIFhTUyBob2xlIGJ1dCBpbnN0ZWFkIGEgcG90ZW50aWFsIENTUyBpbmplY3Rpb24gaXNzdWVcbiAgLy8gd2hpY2ggaGFzIGxlYWQgdG8gYSBncmVhdGVyIGRpc2N1c3Npb24gYWJvdXQgaG93IHdlJ3JlIGdvaW5nIHRvXG4gIC8vIHRydXN0IFVSTHMgbW92aW5nIGZvcndhcmQuIFNlZSAjMjExNTkwMVxuXG4gIHZhciBpc0VtcHR5ID0gdmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fCB2YWx1ZSA9PT0gJyc7XG4gIGlmIChpc0VtcHR5KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIGlzTm9uTnVtZXJpYyA9IGlzTmFOKHZhbHVlKTtcbiAgaWYgKGlzTm9uTnVtZXJpYyB8fCB2YWx1ZSA9PT0gMCB8fCBpc1VuaXRsZXNzTnVtYmVyLmhhc093blByb3BlcnR5KG5hbWUpICYmIGlzVW5pdGxlc3NOdW1iZXJbbmFtZV0pIHtcbiAgICByZXR1cm4gJycgKyB2YWx1ZTsgLy8gY2FzdCB0byBzdHJpbmdcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlICsgJ3B4Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkYW5nZXJvdXNTdHlsZVZhbHVlOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBkZXByZWNhdGVkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLyoqXG4gKiBUaGlzIHdpbGwgbG9nIGEgc2luZ2xlIGRlcHJlY2F0aW9uIG5vdGljZSBwZXIgZnVuY3Rpb24gYW5kIGZvcndhcmQgdGhlIGNhbGxcbiAqIG9uIHRvIHRoZSBuZXcgQVBJLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmbk5hbWUgVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3TW9kdWxlIFRoZSBtb2R1bGUgdGhhdCBmbiB3aWxsIGV4aXN0IGluXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3UGFja2FnZSBUaGUgbW9kdWxlIHRoYXQgZm4gd2lsbCBleGlzdCBpblxuICogQHBhcmFtIHsqfSBjdHggVGhlIGNvbnRleHQgdGhpcyBmb3J3YXJkZWQgY2FsbCBzaG91bGQgcnVuIGluXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gZm9yd2FyZCBvbiB0b1xuICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgd2FybiBvbmNlIGFuZCB0aGVuIGNhbGwgZm5cbiAqL1xuZnVuY3Rpb24gZGVwcmVjYXRlZChmbk5hbWUsIG5ld01vZHVsZSwgbmV3UGFja2FnZSwgY3R4LCBmbikge1xuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIG5ld0ZuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcod2FybmVkLFxuICAgICAgLy8gUmVxdWlyZSBleGFtcGxlcyBpbiB0aGlzIHN0cmluZyBtdXN0IGJlIHNwbGl0IHRvIHByZXZlbnQgUmVhY3Qnc1xuICAgICAgLy8gYnVpbGQgdG9vbHMgZnJvbSBtaXN0YWtpbmcgdGhlbSBmb3IgcmVhbCByZXF1aXJlcy5cbiAgICAgIC8vIE90aGVyd2lzZSB0aGUgYnVpbGQgdG9vbHMgd2lsbCBhdHRlbXB0IHRvIGJ1aWxkIGEgJyVzJyBtb2R1bGUuXG4gICAgICAnUmVhY3QuJXMgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSAlcy4lcyBmcm9tIHJlcXVpcmUnICsgJyhcXCclc1xcJykgJyArICdpbnN0ZWFkLicsIGZuTmFtZSwgbmV3TW9kdWxlLCBmbk5hbWUsIG5ld1BhY2thZ2UpIDogdW5kZWZpbmVkO1xuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmbi5hcHBseShjdHgsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICAvLyBXZSBuZWVkIHRvIG1ha2Ugc3VyZSBhbGwgcHJvcGVydGllcyBvZiB0aGUgb3JpZ2luYWwgZm4gYXJlIGNvcGllZCBvdmVyLlxuICAgIC8vIEluIHBhcnRpY3VsYXIsIHRoaXMgaXMgbmVlZGVkIHRvIHN1cHBvcnQgUHJvcFR5cGVzXG4gICAgcmV0dXJuIGFzc2lnbihuZXdGbiwgZm4pO1xuICB9XG5cbiAgcmV0dXJuIGZuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZWQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEVTQ0FQRV9MT09LVVAgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJz4nOiAnJmd0OycsXG4gICc8JzogJyZsdDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgJ1xcJyc6ICcmI3gyNzsnXG59O1xuXG52YXIgRVNDQVBFX1JFR0VYID0gL1smPjxcIiddL2c7XG5cbmZ1bmN0aW9uIGVzY2FwZXIobWF0Y2gpIHtcbiAgcmV0dXJuIEVTQ0FQRV9MT09LVVBbbWF0Y2hdO1xufVxuXG4vKipcbiAqIEVzY2FwZXMgdGV4dCB0byBwcmV2ZW50IHNjcmlwdGluZyBhdHRhY2tzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdGV4dCBUZXh0IHZhbHVlIHRvIGVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0ZXh0KSB7XG4gIHJldHVybiAoJycgKyB0ZXh0KS5yZXBsYWNlKEVTQ0FQRV9SRUdFWCwgZXNjYXBlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmaW5kRE9NTm9kZVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlTWFwJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBET00gbm9kZSByZW5kZXJlZCBieSB0aGlzIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudHxET01FbGVtZW50fSBjb21wb25lbnRPckVsZW1lbnRcbiAqIEByZXR1cm4gez9ET01FbGVtZW50fSBUaGUgcm9vdCBub2RlIG9mIHRoaXMgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gZmluZERPTU5vZGUoY29tcG9uZW50T3JFbGVtZW50KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICBpZiAob3duZXIgIT09IG51bGwpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciwgJyVzIGlzIGFjY2Vzc2luZyBnZXRET01Ob2RlIG9yIGZpbmRET01Ob2RlIGluc2lkZSBpdHMgcmVuZGVyKCkuICcgKyAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICsgJ25ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzICcgKyAncmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgJyArICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLCBvd25lci5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgICBvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoY29tcG9uZW50T3JFbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoY29tcG9uZW50T3JFbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudE9yRWxlbWVudDtcbiAgfVxuICBpZiAoUmVhY3RJbnN0YW5jZU1hcC5oYXMoY29tcG9uZW50T3JFbGVtZW50KSkge1xuICAgIHJldHVybiBSZWFjdE1vdW50LmdldE5vZGVGcm9tSW5zdGFuY2UoY29tcG9uZW50T3JFbGVtZW50KTtcbiAgfVxuICAhKGNvbXBvbmVudE9yRWxlbWVudC5yZW5kZXIgPT0gbnVsbCB8fCB0eXBlb2YgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlciAhPT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZmluZERPTU5vZGUgd2FzIGNhbGxlZCBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0VsZW1lbnQgYXBwZWFycyB0byBiZSBuZWl0aGVyIFJlYWN0Q29tcG9uZW50IG5vciBET01Ob2RlIChrZXlzOiAlcyknLCBPYmplY3Qua2V5cyhjb21wb25lbnRPckVsZW1lbnQpKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZERPTU5vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGZsYXR0ZW5DaGlsZHJlblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSByZXF1aXJlKCcuL3RyYXZlcnNlQWxsQ2hpbGRyZW4nKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHRyYXZlcnNlQ29udGV4dCBDb250ZXh0IHBhc3NlZCB0aHJvdWdoIHRyYXZlcnNhbC5cbiAqIEBwYXJhbSB7P1JlYWN0Q29tcG9uZW50fSBjaGlsZCBSZWFjdCBjaGlsZCBjb21wb25lbnQuXG4gKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgU3RyaW5nIG5hbWUgb2Yga2V5IHBhdGggdG8gY2hpbGQuXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUpIHtcbiAgLy8gV2UgZm91bmQgYSBjb21wb25lbnQgaW5zdGFuY2UuXG4gIHZhciByZXN1bHQgPSB0cmF2ZXJzZUNvbnRleHQ7XG4gIHZhciBrZXlVbmlxdWUgPSByZXN1bHRbbmFtZV0gPT09IHVuZGVmaW5lZDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhrZXlVbmlxdWUsICdmbGF0dGVuQ2hpbGRyZW4oLi4uKTogRW5jb3VudGVyZWQgdHdvIGNoaWxkcmVuIHdpdGggdGhlIHNhbWUga2V5LCAnICsgJ2Alc2AuIENoaWxkIGtleXMgbXVzdCBiZSB1bmlxdWU7IHdoZW4gdHdvIGNoaWxkcmVuIHNoYXJlIGEga2V5LCBvbmx5ICcgKyAndGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgdXNlZC4nLCBuYW1lKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoa2V5VW5pcXVlICYmIGNoaWxkICE9IG51bGwpIHtcbiAgICByZXN1bHRbbmFtZV0gPSBjaGlsZDtcbiAgfVxufVxuXG4vKipcbiAqIEZsYXR0ZW5zIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC4gQW55IG51bGxcbiAqIGNoaWxkcmVuIHdpbGwgbm90IGJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHRpbmcgb2JqZWN0LlxuICogQHJldHVybiB7IW9iamVjdH0gZmxhdHRlbmVkIGNoaWxkcmVuIGtleWVkIGJ5IG5hbWUuXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5DaGlsZHJlbihjaGlsZHJlbikge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgcmVzdWx0ID0ge307XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0LCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5DaGlsZHJlbjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZm9yRWFjaEFjY3VtdWxhdGVkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7YXJyYXl9IGFyciBhbiBcImFjY3VtdWxhdGlvblwiIG9mIGl0ZW1zIHdoaWNoIGlzIGVpdGhlciBhbiBBcnJheSBvclxuICogYSBzaW5nbGUgaXRlbS4gVXNlZnVsIHdoZW4gcGFpcmVkIHdpdGggdGhlIGBhY2N1bXVsYXRlYCBtb2R1bGUuIFRoaXMgaXMgYVxuICogc2ltcGxlIHV0aWxpdHkgdGhhdCBhbGxvd3MgdXMgdG8gcmVhc29uIGFib3V0IGEgY29sbGVjdGlvbiBvZiBpdGVtcywgYnV0XG4gKiBoYW5kbGluZyB0aGUgY2FzZSB3aGVuIHRoZXJlIGlzIGV4YWN0bHkgb25lIGl0ZW0gKGFuZCB3ZSBkbyBub3QgbmVlZCB0b1xuICogYWxsb2NhdGUgYW4gYXJyYXkpLlxuICovXG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gZnVuY3Rpb24gKGFyciwgY2IsIHNjb3BlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBhcnIuZm9yRWFjaChjYiwgc2NvcGUpO1xuICB9IGVsc2UgaWYgKGFycikge1xuICAgIGNiLmNhbGwoc2NvcGUsIGFycik7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZm9yRWFjaEFjY3VtdWxhdGVkOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudENoYXJDb2RlXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBgY2hhckNvZGVgIHJlcHJlc2VudHMgdGhlIGFjdHVhbCBcImNoYXJhY3RlciBjb2RlXCIgYW5kIGlzIHNhZmUgdG8gdXNlIHdpdGhcbiAqIGBTdHJpbmcuZnJvbUNoYXJDb2RlYC4gQXMgc3VjaCwgb25seSBrZXlzIHRoYXQgY29ycmVzcG9uZCB0byBwcmludGFibGVcbiAqIGNoYXJhY3RlcnMgcHJvZHVjZSBhIHZhbGlkIGBjaGFyQ29kZWAsIHRoZSBvbmx5IGV4Y2VwdGlvbiB0byB0aGlzIGlzIEVudGVyLlxuICogVGhlIFRhYi1rZXkgaXMgY29uc2lkZXJlZCBub24tcHJpbnRhYmxlIGFuZCBkb2VzIG5vdCBoYXZlIGEgYGNoYXJDb2RlYCxcbiAqIHByZXN1bWFibHkgYmVjYXVzZSBpdCBkb2VzIG5vdCBwcm9kdWNlIGEgdGFiLWNoYXJhY3RlciBpbiBicm93c2Vycy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IE5vcm1hbGl6ZWQgYGNoYXJDb2RlYCBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkge1xuICB2YXIgY2hhckNvZGU7XG4gIHZhciBrZXlDb2RlID0gbmF0aXZlRXZlbnQua2V5Q29kZTtcblxuICBpZiAoJ2NoYXJDb2RlJyBpbiBuYXRpdmVFdmVudCkge1xuICAgIGNoYXJDb2RlID0gbmF0aXZlRXZlbnQuY2hhckNvZGU7XG5cbiAgICAvLyBGRiBkb2VzIG5vdCBzZXQgYGNoYXJDb2RlYCBmb3IgdGhlIEVudGVyLWtleSwgY2hlY2sgYWdhaW5zdCBga2V5Q29kZWAuXG4gICAgaWYgKGNoYXJDb2RlID09PSAwICYmIGtleUNvZGUgPT09IDEzKSB7XG4gICAgICBjaGFyQ29kZSA9IDEzO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJRTggZG9lcyBub3QgaW1wbGVtZW50IGBjaGFyQ29kZWAsIGJ1dCBga2V5Q29kZWAgaGFzIHRoZSBjb3JyZWN0IHZhbHVlLlxuICAgIGNoYXJDb2RlID0ga2V5Q29kZTtcbiAgfVxuXG4gIC8vIFNvbWUgbm9uLXByaW50YWJsZSBrZXlzIGFyZSByZXBvcnRlZCBpbiBgY2hhckNvZGVgL2BrZXlDb2RlYCwgZGlzY2FyZCB0aGVtLlxuICAvLyBNdXN0IG5vdCBkaXNjYXJkIHRoZSAobm9uLSlwcmludGFibGUgRW50ZXIta2V5LlxuICBpZiAoY2hhckNvZGUgPj0gMzIgfHwgY2hhckNvZGUgPT09IDEzKSB7XG4gICAgcmV0dXJuIGNoYXJDb2RlO1xuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRDaGFyQ29kZTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRLZXlcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRDaGFyQ29kZScpO1xuXG4vKipcbiAqIE5vcm1hbGl6YXRpb24gb2YgZGVwcmVjYXRlZCBIVE1MNSBga2V5YCB2YWx1ZXNcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQjS2V5X25hbWVzXG4gKi9cbnZhciBub3JtYWxpemVLZXkgPSB7XG4gICdFc2MnOiAnRXNjYXBlJyxcbiAgJ1NwYWNlYmFyJzogJyAnLFxuICAnTGVmdCc6ICdBcnJvd0xlZnQnLFxuICAnVXAnOiAnQXJyb3dVcCcsXG4gICdSaWdodCc6ICdBcnJvd1JpZ2h0JyxcbiAgJ0Rvd24nOiAnQXJyb3dEb3duJyxcbiAgJ0RlbCc6ICdEZWxldGUnLFxuICAnV2luJzogJ09TJyxcbiAgJ01lbnUnOiAnQ29udGV4dE1lbnUnLFxuICAnQXBwcyc6ICdDb250ZXh0TWVudScsXG4gICdTY3JvbGwnOiAnU2Nyb2xsTG9jaycsXG4gICdNb3pQcmludGFibGVLZXknOiAnVW5pZGVudGlmaWVkJ1xufTtcblxuLyoqXG4gKiBUcmFuc2xhdGlvbiBmcm9tIGxlZ2FjeSBga2V5Q29kZWAgdG8gSFRNTDUgYGtleWBcbiAqIE9ubHkgc3BlY2lhbCBrZXlzIHN1cHBvcnRlZCwgYWxsIG90aGVycyBkZXBlbmQgb24ga2V5Ym9hcmQgbGF5b3V0IG9yIGJyb3dzZXJcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQjS2V5X25hbWVzXG4gKi9cbnZhciB0cmFuc2xhdGVUb0tleSA9IHtcbiAgODogJ0JhY2tzcGFjZScsXG4gIDk6ICdUYWInLFxuICAxMjogJ0NsZWFyJyxcbiAgMTM6ICdFbnRlcicsXG4gIDE2OiAnU2hpZnQnLFxuICAxNzogJ0NvbnRyb2wnLFxuICAxODogJ0FsdCcsXG4gIDE5OiAnUGF1c2UnLFxuICAyMDogJ0NhcHNMb2NrJyxcbiAgMjc6ICdFc2NhcGUnLFxuICAzMjogJyAnLFxuICAzMzogJ1BhZ2VVcCcsXG4gIDM0OiAnUGFnZURvd24nLFxuICAzNTogJ0VuZCcsXG4gIDM2OiAnSG9tZScsXG4gIDM3OiAnQXJyb3dMZWZ0JyxcbiAgMzg6ICdBcnJvd1VwJyxcbiAgMzk6ICdBcnJvd1JpZ2h0JyxcbiAgNDA6ICdBcnJvd0Rvd24nLFxuICA0NTogJ0luc2VydCcsXG4gIDQ2OiAnRGVsZXRlJyxcbiAgMTEyOiAnRjEnLCAxMTM6ICdGMicsIDExNDogJ0YzJywgMTE1OiAnRjQnLCAxMTY6ICdGNScsIDExNzogJ0Y2JyxcbiAgMTE4OiAnRjcnLCAxMTk6ICdGOCcsIDEyMDogJ0Y5JywgMTIxOiAnRjEwJywgMTIyOiAnRjExJywgMTIzOiAnRjEyJyxcbiAgMTQ0OiAnTnVtTG9jaycsXG4gIDE0NTogJ1Njcm9sbExvY2snLFxuICAyMjQ6ICdNZXRhJ1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgYGtleWAgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50S2V5KG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChuYXRpdmVFdmVudC5rZXkpIHtcbiAgICAvLyBOb3JtYWxpemUgaW5jb25zaXN0ZW50IHZhbHVlcyByZXBvcnRlZCBieSBicm93c2VycyBkdWUgdG9cbiAgICAvLyBpbXBsZW1lbnRhdGlvbnMgb2YgYSB3b3JraW5nIGRyYWZ0IHNwZWNpZmljYXRpb24uXG5cbiAgICAvLyBGaXJlRm94IGltcGxlbWVudHMgYGtleWAgYnV0IHJldHVybnMgYE1velByaW50YWJsZUtleWAgZm9yIGFsbFxuICAgIC8vIHByaW50YWJsZSBjaGFyYWN0ZXJzIChub3JtYWxpemVkIHRvIGBVbmlkZW50aWZpZWRgKSwgaWdub3JlIGl0LlxuICAgIHZhciBrZXkgPSBub3JtYWxpemVLZXlbbmF0aXZlRXZlbnQua2V5XSB8fCBuYXRpdmVFdmVudC5rZXk7XG4gICAgaWYgKGtleSAhPT0gJ1VuaWRlbnRpZmllZCcpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgLy8gQnJvd3NlciBkb2VzIG5vdCBpbXBsZW1lbnQgYGtleWAsIHBvbHlmaWxsIGFzIG11Y2ggb2YgaXQgYXMgd2UgY2FuLlxuICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgIHZhciBjaGFyQ29kZSA9IGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpO1xuXG4gICAgLy8gVGhlIGVudGVyLWtleSBpcyB0ZWNobmljYWxseSBib3RoIHByaW50YWJsZSBhbmQgbm9uLXByaW50YWJsZSBhbmQgY2FuXG4gICAgLy8gdGh1cyBiZSBjYXB0dXJlZCBieSBga2V5cHJlc3NgLCBubyBvdGhlciBub24tcHJpbnRhYmxlIGtleSBzaG91bGQuXG4gICAgcmV0dXJuIGNoYXJDb2RlID09PSAxMyA/ICdFbnRlcicgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgfVxuICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICAvLyBXaGlsZSB1c2VyIGtleWJvYXJkIGxheW91dCBkZXRlcm1pbmVzIHRoZSBhY3R1YWwgbWVhbmluZyBvZiBlYWNoXG4gICAgLy8gYGtleUNvZGVgIHZhbHVlLCBhbG1vc3QgYWxsIGZ1bmN0aW9uIGtleXMgaGF2ZSBhIHVuaXZlcnNhbCB2YWx1ZS5cbiAgICByZXR1cm4gdHJhbnNsYXRlVG9LZXlbbmF0aXZlRXZlbnQua2V5Q29kZV0gfHwgJ1VuaWRlbnRpZmllZCc7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50S2V5OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudE1vZGlmaWVyU3RhdGVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFRyYW5zbGF0aW9uIGZyb20gbW9kaWZpZXIga2V5IHRvIHRoZSBhc3NvY2lhdGVkIHByb3BlcnR5IGluIHRoZSBldmVudC5cbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNrZXlzLU1vZGlmaWVyc1xuICovXG5cbnZhciBtb2RpZmllcktleVRvUHJvcCA9IHtcbiAgJ0FsdCc6ICdhbHRLZXknLFxuICAnQ29udHJvbCc6ICdjdHJsS2V5JyxcbiAgJ01ldGEnOiAnbWV0YUtleScsXG4gICdTaGlmdCc6ICdzaGlmdEtleSdcbn07XG5cbi8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgZ2V0TW9kaWZpZXJTdGF0ZSBzbyB3ZSBzaW1wbHkgbWFwIGl0IHRvIHRoZSBvbmx5XG4vLyBtb2RpZmllciBrZXlzIGV4cG9zZWQgYnkgdGhlIGV2ZW50IGl0c2VsZiwgZG9lcyBub3Qgc3VwcG9ydCBMb2NrLWtleXMuXG4vLyBDdXJyZW50bHksIGFsbCBtYWpvciBicm93c2VycyBleGNlcHQgQ2hyb21lIHNlZW1zIHRvIHN1cHBvcnQgTG9jay1rZXlzLlxuZnVuY3Rpb24gbW9kaWZpZXJTdGF0ZUdldHRlcihrZXlBcmcpIHtcbiAgdmFyIHN5bnRoZXRpY0V2ZW50ID0gdGhpcztcbiAgdmFyIG5hdGl2ZUV2ZW50ID0gc3ludGhldGljRXZlbnQubmF0aXZlRXZlbnQ7XG4gIGlmIChuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUV2ZW50LmdldE1vZGlmaWVyU3RhdGUoa2V5QXJnKTtcbiAgfVxuICB2YXIga2V5UHJvcCA9IG1vZGlmaWVyS2V5VG9Qcm9wW2tleUFyZ107XG4gIHJldHVybiBrZXlQcm9wID8gISFuYXRpdmVFdmVudFtrZXlQcm9wXSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRFdmVudE1vZGlmaWVyU3RhdGUobmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIG1vZGlmaWVyU3RhdGVHZXR0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRNb2RpZmllclN0YXRlOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudFRhcmdldFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0cyB0aGUgdGFyZ2V0IG5vZGUgZnJvbSBhIG5hdGl2ZSBicm93c2VyIGV2ZW50IGJ5IGFjY291bnRpbmcgZm9yXG4gKiBpbmNvbnNpc3RlbmNpZXMgaW4gYnJvd3NlciBET00gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gVGFyZ2V0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG4gIC8vIFNhZmFyaSBtYXkgZmlyZSBldmVudHMgb24gdGV4dCBub2RlcyAoTm9kZS5URVhUX05PREUgaXMgMykuXG4gIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG4gIHJldHVybiB0YXJnZXQubm9kZVR5cGUgPT09IDMgPyB0YXJnZXQucGFyZW50Tm9kZSA6IHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudFRhcmdldDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0SXRlcmF0b3JGblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbnZhciBJVEVSQVRPUl9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsgLy8gQmVmb3JlIFN5bWJvbCBzcGVjLlxuXG4vKipcbiAqIFJldHVybnMgdGhlIGl0ZXJhdG9yIG1ldGhvZCBmdW5jdGlvbiBjb250YWluZWQgb24gdGhlIGl0ZXJhYmxlIG9iamVjdC5cbiAqXG4gKiBCZSBzdXJlIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgaXRlcmFibGUgYXMgY29udGV4dDpcbiAqXG4gKiAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG15SXRlcmFibGUpO1xuICogICAgIGlmIChpdGVyYXRvckZuKSB7XG4gKiAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwobXlJdGVyYWJsZSk7XG4gKiAgICAgICAuLi5cbiAqICAgICB9XG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBtYXliZUl0ZXJhYmxlXG4gKiBAcmV0dXJuIHs/ZnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICB2YXIgaXRlcmF0b3JGbiA9IG1heWJlSXRlcmFibGUgJiYgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pO1xuICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gaXRlcmF0b3JGbjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEl0ZXJhdG9yRm47IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2l2ZW4gYW55IG5vZGUgcmV0dXJuIHRoZSBmaXJzdCBsZWFmIG5vZGUgd2l0aG91dCBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEByZXR1cm4ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldExlYWZOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUgJiYgbm9kZS5maXJzdENoaWxkKSB7XG4gICAgbm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG5leHQgc2libGluZyB3aXRoaW4gYSBjb250YWluZXIuIFRoaXMgd2lsbCB3YWxrIHVwIHRoZVxuICogRE9NIGlmIGEgbm9kZSdzIHNpYmxpbmdzIGhhdmUgYmVlbiBleGhhdXN0ZWQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudHxET01UZXh0Tm9kZX1cbiAqL1xuZnVuY3Rpb24gZ2V0U2libGluZ05vZGUobm9kZSkge1xuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbiAgICB9XG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCBvYmplY3QgZGVzY3JpYmluZyB0aGUgbm9kZXMgd2hpY2ggY29udGFpbiBjaGFyYWN0ZXJzIGF0IG9mZnNldC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IHJvb3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQocm9vdCwgb2Zmc2V0KSB7XG4gIHZhciBub2RlID0gZ2V0TGVhZk5vZGUocm9vdCk7XG4gIHZhciBub2RlU3RhcnQgPSAwO1xuICB2YXIgbm9kZUVuZCA9IDA7XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgbm9kZUVuZCA9IG5vZGVTdGFydCArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuXG4gICAgICBpZiAobm9kZVN0YXJ0IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgLSBub2RlU3RhcnRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgbm9kZVN0YXJ0ID0gbm9kZUVuZDtcbiAgICB9XG5cbiAgICBub2RlID0gZ2V0TGVhZk5vZGUoZ2V0U2libGluZ05vZGUobm9kZSkpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIGNvbnRlbnRLZXkgPSBudWxsO1xuXG4vKipcbiAqIEdldHMgdGhlIGtleSB1c2VkIHRvIGFjY2VzcyB0ZXh0IGNvbnRlbnQgb24gYSBET00gbm9kZS5cbiAqXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBLZXkgdXNlZCB0byBhY2Nlc3MgdGV4dCBjb250ZW50LlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldFRleHRDb250ZW50QWNjZXNzb3IoKSB7XG4gIGlmICghY29udGVudEtleSAmJiBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICAvLyBQcmVmZXIgdGV4dENvbnRlbnQgdG8gaW5uZXJUZXh0IGJlY2F1c2UgbWFueSBicm93c2VycyBzdXBwb3J0IGJvdGggYnV0XG4gICAgLy8gU1ZHIDx0ZXh0PiBlbGVtZW50cyBkb24ndCBzdXBwb3J0IGlubmVyVGV4dCBldmVuIHdoZW4gPGRpdj4gZG9lcy5cbiAgICBjb250ZW50S2V5ID0gJ3RleHRDb250ZW50JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyAndGV4dENvbnRlbnQnIDogJ2lubmVyVGV4dCc7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnRLZXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKTtcbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVtcHR5Q29tcG9uZW50Jyk7XG52YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0TmF0aXZlQ29tcG9uZW50Jyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG4vLyBUbyBhdm9pZCBhIGN5Y2xpYyBkZXBlbmRlbmN5LCB3ZSBjcmVhdGUgdGhlIGZpbmFsIGNsYXNzIGluIHRoaXMgbW9kdWxlXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyID0gZnVuY3Rpb24gKCkge307XG5hc3NpZ24oUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyLnByb3RvdHlwZSwgUmVhY3RDb21wb3NpdGVDb21wb25lbnQuTWl4aW4sIHtcbiAgX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ6IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcbn0pO1xuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpIHtcbiAgaWYgKG93bmVyKSB7XG4gICAgdmFyIG5hbWUgPSBvd25lci5nZXROYW1lKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgdHlwZSByZWZlcmVuY2UgaXMgYSBrbm93biBpbnRlcm5hbCB0eXBlLiBJLmUuIG5vdCBhIHVzZXJcbiAqIHByb3ZpZGVkIGNvbXBvc2l0ZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHR5cGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGlzIGlzIGEgdmFsaWQgaW50ZXJuYWwgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNJbnRlcm5hbENvbXBvbmVudFR5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHR5cGUucHJvdG90eXBlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdHlwZS5wcm90b3R5cGUubW91bnRDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHR5cGUucHJvdG90eXBlLnJlY2VpdmVDb21wb25lbnQgPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogR2l2ZW4gYSBSZWFjdE5vZGUsIGNyZWF0ZSBhbiBpbnN0YW5jZSB0aGF0IHdpbGwgYWN0dWFsbHkgYmUgbW91bnRlZC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7b2JqZWN0fSBBIG5ldyBpbnN0YW5jZSBvZiB0aGUgZWxlbWVudCdzIGNvbnN0cnVjdG9yLlxuICogQHByb3RlY3RlZFxuICovXG5mdW5jdGlvbiBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5vZGUpIHtcbiAgdmFyIGluc3RhbmNlO1xuXG4gIGlmIChub2RlID09PSBudWxsIHx8IG5vZGUgPT09IGZhbHNlKSB7XG4gICAgaW5zdGFuY2UgPSBuZXcgUmVhY3RFbXB0eUNvbXBvbmVudChpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgZWxlbWVudCA9IG5vZGU7XG4gICAgIShlbGVtZW50ICYmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRWxlbWVudCB0eXBlIGlzIGludmFsaWQ6IGV4cGVjdGVkIGEgc3RyaW5nIChmb3IgYnVpbHQtaW4gY29tcG9uZW50cykgJyArICdvciBhIGNsYXNzL2Z1bmN0aW9uIChmb3IgY29tcG9zaXRlIGNvbXBvbmVudHMpIGJ1dCBnb3Q6ICVzLiVzJywgZWxlbWVudC50eXBlID09IG51bGwgPyBlbGVtZW50LnR5cGUgOiB0eXBlb2YgZWxlbWVudC50eXBlLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oZWxlbWVudC5fb3duZXIpKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2Ugc3RyaW5nIHZhbHVlc1xuICAgIGlmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgaW5zdGFuY2UgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5jcmVhdGVJbnRlcm5hbENvbXBvbmVudChlbGVtZW50KTtcbiAgICB9IGVsc2UgaWYgKGlzSW50ZXJuYWxDb21wb25lbnRUeXBlKGVsZW1lbnQudHlwZSkpIHtcbiAgICAgIC8vIFRoaXMgaXMgdGVtcG9yYXJpbHkgYXZhaWxhYmxlIGZvciBjdXN0b20gY29tcG9uZW50cyB0aGF0IGFyZSBub3Qgc3RyaW5nXG4gICAgICAvLyByZXByZXNlbnRhdGlvbnMuIEkuZS4gQVJULiBPbmNlIHRob3NlIGFyZSB1cGRhdGVkIHRvIHVzZSB0aGUgc3RyaW5nXG4gICAgICAvLyByZXByZXNlbnRhdGlvbiwgd2UgY2FuIGRyb3AgdGhpcyBjb2RlIHBhdGguXG4gICAgICBpbnN0YW5jZSA9IG5ldyBlbGVtZW50LnR5cGUoZWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlID0gbmV3IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlcigpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5vZGUgPT09ICdudW1iZXInKSB7XG4gICAgaW5zdGFuY2UgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5jcmVhdGVJbnN0YW5jZUZvclRleHQobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0VuY291bnRlcmVkIGludmFsaWQgUmVhY3Qgbm9kZSBvZiB0eXBlICVzJywgdHlwZW9mIG5vZGUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3RhbmNlLmNvbnN0cnVjdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgaW5zdGFuY2UubW91bnRDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGluc3RhbmNlLnJlY2VpdmVDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGluc3RhbmNlLnVubW91bnRDb21wb25lbnQgPT09ICdmdW5jdGlvbicsICdPbmx5IFJlYWN0IENvbXBvbmVudHMgY2FuIGJlIG1vdW50ZWQuJykgOiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBTZXRzIHVwIHRoZSBpbnN0YW5jZS4gVGhpcyBjYW4gcHJvYmFibHkganVzdCBtb3ZlIGludG8gdGhlIGNvbnN0cnVjdG9yIG5vdy5cbiAgaW5zdGFuY2UuY29uc3RydWN0KG5vZGUpO1xuXG4gIC8vIFRoZXNlIHR3byBmaWVsZHMgYXJlIHVzZWQgYnkgdGhlIERPTSBhbmQgQVJUIGRpZmZpbmcgYWxnb3JpdGhtc1xuICAvLyByZXNwZWN0aXZlbHkuIEluc3RlYWQgb2YgdXNpbmcgZXhwYW5kb3Mgb24gY29tcG9uZW50cywgd2Ugc2hvdWxkIGJlXG4gIC8vIHN0b3JpbmcgdGhlIHN0YXRlIG5lZWRlZCBieSB0aGUgZGlmZmluZyBhbGdvcml0aG1zIGVsc2V3aGVyZS5cbiAgaW5zdGFuY2UuX21vdW50SW5kZXggPSAwO1xuICBpbnN0YW5jZS5fbW91bnRJbWFnZSA9IG51bGw7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpbnN0YW5jZS5faXNPd25lck5lY2Vzc2FyeSA9IGZhbHNlO1xuICAgIGluc3RhbmNlLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciA9IGZhbHNlO1xuICB9XG5cbiAgLy8gSW50ZXJuYWwgaW5zdGFuY2VzIHNob3VsZCBmdWxseSBjb25zdHJ1Y3RlZCBhdCB0aGlzIHBvaW50LCBzbyB0aGV5IHNob3VsZFxuICAvLyBub3QgZ2V0IGFueSBuZXcgZmllbGRzIGFkZGVkIHRvIHRoZW0gYXQgdGhpcyBwb2ludC5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKSB7XG4gICAgICBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoaW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpc0V2ZW50U3VwcG9ydGVkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgdXNlSGFzRmVhdHVyZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgdXNlSGFzRmVhdHVyZSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uICYmIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUgJiZcbiAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAvLyBAc2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZG9taW1wbGVtZW50YXRpb24taGFzZmVhdHVyZVxuICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGV2ZW50IGlzIHN1cHBvcnRlZCBpbiB0aGUgY3VycmVudCBleGVjdXRpb24gZW52aXJvbm1lbnQuXG4gKlxuICogTk9URTogVGhpcyB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseSBmb3Igbm9uLWdlbmVyaWMgZXZlbnRzIHN1Y2ggYXMgYGNoYW5nZWAsXG4gKiBgcmVzZXRgLCBgbG9hZGAsIGBlcnJvcmAsIGFuZCBgc2VsZWN0YC5cbiAqXG4gKiBCb3Jyb3dzIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVTdWZmaXggRXZlbnQgbmFtZSwgZS5nLiBcImNsaWNrXCIuXG4gKiBAcGFyYW0gez9ib29sZWFufSBjYXB0dXJlIENoZWNrIGlmIHRoZSBjYXB0dXJlIHBoYXNlIGlzIHN1cHBvcnRlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IGlzIHN1cHBvcnRlZC5cbiAqIEBpbnRlcm5hbFxuICogQGxpY2Vuc2UgTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4gKi9cbmZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lU3VmZml4LCBjYXB0dXJlKSB7XG4gIGlmICghRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NIHx8IGNhcHR1cmUgJiYgISgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gZG9jdW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWVTdWZmaXg7XG4gIHZhciBpc1N1cHBvcnRlZCA9IChldmVudE5hbWUgaW4gZG9jdW1lbnQpO1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBpZiAoIWlzU3VwcG9ydGVkICYmIHVzZUhhc0ZlYXR1cmUgJiYgZXZlbnROYW1lU3VmZml4ID09PSAnd2hlZWwnKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRTdXBwb3J0ZWQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzVGV4dElucHV0RWxlbWVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAc2VlIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RoZS1pbnB1dC1lbGVtZW50Lmh0bWwjaW5wdXQtdHlwZS1hdHRyLXN1bW1hcnlcbiAqL1xudmFyIHN1cHBvcnRlZElucHV0VHlwZXMgPSB7XG4gICdjb2xvcic6IHRydWUsXG4gICdkYXRlJzogdHJ1ZSxcbiAgJ2RhdGV0aW1lJzogdHJ1ZSxcbiAgJ2RhdGV0aW1lLWxvY2FsJzogdHJ1ZSxcbiAgJ2VtYWlsJzogdHJ1ZSxcbiAgJ21vbnRoJzogdHJ1ZSxcbiAgJ251bWJlcic6IHRydWUsXG4gICdwYXNzd29yZCc6IHRydWUsXG4gICdyYW5nZSc6IHRydWUsXG4gICdzZWFyY2gnOiB0cnVlLFxuICAndGVsJzogdHJ1ZSxcbiAgJ3RleHQnOiB0cnVlLFxuICAndGltZSc6IHRydWUsXG4gICd1cmwnOiB0cnVlLFxuICAnd2Vlayc6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGlzVGV4dElucHV0RWxlbWVudChlbGVtKSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW0gJiYgZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBub2RlTmFtZSAmJiAobm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgc3VwcG9ydGVkSW5wdXRUeXBlc1tlbGVtLnR5cGVdIHx8IG5vZGVOYW1lID09PSAndGV4dGFyZWEnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHRJbnB1dEVsZW1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG9ubHlDaGlsZFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgY2hpbGQgaW4gYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuIGFuZCB2ZXJpZmllcyB0aGF0IHRoZXJlXG4gKiBpcyBvbmx5IG9uZSBjaGlsZCBpbiB0aGUgY29sbGVjdGlvbi4gVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gb2YgdGhpc1xuICogZnVuY3Rpb24gYXNzdW1lcyB0aGF0IGEgc2luZ2xlIGNoaWxkIGdldHMgcGFzc2VkIHdpdGhvdXQgYSB3cmFwcGVyLCBidXQgdGhlXG4gKiBwdXJwb3NlIG9mIHRoaXMgaGVscGVyIGZ1bmN0aW9uIGlzIHRvIGFic3RyYWN0IGF3YXkgdGhlIHBhcnRpY3VsYXIgc3RydWN0dXJlXG4gKiBvZiBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IGNoaWxkcmVuIENoaWxkIGNvbGxlY3Rpb24gc3RydWN0dXJlLlxuICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IFRoZSBmaXJzdCBhbmQgb25seSBgUmVhY3RDb21wb25lbnRgIGNvbnRhaW5lZCBpbiB0aGVcbiAqIHN0cnVjdHVyZS5cbiAqL1xuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gICFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ29ubHlDaGlsZCBtdXN0IGJlIHBhc3NlZCBhIGNoaWxkcmVuIHdpdGggZXhhY3RseSBvbmUgY2hpbGQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gY2hpbGRyZW47XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb25seUNoaWxkOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9IHJlcXVpcmUoJy4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyJyk7XG5cbi8qKlxuICogRXNjYXBlcyBhdHRyaWJ1dGUgdmFsdWUgdG8gcHJldmVudCBzY3JpcHRpbmcgYXR0YWNrcy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIGVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKHZhbHVlKSB7XG4gIHJldHVybiAnXCInICsgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKHZhbHVlKSArICdcIic7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuKiBAcHJvdmlkZXNNb2R1bGUgcmVuZGVyU3VidHJlZUludG9Db250YWluZXJcbiovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1vdW50LnJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzZXRJbm5lckhUTUxcbiAqL1xuXG4vKiBnbG9iYWxzIE1TQXBwICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIFdISVRFU1BBQ0VfVEVTVCA9IC9eWyBcXHJcXG5cXHRcXGZdLztcbnZhciBOT05WSVNJQkxFX1RFU1QgPSAvPCghLS18bGlua3xub3NjcmlwdHxtZXRhfHNjcmlwdHxzdHlsZSlbIFxcclxcblxcdFxcZlxcLz5dLztcblxuLyoqXG4gKiBTZXQgdGhlIGlubmVySFRNTCBwcm9wZXJ0eSBvZiBhIG5vZGUsIGVuc3VyaW5nIHRoYXQgd2hpdGVzcGFjZSBpcyBwcmVzZXJ2ZWRcbiAqIGV2ZW4gaW4gSUU4LlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgc2V0SW5uZXJIVE1MID0gZnVuY3Rpb24gKG5vZGUsIGh0bWwpIHtcbiAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xufTtcblxuLy8gV2luOCBhcHBzOiBBbGxvdyBhbGwgaHRtbCB0byBiZSBpbnNlcnRlZFxuaWYgKHR5cGVvZiBNU0FwcCAhPT0gJ3VuZGVmaW5lZCcgJiYgTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24pIHtcbiAgc2V0SW5uZXJIVE1MID0gZnVuY3Rpb24gKG5vZGUsIGh0bWwpIHtcbiAgICBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmlubmVySFRNTCA9IGh0bWw7XG4gICAgfSk7XG4gIH07XG59XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gSUU4OiBXaGVuIHVwZGF0aW5nIGEganVzdCBjcmVhdGVkIG5vZGUgd2l0aCBpbm5lckhUTUwgb25seSBsZWFkaW5nXG4gIC8vIHdoaXRlc3BhY2UgaXMgcmVtb3ZlZC4gV2hlbiB1cGRhdGluZyBhbiBleGlzdGluZyBub2RlIHdpdGggaW5uZXJIVE1MXG4gIC8vIHdoaXRlc3BhY2UgaW4gcm9vdCBUZXh0Tm9kZXMgaXMgYWxzbyBjb2xsYXBzZWQuXG4gIC8vIEBzZWUgcXVpcmtzbW9kZS5vcmcvYnVncmVwb3J0cy9hcmNoaXZlcy8yMDA0LzExL2lubmVyaHRtbF9hbmRfdC5odG1sXG5cbiAgLy8gRmVhdHVyZSBkZXRlY3Rpb247IG9ubHkgSUU4IGlzIGtub3duIHRvIGJlaGF2ZSBpbXByb3Blcmx5IGxpa2UgdGhpcy5cbiAgdmFyIHRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRlc3RFbGVtZW50LmlubmVySFRNTCA9ICcgJztcbiAgaWYgKHRlc3RFbGVtZW50LmlubmVySFRNTCA9PT0gJycpIHtcbiAgICBzZXRJbm5lckhUTUwgPSBmdW5jdGlvbiAobm9kZSwgaHRtbCkge1xuICAgICAgLy8gTWFnaWMgdGhlb3J5OiBJRTggc3VwcG9zZWRseSBkaWZmZXJlbnRpYXRlcyBiZXR3ZWVuIGFkZGVkIGFuZCB1cGRhdGVkXG4gICAgICAvLyBub2RlcyB3aGVuIHByb2Nlc3NpbmcgaW5uZXJIVE1MLCBpbm5lckhUTUwgb24gdXBkYXRlZCBub2RlcyBzdWZmZXJzXG4gICAgICAvLyBmcm9tIHdvcnNlIHdoaXRlc3BhY2UgYmVoYXZpb3IuIFJlLWFkZGluZyBhIG5vZGUgbGlrZSB0aGlzIHRyaWdnZXJzXG4gICAgICAvLyB0aGUgaW5pdGlhbCBhbmQgbW9yZSBmYXZvcmFibGUgd2hpdGVzcGFjZSBiZWhhdmlvci5cbiAgICAgIC8vIFRPRE86IFdoYXQgdG8gZG8gb24gYSBkZXRhY2hlZCBub2RlP1xuICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5vZGUsIG5vZGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBhbHNvIGltcGxlbWVudCBhIHdvcmthcm91bmQgZm9yIG5vbi12aXNpYmxlIHRhZ3MgZGlzYXBwZWFyaW5nIGludG9cbiAgICAgIC8vIHRoaW4gYWlyIG9uIElFOCwgdGhpcyBvbmx5IGhhcHBlbnMgaWYgdGhlcmUgaXMgbm8gdmlzaWJsZSB0ZXh0XG4gICAgICAvLyBpbi1mcm9udCBvZiB0aGUgbm9uLXZpc2libGUgdGFncy4gUGlnZ3liYWNrIG9uIHRoZSB3aGl0ZXNwYWNlIGZpeFxuICAgICAgLy8gYW5kIHNpbXBseSBjaGVjayBpZiBhbnkgbm9uLXZpc2libGUgdGFncyBhcHBlYXIgaW4gdGhlIHNvdXJjZS5cbiAgICAgIGlmIChXSElURVNQQUNFX1RFU1QudGVzdChodG1sKSB8fCBodG1sWzBdID09PSAnPCcgJiYgTk9OVklTSUJMRV9URVNULnRlc3QoaHRtbCkpIHtcbiAgICAgICAgLy8gUmVjb3ZlciBsZWFkaW5nIHdoaXRlc3BhY2UgYnkgdGVtcG9yYXJpbHkgcHJlcGVuZGluZyBhbnkgY2hhcmFjdGVyLlxuICAgICAgICAvLyBcXHVGRUZGIGhhcyB0aGUgcG90ZW50aWFsIGFkdmFudGFnZSBvZiBiZWluZyB6ZXJvLXdpZHRoL2ludmlzaWJsZS5cbiAgICAgICAgLy8gVWdsaWZ5SlMgZHJvcHMgVStGRUZGIGNoYXJzIHdoZW4gcGFyc2luZywgc28gdXNlIFN0cmluZy5mcm9tQ2hhckNvZGVcbiAgICAgICAgLy8gaW4gaG9wZXMgdGhhdCB0aGlzIGlzIHByZXNlcnZlZCBldmVuIGlmIFwiXFx1RkVGRlwiIGlzIHRyYW5zZm9ybWVkIHRvXG4gICAgICAgIC8vIHRoZSBhY3R1YWwgVW5pY29kZSBjaGFyYWN0ZXIgKGJ5IEJhYmVsLCBmb3IgZXhhbXBsZSkuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9taXNob28vVWdsaWZ5SlMyL2Jsb2IvdjIuNC4yMC9saWIvcGFyc2UuanMjTDIxNlxuICAgICAgICBub2RlLmlubmVySFRNTCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRUZGKSArIGh0bWw7XG5cbiAgICAgICAgLy8gZGVsZXRlRGF0YSBsZWF2ZXMgYW4gZW1wdHkgYFRleHROb2RlYCB3aGljaCBvZmZzZXRzIHRoZSBpbmRleCBvZiBhbGxcbiAgICAgICAgLy8gY2hpbGRyZW4uIERlZmluaXRlbHkgd2FudCB0byBhdm9pZCB0aGlzLlxuICAgICAgICB2YXIgdGV4dE5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmICh0ZXh0Tm9kZS5kYXRhLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQodGV4dE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHROb2RlLmRlbGV0ZURhdGEoMCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0SW5uZXJIVE1MOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzZXRUZXh0Q29udGVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKCcuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcicpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoJy4vc2V0SW5uZXJIVE1MJyk7XG5cbi8qKlxuICogU2V0IHRoZSB0ZXh0Q29udGVudCBwcm9wZXJ0eSBvZiBhIG5vZGUsIGVuc3VyaW5nIHRoYXQgd2hpdGVzcGFjZSBpcyBwcmVzZXJ2ZWRcbiAqIGV2ZW4gaW4gSUU4LiBpbm5lclRleHQgaXMgYSBwb29yIHN1YnN0aXR1dGUgZm9yIHRleHRDb250ZW50IGFuZCwgYW1vbmcgbWFueVxuICogaXNzdWVzLCBpbnNlcnRzIDxicj4gaW5zdGVhZCBvZiB0aGUgbGl0ZXJhbCBuZXdsaW5lIGNoYXJzLiBpbm5lckhUTUwgYmVoYXZlc1xuICogYXMgaXQgc2hvdWxkLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgc2V0VGV4dENvbnRlbnQgPSBmdW5jdGlvbiAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn07XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgaWYgKCEoJ3RleHRDb250ZW50JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgc2V0VGV4dENvbnRlbnQgPSBmdW5jdGlvbiAobm9kZSwgdGV4dCkge1xuICAgICAgc2V0SW5uZXJIVE1MKG5vZGUsIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0ZXh0KSk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRleHRDb250ZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2l2ZW4gYSBgcHJldkVsZW1lbnRgIGFuZCBgbmV4dEVsZW1lbnRgLCBkZXRlcm1pbmVzIGlmIHRoZSBleGlzdGluZ1xuICogaW5zdGFuY2Ugc2hvdWxkIGJlIHVwZGF0ZWQgYXMgb3Bwb3NlZCB0byBiZWluZyBkZXN0cm95ZWQgb3IgcmVwbGFjZWQgYnkgYSBuZXdcbiAqIGluc3RhbmNlLiBCb3RoIGFyZ3VtZW50cyBhcmUgZWxlbWVudHMuIFRoaXMgZW5zdXJlcyB0aGF0IHRoaXMgbG9naWMgY2FuXG4gKiBvcGVyYXRlIG9uIHN0YXRlbGVzcyB0cmVlcyB3aXRob3V0IGFueSBiYWNraW5nIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gcHJldkVsZW1lbnRcbiAqIEBwYXJhbSB7P29iamVjdH0gbmV4dEVsZW1lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV4aXN0aW5nIGluc3RhbmNlIHNob3VsZCBiZSB1cGRhdGVkLlxuICogQHByb3RlY3RlZFxuICovXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpIHtcbiAgdmFyIHByZXZFbXB0eSA9IHByZXZFbGVtZW50ID09PSBudWxsIHx8IHByZXZFbGVtZW50ID09PSBmYWxzZTtcbiAgdmFyIG5leHRFbXB0eSA9IG5leHRFbGVtZW50ID09PSBudWxsIHx8IG5leHRFbGVtZW50ID09PSBmYWxzZTtcbiAgaWYgKHByZXZFbXB0eSB8fCBuZXh0RW1wdHkpIHtcbiAgICByZXR1cm4gcHJldkVtcHR5ID09PSBuZXh0RW1wdHk7XG4gIH1cblxuICB2YXIgcHJldlR5cGUgPSB0eXBlb2YgcHJldkVsZW1lbnQ7XG4gIHZhciBuZXh0VHlwZSA9IHR5cGVvZiBuZXh0RWxlbWVudDtcbiAgaWYgKHByZXZUeXBlID09PSAnc3RyaW5nJyB8fCBwcmV2VHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbmV4dFR5cGUgPT09ICdzdHJpbmcnIHx8IG5leHRUeXBlID09PSAnbnVtYmVyJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV4dFR5cGUgPT09ICdvYmplY3QnICYmIHByZXZFbGVtZW50LnR5cGUgPT09IG5leHRFbGVtZW50LnR5cGUgJiYgcHJldkVsZW1lbnQua2V5ID09PSBuZXh0RWxlbWVudC5rZXk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB0cmF2ZXJzZUFsbENoaWxkcmVuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZUhhbmRsZXMnKTtcblxudmFyIGdldEl0ZXJhdG9yRm4gPSByZXF1aXJlKCcuL2dldEl0ZXJhdG9yRm4nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgU0VQQVJBVE9SID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuU0VQQVJBVE9SO1xudmFyIFNVQlNFUEFSQVRPUiA9ICc6JztcblxuLyoqXG4gKiBUT0RPOiBUZXN0IHRoYXQgYSBzaW5nbGUgY2hpbGQgYW5kIGFuIGFycmF5IHdpdGggb25lIGl0ZW0gaGF2ZSB0aGUgc2FtZSBrZXlcbiAqIHBhdHRlcm4uXG4gKi9cblxudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZXJMb29rdXAgPSB7XG4gICc9JzogJz0wJyxcbiAgJy4nOiAnPTEnLFxuICAnOic6ICc9Midcbn07XG5cbnZhciB1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCA9IC9bPS46XS9nO1xuXG52YXIgZGlkV2FybkFib3V0TWFwcyA9IGZhbHNlO1xuXG5mdW5jdGlvbiB1c2VyUHJvdmlkZWRLZXlFc2NhcGVyKG1hdGNoKSB7XG4gIHJldHVybiB1c2VyUHJvdmlkZWRLZXlFc2NhcGVyTG9va3VwW21hdGNoXTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGtleSBzdHJpbmcgdGhhdCBpZGVudGlmaWVzIGEgY29tcG9uZW50IHdpdGhpbiBhIHNldC5cbiAqXG4gKiBAcGFyYW0geyp9IGNvbXBvbmVudCBBIGNvbXBvbmVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYSBtYW51YWwga2V5LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IHRoYXQgaXMgdXNlZCBpZiBhIG1hbnVhbCBrZXkgaXMgbm90IHByb3ZpZGVkLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRLZXkoY29tcG9uZW50LCBpbmRleCkge1xuICBpZiAoY29tcG9uZW50ICYmIGNvbXBvbmVudC5rZXkgIT0gbnVsbCkge1xuICAgIC8vIEV4cGxpY2l0IGtleVxuICAgIHJldHVybiB3cmFwVXNlclByb3ZpZGVkS2V5KGNvbXBvbmVudC5rZXkpO1xuICB9XG4gIC8vIEltcGxpY2l0IGtleSBkZXRlcm1pbmVkIGJ5IHRoZSBpbmRleCBpbiB0aGUgc2V0XG4gIHJldHVybiBpbmRleC50b1N0cmluZygzNik7XG59XG5cbi8qKlxuICogRXNjYXBlIGEgY29tcG9uZW50IGtleSBzbyB0aGF0IGl0IGlzIHNhZmUgdG8gdXNlIGluIGEgcmVhY3RpZC5cbiAqXG4gKiBAcGFyYW0geyp9IHRleHQgQ29tcG9uZW50IGtleSB0byBiZSBlc2NhcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiBlc2NhcGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UodXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsIHVzZXJQcm92aWRlZEtleUVzY2FwZXIpO1xufVxuXG4vKipcbiAqIFdyYXAgYSBga2V5YCB2YWx1ZSBleHBsaWNpdGx5IHByb3ZpZGVkIGJ5IHRoZSB1c2VyIHRvIGRpc3Rpbmd1aXNoIGl0IGZyb21cbiAqIGltcGxpY2l0bHktZ2VuZXJhdGVkIGtleXMgZ2VuZXJhdGVkIGJ5IGEgY29tcG9uZW50J3MgaW5kZXggaW4gaXRzIHBhcmVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFZhbHVlIG9mIGEgdXNlci1wcm92aWRlZCBga2V5YCBhdHRyaWJ1dGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gd3JhcFVzZXJQcm92aWRlZEtleShrZXkpIHtcbiAgcmV0dXJuICckJyArIGVzY2FwZVVzZXJQcm92aWRlZEtleShrZXkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lU29GYXIgTmFtZSBvZiB0aGUga2V5IHBhdGggc28gZmFyLlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aXRoIGVhY2ggY2hpbGQgZm91bmQuXG4gKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgVXNlZCB0byBwYXNzIGluZm9ybWF0aW9uIHRocm91Z2hvdXQgdGhlIHRyYXZlcnNhbFxuICogcHJvY2Vzcy5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgbmFtZVNvRmFyLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuXG4gIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBBbGwgb2YgdGhlIGFib3ZlIGFyZSBwZXJjZWl2ZWQgYXMgbnVsbC5cbiAgICBjaGlsZHJlbiA9IG51bGw7XG4gIH1cblxuICBpZiAoY2hpbGRyZW4gPT09IG51bGwgfHwgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ251bWJlcicgfHwgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgIGNhbGxiYWNrKHRyYXZlcnNlQ29udGV4dCwgY2hpbGRyZW4sXG4gICAgLy8gSWYgaXQncyB0aGUgb25seSBjaGlsZCwgdHJlYXQgdGhlIG5hbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gYW4gYXJyYXlcbiAgICAvLyBzbyB0aGF0IGl0J3MgY29uc2lzdGVudCBpZiB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGdyb3dzLlxuICAgIG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyKTtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHZhciBjaGlsZDtcbiAgdmFyIG5leHROYW1lO1xuICB2YXIgc3VidHJlZUNvdW50ID0gMDsgLy8gQ291bnQgb2YgY2hpbGRyZW4gZm91bmQgaW4gdGhlIGN1cnJlbnQgc3VidHJlZS5cbiAgdmFyIG5leHROYW1lUHJlZml4ID0gbmFtZVNvRmFyID09PSAnJyA/IFNFUEFSQVRPUiA6IG5hbWVTb0ZhciArIFNVQlNFUEFSQVRPUjtcblxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaSk7XG4gICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKTtcbiAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKGNoaWxkcmVuKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IGNoaWxkcmVuLmVudHJpZXMpIHtcbiAgICAgICAgdmFyIGlpID0gMDtcbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIGNoaWxkID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCBpaSsrKTtcbiAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhkaWRXYXJuQWJvdXRNYXBzLCAnVXNpbmcgTWFwcyBhcyBjaGlsZHJlbiBpcyBub3QgeWV0IGZ1bGx5IHN1cHBvcnRlZC4gSXQgaXMgYW4gJyArICdleHBlcmltZW50YWwgZmVhdHVyZSB0aGF0IG1pZ2h0IGJlIHJlbW92ZWQuIENvbnZlcnQgaXQgdG8gYSAnICsgJ3NlcXVlbmNlIC8gaXRlcmFibGUgb2Yga2V5ZWQgUmVhY3RFbGVtZW50cyBpbnN0ZWFkLicpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGRpZFdhcm5BYm91dE1hcHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEl0ZXJhdG9yIHdpbGwgcHJvdmlkZSBlbnRyeSBbayx2XSB0dXBsZXMgcmF0aGVyIHRoYW4gdmFsdWVzLlxuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgIGNoaWxkID0gZW50cnlbMV07XG4gICAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgd3JhcFVzZXJQcm92aWRlZEtleShlbnRyeVswXSkgKyBTVUJTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIDApO1xuICAgICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGFkZGVuZHVtID0gJyc7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhZGRlbmR1bSA9ICcgSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSAnICsgJ2luc3RlYWQgb3Igd3JhcCB0aGUgb2JqZWN0IHVzaW5nIGNyZWF0ZUZyYWdtZW50KG9iamVjdCkgZnJvbSB0aGUgJyArICdSZWFjdCBhZGQtb25zLic7XG4gICAgICAgIGlmIChjaGlsZHJlbi5faXNSZWFjdEVsZW1lbnQpIHtcbiAgICAgICAgICBhZGRlbmR1bSA9ICcgSXQgbG9va3MgbGlrZSB5b3VcXCdyZSB1c2luZyBhbiBlbGVtZW50IGNyZWF0ZWQgYnkgYSBkaWZmZXJlbnQgJyArICd2ZXJzaW9uIG9mIFJlYWN0LiBNYWtlIHN1cmUgdG8gdXNlIG9ubHkgb25lIGNvcHkgb2YgUmVhY3QuJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIGFkZGVuZHVtICs9ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlblN0cmluZyA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiAlcykuJXMnLCBjaGlsZHJlblN0cmluZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScgPyAnb2JqZWN0IHdpdGgga2V5cyB7JyArIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5qb2luKCcsICcpICsgJ30nIDogY2hpbGRyZW5TdHJpbmcsIGFkZGVuZHVtKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1YnRyZWVDb3VudDtcbn1cblxuLyoqXG4gKiBUcmF2ZXJzZXMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLCBidXRcbiAqIG1pZ2h0IGFsc28gYmUgc3BlY2lmaWVkIHRocm91Z2ggYXR0cmlidXRlczpcbiAqXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4sIC4uLilgXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMubGVmdFBhbmVsQ2hpbGRyZW4sIC4uLilgXG4gKlxuICogVGhlIGB0cmF2ZXJzZUNvbnRleHRgIGlzIGFuIG9wdGlvbmFsIGFyZ3VtZW50IHRoYXQgaXMgcGFzc2VkIHRocm91Z2ggdGhlXG4gKiBlbnRpcmUgdHJhdmVyc2FsLiBJdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBhY2N1bXVsYXRpb25zIG9yIGFueXRoaW5nIGVsc2UgdGhhdFxuICogdGhlIGNhbGxiYWNrIG1pZ2h0IGZpbmQgcmVsZXZhbnQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBvYmplY3QuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgVG8gaW52b2tlIHVwb24gdHJhdmVyc2luZyBlYWNoIGNoaWxkLlxuICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IENvbnRleHQgZm9yIHRyYXZlcnNhbC5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sICcnLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0cmF2ZXJzZUFsbENoaWxkcmVuOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgdmFsaWRhdGVET01OZXN0aW5nXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgdmFsaWRhdGVET01OZXN0aW5nID0gZW1wdHlGdW5jdGlvbjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gVGhpcyB2YWxpZGF0aW9uIGNvZGUgd2FzIHdyaXR0ZW4gYmFzZWQgb24gdGhlIEhUTUw1IHBhcnNpbmcgc3BlYzpcbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaGFzLWFuLWVsZW1lbnQtaW4tc2NvcGVcbiAgLy9cbiAgLy8gTm90ZTogdGhpcyBkb2VzIG5vdCBjYXRjaCBhbGwgaW52YWxpZCBuZXN0aW5nLCBub3IgZG9lcyBpdCB0cnkgdG8gKGFzIGl0J3NcbiAgLy8gbm90IGNsZWFyIHdoYXQgcHJhY3RpY2FsIGJlbmVmaXQgZG9pbmcgc28gcHJvdmlkZXMpOyBpbnN0ZWFkLCB3ZSB3YXJuIG9ubHlcbiAgLy8gZm9yIGNhc2VzIHdoZXJlIHRoZSBwYXJzZXIgd2lsbCBnaXZlIGEgcGFyc2UgdHJlZSBkaWZmZXJpbmcgZnJvbSB3aGF0IFJlYWN0XG4gIC8vIGludGVuZGVkLiBGb3IgZXhhbXBsZSwgPGI+PGRpdj48L2Rpdj48L2I+IGlzIGludmFsaWQgYnV0IHdlIGRvbid0IHdhcm5cbiAgLy8gYmVjYXVzZSBpdCBzdGlsbCBwYXJzZXMgY29ycmVjdGx5OyB3ZSBkbyB3YXJuIGZvciBvdGhlciBjYXNlcyBsaWtlIG5lc3RlZFxuICAvLyA8cD4gdGFncyB3aGVyZSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBpbXBsaWNpdGx5IGNsb3NlcyB0aGVcbiAgLy8gZmlyc3QsIGNhdXNpbmcgYSBjb25mdXNpbmcgbWVzcy5cblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNzcGVjaWFsXG4gIHZhciBzcGVjaWFsVGFncyA9IFsnYWRkcmVzcycsICdhcHBsZXQnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2Jhc2UnLCAnYmFzZWZvbnQnLCAnYmdzb3VuZCcsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnY2VudGVyJywgJ2NvbCcsICdjb2xncm91cCcsICdkZCcsICdkZXRhaWxzJywgJ2RpcicsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnZnJhbWUnLCAnZnJhbWVzZXQnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpc2luZGV4JywgJ2xpJywgJ2xpbmsnLCAnbGlzdGluZycsICdtYWluJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ25hdicsICdub2VtYmVkJywgJ25vZnJhbWVzJywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdwJywgJ3BhcmFtJywgJ3BsYWludGV4dCcsICdwcmUnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NvdXJjZScsICdzdHlsZScsICdzdW1tYXJ5JywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RlbXBsYXRlJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3VsJywgJ3dicicsICd4bXAnXTtcblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNoYXMtYW4tZWxlbWVudC1pbi1zY29wZVxuICB2YXIgaW5TY29wZVRhZ3MgPSBbJ2FwcGxldCcsICdjYXB0aW9uJywgJ2h0bWwnLCAndGFibGUnLCAndGQnLCAndGgnLCAnbWFycXVlZScsICdvYmplY3QnLCAndGVtcGxhdGUnLFxuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2h0bWwtaW50ZWdyYXRpb24tcG9pbnRcbiAgLy8gVE9ETzogRGlzdGluZ3Vpc2ggYnkgbmFtZXNwYWNlIGhlcmUgLS0gZm9yIDx0aXRsZT4sIGluY2x1ZGluZyBpdCBoZXJlXG4gIC8vIGVycnMgb24gdGhlIHNpZGUgb2YgZmV3ZXIgd2FybmluZ3NcbiAgJ2ZvcmVpZ25PYmplY3QnLCAnZGVzYycsICd0aXRsZSddO1xuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2hhcy1hbi1lbGVtZW50LWluLWJ1dHRvbi1zY29wZVxuICB2YXIgYnV0dG9uU2NvcGVUYWdzID0gaW5TY29wZVRhZ3MuY29uY2F0KFsnYnV0dG9uJ10pO1xuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2dlbmVyYXRlLWltcGxpZWQtZW5kLXRhZ3NcbiAgdmFyIGltcGxpZWRFbmRUYWdzID0gWydkZCcsICdkdCcsICdsaScsICdvcHRpb24nLCAnb3B0Z3JvdXAnLCAncCcsICdycCcsICdydCddO1xuXG4gIHZhciBlbXB0eUFuY2VzdG9ySW5mbyA9IHtcbiAgICBwYXJlbnRUYWc6IG51bGwsXG5cbiAgICBmb3JtVGFnOiBudWxsLFxuICAgIGFUYWdJblNjb3BlOiBudWxsLFxuICAgIGJ1dHRvblRhZ0luU2NvcGU6IG51bGwsXG4gICAgbm9iclRhZ0luU2NvcGU6IG51bGwsXG4gICAgcFRhZ0luQnV0dG9uU2NvcGU6IG51bGwsXG5cbiAgICBsaXN0SXRlbVRhZ0F1dG9jbG9zaW5nOiBudWxsLFxuICAgIGRsSXRlbVRhZ0F1dG9jbG9zaW5nOiBudWxsXG4gIH07XG5cbiAgdmFyIHVwZGF0ZWRBbmNlc3RvckluZm8gPSBmdW5jdGlvbiAob2xkSW5mbywgdGFnLCBpbnN0YW5jZSkge1xuICAgIHZhciBhbmNlc3RvckluZm8gPSBhc3NpZ24oe30sIG9sZEluZm8gfHwgZW1wdHlBbmNlc3RvckluZm8pO1xuICAgIHZhciBpbmZvID0geyB0YWc6IHRhZywgaW5zdGFuY2U6IGluc3RhbmNlIH07XG5cbiAgICBpZiAoaW5TY29wZVRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSkge1xuICAgICAgYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlID0gbnVsbDtcbiAgICAgIGFuY2VzdG9ySW5mby5idXR0b25UYWdJblNjb3BlID0gbnVsbDtcbiAgICAgIGFuY2VzdG9ySW5mby5ub2JyVGFnSW5TY29wZSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChidXR0b25TY29wZVRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSkge1xuICAgICAgYW5jZXN0b3JJbmZvLnBUYWdJbkJ1dHRvblNjb3BlID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZWUgcnVsZXMgZm9yICdsaScsICdkZCcsICdkdCcgc3RhcnQgdGFncyBpblxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmJvZHlcbiAgICBpZiAoc3BlY2lhbFRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSAmJiB0YWcgIT09ICdhZGRyZXNzJyAmJiB0YWcgIT09ICdkaXYnICYmIHRhZyAhPT0gJ3AnKSB7XG4gICAgICBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZyA9IG51bGw7XG4gICAgICBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3NpbmcgPSBudWxsO1xuICAgIH1cblxuICAgIGFuY2VzdG9ySW5mby5wYXJlbnRUYWcgPSBpbmZvO1xuXG4gICAgaWYgKHRhZyA9PT0gJ2Zvcm0nKSB7XG4gICAgICBhbmNlc3RvckluZm8uZm9ybVRhZyA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdhJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ2J1dHRvbicpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5idXR0b25UYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ25vYnInKSB7XG4gICAgICBhbmNlc3RvckluZm8ubm9iclRhZ0luU2NvcGUgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAncCcpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZSA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdsaScpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ2RkJyB8fCB0YWcgPT09ICdkdCcpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5kbEl0ZW1UYWdBdXRvY2xvc2luZyA9IGluZm87XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuY2VzdG9ySW5mbztcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyXG4gICAqL1xuICB2YXIgaXNUYWdWYWxpZFdpdGhQYXJlbnQgPSBmdW5jdGlvbiAodGFnLCBwYXJlbnRUYWcpIHtcbiAgICAvLyBGaXJzdCwgbGV0J3MgY2hlY2sgaWYgd2UncmUgaW4gYW4gdW51c3VhbCBwYXJzaW5nIG1vZGUuLi5cbiAgICBzd2l0Y2ggKHBhcmVudFRhZykge1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluc2VsZWN0XG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnb3B0aW9uJyB8fCB0YWcgPT09ICdvcHRncm91cCcgfHwgdGFnID09PSAnI3RleHQnO1xuICAgICAgY2FzZSAnb3B0Z3JvdXAnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnb3B0aW9uJyB8fCB0YWcgPT09ICcjdGV4dCc7XG4gICAgICAvLyBTdHJpY3RseSBzcGVha2luZywgc2VlaW5nIGFuIDxvcHRpb24+IGRvZXNuJ3QgbWVhbiB3ZSdyZSBpbiBhIDxzZWxlY3Q+XG4gICAgICAvLyBidXRcbiAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICcjdGV4dCc7XG5cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnRkXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5jYXB0aW9uXG4gICAgICAvLyBObyBzcGVjaWFsIGJlaGF2aW9yIHNpbmNlIHRoZXNlIHJ1bGVzIGZhbGwgYmFjayB0byBcImluIGJvZHlcIiBtb2RlIGZvclxuICAgICAgLy8gYWxsIGV4Y2VwdCBzcGVjaWFsIHRhYmxlIG5vZGVzIHdoaWNoIGNhdXNlIGJhZCBwYXJzaW5nIGJlaGF2aW9yIGFueXdheS5cblxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludHJcbiAgICAgIGNhc2UgJ3RyJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ3RoJyB8fCB0YWcgPT09ICd0ZCcgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50Ym9keVxuICAgICAgY2FzZSAndGJvZHknOlxuICAgICAgY2FzZSAndGhlYWQnOlxuICAgICAgY2FzZSAndGZvb3QnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAndHInIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcblxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluY29sZ3JvdXBcbiAgICAgIGNhc2UgJ2NvbGdyb3VwJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2NvbCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50YWJsZVxuICAgICAgY2FzZSAndGFibGUnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnY2FwdGlvbicgfHwgdGFnID09PSAnY29sZ3JvdXAnIHx8IHRhZyA9PT0gJ3Rib2R5JyB8fCB0YWcgPT09ICd0Zm9vdCcgfHwgdGFnID09PSAndGhlYWQnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcblxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluaGVhZFxuICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdiYXNlJyB8fCB0YWcgPT09ICdiYXNlZm9udCcgfHwgdGFnID09PSAnYmdzb3VuZCcgfHwgdGFnID09PSAnbGluaycgfHwgdGFnID09PSAnbWV0YScgfHwgdGFnID09PSAndGl0bGUnIHx8IHRhZyA9PT0gJ25vc2NyaXB0JyB8fCB0YWcgPT09ICdub2ZyYW1lcycgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zZW1hbnRpY3MuaHRtbCN0aGUtaHRtbC1lbGVtZW50XG4gICAgICBjYXNlICdodG1sJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2hlYWQnIHx8IHRhZyA9PT0gJ2JvZHknO1xuICAgIH1cblxuICAgIC8vIFByb2JhYmx5IGluIHRoZSBcImluIGJvZHlcIiBwYXJzaW5nIG1vZGUsIHNvIHdlIG91dGxhdyBvbmx5IHRhZyBjb21ib3NcbiAgICAvLyB3aGVyZSB0aGUgcGFyc2luZyBydWxlcyBjYXVzZSBpbXBsaWNpdCBvcGVucyBvciBjbG9zZXMgdG8gYmUgYWRkZWQuXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluYm9keVxuICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICBjYXNlICdoMSc6XG4gICAgICBjYXNlICdoMic6XG4gICAgICBjYXNlICdoMyc6XG4gICAgICBjYXNlICdoNCc6XG4gICAgICBjYXNlICdoNSc6XG4gICAgICBjYXNlICdoNic6XG4gICAgICAgIHJldHVybiBwYXJlbnRUYWcgIT09ICdoMScgJiYgcGFyZW50VGFnICE9PSAnaDInICYmIHBhcmVudFRhZyAhPT0gJ2gzJyAmJiBwYXJlbnRUYWcgIT09ICdoNCcgJiYgcGFyZW50VGFnICE9PSAnaDUnICYmIHBhcmVudFRhZyAhPT0gJ2g2JztcblxuICAgICAgY2FzZSAncnAnOlxuICAgICAgY2FzZSAncnQnOlxuICAgICAgICByZXR1cm4gaW1wbGllZEVuZFRhZ3MuaW5kZXhPZihwYXJlbnRUYWcpID09PSAtMTtcblxuICAgICAgY2FzZSAnY2FwdGlvbic6XG4gICAgICBjYXNlICdjb2wnOlxuICAgICAgY2FzZSAnY29sZ3JvdXAnOlxuICAgICAgY2FzZSAnZnJhbWUnOlxuICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICBjYXNlICd0Ym9keSc6XG4gICAgICBjYXNlICd0ZCc6XG4gICAgICBjYXNlICd0Zm9vdCc6XG4gICAgICBjYXNlICd0aCc6XG4gICAgICBjYXNlICd0aGVhZCc6XG4gICAgICBjYXNlICd0cic6XG4gICAgICAgIC8vIFRoZXNlIHRhZ3MgYXJlIG9ubHkgdmFsaWQgd2l0aCBhIGZldyBwYXJlbnRzIHRoYXQgaGF2ZSBzcGVjaWFsIGNoaWxkXG4gICAgICAgIC8vIHBhcnNpbmcgcnVsZXMgLS0gaWYgd2UncmUgZG93biBoZXJlLCB0aGVuIG5vbmUgb2YgdGhvc2UgbWF0Y2hlZCBhbmRcbiAgICAgICAgLy8gc28gd2UgYWxsb3cgaXQgb25seSBpZiB3ZSBkb24ndCBrbm93IHdoYXQgdGhlIHBhcmVudCBpcywgYXMgYWxsIG90aGVyXG4gICAgICAgIC8vIGNhc2VzIGFyZSBpbnZhbGlkLlxuICAgICAgICByZXR1cm4gcGFyZW50VGFnID09IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlclxuICAgKi9cbiAgdmFyIGZpbmRJbnZhbGlkQW5jZXN0b3JGb3JUYWcgPSBmdW5jdGlvbiAodGFnLCBhbmNlc3RvckluZm8pIHtcbiAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgY2FzZSAnYWRkcmVzcyc6XG4gICAgICBjYXNlICdhcnRpY2xlJzpcbiAgICAgIGNhc2UgJ2FzaWRlJzpcbiAgICAgIGNhc2UgJ2Jsb2NrcXVvdGUnOlxuICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIGNhc2UgJ2RldGFpbHMnOlxuICAgICAgY2FzZSAnZGlhbG9nJzpcbiAgICAgIGNhc2UgJ2Rpcic6XG4gICAgICBjYXNlICdkaXYnOlxuICAgICAgY2FzZSAnZGwnOlxuICAgICAgY2FzZSAnZmllbGRzZXQnOlxuICAgICAgY2FzZSAnZmlnY2FwdGlvbic6XG4gICAgICBjYXNlICdmaWd1cmUnOlxuICAgICAgY2FzZSAnZm9vdGVyJzpcbiAgICAgIGNhc2UgJ2hlYWRlcic6XG4gICAgICBjYXNlICdoZ3JvdXAnOlxuICAgICAgY2FzZSAnbWFpbic6XG4gICAgICBjYXNlICdtZW51JzpcbiAgICAgIGNhc2UgJ25hdic6XG4gICAgICBjYXNlICdvbCc6XG4gICAgICBjYXNlICdwJzpcbiAgICAgIGNhc2UgJ3NlY3Rpb24nOlxuICAgICAgY2FzZSAnc3VtbWFyeSc6XG4gICAgICBjYXNlICd1bCc6XG5cbiAgICAgIGNhc2UgJ3ByZSc6XG4gICAgICBjYXNlICdsaXN0aW5nJzpcblxuICAgICAgY2FzZSAndGFibGUnOlxuXG4gICAgICBjYXNlICdocic6XG5cbiAgICAgIGNhc2UgJ3htcCc6XG5cbiAgICAgIGNhc2UgJ2gxJzpcbiAgICAgIGNhc2UgJ2gyJzpcbiAgICAgIGNhc2UgJ2gzJzpcbiAgICAgIGNhc2UgJ2g0JzpcbiAgICAgIGNhc2UgJ2g1JzpcbiAgICAgIGNhc2UgJ2g2JzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZTtcblxuICAgICAgY2FzZSAnZm9ybSc6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uZm9ybVRhZyB8fCBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGU7XG5cbiAgICAgIGNhc2UgJ2xpJzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nO1xuXG4gICAgICBjYXNlICdkZCc6XG4gICAgICBjYXNlICdkdCc6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3Npbmc7XG5cbiAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZTtcblxuICAgICAgY2FzZSAnYSc6XG4gICAgICAgIC8vIFNwZWMgc2F5cyBzb21ldGhpbmcgYWJvdXQgc3RvcmluZyBhIGxpc3Qgb2YgbWFya2VycywgYnV0IGl0IHNvdW5kc1xuICAgICAgICAvLyBlcXVpdmFsZW50IHRvIHRoaXMgY2hlY2suXG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uYVRhZ0luU2NvcGU7XG5cbiAgICAgIGNhc2UgJ25vYnInOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHaXZlbiBhIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50IGluc3RhbmNlLCByZXR1cm4gYSBsaXN0IG9mIGl0cyByZWN1cnNpdmVcbiAgICogb3duZXJzLCBzdGFydGluZyBhdCB0aGUgcm9vdCBhbmQgZW5kaW5nIHdpdGggdGhlIGluc3RhbmNlIGl0c2VsZi5cbiAgICovXG4gIHZhciBmaW5kT3duZXJTdGFjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICAvKmVzbGludC1kaXNhYmxlIHNwYWNlLWFmdGVyLWtleXdvcmRzICovXG4gICAgZG8ge1xuICAgICAgLyplc2xpbnQtZW5hYmxlIHNwYWNlLWFmdGVyLWtleXdvcmRzICovXG4gICAgICBzdGFjay5wdXNoKGluc3RhbmNlKTtcbiAgICB9IHdoaWxlIChpbnN0YW5jZSA9IGluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5fb3duZXIpO1xuICAgIHN0YWNrLnJldmVyc2UoKTtcbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG5cbiAgdmFyIGRpZFdhcm4gPSB7fTtcblxuICB2YWxpZGF0ZURPTU5lc3RpbmcgPSBmdW5jdGlvbiAoY2hpbGRUYWcsIGNoaWxkSW5zdGFuY2UsIGFuY2VzdG9ySW5mbykge1xuICAgIGFuY2VzdG9ySW5mbyA9IGFuY2VzdG9ySW5mbyB8fCBlbXB0eUFuY2VzdG9ySW5mbztcbiAgICB2YXIgcGFyZW50SW5mbyA9IGFuY2VzdG9ySW5mby5wYXJlbnRUYWc7XG4gICAgdmFyIHBhcmVudFRhZyA9IHBhcmVudEluZm8gJiYgcGFyZW50SW5mby50YWc7XG5cbiAgICB2YXIgaW52YWxpZFBhcmVudCA9IGlzVGFnVmFsaWRXaXRoUGFyZW50KGNoaWxkVGFnLCBwYXJlbnRUYWcpID8gbnVsbCA6IHBhcmVudEluZm87XG4gICAgdmFyIGludmFsaWRBbmNlc3RvciA9IGludmFsaWRQYXJlbnQgPyBudWxsIDogZmluZEludmFsaWRBbmNlc3RvckZvclRhZyhjaGlsZFRhZywgYW5jZXN0b3JJbmZvKTtcbiAgICB2YXIgcHJvYmxlbWF0aWMgPSBpbnZhbGlkUGFyZW50IHx8IGludmFsaWRBbmNlc3RvcjtcblxuICAgIGlmIChwcm9ibGVtYXRpYykge1xuICAgICAgdmFyIGFuY2VzdG9yVGFnID0gcHJvYmxlbWF0aWMudGFnO1xuICAgICAgdmFyIGFuY2VzdG9ySW5zdGFuY2UgPSBwcm9ibGVtYXRpYy5pbnN0YW5jZTtcblxuICAgICAgdmFyIGNoaWxkT3duZXIgPSBjaGlsZEluc3RhbmNlICYmIGNoaWxkSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgIHZhciBhbmNlc3Rvck93bmVyID0gYW5jZXN0b3JJbnN0YW5jZSAmJiBhbmNlc3Rvckluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG5cbiAgICAgIHZhciBjaGlsZE93bmVycyA9IGZpbmRPd25lclN0YWNrKGNoaWxkT3duZXIpO1xuICAgICAgdmFyIGFuY2VzdG9yT3duZXJzID0gZmluZE93bmVyU3RhY2soYW5jZXN0b3JPd25lcik7XG5cbiAgICAgIHZhciBtaW5TdGFja0xlbiA9IE1hdGgubWluKGNoaWxkT3duZXJzLmxlbmd0aCwgYW5jZXN0b3JPd25lcnMubGVuZ3RoKTtcbiAgICAgIHZhciBpO1xuXG4gICAgICB2YXIgZGVlcGVzdENvbW1vbiA9IC0xO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG1pblN0YWNrTGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGNoaWxkT3duZXJzW2ldID09PSBhbmNlc3Rvck93bmVyc1tpXSkge1xuICAgICAgICAgIGRlZXBlc3RDb21tb24gPSBpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBVTktOT1dOID0gJyh1bmtub3duKSc7XG4gICAgICB2YXIgY2hpbGRPd25lck5hbWVzID0gY2hpbGRPd25lcnMuc2xpY2UoZGVlcGVzdENvbW1vbiArIDEpLm1hcChmdW5jdGlvbiAoaW5zdCkge1xuICAgICAgICByZXR1cm4gaW5zdC5nZXROYW1lKCkgfHwgVU5LTk9XTjtcbiAgICAgIH0pO1xuICAgICAgdmFyIGFuY2VzdG9yT3duZXJOYW1lcyA9IGFuY2VzdG9yT3duZXJzLnNsaWNlKGRlZXBlc3RDb21tb24gKyAxKS5tYXAoZnVuY3Rpb24gKGluc3QpIHtcbiAgICAgICAgcmV0dXJuIGluc3QuZ2V0TmFtZSgpIHx8IFVOS05PV047XG4gICAgICB9KTtcbiAgICAgIHZhciBvd25lckluZm8gPSBbXS5jb25jYXQoXG4gICAgICAvLyBJZiB0aGUgcGFyZW50IGFuZCBjaGlsZCBpbnN0YW5jZXMgaGF2ZSBhIGNvbW1vbiBvd25lciBhbmNlc3Rvciwgc3RhcnRcbiAgICAgIC8vIHdpdGggdGhhdCAtLSBvdGhlcndpc2Ugd2UganVzdCBzdGFydCB3aXRoIHRoZSBwYXJlbnQncyBvd25lcnMuXG4gICAgICBkZWVwZXN0Q29tbW9uICE9PSAtMSA/IGNoaWxkT3duZXJzW2RlZXBlc3RDb21tb25dLmdldE5hbWUoKSB8fCBVTktOT1dOIDogW10sIGFuY2VzdG9yT3duZXJOYW1lcywgYW5jZXN0b3JUYWcsXG4gICAgICAvLyBJZiB3ZSdyZSB3YXJuaW5nIGFib3V0IGFuIGludmFsaWQgKG5vbi1wYXJlbnQpIGFuY2VzdHJ5LCBhZGQgJy4uLidcbiAgICAgIGludmFsaWRBbmNlc3RvciA/IFsnLi4uJ10gOiBbXSwgY2hpbGRPd25lck5hbWVzLCBjaGlsZFRhZykuam9pbignID4gJyk7XG5cbiAgICAgIHZhciB3YXJuS2V5ID0gISFpbnZhbGlkUGFyZW50ICsgJ3wnICsgY2hpbGRUYWcgKyAnfCcgKyBhbmNlc3RvclRhZyArICd8JyArIG93bmVySW5mbztcbiAgICAgIGlmIChkaWRXYXJuW3dhcm5LZXldKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRpZFdhcm5bd2FybktleV0gPSB0cnVlO1xuXG4gICAgICBpZiAoaW52YWxpZFBhcmVudCkge1xuICAgICAgICB2YXIgaW5mbyA9ICcnO1xuICAgICAgICBpZiAoYW5jZXN0b3JUYWcgPT09ICd0YWJsZScgJiYgY2hpbGRUYWcgPT09ICd0cicpIHtcbiAgICAgICAgICBpbmZvICs9ICcgQWRkIGEgPHRib2R5PiB0byB5b3VyIGNvZGUgdG8gbWF0Y2ggdGhlIERPTSB0cmVlIGdlbmVyYXRlZCBieSAnICsgJ3RoZSBicm93c2VyLic7XG4gICAgICAgIH1cbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICd2YWxpZGF0ZURPTU5lc3RpbmcoLi4uKTogPCVzPiBjYW5ub3QgYXBwZWFyIGFzIGEgY2hpbGQgb2YgPCVzPi4gJyArICdTZWUgJXMuJXMnLCBjaGlsZFRhZywgYW5jZXN0b3JUYWcsIG93bmVySW5mbywgaW5mbykgOiB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ3ZhbGlkYXRlRE9NTmVzdGluZyguLi4pOiA8JXM+IGNhbm5vdCBhcHBlYXIgYXMgYSBkZXNjZW5kYW50IG9mICcgKyAnPCVzPi4gU2VlICVzLicsIGNoaWxkVGFnLCBhbmNlc3RvclRhZywgb3duZXJJbmZvKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFsaWRhdGVET01OZXN0aW5nLmFuY2VzdG9ySW5mb0NvbnRleHRLZXkgPSAnX192YWxpZGF0ZURPTU5lc3RpbmdfYW5jZXN0b3JJbmZvJCcgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtcblxuICB2YWxpZGF0ZURPTU5lc3RpbmcudXBkYXRlZEFuY2VzdG9ySW5mbyA9IHVwZGF0ZWRBbmNlc3RvckluZm87XG5cbiAgLy8gRm9yIHRlc3RpbmdcbiAgdmFsaWRhdGVET01OZXN0aW5nLmlzVGFnVmFsaWRJbkNvbnRleHQgPSBmdW5jdGlvbiAodGFnLCBhbmNlc3RvckluZm8pIHtcbiAgICBhbmNlc3RvckluZm8gPSBhbmNlc3RvckluZm8gfHwgZW1wdHlBbmNlc3RvckluZm87XG4gICAgdmFyIHBhcmVudEluZm8gPSBhbmNlc3RvckluZm8ucGFyZW50VGFnO1xuICAgIHZhciBwYXJlbnRUYWcgPSBwYXJlbnRJbmZvICYmIHBhcmVudEluZm8udGFnO1xuICAgIHJldHVybiBpc1RhZ1ZhbGlkV2l0aFBhcmVudCh0YWcsIHBhcmVudFRhZykgJiYgIWZpbmRJbnZhbGlkQW5jZXN0b3JGb3JUYWcodGFnLCBhbmNlc3RvckluZm8pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZhbGlkYXRlRE9NTmVzdGluZzsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvUmVhY3QnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0cikge1xuXHRyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCkqXS9nLCBmdW5jdGlvbiAoYykge1xuXHRcdHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdH0pO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIl19
